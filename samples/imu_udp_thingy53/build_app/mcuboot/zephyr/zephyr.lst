
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	48 a1 05 20 3d 41 00 00 c7 ba 00 00 11 41 00 00     H.. =A.......A..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	11 41 00 00 11 41 00 00 11 41 00 00 11 41 00 00     .A...A...A...A..
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	69 3e 00 00 11 41 00 00 00 00 00 00 11 3e 00 00     i>...A.......>..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	11 41 00 00                                         .A..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
			switch (*fmt) {
  c0:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
  d0:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
  e0:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
  f0:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
 100:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
 110:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
				align = VA_STACK_ALIGN(void *);
 120:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
			switch (*fmt) {
 130:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
 140:	e9 3e 00 00 e9 3e 00 00 e9 3e 00 00 e9 3e 00 00     .>...>...>...>..
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 150:	e9 3e 00 00                                         .>..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
		if (is_str_arg) {
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
			int v = va_arg(ap, int);
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     174:	f000 f808 	bl	188 <__udivmoddi4>
				parsing = false;
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				if (fmt[-1] == 'l') {
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				parsing = false;
     18c:	4686      	mov	lr, r0
					if (fmt[-2] == 'l') {
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
						align = VA_STACK_ALIGN(long long);
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
				size = sizeof(void *);
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
					v.ld = va_arg(ap, long double);
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x66>
     1a0:	4285      	cmp	r5, r0
				buf = (void *) ROUND_UP(buf, align);
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x34>
					v.ld = va_arg(ap, long double);
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
					if (BUF_OFFSET + size > len) {
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
						*(long double *)buf = v.ld;
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
				parsing = false;
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
			if (*++fmt == '\0') {
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
			if (!parsing) {
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
				if (*fmt == '%') {
     1d8:	d928      	bls.n	22c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2c>
     1da:	18eb      	adds	r3, r5, r3
					parsing = true;
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
					arg_idx++;
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
				align = VA_STACK_ALIGN(size_t);
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
			switch (*fmt) {
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
				parsing = false;
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x30>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20c:	d204      	bcs.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     20e:	42a0      	cmp	r0, r4
				}
			}
			buf += sizeof(long long);
     210:	d902      	bls.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     212:	f1ac 0302 	sub.w	r3, ip, #2
		if (is_str_arg) {
     216:	442c      	add	r4, r5
		} else if (size == sizeof(int)) {
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			int v = va_arg(ap, int);
     21e:	b11e      	cbz	r6, 228 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x28>
			if (buf0 != NULL) {
     220:	40d4      	lsrs	r4, r2
		} else if (size == sizeof(long long)) {
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
			long long v = va_arg(ap, long long);
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
			if (buf0 != NULL) {
     232:	e7f1      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
			s = va_arg(ap, char *);
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
			if (is_ro && !do_ro) {
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24a:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     254:	d961      	bls.n	31a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x5e>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <__data_size+0x24>
				if (buf0 != NULL) {
     25e:	4598      	cmp	r8, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     260:	d902      	bls.n	268 <__data_size+0x24>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
					str_ptr_arg[s_idx] = arg_idx;
     268:	eba3 0308 	sub.w	r3, r3, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 331c 	mls	r3, lr, ip, r3
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x62>
     282:	192c      	adds	r4, r5, r4
						s_ro_cnt++;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
				s_idx++;
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
					if (BUF_OFFSET + size > len) {
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
			switch (*fmt) {
     28e:	f1ac 0302 	sub.w	r3, ip, #2
			buf += sizeof(char *);
     292:	442c      	add	r4, r5
					if (BUF_OFFSET + size > len) {
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e7c0      	b.n	21e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
				} else if (is_ro) {
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
					len += 1;
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
				} else if (rws_pos_en) {
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					len += strlen(s) + 1 + 1;
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2ca:	d922      	bls.n	312 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x56>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x22>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x22>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	4429      	add	r1, r5
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
	if (rws_pos_en) {
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
		for (i = 0; i < s_idx; i++) {
     2f6:	d90e      	bls.n	316 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x5a>
     2f8:	18eb      	adds	r3, r5, r3
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		for (i = 0; i < s_idx; i++) {
     2fe:	d204      	bcs.n	30a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x4e>
     300:	429f      	cmp	r7, r3
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	d902      	bls.n	30a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x4e>
     304:	f1ac 0102 	sub.w	r1, ip, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     310:	e793      	b.n	23a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x3a>
     312:	4660      	mov	r0, ip
	for (i = 0; i < s_idx; i++) {
     314:	e7e3      	b.n	2de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x22>
     316:	4661      	mov	r1, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	e7f7      	b.n	30a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x4e>
     31a:	4660      	mov	r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e7a4      	b.n	268 <__data_size+0x24>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	4663      	mov	r3, ip
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x78>
     326:	b916      	cbnz	r6, 32e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x72>
			if (BUF_OFFSET + 1 > len) {
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x28>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			if (BUF_OFFSET + 1 > len) {
     332:	e7f9      	b.n	328 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x6c>
     334:	fab3 f783 	clz	r7, r3
			*buf++ = pos;
     338:	b98f      	cbnz	r7, 35e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xa2>
		for (i = 0; i < s_idx; i++) {
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x86>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x98>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
		if (rws_pos_en) {
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x9c>
			*buf++ = str_ptr_arg[i];
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x28>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x92>
			size = 0;
     358:	e9c6 4c00 	strd	r4, ip, [r6]
		if (BUF_OFFSET + 1 + size > len) {
     35c:	e7f8      	b.n	350 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x94>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
		*buf++ = str_ptr_pos[i];
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
		memcpy(buf, s, size);
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
		buf += size;
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	for (i = 0; i < s_idx; i++) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
			size = strlen(s) + 1;
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     396:	459a      	cmp	sl, r3
			size = strlen(s) + 1;
     398:	d940      	bls.n	41c <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
		return -EFAULT;
     3a0:	d204      	bcs.n	3ac <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf0>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf0>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x11c>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x11c>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x136>
     3ec:	d106      	bne.n	3fc <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x140>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x140>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x94>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x94>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf0>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x11c>

00000424 <main>:
    return (bool)pin_active;
}
#endif

void main(void)
{
     424:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     426:	4b41      	ldr	r3, [pc, #260]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     428:	4a41      	ldr	r2, [pc, #260]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     42a:	b085      	sub	sp, #20
     42c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     430:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     434:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     438:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     43c:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     440:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     444:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     448:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
     44c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
     450:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     454:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     458:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     45c:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     460:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     464:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     468:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     46c:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     470:	f000 f882 	bl	578 <os_heap_init>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     474:	4c2f      	ldr	r4, [pc, #188]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     476:	4620      	mov	r0, r4
     478:	f00d fd0b 	bl	de92 <z_device_is_ready>
    if (!device_is_ready(button0.port)) {
     47c:	b300      	cbz	r0, 4c0 <FIH_LABEL_FIH_CALL_START_597>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     47e:	6925      	ldr	r5, [r4, #16]
	const struct gpio_driver_api *api =
     480:	68a6      	ldr	r6, [r4, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     482:	682b      	ldr	r3, [r5, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     484:	210d      	movs	r1, #13
		data->invert |= (gpio_port_pins_t)BIT(pin);
     486:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     48a:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
     48c:	4620      	mov	r0, r4
     48e:	6833      	ldr	r3, [r6, #0]
     490:	4a29      	ldr	r2, [pc, #164]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     492:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     494:	4620      	mov	r0, r4
     496:	6873      	ldr	r3, [r6, #4]
     498:	a901      	add	r1, sp, #4
     49a:	4798      	blx	r3
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
     49c:	b920      	cbnz	r0, 4a8 <main+0x84>
		*value ^= data->invert;
     49e:	682a      	ldr	r2, [r5, #0]
     4a0:	9b01      	ldr	r3, [sp, #4]
     4a2:	4053      	eors	r3, r2
    (void)rc;

    mcuboot_status_change(MCUBOOT_STATUS_STARTUP);

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin() &&
     4a4:	049a      	lsls	r2, r3, #18
     4a6:	d50b      	bpl.n	4c0 <FIH_LABEL_FIH_CALL_START_597>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE uint32_t nrf_reset_resetreas_get(NRF_RESET_Type const * p_reg)
{
    return p_reg->RESETREAS;
     4a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     4ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     4b0:	b10b      	cbz	r3, 4b6 <main+0x92>
     4b2:	07db      	lsls	r3, r3, #31
     4b4:	d504      	bpl.n	4c0 <FIH_LABEL_FIH_CALL_START_597>
#endif

        mcuboot_status_change(MCUBOOT_STATUS_SERIAL_DFU_ENTERED);

        BOOT_LOG_INF("Enter the serial recovery mode");
        rc = boot_console_init();
     4b6:	f002 ff11 	bl	32dc <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     4ba:	4820      	ldr	r0, [pc, #128]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     4bc:	f003 fa6c 	bl	3998 <boot_serial_start>

000004c0 <FIH_LABEL_FIH_CALL_START_597>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     4c0:	a801      	add	r0, sp, #4
     4c2:	f000 febf 	bl	1244 <boot_go>

000004c6 <FIH_LABEL_FIH_CALL_END_609>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     4c6:	4b1e      	ldr	r3, [pc, #120]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     4c8:	681b      	ldr	r3, [r3, #0]
     4ca:	4283      	cmp	r3, r0
     4cc:	d000      	beq.n	4d0 <FIH_LABEL_FIH_CALL_END_609+0xa>
        BOOT_LOG_ERR("Unable to find bootable image");

        mcuboot_status_change(MCUBOOT_STATUS_NO_BOOTABLE_IMAGE_FOUND);

        FIH_PANIC;
     4ce:	e7fe      	b.n	4ce <FIH_LABEL_FIH_CALL_END_609+0x8>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     4d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4d4:	2000      	movs	r0, #0
     4d6:	f005 ffaf 	bl	6438 <fprotect_area>

    if (rc != 0) {
     4da:	4604      	mov	r4, r0
     4dc:	b100      	cbz	r0, 4e0 <FIH_LABEL_FIH_CALL_END_609+0x1a>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
        while (1)
     4de:	e7fe      	b.n	4de <FIH_LABEL_FIH_CALL_END_609+0x18>
            ;
    }

#endif /* USE_PARTITION_MANAGER && CONFIG_FPROTECT */
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && defined(PM_CPUNET_B0N_ADDRESS)
    pcd_lock_ram();
     4e0:	f006 f852 	bl	6588 <pcd_lock_ram>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4e4:	4669      	mov	r1, sp
     4e6:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4ea:	f009 ffb8 	bl	a45e <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4ee:	9b00      	ldr	r3, [sp, #0]
     4f0:	9d03      	ldr	r5, [sp, #12]
     4f2:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     4f4:	9b01      	ldr	r3, [sp, #4]
     4f6:	891e      	ldrh	r6, [r3, #8]
    usb_disable();
     4f8:	f001 fee0 	bl	22bc <usb_disable>
                                     rsp->br_image_off +
     4fc:	19af      	adds	r7, r5, r6
    nrf_cleanup_peripheral();
     4fe:	f000 fecd 	bl	129c <nrf_cleanup_peripheral>
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     502:	f000 feaf 	bl	1264 <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     506:	f003 fe5b 	bl	41c0 <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     50a:	f384 880b 	msr	PSPLIM, r4
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     50e:	f384 880a 	msr	MSPLIM, r4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     512:	59ab      	ldr	r3, [r5, r6]
     514:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     518:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     51c:	f3bf 8f6f 	isb	sy
     520:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     524:	687b      	ldr	r3, [r7, #4]
     526:	4798      	blx	r3
    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
    while (1)
     528:	e7fe      	b.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
     52a:	bf00      	nop
     52c:	6e524635 	.word	0x6e524635
     530:	50018000 	.word	0x50018000
     534:	0000e600 	.word	0x0000e600
     538:	00010011 	.word	0x00010011
     53c:	0000e9d8 	.word	0x0000e9d8
     540:	20002740 	.word	0x20002740

00000544 <flash_area_id_from_direct_image>:
}

#if defined(CONFIG_MCUBOOT_SERIAL_DIRECT_IMAGE_UPLOAD)
int flash_area_id_from_direct_image(int image_id)
{
    switch (image_id) {
     544:	2804      	cmp	r0, #4
     546:	bf9a      	itte	ls
     548:	4b02      	ldrls	r3, [pc, #8]	; (554 <flash_area_id_from_direct_image+0x10>)
     54a:	5618      	ldrsbls	r0, [r3, r0]
{
     54c:	f06f 0015 	mvnhi.w	r0, #21
    case 4:
        return FIXED_PARTITION_ID(slot3_partition);
#endif
    }
    return -EINVAL;
}
     550:	4770      	bx	lr
     552:	bf00      	nop
     554:	0000ef52 	.word	0x0000ef52

00000558 <flash_area_sector_from_off>:
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     55a:	460c      	mov	r4, r1
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     55c:	4601      	mov	r1, r0
     55e:	aa01      	add	r2, sp, #4
     560:	4804      	ldr	r0, [pc, #16]	; (574 <flash_area_sector_from_off+0x1c>)
     562:	f00b fdc2 	bl	c0ea <z_impl_flash_get_page_info_by_offs>
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
    if (rc) {
     566:	b918      	cbnz	r0, 570 <flash_area_sector_from_off+0x18>
        return rc;
    }

    sector->fs_off = page.start_offset;
     568:	9b01      	ldr	r3, [sp, #4]
     56a:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     56c:	9b02      	ldr	r3, [sp, #8]
     56e:	6063      	str	r3, [r4, #4]

    return rc;
}
     570:	b004      	add	sp, #16
     572:	bd10      	pop	{r4, pc}
     574:	0000e660 	.word	0x0000e660

00000578 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     578:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     57c:	4801      	ldr	r0, [pc, #4]	; (584 <os_heap_init+0xc>)
     57e:	f006 ba89 	b.w	6a94 <mbedtls_memory_buffer_alloc_init>
     582:	bf00      	nop
     584:	200145e6 	.word	0x200145e6

00000588 <bs_peruser_system_specific>:
#endif
#endif /*MCUBOOT_MGMT_CUSTOM_IMG_LIST*/

int bs_peruser_system_specific(const struct nmgr_hdr *hdr, const char *buffer,
                               int len, zcbor_state_t *cs)
{
     588:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     58a:	461c      	mov	r4, r3
    int mgmt_rc = MGMT_ERR_ENOTSUP;

    if (hdr->nh_group == ZEPHYR_MGMT_GRP_BASIC) {
     58c:	8883      	ldrh	r3, [r0, #4]
     58e:	4e1f      	ldr	r6, [pc, #124]	; (60c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x30>)
     590:	2b3f      	cmp	r3, #63	; 0x3f
     592:	d12e      	bne.n	5f2 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x16>
        if (hdr->nh_op == NMGR_OP_WRITE) {
     594:	7803      	ldrb	r3, [r0, #0]
     596:	2b02      	cmp	r3, #2
     598:	d12b      	bne.n	5f2 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x16>
#ifdef CONFIG_BOOT_MGMT_CUSTOM_STORAGE_ERASE
            if (hdr->nh_id == ZEPHYR_MGMT_GRP_BASIC_CMD_ERASE_STORAGE) {
     59a:	79c5      	ldrb	r5, [r0, #7]
     59c:	bb4d      	cbnz	r5, 5f2 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x16>
    rc = flash_area_open(FIXED_PARTITION_ID(storage_partition), &fa);
     59e:	2009      	movs	r0, #9
     5a0:	a901      	add	r1, sp, #4
     5a2:	f002 fc9d 	bl	2ee0 <flash_area_open>
    if (rc < 0) {
     5a6:	2800      	cmp	r0, #0
     5a8:	db21      	blt.n	5ee <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x12>
        rc = flash_area_erase(fa, 0, flash_area_get_size(fa));
     5aa:	9801      	ldr	r0, [sp, #4]
     5ac:	4629      	mov	r1, r5
     5ae:	6882      	ldr	r2, [r0, #8]
     5b0:	f00a ff67 	bl	b482 <flash_area_erase>
     5b4:	4605      	mov	r5, r0
        flash_area_close(fa);
     5b6:	9801      	ldr	r0, [sp, #4]
     5b8:	f00a ff38 	bl	b42c <flash_area_close>
    if (rc == 0) {
     5bc:	3d00      	subs	r5, #0
     5be:	bf18      	it	ne
     5c0:	2501      	movne	r5, #1
    zcbor_map_start_encode(cs, 10);
     5c2:	210a      	movs	r1, #10
     5c4:	4620      	mov	r0, r4
     5c6:	f00b f9d4 	bl	b972 <zcbor_map_start_encode>
{
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
{
	return zcbor_tstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
     5ca:	2302      	movs	r3, #2
     5cc:	a902      	add	r1, sp, #8
     5ce:	4620      	mov	r0, r4
     5d0:	9602      	str	r6, [sp, #8]
     5d2:	9303      	str	r3, [sp, #12]
     5d4:	f00b f9bb 	bl	b94e <zcbor_tstr_encode>
    zcbor_uint32_put(cs, rc);
     5d8:	4629      	mov	r1, r5
    }

    if (mgmt_rc == MGMT_ERR_ENOTSUP) {
        zcbor_map_start_encode(cs, 10);
        zcbor_tstr_put_lit(cs, "rc");
        zcbor_uint32_put(cs, mgmt_rc);
     5da:	4620      	mov	r0, r4
     5dc:	f00b f9ab 	bl	b936 <zcbor_uint32_put>
        zcbor_map_end_encode(cs, 10);
     5e0:	210a      	movs	r1, #10
     5e2:	4620      	mov	r0, r4
     5e4:	f00b f9e3 	bl	b9ae <zcbor_map_end_encode>
    }

    return MGMT_ERR_OK;
}
     5e8:	2000      	movs	r0, #0
     5ea:	b004      	add	sp, #16
     5ec:	bd70      	pop	{r4, r5, r6, pc}
        rc = MGMT_ERR_EUNKNOWN;
     5ee:	2501      	movs	r5, #1
     5f0:	e7e7      	b.n	5c2 <bs_peruser_system_specific+0x3a>
        zcbor_map_start_encode(cs, 10);
     5f2:	210a      	movs	r1, #10
     5f4:	4620      	mov	r0, r4
     5f6:	f00b f9bc 	bl	b972 <zcbor_map_start_encode>
     5fa:	2302      	movs	r3, #2
     5fc:	a902      	add	r1, sp, #8
     5fe:	4620      	mov	r0, r4
     600:	9602      	str	r6, [sp, #8]
     602:	9303      	str	r3, [sp, #12]
     604:	f00b f9a3 	bl	b94e <zcbor_tstr_encode>
        zcbor_uint32_put(cs, mgmt_rc);
     608:	2108      	movs	r1, #8
     60a:	e7e6      	b.n	5da <bs_peruser_system_specific+0x52>
     60c:	0000ef57 	.word	0x0000ef57

00000610 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     614:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 7fc <FIH_LABEL_FIH_CALL_END_814+0x20>
{
     618:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     61a:	a838      	add	r0, sp, #224	; 0xe0
     61c:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
     620:	4617      	mov	r7, r2
     622:	461d      	mov	r5, r3
    fih_int valid_signature = FIH_FAILURE;
     624:	f8da 6000 	ldr.w	r6, [sl]
     628:	f00d f932 	bl	d890 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     62c:	2100      	movs	r1, #0
     62e:	a838      	add	r0, sp, #224	; 0xe0
     630:	f006 fb44 	bl	6cbc <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     634:	b13c      	cbz	r4, 646 <bootutil_img_validate+0x36>
     636:	f1b8 0f00 	cmp.w	r8, #0
     63a:	dd04      	ble.n	646 <bootutil_img_validate+0x36>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     63c:	4642      	mov	r2, r8
     63e:	4621      	mov	r1, r4
     640:	a838      	add	r0, sp, #224	; 0xe0
     642:	f00d f929 	bl	d898 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     646:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     64a:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     64c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     650:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     652:	68fb      	ldr	r3, [r7, #12]
     654:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     656:	45c8      	cmp	r8, r9
     658:	d821      	bhi.n	69e <bootutil_img_validate+0x8e>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     65a:	a90d      	add	r1, sp, #52	; 0x34
     65c:	a838      	add	r0, sp, #224	; 0xe0
     65e:	f00d f954 	bl	d90a <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     662:	9b86      	ldr	r3, [sp, #536]	; 0x218
     664:	b123      	cbz	r3, 670 <bootutil_img_validate+0x60>
        memcpy(out_hash, hash, 32);
     666:	2220      	movs	r2, #32
     668:	4618      	mov	r0, r3
     66a:	a90d      	add	r1, sp, #52	; 0x34
     66c:	f00b fa8a 	bl	bb84 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     670:	2300      	movs	r3, #0
     672:	462a      	mov	r2, r5
     674:	9300      	str	r3, [sp, #0]
     676:	4639      	mov	r1, r7
     678:	f64f 73ff 	movw	r3, #65535	; 0xffff
     67c:	a807      	add	r0, sp, #28
     67e:	f009 ff0b 	bl	a498 <bootutil_tlv_iter_begin>
    if (rc) {
     682:	4604      	mov	r4, r0
     684:	b938      	cbnz	r0, 696 <bootutil_img_validate+0x86>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     686:	4628      	mov	r0, r5
     688:	9f0c      	ldr	r7, [sp, #48]	; 0x30
     68a:	f009 ffb1 	bl	a5f0 <bootutil_max_image_size>
     68e:	4287      	cmp	r7, r0
     690:	d91b      	bls.n	6ca <bootutil_img_validate+0xba>
        rc = -1;
     692:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     696:	4620      	mov	r0, r4
     698:	b079      	add	sp, #484	; 0x1e4
     69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (blk_sz > tmp_buf_sz) {
     69e:	9b83      	ldr	r3, [sp, #524]	; 0x20c
        blk_sz = size - off;
     6a0:	eba8 0b09 	sub.w	fp, r8, r9
     6a4:	459b      	cmp	fp, r3
     6a6:	bf28      	it	cs
     6a8:	469b      	movcs	fp, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     6aa:	4649      	mov	r1, r9
     6ac:	465b      	mov	r3, fp
     6ae:	4628      	mov	r0, r5
     6b0:	9a82      	ldr	r2, [sp, #520]	; 0x208
     6b2:	f00a febc 	bl	b42e <flash_area_read>
        if (rc) {
     6b6:	4604      	mov	r4, r0
     6b8:	2800      	cmp	r0, #0
     6ba:	d1ec      	bne.n	696 <bootutil_img_validate+0x86>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     6bc:	465a      	mov	r2, fp
     6be:	9982      	ldr	r1, [sp, #520]	; 0x208
     6c0:	a838      	add	r0, sp, #224	; 0xe0
     6c2:	f00d f8e9 	bl	d898 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     6c6:	44d9      	add	r9, fp
     6c8:	e7c5      	b.n	656 <bootutil_img_validate+0x46>
    int key_id = -1;
     6ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6ce:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800 <CONFIG_BOOT_MAX_IMG_SECTORS>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     6d2:	f10d 0316 	add.w	r3, sp, #22
     6d6:	aa05      	add	r2, sp, #20
     6d8:	a906      	add	r1, sp, #24
     6da:	a807      	add	r0, sp, #28
     6dc:	f009 ff2a 	bl	a534 <bootutil_tlv_iter_next>
        if (rc < 0) {
     6e0:	f1b0 0800 	subs.w	r8, r0, #0
     6e4:	f2c0 8088 	blt.w	7f8 <FIH_LABEL_FIH_CALL_END_814+0x1c>
        } else if (rc > 0) {
     6e8:	d17b      	bne.n	7e2 <FIH_LABEL_FIH_CALL_END_814+0x6>
        if (type == IMAGE_TLV_SHA256) {
     6ea:	f8bd b016 	ldrh.w	fp, [sp, #22]
     6ee:	f1bb 0f10 	cmp.w	fp, #16
     6f2:	d118      	bne.n	726 <FIH_LABEL_FIH_CALL_END_576+0xc>
            if (len != sizeof(hash)) {
     6f4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
     6f8:	2c20      	cmp	r4, #32
     6fa:	d1ca      	bne.n	692 <bootutil_img_validate+0x82>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     6fc:	4623      	mov	r3, r4
     6fe:	4628      	mov	r0, r5
     700:	9906      	ldr	r1, [sp, #24]
     702:	aa38      	add	r2, sp, #224	; 0xe0
     704:	f00a fe93 	bl	b42e <flash_area_read>
            if (rc) {
     708:	4680      	mov	r8, r0
     70a:	2800      	cmp	r0, #0
     70c:	d174      	bne.n	7f8 <FIH_LABEL_FIH_CALL_END_814+0x1c>

0000070e <FIH_LABEL_FIH_CALL_START_559>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     70e:	4622      	mov	r2, r4
     710:	a938      	add	r1, sp, #224	; 0xe0
     712:	a80d      	add	r0, sp, #52	; 0x34
     714:	f009 ff5a 	bl	a5cc <boot_fih_memequal>
     718:	4604      	mov	r4, r0

0000071a <FIH_LABEL_FIH_CALL_END_576>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     71a:	4b3a      	ldr	r3, [pc, #232]	; (804 <CONFIG_BOOT_MAX_IMG_SECTORS+0x4>)
     71c:	681b      	ldr	r3, [r3, #0]
     71e:	4283      	cmp	r3, r0
     720:	d1b9      	bne.n	696 <bootutil_img_validate+0x86>
            sha256_valid = 1;
     722:	2401      	movs	r4, #1
     724:	e7d5      	b.n	6d2 <bootutil_img_validate+0xc2>
        } else if (type == IMAGE_TLV_KEYHASH) {
     726:	f1bb 0f01 	cmp.w	fp, #1
     72a:	d137      	bne.n	79c <FIH_LABEL_FIH_CALL_END_576+0x82>
            if (len > 32) {
     72c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     730:	2b20      	cmp	r3, #32
     732:	d8ae      	bhi.n	692 <bootutil_img_validate+0x82>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     734:	4628      	mov	r0, r5
     736:	9906      	ldr	r1, [sp, #24]
     738:	aa38      	add	r2, sp, #224	; 0xe0
     73a:	f00a fe78 	bl	b42e <flash_area_read>
            if (rc) {
     73e:	4680      	mov	r8, r0
     740:	2800      	cmp	r0, #0
     742:	d159      	bne.n	7f8 <FIH_LABEL_FIH_CALL_END_814+0x1c>
            key_id = bootutil_find_key(buf, len);
     744:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     748:	f1bb 0f20 	cmp.w	fp, #32
     74c:	d903      	bls.n	756 <FIH_LABEL_FIH_CALL_END_576+0x3c>
        return -1;
     74e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
            key_id = bootutil_find_key(buf, len);
     752:	4647      	mov	r7, r8
     754:	e7bd      	b.n	6d2 <bootutil_img_validate+0xc2>
    for (i = 0; i < bootutil_key_cnt; i++) {
     756:	f8d9 3000 	ldr.w	r3, [r9]
     75a:	4f2b      	ldr	r7, [pc, #172]	; (808 <CONFIG_BOOT_MAX_IMG_SECTORS+0x8>)
     75c:	9303      	str	r3, [sp, #12]
     75e:	9b03      	ldr	r3, [sp, #12]
     760:	4598      	cmp	r8, r3
     762:	daf4      	bge.n	74e <FIH_LABEL_FIH_CALL_END_576+0x34>
    mbedtls_sha256_init(ctx);
     764:	a81d      	add	r0, sp, #116	; 0x74
     766:	f00d f893 	bl	d890 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     76a:	2100      	movs	r1, #0
     76c:	a81d      	add	r0, sp, #116	; 0x74
     76e:	f006 faa5 	bl	6cbc <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     772:	687a      	ldr	r2, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     774:	a81d      	add	r0, sp, #116	; 0x74
     776:	6812      	ldr	r2, [r2, #0]
     778:	f857 1b08 	ldr.w	r1, [r7], #8
     77c:	f00d f88c 	bl	d898 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     780:	a915      	add	r1, sp, #84	; 0x54
     782:	a81d      	add	r0, sp, #116	; 0x74
     784:	f00d f8c1 	bl	d90a <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     788:	465a      	mov	r2, fp
     78a:	a938      	add	r1, sp, #224	; 0xe0
     78c:	a815      	add	r0, sp, #84	; 0x54
     78e:	f00b f9d2 	bl	bb36 <memcmp>
     792:	2800      	cmp	r0, #0
     794:	d0dd      	beq.n	752 <FIH_LABEL_FIH_CALL_END_576+0x38>
    for (i = 0; i < bootutil_key_cnt; i++) {
     796:	f108 0801 	add.w	r8, r8, #1
     79a:	e7e0      	b.n	75e <FIH_LABEL_FIH_CALL_END_576+0x44>
        } else if (type == EXPECTED_SIG_TLV) {
     79c:	f1bb 0f20 	cmp.w	fp, #32
     7a0:	d197      	bne.n	6d2 <bootutil_img_validate+0xc2>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     7a2:	1c7b      	adds	r3, r7, #1
     7a4:	d095      	beq.n	6d2 <bootutil_img_validate+0xc2>
     7a6:	f8d9 3000 	ldr.w	r3, [r9]
     7aa:	42bb      	cmp	r3, r7
     7ac:	dd16      	ble.n	7dc <FIH_LABEL_FIH_CALL_END_814>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     7ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     7b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     7b6:	f47f af6c 	bne.w	692 <bootutil_img_validate+0x82>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     7ba:	4628      	mov	r0, r5
     7bc:	9906      	ldr	r1, [sp, #24]
     7be:	aa38      	add	r2, sp, #224	; 0xe0
     7c0:	f00a fe35 	bl	b42e <flash_area_read>
            if (rc) {
     7c4:	4680      	mov	r8, r0
     7c6:	b9b8      	cbnz	r0, 7f8 <FIH_LABEL_FIH_CALL_END_814+0x1c>

000007c8 <FIH_LABEL_FIH_CALL_START_793>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     7c8:	b2ff      	uxtb	r7, r7
     7ca:	4659      	mov	r1, fp
     7cc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     7d0:	9700      	str	r7, [sp, #0]
     7d2:	aa38      	add	r2, sp, #224	; 0xe0
     7d4:	a80d      	add	r0, sp, #52	; 0x34
     7d6:	f000 f819 	bl	80c <bootutil_verify_sig>
     7da:	4606      	mov	r6, r0

000007dc <FIH_LABEL_FIH_CALL_END_814>:
            key_id = -1;
     7dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     7e0:	e777      	b.n	6d2 <bootutil_img_validate+0xc2>
    if (rc) {
     7e2:	b13c      	cbz	r4, 7f4 <FIH_LABEL_FIH_CALL_END_814+0x18>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     7e4:	4b07      	ldr	r3, [pc, #28]	; (804 <CONFIG_BOOT_MAX_IMG_SECTORS+0x4>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     7e6:	681b      	ldr	r3, [r3, #0]
     7e8:	42b3      	cmp	r3, r6
        return FIH_FAILURE;
     7ea:	bf18      	it	ne
     7ec:	f8da 6000 	ldrne.w	r6, [sl]
        return -1;
     7f0:	4634      	mov	r4, r6
     7f2:	e750      	b.n	696 <bootutil_img_validate+0x86>
    rc = !sha256_valid;
     7f4:	f04f 0801 	mov.w	r8, #1
        return -1;
     7f8:	4644      	mov	r4, r8
     7fa:	e74c      	b.n	696 <bootutil_img_validate+0x86>
     7fc:	20002000 	.word	0x20002000
     800:	0000e9e0 	.word	0x0000e9e0
     804:	20002740 	.word	0x20002740
     808:	0000e9e4 	.word	0x0000e9e4

0000080c <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     810:	461f      	mov	r7, r3
     812:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    mbedtls_rsa_context ctx;
    int rc;
    fih_int fih_rc = FIH_FAILURE;
     816:	4b6a      	ldr	r3, [pc, #424]	; (9c0 <FIH_LABEL_FIH_CALL_END_650+0x2>)
{
     818:	4680      	mov	r8, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     81a:	a827      	add	r0, sp, #156	; 0x9c
{
     81c:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
     820:	468a      	mov	sl, r1
     822:	4691      	mov	r9, r2
    fih_int fih_rc = FIH_FAILURE;
     824:	681d      	ldr	r5, [r3, #0]
    mbedtls_rsa_init(&ctx);
     826:	f00c fff0 	bl	d80a <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     82a:	4b66      	ldr	r3, [pc, #408]	; (9c4 <FIH_LABEL_FIH_CALL_END_650+0x6>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     82c:	aa8a      	add	r2, sp, #552	; 0x228
    cp = (uint8_t *)bootutil_keys[key_id].key;
     82e:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     832:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     836:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     838:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     83a:	681b      	ldr	r3, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     83c:	a802      	add	r0, sp, #8
    end = cp + *bootutil_keys[key_id].len;
     83e:	441c      	add	r4, r3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     840:	4621      	mov	r1, r4
     842:	2330      	movs	r3, #48	; 0x30
     844:	f00b fd75 	bl	c332 <mbedtls_asn1_get_tag>
     848:	bb68      	cbnz	r0, 8a6 <bootutil_verify_sig+0x9a>
    if (*p + len != end) {
     84a:	9b02      	ldr	r3, [sp, #8]
     84c:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     84e:	4413      	add	r3, r2
     850:	429c      	cmp	r4, r3
     852:	d128      	bne.n	8a6 <bootutil_verify_sig+0x9a>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     854:	4621      	mov	r1, r4
     856:	aa29      	add	r2, sp, #164	; 0xa4
     858:	a802      	add	r0, sp, #8
     85a:	f00b fd7e 	bl	c35a <mbedtls_asn1_get_mpi>
     85e:	bb10      	cbnz	r0, 8a6 <bootutil_verify_sig+0x9a>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     860:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     864:	465a      	mov	r2, fp
     866:	4621      	mov	r1, r4
     868:	a802      	add	r0, sp, #8
     86a:	f00b fd76 	bl	c35a <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     86e:	4606      	mov	r6, r0
     870:	b9c8      	cbnz	r0, 8a6 <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     872:	a829      	add	r0, sp, #164	; 0xa4
     874:	f00c f891 	bl	c99a <mbedtls_mpi_size>
    if (*p != end) {
     878:	9b02      	ldr	r3, [sp, #8]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     87a:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     87c:	429c      	cmp	r4, r3
     87e:	d112      	bne.n	8a6 <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     880:	4633      	mov	r3, r6
     882:	4632      	mov	r2, r6
     884:	e9cd 6b00 	strd	r6, fp, [sp]
     888:	a929      	add	r1, sp, #164	; 0xa4
     88a:	a827      	add	r0, sp, #156	; 0x9c
     88c:	f00c ff7a 	bl	d784 <mbedtls_rsa_import>
    if (rc != 0) {
     890:	b948      	cbnz	r0, 8a6 <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_check_pubkey(ctx);
     892:	a827      	add	r0, sp, #156	; 0x9c
     894:	f006 f9a4 	bl	6be0 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     898:	b928      	cbnz	r0, 8a6 <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     89a:	a829      	add	r0, sp, #164	; 0xa4
     89c:	f00c f87d 	bl	c99a <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     8a0:	4287      	cmp	r7, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     8a2:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     8a4:	d00a      	beq.n	8bc <FIH_LABEL_FIH_CALL_START_229>
        mbedtls_rsa_free(&ctx);
     8a6:	a827      	add	r0, sp, #156	; 0x9c
     8a8:	f00c ffb9 	bl	d81e <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     8ac:	a827      	add	r0, sp, #156	; 0x9c
     8ae:	f00c ffb6 	bl	d81e <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     8b2:	4628      	mov	r0, r5
     8b4:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000008bc <FIH_LABEL_FIH_CALL_START_229>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     8bc:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
     8c0:	d002      	beq.n	8c8 <FIH_LABEL_FIH_CALL_END_285+0x2>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

000008c6 <FIH_LABEL_FIH_CALL_END_285>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     8c6:	e7f1      	b.n	8ac <bootutil_verify_sig+0xa0>
    if (hlen != PSS_HLEN) {
     8c8:	f1ba 0f20 	cmp.w	sl, #32
     8cc:	d1f9      	bne.n	8c2 <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     8ce:	4649      	mov	r1, r9
     8d0:	aa8a      	add	r2, sp, #552	; 0x228
     8d2:	a827      	add	r0, sp, #156	; 0x9c
     8d4:	f006 f9aa 	bl	6c2c <mbedtls_rsa_public>
     8d8:	4604      	mov	r4, r0
     8da:	2800      	cmp	r0, #0
     8dc:	d1f1      	bne.n	8c2 <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     8de:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     8e2:	2bbc      	cmp	r3, #188	; 0xbc
     8e4:	d1ed      	bne.n	8c2 <FIH_LABEL_FIH_CALL_START_229+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     8e6:	af52      	add	r7, sp, #328	; 0x148
    int count = PSS_MASK_LEN;
     8e8:	26df      	movs	r6, #223	; 0xdf
     8ea:	463d      	mov	r5, r7
    uint8_t counter[4] = { 0, 0, 0, 0 };
     8ec:	9003      	str	r0, [sp, #12]
    mbedtls_sha256_init(ctx);
     8ee:	a80c      	add	r0, sp, #48	; 0x30
     8f0:	f00c ffce 	bl	d890 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     8f4:	2100      	movs	r1, #0
     8f6:	a80c      	add	r0, sp, #48	; 0x30
     8f8:	f006 f9e0 	bl	6cbc <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     8fc:	2220      	movs	r2, #32
     8fe:	f20d 3107 	addw	r1, sp, #775	; 0x307
     902:	a80c      	add	r0, sp, #48	; 0x30
     904:	f00c ffc8 	bl	d898 <mbedtls_sha256_update>
     908:	2204      	movs	r2, #4
     90a:	a903      	add	r1, sp, #12
     90c:	a80c      	add	r0, sp, #48	; 0x30
     90e:	f00c ffc3 	bl	d898 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     912:	a904      	add	r1, sp, #16
     914:	a80c      	add	r0, sp, #48	; 0x30
     916:	f00c fff8 	bl	d90a <mbedtls_sha256_finish>
        if (bytes > count)
     91a:	2e20      	cmp	r6, #32
     91c:	46b1      	mov	r9, r6
     91e:	bfa8      	it	ge
     920:	f04f 0920 	movge.w	r9, #32
        counter[3]++;
     924:	f89d 300f 	ldrb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     928:	4638      	mov	r0, r7
        counter[3]++;
     92a:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     92c:	464a      	mov	r2, r9
     92e:	a904      	add	r1, sp, #16
        count -= bytes;
     930:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     934:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     938:	f00b f924 	bl	bb84 <memcpy>
    while (count > 0) {
     93c:	2e00      	cmp	r6, #0
        mask += bytes;
     93e:	444f      	add	r7, r9
    while (count > 0) {
     940:	dcd5      	bgt.n	8ee <FIH_LABEL_FIH_CALL_END_285+0x28>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     942:	462f      	mov	r7, r5
     944:	4629      	mov	r1, r5
     946:	2200      	movs	r2, #0
     948:	ab8a      	add	r3, sp, #552	; 0x228
        db_mask[i] ^= em[i];
     94a:	7808      	ldrb	r0, [r1, #0]
     94c:	f813 6b01 	ldrb.w	r6, [r3], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     950:	3201      	adds	r2, #1
        db_mask[i] ^= em[i];
     952:	4070      	eors	r0, r6
    for (i = 0; i < PSS_MASK_LEN; i++) {
     954:	2adf      	cmp	r2, #223	; 0xdf
        db_mask[i] ^= em[i];
     956:	f801 0b01 	strb.w	r0, [r1], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     95a:	d1f6      	bne.n	94a <FIH_LABEL_FIH_CALL_END_285+0x84>
    db_mask[0] &= 0x7F;
     95c:	782b      	ldrb	r3, [r5, #0]
     95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     962:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     964:	f817 6b01 	ldrb.w	r6, [r7], #1
     968:	2e00      	cmp	r6, #0
     96a:	d1aa      	bne.n	8c2 <FIH_LABEL_FIH_CALL_START_229+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     96c:	3401      	adds	r4, #1
     96e:	2cbe      	cmp	r4, #190	; 0xbe
     970:	d1f8      	bne.n	964 <FIH_LABEL_FIH_CALL_END_285+0x9e>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     972:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     976:	2b01      	cmp	r3, #1
     978:	d1a3      	bne.n	8c2 <FIH_LABEL_FIH_CALL_START_229+0x6>
    mbedtls_sha256_init(ctx);
     97a:	a80c      	add	r0, sp, #48	; 0x30
     97c:	f00c ff88 	bl	d890 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     980:	4631      	mov	r1, r6
     982:	a80c      	add	r0, sp, #48	; 0x30
     984:	f006 f99a 	bl	6cbc <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     988:	2208      	movs	r2, #8
     98a:	490f      	ldr	r1, [pc, #60]	; (9c8 <FIH_LABEL_FIH_CALL_END_650+0xa>)
     98c:	a80c      	add	r0, sp, #48	; 0x30
     98e:	f00c ff83 	bl	d898 <mbedtls_sha256_update>
     992:	4641      	mov	r1, r8
     994:	2220      	movs	r2, #32
     996:	a80c      	add	r0, sp, #48	; 0x30
     998:	f00c ff7e 	bl	d898 <mbedtls_sha256_update>
     99c:	2220      	movs	r2, #32
     99e:	f20d 2107 	addw	r1, sp, #519	; 0x207
     9a2:	a80c      	add	r0, sp, #48	; 0x30
     9a4:	f00c ff78 	bl	d898 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     9a8:	a904      	add	r1, sp, #16
     9aa:	a80c      	add	r0, sp, #48	; 0x30
     9ac:	f00c ffad 	bl	d90a <mbedtls_sha256_finish>

000009b0 <FIH_LABEL_FIH_CALL_START_634>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     9b0:	2220      	movs	r2, #32
     9b2:	f20d 3107 	addw	r1, sp, #775	; 0x307
     9b6:	a804      	add	r0, sp, #16
     9b8:	f009 fe08 	bl	a5cc <boot_fih_memequal>
     9bc:	4605      	mov	r5, r0

000009be <FIH_LABEL_FIH_CALL_END_650>:
    if (rc) {
     9be:	e782      	b.n	8c6 <FIH_LABEL_FIH_CALL_END_285>
     9c0:	20002000 	.word	0x20002000
     9c4:	0000e9e4 	.word	0x0000e9e4
     9c8:	0000ef5a 	.word	0x0000ef5a

000009cc <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     9d0:	4b57      	ldr	r3, [pc, #348]	; (b30 <FIH_LABEL_FIH_CALL_END_611+0xd2>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     9d2:	b089      	sub	sp, #36	; 0x24
     9d4:	4604      	mov	r4, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9d6:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
boot_validate_slot(struct boot_loader_state *state, int slot,
     9da:	460e      	mov	r6, r1
    fih_int fih_rc = FIH_FAILURE;
     9dc:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9de:	f009 fd44 	bl	a46a <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     9e2:	a906      	add	r1, sp, #24
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9e4:	4680      	mov	r8, r0
    rc = flash_area_open(area_id, &fap);
     9e6:	b2c0      	uxtb	r0, r0
     9e8:	f002 fa7a 	bl	2ee0 <flash_area_open>
    if (rc != 0) {
     9ec:	2800      	cmp	r0, #0
     9ee:	d16c      	bne.n	aca <FIH_LABEL_FIH_CALL_END_611+0x6c>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     9f0:	f894 70b8 	ldrb.w	r7, [r4, #184]	; 0xb8
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9f4:	4631      	mov	r1, r6
     9f6:	4638      	mov	r0, r7
     9f8:	f009 fd37 	bl	a46a <flash_area_id_from_multi_image_slot>
     9fc:	f04f 092c 	mov.w	r9, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     a00:	a907      	add	r1, sp, #28
     a02:	b2c0      	uxtb	r0, r0
     a04:	fb09 f906 	mul.w	r9, r9, r6
     a08:	f002 fa6a 	bl	2ee0 <flash_area_open>
    if (rc != 0) {
     a0c:	2800      	cmp	r0, #0
     a0e:	d043      	beq.n	a98 <FIH_LABEL_FIH_CALL_END_611+0x3a>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a10:	f04f 0b58 	mov.w	fp, #88	; 0x58
     a14:	222c      	movs	r2, #44	; 0x2c
     a16:	fb0b f307 	mul.w	r3, fp, r7
     a1a:	fb02 3306 	mla	r3, r2, r6, r3
     a1e:	4423      	add	r3, r4
     a20:	691b      	ldr	r3, [r3, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     a22:	f013 0a10 	ands.w	sl, r3, #16
     a26:	d14c      	bne.n	ac2 <FIH_LABEL_FIH_CALL_END_611+0x64>

00000a28 <FIH_LABEL_FIH_CALL_START_522>:
            fih_rc = fih_int_encode(1);
            goto out;
        }
    }
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, fih_int_encode(BOOT_HOOK_REGULAR),
     a28:	4631      	mov	r1, r6
     a2a:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     a2e:	f005 fdc9 	bl	65c4 <boot_image_check_hook>
     a32:	4605      	mov	r5, r0

00000a34 <FIH_LABEL_FIH_CALL_END_537>:
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
     a34:	2801      	cmp	r0, #1
     a36:	d112      	bne.n	a5e <FIH_LABEL_FIH_CALL_END_611>

00000a38 <FIH_LABEL_FIH_CALL_START_551>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a38:	f44f 7380 	mov.w	r3, #256	; 0x100
     a3c:	fb07 920b 	mla	r2, r7, fp, r9
     a40:	9301      	str	r3, [sp, #4]
     a42:	e9cd aa03 	strd	sl, sl, [sp, #12]
     a46:	4b3b      	ldr	r3, [pc, #236]	; (b34 <FIH_LABEL_FIH_CALL_END_611+0xd6>)
     a48:	f8cd a008 	str.w	sl, [sp, #8]
     a4c:	9300      	str	r3, [sp, #0]
     a4e:	4650      	mov	r0, sl
     a50:	9b06      	ldr	r3, [sp, #24]
     a52:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     a56:	4422      	add	r2, r4
     a58:	f7ff fdda 	bl	610 <bootutil_img_validate>
     a5c:	4605      	mov	r5, r0

00000a5e <FIH_LABEL_FIH_CALL_END_611>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a5e:	2358      	movs	r3, #88	; 0x58
     a60:	435f      	muls	r7, r3
     a62:	232c      	movs	r3, #44	; 0x2c
     a64:	fb03 7706 	mla	r7, r3, r6, r7
     a68:	4a33      	ldr	r2, [pc, #204]	; (b38 <FIH_LABEL_FIH_CALL_END_611+0xda>)
     a6a:	59e1      	ldr	r1, [r4, r7]
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a6c:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a6e:	4291      	cmp	r1, r2
     a70:	eb04 0307 	add.w	r3, r4, r7
     a74:	d10a      	bne.n	a8c <FIH_LABEL_FIH_CALL_END_611+0x2e>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a76:	68da      	ldr	r2, [r3, #12]
     a78:	891b      	ldrh	r3, [r3, #8]
    if (a > UINT32_MAX - b) {
     a7a:	189b      	adds	r3, r3, r2
     a7c:	d206      	bcs.n	a8c <FIH_LABEL_FIH_CALL_END_611+0x2e>
    if (size >= flash_area_get_size(fap)) {
     a7e:	6882      	ldr	r2, [r0, #8]
     a80:	4293      	cmp	r3, r2
     a82:	d203      	bcs.n	a8c <FIH_LABEL_FIH_CALL_END_611+0x2e>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a84:	4b2d      	ldr	r3, [pc, #180]	; (b3c <FIH_LABEL_FIH_CALL_END_611+0xde>)
     a86:	681b      	ldr	r3, [r3, #0]
     a88:	42ab      	cmp	r3, r5
     a8a:	d022      	beq.n	ad2 <FIH_LABEL_FIH_CALL_END_611+0x74>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a8c:	b1ce      	cbz	r6, ac2 <FIH_LABEL_FIH_CALL_END_611+0x64>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     a8e:	2100      	movs	r1, #0
     a90:	6882      	ldr	r2, [r0, #8]
     a92:	f00a fcf6 	bl	b482 <flash_area_erase>
     a96:	e014      	b.n	ac2 <FIH_LABEL_FIH_CALL_END_611+0x64>
    erased_val = flash_area_erased_val(fap);
     a98:	9807      	ldr	r0, [sp, #28]
     a9a:	f00a fd0d 	bl	b4b8 <flash_area_erased_val>
     a9e:	4605      	mov	r5, r0
    flash_area_close(fap);
     aa0:	9807      	ldr	r0, [sp, #28]
     aa2:	f00a fcc3 	bl	b42c <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
     aa6:	2358      	movs	r3, #88	; 0x58
     aa8:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
     aac:	fb02 9303 	mla	r3, r2, r3, r9
     ab0:	4423      	add	r3, r4
    for (i = 0; i < len; i++) {
     ab2:	1e5a      	subs	r2, r3, #1
     ab4:	3303      	adds	r3, #3
        if (val != p[i]) {
     ab6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     aba:	42a9      	cmp	r1, r5
     abc:	d1a8      	bne.n	a10 <boot_validate_slot.isra.0+0x44>
    for (i = 0; i < len; i++) {
     abe:	4293      	cmp	r3, r2
     ac0:	d1f9      	bne.n	ab6 <FIH_LABEL_FIH_CALL_END_611+0x58>
        fih_rc = fih_int_encode(1);
     ac2:	2501      	movs	r5, #1
        }
    }
#endif

out:
    flash_area_close(fap);
     ac4:	9806      	ldr	r0, [sp, #24]
     ac6:	f00a fcb1 	bl	b42c <flash_area_close>

    FIH_RET(fih_rc);
}
     aca:	4628      	mov	r0, r5
     acc:	b009      	add	sp, #36	; 0x24
     ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     ad2:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     ad6:	b343      	cbz	r3, b2a <FIH_LABEL_FIH_CALL_END_611+0xcc>
     ad8:	2b01      	cmp	r3, #1
     ada:	bf0c      	ite	eq
     adc:	2208      	moveq	r2, #8
     ade:	22ff      	movne	r2, #255	; 0xff
     ae0:	4590      	cmp	r8, r2
     ae2:	d1ef      	bne.n	ac4 <FIH_LABEL_FIH_CALL_END_611+0x66>
        const struct flash_area *pri_fa = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT);
     ae4:	2258      	movs	r2, #88	; 0x58
     ae6:	4353      	muls	r3, r2
     ae8:	18e2      	adds	r2, r4, r3
     aea:	6a17      	ldr	r7, [r2, #32]
        uint32_t reset_value = 0;
     aec:	2200      	movs	r2, #0
     aee:	9207      	str	r2, [sp, #28]
        uint32_t reset_addr = secondary_hdr->ih_hdr_size + sizeof(reset_value);
     af0:	222c      	movs	r2, #44	; 0x2c
     af2:	fb02 3306 	mla	r3, r2, r6, r3
     af6:	4423      	add	r3, r4
     af8:	8919      	ldrh	r1, [r3, #8]
        rc = flash_area_read(fap, reset_addr, &reset_value, sizeof(reset_value));
     afa:	2304      	movs	r3, #4
     afc:	aa07      	add	r2, sp, #28
     afe:	4419      	add	r1, r3
     b00:	f00a fc95 	bl	b42e <flash_area_read>
        if (rc != 0) {
     b04:	2800      	cmp	r0, #0
     b06:	d1dc      	bne.n	ac2 <FIH_LABEL_FIH_CALL_END_611+0x64>
        if (BOOT_CURR_IMG(state) == 1) {
     b08:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (reset_value < min_addr || reset_value> (max_addr)) {
     b0c:	9907      	ldr	r1, [sp, #28]
        if (BOOT_CURR_IMG(state) == 1) {
     b0e:	2b01      	cmp	r3, #1
            min_addr = PM_CPUNET_APP_ADDRESS;
     b10:	bf0b      	itete	eq
     b12:	4a0b      	ldreq	r2, [pc, #44]	; (b40 <FIH_LABEL_FIH_CALL_END_611+0xe2>)
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     b14:	e9d7 2301 	ldrdne	r2, r3, [r7, #4]
            max_addr = PM_CPUNET_APP_ADDRESS + PM_CPUNET_APP_SIZE;
     b18:	f04f 7382 	moveq.w	r3, #17039360	; 0x1040000
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     b1c:	189b      	addne	r3, r3, r2
        if (reset_value < min_addr || reset_value> (max_addr)) {
     b1e:	4291      	cmp	r1, r2
     b20:	d301      	bcc.n	b26 <FIH_LABEL_FIH_CALL_END_611+0xc8>
     b22:	4299      	cmp	r1, r3
     b24:	d9ce      	bls.n	ac4 <FIH_LABEL_FIH_CALL_END_611+0x66>
            flash_area_erase(fap, 0, fap->fa_size);
     b26:	9806      	ldr	r0, [sp, #24]
     b28:	e7b1      	b.n	a8e <FIH_LABEL_FIH_CALL_END_611+0x30>
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     b2a:	2202      	movs	r2, #2
     b2c:	e7d8      	b.n	ae0 <FIH_LABEL_FIH_CALL_END_611+0x82>
     b2e:	bf00      	nop
     b30:	20002000 	.word	0x20002000
     b34:	20015de6 	.word	0x20015de6
     b38:	96f3b83d 	.word	0x96f3b83d
     b3c:	20002740 	.word	0x20002740
     b40:	01008800 	.word	0x01008800

00000b44 <boot_copy_region>:
int
boot_copy_region(struct boot_loader_state *state,
                 const struct flash_area *fap_src,
                 const struct flash_area *fap_dst,
                 uint32_t off_src, uint32_t off_dst, uint32_t sz)
{
     b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b48:	4688      	mov	r8, r1
     b4a:	4691      	mov	r9, r2
     b4c:	469a      	mov	sl, r3

#if !defined(MCUBOOT_ENC_IMAGES)
    (void)state;
#endif

    bytes_copied = 0;
     b4e:	2600      	movs	r6, #0
            chunk_sz = sizeof buf;
        } else {
            chunk_sz = sz - bytes_copied;
        }

        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b50:	f8df b08c 	ldr.w	fp, [pc, #140]	; be0 <boot_copy_region+0x9c>
     b54:	4d23      	ldr	r5, [pc, #140]	; (be4 <boot_copy_region+0xa0>)
     b56:	4c24      	ldr	r4, [pc, #144]	; (be8 <boot_copy_region+0xa4>)
    while (bytes_copied < sz) {
     b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b5a:	429e      	cmp	r6, r3
     b5c:	d301      	bcc.n	b62 <boot_copy_region+0x1e>
        bytes_copied += chunk_sz;

        MCUBOOT_WATCHDOG_FEED();
    }

    return 0;
     b5e:	2000      	movs	r0, #0
     b60:	e00f      	b.n	b82 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b64:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     b66:	1b9f      	subs	r7, r3, r6
     b68:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b6c:	bf28      	it	cs
     b6e:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b72:	4a1b      	ldr	r2, [pc, #108]	; (be0 <boot_copy_region+0x9c>)
     b74:	463b      	mov	r3, r7
     b76:	eb06 010a 	add.w	r1, r6, sl
     b7a:	f00a fc58 	bl	b42e <flash_area_read>
        if (rc != 0) {
     b7e:	b110      	cbz	r0, b86 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b80:	2001      	movs	r0, #1
}
     b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b86:	990a      	ldr	r1, [sp, #40]	; 0x28
     b88:	463b      	mov	r3, r7
     b8a:	465a      	mov	r2, fp
     b8c:	4648      	mov	r0, r9
     b8e:	1871      	adds	r1, r6, r1
     b90:	f00a fc62 	bl	b458 <flash_area_write>
        if (rc != 0) {
     b94:	2800      	cmp	r0, #0
     b96:	d1f3      	bne.n	b80 <boot_copy_region+0x3c>
     b98:	4b14      	ldr	r3, [pc, #80]	; (bec <boot_copy_region+0xa8>)
     b9a:	f8c5 4600 	str.w	r4, [r5, #1536]	; 0x600
        bytes_copied += chunk_sz;
     b9e:	443e      	add	r6, r7
     ba0:	f8c5 4604 	str.w	r4, [r5, #1540]	; 0x604
     ba4:	f8c5 4608 	str.w	r4, [r5, #1544]	; 0x608
     ba8:	f8c5 460c 	str.w	r4, [r5, #1548]	; 0x60c
     bac:	f8c5 4610 	str.w	r4, [r5, #1552]	; 0x610
     bb0:	f8c5 4614 	str.w	r4, [r5, #1556]	; 0x614
     bb4:	f8c5 4618 	str.w	r4, [r5, #1560]	; 0x618
     bb8:	f8c5 461c 	str.w	r4, [r5, #1564]	; 0x61c
     bbc:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
     bc0:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
     bc4:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
     bc8:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
     bcc:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
     bd0:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
     bd4:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
     bd8:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     bdc:	e7bc      	b.n	b58 <boot_copy_region+0x14>
     bde:	bf00      	nop
     be0:	20012744 	.word	0x20012744
     be4:	50018000 	.word	0x50018000
     be8:	6e524635 	.word	0x6e524635
     bec:	50019000 	.word	0x50019000

00000bf0 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Iterate over all the images. By the end of the loop the swap type has
     * to be determined for each image and all aborted swaps have to be
     * completed.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     bf4:	f04f 0800 	mov.w	r8, #0
{
     bf8:	4604      	mov	r4, r0
     bfa:	460f      	mov	r7, r1
    has_upgrade = false;
     bfc:	46c1      	mov	r9, r8
    int rc = -1;
     bfe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c02:	f04f 0b58 	mov.w	fp, #88	; 0x58
    fih_int fih_rc = FIH_FAILURE;
     c06:	4b74      	ldr	r3, [pc, #464]	; (dd8 <FIH_LABEL_FIH_CALL_END_2211+0x36>)
{
     c08:	b095      	sub	sp, #84	; 0x54
    fih_int fih_rc = FIH_FAILURE;
     c0a:	681e      	ldr	r6, [r3, #0]
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     c0c:	f1b8 0f01 	cmp.w	r8, #1
     c10:	f884 80b8 	strb.w	r8, [r4, #184]	; 0xb8
     c14:	d908      	bls.n	c28 <context_boot_go+0x38>
            has_upgrade = true;
        }
    }

#if (BOOT_IMAGE_NUMBER > 1)
    if (has_upgrade) {
     c16:	f1b9 0f00 	cmp.w	r9, #0
     c1a:	f000 8158 	beq.w	ece <FIH_LABEL_FIH_CALL_END_2211+0x12c>
     c1e:	2000      	movs	r0, #0
    return &BOOT_IMG(state, slot).hdr;
     c20:	252c      	movs	r5, #44	; 0x2c
     c22:	f04f 0858 	mov.w	r8, #88	; 0x58
     c26:	e0d2      	b.n	dce <FIH_LABEL_FIH_CALL_END_2211+0x2c>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     c28:	eb04 0308 	add.w	r3, r4, r8
     c2c:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
     c30:	2900      	cmp	r1, #0
     c32:	d14e      	bne.n	cd2 <context_boot_go+0xe2>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c34:	fb0b 4308 	mla	r3, fp, r8, r4
            primary_slot_sectors[image_index];
     c38:	4a68      	ldr	r2, [pc, #416]	; (ddc <FIH_LABEL_FIH_CALL_END_2211+0x3a>)
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c3a:	4640      	mov	r0, r8
            primary_slot_sectors[image_index];
     c3c:	eb02 3288 	add.w	r2, r2, r8, lsl #14
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c40:	625a      	str	r2, [r3, #36]	; 0x24
            secondary_slot_sectors[image_index];
     c42:	4a67      	ldr	r2, [pc, #412]	; (de0 <FIH_LABEL_FIH_CALL_END_2211+0x3e>)
     c44:	eb02 3288 	add.w	r2, r2, r8, lsl #14
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     c48:	651a      	str	r2, [r3, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c4a:	f009 fc0e 	bl	a46a <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c4e:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     c52:	b2c0      	uxtb	r0, r0
     c54:	fb0b 4101 	mla	r1, fp, r1, r4
     c58:	3120      	adds	r1, #32
     c5a:	f002 f941 	bl	2ee0 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c5e:	2101      	movs	r1, #1
     c60:	4640      	mov	r0, r8
     c62:	f009 fc02 	bl	a46a <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c66:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     c6a:	b2c0      	uxtb	r0, r0
     c6c:	fb0b 4101 	mla	r1, fp, r1, r4
     c70:	314c      	adds	r1, #76	; 0x4c
     c72:	f002 f935 	bl	2ee0 <flash_area_open>
     c76:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     c78:	4620      	mov	r0, r4
     c7a:	f009 fcec 	bl	a656 <boot_read_sectors>
    if (rc != 0) {
     c7e:	bb00      	cbnz	r0, cc2 <context_boot_go+0xd2>
    rc = boot_read_image_headers(state, false, NULL);
     c80:	2200      	movs	r2, #0
     c82:	4620      	mov	r0, r4
     c84:	4611      	mov	r1, r2
     c86:	f009 fd14 	bl	a6b2 <boot_read_image_headers>
    if (rc != 0) {
     c8a:	4682      	mov	sl, r0
     c8c:	b990      	cbnz	r0, cb4 <context_boot_go+0xc4>
    if (boot_slots_compatible(state)) {
     c8e:	4620      	mov	r0, r4
     c90:	f009 fd70 	bl	a774 <boot_slots_compatible>
     c94:	b170      	cbz	r0, cb4 <context_boot_go+0xc4>
        boot_status_reset(bs);
     c96:	a80a      	add	r0, sp, #40	; 0x28
     c98:	f009 fd3a 	bl	a710 <boot_status_reset>
        if (!boot_status_is_reset(bs)) {
     c9c:	f009 fd41 	bl	a722 <boot_status_is_reset>
     ca0:	4680      	mov	r8, r0
     ca2:	bb70      	cbnz	r0, d02 <context_boot_go+0x112>
    if (BOOT_CURR_IMG(state) == 0) {
     ca4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     ca8:	b9d3      	cbnz	r3, ce0 <context_boot_go+0xf0>
            rc = boot_read_image_headers(state, false, bs);
     caa:	2100      	movs	r1, #0
     cac:	4620      	mov	r0, r4
     cae:	aa0a      	add	r2, sp, #40	; 0x28
     cb0:	f009 fcff 	bl	a6b2 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cb4:	2201      	movs	r2, #1
     cb6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     cba:	4423      	add	r3, r4
     cbc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     cc0:	e007      	b.n	cd2 <context_boot_go+0xe2>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cc2:	2201      	movs	r2, #1
     cc4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (rc == BOOT_EFLASH)
     cc8:	4290      	cmp	r0, r2
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cca:	4423      	add	r3, r4
     ccc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        if (rc == BOOT_EFLASH)
     cd0:	d1d6      	bne.n	c80 <context_boot_go+0x90>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     cd2:	f894 80b8 	ldrb.w	r8, [r4, #184]	; 0xb8
     cd6:	f108 0801 	add.w	r8, r8, #1
     cda:	fa5f f888 	uxtb.w	r8, r8
     cde:	e795      	b.n	c0c <context_boot_go+0x1c>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     ce0:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     ce4:	2a04      	cmp	r2, #4
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     ce6:	bf04      	itt	eq
     ce8:	2201      	moveq	r2, #1
     cea:	f884 20b0 	strbeq.w	r2, [r4, #176]	; 0xb0
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     cee:	2b01      	cmp	r3, #1
     cf0:	d0db      	beq.n	caa <context_boot_go+0xba>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     cf2:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
     cf6:	2b04      	cmp	r3, #4
     cf8:	d1d7      	bne.n	caa <context_boot_go+0xba>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     cfa:	2301      	movs	r3, #1
     cfc:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     d00:	e7d3      	b.n	caa <context_boot_go+0xba>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     d02:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
     d06:	2b01      	cmp	r3, #1
     d08:	d147      	bne.n	d9a <FIH_LABEL_FIH_CALL_START_2197>
    const struct flash_area *secondary_fa =
     d0a:	2258      	movs	r2, #88	; 0x58
        BOOT_IMG_AREA(state, BOOT_SECONDARY_SLOT);
     d0c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    uint32_t reset_addr = 0;
     d10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    const struct flash_area *secondary_fa =
     d14:	fb02 4303 	mla	r3, r2, r3, r4
    if (hdr->ih_magic == IMAGE_MAGIC) {
     d18:	4a32      	ldr	r2, [pc, #200]	; (de4 <FIH_LABEL_FIH_CALL_END_2211+0x42>)
     d1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    const struct flash_area *secondary_fa =
     d1c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    if (hdr->ih_magic == IMAGE_MAGIC) {
     d1e:	4291      	cmp	r1, r2
     d20:	d011      	beq.n	d46 <FIH_LABEL_FIH_CALL_END_2032+0xc>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d22:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     d26:	f005 fcf5 	bl	6714 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d2a:	1e83      	subs	r3, r0, #2
     d2c:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d2e:	4682      	mov	sl, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d30:	d807      	bhi.n	d42 <FIH_LABEL_FIH_CALL_END_2032+0x8>

00000d32 <FIH_LABEL_FIH_CALL_START_2017>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d32:	2101      	movs	r1, #1
     d34:	4620      	mov	r0, r4
     d36:	f7ff fe49 	bl	9cc <boot_validate_slot.isra.0>

00000d3a <FIH_LABEL_FIH_CALL_END_2032>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d3a:	4b2b      	ldr	r3, [pc, #172]	; (de8 <FIH_LABEL_FIH_CALL_END_2211+0x46>)
     d3c:	681b      	ldr	r3, [r3, #0]
     d3e:	4298      	cmp	r0, r3
     d40:	d128      	bne.n	d94 <FIH_LABEL_FIH_CALL_END_2032+0x5a>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d42:	4650      	mov	r0, sl
     d44:	e008      	b.n	d58 <FIH_LABEL_FIH_CALL_END_2032+0x1e>
        rc = flash_area_read(secondary_fa, hdr->ih_hdr_size +
     d46:	8e99      	ldrh	r1, [r3, #52]	; 0x34
     d48:	2304      	movs	r3, #4
     d4a:	aa0e      	add	r2, sp, #56	; 0x38
     d4c:	4419      	add	r1, r3
     d4e:	f00a fb6e 	bl	b42e <flash_area_read>
        if (rc != 0) {
     d52:	2800      	cmp	r0, #0
     d54:	d0e5      	beq.n	d22 <context_boot_go+0x132>
            return BOOT_SWAP_TYPE_FAIL;
     d56:	2005      	movs	r0, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d58:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     d5c:	4423      	add	r3, r4
     d5e:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
    if (BOOT_CURR_IMG(state) == 0) {
     d62:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     d66:	b16b      	cbz	r3, d84 <FIH_LABEL_FIH_CALL_END_2032+0x4a>
        if ((BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_NONE) ||
     d68:	18e2      	adds	r2, r4, r3
     d6a:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
     d6e:	2a01      	cmp	r2, #1
     d70:	d0af      	beq.n	cd2 <context_boot_go+0xe2>
     d72:	2a04      	cmp	r2, #4
     d74:	d023      	beq.n	dbe <FIH_LABEL_FIH_CALL_END_2211+0x1c>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     d76:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     d7a:	2a04      	cmp	r2, #4
     d7c:	d102      	bne.n	d84 <FIH_LABEL_FIH_CALL_END_2032+0x4a>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     d7e:	2201      	movs	r2, #1
     d80:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     d84:	4423      	add	r3, r4
     d86:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
     d8a:	3b02      	subs	r3, #2
            has_upgrade = true;
     d8c:	2b02      	cmp	r3, #2
     d8e:	bf98      	it	ls
     d90:	46c1      	movls	r9, r8
     d92:	e79e      	b.n	cd2 <context_boot_go+0xe2>
            if (fih_eq(fih_rc, fih_int_encode(1))) {
     d94:	2801      	cmp	r0, #1
     d96:	d1de      	bne.n	d56 <FIH_LABEL_FIH_CALL_END_2032+0x1c>
     d98:	e7de      	b.n	d58 <FIH_LABEL_FIH_CALL_END_2032+0x1e>

00000d9a <FIH_LABEL_FIH_CALL_START_2197>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d9a:	2101      	movs	r1, #1
     d9c:	4620      	mov	r0, r4
     d9e:	f7ff fe15 	bl	9cc <boot_validate_slot.isra.0>

00000da2 <FIH_LABEL_FIH_CALL_END_2211>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     da2:	4b11      	ldr	r3, [pc, #68]	; (de8 <FIH_LABEL_FIH_CALL_END_2211+0x46>)
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     da8:	bf18      	it	ne
     daa:	2205      	movne	r2, #5
     dac:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     db0:	bf08      	it	eq
     db2:	f89d 202f 	ldrbeq.w	r2, [sp, #47]	; 0x2f
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     db6:	4423      	add	r3, r4
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     db8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     dbc:	e7d1      	b.n	d62 <FIH_LABEL_FIH_CALL_END_2032+0x28>
            has_upgrade = true;
     dbe:	46c1      	mov	r9, r8
     dc0:	e787      	b.n	cd2 <context_boot_go+0xe2>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     dc2:	1823      	adds	r3, r4, r0
     dc4:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
     dc8:	b182      	cbz	r2, dec <FIH_LABEL_FIH_CALL_END_2211+0x4a>
            BOOT_CURR_IMG(state)++;
     dca:	3001      	adds	r0, #1
     dcc:	b2c0      	uxtb	r0, r0
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     dce:	2801      	cmp	r0, #1
            BOOT_CURR_IMG(state)++;
     dd0:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     dd4:	d9f5      	bls.n	dc2 <FIH_LABEL_FIH_CALL_END_2211+0x20>
     dd6:	e079      	b.n	ecc <FIH_LABEL_FIH_CALL_END_2211+0x12a>
     dd8:	20002000 	.word	0x20002000
     ddc:	2000a744 	.word	0x2000a744
     de0:	20002744 	.word	0x20002744
     de4:	96f3b83d 	.word	0x96f3b83d
     de8:	20002740 	.word	0x20002740
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE &&
     dec:	f893 90b0 	ldrb.w	r9, [r3, #176]	; 0xb0
     df0:	f009 09fb 	and.w	r9, r9, #251	; 0xfb
     df4:	f1b9 0901 	subs.w	r9, r9, #1
     df8:	bf18      	it	ne
     dfa:	f04f 0901 	movne.w	r9, #1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     dfe:	4649      	mov	r1, r9
     e00:	f009 fb33 	bl	a46a <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     e04:	a905      	add	r1, sp, #20
     e06:	b2c0      	uxtb	r0, r0
     e08:	f002 f86a 	bl	2ee0 <flash_area_open>
    if (rc != 0) {
     e0c:	2800      	cmp	r0, #0
     e0e:	f040 809f 	bne.w	f50 <FIH_LABEL_FIH_CALL_END_2211+0x1ae>
    rc = bootutil_tlv_iter_begin(&it, boot_img_hdr(state, slot), fap,
     e12:	2301      	movs	r3, #1
     e14:	fb05 f909 	mul.w	r9, r5, r9
     e18:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     e1c:	9a05      	ldr	r2, [sp, #20]
     e1e:	fb18 9101 	smlabb	r1, r8, r1, r9
     e22:	9300      	str	r3, [sp, #0]
     e24:	4421      	add	r1, r4
     e26:	2340      	movs	r3, #64	; 0x40
     e28:	a80e      	add	r0, sp, #56	; 0x38
     e2a:	f009 fb35 	bl	a498 <bootutil_tlv_iter_begin>
    if (rc != 0) {
     e2e:	4681      	mov	r9, r0
     e30:	2800      	cmp	r0, #0
     e32:	f040 808f 	bne.w	f54 <FIH_LABEL_FIH_CALL_END_2211+0x1b2>
        rc = bootutil_tlv_iter_next(&it, &off, &len, NULL);
     e36:	2300      	movs	r3, #0
     e38:	f10d 0212 	add.w	r2, sp, #18
     e3c:	a906      	add	r1, sp, #24
     e3e:	a80e      	add	r0, sp, #56	; 0x38
     e40:	f009 fb78 	bl	a534 <bootutil_tlv_iter_next>
        if (rc < 0) {
     e44:	2800      	cmp	r0, #0
     e46:	db41      	blt.n	ecc <FIH_LABEL_FIH_CALL_END_2211+0x12a>
        rc = flash_area_read(fap, off, &dep, len);
     e48:	9805      	ldr	r0, [sp, #20]
        } else if (rc > 0) {
     e4a:	f040 8090 	bne.w	f6e <FIH_LABEL_FIH_CALL_END_2211+0x1cc>
        if (len != sizeof(dep)) {
     e4e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
     e52:	2b0c      	cmp	r3, #12
     e54:	f040 8089 	bne.w	f6a <FIH_LABEL_FIH_CALL_END_2211+0x1c8>
        rc = flash_area_read(fap, off, &dep, len);
     e58:	9906      	ldr	r1, [sp, #24]
     e5a:	aa07      	add	r2, sp, #28
     e5c:	f00a fae7 	bl	b42e <flash_area_read>
        if (rc != 0) {
     e60:	2800      	cmp	r0, #0
     e62:	f040 808d 	bne.w	f80 <FIH_LABEL_FIH_CALL_END_2211+0x1de>
        if (dep.image_id >= BOOT_IMAGE_NUMBER) {
     e66:	f89d 301c 	ldrb.w	r3, [sp, #28]
     e6a:	2b01      	cmp	r3, #1
     e6c:	f200 808b 	bhi.w	f86 <FIH_LABEL_FIH_CALL_END_2211+0x1e4>
    swap_type = state->swap_type[dep->image_id];
     e70:	18e2      	adds	r2, r4, r3
                                          : BOOT_PRIMARY_SLOT;
     e72:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
    if (ver1->iv_major > ver2->iv_major) {
     e76:	fb08 f303 	mul.w	r3, r8, r3
                                          : BOOT_PRIMARY_SLOT;
     e7a:	3a02      	subs	r2, #2
     e7c:	2a02      	cmp	r2, #2
     e7e:	bf8c      	ite	hi
     e80:	2200      	movhi	r2, #0
     e82:	2201      	movls	r2, #1
    if (ver1->iv_major > ver2->iv_major) {
     e84:	fb05 3302 	mla	r3, r5, r2, r3
     e88:	4423      	add	r3, r4
     e8a:	7d19      	ldrb	r1, [r3, #20]
     e8c:	f89d 2020 	ldrb.w	r2, [sp, #32]
     e90:	4291      	cmp	r1, r2
     e92:	d8d0      	bhi.n	e36 <FIH_LABEL_FIH_CALL_END_2211+0x94>
    if (ver1->iv_major < ver2->iv_major) {
     e94:	d30a      	bcc.n	eac <FIH_LABEL_FIH_CALL_END_2211+0x10a>
    if (ver1->iv_minor > ver2->iv_minor) {
     e96:	7d59      	ldrb	r1, [r3, #21]
     e98:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     e9c:	4291      	cmp	r1, r2
     e9e:	d8ca      	bhi.n	e36 <FIH_LABEL_FIH_CALL_END_2211+0x94>
    if (ver1->iv_minor < ver2->iv_minor) {
     ea0:	d304      	bcc.n	eac <FIH_LABEL_FIH_CALL_END_2211+0x10a>
    if (ver1->iv_revision < ver2->iv_revision) {
     ea2:	8ada      	ldrh	r2, [r3, #22]
     ea4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     ea8:	429a      	cmp	r2, r3
     eaa:	d2c4      	bcs.n	e36 <FIH_LABEL_FIH_CALL_END_2211+0x94>
        switch (BOOT_SWAP_TYPE(state)) {
     eac:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    flash_area_close(fap);
     eb0:	9805      	ldr	r0, [sp, #20]
        switch (BOOT_SWAP_TYPE(state)) {
     eb2:	4423      	add	r3, r4
     eb4:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
     eb8:	2a01      	cmp	r2, #1
     eba:	d047      	beq.n	f4c <FIH_LABEL_FIH_CALL_END_2211+0x1aa>
     ebc:	3a02      	subs	r2, #2
     ebe:	2a01      	cmp	r2, #1
     ec0:	d802      	bhi.n	ec8 <FIH_LABEL_FIH_CALL_END_2211+0x126>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     ec2:	2201      	movs	r2, #1
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     ec4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    flash_area_close(fap);
     ec8:	f00a fab0 	bl	b42c <flash_area_close>
        /* Iterate over all the images and verify whether the image dependencies
         * are all satisfied and update swap type if necessary.
         */
        rc = boot_verify_dependencies(state);
     ecc:	2500      	movs	r5, #0

    /* Iterate over all the images. At this point there are no aborted swaps
     * and the swap types are determined for each image. By the end of the loop
     * all required update operations will have been finished.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     ece:	f04f 0800 	mov.w	r8, #0
                break;
            }
            /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     ed2:	f04f 0958 	mov.w	r9, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     ed6:	f1b8 0f01 	cmp.w	r8, #1
     eda:	f884 80b8 	strb.w	r8, [r4, #184]	; 0xb8
     ede:	d955      	bls.n	f8c <FIH_LABEL_FIH_CALL_END_2211+0x1ea>
     ee0:	2300      	movs	r3, #0
        bool image_validated_by_nsib = BOOT_CURR_IMG(state) == 1;
        if (!image_validated_by_nsib)
#endif
        {
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     ee2:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 11c4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c4>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     ee6:	2b01      	cmp	r3, #1
     ee8:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     eec:	f240 816c 	bls.w	11c8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c8>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     ef0:	2210      	movs	r2, #16
     ef2:	2100      	movs	r1, #0
     ef4:	a80a      	add	r0, sp, #40	; 0x28
     ef6:	f00a fe50 	bl	bb9a <memset>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     efa:	2300      	movs	r3, #0
     efc:	2b02      	cmp	r3, #2
     efe:	f040 8183 	bne.w	1208 <FIH_LABEL_FIH_CALL_END_3875+0x16>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     f02:	2658      	movs	r6, #88	; 0x58
     f04:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     f08:	fb06 4303 	mla	r3, r6, r3, r4
     f0c:	6a18      	ldr	r0, [r3, #32]
     f0e:	f009 fac1 	bl	a494 <flash_area_get_device_id>
     f12:	7138      	strb	r0, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return flash_area_get_off(BOOT_IMG(state, slot).area);
     f14:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
     f18:	fb06 4202 	mla	r2, r6, r2, r4
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     f1c:	6a13      	ldr	r3, [r2, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     f1e:	685b      	ldr	r3, [r3, #4]
     f20:	60bb      	str	r3, [r7, #8]
    return &BOOT_IMG(state, slot).hdr;
     f22:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     f26:	fb03 4306 	mla	r3, r3, r6, r4
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     f2a:	603b      	str	r3, [r7, #0]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     f2c:	4ba5      	ldr	r3, [pc, #660]	; (11c4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c4>)
     f2e:	681e      	ldr	r6, [r3, #0]
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f30:	2300      	movs	r3, #0
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     f32:	2758      	movs	r7, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f34:	2b01      	cmp	r3, #1
     f36:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     f3a:	f240 816e 	bls.w	121a <FIH_LABEL_FIH_CALL_END_3875+0x28>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     f3e:	2d00      	cmp	r5, #0
     f40:	bf14      	ite	ne
     f42:	4628      	movne	r0, r5
     f44:	4630      	moveq	r0, r6
     f46:	b015      	add	sp, #84	; 0x54
     f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     f4c:	2204      	movs	r2, #4
     f4e:	e7b9      	b.n	ec4 <FIH_LABEL_FIH_CALL_END_2211+0x122>
    flash_area_close(fap);
     f50:	9805      	ldr	r0, [sp, #20]
     f52:	e7b9      	b.n	ec8 <FIH_LABEL_FIH_CALL_END_2211+0x126>
     f54:	9805      	ldr	r0, [sp, #20]
     f56:	f00a fa69 	bl	b42c <flash_area_close>
	} else if (rc == BOOT_EBADIMAGE) {
     f5a:	f1b9 0f03 	cmp.w	r9, #3
     f5e:	d1b5      	bne.n	ecc <FIH_LABEL_FIH_CALL_END_2211+0x12a>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     f60:	f240 1301 	movw	r3, #257	; 0x101
     f64:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
            for (int idx = 0; idx < BOOT_IMAGE_NUMBER; idx++) {
     f68:	e7b0      	b.n	ecc <FIH_LABEL_FIH_CALL_END_2211+0x12a>
            rc = BOOT_EBADIMAGE;
     f6a:	f04f 0903 	mov.w	r9, #3
    flash_area_close(fap);
     f6e:	9805      	ldr	r0, [sp, #20]
     f70:	f00a fa5c 	bl	b42c <flash_area_close>
        if (rc == 0) {
     f74:	f1b9 0f00 	cmp.w	r9, #0
     f78:	d1ef      	bne.n	f5a <FIH_LABEL_FIH_CALL_END_2211+0x1b8>
            BOOT_CURR_IMG(state)++;
     f7a:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     f7e:	e724      	b.n	dca <FIH_LABEL_FIH_CALL_END_2211+0x28>
        rc = BOOT_EFLASH;
     f80:	f04f 0901 	mov.w	r9, #1
     f84:	e7f3      	b.n	f6e <FIH_LABEL_FIH_CALL_END_2211+0x1cc>
            rc = BOOT_EBADARGS;
     f86:	f04f 0907 	mov.w	r9, #7
     f8a:	e7f0      	b.n	f6e <FIH_LABEL_FIH_CALL_END_2211+0x1cc>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     f8c:	eb04 0208 	add.w	r2, r4, r8
     f90:	f892 30b9 	ldrb.w	r3, [r2, #185]	; 0xb9
     f94:	2b00      	cmp	r3, #0
     f96:	f040 810e 	bne.w	11b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b6>
        boot_status_reset(&bs);
     f9a:	a80a      	add	r0, sp, #40	; 0x28
     f9c:	f009 fbb8 	bl	a710 <boot_status_reset>
        bs.swap_type = BOOT_SWAP_TYPE(state);
     fa0:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
        switch (BOOT_SWAP_TYPE(state)) {
     fa4:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     fa6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        switch (BOOT_SWAP_TYPE(state)) {
     faa:	d808      	bhi.n	fbe <FIH_LABEL_FIH_CALL_END_2211+0x21c>
     fac:	2b01      	cmp	r3, #1
     fae:	d808      	bhi.n	fc2 <FIH_LABEL_FIH_CALL_END_2211+0x220>
     fb0:	f000 80b3 	beq.w	111a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x11a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     fb8:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
     fbc:	e0ad      	b.n	111a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x11a>
        switch (BOOT_SWAP_TYPE(state)) {
     fbe:	2b05      	cmp	r3, #5
     fc0:	e7f6      	b.n	fb0 <FIH_LABEL_FIH_CALL_END_2211+0x20e>
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     fc2:	fb09 4308 	mla	r3, r9, r8, r4
     fc6:	4619      	mov	r1, r3
     fc8:	4640      	mov	r0, r8
     fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     fcc:	312c      	adds	r1, #44	; 0x2c
     fce:	f00b f8df 	bl	c190 <boot_perform_update_hook>
            if (rc == BOOT_HOOK_REGULAR)
     fd2:	2801      	cmp	r0, #1
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     fd4:	4605      	mov	r5, r0
            if (rc == BOOT_HOOK_REGULAR)
     fd6:	f040 80a0 	bne.w	111a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x11a>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     fda:	4601      	mov	r1, r0
     fdc:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     fe0:	f009 fa43 	bl	a46a <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     fe4:	a907      	add	r1, sp, #28
     fe6:	b2c0      	uxtb	r0, r0
     fe8:	f001 ff7a 	bl	2ee0 <flash_area_open>
    if (rc != 0) {
     fec:	2800      	cmp	r0, #0
     fee:	f000 809c 	beq.w	112a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12a>
    uint32_t src_size = 0;
     ff2:	2500      	movs	r5, #0
    flash_area_close(fap);
     ff4:	9807      	ldr	r0, [sp, #28]
     ff6:	f00a fa19 	bl	b42c <flash_area_close>
    image_index = BOOT_CURR_IMG(state);
     ffa:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
     ffe:	a907      	add	r1, sp, #28
    1000:	2800      	cmp	r0, #0
    1002:	f000 80d0 	beq.w	11a6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1a6>
    1006:	2801      	cmp	r0, #1
    1008:	f000 80c9 	beq.w	119e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x19e>
    100c:	20ff      	movs	r0, #255	; 0xff
    100e:	f001 ff67 	bl	2ee0 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1012:	20ff      	movs	r0, #255	; 0xff
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    1014:	f04f 0800 	mov.w	r8, #0
    return BOOT_IMG(state, slot).num_sectors;
    1018:	f04f 0b58 	mov.w	fp, #88	; 0x58
    101c:	46c2      	mov	sl, r8
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    101e:	a90e      	add	r1, sp, #56	; 0x38
    1020:	f001 ff5e 	bl	2ee0 <flash_area_open>
    1024:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    1028:	fb0b 4303 	mla	r3, fp, r3, r4
    102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    102e:	4553      	cmp	r3, sl
    1030:	d019      	beq.n	1066 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x66>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    1032:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
    1036:	4641      	mov	r1, r8
    1038:	fb0b 4202 	mla	r2, fp, r2, r4
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
    103c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    103e:	9807      	ldr	r0, [sp, #28]
    1040:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
    1044:	6852      	ldr	r2, [r2, #4]
    1046:	9303      	str	r3, [sp, #12]
    1048:	9202      	str	r2, [sp, #8]
    104a:	f00a fa1a 	bl	b482 <flash_area_erase>
        if ((size + this_size) >= src_size) {
    104e:	9a02      	ldr	r2, [sp, #8]
    1050:	9b03      	ldr	r3, [sp, #12]
    1052:	4490      	add	r8, r2
    1054:	45a8      	cmp	r8, r5
    1056:	f0c0 80ab 	bcc.w	11b0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b0>
            size += BOOT_WRITE_SZ(state) - (size % BOOT_WRITE_SZ(state));
    105a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    105e:	fbb5 f5f3 	udiv	r5, r5, r3
    1062:	fb03 3805 	mla	r8, r3, r5, r3
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1066:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    106a:	f009 fab1 	bl	a5d0 <boot_trailer_sz>
    106e:	2358      	movs	r3, #88	; 0x58
    return BOOT_IMG(state, slot).num_sectors;
    1070:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    1074:	fb03 4202 	mla	r2, r3, r2, r4
    1078:	6a53      	ldr	r3, [r2, #36]	; 0x24
    sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    107a:	6a92      	ldr	r2, [r2, #40]	; 0x28
	return fs->fs_off;
    107c:	6819      	ldr	r1, [r3, #0]
    107e:	3a01      	subs	r2, #1
    1080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    sz = 0;
    1084:	2200      	movs	r2, #0
        sz += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, sector);
    1086:	685d      	ldr	r5, [r3, #4]
    1088:	469c      	mov	ip, r3
    108a:	442a      	add	r2, r5
    } while (sz < trailer_sz);
    108c:	4290      	cmp	r0, r2
    108e:	f1a3 0308 	sub.w	r3, r3, #8
    1092:	d8f8      	bhi.n	1086 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x86>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    1094:	f8dc 3000 	ldr.w	r3, [ip]
    return flash_area_erase(fap, off, sz);
    1098:	9807      	ldr	r0, [sp, #28]
    109a:	1a59      	subs	r1, r3, r1
    109c:	f00a f9f1 	bl	b482 <flash_area_erase>
    rc = boot_copy_region(state, fap_secondary_slot, fap_primary_slot, 0, 0, size);
    10a0:	2300      	movs	r3, #0
    10a2:	4620      	mov	r0, r4
    10a4:	9a07      	ldr	r2, [sp, #28]
    10a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    10a8:	f8cd 8004 	str.w	r8, [sp, #4]
    10ac:	9300      	str	r3, [sp, #0]
    10ae:	f7ff fd49 	bl	b44 <boot_copy_region>
    if (rc != 0) {
    10b2:	4605      	mov	r5, r0
    10b4:	bb88      	cbnz	r0, 111a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x11a>
    rc = boot_write_magic(fap_primary_slot);
    10b6:	9807      	ldr	r0, [sp, #28]
    10b8:	f005 fab6 	bl	6628 <boot_write_magic>
    if (rc != 0) {
    10bc:	4605      	mov	r5, r0
    10be:	bb60      	cbnz	r0, 111a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x11a>
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
    10c0:	f04f 0a58 	mov.w	sl, #88	; 0x58
    10c4:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    10c8:	4642      	mov	r2, r8
    10ca:	fb0a 4300 	mla	r3, sl, r0, r4
    10ce:	6a19      	ldr	r1, [r3, #32]
    10d0:	f00b f86c 	bl	c1ac <boot_copy_region_post_hook>
    if (rc != 0) {
    10d4:	4605      	mov	r5, r0
    10d6:	bb00      	cbnz	r0, 111a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x11a>
    10d8:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
    10dc:	4601      	mov	r1, r0
    10de:	fb0a 4303 	mla	r3, sl, r3, r4
	return fs->fs_size;
    10e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    10e4:	980e      	ldr	r0, [sp, #56]	; 0x38
    10e6:	685a      	ldr	r2, [r3, #4]
    10e8:	f00a f9cb 	bl	b482 <flash_area_erase>
    return BOOT_IMG(state, slot).num_sectors;
    10ec:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    10f0:	fb0a 4303 	mla	r3, sl, r3, r4
    last_sector = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT) - 1;
    10f4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
    10f8:	3b01      	subs	r3, #1
    10fa:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    10fe:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    1102:	6813      	ldr	r3, [r2, #0]
    return flash_area_erase(fap, off, sz);
    1104:	6842      	ldr	r2, [r0, #4]
    1106:	1ac9      	subs	r1, r1, r3
    1108:	980e      	ldr	r0, [sp, #56]	; 0x38
    110a:	f00a f9ba 	bl	b482 <flash_area_erase>
    flash_area_close(fap_primary_slot);
    110e:	9807      	ldr	r0, [sp, #28]
    1110:	f00a f98c 	bl	b42c <flash_area_close>
    flash_area_close(fap_secondary_slot);
    1114:	980e      	ldr	r0, [sp, #56]	; 0x38
    1116:	f00a f989 	bl	b42c <flash_area_close>
        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    111a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    111e:	4423      	add	r3, r4
    1120:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    1124:	2bff      	cmp	r3, #255	; 0xff
    1126:	d146      	bne.n	11b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b6>
            FIH_PANIC;
    1128:	e7fe      	b.n	1128 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x128>
    return &BOOT_IMG(state, slot).hdr;
    112a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    112e:	9807      	ldr	r0, [sp, #28]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    1130:	fb09 4303 	mla	r3, r9, r3, r4
    1134:	f8b3 8034 	ldrh.w	r8, [r3, #52]	; 0x34
    1138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    113a:	aa0e      	add	r2, sp, #56	; 0x38
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    113c:	4498      	add	r8, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    113e:	4641      	mov	r1, r8
    1140:	2304      	movs	r3, #4
    1142:	f00a f974 	bl	b42e <flash_area_read>
    1146:	2800      	cmp	r0, #0
    1148:	f47f af53 	bne.w	ff2 <FIH_LABEL_FIH_CALL_END_2211+0x250>
    114c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1150:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    1154:	fb09 4303 	mla	r3, r9, r3, r4
    1158:	8edd      	ldrh	r5, [r3, #54]	; 0x36
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    115a:	f646 1308 	movw	r3, #26888	; 0x6908
    115e:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    1160:	9807      	ldr	r0, [sp, #28]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1162:	d119      	bne.n	1198 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x198>
        if (protect_tlv_size != info.it_tlv_tot) {
    1164:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    1168:	429d      	cmp	r5, r3
    116a:	f47f af42 	bne.w	ff2 <FIH_LABEL_FIH_CALL_END_2211+0x250>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    116e:	2304      	movs	r3, #4
    1170:	aa0e      	add	r2, sp, #56	; 0x38
    1172:	eb05 0108 	add.w	r1, r5, r8
    1176:	f00a f95a 	bl	b42e <flash_area_read>
    117a:	2800      	cmp	r0, #0
    117c:	f47f af39 	bne.w	ff2 <FIH_LABEL_FIH_CALL_END_2211+0x250>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    1180:	f646 1307 	movw	r3, #26887	; 0x6907
    1184:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    1188:	429a      	cmp	r2, r3
    118a:	f47f af32 	bne.w	ff2 <FIH_LABEL_FIH_CALL_END_2211+0x250>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    118e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    1192:	441d      	add	r5, r3
    1194:	4445      	add	r5, r8
    rc = 0;
    1196:	e72d      	b.n	ff4 <FIH_LABEL_FIH_CALL_END_2211+0x252>
    } else if (protect_tlv_size != 0) {
    1198:	2d00      	cmp	r5, #0
    119a:	d0f1      	beq.n	1180 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x180>
    119c:	e729      	b.n	ff2 <FIH_LABEL_FIH_CALL_END_2211+0x250>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    119e:	f001 fe9f 	bl	2ee0 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    11a2:	2008      	movs	r0, #8
    11a4:	e736      	b.n	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    11a6:	2004      	movs	r0, #4
    11a8:	f001 fe9a 	bl	2ee0 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    11ac:	2002      	movs	r0, #2
    11ae:	e731      	b.n	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    11b0:	f10a 0a01 	add.w	sl, sl, #1
    11b4:	e73b      	b.n	102e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2e>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    11b6:	f894 80b8 	ldrb.w	r8, [r4, #184]	; 0xb8
    11ba:	f108 0801 	add.w	r8, r8, #1
    11be:	fa5f f888 	uxtb.w	r8, r8
    11c2:	e688      	b.n	ed6 <FIH_LABEL_FIH_CALL_END_2211+0x134>
    11c4:	20002740 	.word	0x20002740
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
    11c8:	4423      	add	r3, r4
    11ca:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
    11ce:	b9b1      	cbnz	r1, 11fe <FIH_LABEL_FIH_CALL_END_3875+0xc>
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    11d0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    11d4:	2b01      	cmp	r3, #1
    11d6:	d007      	beq.n	11e8 <FIH_LABEL_FIH_CALL_START_3860>
            rc = boot_read_image_headers(state, false, &bs);
    11d8:	4620      	mov	r0, r4
    11da:	aa0a      	add	r2, sp, #40	; 0x28
    11dc:	f009 fa69 	bl	a6b2 <boot_read_image_headers>
            if (rc != 0) {
    11e0:	4605      	mov	r5, r0
    11e2:	2800      	cmp	r0, #0
    11e4:	f47f aea4 	bne.w	f30 <FIH_LABEL_FIH_CALL_END_2211+0x18e>

000011e8 <FIH_LABEL_FIH_CALL_START_3860>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
    11e8:	2100      	movs	r1, #0
    11ea:	4620      	mov	r0, r4
    11ec:	f7ff fbee 	bl	9cc <boot_validate_slot.isra.0>
    11f0:	4606      	mov	r6, r0

000011f2 <FIH_LABEL_FIH_CALL_END_3875>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    11f2:	f8d8 3000 	ldr.w	r3, [r8]
    11f6:	4283      	cmp	r3, r0
    11f8:	f47f ae9a 	bne.w	f30 <FIH_LABEL_FIH_CALL_END_2211+0x18e>
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
    11fc:	2500      	movs	r5, #0
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    11fe:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    1202:	3301      	adds	r3, #1
    1204:	b2db      	uxtb	r3, r3
    1206:	e66e      	b.n	ee6 <FIH_LABEL_FIH_CALL_END_2211+0x144>
        if (!state->img_mask[BOOT_CURR_IMG(state)]) {
    1208:	18e2      	adds	r2, r4, r3
    120a:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    120e:	2a00      	cmp	r2, #0
    1210:	f43f ae77 	beq.w	f02 <FIH_LABEL_FIH_CALL_END_2211+0x160>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1214:	3301      	adds	r3, #1
    1216:	b2db      	uxtb	r3, r3
    1218:	e670      	b.n	efc <FIH_LABEL_FIH_CALL_END_2211+0x15a>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
    121a:	18e2      	adds	r2, r4, r3
    121c:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    1220:	b95a      	cbnz	r2, 123a <FIH_LABEL_FIH_CALL_END_3875+0x48>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    1222:	fb07 4303 	mla	r3, r7, r3, r4
    1226:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    1228:	f00a f900 	bl	b42c <flash_area_close>
    122c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    1230:	fb07 4303 	mla	r3, r7, r3, r4
    1234:	6a18      	ldr	r0, [r3, #32]
    1236:	f00a f8f9 	bl	b42c <flash_area_close>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    123a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    123e:	3301      	adds	r3, #1
    1240:	b2db      	uxtb	r3, r3
    1242:	e677      	b.n	f34 <FIH_LABEL_FIH_CALL_END_2211+0x192>

00001244 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
    1244:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    1246:	4d06      	ldr	r5, [pc, #24]	; (1260 <FIH_LABEL_FIH_CALL_END_4510+0x4>)
{
    1248:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    124a:	22bc      	movs	r2, #188	; 0xbc
    124c:	2100      	movs	r1, #0
    124e:	4628      	mov	r0, r5
    1250:	f00a fca3 	bl	bb9a <memset>

00001254 <FIH_LABEL_FIH_CALL_START_4496>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    1254:	4621      	mov	r1, r4
    1256:	4628      	mov	r0, r5
    1258:	f7ff fcca 	bl	bf0 <context_boot_go>

0000125c <FIH_LABEL_FIH_CALL_END_4510>:
}
    125c:	bd38      	pop	{r3, r4, r5, pc}
    125e:	bf00      	nop
    1260:	20012b44 	.word	0x20012b44

00001264 <cleanup_arm_nvic>:
    1264:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    1268:	b672      	cpsid	i
    126a:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    126c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1270:	4a09      	ldr	r2, [pc, #36]	; (1298 <cleanup_arm_nvic+0x34>)
    1272:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1276:	3301      	adds	r3, #1
    1278:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    127a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    127e:	d1f8      	bne.n	1272 <cleanup_arm_nvic+0xe>
    1280:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1286:	4a04      	ldr	r2, [pc, #16]	; (1298 <cleanup_arm_nvic+0x34>)
    1288:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    128c:	3301      	adds	r3, #1
    128e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1290:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1294:	d1f8      	bne.n	1288 <cleanup_arm_nvic+0x24>
	}
}
    1296:	4770      	bx	lr
    1298:	e000e100 	.word	0xe000e100

0000129c <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    129c:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    129e:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    12a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    12a4:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12a6:	4b1a      	ldr	r3, [pc, #104]	; (1310 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    12a8:	4629      	mov	r1, r5
    12aa:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    12ac:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    12b0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    12b8:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    12ba:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    12be:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    12c2:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    12c6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    12ca:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    12cc:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    12d0:	4810      	ldr	r0, [pc, #64]	; (1314 <nrf_cleanup_peripheral+0x78>)
    12d2:	f00a fc62 	bl	bb9a <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    12d6:	2280      	movs	r2, #128	; 0x80
    12d8:	4629      	mov	r1, r5
    12da:	480f      	ldr	r0, [pc, #60]	; (1318 <nrf_cleanup_peripheral+0x7c>)
    12dc:	f00a fc5d 	bl	bb9a <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    12e0:	4b0e      	ldr	r3, [pc, #56]	; (131c <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    12e2:	2280      	movs	r2, #128	; 0x80
    12e4:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    12e8:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    12ea:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    12ee:	480c      	ldr	r0, [pc, #48]	; (1320 <nrf_cleanup_peripheral+0x84>)
    12f0:	f00a fc53 	bl	bb9a <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    12f4:	2280      	movs	r2, #128	; 0x80
    12f6:	4629      	mov	r1, r5
    12f8:	480a      	ldr	r0, [pc, #40]	; (1324 <nrf_cleanup_peripheral+0x88>)
    12fa:	f00a fc4e 	bl	bb9a <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    12fe:	4b0a      	ldr	r3, [pc, #40]	; (1328 <nrf_cleanup_peripheral+0x8c>)
    1300:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1304:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1308:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    130c:	bd38      	pop	{r3, r4, r5, pc}
    130e:	bf00      	nop
    1310:	50014000 	.word	0x50014000
    1314:	50008080 	.word	0x50008080
    1318:	50008180 	.word	0x50008180
    131c:	50009000 	.word	0x50009000
    1320:	50009080 	.word	0x50009080
    1324:	50009180 	.word	0x50009180
    1328:	50017000 	.word	0x50017000

0000132c <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    132c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1330:	9d07      	ldr	r5, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    1332:	b915      	cbnz	r5, 133a <base64_encode+0xe>
		*olen = 0;
    1334:	6015      	str	r5, [r2, #0]
		return 0;
    1336:	2000      	movs	r0, #0
    1338:	e012      	b.n	1360 <base64_encode+0x34>
	}

	n = slen / 3 + (slen % 3 != 0);
    133a:	2403      	movs	r4, #3
    133c:	fbb5 f4f4 	udiv	r4, r5, r4
    1340:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    1344:	42bd      	cmp	r5, r7
    1346:	bf18      	it	ne
    1348:	3401      	addne	r4, #1

	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    134a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    134e:	d209      	bcs.n	1364 <base64_encode+0x38>
		*olen = BASE64_SIZE_T_MAX;
		return -ENOMEM;
	}

	n *= 4;
    1350:	00a4      	lsls	r4, r4, #2

	if ((dlen < n + 1) || (!dst)) {
    1352:	3401      	adds	r4, #1
    1354:	428c      	cmp	r4, r1
    1356:	d800      	bhi.n	135a <base64_encode+0x2e>
    1358:	b938      	cbnz	r0, 136a <base64_encode+0x3e>
		return -ENOMEM;
    135a:	f06f 000b 	mvn.w	r0, #11
		*olen = n + 1;
    135e:	6014      	str	r4, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1364:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    1368:	e7f7      	b.n	135a <base64_encode+0x2e>
	for (i = 0, p = dst; i < n; i += 3) {
    136a:	4604      	mov	r4, r0
    136c:	2100      	movs	r1, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    136e:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 1424 <base64_encode+0xf8>
	for (i = 0, p = dst; i < n; i += 3) {
    1372:	42b9      	cmp	r1, r7
    1374:	f103 0c03 	add.w	ip, r3, #3
    1378:	f104 0604 	add.w	r6, r4, #4
    137c:	d32b      	bcc.n	13d6 <base64_encode+0xaa>
	if (i < slen) {
    137e:	42a9      	cmp	r1, r5
    1380:	4627      	mov	r7, r4
    1382:	d223      	bcs.n	13cc <base64_encode+0xa0>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1384:	f101 0c01 	add.w	ip, r1, #1
    1388:	45ac      	cmp	ip, r5
		C1 = *src++;
    138a:	781f      	ldrb	r7, [r3, #0]
		C2 = ((i + 1) < slen) ? *src++ : 0;
    138c:	bf28      	it	cs
    138e:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1390:	4924      	ldr	r1, [pc, #144]	; (1424 <base64_encode+0xf8>)
    1392:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1396:	bf38      	it	cc
    1398:	785b      	ldrbcc	r3, [r3, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    139a:	f811 e00e 	ldrb.w	lr, [r1, lr]
		if ((i + 1) < slen) {
    139e:	45ac      	cmp	ip, r5
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    13a0:	f884 e000 	strb.w	lr, [r4]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    13a4:	eb01 1e13 	add.w	lr, r1, r3, lsr #4
			*p++ = '=';
    13a8:	bf2e      	itee	cs
    13aa:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    13ac:	009b      	lslcc	r3, r3, #2
    13ae:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    13b2:	ea4f 1707 	mov.w	r7, r7, lsl #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    13b6:	bf38      	it	cc
    13b8:	5ccb      	ldrbcc	r3, [r1, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    13ba:	f007 0730 	and.w	r7, r7, #48	; 0x30
    13be:	f81e 7007 	ldrb.w	r7, [lr, r7]
    13c2:	70a3      	strb	r3, [r4, #2]
		*p++ = '=';
    13c4:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    13c6:	7067      	strb	r7, [r4, #1]
		*p++ = '=';
    13c8:	4637      	mov	r7, r6
    13ca:	70e3      	strb	r3, [r4, #3]
	*p = 0U;
    13cc:	2300      	movs	r3, #0
	*olen = p - dst;
    13ce:	1a38      	subs	r0, r7, r0
    13d0:	6010      	str	r0, [r2, #0]
	*p = 0U;
    13d2:	703b      	strb	r3, [r7, #0]
	return 0;
    13d4:	e7af      	b.n	1336 <base64_encode+0xa>
		C1 = *src++;
    13d6:	f81c 4c03 	ldrb.w	r4, [ip, #-3]
		C2 = *src++;
    13da:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    13de:	ea4f 09a4 	mov.w	r9, r4, asr #2
    13e2:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    13e6:	0124      	lsls	r4, r4, #4
		C3 = *src++;
    13e8:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    13ec:	f004 0430 	and.w	r4, r4, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    13f0:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    13f4:	eb0e 1913 	add.w	r9, lr, r3, lsr #4
    13f8:	f819 4004 	ldrb.w	r4, [r9, r4]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    13fc:	009b      	lsls	r3, r3, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    13fe:	f806 4c03 	strb.w	r4, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1402:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    1406:	eb0e 1498 	add.w	r4, lr, r8, lsr #6
    140a:	5ce3      	ldrb	r3, [r4, r3]
		*p++ = base64_enc_map[C3 & 0x3F];
    140c:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1410:	f806 3c02 	strb.w	r3, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    1414:	f81e 3008 	ldrb.w	r3, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    1418:	4634      	mov	r4, r6
		*p++ = base64_enc_map[C3 & 0x3F];
    141a:	f806 3c01 	strb.w	r3, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    141e:	3103      	adds	r1, #3
    1420:	4663      	mov	r3, ip
    1422:	e7a6      	b.n	1372 <base64_encode+0x46>
    1424:	0000f0f0 	.word	0x0000f0f0

00001428 <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    1428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    142c:	2700      	movs	r7, #0
    142e:	463c      	mov	r4, r7
    1430:	463d      	mov	r5, r7
{
    1432:	f8dd e01c 	ldr.w	lr, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1436:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1560 <base64_decode+0x138>
	for (i = n = j = 0U; i < slen; i++) {
    143a:	4575      	cmp	r5, lr
    143c:	d31f      	bcc.n	147e <base64_decode+0x56>
		}

		n++;
	}

	if (n == 0) {
    143e:	bbe4      	cbnz	r4, 14ba <base64_decode+0x92>
		*olen = 0;
		return 0;
    1440:	2000      	movs	r0, #0
		*olen = 0;
    1442:	6014      	str	r4, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    1444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			++i;
    1448:	3601      	adds	r6, #1
		while (i < slen && src[i] == ' ') {
    144a:	4576      	cmp	r6, lr
    144c:	d033      	beq.n	14b6 <base64_decode+0x8e>
    144e:	f813 c006 	ldrb.w	ip, [r3, r6]
    1452:	f1bc 0f20 	cmp.w	ip, #32
    1456:	d0f7      	beq.n	1448 <base64_decode+0x20>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    1458:	ebae 0906 	sub.w	r9, lr, r6
    145c:	f1b9 0f01 	cmp.w	r9, #1
    1460:	eba6 0505 	sub.w	r5, r6, r5
    1464:	d00d      	beq.n	1482 <base64_decode+0x5a>
    1466:	f1bc 0f0d 	cmp.w	ip, #13
    146a:	d10a      	bne.n	1482 <base64_decode+0x5a>
    146c:	eb03 0906 	add.w	r9, r3, r6
    1470:	f899 9001 	ldrb.w	r9, [r9, #1]
    1474:	f1b9 0f0a 	cmp.w	r9, #10
    1478:	d16e      	bne.n	1558 <base64_decode+0x130>
	for (i = n = j = 0U; i < slen; i++) {
    147a:	1c75      	adds	r5, r6, #1
    147c:	e7dd      	b.n	143a <base64_decode+0x12>
    147e:	462e      	mov	r6, r5
    1480:	e7e3      	b.n	144a <base64_decode+0x22>
		if (src[i] == '\n') {
    1482:	f1bc 0f0a 	cmp.w	ip, #10
    1486:	d0f8      	beq.n	147a <base64_decode+0x52>
		if (x != 0U) {
    1488:	b92d      	cbnz	r5, 1496 <base64_decode+0x6e>
		if (src[i] == '=' && ++j > 2) {
    148a:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    148e:	d105      	bne.n	149c <base64_decode+0x74>
    1490:	3701      	adds	r7, #1
    1492:	2f02      	cmp	r7, #2
    1494:	d90d      	bls.n	14b2 <base64_decode+0x8a>
			return -EINVAL;
    1496:	f06f 0015 	mvn.w	r0, #21
    149a:	e7d3      	b.n	1444 <base64_decode+0x1c>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    149c:	f01c 0f80 	tst.w	ip, #128	; 0x80
    14a0:	d1f9      	bne.n	1496 <base64_decode+0x6e>
    14a2:	f818 500c 	ldrb.w	r5, [r8, ip]
    14a6:	2d7f      	cmp	r5, #127	; 0x7f
    14a8:	d0f5      	beq.n	1496 <base64_decode+0x6e>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    14aa:	2d3f      	cmp	r5, #63	; 0x3f
    14ac:	d801      	bhi.n	14b2 <base64_decode+0x8a>
    14ae:	2f00      	cmp	r7, #0
    14b0:	d1f1      	bne.n	1496 <base64_decode+0x6e>
		n++;
    14b2:	3401      	adds	r4, #1
    14b4:	e7e1      	b.n	147a <base64_decode+0x52>
    14b6:	4635      	mov	r5, r6
    14b8:	e7c1      	b.n	143e <base64_decode+0x16>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    14ba:	f04f 0c06 	mov.w	ip, #6
    14be:	f004 0607 	and.w	r6, r4, #7
    14c2:	08e4      	lsrs	r4, r4, #3
    14c4:	fb0c f606 	mul.w	r6, ip, r6
    14c8:	fb0c f404 	mul.w	r4, ip, r4
    14cc:	3607      	adds	r6, #7
	n -= j;
    14ce:	1be4      	subs	r4, r4, r7
    14d0:	eb04 04d6 	add.w	r4, r4, r6, lsr #3
	if (dst == NULL || dlen < n) {
    14d4:	b170      	cbz	r0, 14f4 <base64_decode+0xcc>
    14d6:	428c      	cmp	r4, r1
    14d8:	d80c      	bhi.n	14f4 <base64_decode+0xcc>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    14da:	2700      	movs	r7, #0
	if (dst == NULL || dlen < n) {
    14dc:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    14de:	2603      	movs	r6, #3
    14e0:	463c      	mov	r4, r7
		j -= (base64_dec_map[*src] == 64U);
    14e2:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1560 <base64_decode+0x138>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    14e6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1564 <base64_decode+0x13c>
    14ea:	441d      	add	r5, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    14ec:	429d      	cmp	r5, r3
    14ee:	d105      	bne.n	14fc <base64_decode+0xd4>
	*olen = p - dst;
    14f0:	1a0c      	subs	r4, r1, r0
	return 0;
    14f2:	e7a5      	b.n	1440 <base64_decode+0x18>
		return -ENOMEM;
    14f4:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    14f8:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    14fa:	e7a3      	b.n	1444 <base64_decode+0x1c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    14fc:	f813 9b01 	ldrb.w	r9, [r3], #1
    1500:	f1a9 0c0a 	sub.w	ip, r9, #10
    1504:	fa5f fc8c 	uxtb.w	ip, ip
    1508:	f1bc 0f16 	cmp.w	ip, #22
    150c:	d804      	bhi.n	1518 <base64_decode+0xf0>
    150e:	fa48 fc0c 	asr.w	ip, r8, ip
    1512:	f01c 0f01 	tst.w	ip, #1
    1516:	d0e9      	beq.n	14ec <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    1518:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    151c:	3401      	adds	r4, #1
		j -= (base64_dec_map[*src] == 64U);
    151e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    1522:	bf08      	it	eq
    1524:	3e01      	subeq	r6, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1526:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    152a:	2c04      	cmp	r4, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    152c:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
		if (++n == 4) {
    1530:	d1dc      	bne.n	14ec <base64_decode+0xc4>
			if (j > 0) {
    1532:	b17e      	cbz	r6, 1554 <base64_decode+0x12c>
				*p++ = (unsigned char)(x >> 16);
    1534:	0c3c      	lsrs	r4, r7, #16
			if (j > 1) {
    1536:	2e01      	cmp	r6, #1
				*p++ = (unsigned char)(x >> 16);
    1538:	700c      	strb	r4, [r1, #0]
			if (j > 1) {
    153a:	d102      	bne.n	1542 <base64_decode+0x11a>
				*p++ = (unsigned char)(x >> 16);
    153c:	3101      	adds	r1, #1
			n = 0;
    153e:	2400      	movs	r4, #0
    1540:	e7d4      	b.n	14ec <base64_decode+0xc4>
			if (j > 2) {
    1542:	2e02      	cmp	r6, #2
				*p++ = (unsigned char)(x >> 8);
    1544:	ea4f 2417 	mov.w	r4, r7, lsr #8
    1548:	704c      	strb	r4, [r1, #1]
				*p++ = (unsigned char)(x);
    154a:	bf16      	itet	ne
    154c:	708f      	strbne	r7, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    154e:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    1550:	3103      	addne	r1, #3
    1552:	e7f4      	b.n	153e <base64_decode+0x116>
			n = 0;
    1554:	4634      	mov	r4, r6
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1556:	e7c9      	b.n	14ec <base64_decode+0xc4>
		if (x != 0U) {
    1558:	2d00      	cmp	r5, #0
    155a:	d0a2      	beq.n	14a2 <base64_decode+0x7a>
    155c:	e79b      	b.n	1496 <base64_decode+0x6e>
    155e:	bf00      	nop
    1560:	0000f070 	.word	0x0000f070
    1564:	ffbffff6 	.word	0xffbffff6

00001568 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    156c:	8b05      	ldrh	r5, [r0, #24]
{
    156e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1570:	0728      	lsls	r0, r5, #28
{
    1572:	4690      	mov	r8, r2
	if (processing) {
    1574:	d411      	bmi.n	159a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1576:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1578:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    157c:	f040 80cd 	bne.w	171a <process_event+0x1b2>
			evt = process_recheck(mgr);
    1580:	4620      	mov	r0, r4
    1582:	f009 fc06 	bl	ad92 <process_recheck>
		}

		if (evt == EVT_NOP) {
    1586:	b178      	cbz	r0, 15a8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1588:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    158a:	8b21      	ldrh	r1, [r4, #24]
    158c:	2804      	cmp	r0, #4
    158e:	d811      	bhi.n	15b4 <process_event+0x4c>
    1590:	e8df f000 	tbb	[pc, r0]
    1594:	856d10c3 	.word	0x856d10c3
    1598:	95          	.byte	0x95
    1599:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    159a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    159c:	bf0c      	ite	eq
    159e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    15a2:	f045 0520 	orrne.w	r5, r5, #32
    15a6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    15a8:	f388 8811 	msr	BASEPRI, r8
    15ac:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    15b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15b4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    15b8:	45aa      	cmp	sl, r5
    15ba:	f000 80a6 	beq.w	170a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    15be:	2700      	movs	r7, #0
    15c0:	46b9      	mov	r9, r7
    15c2:	463e      	mov	r6, r7
    15c4:	68a3      	ldr	r3, [r4, #8]
    15c6:	2b00      	cmp	r3, #0
    15c8:	f000 80bd 	beq.w	1746 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    15cc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    15d0:	8321      	strh	r1, [r4, #24]
    15d2:	f388 8811 	msr	BASEPRI, r8
    15d6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    15da:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15dc:	2900      	cmp	r1, #0
    15de:	f000 80bb 	beq.w	1758 <process_event+0x1f0>
	return node->next;
    15e2:	680d      	ldr	r5, [r1, #0]
    15e4:	2900      	cmp	r1, #0
    15e6:	f000 80b7 	beq.w	1758 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    15ea:	4633      	mov	r3, r6
    15ec:	4652      	mov	r2, sl
    15ee:	4620      	mov	r0, r4
    15f0:	f8d1 8004 	ldr.w	r8, [r1, #4]
    15f4:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15f6:	2d00      	cmp	r5, #0
    15f8:	d076      	beq.n	16e8 <process_event+0x180>
    15fa:	682b      	ldr	r3, [r5, #0]
    15fc:	4629      	mov	r1, r5
    15fe:	461d      	mov	r5, r3
    1600:	e7f0      	b.n	15e4 <process_event+0x7c>
    1602:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1606:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1608:	2a01      	cmp	r2, #1
    160a:	d81b      	bhi.n	1644 <process_event+0xdc>
	list->head = NULL;
    160c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    160e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1612:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1614:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1616:	b289      	uxth	r1, r1
	list->tail = NULL;
    1618:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    161c:	d109      	bne.n	1632 <process_event+0xca>
    161e:	463b      	mov	r3, r7
    1620:	e003      	b.n	162a <process_event+0xc2>
				mgr->refs += 1U;
    1622:	8b62      	ldrh	r2, [r4, #26]
    1624:	3201      	adds	r2, #1
    1626:	8362      	strh	r2, [r4, #26]
	return node->next;
    1628:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    162a:	2b00      	cmp	r3, #0
    162c:	d1f9      	bne.n	1622 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    162e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1632:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1634:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1636:	f009 fbac 	bl	ad92 <process_recheck>
    163a:	2800      	cmp	r0, #0
    163c:	d07b      	beq.n	1736 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    163e:	f041 0120 	orr.w	r1, r1, #32
    1642:	e077      	b.n	1734 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1644:	2b04      	cmp	r3, #4
    1646:	d10a      	bne.n	165e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1648:	f021 0107 	bic.w	r1, r1, #7
    164c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    164e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1650:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1652:	f009 fb9e 	bl	ad92 <process_recheck>
    1656:	b110      	cbz	r0, 165e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1658:	f041 0120 	orr.w	r1, r1, #32
    165c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    165e:	8b21      	ldrh	r1, [r4, #24]
    1660:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1664:	45aa      	cmp	sl, r5
    1666:	d050      	beq.n	170a <process_event+0x1a2>
    1668:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    166a:	46b9      	mov	r9, r7
    166c:	e7aa      	b.n	15c4 <process_event+0x5c>
			transit = mgr->transitions->start;
    166e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1670:	f021 0107 	bic.w	r1, r1, #7
    1674:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1678:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    167a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    167e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1680:	d12d      	bne.n	16de <process_event+0x176>
		    || (transit != NULL)) {
    1682:	f1b9 0f00 	cmp.w	r9, #0
    1686:	d040      	beq.n	170a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1688:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    168c:	8321      	strh	r1, [r4, #24]
    168e:	f388 8811 	msr	BASEPRI, r8
    1692:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1696:	4620      	mov	r0, r4
    1698:	4939      	ldr	r1, [pc, #228]	; (1780 <process_event+0x218>)
    169a:	47c8      	blx	r9
    169c:	e029      	b.n	16f2 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    169e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    16a2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16a4:	f041 0104 	orr.w	r1, r1, #4
    16a8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    16aa:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    16ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    16b0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    16b2:	d0e6      	beq.n	1682 <process_event+0x11a>
    16b4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16b6:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    16ba:	463e      	mov	r6, r7
    16bc:	e782      	b.n	15c4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16be:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    16c2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16c4:	f041 0105 	orr.w	r1, r1, #5
    16c8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    16ca:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    16cc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    16d0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    16d2:	d0d6      	beq.n	1682 <process_event+0x11a>
    16d4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16d6:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    16da:	463e      	mov	r6, r7
    16dc:	e772      	b.n	15c4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    16de:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16e0:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    16e4:	463e      	mov	r6, r7
    16e6:	e76d      	b.n	15c4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    16e8:	462b      	mov	r3, r5
    16ea:	e787      	b.n	15fc <process_event+0x94>
			if (transit != NULL) {
    16ec:	f1b9 0f00 	cmp.w	r9, #0
    16f0:	d1d1      	bne.n	1696 <process_event+0x12e>
	__asm__ volatile(
    16f2:	f04f 0320 	mov.w	r3, #32
    16f6:	f3ef 8811 	mrs	r8, BASEPRI
    16fa:	f383 8812 	msr	BASEPRI_MAX, r3
    16fe:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1702:	8b23      	ldrh	r3, [r4, #24]
    1704:	f023 0308 	bic.w	r3, r3, #8
    1708:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    170a:	8b25      	ldrh	r5, [r4, #24]
    170c:	06ea      	lsls	r2, r5, #27
    170e:	d52e      	bpl.n	176e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1710:	f025 0310 	bic.w	r3, r5, #16
    1714:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1716:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    171a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    171c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    171e:	2e00      	cmp	r6, #0
    1720:	f6bf af6f 	bge.w	1602 <process_event+0x9a>
	list->head = NULL;
    1724:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1726:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1728:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    172c:	f021 0107 	bic.w	r1, r1, #7
    1730:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1734:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1736:	8b21      	ldrh	r1, [r4, #24]
    1738:	f04f 0900 	mov.w	r9, #0
    173c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1740:	45aa      	cmp	sl, r5
    1742:	f47f af3f 	bne.w	15c4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1746:	2f00      	cmp	r7, #0
    1748:	d09b      	beq.n	1682 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    174a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    174e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1750:	f388 8811 	msr	BASEPRI, r8
    1754:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1758:	2f00      	cmp	r7, #0
    175a:	d0c7      	beq.n	16ec <process_event+0x184>
	return node->next;
    175c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    175e:	4639      	mov	r1, r7
    1760:	4633      	mov	r3, r6
    1762:	4652      	mov	r2, sl
    1764:	4620      	mov	r0, r4
    1766:	f009 fb40 	bl	adea <notify_one>
	list->head = node;
    176a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    176c:	e7f4      	b.n	1758 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    176e:	06ab      	lsls	r3, r5, #26
    1770:	f57f af1a 	bpl.w	15a8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1774:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1778:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    177a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    177e:	e6ff      	b.n	1580 <process_event+0x18>
    1780:	0000ae17 	.word	0x0000ae17

00001784 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    1784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1788:	4682      	mov	sl, r0
	size_t count = 0;
    178a:	f04f 0900 	mov.w	r9, #0
{
    178e:	b08d      	sub	sp, #52	; 0x34
    1790:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    1792:	1e53      	subs	r3, r2, #1
{
    1794:	9101      	str	r1, [sp, #4]
	fmt--;
    1796:	9303      	str	r3, [sp, #12]

start:
	while (*++fmt != '%') {
    1798:	9b03      	ldr	r3, [sp, #12]
    179a:	7858      	ldrb	r0, [r3, #1]
    179c:	1c5c      	adds	r4, r3, #1
    179e:	2825      	cmp	r0, #37	; 0x25
    17a0:	d119      	bne.n	17d6 <z_cbvprintf_impl+0x52>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    17a2:	2000      	movs	r0, #0
	precision = -1;
    17a4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff

	for (fmt++ ; ; fmt++) {
    17a8:	461e      	mov	r6, r3
	min_width = -1;
    17aa:	4644      	mov	r4, r8
	length_mod = 0;
    17ac:	4603      	mov	r3, r0
	for (fmt++ ; ; fmt++) {
    17ae:	3602      	adds	r6, #2
	padding_mode = 0;
    17b0:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    17b2:	7831      	ldrb	r1, [r6, #0]
    17b4:	9603      	str	r6, [sp, #12]
    17b6:	2939      	cmp	r1, #57	; 0x39
    17b8:	d855      	bhi.n	1866 <z_cbvprintf_impl+0xe2>
    17ba:	291f      	cmp	r1, #31
    17bc:	d814      	bhi.n	17e8 <z_cbvprintf_impl+0x64>
    17be:	2900      	cmp	r1, #0
    17c0:	f000 81f1 	beq.w	1ba6 <CONFIG_USB_DEVICE_VID+0x291>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    17c4:	9901      	ldr	r1, [sp, #4]
    17c6:	2025      	movs	r0, #37	; 0x25
    17c8:	47d0      	blx	sl
			OUTC(*fmt);
    17ca:	9901      	ldr	r1, [sp, #4]
    17cc:	7830      	ldrb	r0, [r6, #0]
    17ce:	47d0      	blx	sl
    17d0:	f109 0902 	add.w	r9, r9, #2
			goto start;
    17d4:	e7e0      	b.n	1798 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    17d6:	2800      	cmp	r0, #0
    17d8:	f000 81e5 	beq.w	1ba6 <CONFIG_USB_DEVICE_VID+0x291>
		OUTC(*fmt);
    17dc:	9901      	ldr	r1, [sp, #4]
    17de:	47d0      	blx	sl
    17e0:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    17e4:	9403      	str	r4, [sp, #12]
    17e6:	e7d7      	b.n	1798 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    17e8:	f1a1 0220 	sub.w	r2, r1, #32
    17ec:	2a19      	cmp	r2, #25
    17ee:	d8e9      	bhi.n	17c4 <z_cbvprintf_impl+0x40>
    17f0:	a701      	add	r7, pc, #4	; (adr r7, 17f8 <z_cbvprintf_impl+0x74>)
    17f2:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    17f6:	bf00      	nop
    17f8:	00001861 	.word	0x00001861
    17fc:	000017c5 	.word	0x000017c5
    1800:	000017c5 	.word	0x000017c5
    1804:	00001861 	.word	0x00001861
    1808:	000017c5 	.word	0x000017c5
    180c:	000018e1 	.word	0x000018e1
    1810:	000017c5 	.word	0x000017c5
    1814:	000017c5 	.word	0x000017c5
    1818:	000017c5 	.word	0x000017c5
    181c:	000017c5 	.word	0x000017c5
    1820:	0000192d 	.word	0x0000192d
    1824:	00001861 	.word	0x00001861
    1828:	000017c5 	.word	0x000017c5
    182c:	00001941 	.word	0x00001941
    1830:	000018ed 	.word	0x000018ed
    1834:	000017c5 	.word	0x000017c5
    1838:	000018fb 	.word	0x000018fb
    183c:	0000191b 	.word	0x0000191b
    1840:	0000191b 	.word	0x0000191b
    1844:	0000191b 	.word	0x0000191b
    1848:	0000191b 	.word	0x0000191b
    184c:	0000191b 	.word	0x0000191b
    1850:	0000191b 	.word	0x0000191b
    1854:	0000191b 	.word	0x0000191b
    1858:	0000191b 	.word	0x0000191b
    185c:	0000191b 	.word	0x0000191b
    1860:	4608      	mov	r0, r1
    1862:	3601      	adds	r6, #1
    1864:	e7a5      	b.n	17b2 <z_cbvprintf_impl+0x2e>
    1866:	2958      	cmp	r1, #88	; 0x58
    1868:	f000 80ee 	beq.w	1a48 <CONFIG_USB_DEVICE_VID+0x133>
    186c:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    1870:	b2d7      	uxtb	r7, r2
    1872:	2f17      	cmp	r7, #23
    1874:	d8a6      	bhi.n	17c4 <z_cbvprintf_impl+0x40>
    1876:	2a17      	cmp	r2, #23
    1878:	d8a4      	bhi.n	17c4 <z_cbvprintf_impl+0x40>
    187a:	a701      	add	r7, pc, #4	; (adr r7, 1880 <z_cbvprintf_impl+0xfc>)
    187c:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1880:	00001aef 	.word	0x00001aef
    1884:	00001967 	.word	0x00001967
    1888:	000017c5 	.word	0x000017c5
    188c:	000017c5 	.word	0x000017c5
    1890:	000017c5 	.word	0x000017c5
    1894:	00001947 	.word	0x00001947
    1898:	00001967 	.word	0x00001967
    189c:	000017c5 	.word	0x000017c5
    18a0:	000017c5 	.word	0x000017c5
    18a4:	00001947 	.word	0x00001947
    18a8:	000017c5 	.word	0x000017c5
    18ac:	000017c5 	.word	0x000017c5
    18b0:	000017c5 	.word	0x000017c5
    18b4:	00001a23 	.word	0x00001a23
    18b8:	000017c5 	.word	0x000017c5
    18bc:	000017c5 	.word	0x000017c5
    18c0:	00001ac3 	.word	0x00001ac3
    18c4:	000017c5 	.word	0x000017c5
    18c8:	00001967 	.word	0x00001967
    18cc:	000017c5 	.word	0x000017c5
    18d0:	000017c5 	.word	0x000017c5
    18d4:	00001a23 	.word	0x00001a23
    18d8:	000017c5 	.word	0x000017c5
    18dc:	00001947 	.word	0x00001947
			OUTC('%');
    18e0:	2025      	movs	r0, #37	; 0x25
    18e2:	9901      	ldr	r1, [sp, #4]
    18e4:	47d0      	blx	sl
    18e6:	f109 0901 	add.w	r9, r9, #1
			goto start;
    18ea:	e755      	b.n	1798 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    18ec:	9a02      	ldr	r2, [sp, #8]
			precision = 0;
    18ee:	f04f 0800 	mov.w	r8, #0
			padding_mode &= (char)~PAD_ZERO;
    18f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    18f6:	9202      	str	r2, [sp, #8]
			continue;
    18f8:	e7b3      	b.n	1862 <z_cbvprintf_impl+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    18fa:	2c00      	cmp	r4, #0
    18fc:	da0d      	bge.n	191a <CONFIG_USB_DEVICE_VID+0x5>
    18fe:	f1b8 0f00 	cmp.w	r8, #0
    1902:	da0d      	bge.n	1920 <CONFIG_USB_DEVICE_VID+0xb>
    1904:	9a02      	ldr	r2, [sp, #8]
    1906:	2a00      	cmp	r2, #0
    1908:	f000 8145 	beq.w	1b96 <CONFIG_USB_DEVICE_VID+0x281>
				min_width = 10 * min_width + *fmt - '0';
    190c:	220a      	movs	r2, #10
				if (min_width < 0) {
    190e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
    1912:	fb02 1404 	mla	r4, r2, r4, r1
    1916:	3c30      	subs	r4, #48	; 0x30
    1918:	e7a3      	b.n	1862 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    191a:	f1b8 0f00 	cmp.w	r8, #0
    191e:	dbf5      	blt.n	190c <z_cbvprintf_impl+0x188>
				precision = 10 * precision + *fmt - '0';
    1920:	220a      	movs	r2, #10
    1922:	fb02 1208 	mla	r2, r2, r8, r1
    1926:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    192a:	e79a      	b.n	1862 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    192c:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
    1930:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1934:	f280 8131 	bge.w	1b9a <CONFIG_USB_DEVICE_VID+0x285>
				if (min_width < 0) {
    1938:	2a00      	cmp	r2, #0
    193a:	f280 8130 	bge.w	1b9e <CONFIG_USB_DEVICE_VID+0x289>
					min_width = -min_width;
    193e:	4254      	negs	r4, r2
		switch (*fmt) {
    1940:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1942:	9202      	str	r2, [sp, #8]
    1944:	e78d      	b.n	1862 <z_cbvprintf_impl+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    1946:	2968      	cmp	r1, #104	; 0x68
    1948:	d103      	bne.n	1952 <CONFIG_USB_DEVICE_VID+0x3d>
    194a:	2b68      	cmp	r3, #104	; 0x68
    194c:	d106      	bne.n	195c <CONFIG_USB_DEVICE_VID+0x47>
				length_mod = 'H';
    194e:	2348      	movs	r3, #72	; 0x48
    1950:	e787      	b.n	1862 <z_cbvprintf_impl+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1952:	296c      	cmp	r1, #108	; 0x6c
    1954:	d102      	bne.n	195c <CONFIG_USB_DEVICE_VID+0x47>
    1956:	2b6c      	cmp	r3, #108	; 0x6c
    1958:	f000 8123 	beq.w	1ba2 <CONFIG_USB_DEVICE_VID+0x28d>
			} else if (length_mod == '\0') {
    195c:	2b00      	cmp	r3, #0
    195e:	f47f af31 	bne.w	17c4 <z_cbvprintf_impl+0x40>
		switch (*fmt) {
    1962:	460b      	mov	r3, r1
    1964:	e77d      	b.n	1862 <z_cbvprintf_impl+0xde>
			if (length_mod == 'z') {
    1966:	2b7a      	cmp	r3, #122	; 0x7a
    1968:	d106      	bne.n	1978 <CONFIG_USB_DEVICE_VID+0x63>
			} else if (*fmt == 'u') {
    196a:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    196c:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1970:	d114      	bne.n	199c <CONFIG_USB_DEVICE_VID+0x87>
				d = va_arg(ap, unsigned int);
    1972:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1976:	e00c      	b.n	1992 <CONFIG_USB_DEVICE_VID+0x7d>
			} else if (length_mod == 'l') {
    1978:	2b6c      	cmp	r3, #108	; 0x6c
    197a:	d0f6      	beq.n	196a <CONFIG_USB_DEVICE_VID+0x55>
			} else if (length_mod == 'L') {
    197c:	2b4c      	cmp	r3, #76	; 0x4c
    197e:	d1f4      	bne.n	196a <CONFIG_USB_DEVICE_VID+0x55>
					unsigned long long llu =
    1980:	3507      	adds	r5, #7
    1982:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    1986:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    1988:	f103 0508 	add.w	r5, r3, #8
    198c:	e9d3 6b00 	ldrd	r6, fp, [r3]
				if (*fmt == 'u') {
    1990:	d106      	bne.n	19a0 <CONFIG_USB_DEVICE_VID+0x8b>
			} else if (special == ' ') {
    1992:	2820      	cmp	r0, #32
    1994:	d13e      	bne.n	1a14 <CONFIG_USB_DEVICE_VID+0xff>
				prefix = " ";
    1996:	4f86      	ldr	r7, [pc, #536]	; (1bb0 <CONFIG_USB_DEVICE_VID+0x29b>)
				min_width--;
    1998:	3c01      	subs	r4, #1
    199a:	e009      	b.n	19b0 <CONFIG_USB_DEVICE_VID+0x9b>
				d = va_arg(ap, int);
    199c:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    19a0:	f1bb 0f00 	cmp.w	fp, #0
    19a4:	daf5      	bge.n	1992 <CONFIG_USB_DEVICE_VID+0x7d>
				d = -d;
    19a6:	4276      	negs	r6, r6
				prefix = "-";
    19a8:	4f82      	ldr	r7, [pc, #520]	; (1bb4 <CONFIG_USB_DEVICE_VID+0x29f>)
				d = -d;
    19aa:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    19ae:	3c01      	subs	r4, #1
	int i = 0;
    19b0:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    19b4:	9305      	str	r3, [sp, #20]
    19b6:	2300      	movs	r3, #0
    19b8:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    19ba:	4630      	mov	r0, r6
    19bc:	4659      	mov	r1, fp
    19be:	220a      	movs	r2, #10
    19c0:	2300      	movs	r3, #0
    19c2:	f7fe fbc7 	bl	154 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    19c6:	9b04      	ldr	r3, [sp, #16]
    19c8:	3230      	adds	r2, #48	; 0x30
    19ca:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    19ce:	f8cd c010 	str.w	ip, [sp, #16]
    19d2:	f8dd c014 	ldr.w	ip, [sp, #20]
    19d6:	f80c 2d01 	strb.w	r2, [ip, #-1]!
    19da:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
    19de:	46b4      	mov	ip, r6
    19e0:	465a      	mov	r2, fp
	} while (num);
    19e2:	f1bc 0f0a 	cmp.w	ip, #10
    19e6:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    19ea:	4606      	mov	r6, r0
    19ec:	468b      	mov	fp, r1
	} while (num);
    19ee:	d2e4      	bcs.n	19ba <CONFIG_USB_DEVICE_VID+0xa5>
	return -i;
    19f0:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    19f4:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    19f6:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    19fa:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
    19fe:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1a02:	da6d      	bge.n	1ae0 <CONFIG_USB_DEVICE_VID+0x1cb>
    1a04:	9b02      	ldr	r3, [sp, #8]
    1a06:	07d9      	lsls	r1, r3, #31
    1a08:	d47c      	bmi.n	1b04 <CONFIG_USB_DEVICE_VID+0x1ef>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1a0a:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
    1a0e:	eba4 040b 	sub.w	r4, r4, fp
    1a12:	e013      	b.n	1a3c <CONFIG_USB_DEVICE_VID+0x127>
			} else if (special == '+') {
    1a14:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1a16:	bf0a      	itet	eq
    1a18:	4f67      	ldreq	r7, [pc, #412]	; (1bb8 <CONFIG_USB_DEVICE_VID+0x2a3>)
	prefix = "";
    1a1a:	4f68      	ldrne	r7, [pc, #416]	; (1bbc <CONFIG_USB_DEVICE_VID+0x2a7>)
				min_width--;
    1a1c:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    1a20:	e7c6      	b.n	19b0 <CONFIG_USB_DEVICE_VID+0x9b>
			if (*fmt == 'p') {
    1a22:	2970      	cmp	r1, #112	; 0x70
    1a24:	d10f      	bne.n	1a46 <CONFIG_USB_DEVICE_VID+0x131>
				x = (uintptr_t)va_arg(ap, void *);
    1a26:	f855 2b04 	ldr.w	r2, [r5], #4
    1a2a:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1a2c:	b9fa      	cbnz	r2, 1a6e <CONFIG_USB_DEVICE_VID+0x159>
		precision -= data_len;
    1a2e:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    1a32:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1a36:	4e62      	ldr	r6, [pc, #392]	; (1bc0 <CONFIG_USB_DEVICE_VID+0x2ab>)
		min_width -= data_len;
    1a38:	3c05      	subs	r4, #5
	prefix = "";
    1a3a:	4f60      	ldr	r7, [pc, #384]	; (1bbc <CONFIG_USB_DEVICE_VID+0x2a7>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1a3c:	9a02      	ldr	r2, [sp, #8]
    1a3e:	0792      	lsls	r2, r2, #30
    1a40:	d46f      	bmi.n	1b22 <CONFIG_USB_DEVICE_VID+0x20d>
    1a42:	46a0      	mov	r8, r4
    1a44:	e065      	b.n	1b12 <CONFIG_USB_DEVICE_VID+0x1fd>
		switch (*fmt) {
    1a46:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    1a48:	2b6c      	cmp	r3, #108	; 0x6c
    1a4a:	d103      	bne.n	1a54 <CONFIG_USB_DEVICE_VID+0x13f>
				x = va_arg(ap, unsigned int);
    1a4c:	2300      	movs	r3, #0
    1a4e:	f855 2b04 	ldr.w	r2, [r5], #4
    1a52:	e008      	b.n	1a66 <CONFIG_USB_DEVICE_VID+0x151>
			} else if (length_mod == 'L') {
    1a54:	2b4c      	cmp	r3, #76	; 0x4c
    1a56:	d1f9      	bne.n	1a4c <CONFIG_USB_DEVICE_VID+0x137>
				unsigned long long llx =
    1a58:	3507      	adds	r5, #7
    1a5a:	f025 0307 	bic.w	r3, r5, #7
    1a5e:	461d      	mov	r5, r3
    1a60:	685b      	ldr	r3, [r3, #4]
    1a62:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    1a66:	2823      	cmp	r0, #35	; 0x23
    1a68:	d125      	bne.n	1ab6 <CONFIG_USB_DEVICE_VID+0x1a1>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1a6a:	0688      	lsls	r0, r1, #26
    1a6c:	d521      	bpl.n	1ab2 <CONFIG_USB_DEVICE_VID+0x19d>
    1a6e:	4f55      	ldr	r7, [pc, #340]	; (1bc4 <CONFIG_USB_DEVICE_VID+0x2af>)
				min_width -= 2;
    1a70:	3c02      	subs	r4, #2
	int i = 0;
    1a72:	2600      	movs	r6, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1a74:	f001 0160 	and.w	r1, r1, #96	; 0x60
    1a78:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
    1a7c:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
		unsigned int c = num % base;
    1a80:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    1a84:	2909      	cmp	r1, #9
			c += alpha;
    1a86:	bf88      	it	hi
    1a88:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
    1a8a:	3130      	adds	r1, #48	; 0x30
    1a8c:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
    1a90:	2a10      	cmp	r2, #16
		num /= base;
    1a92:	ea4f 1112 	mov.w	r1, r2, lsr #4
    1a96:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    1a9a:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1a9e:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1aa2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
    1aa6:	d208      	bcs.n	1aba <CONFIG_USB_DEVICE_VID+0x1a5>
	return -i;
    1aa8:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    1aac:	f106 0330 	add.w	r3, r6, #48	; 0x30
    1ab0:	e7a1      	b.n	19f6 <CONFIG_USB_DEVICE_VID+0xe1>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1ab2:	4f45      	ldr	r7, [pc, #276]	; (1bc8 <CONFIG_USB_DEVICE_VID+0x2b3>)
    1ab4:	e7dc      	b.n	1a70 <CONFIG_USB_DEVICE_VID+0x15b>
	prefix = "";
    1ab6:	4f41      	ldr	r7, [pc, #260]	; (1bbc <CONFIG_USB_DEVICE_VID+0x2a7>)
    1ab8:	e7db      	b.n	1a72 <CONFIG_USB_DEVICE_VID+0x15d>
		buftop[--i] = c + '0';
    1aba:	4666      	mov	r6, ip
		num /= base;
    1abc:	460a      	mov	r2, r1
    1abe:	4603      	mov	r3, r0
    1ac0:	e7de      	b.n	1a80 <CONFIG_USB_DEVICE_VID+0x16b>
			data = va_arg(ap, char *);
    1ac2:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    1ac6:	4630      	mov	r0, r6
    1ac8:	f00a f82e 	bl	bb28 <strlen>
			if (precision >= 0 && data_len > precision) {
    1acc:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
    1ad0:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    1ad2:	db02      	blt.n	1ada <CONFIG_USB_DEVICE_VID+0x1c5>
    1ad4:	4540      	cmp	r0, r8
    1ad6:	bfa8      	it	ge
    1ad8:	46c3      	movge	fp, r8
			precision = 0;
    1ada:	f04f 0800 	mov.w	r8, #0
	prefix = "";
    1ade:	4f37      	ldr	r7, [pc, #220]	; (1bbc <CONFIG_USB_DEVICE_VID+0x2a7>)
		precision -= data_len;
    1ae0:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	dd92      	ble.n	1a0e <CONFIG_USB_DEVICE_VID+0xf9>
			min_width -= precision;
    1ae8:	eba4 0408 	sub.w	r4, r4, r8
    1aec:	e7a6      	b.n	1a3c <CONFIG_USB_DEVICE_VID+0x127>
			buf[0] = c;
    1aee:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    1af2:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1af6:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    1afa:	3c01      	subs	r4, #1
		precision -= data_len;
    1afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			data = buf;
    1b00:	ae06      	add	r6, sp, #24
    1b02:	e79a      	b.n	1a3a <CONFIG_USB_DEVICE_VID+0x125>
    1b04:	46a0      	mov	r8, r4
    1b06:	e7eb      	b.n	1ae0 <CONFIG_USB_DEVICE_VID+0x1cb>
    1b08:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    1b0a:	2020      	movs	r0, #32
    1b0c:	9901      	ldr	r1, [sp, #4]
    1b0e:	47d0      	blx	sl
    1b10:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    1b12:	f1b8 0801 	subs.w	r8, r8, #1
    1b16:	d5f7      	bpl.n	1b08 <CONFIG_USB_DEVICE_VID+0x1f3>
    1b18:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    1b1c:	3c01      	subs	r4, #1
    1b1e:	4491      	add	r9, r2
    1b20:	1aa4      	subs	r4, r4, r2
    1b22:	46b8      	mov	r8, r7
    1b24:	e006      	b.n	1b34 <CONFIG_USB_DEVICE_VID+0x21f>
    1b26:	9304      	str	r3, [sp, #16]
    1b28:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1b2a:	9901      	ldr	r1, [sp, #4]
    1b2c:	47d0      	blx	sl
    1b2e:	9a02      	ldr	r2, [sp, #8]
    1b30:	9b04      	ldr	r3, [sp, #16]
    1b32:	4690      	mov	r8, r2
		while (*prefix) {
    1b34:	4642      	mov	r2, r8
    1b36:	f812 0b01 	ldrb.w	r0, [r2], #1
    1b3a:	2800      	cmp	r0, #0
    1b3c:	d1f3      	bne.n	1b26 <CONFIG_USB_DEVICE_VID+0x211>
    1b3e:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1b40:	3a01      	subs	r2, #1
    1b42:	d515      	bpl.n	1b70 <CONFIG_USB_DEVICE_VID+0x25b>
    1b44:	2b00      	cmp	r3, #0
    1b46:	bfac      	ite	ge
    1b48:	ebc7 0703 	rsbge	r7, r7, r3
    1b4c:	427f      	neglt	r7, r7
    1b4e:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    1b50:	3b01      	subs	r3, #1
    1b52:	d515      	bpl.n	1b80 <CONFIG_USB_DEVICE_VID+0x26b>
    1b54:	f1bb 0f00 	cmp.w	fp, #0
    1b58:	bfa8      	it	ge
    1b5a:	445f      	addge	r7, fp
    1b5c:	4626      	mov	r6, r4
    1b5e:	444f      	add	r7, r9
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1b60:	3e01      	subs	r6, #1
    1b62:	d514      	bpl.n	1b8e <CONFIG_USB_DEVICE_VID+0x279>
    1b64:	2c00      	cmp	r4, #0
    1b66:	bfa8      	it	ge
    1b68:	193f      	addge	r7, r7, r4
    1b6a:	eb07 0908 	add.w	r9, r7, r8
    1b6e:	e613      	b.n	1798 <z_cbvprintf_impl+0x14>
    1b70:	9304      	str	r3, [sp, #16]
    1b72:	9202      	str	r2, [sp, #8]
			OUTC('0');
    1b74:	2030      	movs	r0, #48	; 0x30
    1b76:	9901      	ldr	r1, [sp, #4]
    1b78:	47d0      	blx	sl
    1b7a:	9b04      	ldr	r3, [sp, #16]
    1b7c:	9a02      	ldr	r2, [sp, #8]
    1b7e:	e7df      	b.n	1b40 <CONFIG_USB_DEVICE_VID+0x22b>
    1b80:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1b82:	9901      	ldr	r1, [sp, #4]
    1b84:	f816 0b01 	ldrb.w	r0, [r6], #1
    1b88:	47d0      	blx	sl
    1b8a:	9b02      	ldr	r3, [sp, #8]
    1b8c:	e7e0      	b.n	1b50 <CONFIG_USB_DEVICE_VID+0x23b>
			OUTC(' ');
    1b8e:	9901      	ldr	r1, [sp, #4]
    1b90:	2020      	movs	r0, #32
    1b92:	47d0      	blx	sl
    1b94:	e7e4      	b.n	1b60 <CONFIG_USB_DEVICE_VID+0x24b>
				padding_mode = PAD_ZERO;
    1b96:	2201      	movs	r2, #1
    1b98:	e6d3      	b.n	1942 <CONFIG_USB_DEVICE_VID+0x2d>
				precision = va_arg(ap, int);
    1b9a:	4690      	mov	r8, r2
    1b9c:	e661      	b.n	1862 <z_cbvprintf_impl+0xde>
    1b9e:	4614      	mov	r4, r2
    1ba0:	e65f      	b.n	1862 <z_cbvprintf_impl+0xde>
				length_mod = 'L';
    1ba2:	234c      	movs	r3, #76	; 0x4c
    1ba4:	e65d      	b.n	1862 <z_cbvprintf_impl+0xde>
		}

		goto start;
	}
}
    1ba6:	4648      	mov	r0, r9
    1ba8:	b00d      	add	sp, #52	; 0x34
    1baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bae:	bf00      	nop
    1bb0:	0000f143 	.word	0x0000f143
    1bb4:	0000f141 	.word	0x0000f141
    1bb8:	0000f145 	.word	0x0000f145
    1bbc:	0000f205 	.word	0x0000f205
    1bc0:	0000f14d 	.word	0x0000f14d
    1bc4:	0000f147 	.word	0x0000f147
    1bc8:	0000f14a 	.word	0x0000f14a

00001bcc <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1bcc:	4b05      	ldr	r3, [pc, #20]	; (1be4 <nrf_gpio_pin_control_select.constprop.0+0x18>)
    1bce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1bd2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1bd6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    1bda:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1bde:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    1be2:	4770      	bx	lr
    1be4:	50842500 	.word	0x50842500

00001be8 <nordicsemi_nrf53_init>:
	return true;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(const struct device *arg)
{
    1be8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1bea:	f04f 0320 	mov.w	r3, #32
    1bee:	f3ef 8511 	mrs	r5, BASEPRI
    1bf2:	f383 8812 	msr	BASEPRI_MAX, r3
    1bf6:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    1bfa:	2101      	movs	r1, #1
    1bfc:	4b1a      	ldr	r3, [pc, #104]	; (1c68 <nordicsemi_nrf53_init+0x80>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1bfe:	4a1b      	ldr	r2, [pc, #108]	; (1c6c <nordicsemi_nrf53_init+0x84>)
    1c00:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    1c04:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1c06:	2000      	movs	r0, #0
    1c08:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0
    1c0c:	f7ff ffde 	bl	1bcc <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1c10:	4608      	mov	r0, r1
    1c12:	f7ff ffdb 	bl	1bcc <nrf_gpio_pin_control_select.constprop.0>
	*((volatile uint32_t *)0x5000470C) = 0x7Eul;
    1c16:	237e      	movs	r3, #126	; 0x7e
	*((volatile uint32_t *)0x50002118) = 0x7Ful;
    1c18:	207f      	movs	r0, #127	; 0x7f
	*((volatile uint32_t *)0x5000470C) = 0x7Eul;
    1c1a:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
	*((volatile uint32_t *)0x5000493C) = 0x7Eul;
    1c1e:	f8c2 393c 	str.w	r3, [r2, #2364]	; 0x93c
	*((volatile uint32_t *)0x50002118) = 0x7Ful;
    1c22:	4b13      	ldr	r3, [pc, #76]	; (1c70 <nordicsemi_nrf53_init+0x88>)
	*((volatile uint32_t *)0x50039E04) = 0x0ul;
    1c24:	4c13      	ldr	r4, [pc, #76]	; (1c74 <nordicsemi_nrf53_init+0x8c>)
	*((volatile uint32_t *)0x50002118) = 0x7Ful;
    1c26:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	*((volatile uint32_t *)0x50039E04) = 0x0ul;
    1c2a:	2000      	movs	r0, #0
    1c2c:	f8c4 0e04 	str.w	r0, [r4, #3588]	; 0xe04
	*((volatile uint32_t *)0x50039E08) = 0x0ul;
    1c30:	f8c4 0e08 	str.w	r0, [r4, #3592]	; 0xe08
	*((volatile uint32_t *)0x50101110) = 0x0ul;
    1c34:	f504 2448 	add.w	r4, r4, #819200	; 0xc8000
    1c38:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
	*((volatile uint32_t *)0x50002124) = 0x0ul;
    1c3c:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
	*((volatile uint32_t *)0x5000212C) = 0x0ul;
    1c40:	f8c3 012c 	str.w	r0, [r3, #300]	; 0x12c
	*((volatile uint32_t *)0x502012A0) = 0x0ul;
    1c44:	f503 13ff 	add.w	r3, r3, #2088960	; 0x1fe000
    1c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1c4c:	f8c3 02a0 	str.w	r0, [r3, #672]	; 0x2a0
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1c50:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1c54:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1c58:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
    1c5c:	f385 8811 	msr	BASEPRI, r5
    1c60:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1c64:	bd38      	pop	{r3, r4, r5, pc}
    1c66:	bf00      	nop
    1c68:	50001000 	.word	0x50001000
    1c6c:	50004000 	.word	0x50004000
    1c70:	50002000 	.word	0x50002000
    1c74:	50039000 	.word	0x50039000

00001c78 <z_arm_on_enter_cpu_idle>:
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1c78:	2305      	movs	r3, #5
{
    1c7a:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1c7c:	4d17      	ldr	r5, [pc, #92]	; (1cdc <z_arm_on_enter_cpu_idle+0x64>)
    1c7e:	4e18      	ldr	r6, [pc, #96]	; (1ce0 <z_arm_on_enter_cpu_idle+0x68>)
    1c80:	782c      	ldrb	r4, [r5, #0]
    1c82:	3401      	adds	r4, #1
    1c84:	fbb4 f3f3 	udiv	r3, r4, r3
    1c88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c8c:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    1c8e:	f00a fa68 	bl	c162 <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    1c92:	4a14      	ldr	r2, [pc, #80]	; (1ce4 <z_arm_on_enter_cpu_idle+0x6c>)
    1c94:	4b14      	ldr	r3, [pc, #80]	; (1ce8 <z_arm_on_enter_cpu_idle+0x70>)
    1c96:	7811      	ldrb	r1, [r2, #0]
    1c98:	b151      	cbz	r1, 1cb0 <z_arm_on_enter_cpu_idle+0x38>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    1c9a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    1c9e:	1a40      	subs	r0, r0, r1
	if (timestamps_filled &&
    1ca0:	2807      	cmp	r0, #7
    1ca2:	d805      	bhi.n	1cb0 <z_arm_on_enter_cpu_idle+0x38>
		if (!suppress_warning) {
    1ca4:	781a      	ldrb	r2, [r3, #0]
    1ca6:	b90a      	cbnz	r2, 1cac <z_arm_on_enter_cpu_idle+0x34>
			suppress_warning = true;
    1ca8:	2201      	movs	r2, #1
    1caa:	701a      	strb	r2, [r3, #0]
		return false;
    1cac:	2000      	movs	r0, #0
}
    1cae:	bd70      	pop	{r4, r5, r6, pc}
	suppress_warning = false;
    1cb0:	2100      	movs	r1, #0
    1cb2:	7019      	strb	r1, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1cb4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1cb8:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    1cbc:	b138      	cbz	r0, 1cce <z_arm_on_enter_cpu_idle+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1cbe:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1cc2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1cc6:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    1cc8:	b90c      	cbnz	r4, 1cce <z_arm_on_enter_cpu_idle+0x56>
			timestamps_filled = true;
    1cca:	2301      	movs	r3, #1
    1ccc:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    1cce:	782c      	ldrb	r4, [r5, #0]
    1cd0:	f00a fa47 	bl	c162 <sys_clock_cycle_get_32>
    1cd4:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    1cd8:	2001      	movs	r0, #1
    1cda:	e7e8      	b.n	1cae <z_arm_on_enter_cpu_idle+0x36>
    1cdc:	20015ee8 	.word	0x20015ee8
    1ce0:	20012c00 	.word	0x20012c00
    1ce4:	20015ee7 	.word	0x20015ee7
    1ce8:	20015ee6 	.word	0x20015ee6

00001cec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1cec:	b148      	cbz	r0, 1d02 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    1cee:	4b05      	ldr	r3, [pc, #20]	; (1d04 <arch_busy_wait+0x18>)
    1cf0:	4a05      	ldr	r2, [pc, #20]	; (1d08 <arch_busy_wait+0x1c>)
    1cf2:	681b      	ldr	r3, [r3, #0]
    1cf4:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    1cf8:	4358      	muls	r0, r3
    1cfa:	4b04      	ldr	r3, [pc, #16]	; (1d0c <arch_busy_wait+0x20>)
    1cfc:	f043 0301 	orr.w	r3, r3, #1
    1d00:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1d02:	4770      	bx	lr
    1d04:	2000215c 	.word	0x2000215c
    1d08:	000f4240 	.word	0x000f4240
    1d0c:	0000e9d0 	.word	0x0000e9d0

00001d10 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1d10:	f005 b8fc 	b.w	6f0c <SystemInit>

00001d14 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    1d14:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1d16:	4b0c      	ldr	r3, [pc, #48]	; (1d48 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d18:	4e0c      	ldr	r6, [pc, #48]	; (1d4c <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1d1a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d1c:	4b0c      	ldr	r3, [pc, #48]	; (1d50 <class_handler+0x3c>)
    1d1e:	42b3      	cmp	r3, r6
    1d20:	d303      	bcc.n	1d2a <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    1d22:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1d26:	bcf0      	pop	{r4, r5, r6, r7}
    1d28:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    1d2a:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1d2c:	42bd      	cmp	r5, r7
    1d2e:	d309      	bcc.n	1d44 <class_handler+0x30>
		if (iface->class_handler &&
    1d30:	691c      	ldr	r4, [r3, #16]
    1d32:	b13c      	cbz	r4, 1d44 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1d34:	f895 c002 	ldrb.w	ip, [r5, #2]
    1d38:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    1d3a:	45ac      	cmp	ip, r5
    1d3c:	d102      	bne.n	1d44 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    1d3e:	4623      	mov	r3, r4
}
    1d40:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    1d42:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d44:	3324      	adds	r3, #36	; 0x24
    1d46:	e7ea      	b.n	1d1e <class_handler+0xa>
    1d48:	20012c14 	.word	0x20012c14
    1d4c:	20002460 	.word	0x20002460
    1d50:	2000243c 	.word	0x2000243c

00001d54 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d58:	4605      	mov	r5, r0
    1d5a:	460e      	mov	r6, r1
    1d5c:	4617      	mov	r7, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d5e:	4c12      	ldr	r4, [pc, #72]	; (1da8 <custom_handler+0x54>)
    1d60:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1dac <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1d64:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1db0 <custom_handler+0x5c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d68:	4544      	cmp	r4, r8
    1d6a:	d303      	bcc.n	1d74 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    1d6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    1d74:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1d76:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    1d7a:	429a      	cmp	r2, r3
    1d7c:	d312      	bcc.n	1da4 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    1d7e:	69a3      	ldr	r3, [r4, #24]
    1d80:	b183      	cbz	r3, 1da4 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1d82:	7890      	ldrb	r0, [r2, #2]
    1d84:	7929      	ldrb	r1, [r5, #4]
    1d86:	4288      	cmp	r0, r1
    1d88:	d105      	bne.n	1d96 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    1d8a:	463a      	mov	r2, r7
    1d8c:	4631      	mov	r1, r6
    1d8e:	4628      	mov	r0, r5
}
    1d90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    1d94:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    1d96:	7952      	ldrb	r2, [r2, #5]
    1d98:	2a01      	cmp	r2, #1
    1d9a:	d103      	bne.n	1da4 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    1d9c:	463a      	mov	r2, r7
    1d9e:	4631      	mov	r1, r6
    1da0:	4628      	mov	r0, r5
    1da2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1da4:	3424      	adds	r4, #36	; 0x24
    1da6:	e7df      	b.n	1d68 <custom_handler+0x14>
    1da8:	2000243c 	.word	0x2000243c
    1dac:	20002460 	.word	0x20002460
    1db0:	20012c14 	.word	0x20012c14

00001db4 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1db8:	4605      	mov	r5, r0
    1dba:	460e      	mov	r6, r1
    1dbc:	4617      	mov	r7, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1dbe:	4c0a      	ldr	r4, [pc, #40]	; (1de8 <vendor_handler+0x34>)
    1dc0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1dec <vendor_handler+0x38>
    1dc4:	4544      	cmp	r4, r8
    1dc6:	d302      	bcc.n	1dce <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    1dc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1dcc:	e009      	b.n	1de2 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    1dce:	6963      	ldr	r3, [r4, #20]
    1dd0:	b90b      	cbnz	r3, 1dd6 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1dd2:	3424      	adds	r4, #36	; 0x24
    1dd4:	e7f6      	b.n	1dc4 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    1dd6:	463a      	mov	r2, r7
    1dd8:	4631      	mov	r1, r6
    1dda:	4628      	mov	r0, r5
    1ddc:	4798      	blx	r3
    1dde:	2800      	cmp	r0, #0
    1de0:	d1f7      	bne.n	1dd2 <vendor_handler+0x1e>
}
    1de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1de6:	bf00      	nop
    1de8:	2000243c 	.word	0x2000243c
    1dec:	20002460 	.word	0x20002460

00001df0 <disable_endpoint>:
{
    1df0:	b510      	push	{r4, lr}
    1df2:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
    1df4:	f009 ff1b 	bl	bc2e <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    1df8:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1dfc:	d000      	beq.n	1e00 <disable_endpoint+0x10>
	} else if (ret) {
    1dfe:	b950      	cbnz	r0, 1e16 <disable_endpoint+0x26>
	ep_bm = get_ep_bm_from_addr(ep_addr);
    1e00:	4620      	mov	r0, r4
    1e02:	f009 f9a5 	bl	b150 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    1e06:	4a04      	ldr	r2, [pc, #16]	; (1e18 <disable_endpoint+0x28>)
    1e08:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    1e0c:	ea23 0300 	bic.w	r3, r3, r0
	return 0;
    1e10:	2000      	movs	r0, #0
	usb_dev.ep_bm &= ~ep_bm;
    1e12:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
}
    1e16:	bd10      	pop	{r4, pc}
    1e18:	20012c14 	.word	0x20012c14

00001e1c <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    1e1c:	2208      	movs	r2, #8
    1e1e:	2100      	movs	r1, #0
    1e20:	4801      	ldr	r0, [pc, #4]	; (1e28 <usb_reset_alt_setting+0xc>)
    1e22:	f009 beba 	b.w	bb9a <memset>
    1e26:	bf00      	nop
    1e28:	20012ccf 	.word	0x20012ccf

00001e2c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    1e2c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e2e:	4b0b      	ldr	r3, [pc, #44]	; (1e5c <is_ep_valid.part.0+0x30>)
    1e30:	4c0b      	ldr	r4, [pc, #44]	; (1e60 <is_ep_valid.part.0+0x34>)
    1e32:	42a3      	cmp	r3, r4
    1e34:	d301      	bcc.n	1e3a <is_ep_valid.part.0+0xe>
	return false;
    1e36:	2000      	movs	r0, #0
}
    1e38:	bd70      	pop	{r4, r5, r6, pc}
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1e3a:	2200      	movs	r2, #0
		ep_data = cfg_data->endpoint;
    1e3c:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1e3e:	7f1e      	ldrb	r6, [r3, #28]
			if (ep_data[n].ep_addr == ep) {
    1e40:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1e42:	b2d5      	uxtb	r5, r2
    1e44:	42ae      	cmp	r6, r5
    1e46:	d801      	bhi.n	1e4c <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e48:	3324      	adds	r3, #36	; 0x24
    1e4a:	e7f2      	b.n	1e32 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    1e4c:	3201      	adds	r2, #1
    1e4e:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    1e52:	4285      	cmp	r5, r0
    1e54:	d1f5      	bne.n	1e42 <is_ep_valid.part.0+0x16>
		return true;
    1e56:	2001      	movs	r0, #1
    1e58:	e7ee      	b.n	1e38 <is_ep_valid.part.0+0xc>
    1e5a:	bf00      	nop
    1e5c:	2000243c 	.word	0x2000243c
    1e60:	20002460 	.word	0x20002460

00001e64 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    1e64:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    1e66:	4809      	ldr	r0, [pc, #36]	; (1e8c <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    1e68:	7803      	ldrb	r3, [r0, #0]
    1e6a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    1e6e:	330a      	adds	r3, #10
    1e70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    1e74:	b13b      	cbz	r3, 1e86 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    1e76:	f100 0208 	add.w	r2, r0, #8
    1e7a:	f100 0110 	add.w	r1, r0, #16
    1e7e:	4798      	blx	r3
    1e80:	43c0      	mvns	r0, r0
    1e82:	0fc0      	lsrs	r0, r0, #31
}
    1e84:	bd08      	pop	{r3, pc}
		return false;
    1e86:	4618      	mov	r0, r3
    1e88:	e7fc      	b.n	1e84 <usb_handle_request.constprop.0+0x20>
    1e8a:	bf00      	nop
    1e8c:	20012c14 	.word	0x20012c14

00001e90 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    1e90:	2804      	cmp	r0, #4
{
    1e92:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e96:	4604      	mov	r4, r0
    1e98:	460f      	mov	r7, r1
    1e9a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1f44 <forward_status_cb+0xb4>
	if (status == USB_DC_DISCONNECTED) {
    1e9e:	d117      	bne.n	1ed0 <forward_status_cb+0x40>
		usb_reset_alt_setting();
    1ea0:	f7ff ffbc 	bl	1e1c <usb_reset_alt_setting>
		if (usb_dev.configured) {
    1ea4:	4b28      	ldr	r3, [pc, #160]	; (1f48 <forward_status_cb+0xb8>)
    1ea6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    1eaa:	b1cb      	cbz	r3, 1ee0 <forward_status_cb+0x50>
			usb_cancel_transfers();
    1eac:	f000 fdf2 	bl	2a94 <usb_cancel_transfers>
    1eb0:	4d26      	ldr	r5, [pc, #152]	; (1f4c <forward_status_cb+0xbc>)
	usb_dev.ep_bm &= ~ep_bm;
    1eb2:	f8df a094 	ldr.w	sl, [pc, #148]	; 1f48 <forward_status_cb+0xb8>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1eb6:	454d      	cmp	r5, r9
    1eb8:	d234      	bcs.n	1f24 <forward_status_cb+0x94>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1eba:	f04f 0800 	mov.w	r8, #0
		ep_data = cfg_data->endpoint;
    1ebe:	f8d5 b020 	ldr.w	fp, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1ec2:	7f2b      	ldrb	r3, [r5, #28]
    1ec4:	fa5f f688 	uxtb.w	r6, r8
    1ec8:	42b3      	cmp	r3, r6
    1eca:	d818      	bhi.n	1efe <forward_status_cb+0x6e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1ecc:	3524      	adds	r5, #36	; 0x24
    1ece:	e7f2      	b.n	1eb6 <forward_status_cb+0x26>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    1ed0:	2805      	cmp	r0, #5
    1ed2:	d111      	bne.n	1ef8 <forward_status_cb+0x68>
		if (usb_dev.configured) {
    1ed4:	4b1c      	ldr	r3, [pc, #112]	; (1f48 <forward_status_cb+0xb8>)
    1ed6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    1eda:	b10b      	cbz	r3, 1ee0 <forward_status_cb+0x50>
			usb_cancel_transfers();
    1edc:	f000 fdda 	bl	2a94 <usb_cancel_transfers>
    1ee0:	4d1a      	ldr	r5, [pc, #104]	; (1f4c <forward_status_cb+0xbc>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1ee2:	454d      	cmp	r5, r9
    1ee4:	d323      	bcc.n	1f2e <forward_status_cb+0x9e>
	if (usb_dev.user_status_callback) {
    1ee6:	4b18      	ldr	r3, [pc, #96]	; (1f48 <forward_status_cb+0xb8>)
    1ee8:	6a1b      	ldr	r3, [r3, #32]
    1eea:	b343      	cbz	r3, 1f3e <forward_status_cb+0xae>
		usb_dev.user_status_callback(status, param);
    1eec:	4639      	mov	r1, r7
    1eee:	4620      	mov	r0, r4
}
    1ef0:	b001      	add	sp, #4
    1ef2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    1ef6:	4718      	bx	r3
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    1ef8:	2801      	cmp	r0, #1
    1efa:	d1f1      	bne.n	1ee0 <forward_status_cb+0x50>
    1efc:	e7d2      	b.n	1ea4 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    1efe:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    1f02:	7930      	ldrb	r0, [r6, #4]
    1f04:	f009 fe93 	bl	bc2e <usb_dc_ep_disable>
    1f08:	4602      	mov	r2, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    1f0a:	7930      	ldrb	r0, [r6, #4]
    1f0c:	f009 f920 	bl	b150 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    1f10:	f8da 30c4 	ldr.w	r3, [sl, #196]	; 0xc4
			if (ret < 0) {
    1f14:	2a00      	cmp	r2, #0
	usb_dev.ep_bm &= ~ep_bm;
    1f16:	ea23 0300 	bic.w	r3, r3, r0
    1f1a:	f8ca 30c4 	str.w	r3, [sl, #196]	; 0xc4
			if (ret < 0) {
    1f1e:	f108 0801 	add.w	r8, r8, #1
    1f22:	dace      	bge.n	1ec2 <forward_status_cb+0x32>
				usb_dev.configured = false;
    1f24:	2200      	movs	r2, #0
    1f26:	4b08      	ldr	r3, [pc, #32]	; (1f48 <forward_status_cb+0xb8>)
    1f28:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    1f2c:	e7d8      	b.n	1ee0 <forward_status_cb+0x50>
		if (cfg_data->cb_usb_status) {
    1f2e:	68eb      	ldr	r3, [r5, #12]
    1f30:	b11b      	cbz	r3, 1f3a <forward_status_cb+0xaa>
			cfg_data->cb_usb_status(cfg_data, status, param);
    1f32:	463a      	mov	r2, r7
    1f34:	4621      	mov	r1, r4
    1f36:	4628      	mov	r0, r5
    1f38:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1f3a:	3524      	adds	r5, #36	; 0x24
    1f3c:	e7d1      	b.n	1ee2 <forward_status_cb+0x52>
}
    1f3e:	b001      	add	sp, #4
    1f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f44:	20002460 	.word	0x20002460
    1f48:	20012c14 	.word	0x20012c14
    1f4c:	2000243c 	.word	0x2000243c

00001f50 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1f50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    1f52:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    1f54:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1f56:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    1f58:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    1f5c:	d007      	beq.n	1f6e <usb_halt_endpoint_req.isra.0+0x1e>
    1f5e:	4620      	mov	r0, r4
    1f60:	f7ff ff64 	bl	1e2c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    1f64:	b178      	cbz	r0, 1f86 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    1f66:	4b0d      	ldr	r3, [pc, #52]	; (1f9c <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1f68:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    1f6c:	b158      	cbz	r0, 1f86 <usb_halt_endpoint_req.isra.0+0x36>
			usb_dc_ep_set_stall(ep);
    1f6e:	4620      	mov	r0, r4
    1f70:	4e0a      	ldr	r6, [pc, #40]	; (1f9c <usb_halt_endpoint_req.isra.0+0x4c>)
		if (halt) {
    1f72:	b155      	cbz	r5, 1f8a <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    1f74:	f002 ff1a 	bl	4dac <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    1f78:	69f3      	ldr	r3, [r6, #28]
    1f7a:	b11b      	cbz	r3, 1f84 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    1f7c:	2008      	movs	r0, #8
    1f7e:	f10d 0107 	add.w	r1, sp, #7
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    1f82:	4798      	blx	r3
		return true;
    1f84:	2001      	movs	r0, #1
}
    1f86:	b002      	add	sp, #8
    1f88:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    1f8a:	f002 ff37 	bl	4dfc <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    1f8e:	69f3      	ldr	r3, [r6, #28]
    1f90:	2b00      	cmp	r3, #0
    1f92:	d0f7      	beq.n	1f84 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    1f94:	2009      	movs	r0, #9
    1f96:	f10d 0107 	add.w	r1, sp, #7
    1f9a:	e7f2      	b.n	1f82 <usb_halt_endpoint_req.isra.0+0x32>
    1f9c:	20012c14 	.word	0x20012c14

00001fa0 <set_endpoint>:
{
    1fa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    1fa2:	7886      	ldrb	r6, [r0, #2]
	if (ep_bm & usb_dev.ep_bm) {
    1fa4:	4c1d      	ldr	r4, [pc, #116]	; (201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>)
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    1fa6:	f88d 6000 	strb.w	r6, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    1faa:	7903      	ldrb	r3, [r0, #4]
    1fac:	7942      	ldrb	r2, [r0, #5]
    1fae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1fb2:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1fb6:	78c3      	ldrb	r3, [r0, #3]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    1fb8:	4630      	mov	r0, r6
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1fba:	f003 0303 	and.w	r3, r3, #3
    1fbe:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    1fc2:	f009 f8c5 	bl	b150 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    1fc6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    1fca:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
    1fcc:	4218      	tst	r0, r3
    1fce:	d008      	beq.n	1fe2 <set_endpoint+0x42>
	usb_cancel_transfer(ep_cfg.ep_addr);
    1fd0:	4630      	mov	r0, r6
    1fd2:	f000 fd41 	bl	2a58 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    1fd6:	4630      	mov	r0, r6
    1fd8:	f7ff ff0a 	bl	1df0 <disable_endpoint>
		union { uintptr_t x; int32_t val; } parm0 = { .val = us };
		return (int32_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
    1fdc:	2096      	movs	r0, #150	; 0x96
    1fde:	f007 fdc1 	bl	9b64 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    1fe2:	4668      	mov	r0, sp
    1fe4:	f002 febe 	bl	4d64 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    1fe8:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1fec:	d003      	beq.n	1ff6 <set_endpoint+0x56>
	} else if (ret) {
    1fee:	b110      	cbz	r0, 1ff6 <set_endpoint+0x56>
		return false;
    1ff0:	2000      	movs	r0, #0
}
    1ff2:	b002      	add	sp, #8
    1ff4:	bd70      	pop	{r4, r5, r6, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    1ff6:	f89d 0000 	ldrb.w	r0, [sp]
    1ffa:	f002 ff3b 	bl	4e74 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    1ffe:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2002:	d001      	beq.n	2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
	} else if (ret) {
    2004:	2800      	cmp	r0, #0
    2006:	d1f3      	bne.n	1ff0 <set_endpoint+0x50>
	usb_dev.configured = true;
    2008:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    200a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	usb_dev.configured = true;
    200e:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    2012:	432b      	orrs	r3, r5
    2014:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	return true;
    2018:	e7eb      	b.n	1ff2 <set_endpoint+0x52>
    201a:	bf00      	nop
    201c:	20012c14 	.word	0x20012c14

00002020 <usb_handle_standard_request>:
{
    2020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    2024:	4d92      	ldr	r5, [pc, #584]	; (2270 <usb_handle_standard_request+0x250>)
{
    2026:	4604      	mov	r4, r0
	if (usb_dev.custom_req_handler &&
    2028:	69ab      	ldr	r3, [r5, #24]
{
    202a:	460e      	mov	r6, r1
    202c:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
    202e:	b9c3      	cbnz	r3, 2062 <usb_handle_standard_request+0x42>
	switch (setup->RequestType.recipient) {
    2030:	7820      	ldrb	r0, [r4, #0]
    2032:	f000 001f 	and.w	r0, r0, #31
    2036:	2801      	cmp	r0, #1
    2038:	d076      	beq.n	2128 <usb_handle_standard_request+0x108>
    203a:	2802      	cmp	r0, #2
    203c:	f000 80dc 	beq.w	21f8 <usb_handle_standard_request+0x1d8>
    2040:	bb00      	cbnz	r0, 2084 <usb_handle_standard_request+0x64>
	if (usb_reqtype_is_to_host(setup)) {
    2042:	f994 1000 	ldrsb.w	r1, [r4]
	uint8_t *data = *data_buf;
    2046:	683a      	ldr	r2, [r7, #0]
	if (usb_reqtype_is_to_host(setup)) {
    2048:	2900      	cmp	r1, #0
		switch (setup->bRequest) {
    204a:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    204c:	da2e      	bge.n	20ac <usb_handle_standard_request+0x8c>
		switch (setup->bRequest) {
    204e:	2b06      	cmp	r3, #6
    2050:	d00c      	beq.n	206c <usb_handle_standard_request+0x4c>
    2052:	2b08      	cmp	r3, #8
    2054:	d025      	beq.n	20a2 <usb_handle_standard_request+0x82>
    2056:	b9ab      	cbnz	r3, 2084 <usb_handle_standard_request+0x64>
	data[1] = 0U;
    2058:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    205a:	2301      	movs	r3, #1
    205c:	7013      	strb	r3, [r2, #0]
		*len = 2;
    205e:	2302      	movs	r3, #2
    2060:	e103      	b.n	226a <usb_handle_standard_request+0x24a>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    2062:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    2064:	2800      	cmp	r0, #0
    2066:	d1e3      	bne.n	2030 <usb_handle_standard_request+0x10>
		return 0;
    2068:	2000      	movs	r0, #0
    206a:	e00d      	b.n	2088 <usb_handle_standard_request+0x68>
			return usb_get_descriptor(setup, len, data_buf);
    206c:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    206e:	0a19      	lsrs	r1, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2070:	1f0a      	subs	r2, r1, #4
    2072:	2a01      	cmp	r2, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    2074:	468c      	mov	ip, r1
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2076:	d905      	bls.n	2084 <usb_handle_standard_request+0x64>
    2078:	2907      	cmp	r1, #7
    207a:	d803      	bhi.n	2084 <usb_handle_standard_request+0x64>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    207c:	b2da      	uxtb	r2, r3
	p = (uint8_t *)usb_dev.descriptors;
    207e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    2080:	781c      	ldrb	r4, [r3, #0]
    2082:	b91c      	cbnz	r4, 208c <usb_handle_standard_request+0x6c>
			rc = -EINVAL;
    2084:	f06f 0015 	mvn.w	r0, #21
}
    2088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    208c:	785d      	ldrb	r5, [r3, #1]
    208e:	4565      	cmp	r5, ip
    2090:	d103      	bne.n	209a <usb_handle_standard_request+0x7a>
			if (cur_index == index) {
    2092:	4282      	cmp	r2, r0
    2094:	f000 80e4 	beq.w	2260 <usb_handle_standard_request+0x240>
			cur_index++;
    2098:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    209a:	4423      	add	r3, r4
    209c:	e7f0      	b.n	2080 <usb_handle_standard_request+0x60>
			*len = p[DESC_bLength];
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	e0e3      	b.n	226a <usb_handle_standard_request+0x24a>
			data[0] = usb_dev.configuration;
    20a2:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    20a6:	7013      	strb	r3, [r2, #0]
				*len = 1;
    20a8:	2301      	movs	r3, #1
    20aa:	e0de      	b.n	226a <usb_handle_standard_request+0x24a>
		switch (setup->bRequest) {
    20ac:	2b05      	cmp	r3, #5
    20ae:	d011      	beq.n	20d4 <usb_handle_standard_request+0xb4>
    20b0:	2b09      	cmp	r3, #9
    20b2:	d1e7      	bne.n	2084 <usb_handle_standard_request+0x64>
	if (setup->wValue == 0U) {
    20b4:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    20b6:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	if (setup->wValue == 0U) {
    20b8:	2b00      	cmp	r3, #0
    20ba:	d132      	bne.n	2122 <usb_handle_standard_request+0x102>
		usb_reset_alt_setting();
    20bc:	f7ff feae 	bl	1e1c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    20c0:	8863      	ldrh	r3, [r4, #2]
    20c2:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
		if (usb_dev.status_callback) {
    20c6:	69eb      	ldr	r3, [r5, #28]
    20c8:	2b00      	cmp	r3, #0
    20ca:	d0cd      	beq.n	2068 <usb_handle_standard_request+0x48>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    20cc:	2003      	movs	r0, #3
    20ce:	4969      	ldr	r1, [pc, #420]	; (2274 <usb_handle_standard_request+0x254>)
    20d0:	4798      	blx	r3
    20d2:	e7c9      	b.n	2068 <usb_handle_standard_request+0x48>
			return !usb_dc_set_address(setup->wValue);
    20d4:	78a0      	ldrb	r0, [r4, #2]
    20d6:	f002 fe33 	bl	4d40 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    20da:	2800      	cmp	r0, #0
    20dc:	d0c4      	beq.n	2068 <usb_handle_standard_request+0x48>
    20de:	e7d1      	b.n	2084 <usb_handle_standard_request+0x64>
		switch (p[DESC_bDescriptorType]) {
    20e0:	7873      	ldrb	r3, [r6, #1]
    20e2:	2b04      	cmp	r3, #4
    20e4:	d010      	beq.n	2108 <usb_handle_standard_request+0xe8>
    20e6:	2b05      	cmp	r3, #5
    20e8:	d011      	beq.n	210e <usb_handle_standard_request+0xee>
    20ea:	2b02      	cmp	r3, #2
    20ec:	d104      	bne.n	20f8 <usb_handle_standard_request+0xd8>
			cur_config = p[CONF_DESC_bConfigurationValue];
    20ee:	7977      	ldrb	r7, [r6, #5]
			if (cur_config == setup->wValue) {
    20f0:	8863      	ldrh	r3, [r4, #2]
				found = true;
    20f2:	42bb      	cmp	r3, r7
    20f4:	bf08      	it	eq
    20f6:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    20f8:	7833      	ldrb	r3, [r6, #0]
    20fa:	441e      	add	r6, r3
	while (p[DESC_bLength] != 0U) {
    20fc:	7833      	ldrb	r3, [r6, #0]
    20fe:	2b00      	cmp	r3, #0
    2100:	d1ee      	bne.n	20e0 <usb_handle_standard_request+0xc0>
	if (found) {
    2102:	2800      	cmp	r0, #0
    2104:	d0be      	beq.n	2084 <usb_handle_standard_request+0x64>
    2106:	e7d9      	b.n	20bc <usb_handle_standard_request+0x9c>
			cur_alt_setting =
    2108:	f896 8003 	ldrb.w	r8, [r6, #3]
			break;
    210c:	e7f4      	b.n	20f8 <usb_handle_standard_request+0xd8>
			if ((cur_config != setup->wValue) ||
    210e:	8863      	ldrh	r3, [r4, #2]
    2110:	42bb      	cmp	r3, r7
    2112:	d1f1      	bne.n	20f8 <usb_handle_standard_request+0xd8>
    2114:	f1b8 0f00 	cmp.w	r8, #0
    2118:	d1ee      	bne.n	20f8 <usb_handle_standard_request+0xd8>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    211a:	4630      	mov	r0, r6
    211c:	f7ff ff40 	bl	1fa0 <set_endpoint>
			break;
    2120:	e7ea      	b.n	20f8 <usb_handle_standard_request+0xd8>
	uint8_t cur_config = 0xFF;
    2122:	27ff      	movs	r7, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2124:	46b8      	mov	r8, r7
    2126:	e7e9      	b.n	20fc <usb_handle_standard_request+0xdc>
	if (!is_device_configured() ||
    2128:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    212c:	f8d7 c000 	ldr.w	ip, [r7]
    2130:	2b00      	cmp	r3, #0
    2132:	d0a7      	beq.n	2084 <usb_handle_standard_request+0x64>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2134:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    2136:	88a2      	ldrh	r2, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2138:	463b      	mov	r3, r7
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    213a:	f894 e004 	ldrb.w	lr, [r4, #4]
	while (p[DESC_bLength] != 0U) {
    213e:	7818      	ldrb	r0, [r3, #0]
    2140:	2800      	cmp	r0, #0
    2142:	d09f      	beq.n	2084 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    2144:	7859      	ldrb	r1, [r3, #1]
    2146:	2902      	cmp	r1, #2
    2148:	d104      	bne.n	2154 <usb_handle_standard_request+0x134>
			if (interface < cfg_descr->bNumInterfaces) {
    214a:	f893 8004 	ldrb.w	r8, [r3, #4]
    214e:	45f0      	cmp	r8, lr
    2150:	f200 8092 	bhi.w	2278 <usb_handle_standard_request+0x258>
		p += p[DESC_bLength];
    2154:	4403      	add	r3, r0
    2156:	e7f2      	b.n	213e <usb_handle_standard_request+0x11e>
			data[0] = 0U;
    2158:	f88c 3000 	strb.w	r3, [ip]
			data[1] = 0U;
    215c:	f88c 3001 	strb.w	r3, [ip, #1]
			*len = 2;
    2160:	6031      	str	r1, [r6, #0]
			return true;
    2162:	e781      	b.n	2068 <usb_handle_standard_request+0x48>
		p += p[DESC_bLength];
    2164:	441f      	add	r7, r3
    2166:	e093      	b.n	2290 <usb_handle_standard_request+0x270>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    2168:	2b0b      	cmp	r3, #11
    216a:	d18b      	bne.n	2084 <usb_handle_standard_request+0x64>
	bool ret = false;
    216c:	2600      	movs	r6, #0
	uint8_t cur_iface = 0xFF;
    216e:	f04f 08ff 	mov.w	r8, #255	; 0xff
	const uint8_t *if_desc = NULL;
    2172:	46b2      	mov	sl, r6
	uint8_t cur_alt_setting = 0xFF;
    2174:	46c1      	mov	r9, r8
    2176:	e006      	b.n	2186 <usb_handle_standard_request+0x166>
		switch (p[DESC_bDescriptorType]) {
    2178:	787b      	ldrb	r3, [r7, #1]
    217a:	2b04      	cmp	r3, #4
    217c:	d00f      	beq.n	219e <usb_handle_standard_request+0x17e>
    217e:	2b05      	cmp	r3, #5
    2180:	d021      	beq.n	21c6 <usb_handle_standard_request+0x1a6>
		p += p[DESC_bLength];
    2182:	783b      	ldrb	r3, [r7, #0]
    2184:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
    2186:	783b      	ldrb	r3, [r7, #0]
    2188:	2b00      	cmp	r3, #0
    218a:	d1f5      	bne.n	2178 <usb_handle_standard_request+0x158>
	if (usb_dev.status_callback) {
    218c:	69eb      	ldr	r3, [r5, #28]
    218e:	b113      	cbz	r3, 2196 <usb_handle_standard_request+0x176>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    2190:	4651      	mov	r1, sl
    2192:	2007      	movs	r0, #7
    2194:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    2196:	2e00      	cmp	r6, #0
    2198:	f47f af66 	bne.w	2068 <usb_handle_standard_request+0x48>
    219c:	e772      	b.n	2084 <usb_handle_standard_request+0x64>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    219e:	f897 8002 	ldrb.w	r8, [r7, #2]
			if (cur_iface == setup->wIndex &&
    21a2:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    21a4:	f897 9003 	ldrb.w	r9, [r7, #3]
			if (cur_iface == setup->wIndex &&
    21a8:	4598      	cmp	r8, r3
    21aa:	d1ea      	bne.n	2182 <usb_handle_standard_request+0x162>
			    cur_alt_setting == setup->wValue) {
    21ac:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    21ae:	4599      	cmp	r9, r3
    21b0:	d1e7      	bne.n	2182 <usb_handle_standard_request+0x162>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    21b2:	f1b8 0f07 	cmp.w	r8, #7
    21b6:	d81c      	bhi.n	21f2 <usb_handle_standard_request+0x1d2>
		usb_dev.alt_setting[iface] = alt_setting;
    21b8:	eb05 0308 	add.w	r3, r5, r8
		return true;
    21bc:	46ba      	mov	sl, r7
    21be:	2601      	movs	r6, #1
				ret = usb_set_alt_setting(setup->wIndex,
    21c0:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    21c4:	e7dd      	b.n	2182 <usb_handle_standard_request+0x162>
			if (cur_iface == setup->wIndex) {
    21c6:	88a3      	ldrh	r3, [r4, #4]
    21c8:	4543      	cmp	r3, r8
    21ca:	d1da      	bne.n	2182 <usb_handle_standard_request+0x162>
	if (cur_alt_setting != alt_setting) {
    21cc:	78a3      	ldrb	r3, [r4, #2]
    21ce:	454b      	cmp	r3, r9
    21d0:	d00a      	beq.n	21e8 <usb_handle_standard_request+0x1c8>
		ret = reset_endpoint(ep_desc);
    21d2:	78be      	ldrb	r6, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    21d4:	4630      	mov	r0, r6
    21d6:	f000 fc3f 	bl	2a58 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    21da:	4630      	mov	r0, r6
    21dc:	f7ff fe08 	bl	1df0 <disable_endpoint>
    21e0:	fab0 f680 	clz	r6, r0
    21e4:	0976      	lsrs	r6, r6, #5
    21e6:	e7cc      	b.n	2182 <usb_handle_standard_request+0x162>
		ret = set_endpoint(ep_desc);
    21e8:	4638      	mov	r0, r7
    21ea:	f7ff fed9 	bl	1fa0 <set_endpoint>
    21ee:	4606      	mov	r6, r0
    21f0:	e7c7      	b.n	2182 <usb_handle_standard_request+0x162>
    21f2:	46ba      	mov	sl, r7
	return false;
    21f4:	2600      	movs	r6, #0
    21f6:	e7c4      	b.n	2182 <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
    21f8:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    21fc:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    21fe:	2a00      	cmp	r2, #0
    2200:	da18      	bge.n	2234 <usb_handle_standard_request+0x214>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    2202:	2b00      	cmp	r3, #0
    2204:	f47f af3e 	bne.w	2084 <usb_handle_standard_request+0x64>
	uint8_t ep = setup->wIndex;
    2208:	7924      	ldrb	r4, [r4, #4]
    220a:	683f      	ldr	r7, [r7, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    220c:	0663      	lsls	r3, r4, #25
    220e:	d00a      	beq.n	2226 <usb_handle_standard_request+0x206>
    2210:	4620      	mov	r0, r4
    2212:	f7ff fe0b 	bl	1e2c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2216:	2800      	cmp	r0, #0
    2218:	f43f af34 	beq.w	2084 <usb_handle_standard_request+0x64>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    221c:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    2220:	2b00      	cmp	r3, #0
    2222:	f43f af2f 	beq.w	2084 <usb_handle_standard_request+0x64>
		usb_dc_ep_is_stalled(ep, &data[0]);
    2226:	4639      	mov	r1, r7
    2228:	4620      	mov	r0, r4
    222a:	f002 fe07 	bl	4e3c <usb_dc_ep_is_stalled>
		data[1] = 0U;
    222e:	2300      	movs	r3, #0
    2230:	707b      	strb	r3, [r7, #1]
    2232:	e714      	b.n	205e <usb_handle_standard_request+0x3e>
		switch (setup->bRequest) {
    2234:	2b01      	cmp	r3, #1
    2236:	d008      	beq.n	224a <usb_handle_standard_request+0x22a>
    2238:	2b03      	cmp	r3, #3
    223a:	f47f af23 	bne.w	2084 <usb_handle_standard_request+0x64>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    223e:	8863      	ldrh	r3, [r4, #2]
    2240:	2b00      	cmp	r3, #0
    2242:	f47f af1f 	bne.w	2084 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
    2246:	2101      	movs	r1, #1
    2248:	e003      	b.n	2252 <usb_handle_standard_request+0x232>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    224a:	8861      	ldrh	r1, [r4, #2]
    224c:	2900      	cmp	r1, #0
    224e:	f47f af19 	bne.w	2084 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
    2252:	88a0      	ldrh	r0, [r4, #4]
    2254:	f7ff fe7c 	bl	1f50 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    2258:	2800      	cmp	r0, #0
    225a:	f47f af05 	bne.w	2068 <usb_handle_standard_request+0x48>
    225e:	e711      	b.n	2084 <usb_handle_standard_request+0x64>
		if (type == USB_DESC_CONFIGURATION) {
    2260:	2902      	cmp	r1, #2
		*data = p;
    2262:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
    2264:	f47f af1b 	bne.w	209e <usb_handle_standard_request+0x7e>
			*len = (p[CONF_DESC_wTotalLength]) |
    2268:	885b      	ldrh	r3, [r3, #2]
		*len = 2;
    226a:	6033      	str	r3, [r6, #0]
		return true;
    226c:	e6fc      	b.n	2068 <usb_handle_standard_request+0x48>
    226e:	bf00      	nop
    2270:	20012c14 	.word	0x20012c14
    2274:	20012cce 	.word	0x20012cce
	if (usb_reqtype_is_to_host(setup)) {
    2278:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    227c:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    227e:	2800      	cmp	r0, #0
    2280:	f6bf af72 	bge.w	2168 <usb_handle_standard_request+0x148>
		switch (setup->bRequest) {
    2284:	2b00      	cmp	r3, #0
    2286:	f43f af67 	beq.w	2158 <usb_handle_standard_request+0x138>
    228a:	2b0a      	cmp	r3, #10
    228c:	f47f aefa 	bne.w	2084 <usb_handle_standard_request+0x64>
	while (p[DESC_bLength] != 0U) {
    2290:	783b      	ldrb	r3, [r7, #0]
    2292:	2b00      	cmp	r3, #0
    2294:	f43f aef6 	beq.w	2084 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    2298:	7879      	ldrb	r1, [r7, #1]
    229a:	2904      	cmp	r1, #4
    229c:	f47f af62 	bne.w	2164 <usb_handle_standard_request+0x144>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    22a0:	78b9      	ldrb	r1, [r7, #2]
			if (cur_iface == setup->wIndex) {
    22a2:	428a      	cmp	r2, r1
    22a4:	f47f af5e 	bne.w	2164 <usb_handle_standard_request+0x144>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    22a8:	2a07      	cmp	r2, #7
	return 0;
    22aa:	bf8e      	itee	hi
    22ac:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    22ae:	1952      	addls	r2, r2, r5
    22b0:	f892 30bb 	ldrbls.w	r3, [r2, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    22b4:	f88c 3000 	strb.w	r3, [ip]
    22b8:	e6f6      	b.n	20a8 <usb_handle_standard_request+0x88>
    22ba:	bf00      	nop

000022bc <usb_disable>:
{
    22bc:	b570      	push	{r4, r5, r6, lr}
	if (usb_dev.enabled != true) {
    22be:	4d16      	ldr	r5, [pc, #88]	; (2318 <usb_disable+0x5c>)
    22c0:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
    22c4:	b1fb      	cbz	r3, 2306 <usb_disable+0x4a>
	ret = usb_dc_detach();
    22c6:	f002 fd1b 	bl	4d00 <usb_dc_detach>
	if (ret < 0) {
    22ca:	2800      	cmp	r0, #0
    22cc:	db22      	blt.n	2314 <usb_disable+0x58>
	usb_cancel_transfers();
    22ce:	f000 fbe1 	bl	2a94 <usb_cancel_transfers>
    22d2:	2400      	movs	r4, #0
		if (usb_dev.ep_bm & BIT(i)) {
    22d4:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    22d8:	b2e6      	uxtb	r6, r4
    22da:	40e3      	lsrs	r3, r4
    22dc:	07da      	lsls	r2, r3, #31
    22de:	d414      	bmi.n	230a <usb_disable+0x4e>
		if (usb_dev.ep_bm & BIT(i + 16)) {
    22e0:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    22e4:	f104 0210 	add.w	r2, r4, #16
    22e8:	40d3      	lsrs	r3, r2
    22ea:	07db      	lsls	r3, r3, #31
    22ec:	d505      	bpl.n	22fa <usb_disable+0x3e>
			ret = disable_endpoint(USB_EP_DIR_IN | i);
    22ee:	f046 0080 	orr.w	r0, r6, #128	; 0x80
    22f2:	f7ff fd7d 	bl	1df0 <disable_endpoint>
			if (ret < 0) {
    22f6:	2800      	cmp	r0, #0
    22f8:	db0c      	blt.n	2314 <usb_disable+0x58>
	for (uint8_t i = 0; i <= 15; i++) {
    22fa:	3401      	adds	r4, #1
    22fc:	2c10      	cmp	r4, #16
    22fe:	d1e9      	bne.n	22d4 <usb_disable+0x18>
	usb_dev.enabled = false;
    2300:	2300      	movs	r3, #0
    2302:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		return 0;
    2306:	2000      	movs	r0, #0
    2308:	e004      	b.n	2314 <usb_disable+0x58>
			ret = disable_endpoint(i);
    230a:	4630      	mov	r0, r6
    230c:	f7ff fd70 	bl	1df0 <disable_endpoint>
			if (ret < 0) {
    2310:	2800      	cmp	r0, #0
    2312:	dae5      	bge.n	22e0 <usb_disable+0x24>
}
    2314:	bd70      	pop	{r4, r5, r6, pc}
    2316:	bf00      	nop
    2318:	20012c14 	.word	0x20012c14

0000231c <usb_data_to_host>:
{
    231c:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    231e:	4c13      	ldr	r4, [pc, #76]	; (236c <usb_data_to_host+0x50>)
    2320:	7d23      	ldrb	r3, [r4, #20]
    2322:	b9cb      	cbnz	r3, 2358 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    2324:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2326:	ab01      	add	r3, sp, #4
    2328:	2080      	movs	r0, #128	; 0x80
    232a:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    232c:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    232e:	f008 ff1e 	bl	b16e <usb_write>
		usb_dev.data_buf += chunk;
    2332:	9a01      	ldr	r2, [sp, #4]
    2334:	68a3      	ldr	r3, [r4, #8]
    2336:	4413      	add	r3, r2
    2338:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    233a:	68e3      	ldr	r3, [r4, #12]
    233c:	1a9b      	subs	r3, r3, r2
    233e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    2340:	b943      	cbnz	r3, 2354 <usb_data_to_host+0x38>
    2342:	b13a      	cbz	r2, 2354 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2344:	6923      	ldr	r3, [r4, #16]
    2346:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    2348:	429a      	cmp	r2, r3
    234a:	dd03      	ble.n	2354 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    234c:	069b      	lsls	r3, r3, #26
    234e:	d101      	bne.n	2354 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    2350:	2301      	movs	r3, #1
    2352:	7523      	strb	r3, [r4, #20]
}
    2354:	b002      	add	sp, #8
    2356:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    2358:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    235a:	2080      	movs	r0, #128	; 0x80
    235c:	461a      	mov	r2, r3
    235e:	4619      	mov	r1, r3
		usb_dev.zlp_flag = false;
    2360:	7523      	strb	r3, [r4, #20]
}
    2362:	b002      	add	sp, #8
    2364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2368:	f002 bdae 	b.w	4ec8 <usb_dc_ep_write>
    236c:	20012c14 	.word	0x20012c14

00002370 <usb_handle_control_transfer>:
	uint32_t chunk = 0U;
    2370:	2300      	movs	r3, #0
{
    2372:	b530      	push	{r4, r5, lr}
    2374:	b085      	sub	sp, #20
    2376:	4602      	mov	r2, r0
    2378:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    237a:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    237c:	2800      	cmp	r0, #0
    237e:	d158      	bne.n	2432 <usb_handle_control_transfer+0xc2>
    2380:	2900      	cmp	r1, #0
    2382:	d135      	bne.n	23f0 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    2384:	2208      	movs	r2, #8
    2386:	460b      	mov	r3, r1
    2388:	eb0d 0102 	add.w	r1, sp, r2
    238c:	f009 fc68 	bl	bc60 <usb_dc_ep_read>
    2390:	2800      	cmp	r0, #0
    2392:	da04      	bge.n	239e <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2394:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2396:	f002 fd09 	bl	4dac <usb_dc_ep_set_stall>
}
    239a:	b005      	add	sp, #20
    239c:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    239e:	4c2a      	ldr	r4, [pc, #168]	; (2448 <usb_handle_control_transfer+0xd8>)
    23a0:	9a02      	ldr	r2, [sp, #8]
		usb_dev.data_buf_residue = 0;
    23a2:	e9c4 5503 	strd	r5, r5, [r4, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    23a6:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    23a8:	9a03      	ldr	r2, [sp, #12]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    23aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    23ae:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    23b0:	f104 0238 	add.w	r2, r4, #56	; 0x38
    23b4:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    23b6:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		usb_dev.zlp_flag = false;
    23ba:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    23bc:	2a00      	cmp	r2, #0
    23be:	db0a      	blt.n	23d6 <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    23c0:	2b80      	cmp	r3, #128	; 0x80
    23c2:	d904      	bls.n	23ce <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    23c4:	2080      	movs	r0, #128	; 0x80
    23c6:	f002 fcf1 	bl	4dac <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    23ca:	2000      	movs	r0, #0
    23cc:	e7e3      	b.n	2396 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    23ce:	b113      	cbz	r3, 23d6 <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
    23d0:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    23d4:	e7e1      	b.n	239a <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    23d6:	f7ff fd45 	bl	1e64 <usb_handle_request.constprop.0>
    23da:	2800      	cmp	r0, #0
    23dc:	d0da      	beq.n	2394 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    23de:	88e2      	ldrh	r2, [r4, #6]
    23e0:	6923      	ldr	r3, [r4, #16]
    23e2:	429a      	cmp	r2, r3
    23e4:	bfd4      	ite	le
    23e6:	60e2      	strle	r2, [r4, #12]
    23e8:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    23ea:	f7ff ff97 	bl	231c <usb_data_to_host>
    23ee:	e7d4      	b.n	239a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    23f0:	4c15      	ldr	r4, [pc, #84]	; (2448 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    23f2:	ab01      	add	r3, sp, #4
    23f4:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    23f8:	2d00      	cmp	r5, #0
    23fa:	dc04      	bgt.n	2406 <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    23fc:	f009 fc30 	bl	bc60 <usb_dc_ep_read>
    2400:	2800      	cmp	r0, #0
    2402:	daca      	bge.n	239a <usb_handle_control_transfer+0x2a>
    2404:	e7c6      	b.n	2394 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2406:	462a      	mov	r2, r5
    2408:	f009 fc2a 	bl	bc60 <usb_dc_ep_read>
    240c:	2800      	cmp	r0, #0
    240e:	dbd9      	blt.n	23c4 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
    2410:	9a01      	ldr	r2, [sp, #4]
    2412:	68a3      	ldr	r3, [r4, #8]
    2414:	4413      	add	r3, r2
    2416:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2418:	68e3      	ldr	r3, [r4, #12]
    241a:	1a9b      	subs	r3, r3, r2
    241c:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    241e:	2b00      	cmp	r3, #0
    2420:	d1bb      	bne.n	239a <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    2422:	f104 0338 	add.w	r3, r4, #56	; 0x38
    2426:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    2428:	f7ff fd1c 	bl	1e64 <usb_handle_request.constprop.0>
    242c:	2800      	cmp	r0, #0
    242e:	d1dc      	bne.n	23ea <usb_handle_control_transfer+0x7a>
    2430:	e7b0      	b.n	2394 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    2432:	2880      	cmp	r0, #128	; 0x80
    2434:	d1b1      	bne.n	239a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2436:	4b04      	ldr	r3, [pc, #16]	; (2448 <usb_handle_control_transfer+0xd8>)
    2438:	68da      	ldr	r2, [r3, #12]
    243a:	2a00      	cmp	r2, #0
    243c:	d1d5      	bne.n	23ea <usb_handle_control_transfer+0x7a>
    243e:	7d1b      	ldrb	r3, [r3, #20]
    2440:	2b00      	cmp	r3, #0
    2442:	d1d2      	bne.n	23ea <usb_handle_control_transfer+0x7a>
    2444:	e7a9      	b.n	239a <usb_handle_control_transfer+0x2a>
    2446:	bf00      	nop
    2448:	20012c14 	.word	0x20012c14

0000244c <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    244c:	4b05      	ldr	r3, [pc, #20]	; (2464 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    244e:	4a06      	ldr	r2, [pc, #24]	; (2468 <usb_set_config+0x1c>)
	usb_dev.descriptors = usb_descriptors;
    2450:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.req_handlers[type] = handler;
    2452:	629a      	str	r2, [r3, #40]	; 0x28
    2454:	4a05      	ldr	r2, [pc, #20]	; (246c <usb_set_config+0x20>)

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    2456:	2000      	movs	r0, #0
	usb_dev.req_handlers[type] = handler;
    2458:	62da      	str	r2, [r3, #44]	; 0x2c
    245a:	4a05      	ldr	r2, [pc, #20]	; (2470 <usb_set_config+0x24>)
    245c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    245e:	4a05      	ldr	r2, [pc, #20]	; (2474 <usb_set_config+0x28>)
    2460:	619a      	str	r2, [r3, #24]
}
    2462:	4770      	bx	lr
    2464:	20012c14 	.word	0x20012c14
    2468:	00002021 	.word	0x00002021
    246c:	00001d15 	.word	0x00001d15
    2470:	00001db5 	.word	0x00001db5
    2474:	00001d55 	.word	0x00001d55

00002478 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    2478:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    247a:	4b08      	ldr	r3, [pc, #32]	; (249c <usb_device_init+0x24>)
    247c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    2480:	b934      	cbnz	r4, 2490 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    2482:	f000 f8d7 	bl	2634 <usb_get_device_descriptor>
	if (!device_descriptor) {
    2486:	b130      	cbz	r0, 2496 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    2488:	f7ff ffe0 	bl	244c <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    248c:	4620      	mov	r0, r4
}
    248e:	bd10      	pop	{r4, pc}
		return -EALREADY;
    2490:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2494:	e7fb      	b.n	248e <usb_device_init+0x16>
		return -1;
    2496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    249a:	e7f8      	b.n	248e <usb_device_init+0x16>
    249c:	20012c14 	.word	0x20012c14

000024a0 <usb_enable>:
{
    24a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    24a4:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    24a6:	4d3b      	ldr	r5, [pc, #236]	; (2594 <usb_enable+0xf4>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    24a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    24ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24b0:	4839      	ldr	r0, [pc, #228]	; (2598 <usb_enable+0xf8>)
    24b2:	f006 fef1 	bl	9298 <z_impl_k_mutex_lock>
    24b6:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    24ba:	2e00      	cmp	r6, #0
    24bc:	d167      	bne.n	258e <usb_enable+0xee>
	usb_dev.status_callback = cb;
    24be:	4837      	ldr	r0, [pc, #220]	; (259c <usb_enable+0xfc>)
	usb_dev.user_status_callback = status_cb;
    24c0:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    24c2:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    24c4:	f002 fe1a 	bl	50fc <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    24c8:	f002 fbe8 	bl	4c9c <usb_dc_attach>
	if (ret < 0) {
    24cc:	1e04      	subs	r4, r0, #0
    24ce:	db42      	blt.n	2556 <usb_enable+0xb6>
	ret = usb_transfer_init();
    24d0:	f000 fb04 	bl	2adc <usb_transfer_init>
	if (ret < 0) {
    24d4:	1e04      	subs	r4, r0, #0
    24d6:	db3e      	blt.n	2556 <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    24d8:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    24da:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    24dc:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    24e0:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    24e4:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    24e8:	f002 fc3c 	bl	4d64 <usb_dc_ep_configure>
	if (ret < 0) {
    24ec:	1e04      	subs	r4, r0, #0
    24ee:	db32      	blt.n	2556 <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    24f0:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    24f2:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    24f4:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    24f8:	f002 fc34 	bl	4d64 <usb_dc_ep_configure>
	if (ret < 0) {
    24fc:	1e04      	subs	r4, r0, #0
    24fe:	db2a      	blt.n	2556 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2500:	4630      	mov	r0, r6
    2502:	4927      	ldr	r1, [pc, #156]	; (25a0 <usb_enable+0x100>)
    2504:	f002 fde6 	bl	50d4 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2508:	1e04      	subs	r4, r0, #0
    250a:	db24      	blt.n	2556 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    250c:	4638      	mov	r0, r7
    250e:	4924      	ldr	r1, [pc, #144]	; (25a0 <usb_enable+0x100>)
    2510:	f002 fde0 	bl	50d4 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2514:	1e04      	subs	r4, r0, #0
    2516:	db1e      	blt.n	2556 <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2518:	4c22      	ldr	r4, [pc, #136]	; (25a4 <usb_enable+0x104>)
    251a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 25a8 <usb_enable+0x108>
    251e:	4544      	cmp	r4, r8
    2520:	d320      	bcc.n	2564 <usb_enable+0xc4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2522:	2000      	movs	r0, #0
    2524:	f002 fca6 	bl	4e74 <usb_dc_ep_enable>
	if (ret < 0) {
    2528:	1e04      	subs	r4, r0, #0
    252a:	db14      	blt.n	2556 <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    252c:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2530:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2532:	f043 0301 	orr.w	r3, r3, #1
    2536:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    253a:	f002 fc9b 	bl	4e74 <usb_dc_ep_enable>
	if (ret < 0) {
    253e:	1e04      	subs	r4, r0, #0
    2540:	db09      	blt.n	2556 <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    2542:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = 0;
    2546:	2400      	movs	r4, #0
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    2548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    254c:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    2550:	2301      	movs	r3, #1
    2552:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    2556:	4810      	ldr	r0, [pc, #64]	; (2598 <usb_enable+0xf8>)
    2558:	f006 ff18 	bl	938c <z_impl_k_mutex_unlock>
}
    255c:	4620      	mov	r0, r4
    255e:	b002      	add	sp, #8
    2560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2564:	2600      	movs	r6, #0
		ep_data = cfg_data->endpoint;
    2566:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2568:	7f22      	ldrb	r2, [r4, #28]
    256a:	b2f3      	uxtb	r3, r6
    256c:	429a      	cmp	r2, r3
    256e:	d801      	bhi.n	2574 <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2570:	3424      	adds	r4, #36	; 0x24
    2572:	e7d4      	b.n	251e <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    2574:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    2578:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    257c:	7910      	ldrb	r0, [r2, #4]
    257e:	f002 fda9 	bl	50d4 <usb_dc_ep_set_callback>
    2582:	3601      	adds	r6, #1
    2584:	2800      	cmp	r0, #0
    2586:	d0ef      	beq.n	2568 <usb_enable+0xc8>
    2588:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    258c:	e7e3      	b.n	2556 <usb_enable+0xb6>
		ret = -EALREADY;
    258e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    2592:	e7e0      	b.n	2556 <usb_enable+0xb6>
    2594:	20012c14 	.word	0x20012c14
    2598:	20002334 	.word	0x20002334
    259c:	00001e91 	.word	0x00001e91
    25a0:	00002371 	.word	0x00002371
    25a4:	2000243c 	.word	0x2000243c
    25a8:	20002460 	.word	0x20002460

000025ac <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    25ac:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    25ae:	4b1f      	ldr	r3, [pc, #124]	; (262c <usb_update_sn_string_descriptor+0x80>)
{
    25b0:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    25b2:	aa05      	add	r2, sp, #20
    25b4:	f103 0510 	add.w	r5, r3, #16
    25b8:	4614      	mov	r4, r2
    25ba:	6818      	ldr	r0, [r3, #0]
    25bc:	6859      	ldr	r1, [r3, #4]
    25be:	3308      	adds	r3, #8
    25c0:	c403      	stmia	r4!, {r0, r1}
    25c2:	42ab      	cmp	r3, r5
    25c4:	4622      	mov	r2, r4
    25c6:	d1f7      	bne.n	25b8 <usb_update_sn_string_descriptor+0xc>
    25c8:	781b      	ldrb	r3, [r3, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    25ca:	2210      	movs	r2, #16
	const char hex[] = "0123456789ABCDEF";
    25cc:	7023      	strb	r3, [r4, #0]
	memset(hwid, 0, sizeof(hwid));
    25ce:	2100      	movs	r1, #0
    25d0:	a801      	add	r0, sp, #4
    25d2:	f009 fae2 	bl	bb9a <memset>
	memset(sn, 0, sizeof(sn));
    25d6:	2212      	movs	r2, #18
    25d8:	2100      	movs	r1, #0
    25da:	4815      	ldr	r0, [pc, #84]	; (2630 <usb_update_sn_string_descriptor+0x84>)
    25dc:	f009 fadd 	bl	bb9a <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    25e0:	2110      	movs	r1, #16
    25e2:	a801      	add	r0, sp, #4
    25e4:	f009 fc35 	bl	be52 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    25e8:	2800      	cmp	r0, #0
    25ea:	dd1b      	ble.n	2624 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    25ec:	2808      	cmp	r0, #8
    25ee:	bfb8      	it	lt
    25f0:	2008      	movlt	r0, #8
    25f2:	ab01      	add	r3, sp, #4
    25f4:	3809      	subs	r0, #9
    25f6:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    25f8:	2000      	movs	r0, #0
    25fa:	490d      	ldr	r1, [pc, #52]	; (2630 <usb_update_sn_string_descriptor+0x84>)
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    25fc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2600:	ac0a      	add	r4, sp, #40	; 0x28
    2602:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2606:	f003 030f 	and.w	r3, r3, #15
    260a:	3328      	adds	r3, #40	; 0x28
    260c:	446b      	add	r3, sp
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    260e:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2612:	f813 3c14 	ldrb.w	r3, [r3, #-20]
		for (int i = 0; i < usblen; i++) {
    2616:	3001      	adds	r0, #1
    2618:	2808      	cmp	r0, #8
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    261a:	700c      	strb	r4, [r1, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    261c:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    261e:	f101 0102 	add.w	r1, r1, #2
    2622:	d1eb      	bne.n	25fc <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2624:	4802      	ldr	r0, [pc, #8]	; (2630 <usb_update_sn_string_descriptor+0x84>)
    2626:	b00b      	add	sp, #44	; 0x2c
    2628:	bd30      	pop	{r4, r5, pc}
    262a:	bf00      	nop
    262c:	0000f162 	.word	0x0000f162
    2630:	20015ee9 	.word	0x20015ee9

00002634 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    2634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2638:	4c63      	ldr	r4, [pc, #396]	; (27c8 <usb_get_device_descriptor+0x194>)
    263a:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
    263c:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    263e:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    2642:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
    2644:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2646:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
    2648:	7823      	ldrb	r3, [r4, #0]
    264a:	b92b      	cbnz	r3, 2658 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
    264c:	4b5f      	ldr	r3, [pc, #380]	; (27cc <usb_get_device_descriptor+0x198>)
    264e:	3402      	adds	r4, #2
    2650:	429c      	cmp	r4, r3
    2652:	d1f3      	bne.n	263c <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    2654:	485c      	ldr	r0, [pc, #368]	; (27c8 <usb_get_device_descriptor+0x194>)
    2656:	e01c      	b.n	2692 <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
    2658:	7863      	ldrb	r3, [r4, #1]
    265a:	2b05      	cmp	r3, #5
    265c:	d805      	bhi.n	266a <usb_get_device_descriptor+0x36>
    265e:	e8df f003 	tbb	[pc, r3]
    2662:	0479      	.short	0x0479
    2664:	25077903 	.word	0x25077903
    2668:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    266a:	7823      	ldrb	r3, [r4, #0]
    266c:	441c      	add	r4, r3
    266e:	e7eb      	b.n	2648 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    2670:	78e3      	ldrb	r3, [r4, #3]
    2672:	2b00      	cmp	r3, #0
    2674:	d1f9      	bne.n	266a <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
    2676:	78a3      	ldrb	r3, [r4, #2]
    2678:	b173      	cbz	r3, 2698 <usb_get_device_descriptor+0x64>
			numof_ifaces++;
    267a:	f109 0901 	add.w	r9, r9, #1
    267e:	fa5f f989 	uxtb.w	r9, r9
			break;
    2682:	e7f2      	b.n	266a <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
    2684:	686a      	ldr	r2, [r5, #4]
    2686:	4294      	cmp	r4, r2
    2688:	d009      	beq.n	269e <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    268a:	3524      	adds	r5, #36	; 0x24
    268c:	429d      	cmp	r5, r3
    268e:	d3f9      	bcc.n	2684 <usb_get_device_descriptor+0x50>
		return NULL;
    2690:	2000      	movs	r0, #0
}
    2692:	b005      	add	sp, #20
    2694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2698:	4d4d      	ldr	r5, [pc, #308]	; (27d0 <usb_get_device_descriptor+0x19c>)
    269a:	4b4e      	ldr	r3, [pc, #312]	; (27d4 <usb_get_device_descriptor+0x1a0>)
    269c:	e7f6      	b.n	268c <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
    269e:	68ab      	ldr	r3, [r5, #8]
    26a0:	2b00      	cmp	r3, #0
    26a2:	d0ea      	beq.n	267a <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
    26a4:	4649      	mov	r1, r9
    26a6:	4620      	mov	r0, r4
    26a8:	4798      	blx	r3
    26aa:	e7e6      	b.n	267a <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
    26ac:	2d00      	cmp	r5, #0
    26ae:	d0ef      	beq.n	2690 <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    26b0:	2300      	movs	r3, #0
    26b2:	2101      	movs	r1, #1
    26b4:	7f2a      	ldrb	r2, [r5, #28]
    26b6:	4293      	cmp	r3, r2
    26b8:	d2ea      	bcs.n	2690 <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    26ba:	6a2a      	ldr	r2, [r5, #32]
    26bc:	78a7      	ldrb	r7, [r4, #2]
    26be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    26c2:	7910      	ldrb	r0, [r2, #4]
    26c4:	4287      	cmp	r7, r0
    26c6:	d001      	beq.n	26cc <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    26c8:	3301      	adds	r3, #1
    26ca:	e7f3      	b.n	26b4 <usb_get_device_descriptor+0x80>
    26cc:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    26ce:	78e0      	ldrb	r0, [r4, #3]
    26d0:	fa5f f887 	uxtb.w	r8, r7
    26d4:	f000 0003 	and.w	r0, r0, #3
    26d8:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    26dc:	7920      	ldrb	r0, [r4, #4]
    26de:	f894 c005 	ldrb.w	ip, [r4, #5]
    26e2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    26e6:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    26ea:	f994 0002 	ldrsb.w	r0, [r4, #2]
    26ee:	2800      	cmp	r0, #0
    26f0:	da25      	bge.n	273e <usb_get_device_descriptor+0x10a>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    26f2:	f107 0010 	add.w	r0, r7, #16
    26f6:	fa01 f000 	lsl.w	r0, r1, r0
    26fa:	ea10 0f0b 	tst.w	r0, fp
    26fe:	d125      	bne.n	274c <usb_get_device_descriptor+0x118>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2700:	f048 0080 	orr.w	r0, r8, #128	; 0x80
    2704:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    2708:	a802      	add	r0, sp, #8
    270a:	e9cd 3200 	strd	r3, r2, [sp]
    270e:	f009 fa76 	bl	bbfe <usb_dc_ep_check_cap>
    2712:	e9dd 3200 	ldrd	r3, r2, [sp]
    2716:	2101      	movs	r1, #1
    2718:	b9c0      	cbnz	r0, 274c <usb_get_device_descriptor+0x118>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    271a:	f89d 3008 	ldrb.w	r3, [sp, #8]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    271e:	f013 0f80 	tst.w	r3, #128	; 0x80
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2722:	70a3      	strb	r3, [r4, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    2724:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2726:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
    2728:	bf1d      	ittte	ne
    272a:	f108 0810 	addne.w	r8, r8, #16
    272e:	fa5f f888 	uxtbne.w	r8, r8
    2732:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
    2736:	40bb      	lsleq	r3, r7
    2738:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
    273c:	e795      	b.n	266a <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
    273e:	fa01 f007 	lsl.w	r0, r1, r7
    2742:	ea10 0f0b 	tst.w	r0, fp
    2746:	d101      	bne.n	274c <usb_get_device_descriptor+0x118>
    2748:	4640      	mov	r0, r8
    274a:	e7db      	b.n	2704 <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    274c:	3701      	adds	r7, #1
    274e:	2f10      	cmp	r7, #16
    2750:	d1bd      	bne.n	26ce <usb_get_device_descriptor+0x9a>
    2752:	e7b9      	b.n	26c8 <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2754:	2e03      	cmp	r6, #3
    2756:	d11d      	bne.n	2794 <usb_get_device_descriptor+0x160>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2758:	f7ff ff28 	bl	25ac <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    275c:	4607      	mov	r7, r0
    275e:	b168      	cbz	r0, 277c <usb_get_device_descriptor+0x148>
	runtime_sn_len = strlen(runtime_sn);
    2760:	f009 f9e2 	bl	bb28 <strlen>
	if (!runtime_sn_len) {
    2764:	4680      	mov	r8, r0
    2766:	b148      	cbz	r0, 277c <usb_get_device_descriptor+0x148>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    2768:	481b      	ldr	r0, [pc, #108]	; (27d8 <usb_get_device_descriptor+0x1a4>)
    276a:	f009 f9dd 	bl	bb28 <strlen>
	if (runtime_sn_len != default_sn_len) {
    276e:	4580      	cmp	r8, r0
    2770:	d104      	bne.n	277c <usb_get_device_descriptor+0x148>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2772:	4642      	mov	r2, r8
    2774:	4639      	mov	r1, r7
    2776:	1ca0      	adds	r0, r4, #2
    2778:	f009 fa04 	bl	bb84 <memcpy>
	for (int i = idx_max; i >= 0; i -= 2) {
    277c:	f06f 0102 	mvn.w	r1, #2
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    2780:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    2782:	1b09      	subs	r1, r1, r4
    2784:	18e2      	adds	r2, r4, r3
    2786:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    278a:	42d1      	cmn	r1, r2
    278c:	d513      	bpl.n	27b6 <usb_get_device_descriptor+0x182>
			str_descr_idx += 1U;
    278e:	3601      	adds	r6, #1
    2790:	b2f6      	uxtb	r6, r6
			break;
    2792:	e76a      	b.n	266a <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
    2794:	2e00      	cmp	r6, #0
    2796:	d1f1      	bne.n	277c <usb_get_device_descriptor+0x148>
				if (!cfg_descr) {
    2798:	f1ba 0f00 	cmp.w	sl, #0
    279c:	f43f af78 	beq.w	2690 <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    27a0:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    27a4:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    27a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    27ac:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    27b0:	f88a 9004 	strb.w	r9, [sl, #4]
    27b4:	e7eb      	b.n	278e <usb_get_device_descriptor+0x15a>
		buf[i] = 0U;
    27b6:	f04f 0000 	mov.w	r0, #0
    27ba:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    27be:	f813 0901 	ldrb.w	r0, [r3], #-1
    27c2:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    27c6:	e7e0      	b.n	278a <usb_get_device_descriptor+0x156>
    27c8:	20002358 	.word	0x20002358
    27cc:	20002439 	.word	0x20002439
    27d0:	2000243c 	.word	0x2000243c
    27d4:	20002460 	.word	0x20002460
    27d8:	0000f162 	.word	0x0000f162

000027dc <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    27dc:	4b09      	ldr	r3, [pc, #36]	; (2804 <CONFIG_MAIN_STACK_SIZE+0x4>)
    27de:	2100      	movs	r1, #0
    27e0:	461a      	mov	r2, r3
{
    27e2:	b510      	push	{r4, lr}
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    27e4:	781c      	ldrb	r4, [r3, #0]
    27e6:	4284      	cmp	r4, r0
    27e8:	d104      	bne.n	27f4 <usb_ep_get_transfer+0x18>
    27ea:	685c      	ldr	r4, [r3, #4]
    27ec:	b114      	cbz	r4, 27f4 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    27ee:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    27f2:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    27f4:	3101      	adds	r1, #1
    27f6:	2904      	cmp	r1, #4
    27f8:	f103 0340 	add.w	r3, r3, #64	; 0x40
    27fc:	d1f2      	bne.n	27e4 <usb_ep_get_transfer+0x8>
	return NULL;
    27fe:	2000      	movs	r0, #0
    2800:	e7f7      	b.n	27f2 <usb_ep_get_transfer+0x16>
    2802:	bf00      	nop
    2804:	20012cdc 	.word	0x20012cdc

00002808 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    2808:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    280c:	f850 3c28 	ldr.w	r3, [r0, #-40]
{
    2810:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    2812:	3310      	adds	r3, #16
	ep = trans->ep;
    2814:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    2818:	d110      	bne.n	283c <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    281a:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    281c:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    2820:	0799      	lsls	r1, r3, #30
    2822:	d53c      	bpl.n	289e <usb_transfer_work+0x96>
		if (!trans->bsize) {
    2824:	bb02      	cbnz	r2, 2868 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    2826:	f013 0304 	ands.w	r3, r3, #4
    282a:	d104      	bne.n	2836 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    282c:	461a      	mov	r2, r3
    282e:	4619      	mov	r1, r3
    2830:	4630      	mov	r0, r6
    2832:	f008 fc9c 	bl	b16e <usb_write>
			}
			trans->status = 0;
    2836:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    2838:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    283c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2840:	3310      	adds	r3, #16
    2842:	d00e      	beq.n	2862 <usb_transfer_work+0x5a>
    2844:	f854 5c18 	ldr.w	r5, [r4, #-24]
    2848:	b15d      	cbz	r5, 2862 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    284a:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    284e:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    2852:	f00b fba1 	bl	df98 <k_is_in_isr>
    2856:	2800      	cmp	r0, #0
    2858:	d04c      	beq.n	28f4 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    285a:	4621      	mov	r1, r4
    285c:	482d      	ldr	r0, [pc, #180]	; (2914 <usb_transfer_work+0x10c>)
    285e:	f00b fc75 	bl	e14c <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    2862:	b002      	add	sp, #8
    2864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    2868:	f850 1c24 	ldr.w	r1, [r0, #-36]
    286c:	ab01      	add	r3, sp, #4
    286e:	4630      	mov	r0, r6
    2870:	f008 fc7d 	bl	b16e <usb_write>
		if (ret) {
    2874:	b110      	cbz	r0, 287c <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    2876:	f06f 0315 	mvn.w	r3, #21
    287a:	e7dd      	b.n	2838 <usb_transfer_work+0x30>
		trans->buffer += bytes;
    287c:	9a01      	ldr	r2, [sp, #4]
    287e:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2882:	4413      	add	r3, r2
    2884:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2888:	f854 3c20 	ldr.w	r3, [r4, #-32]
    288c:	1a9b      	subs	r3, r3, r2
    288e:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2892:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2896:	4413      	add	r3, r2
    2898:	f844 3c1c 	str.w	r3, [r4, #-28]
    289c:	e7ce      	b.n	283c <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    289e:	f850 1c24 	ldr.w	r1, [r0, #-36]
    28a2:	ab01      	add	r3, sp, #4
    28a4:	4630      	mov	r0, r6
    28a6:	f002 fb8b 	bl	4fc0 <usb_dc_ep_read_wait>
		if (ret) {
    28aa:	2800      	cmp	r0, #0
    28ac:	d1e3      	bne.n	2876 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    28ae:	9d01      	ldr	r5, [sp, #4]
    28b0:	f854 3c24 	ldr.w	r3, [r4, #-36]
    28b4:	442b      	add	r3, r5
    28b6:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    28ba:	f854 3c20 	ldr.w	r3, [r4, #-32]
    28be:	1b5b      	subs	r3, r3, r5
    28c0:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    28c4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    28c8:	442b      	add	r3, r5
    28ca:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    28ce:	2d00      	cmp	r5, #0
    28d0:	d0b1      	beq.n	2836 <usb_transfer_work+0x2e>
    28d2:	4630      	mov	r0, r6
    28d4:	f002 fc18 	bl	5108 <usb_dc_ep_mps>
    28d8:	fbb5 f3f0 	udiv	r3, r5, r0
    28dc:	fb03 5510 	mls	r5, r3, r0, r5
    28e0:	2d00      	cmp	r5, #0
    28e2:	d1a8      	bne.n	2836 <usb_transfer_work+0x2e>
    28e4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    28e8:	2b00      	cmp	r3, #0
    28ea:	d0a4      	beq.n	2836 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    28ec:	4630      	mov	r0, r6
    28ee:	f002 fbaf 	bl	5050 <usb_dc_ep_read_continue>
    28f2:	e7a3      	b.n	283c <usb_transfer_work+0x34>
		trans->cb = NULL;
    28f4:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    28f8:	f1a4 0010 	sub.w	r0, r4, #16
    28fc:	f006 fdb6 	bl	946c <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    2900:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2904:	338c      	adds	r3, #140	; 0x8c
    2906:	d0ac      	beq.n	2862 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
    2908:	4642      	mov	r2, r8
    290a:	4639      	mov	r1, r7
    290c:	4630      	mov	r0, r6
    290e:	47a8      	blx	r5
    2910:	e7a7      	b.n	2862 <usb_transfer_work+0x5a>
    2912:	bf00      	nop
    2914:	20002460 	.word	0x20002460

00002918 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2918:	1e4b      	subs	r3, r1, #1
    291a:	2b01      	cmp	r3, #1
{
    291c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    291e:	4606      	mov	r6, r0
    2920:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2922:	d80f      	bhi.n	2944 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2924:	f7ff ff5a 	bl	27dc <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    2928:	4604      	mov	r4, r0
    292a:	b968      	cbnz	r0, 2948 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    292c:	2d01      	cmp	r5, #1
    292e:	d109      	bne.n	2944 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2930:	ab01      	add	r3, sp, #4
    2932:	2201      	movs	r2, #1
    2934:	4630      	mov	r0, r6
    2936:	f10d 0103 	add.w	r1, sp, #3
    293a:	f002 fb41 	bl	4fc0 <usb_dc_ep_read_wait>
			} while (bytes);
    293e:	9b01      	ldr	r3, [sp, #4]
    2940:	2b00      	cmp	r3, #0
    2942:	d1f5      	bne.n	2930 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2944:	b002      	add	sp, #8
    2946:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2948:	f00b fb26 	bl	df98 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    294c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2950:	b108      	cbz	r0, 2956 <usb_transfer_ep_callback+0x3e>
    2952:	2d01      	cmp	r5, #1
    2954:	d105      	bne.n	2962 <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    2956:	4608      	mov	r0, r1
}
    2958:	b002      	add	sp, #8
    295a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    295e:	f7ff bf53 	b.w	2808 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2962:	4803      	ldr	r0, [pc, #12]	; (2970 <usb_transfer_ep_callback+0x58>)
}
    2964:	b002      	add	sp, #8
    2966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    296a:	f00b bbef 	b.w	e14c <k_work_submit_to_queue>
    296e:	bf00      	nop
    2970:	20002460 	.word	0x20002460

00002974 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    2974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2978:	4606      	mov	r6, r0
    297a:	4615      	mov	r5, r2
    297c:	4698      	mov	r8, r3
    297e:	9101      	str	r1, [sp, #4]
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2980:	f008 fc3b 	bl	b1fa <usb_transfer_is_busy>
    2984:	4604      	mov	r4, r0
    2986:	2800      	cmp	r0, #0
    2988:	d15c      	bne.n	2a44 <usb_transfer+0xd0>
	__asm__ volatile(
    298a:	f04f 0320 	mov.w	r3, #32
    298e:	f3ef 8a11 	mrs	sl, BASEPRI
    2992:	f383 8812 	msr	BASEPRI_MAX, r3
    2996:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    299a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2a4c <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
    299e:	2200      	movs	r2, #0
    29a0:	2300      	movs	r3, #0
    29a2:	4658      	mov	r0, fp
    29a4:	f006 fd82 	bl	94ac <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    29a8:	b970      	cbnz	r0, 29c8 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    29aa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2a50 <usb_transfer+0xdc>
    29ae:	01a7      	lsls	r7, r4, #6
    29b0:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    29b4:	6863      	ldr	r3, [r4, #4]
    29b6:	f113 0f10 	cmn.w	r3, #16
    29ba:	d114      	bne.n	29e6 <usb_transfer+0x72>
    29bc:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    29be:	4658      	mov	r0, fp
    29c0:	f006 fd54 	bl	946c <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    29c4:	9b01      	ldr	r3, [sp, #4]
    29c6:	e006      	b.n	29d6 <usb_transfer+0x62>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    29c8:	3401      	adds	r4, #1
    29ca:	2c04      	cmp	r4, #4
    29cc:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    29d0:	d1e5      	bne.n	299e <usb_transfer+0x2a>
		ret = -ENOMEM;
    29d2:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    29d6:	f38a 8811 	msr	BASEPRI, sl
    29da:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    29de:	4618      	mov	r0, r3
    29e0:	b003      	add	sp, #12
    29e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    29e6:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    29e8:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    29ea:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    29ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    29f0:	4630      	mov	r0, r6
	trans->cb = cb;
    29f2:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    29f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	trans->ep = ep;
    29f6:	f809 6007 	strb.w	r6, [r9, r7]
	trans->priv = cb_data;
    29fa:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    29fc:	f06f 030f 	mvn.w	r3, #15
	trans->flags = flags;
    2a00:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    2a04:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2a06:	f002 fb7f 	bl	5108 <usb_dc_ep_mps>
    2a0a:	b158      	cbz	r0, 2a24 <usb_transfer+0xb0>
    2a0c:	4630      	mov	r0, r6
    2a0e:	f002 fb7b 	bl	5108 <usb_dc_ep_mps>
    2a12:	fbb5 f3f0 	udiv	r3, r5, r0
    2a16:	fb03 5510 	mls	r5, r3, r0, r5
    2a1a:	b11d      	cbz	r5, 2a24 <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
    2a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2a1e:	f043 0304 	orr.w	r3, r3, #4
    2a22:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    2a24:	f018 0f02 	tst.w	r8, #2
    2a28:	d007      	beq.n	2a3a <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2a2a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    2a2e:	4809      	ldr	r0, [pc, #36]	; (2a54 <usb_transfer+0xe0>)
    2a30:	4449      	add	r1, r9
    2a32:	f00b fb8b 	bl	e14c <k_work_submit_to_queue>
	int i, key, ret = 0;
    2a36:	2300      	movs	r3, #0
    2a38:	e7cd      	b.n	29d6 <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    2a3a:	4630      	mov	r0, r6
    2a3c:	f002 fb08 	bl	5050 <usb_dc_ep_read_continue>
    2a40:	4603      	mov	r3, r0
    2a42:	e7c8      	b.n	29d6 <usb_transfer+0x62>
		return -EBUSY;
    2a44:	f06f 030f 	mvn.w	r3, #15
    2a48:	e7c9      	b.n	29de <usb_transfer+0x6a>
    2a4a:	bf00      	nop
    2a4c:	20012cf8 	.word	0x20012cf8
    2a50:	20012cdc 	.word	0x20012cdc
    2a54:	20002460 	.word	0x20002460

00002a58 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    2a58:	b510      	push	{r4, lr}
	__asm__ volatile(
    2a5a:	f04f 0320 	mov.w	r3, #32
    2a5e:	f3ef 8411 	mrs	r4, BASEPRI
    2a62:	f383 8812 	msr	BASEPRI_MAX, r3
    2a66:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    2a6a:	f7ff feb7 	bl	27dc <usb_ep_get_transfer>
	if (!trans) {
    2a6e:	b150      	cbz	r0, 2a86 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2a70:	6843      	ldr	r3, [r0, #4]
    2a72:	3310      	adds	r3, #16
    2a74:	d107      	bne.n	2a86 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    2a76:	f06f 038b 	mvn.w	r3, #139	; 0x8b
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2a7a:	f100 012c 	add.w	r1, r0, #44	; 0x2c
	trans->status = -ECANCELED;
    2a7e:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2a80:	4803      	ldr	r0, [pc, #12]	; (2a90 <usb_cancel_transfer+0x38>)
    2a82:	f00b fb63 	bl	e14c <k_work_submit_to_queue>
	__asm__ volatile(
    2a86:	f384 8811 	msr	BASEPRI, r4
    2a8a:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    2a8e:	bd10      	pop	{r4, pc}
    2a90:	20002460 	.word	0x20002460

00002a94 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2a94:	b570      	push	{r4, r5, r6, lr}
    2a96:	2504      	movs	r5, #4
    2a98:	4c0e      	ldr	r4, [pc, #56]	; (2ad4 <usb_cancel_transfers+0x40>)
	__asm__ volatile(
    2a9a:	f04f 0320 	mov.w	r3, #32
    2a9e:	f3ef 8611 	mrs	r6, BASEPRI
    2aa2:	f383 8812 	msr	BASEPRI_MAX, r3
    2aa6:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    2aaa:	6863      	ldr	r3, [r4, #4]
    2aac:	3310      	adds	r3, #16
    2aae:	d107      	bne.n	2ac0 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    2ab0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2ab4:	4808      	ldr	r0, [pc, #32]	; (2ad8 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    2ab6:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2ab8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    2abc:	f00b fb46 	bl	e14c <k_work_submit_to_queue>
	__asm__ volatile(
    2ac0:	f386 8811 	msr	BASEPRI, r6
    2ac4:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2ac8:	3d01      	subs	r5, #1
    2aca:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2ace:	d1e4      	bne.n	2a9a <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    2ad0:	bd70      	pop	{r4, r5, r6, pc}
    2ad2:	bf00      	nop
    2ad4:	20012cdc 	.word	0x20012cdc
    2ad8:	20002460 	.word	0x20002460

00002adc <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    2adc:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2ade:	2500      	movs	r5, #0
    2ae0:	4c09      	ldr	r4, [pc, #36]	; (2b08 <usb_transfer_init+0x2c>)
		k_work_init(&ut_data[i].work, usb_transfer_work);
    2ae2:	4e0a      	ldr	r6, [pc, #40]	; (2b0c <usb_transfer_init+0x30>)
    2ae4:	4631      	mov	r1, r6
    2ae6:	4620      	mov	r0, r4
    2ae8:	f00b fb13 	bl	e112 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2aec:	2201      	movs	r2, #1
    2aee:	f1a4 0010 	sub.w	r0, r4, #16
    2af2:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2af4:	3501      	adds	r5, #1
    2af6:	f00b faee 	bl	e0d6 <z_impl_k_sem_init>
    2afa:	2d04      	cmp	r5, #4
    2afc:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2b00:	d1f0      	bne.n	2ae4 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    2b02:	2000      	movs	r0, #0
    2b04:	bd70      	pop	{r4, r5, r6, pc}
    2b06:	bf00      	nop
    2b08:	20012d08 	.word	0x20012d08
    2b0c:	00002809 	.word	0x00002809

00002b10 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    2b10:	b570      	push	{r4, r5, r6, lr}
    2b12:	4604      	mov	r4, r0
    2b14:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2b16:	7901      	ldrb	r1, [r0, #4]
    2b18:	4812      	ldr	r0, [pc, #72]	; (2b64 <cdc_acm_class_handle_req+0x54>)
{
    2b1a:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2b1c:	f008 fb4a 	bl	b1b4 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    2b20:	b1e8      	cbz	r0, 2b5e <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    2b22:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2b26:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    2b28:	2a00      	cmp	r2, #0
    2b2a:	db11      	blt.n	2b50 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    2b2c:	2b20      	cmp	r3, #32
    2b2e:	d004      	beq.n	2b3a <cdc_acm_class_handle_req+0x2a>
    2b30:	2b22      	cmp	r3, #34	; 0x22
    2b32:	d009      	beq.n	2b48 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    2b34:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2b38:	e005      	b.n	2b46 <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    2b3a:	2207      	movs	r2, #7
    2b3c:	6829      	ldr	r1, [r5, #0]
    2b3e:	3810      	subs	r0, #16
    2b40:	f009 f820 	bl	bb84 <memcpy>
			return 0;
    2b44:	2000      	movs	r0, #0
}
    2b46:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    2b48:	8863      	ldrh	r3, [r4, #2]
    2b4a:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    2b4e:	e7f9      	b.n	2b44 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    2b50:	2b21      	cmp	r3, #33	; 0x21
    2b52:	d1ef      	bne.n	2b34 <cdc_acm_class_handle_req+0x24>
			*len = sizeof(dev_data->line_coding);
    2b54:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    2b56:	3810      	subs	r0, #16
    2b58:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    2b5a:	6033      	str	r3, [r6, #0]
			return 0;
    2b5c:	e7f2      	b.n	2b44 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    2b5e:	f06f 0012 	mvn.w	r0, #18
    2b62:	e7f0      	b.n	2b46 <cdc_acm_class_handle_req+0x36>
    2b64:	20012ddc 	.word	0x20012ddc

00002b68 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    2b68:	4601      	mov	r1, r0
    2b6a:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    2b6c:	4803      	ldr	r0, [pc, #12]	; (2b7c <cdc_acm_int_in+0x14>)
    2b6e:	f008 fb2e 	bl	b1ce <usb_get_dev_data_by_ep>
	if (common == NULL) {
    2b72:	b110      	cbz	r0, 2b7a <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    2b74:	2301      	movs	r3, #1
    2b76:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    2b7a:	bd08      	pop	{r3, pc}
    2b7c:	20012ddc 	.word	0x20012ddc

00002b80 <cdc_acm_irq_rx_enable>:
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;

	dev_data->rx_irq_ena = true;
    2b80:	2301      	movs	r3, #1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2b82:	6901      	ldr	r1, [r0, #16]
	dev_data->rx_irq_ena = true;
    2b84:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    2b88:	680b      	ldr	r3, [r1, #0]
    2b8a:	b133      	cbz	r3, 2b9a <cdc_acm_irq_rx_enable+0x1a>
    2b8c:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    2b90:	b11b      	cbz	r3, 2b9a <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2b92:	4802      	ldr	r0, [pc, #8]	; (2b9c <cdc_acm_irq_rx_enable+0x1c>)
    2b94:	3108      	adds	r1, #8
    2b96:	f00b bad9 	b.w	e14c <k_work_submit_to_queue>
	}
}
    2b9a:	4770      	bx	lr
    2b9c:	20002460 	.word	0x20002460

00002ba0 <cdc_acm_irq_tx_enable>:
	dev_data->tx_irq_ena = true;
    2ba0:	2301      	movs	r3, #1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2ba2:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    2ba4:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    2ba8:	680b      	ldr	r3, [r1, #0]
    2baa:	b133      	cbz	r3, 2bba <cdc_acm_irq_tx_enable+0x1a>
    2bac:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    2bb0:	b11b      	cbz	r3, 2bba <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2bb2:	4802      	ldr	r0, [pc, #8]	; (2bbc <cdc_acm_irq_tx_enable+0x1c>)
    2bb4:	3108      	adds	r1, #8
    2bb6:	f00b bac9 	b.w	e14c <k_work_submit_to_queue>
}
    2bba:	4770      	bx	lr
    2bbc:	20002460 	.word	0x20002460

00002bc0 <cdc_acm_reset_port>:
	dev_data->tx_ready = false;
    2bc0:	2100      	movs	r1, #0
{
    2bc2:	4603      	mov	r3, r0
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2bc4:	4a0b      	ldr	r2, [pc, #44]	; (2bf4 <cdc_acm_reset_port+0x34>)
	dev_data->tx_ready = false;
    2bc6:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2bc8:	6810      	ldr	r0, [r2, #0]
	dev_data->serial_state = 0;
    2bca:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2bce:	6758      	str	r0, [r3, #116]	; 0x74
    2bd0:	8890      	ldrh	r0, [r2, #4]
    2bd2:	7992      	ldrb	r2, [r2, #6]
    2bd4:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    2bd8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->line_state = 0;
    2bdc:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2be0:	2240      	movs	r2, #64	; 0x40
	dev_data->configured = false;
    2be2:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
	dev_data->rx_paused = false;
    2be6:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2bea:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    2bee:	f008 bfd4 	b.w	bb9a <memset>
    2bf2:	bf00      	nop
    2bf4:	0000e9c0 	.word	0x0000e9c0

00002bf8 <cdc_acm_fifo_fill>:
{
    2bf8:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2bfa:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    2bfc:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
    2c00:	b170      	cbz	r0, 2c20 <cdc_acm_fifo_fill+0x28>
    2c02:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
    2c06:	b963      	cbnz	r3, 2c22 <cdc_acm_fifo_fill+0x2a>
	dev_data->tx_ready = false;
    2c08:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2c0c:	6f28      	ldr	r0, [r5, #112]	; 0x70
    2c0e:	f008 fa20 	bl	b052 <ring_buf_put>
    2c12:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2c14:	f105 0118 	add.w	r1, r5, #24
    2c18:	4803      	ldr	r0, [pc, #12]	; (2c28 <cdc_acm_fifo_fill+0x30>)
    2c1a:	f00b fa97 	bl	e14c <k_work_submit_to_queue>
	return wrote;
    2c1e:	4620      	mov	r0, r4
}
    2c20:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    2c22:	2000      	movs	r0, #0
    2c24:	e7fc      	b.n	2c20 <cdc_acm_fifo_fill+0x28>
    2c26:	bf00      	nop
    2c28:	20002460 	.word	0x20002460

00002c2c <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    2c2c:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2c2e:	6904      	ldr	r4, [r0, #16]
{
    2c30:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    2c34:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    2c38:	b18b      	cbz	r3, 2c5e <cdc_acm_poll_out+0x32>
    2c3a:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    2c3e:	b973      	cbnz	r3, 2c5e <cdc_acm_poll_out+0x32>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2c40:	f10d 0107 	add.w	r1, sp, #7
    2c44:	2201      	movs	r2, #1
    2c46:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    2c48:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2c4c:	f008 fa01 	bl	b052 <ring_buf_put>
    2c50:	4601      	mov	r1, r0
    2c52:	b130      	cbz	r0, 2c62 <cdc_acm_poll_out+0x36>
			LOG_ERR("Failed to drain buffer");
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2c54:	480a      	ldr	r0, [pc, #40]	; (2c80 <cdc_acm_poll_out+0x54>)
    2c56:	f104 0118 	add.w	r1, r4, #24
    2c5a:	f00b fa77 	bl	e14c <k_work_submit_to_queue>
}
    2c5e:	b002      	add	sp, #8
    2c60:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2c62:	2201      	movs	r2, #1
    2c64:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2c66:	f008 fa44 	bl	b0f2 <ring_buf_get>
    2c6a:	2800      	cmp	r0, #0
    2c6c:	d0f7      	beq.n	2c5e <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2c6e:	2201      	movs	r2, #1
    2c70:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2c72:	f10d 0107 	add.w	r1, sp, #7
    2c76:	f008 f9ec 	bl	b052 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2c7a:	2800      	cmp	r0, #0
    2c7c:	d1ea      	bne.n	2c54 <cdc_acm_poll_out+0x28>
    2c7e:	e7ee      	b.n	2c5e <cdc_acm_poll_out+0x32>
    2c80:	20002460 	.word	0x20002460

00002c84 <tx_work_handler>:
{
    2c84:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    2c86:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
    2c88:	4605      	mov	r5, r0
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2c8a:	685b      	ldr	r3, [r3, #4]
{
    2c8c:	b085      	sub	sp, #20
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2c8e:	6a1b      	ldr	r3, [r3, #32]
    2c90:	7d1f      	ldrb	r7, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    2c92:	4638      	mov	r0, r7
    2c94:	f008 fab1 	bl	b1fa <usb_transfer_is_busy>
    2c98:	4606      	mov	r6, r0
    2c9a:	b9d8      	cbnz	r0, 2cd4 <tx_work_handler+0x50>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    2c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2ca2:	a903      	add	r1, sp, #12
    2ca4:	f008 f9f4 	bl	b090 <ring_buf_get_claim>
	if (!len) {
    2ca8:	4604      	mov	r4, r0
    2caa:	b198      	cbz	r0, 2cd4 <tx_work_handler+0x50>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    2cac:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    2cae:	f1a5 0318 	sub.w	r3, r5, #24
	dev_data->tx_ready = false;
    2cb2:	742e      	strb	r6, [r5, #16]
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    2cb4:	9301      	str	r3, [sp, #4]
    2cb6:	4b08      	ldr	r3, [pc, #32]	; (2cd8 <tx_work_handler+0x54>)
		len -= 1;
    2cb8:	bf08      	it	eq
    2cba:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    2cbe:	9903      	ldr	r1, [sp, #12]
    2cc0:	9300      	str	r3, [sp, #0]
    2cc2:	4622      	mov	r2, r4
    2cc4:	2302      	movs	r3, #2
    2cc6:	4638      	mov	r0, r7
    2cc8:	f7ff fe54 	bl	2974 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    2ccc:	4621      	mov	r1, r4
    2cce:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2cd0:	f008 f9fa 	bl	b0c8 <ring_buf_get_finish>
}
    2cd4:	b005      	add	sp, #20
    2cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cd8:	00002cdd 	.word	0x00002cdd

00002cdc <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    2cdc:	2301      	movs	r3, #1
{
    2cde:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    2ce0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2ce4:	6813      	ldr	r3, [r2, #0]
{
    2ce6:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2ce8:	b13b      	cbz	r3, 2cfa <cdc_acm_write_cb+0x1e>
    2cea:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    2cee:	b123      	cbz	r3, 2cfa <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2cf0:	4808      	ldr	r0, [pc, #32]	; (2d14 <cdc_acm_write_cb+0x38>)
    2cf2:	f102 0108 	add.w	r1, r2, #8
    2cf6:	f00b fa29 	bl	e14c <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    2cfa:	6f23      	ldr	r3, [r4, #112]	; 0x70
    2cfc:	689a      	ldr	r2, [r3, #8]
    2cfe:	691b      	ldr	r3, [r3, #16]
    2d00:	429a      	cmp	r2, r3
    2d02:	d006      	beq.n	2d12 <cdc_acm_write_cb+0x36>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2d04:	f104 0118 	add.w	r1, r4, #24
    2d08:	4802      	ldr	r0, [pc, #8]	; (2d14 <cdc_acm_write_cb+0x38>)
}
    2d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2d0e:	f00b ba1d 	b.w	e14c <k_work_submit_to_queue>
}
    2d12:	bd10      	pop	{r4, pc}
    2d14:	20002460 	.word	0x20002460

00002d18 <cdc_acm_init>:
	parent->next = child;
    2d18:	2300      	movs	r3, #0
{
    2d1a:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2d1c:	6904      	ldr	r4, [r0, #16]
    2d1e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    2d22:	4b0c      	ldr	r3, [pc, #48]	; (2d54 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    2d24:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    2d28:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    2d2a:	f104 0288 	add.w	r2, r4, #136	; 0x88
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2d2e:	b969      	cbnz	r1, 2d4c <cdc_acm_init+0x34>
	list->head = node;
    2d30:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    2d34:	f104 0008 	add.w	r0, r4, #8
    2d38:	4907      	ldr	r1, [pc, #28]	; (2d58 <cdc_acm_init+0x40>)
    2d3a:	f00b f9ea 	bl	e112 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    2d3e:	f104 0018 	add.w	r0, r4, #24
    2d42:	4906      	ldr	r1, [pc, #24]	; (2d5c <cdc_acm_init+0x44>)
    2d44:	f00b f9e5 	bl	e112 <k_work_init>
}
    2d48:	2000      	movs	r0, #0
    2d4a:	bd10      	pop	{r4, pc}
	parent->next = child;
    2d4c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    2d4e:	605a      	str	r2, [r3, #4]
}
    2d50:	e7f0      	b.n	2d34 <cdc_acm_init+0x1c>
    2d52:	bf00      	nop
    2d54:	20012ddc 	.word	0x20012ddc
    2d58:	0000b225 	.word	0x0000b225
    2d5c:	00002c85 	.word	0x00002c85

00002d60 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    2d60:	b530      	push	{r4, r5, lr}
	notification.wIndex = 0U;
    2d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	struct usb_cfg_data * const cfg = (void *)dev->config;
    2d66:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2d68:	6905      	ldr	r5, [r0, #16]
	notification.wIndex = 0U;
    2d6a:	f242 00a1 	movw	r0, #8353	; 0x20a1
static int cdc_acm_send_notification(const struct device *dev,
    2d6e:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    2d70:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    2d74:	2300      	movs	r3, #0
    2d76:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2d7a:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    2d7c:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2d80:	220a      	movs	r2, #10
    2d82:	7900      	ldrb	r0, [r0, #4]
    2d84:	a901      	add	r1, sp, #4
    2d86:	f008 f9f2 	bl	b16e <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    2d8a:	4c05      	ldr	r4, [pc, #20]	; (2da0 <cdc_acm_send_notification.isra.0+0x40>)
    2d8c:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    2d90:	b923      	cbnz	r3, 2d9c <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    2d92:	2001      	movs	r0, #1
    2d94:	f00b fb13 	bl	e3be <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    2d98:	3c01      	subs	r4, #1
    2d9a:	d1f7      	bne.n	2d8c <cdc_acm_send_notification.isra.0+0x2c>
}
    2d9c:	b005      	add	sp, #20
    2d9e:	bd30      	pop	{r4, r5, pc}
    2da0:	000186a1 	.word	0x000186a1

00002da4 <cdc_acm_read_cb>:
{
    2da4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2da6:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    2da8:	f102 062c 	add.w	r6, r2, #44	; 0x2c
	if (size <= 0) {
    2dac:	1e0a      	subs	r2, r1, #0
{
    2dae:	4605      	mov	r5, r0
	if (size <= 0) {
    2db0:	dd1d      	ble.n	2dee <cdc_acm_read_cb+0x4a>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    2db2:	4631      	mov	r1, r6
    2db4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    2db6:	f008 f94c 	bl	b052 <ring_buf_put>
	dev_data->rx_ready = true;
    2dba:	2301      	movs	r3, #1
    2dbc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    2dc0:	6823      	ldr	r3, [r4, #0]
    2dc2:	b13b      	cbz	r3, 2dd4 <cdc_acm_read_cb+0x30>
    2dc4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    2dc8:	b123      	cbz	r3, 2dd4 <cdc_acm_read_cb+0x30>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2dca:	480e      	ldr	r0, [pc, #56]	; (2e04 <cdc_acm_read_cb+0x60>)
    2dcc:	f104 0108 	add.w	r1, r4, #8
    2dd0:	f00b f9bc 	bl	e14c <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    2dd4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    2dd6:	684b      	ldr	r3, [r1, #4]
    2dd8:	694a      	ldr	r2, [r1, #20]
    2dda:	1a9a      	subs	r2, r3, r2
    2ddc:	69cb      	ldr	r3, [r1, #28]
    2dde:	1a9b      	subs	r3, r3, r2
    2de0:	2b3f      	cmp	r3, #63	; 0x3f
    2de2:	d804      	bhi.n	2dee <cdc_acm_read_cb+0x4a>
		dev_data->rx_paused = true;
    2de4:	2301      	movs	r3, #1
    2de6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
    2dea:	b002      	add	sp, #8
    2dec:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    2dee:	4b06      	ldr	r3, [pc, #24]	; (2e08 <cdc_acm_read_cb+0x64>)
    2df0:	2240      	movs	r2, #64	; 0x40
    2df2:	9300      	str	r3, [sp, #0]
    2df4:	4631      	mov	r1, r6
    2df6:	2301      	movs	r3, #1
    2df8:	4628      	mov	r0, r5
    2dfa:	9401      	str	r4, [sp, #4]
    2dfc:	f7ff fdba 	bl	2974 <usb_transfer>
    2e00:	e7f3      	b.n	2dea <cdc_acm_read_cb+0x46>
    2e02:	bf00      	nop
    2e04:	20002460 	.word	0x20002460
    2e08:	00002da5 	.word	0x00002da5

00002e0c <cdc_acm_dev_status_cb>:
{
    2e0c:	b538      	push	{r3, r4, r5, lr}
    2e0e:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    2e10:	4601      	mov	r1, r0
    2e12:	4824      	ldr	r0, [pc, #144]	; (2ea4 <cdc_acm_dev_status_cb+0x98>)
    2e14:	f008 f9c3 	bl	b19e <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    2e18:	4604      	mov	r4, r0
    2e1a:	b380      	cbz	r0, 2e7e <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    2e1c:	4602      	mov	r2, r0
	struct usb_cfg_data *cfg = (void *)dev->config;
    2e1e:	f852 3984 	ldr.w	r3, [r2], #-132
	switch (status) {
    2e22:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    2e24:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    2e26:	2905      	cmp	r1, #5
    2e28:	d829      	bhi.n	2e7e <cdc_acm_dev_status_cb+0x72>
    2e2a:	e8df f001 	tbb	[pc, r1]
    2e2e:	2820      	.short	0x2820
    2e30:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    2e34:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    2e38:	b931      	cbnz	r1, 2e48 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    2e3a:	6a1b      	ldr	r3, [r3, #32]
    2e3c:	7b18      	ldrb	r0, [r3, #12]
    2e3e:	f7ff ffb1 	bl	2da4 <cdc_acm_read_cb>
			dev_data->configured = true;
    2e42:	2301      	movs	r3, #1
    2e44:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    2e48:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    2e4c:	b9bb      	cbnz	r3, 2e7e <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    2e4e:	2301      	movs	r3, #1
    2e50:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    2e54:	f854 3c84 	ldr.w	r3, [r4, #-132]
    2e58:	b18b      	cbz	r3, 2e7e <cdc_acm_dev_status_cb+0x72>
    2e5a:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    2e5e:	b173      	cbz	r3, 2e7e <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2e60:	f1a4 017c 	sub.w	r1, r4, #124	; 0x7c
    2e64:	4810      	ldr	r0, [pc, #64]	; (2ea8 <cdc_acm_dev_status_cb+0x9c>)
}
    2e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2e6a:	f00b b96f 	b.w	e14c <k_work_submit_to_queue>
		cdc_acm_reset_port(dev_data);
    2e6e:	4610      	mov	r0, r2
}
    2e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    2e74:	f7ff bea4 	b.w	2bc0 <cdc_acm_reset_port>
		dev_data->suspended = true;
    2e78:	2301      	movs	r3, #1
    2e7a:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    2e7e:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    2e80:	f814 1c05 	ldrb.w	r1, [r4, #-5]
    2e84:	2900      	cmp	r1, #0
    2e86:	d0fa      	beq.n	2e7e <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    2e88:	2100      	movs	r1, #0
			if (dev_data->configured) {
    2e8a:	f814 0c06 	ldrb.w	r0, [r4, #-6]
			dev_data->suspended = false;
    2e8e:	f804 1c05 	strb.w	r1, [r4, #-5]
			if (dev_data->configured) {
    2e92:	2800      	cmp	r0, #0
    2e94:	d0f3      	beq.n	2e7e <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    2e96:	6a1b      	ldr	r3, [r3, #32]
    2e98:	7b18      	ldrb	r0, [r3, #12]
}
    2e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    2e9e:	f7ff bf81 	b.w	2da4 <cdc_acm_read_cb>
    2ea2:	bf00      	nop
    2ea4:	20012ddc 	.word	0x20012ddc
    2ea8:	20002460 	.word	0x20002460

00002eac <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    2eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    2eae:	2400      	movs	r4, #0
    2eb0:	4d08      	ldr	r5, [pc, #32]	; (2ed4 <z_usb_work_q_init+0x28>)
    2eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2eba:	4628      	mov	r0, r5
    2ebc:	4906      	ldr	r1, [pc, #24]	; (2ed8 <z_usb_work_q_init+0x2c>)
    2ebe:	9400      	str	r4, [sp, #0]
    2ec0:	f006 fc0c 	bl	96dc <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    2ec4:	4905      	ldr	r1, [pc, #20]	; (2edc <z_usb_work_q_init+0x30>)
    2ec6:	4628      	mov	r0, r5
    2ec8:	f00b f86c 	bl	dfa4 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    2ecc:	4620      	mov	r0, r4
    2ece:	b003      	add	sp, #12
    2ed0:	bd30      	pop	{r4, r5, pc}
    2ed2:	bf00      	nop
    2ed4:	20002460 	.word	0x20002460
    2ed8:	20056808 	.word	0x20056808
    2edc:	0000f1a8 	.word	0x0000f1a8

00002ee0 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    2ee0:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    2ee2:	4b11      	ldr	r3, [pc, #68]	; (2f28 <flash_area_open+0x48>)
{
    2ee4:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    2ee6:	681c      	ldr	r4, [r3, #0]
    2ee8:	b1dc      	cbz	r4, 2f22 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    2eea:	4b10      	ldr	r3, [pc, #64]	; (2f2c <flash_area_open+0x4c>)
    2eec:	6819      	ldr	r1, [r3, #0]
    2eee:	2300      	movs	r3, #0
    2ef0:	428b      	cmp	r3, r1
    2ef2:	db02      	blt.n	2efa <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    2ef4:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    2ef8:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    2efa:	4622      	mov	r2, r4
    2efc:	f812 6b10 	ldrb.w	r6, [r2], #16
    2f00:	4286      	cmp	r6, r0
    2f02:	d002      	beq.n	2f0a <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    2f04:	4614      	mov	r4, r2
    2f06:	3301      	adds	r3, #1
    2f08:	e7f2      	b.n	2ef0 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    2f0a:	68e0      	ldr	r0, [r4, #12]
    2f0c:	b910      	cbnz	r0, 2f14 <flash_area_open+0x34>
		return -ENODEV;
    2f0e:	f06f 0012 	mvn.w	r0, #18
    2f12:	e7f1      	b.n	2ef8 <flash_area_open+0x18>
    2f14:	f00a ffbd 	bl	de92 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    2f18:	2800      	cmp	r0, #0
    2f1a:	d0f8      	beq.n	2f0e <flash_area_open+0x2e>
	return 0;
    2f1c:	2000      	movs	r0, #0
	*fap = area;
    2f1e:	602c      	str	r4, [r5, #0]
	return 0;
    2f20:	e7ea      	b.n	2ef8 <flash_area_open+0x18>
		return -EACCES;
    2f22:	f06f 000c 	mvn.w	r0, #12
    2f26:	e7e7      	b.n	2ef8 <flash_area_open+0x18>
    2f28:	200020e8 	.word	0x200020e8
    2f2c:	0000ea44 	.word	0x0000ea44

00002f30 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    2f30:	b570      	push	{r4, r5, r6, lr}
    2f32:	b088      	sub	sp, #32
    2f34:	4605      	mov	r5, r0
    2f36:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    2f38:	b2c0      	uxtb	r0, r0
    2f3a:	4669      	mov	r1, sp
{
    2f3c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    2f3e:	f7ff ffcf 	bl	2ee0 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    2f42:	2800      	cmp	r0, #0
    2f44:	db1b      	blt.n	2f7e <flash_area_get_sectors+0x4e>
    2f46:	9800      	ldr	r0, [sp, #0]
    2f48:	b1c8      	cbz	r0, 2f7e <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    2f4a:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    2f4c:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    2f4e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    2f50:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    2f52:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    2f54:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    2f58:	2300      	movs	r3, #0
	cb_data->status = 0;
    2f5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    2f5e:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    2f60:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    2f62:	f008 fa63 	bl	b42c <flash_area_close>
	if (flash_dev == NULL) {
    2f66:	b16d      	cbz	r5, 2f84 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    2f68:	4628      	mov	r0, r5
    2f6a:	4908      	ldr	r1, [pc, #32]	; (2f8c <flash_area_get_sectors+0x5c>)
    2f6c:	aa01      	add	r2, sp, #4
    2f6e:	f009 f8c0 	bl	c0f2 <flash_page_foreach>
	if (cb_data->status == 0) {
    2f72:	9807      	ldr	r0, [sp, #28]
    2f74:	b908      	cbnz	r0, 2f7a <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    2f76:	9b05      	ldr	r3, [sp, #20]
    2f78:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    2f7a:	b008      	add	sp, #32
    2f7c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    2f7e:	f06f 0015 	mvn.w	r0, #21
    2f82:	e7fa      	b.n	2f7a <flash_area_get_sectors+0x4a>
		return -ENODEV;
    2f84:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    2f88:	e7f7      	b.n	2f7a <flash_area_get_sectors+0x4a>
    2f8a:	bf00      	nop
    2f8c:	0000b4c7 	.word	0x0000b4c7

00002f90 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2f90:	4801      	ldr	r0, [pc, #4]	; (2f98 <nrf_cc3xx_platform_abort_init+0x8>)
    2f92:	f007 b917 	b.w	a1c4 <nrf_cc3xx_platform_set_abort>
    2f96:	bf00      	nop
    2f98:	0000eaf8 	.word	0x0000eaf8

00002f9c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2f9c:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2f9e:	4604      	mov	r4, r0
    2fa0:	b918      	cbnz	r0, 2faa <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2fa2:	4b0f      	ldr	r3, [pc, #60]	; (2fe0 <mutex_free_platform+0x44>)
    2fa4:	480f      	ldr	r0, [pc, #60]	; (2fe4 <mutex_free_platform+0x48>)
    2fa6:	685b      	ldr	r3, [r3, #4]
    2fa8:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2faa:	6861      	ldr	r1, [r4, #4]
    2fac:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    2fb0:	d00f      	beq.n	2fd2 <mutex_free_platform+0x36>
    2fb2:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    2fb6:	d00c      	beq.n	2fd2 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2fb8:	4d0b      	ldr	r5, [pc, #44]	; (2fe8 <mutex_free_platform+0x4c>)
    2fba:	42a9      	cmp	r1, r5
    2fbc:	d009      	beq.n	2fd2 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2fbe:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    2fc2:	d007      	beq.n	2fd4 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2fc4:	4621      	mov	r1, r4
    2fc6:	4809      	ldr	r0, [pc, #36]	; (2fec <mutex_free_platform+0x50>)
    2fc8:	f00a ffbd 	bl	df46 <k_mem_slab_free>
        mutex->mutex = NULL;
    2fcc:	2300      	movs	r3, #0
    2fce:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2fd0:	6065      	str	r5, [r4, #4]
}
    2fd2:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2fd4:	2214      	movs	r2, #20
    2fd6:	6820      	ldr	r0, [r4, #0]
    2fd8:	f008 fddf 	bl	bb9a <memset>
    2fdc:	e7f8      	b.n	2fd0 <mutex_free_platform+0x34>
    2fde:	bf00      	nop
    2fe0:	200021e4 	.word	0x200021e4
    2fe4:	0000f1b1 	.word	0x0000f1b1
    2fe8:	a95c5f2c 	.word	0xa95c5f2c
    2fec:	200132e4 	.word	0x200132e4

00002ff0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ff0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2ff2:	b360      	cbz	r0, 304e <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2ff4:	6843      	ldr	r3, [r0, #4]
    2ff6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2ffa:	d00e      	beq.n	301a <mutex_lock_platform+0x2a>
    2ffc:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    3000:	d018      	beq.n	3034 <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3002:	4a14      	ldr	r2, [pc, #80]	; (3054 <mutex_lock_platform+0x64>)
    3004:	4293      	cmp	r3, r2
    3006:	d020      	beq.n	304a <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3008:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    300a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    300e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3012:	f006 f941 	bl	9298 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    3016:	b158      	cbz	r0, 3030 <mutex_lock_platform+0x40>
    3018:	e015      	b.n	3046 <mutex_lock_platform+0x56>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    301a:	2201      	movs	r2, #1
    301c:	6803      	ldr	r3, [r0, #0]
    301e:	e8d3 1fef 	ldaex	r1, [r3]
    3022:	2900      	cmp	r1, #0
    3024:	d103      	bne.n	302e <mutex_lock_platform+0x3e>
    3026:	e8c3 2fe0 	stlex	r0, r2, [r3]
    302a:	2800      	cmp	r0, #0
    302c:	d1f7      	bne.n	301e <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    302e:	d10a      	bne.n	3046 <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    3030:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    3032:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    3034:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    3036:	4a08      	ldr	r2, [pc, #32]	; (3058 <mutex_lock_platform+0x68>)
    3038:	781b      	ldrb	r3, [r3, #0]
    303a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    303e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3042:	2b00      	cmp	r3, #0
    3044:	d0f4      	beq.n	3030 <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3046:	4805      	ldr	r0, [pc, #20]	; (305c <mutex_lock_platform+0x6c>)
    3048:	e7f3      	b.n	3032 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    304a:	4805      	ldr	r0, [pc, #20]	; (3060 <mutex_lock_platform+0x70>)
    304c:	e7f1      	b.n	3032 <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    304e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3052:	e7ee      	b.n	3032 <mutex_lock_platform+0x42>
    3054:	a95c5f2c 	.word	0xa95c5f2c
    3058:	50030000 	.word	0x50030000
    305c:	ffff8fe9 	.word	0xffff8fe9
    3060:	ffff8fea 	.word	0xffff8fea

00003064 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3064:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3066:	b320      	cbz	r0, 30b2 <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3068:	6843      	ldr	r3, [r0, #4]
    306a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    306e:	d009      	beq.n	3084 <mutex_unlock_platform+0x20>
    3070:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    3074:	d013      	beq.n	309e <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3076:	4a11      	ldr	r2, [pc, #68]	; (30bc <mutex_unlock_platform+0x58>)
    3078:	4293      	cmp	r3, r2
    307a:	d01d      	beq.n	30b8 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    307c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    307e:	f006 f985 	bl	938c <z_impl_k_mutex_unlock>
    3082:	e014      	b.n	30ae <mutex_unlock_platform+0x4a>
    3084:	2200      	movs	r2, #0
    3086:	6803      	ldr	r3, [r0, #0]
    3088:	e8d3 1fef 	ldaex	r1, [r3]
    308c:	2901      	cmp	r1, #1
    308e:	d103      	bne.n	3098 <mutex_unlock_platform+0x34>
    3090:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3094:	2800      	cmp	r0, #0
    3096:	d1f7      	bne.n	3088 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3098:	d009      	beq.n	30ae <mutex_unlock_platform+0x4a>
    309a:	4809      	ldr	r0, [pc, #36]	; (30c0 <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    309c:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    309e:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    30a0:	6803      	ldr	r3, [r0, #0]
    30a2:	4a08      	ldr	r2, [pc, #32]	; (30c4 <mutex_unlock_platform+0x60>)
    30a4:	781b      	ldrb	r3, [r3, #0]
    30a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    30aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    30ae:	2000      	movs	r0, #0
    30b0:	e7f4      	b.n	309c <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    30b2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    30b6:	e7f1      	b.n	309c <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    30b8:	4803      	ldr	r0, [pc, #12]	; (30c8 <mutex_unlock_platform+0x64>)
    30ba:	e7ef      	b.n	309c <mutex_unlock_platform+0x38>
    30bc:	a95c5f2c 	.word	0xa95c5f2c
    30c0:	ffff8fe9 	.word	0xffff8fe9
    30c4:	50030000 	.word	0x50030000
    30c8:	ffff8fea 	.word	0xffff8fea

000030cc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    30cc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    30ce:	4604      	mov	r4, r0
    30d0:	b918      	cbnz	r0, 30da <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    30d2:	4b1d      	ldr	r3, [pc, #116]	; (3148 <mutex_init_platform+0x7c>)
    30d4:	481d      	ldr	r0, [pc, #116]	; (314c <mutex_init_platform+0x80>)
    30d6:	685b      	ldr	r3, [r3, #4]
    30d8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    30da:	6863      	ldr	r3, [r4, #4]
    30dc:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    30e0:	d02f      	beq.n	3142 <mutex_init_platform+0x76>
    30e2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    30e6:	d02c      	beq.n	3142 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    30e8:	4a19      	ldr	r2, [pc, #100]	; (3150 <mutex_init_platform+0x84>)
    30ea:	4293      	cmp	r3, r2
    30ec:	d119      	bne.n	3122 <mutex_init_platform+0x56>
    30ee:	6823      	ldr	r3, [r4, #0]
    30f0:	bb03      	cbnz	r3, 3134 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    30f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    30f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30fa:	4621      	mov	r1, r4
    30fc:	4815      	ldr	r0, [pc, #84]	; (3154 <mutex_init_platform+0x88>)
    30fe:	f005 ffe5 	bl	90cc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3102:	b908      	cbnz	r0, 3108 <mutex_init_platform+0x3c>
    3104:	6823      	ldr	r3, [r4, #0]
    3106:	b91b      	cbnz	r3, 3110 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    3108:	4b0f      	ldr	r3, [pc, #60]	; (3148 <mutex_init_platform+0x7c>)
    310a:	4813      	ldr	r0, [pc, #76]	; (3158 <mutex_init_platform+0x8c>)
    310c:	685b      	ldr	r3, [r3, #4]
    310e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3110:	2214      	movs	r2, #20
    3112:	2100      	movs	r1, #0
    3114:	6820      	ldr	r0, [r4, #0]
    3116:	f008 fd40 	bl	bb9a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    311a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    311e:	6063      	str	r3, [r4, #4]
    3120:	e008      	b.n	3134 <mutex_init_platform+0x68>
    switch(flags){
    3122:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3126:	d80d      	bhi.n	3144 <mutex_init_platform+0x78>
    3128:	2b3a      	cmp	r3, #58	; 0x3a
    312a:	d003      	beq.n	3134 <mutex_init_platform+0x68>
    312c:	f640 62ba 	movw	r2, #3770	; 0xeba
    3130:	4293      	cmp	r3, r2
    3132:	d1de      	bne.n	30f2 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3134:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3136:	f00a ff4e 	bl	dfd6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    313a:	6863      	ldr	r3, [r4, #4]
    313c:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    3140:	6063      	str	r3, [r4, #4]
}
    3142:	bd10      	pop	{r4, pc}
    switch(flags){
    3144:	4a05      	ldr	r2, [pc, #20]	; (315c <mutex_init_platform+0x90>)
    3146:	e7f3      	b.n	3130 <mutex_init_platform+0x64>
    3148:	200021e4 	.word	0x200021e4
    314c:	0000f1b1 	.word	0x0000f1b1
    3150:	a95c5f2c 	.word	0xa95c5f2c
    3154:	200132e4 	.word	0x200132e4
    3158:	0000f1d7 	.word	0x0000f1d7
    315c:	3a00003a 	.word	0x3a00003a

00003160 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3160:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3162:	4906      	ldr	r1, [pc, #24]	; (317c <nrf_cc3xx_platform_mutex_init+0x1c>)
    3164:	2340      	movs	r3, #64	; 0x40
    3166:	2214      	movs	r2, #20
    3168:	4805      	ldr	r0, [pc, #20]	; (3180 <nrf_cc3xx_platform_mutex_init+0x20>)
    316a:	f00a fede 	bl	df2a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    316e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3172:	4904      	ldr	r1, [pc, #16]	; (3184 <nrf_cc3xx_platform_mutex_init+0x24>)
    3174:	4804      	ldr	r0, [pc, #16]	; (3188 <nrf_cc3xx_platform_mutex_init+0x28>)
    3176:	f007 b897 	b.w	a2a8 <nrf_cc3xx_platform_set_mutexes>
    317a:	bf00      	nop
    317c:	20012de4 	.word	0x20012de4
    3180:	200132e4 	.word	0x200132e4
    3184:	0000eb00 	.word	0x0000eb00
    3188:	0000eb14 	.word	0x0000eb14

0000318c <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    318c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    318e:	4e23      	ldr	r6, [pc, #140]	; (321c <boot_uart_fifo_callback+0x90>)
    3190:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    3192:	6883      	ldr	r3, [r0, #8]
    3194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3196:	b103      	cbz	r3, 319a <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    3198:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    319a:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    319c:	6883      	ldr	r3, [r0, #8]
    319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    31a0:	2b00      	cmp	r3, #0
    31a2:	d132      	bne.n	320a <boot_uart_fifo_callback+0x7e>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    31a4:	4c1e      	ldr	r4, [pc, #120]	; (3220 <boot_uart_fifo_callback+0x94>)
	return list->head;
    31a6:	4d1f      	ldr	r5, [pc, #124]	; (3224 <boot_uart_fifo_callback+0x98>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    31a8:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    31aa:	6883      	ldr	r3, [r0, #8]
    31ac:	699b      	ldr	r3, [r3, #24]
    31ae:	2b00      	cmp	r3, #0
    31b0:	d02e      	beq.n	3210 <boot_uart_fifo_callback+0x84>
	return api->fifo_read(dev, rx_data, size);
    31b2:	2201      	movs	r2, #1
    31b4:	f10d 0107 	add.w	r1, sp, #7
    31b8:	4798      	blx	r3
		if (rx != 1) {
    31ba:	2801      	cmp	r0, #1
    31bc:	d128      	bne.n	3210 <boot_uart_fifo_callback+0x84>
		if (!cmd) {
    31be:	6823      	ldr	r3, [r4, #0]
    31c0:	b943      	cbnz	r3, 31d4 <boot_uart_fifo_callback+0x48>
    31c2:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    31c4:	b323      	cbz	r3, 3210 <boot_uart_fifo_callback+0x84>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    31c6:	6869      	ldr	r1, [r5, #4]
	return node->next;
    31c8:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    31ca:	428b      	cmp	r3, r1
	list->head = node;
    31cc:	602a      	str	r2, [r5, #0]
	list->tail = node;
    31ce:	bf08      	it	eq
    31d0:	606a      	streq	r2, [r5, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    31d2:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    31d4:	4a14      	ldr	r2, [pc, #80]	; (3228 <boot_uart_fifo_callback+0x9c>)
			cmd->line[cur++] = byte;
		}

		if (byte ==  '\n') {
    31d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    31da:	8811      	ldrh	r1, [r2, #0]
    31dc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    31e0:	d204      	bcs.n	31ec <boot_uart_fifo_callback+0x60>
			cmd->line[cur++] = byte;
    31e2:	6823      	ldr	r3, [r4, #0]
    31e4:	1c4f      	adds	r7, r1, #1
    31e6:	440b      	add	r3, r1
    31e8:	8017      	strh	r7, [r2, #0]
    31ea:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    31ec:	280a      	cmp	r0, #10
    31ee:	d1db      	bne.n	31a8 <boot_uart_fifo_callback+0x1c>
	parent->next = child;
    31f0:	2000      	movs	r0, #0
			cmd->len = cur;
    31f2:	6823      	ldr	r3, [r4, #0]
    31f4:	8811      	ldrh	r1, [r2, #0]
    31f6:	6018      	str	r0, [r3, #0]
    31f8:	6059      	str	r1, [r3, #4]
	return list->tail;
    31fa:	490c      	ldr	r1, [pc, #48]	; (322c <boot_uart_fifo_callback+0xa0>)
    31fc:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    31fe:	b94d      	cbnz	r5, 3214 <boot_uart_fifo_callback+0x88>
	list->head = node;
    3200:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    3204:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    3206:	6020      	str	r0, [r4, #0]
    3208:	e7cd      	b.n	31a6 <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    320a:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    320c:	2800      	cmp	r0, #0
    320e:	d1c9      	bne.n	31a4 <boot_uart_fifo_callback+0x18>
		}
	}
}
    3210:	b003      	add	sp, #12
    3212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	parent->next = child;
    3214:	602b      	str	r3, [r5, #0]
	list->tail = node;
    3216:	604b      	str	r3, [r1, #4]
}
    3218:	e7f4      	b.n	3204 <boot_uart_fifo_callback+0x78>
    321a:	bf00      	nop
    321c:	20013728 	.word	0x20013728
    3220:	20013300 	.word	0x20013300
    3224:	20013310 	.word	0x20013310
    3228:	200145e4 	.word	0x200145e4
    322c:	20013308 	.word	0x20013308

00003230 <console_out>:
{
    3230:	b510      	push	{r4, lr}
	uart_poll_out(uart_dev, c);
    3232:	4b04      	ldr	r3, [pc, #16]	; (3244 <console_out+0x14>)
{
    3234:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    3236:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    3238:	6883      	ldr	r3, [r0, #8]
    323a:	b2e1      	uxtb	r1, r4
    323c:	685b      	ldr	r3, [r3, #4]
    323e:	4798      	blx	r3
}
    3240:	4620      	mov	r0, r4
    3242:	bd10      	pop	{r4, pc}
    3244:	20013728 	.word	0x20013728

00003248 <console_read>:
{
    3248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    324a:	4605      	mov	r5, r0
    324c:	4616      	mov	r6, r2
    324e:	4608      	mov	r0, r1
	__asm__ volatile(
    3250:	f04f 0320 	mov.w	r3, #32
    3254:	f3ef 8711 	mrs	r7, BASEPRI
    3258:	f383 8812 	msr	BASEPRI_MAX, r3
    325c:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    3260:	491b      	ldr	r1, [pc, #108]	; (32d0 <console_read+0x88>)
    3262:	680b      	ldr	r3, [r1, #0]
    3264:	b14b      	cbz	r3, 327a <console_read+0x32>
	return list->tail;
    3266:	4c1b      	ldr	r4, [pc, #108]	; (32d4 <console_read+0x8c>)
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    3268:	6862      	ldr	r2, [r4, #4]
    326a:	429a      	cmp	r2, r3
    326c:	d005      	beq.n	327a <console_read+0x32>
	parent->next = child;
    326e:	2200      	movs	r2, #0
    3270:	601a      	str	r2, [r3, #0]
	return list->tail;
    3272:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    3274:	b962      	cbnz	r2, 3290 <console_read+0x48>
	list->head = node;
    3276:	e9c4 3300 	strd	r3, r3, [r4]
	return list->head;
    327a:	4a17      	ldr	r2, [pc, #92]	; (32d8 <console_read+0x90>)
    327c:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_GET(slist, snode)
    327e:	b953      	cbnz	r3, 3296 <console_read+0x4e>
	__asm__ volatile(
    3280:	f387 8811 	msr	BASEPRI, r7
    3284:	f3bf 8f6f 	isb	sy
		return 0;
    3288:	4618      	mov	r0, r3

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    328a:	600b      	str	r3, [r1, #0]
		*newline = 0;
    328c:	6033      	str	r3, [r6, #0]
}
    328e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    3290:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3292:	6063      	str	r3, [r4, #4]
}
    3294:	e7f1      	b.n	327a <console_read+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3296:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return node->next;
    329a:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    329c:	4563      	cmp	r3, ip
	list->head = node;
    329e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    32a0:	bf08      	it	eq
    32a2:	6054      	streq	r4, [r2, #4]
    32a4:	f387 8811 	msr	BASEPRI, r7
    32a8:	f3bf 8f6f 	isb	sy
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    32ac:	685c      	ldr	r4, [r3, #4]
	cmd = CONTAINER_OF(node, struct line_input, node);
    32ae:	600b      	str	r3, [r1, #0]
	if (len > str_size - 1) {
    32b0:	42a0      	cmp	r0, r4
		len = str_size - 1;
    32b2:	bfd8      	it	le
    32b4:	f100 34ff 	addle.w	r4, r0, #4294967295	; 0xffffffff
	*line = cmd->line;
    32b8:	f103 0108 	add.w	r1, r3, #8
	memcpy(str, line, len);
    32bc:	4622      	mov	r2, r4
    32be:	4628      	mov	r0, r5
    32c0:	f008 fc60 	bl	bb84 <memcpy>
	str[len] = '\0';
    32c4:	2300      	movs	r3, #0
	return len + 1;
    32c6:	1c60      	adds	r0, r4, #1
	str[len] = '\0';
    32c8:	552b      	strb	r3, [r5, r4]
	return len + 1;
    32ca:	2301      	movs	r3, #1
    32cc:	e7de      	b.n	328c <console_read+0x44>
    32ce:	bf00      	nop
    32d0:	20013304 	.word	0x20013304
    32d4:	20013310 	.word	0x20013310
    32d8:	20013308 	.word	0x20013308

000032dc <boot_console_init>:
{
    32dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	list->head = NULL;
    32de:	2400      	movs	r4, #0
    32e0:	4b1f      	ldr	r3, [pc, #124]	; (3360 <boot_console_init+0x84>)
	list->head = node;
    32e2:	4a20      	ldr	r2, [pc, #128]	; (3364 <boot_console_init+0x88>)
	list->tail = NULL;
    32e4:	e9c3 4400 	strd	r4, r4, [r3]
	list->head = node;
    32e8:	4b1f      	ldr	r3, [pc, #124]	; (3368 <boot_console_init+0x8c>)
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
#elif CONFIG_BOOT_SERIAL_CDC_ACM
	uart_dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
    32ea:	4d20      	ldr	r5, [pc, #128]	; (336c <boot_console_init+0x90>)
    32ec:	4820      	ldr	r0, [pc, #128]	; (3370 <boot_console_init+0x94>)
	parent->next = child;
    32ee:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    32f2:	6013      	str	r3, [r2, #0]
	parent->next = child;
    32f4:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    32f8:	6019      	str	r1, [r3, #0]
	list->tail = node;
    32fa:	6051      	str	r1, [r2, #4]
    32fc:	6028      	str	r0, [r5, #0]
    32fe:	f00a fdc8 	bl	de92 <z_device_is_ready>
#endif

	if (!device_is_ready(uart_dev)) {
    3302:	b920      	cbnz	r0, 330e <boot_console_init+0x32>
		return (-1);
    3304:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
    3308:	4620      	mov	r0, r4
    330a:	b003      	add	sp, #12
    330c:	bd30      	pop	{r4, r5, pc}
	}

#if CONFIG_BOOT_SERIAL_CDC_ACM
	int rc = usb_enable(NULL);
    330e:	4620      	mov	r0, r4
    3310:	f7ff f8c6 	bl	24a0 <usb_enable>
	if (rc) {
    3314:	4604      	mov	r4, r0
    3316:	2800      	cmp	r0, #0
    3318:	d1f4      	bne.n	3304 <boot_console_init+0x28>
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    331a:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    331c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    331e:	b123      	cbz	r3, 332a <boot_console_init+0x4e>
    3320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3322:	b113      	cbz	r3, 332a <boot_console_init+0x4e>
		api->irq_callback_set(dev, cb, user_data);
    3324:	4622      	mov	r2, r4
    3326:	4913      	ldr	r1, [pc, #76]	; (3374 <boot_console_init+0x98>)
    3328:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    332a:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready == NULL) {
    332c:	6883      	ldr	r3, [r0, #8]
    332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3330:	b10b      	cbz	r3, 3336 <boot_console_init+0x5a>
	return api->irq_rx_ready(dev);
    3332:	4798      	blx	r3
    3334:	b148      	cbz	r0, 334a <boot_console_init+0x6e>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    3336:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read == NULL) {
    3338:	6883      	ldr	r3, [r0, #8]
    333a:	699b      	ldr	r3, [r3, #24]
    333c:	2b00      	cmp	r3, #0
    333e:	d0fa      	beq.n	3336 <boot_console_init+0x5a>
	return api->fifo_read(dev, rx_data, size);
    3340:	2201      	movs	r2, #1
    3342:	f10d 0107 	add.w	r1, sp, #7
    3346:	4798      	blx	r3
    3348:	e7f4      	b.n	3334 <boot_console_init+0x58>
			;
		}
	}

	cur = 0;
    334a:	2200      	movs	r2, #0
    334c:	4b0a      	ldr	r3, [pc, #40]	; (3378 <boot_console_init+0x9c>)

	uart_irq_rx_enable(uart_dev);
    334e:	6828      	ldr	r0, [r5, #0]
	cur = 0;
    3350:	801a      	strh	r2, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    3352:	6883      	ldr	r3, [r0, #8]
    3354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3356:	2b00      	cmp	r3, #0
    3358:	d0d6      	beq.n	3308 <boot_console_init+0x2c>
		api->irq_rx_enable(dev);
    335a:	4798      	blx	r3
	return boot_uart_fifo_init();
    335c:	e7d4      	b.n	3308 <boot_console_init+0x2c>
    335e:	bf00      	nop
    3360:	20013308 	.word	0x20013308
    3364:	20013310 	.word	0x20013310
    3368:	20013318 	.word	0x20013318
    336c:	20013728 	.word	0x20013728
    3370:	0000e630 	.word	0x0000e630
    3374:	0000318d 	.word	0x0000318d
    3378:	200145e4 	.word	0x200145e4

0000337c <boot_serial_output>:
{
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    337c:	f640 1306 	movw	r3, #2310	; 0x906

    data = bs_obuf;
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    bs_hdr->nh_flags = 0;
    3380:	2000      	movs	r0, #0
{
    3382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3386:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    338a:	f8ad 300c 	strh.w	r3, [sp, #12]
    bs_hdr->nh_op++;
    338e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 3474 <boot_serial_output+0xf8>
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    3392:	4b39      	ldr	r3, [pc, #228]	; (3478 <boot_serial_output+0xfc>)
    bs_hdr->nh_op++;
    3394:	f8d9 1000 	ldr.w	r1, [r9]
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    3398:	681b      	ldr	r3, [r3, #0]
    339a:	4e38      	ldr	r6, [pc, #224]	; (347c <boot_serial_output+0x100>)
    bs_hdr->nh_len = htons(len);
    bs_hdr->nh_group = htons(bs_hdr->nh_group);

#ifdef __ZEPHYR__
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    339c:	2208      	movs	r2, #8
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    339e:	eba3 0806 	sub.w	r8, r3, r6
    bs_hdr->nh_op++;
    33a2:	780b      	ldrb	r3, [r1, #0]
    bs_hdr->nh_flags = 0;
    33a4:	7048      	strb	r0, [r1, #1]
    bs_hdr->nh_op++;
    33a6:	3301      	adds	r3, #1
    33a8:	700b      	strb	r3, [r1, #0]
    bs_hdr->nh_len = htons(len);
    33aa:	fa98 f398 	rev16.w	r3, r8
    33ae:	804b      	strh	r3, [r1, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    33b0:	888b      	ldrh	r3, [r1, #4]

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    33b2:	2702      	movs	r7, #2
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    33b4:	ba5b      	rev16	r3, r3
    33b6:	808b      	strh	r3, [r1, #4]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    33b8:	f007 fe05 	bl	afc6 <crc16_itu_t>
    crc =  crc16_itu_t(crc, data, len);
    33bc:	4642      	mov	r2, r8
    33be:	4631      	mov	r1, r6
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    33c0:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16_itu_t(crc, data, len);
    33c4:	f007 fdff 	bl	afc6 <crc16_itu_t>
    boot_uf->write(pkt_start, sizeof(pkt_start));
    33c8:	4d2d      	ldr	r5, [pc, #180]	; (3480 <boot_serial_output+0x104>)
    crc = htons(crc);
    33ca:	ba40      	rev16	r0, r0
    boot_uf->write(pkt_start, sizeof(pkt_start));
    33cc:	682b      	ldr	r3, [r5, #0]
    33ce:	fa1f f488 	uxth.w	r4, r8
    crc = htons(crc);
    33d2:	f8ad 0010 	strh.w	r0, [sp, #16]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    33d6:	2102      	movs	r1, #2
    33d8:	a803      	add	r0, sp, #12
    33da:	685b      	ldr	r3, [r3, #4]
    33dc:	4798      	blx	r3
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    33de:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    33e2:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    33e4:	f10d 0112 	add.w	r1, sp, #18
    33e8:	2202      	movs	r2, #2
    33ea:	a806      	add	r0, sp, #24
    totlen = htons(totlen);
    33ec:	f8ad 3012 	strh.w	r3, [sp, #18]
    memcpy(buf, &totlen, sizeof(totlen));
    33f0:	f008 fbc8 	bl	bb84 <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    33f4:	f8d9 1000 	ldr.w	r1, [r9]
    33f8:	2208      	movs	r2, #8
    33fa:	f10d 001a 	add.w	r0, sp, #26
    totlen = sizeof(totlen);
    33fe:	f8ad 7012 	strh.w	r7, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    3402:	f008 fbbf 	bl	bb84 <memcpy>
    totlen += sizeof(*bs_hdr);
    3406:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    340a:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    340c:	3008      	adds	r0, #8
    340e:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    3410:	4642      	mov	r2, r8
    3412:	4631      	mov	r1, r6
    totlen += sizeof(*bs_hdr);
    3414:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    3418:	4418      	add	r0, r3
    341a:	f008 fbb3 	bl	bb84 <memcpy>
    totlen += len;
    341e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    3422:	463a      	mov	r2, r7
    totlen += len;
    3424:	18e0      	adds	r0, r4, r3
    3426:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    3428:	ab06      	add	r3, sp, #24
    totlen += len;
    342a:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    342e:	a904      	add	r1, sp, #16
    3430:	4418      	add	r0, r3
    3432:	f008 fba7 	bl	bb84 <memcpy>
    totlen += sizeof(crc);
    3436:	f8bd 3012 	ldrh.w	r3, [sp, #18]
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    343a:	aa05      	add	r2, sp, #20
    totlen += sizeof(crc);
    343c:	443b      	add	r3, r7
    343e:	b29b      	uxth	r3, r3
    3440:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    3444:	9300      	str	r3, [sp, #0]
    3446:	f240 1169 	movw	r1, #361	; 0x169
    344a:	ab06      	add	r3, sp, #24
    344c:	a849      	add	r0, sp, #292	; 0x124
    344e:	f7fd ff6d 	bl	132c <base64_encode>
    totlen = enc_len;
    3452:	9905      	ldr	r1, [sp, #20]
    base64_encode((unsigned char *)encoded_buf, sizeof(encoded_buf), &enc_len, (unsigned char *)buf, totlen);
    totlen = enc_len;
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    3454:	682b      	ldr	r3, [r5, #0]
    totlen = enc_len;
    3456:	f8ad 1012 	strh.w	r1, [sp, #18]
    boot_uf->write(encoded_buf, totlen);
    345a:	a849      	add	r0, sp, #292	; 0x124
    345c:	685b      	ldr	r3, [r3, #4]
    345e:	b289      	uxth	r1, r1
    3460:	4798      	blx	r3
    boot_uf->write("\n", 1);
    3462:	682b      	ldr	r3, [r5, #0]
    3464:	2101      	movs	r1, #1
    3466:	685b      	ldr	r3, [r3, #4]
    3468:	4806      	ldr	r0, [pc, #24]	; (3484 <boot_serial_output+0x108>)
    346a:	4798      	blx	r3
    BOOT_LOG_INF("TX");
}
    346c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    3470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3474:	20013770 	.word	0x20013770
    3478:	20013740 	.word	0x20013740
    347c:	20015efb 	.word	0x20015efb
    3480:	20013774 	.word	0x20013774
    3484:	0000f204 	.word	0x0000f204

00003488 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    3488:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    348a:	680c      	ldr	r4, [r1, #0]
    348c:	4f16      	ldr	r7, [pc, #88]	; (34e8 <boot_serial_in_dec.constprop.0+0x60>)
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    348e:	b085      	sub	sp, #20
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    3490:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    3492:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    3494:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
    3498:	9000      	str	r0, [sp, #0]
    349a:	4b14      	ldr	r3, [pc, #80]	; (34ec <boot_serial_in_dec.constprop.0+0x64>)
    349c:	1938      	adds	r0, r7, r4
    349e:	aa03      	add	r2, sp, #12
    34a0:	3101      	adds	r1, #1
    34a2:	f7fd ffc1 	bl	1428 <base64_decode>
    if (err) {
    34a6:	4604      	mov	r4, r0
    34a8:	b9d0      	cbnz	r0, 34e0 <boot_serial_in_dec.constprop.0+0x58>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    34aa:	682b      	ldr	r3, [r5, #0]
    34ac:	9a03      	ldr	r2, [sp, #12]
    34ae:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    34b0:	2b02      	cmp	r3, #2
    *out_off += rc;
    34b2:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    34b4:	d911      	bls.n	34da <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    34b6:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    34b8:	3b02      	subs	r3, #2
    34ba:	ba76      	rev16	r6, r6
    34bc:	b2b6      	uxth	r6, r6
    34be:	429e      	cmp	r6, r3
    34c0:	d10b      	bne.n	34da <boot_serial_in_dec.constprop.0+0x52>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16_itu_t(CRC16_INITIAL_CRC, out, len);
    34c2:	4632      	mov	r2, r6
    34c4:	1cb9      	adds	r1, r7, #2
    34c6:	f007 fd7e 	bl	afc6 <crc16_itu_t>
#elif __ESPRESSIF__
    crc = ~crc16_be(~CRC16_INITIAL_CRC, (uint8_t *)out, len);
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    34ca:	b930      	cbnz	r0, 34da <boot_serial_in_dec.constprop.0+0x52>
    34cc:	2e02      	cmp	r6, #2
    34ce:	d904      	bls.n	34da <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }
    *out_off -= sizeof(crc);
    34d0:	682b      	ldr	r3, [r5, #0]
    34d2:	1e9a      	subs	r2, r3, #2
    34d4:	602a      	str	r2, [r5, #0]
    out[*out_off] = '\0';
    34d6:	54fc      	strb	r4, [r7, r3]

    return 1;
    34d8:	2401      	movs	r4, #1
}
    34da:	4620      	mov	r0, r4
    34dc:	b005      	add	sp, #20
    34de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    34e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    34e4:	e7f9      	b.n	34da <boot_serial_in_dec.constprop.0+0x52>
    34e6:	bf00      	nop
    34e8:	20015ffc 	.word	0x20015ffc
    34ec:	200163ff 	.word	0x200163ff

000034f0 <zcbor_tstr_encode_ptr.constprop.0.isra.0>:
 */
static inline bool zcbor_bstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
{
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
    34f0:	b507      	push	{r0, r1, r2, lr}
{
	return zcbor_tstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
    34f2:	e9cd 0100 	strd	r0, r1, [sp]
    34f6:	4669      	mov	r1, sp
    34f8:	4802      	ldr	r0, [pc, #8]	; (3504 <zcbor_tstr_encode_ptr.constprop.0.isra.0+0x14>)
    34fa:	f008 fa28 	bl	b94e <zcbor_tstr_encode>
}
    34fe:	b003      	add	sp, #12
    3500:	f85d fb04 	ldr.w	pc, [sp], #4
    3504:	20013740 	.word	0x20013740

00003508 <bs_rc_rsp>:
{
    3508:	b538      	push	{r3, r4, r5, lr}
    350a:	4605      	mov	r5, r0
    zcbor_map_start_encode(cbor_state, 10);
    350c:	4c0a      	ldr	r4, [pc, #40]	; (3538 <bs_rc_rsp+0x30>)
    350e:	210a      	movs	r1, #10
    3510:	4620      	mov	r0, r4
    3512:	f008 fa2e 	bl	b972 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    3516:	2102      	movs	r1, #2
    3518:	4808      	ldr	r0, [pc, #32]	; (353c <bs_rc_rsp+0x34>)
    351a:	f7ff ffe9 	bl	34f0 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc_code);
    351e:	4629      	mov	r1, r5
    3520:	4620      	mov	r0, r4
    3522:	f008 fa04 	bl	b92e <zcbor_int32_put>
    zcbor_map_end_encode(cbor_state, 10);
    3526:	4620      	mov	r0, r4
    3528:	210a      	movs	r1, #10
    352a:	f008 fa40 	bl	b9ae <zcbor_map_end_encode>
}
    352e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    boot_serial_output();
    3532:	f7ff bf23 	b.w	337c <boot_serial_output>
    3536:	bf00      	nop
    3538:	20013740 	.word	0x20013740
    353c:	0000ef57 	.word	0x0000ef57

00003540 <reset_cbor_state>:
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    3540:	2300      	movs	r3, #0
{
    3542:	b507      	push	{r0, r1, r2, lr}
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    3544:	4a05      	ldr	r2, [pc, #20]	; (355c <reset_cbor_state+0x1c>)
    3546:	9300      	str	r3, [sp, #0]
    3548:	2102      	movs	r1, #2
    354a:	f502 7380 	add.w	r3, r2, #256	; 0x100
    354e:	4804      	ldr	r0, [pc, #16]	; (3560 <reset_cbor_state+0x20>)
    3550:	f008 fa2f 	bl	b9b2 <zcbor_new_encode_state>
}
    3554:	b003      	add	sp, #12
    3556:	f85d fb04 	ldr.w	pc, [sp], #4
    355a:	bf00      	nop
    355c:	20015efb 	.word	0x20015efb
    3560:	20013740 	.word	0x20013740

00003564 <boot_serial_input>:
{
    3564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (len < sizeof(*hdr) ||
    3568:	2907      	cmp	r1, #7
{
    356a:	4604      	mov	r4, r0
    356c:	b0a9      	sub	sp, #164	; 0xa4
    if (len < sizeof(*hdr) ||
    356e:	f240 80b4 	bls.w	36da <FIH_LABEL_FIH_CALL_END_796+0x8e>
    3572:	7803      	ldrb	r3, [r0, #0]
    3574:	f013 07fd 	ands.w	r7, r3, #253	; 0xfd
    3578:	f040 80af 	bne.w	36da <FIH_LABEL_FIH_CALL_END_796+0x8e>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    357c:	8843      	ldrh	r3, [r0, #2]
    357e:	f1a1 0508 	sub.w	r5, r1, #8
    3582:	ba5b      	rev16	r3, r3
    3584:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    3586:	42ab      	cmp	r3, r5
    3588:	f0c0 80a7 	bcc.w	36da <FIH_LABEL_FIH_CALL_END_796+0x8e>
    bs_hdr = hdr;
    358c:	4ba6      	ldr	r3, [pc, #664]	; (3828 <FIH_LABEL_FIH_CALL_END_796+0x1dc>)
    buf += sizeof(*hdr);
    358e:	f100 0608 	add.w	r6, r0, #8
    bs_hdr = hdr;
    3592:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    3594:	8883      	ldrh	r3, [r0, #4]
    3596:	ba5b      	rev16	r3, r3
    3598:	8083      	strh	r3, [r0, #4]
    reset_cbor_state();
    359a:	f7ff ffd1 	bl	3540 <reset_cbor_state>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    359e:	88a0      	ldrh	r0, [r4, #4]
    35a0:	2801      	cmp	r0, #1
    35a2:	f040 81d0 	bne.w	3946 <FIH_LABEL_FIH_CALL_END_796+0x2fa>
        switch (hdr->nh_id) {
    35a6:	79e4      	ldrb	r4, [r4, #7]
    35a8:	b144      	cbz	r4, 35bc <boot_serial_input+0x58>
    35aa:	2c01      	cmp	r4, #1
    35ac:	f000 8098 	beq.w	36e0 <FIH_LABEL_FIH_CALL_END_796+0x94>
            bs_rc_rsp(MGMT_ERR_ENOTSUP);
    35b0:	2008      	movs	r0, #8
}
    35b2:	b029      	add	sp, #164	; 0xa4
    35b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            bs_rc_rsp(0);
    35b8:	f7ff bfa6 	b.w	3508 <bs_rc_rsp>
    zcbor_map_start_encode(cbor_state, 1);
    35bc:	4601      	mov	r1, r0
    35be:	489b      	ldr	r0, [pc, #620]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    35c0:	f008 f9d7 	bl	b972 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "images");
    35c4:	2106      	movs	r1, #6
    35c6:	489a      	ldr	r0, [pc, #616]	; (3830 <FIH_LABEL_FIH_CALL_END_796+0x1e4>)
    35c8:	f7ff ff92 	bl	34f0 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_list_start_encode(cbor_state, 5);
    35cc:	2105      	movs	r1, #5
    35ce:	4897      	ldr	r0, [pc, #604]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    35d0:	f008 f9c0 	bl	b954 <zcbor_list_start_encode>
    35d4:	4625      	mov	r5, r4
            fih_int fih_rc = FIH_FAILURE;
    35d6:	f8df 825c 	ldr.w	r8, [pc, #604]	; 3834 <FIH_LABEL_FIH_CALL_END_796+0x1e8>
            if (hdr.ih_magic == IMAGE_MAGIC)
    35da:	f8df 925c 	ldr.w	r9, [pc, #604]	; 3838 <FIH_LABEL_FIH_CALL_END_796+0x1ec>
        for (slot = 0; slot < 2; slot++) {
    35de:	2600      	movs	r6, #0
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    35e0:	4f96      	ldr	r7, [pc, #600]	; (383c <FIH_LABEL_FIH_CALL_END_796+0x1f0>)
    35e2:	e000      	b.n	35e6 <boot_serial_input+0x82>
        for (slot = 0; slot < 2; slot++) {
    35e4:	2601      	movs	r6, #1
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    35e6:	4631      	mov	r1, r6
    35e8:	4628      	mov	r0, r5
    35ea:	f006 ff3e 	bl	a46a <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    35ee:	a907      	add	r1, sp, #28
    35f0:	b2c0      	uxtb	r0, r0
    35f2:	f7ff fc75 	bl	2ee0 <flash_area_open>
    35f6:	4604      	mov	r4, r0
    35f8:	2800      	cmp	r0, #0
    35fa:	d15f      	bne.n	36bc <FIH_LABEL_FIH_CALL_END_796+0x70>
            int rc = BOOT_HOOK_CALL(boot_read_image_header_hook,
    35fc:	4631      	mov	r1, r6
    35fe:	4628      	mov	r0, r5
    3600:	aa08      	add	r2, sp, #32
    3602:	f002 ffc9 	bl	6598 <boot_read_image_header_hook>
            if (rc == BOOT_HOOK_REGULAR)
    3606:	2801      	cmp	r0, #1
    3608:	d106      	bne.n	3618 <boot_serial_input+0xb4>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    360a:	2320      	movs	r3, #32
    360c:	4621      	mov	r1, r4
    360e:	9807      	ldr	r0, [sp, #28]
    3610:	eb0d 0203 	add.w	r2, sp, r3
    3614:	f007 ff0b 	bl	b42e <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    3618:	9b08      	ldr	r3, [sp, #32]
            fih_int fih_rc = FIH_FAILURE;
    361a:	f8d8 4000 	ldr.w	r4, [r8]
            if (hdr.ih_magic == IMAGE_MAGIC)
    361e:	454b      	cmp	r3, r9
    3620:	d114      	bne.n	364c <FIH_LABEL_FIH_CALL_END_796>

00003622 <FIH_LABEL_FIH_CALL_START_746>:
                BOOT_HOOK_CALL_FIH(boot_image_check_hook,
    3622:	4631      	mov	r1, r6
    3624:	4628      	mov	r0, r5
    3626:	f002 ffcd 	bl	65c4 <boot_image_check_hook>
    362a:	4604      	mov	r4, r0

0000362c <FIH_LABEL_FIH_CALL_END_762>:
                if (fih_eq(fih_rc, BOOT_HOOK_REGULAR))
    362c:	2801      	cmp	r0, #1
    362e:	d10d      	bne.n	364c <FIH_LABEL_FIH_CALL_END_796>

00003630 <FIH_LABEL_FIH_CALL_START_773>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    3630:	2340      	movs	r3, #64	; 0x40
    3632:	2100      	movs	r1, #0
    3634:	9301      	str	r3, [sp, #4]
    3636:	ab18      	add	r3, sp, #96	; 0x60
    3638:	9300      	str	r3, [sp, #0]
    363a:	4608      	mov	r0, r1
    363c:	e9cd 1103 	strd	r1, r1, [sp, #12]
    3640:	9b07      	ldr	r3, [sp, #28]
    3642:	9102      	str	r1, [sp, #8]
    3644:	aa08      	add	r2, sp, #32
    3646:	f7fc ffe3 	bl	610 <bootutil_img_validate>
    364a:	4604      	mov	r4, r0

0000364c <FIH_LABEL_FIH_CALL_END_796>:
            flash_area_close(fap);
    364c:	9807      	ldr	r0, [sp, #28]
    364e:	f007 feed 	bl	b42c <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    3652:	683b      	ldr	r3, [r7, #0]
    3654:	42a3      	cmp	r3, r4
    3656:	d131      	bne.n	36bc <FIH_LABEL_FIH_CALL_END_796+0x70>
            zcbor_map_start_encode(cbor_state, 20);
    3658:	2114      	movs	r1, #20
    365a:	4874      	ldr	r0, [pc, #464]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    365c:	f008 f989 	bl	b972 <zcbor_map_start_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "image");
    3660:	2105      	movs	r1, #5
    3662:	4877      	ldr	r0, [pc, #476]	; (3840 <FIH_LABEL_FIH_CALL_END_796+0x1f4>)
    3664:	f7ff ff44 	bl	34f0 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, image_index);
    3668:	4629      	mov	r1, r5
    366a:	4870      	ldr	r0, [pc, #448]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    366c:	f008 f963 	bl	b936 <zcbor_uint32_put>
            zcbor_tstr_put_lit_cast(cbor_state, "slot");
    3670:	2104      	movs	r1, #4
    3672:	4874      	ldr	r0, [pc, #464]	; (3844 <FIH_LABEL_FIH_CALL_END_796+0x1f8>)
    3674:	f7ff ff3c 	bl	34f0 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, slot);
    3678:	4631      	mov	r1, r6
    367a:	486c      	ldr	r0, [pc, #432]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    367c:	f008 f95b 	bl	b936 <zcbor_uint32_put>
            zcbor_tstr_put_lit_cast(cbor_state, "version");
    3680:	2107      	movs	r1, #7
    3682:	4871      	ldr	r0, [pc, #452]	; (3848 <FIH_LABEL_FIH_CALL_END_796+0x1fc>)
    3684:	f7ff ff34 	bl	34f0 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
   snprintf(dst, maxlen, "%hu.%hu.%hu.%u", (uint16_t)ver->iv_major,
    3688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    368a:	2140      	movs	r1, #64	; 0x40
    368c:	9302      	str	r3, [sp, #8]
    368e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    3692:	4a6e      	ldr	r2, [pc, #440]	; (384c <FIH_LABEL_FIH_CALL_END_796+0x200>)
    3694:	9301      	str	r3, [sp, #4]
    3696:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    369a:	a818      	add	r0, sp, #96	; 0x60
    369c:	9300      	str	r3, [sp, #0]
    369e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    36a2:	f000 ff59 	bl	4558 <snprintf>
            zcbor_tstr_encode_ptr(cbor_state, tmpbuf, strlen((char *)tmpbuf));
    36a6:	a818      	add	r0, sp, #96	; 0x60
    36a8:	f008 fa3e 	bl	bb28 <strlen>
    36ac:	4601      	mov	r1, r0
    36ae:	a818      	add	r0, sp, #96	; 0x60
    36b0:	f7ff ff1e 	bl	34f0 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_map_end_encode(cbor_state, 20);
    36b4:	2114      	movs	r1, #20
    36b6:	485d      	ldr	r0, [pc, #372]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    36b8:	f008 f979 	bl	b9ae <zcbor_map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    36bc:	2e00      	cmp	r6, #0
    36be:	d091      	beq.n	35e4 <boot_serial_input+0x80>
    IMAGES_ITER(image_index) {
    36c0:	b90d      	cbnz	r5, 36c6 <FIH_LABEL_FIH_CALL_END_796+0x7a>
    36c2:	4635      	mov	r5, r6
    36c4:	e78b      	b.n	35de <boot_serial_input+0x7a>
    zcbor_list_end_encode(cbor_state, 5);
    36c6:	2105      	movs	r1, #5
    36c8:	4858      	ldr	r0, [pc, #352]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    36ca:	f008 f961 	bl	b990 <zcbor_list_end_encode>
    zcbor_map_end_encode(cbor_state, 1);
    36ce:	2101      	movs	r1, #1
    36d0:	4856      	ldr	r0, [pc, #344]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    36d2:	f008 f96c 	bl	b9ae <zcbor_map_end_encode>
    boot_serial_output();
    36d6:	f7ff fe51 	bl	337c <boot_serial_output>
}
    36da:	b029      	add	sp, #164	; 0xa4
    36dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    36e0:	4629      	mov	r1, r5
    36e2:	4630      	mov	r0, r6
    36e4:	ab07      	add	r3, sp, #28
    36e6:	aa08      	add	r2, sp, #32
    const struct flash_area *fap = NULL;
    36e8:	9706      	str	r7, [sp, #24]
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    36ea:	f000 fa43 	bl	3b74 <cbor_decode_Upload>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    36ee:	4607      	mov	r7, r0
    36f0:	b300      	cbz	r0, 3734 <FIH_LABEL_FIH_CALL_END_796+0xe8>
        rc = MGMT_ERR_EINVAL;
    36f2:	2403      	movs	r4, #3
    zcbor_map_start_encode(cbor_state, 10);
    36f4:	210a      	movs	r1, #10
    36f6:	484d      	ldr	r0, [pc, #308]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    36f8:	f008 f93b 	bl	b972 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    36fc:	2102      	movs	r1, #2
    36fe:	4854      	ldr	r0, [pc, #336]	; (3850 <FIH_LABEL_FIH_CALL_END_796+0x204>)
    3700:	f7ff fef6 	bl	34f0 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc);
    3704:	4621      	mov	r1, r4
    3706:	4849      	ldr	r0, [pc, #292]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    3708:	f008 f911 	bl	b92e <zcbor_int32_put>
    if (rc == 0) {
    370c:	b944      	cbnz	r4, 3720 <FIH_LABEL_FIH_CALL_END_796+0xd4>
        zcbor_tstr_put_lit_cast(cbor_state, "off");
    370e:	2103      	movs	r1, #3
    3710:	4850      	ldr	r0, [pc, #320]	; (3854 <FIH_LABEL_FIH_CALL_END_796+0x208>)
    3712:	f7ff feed 	bl	34f0 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
        zcbor_uint32_put(cbor_state, curr_off);
    3716:	4b50      	ldr	r3, [pc, #320]	; (3858 <FIH_LABEL_FIH_CALL_END_796+0x20c>)
    3718:	4844      	ldr	r0, [pc, #272]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    371a:	6819      	ldr	r1, [r3, #0]
    371c:	f008 f90b 	bl	b936 <zcbor_uint32_put>
    zcbor_map_end_encode(cbor_state, 10);
    3720:	210a      	movs	r1, #10
    3722:	4842      	ldr	r0, [pc, #264]	; (382c <FIH_LABEL_FIH_CALL_END_796+0x1e0>)
    3724:	f008 f943 	bl	b9ae <zcbor_map_end_encode>
    boot_serial_output();
    3728:	f7ff fe28 	bl	337c <boot_serial_output>
    flash_area_close(fap);
    372c:	9806      	ldr	r0, [sp, #24]
    372e:	f007 fe7d 	bl	b42c <flash_area_close>
}
    3732:	e7d2      	b.n	36da <FIH_LABEL_FIH_CALL_END_796+0x8e>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    3734:	9b07      	ldr	r3, [sp, #28]
    3736:	429d      	cmp	r5, r3
    3738:	d1db      	bne.n	36f2 <FIH_LABEL_FIH_CALL_END_796+0xa6>
    size_t img_size_tmp = SIZE_MAX;     /* Temp variable for image size */
    373a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    for (int i = 0; i < upload._Upload_members_count; i++) {
    373e:	463a      	mov	r2, r7
    size_t img_chunk_off = SIZE_MAX;    /* Offset of image chunk within image  */
    3740:	4655      	mov	r5, sl
    size_t img_chunk_len = 0;           /* Length of received image chunk */
    3742:	46b9      	mov	r9, r7
    const uint8_t *img_chunk = NULL;    /* Pointer to buffer with received image chunk */
    3744:	46b8      	mov	r8, r7
    3746:	9817      	ldr	r0, [sp, #92]	; 0x5c
    3748:	ab08      	add	r3, sp, #32
    for (int i = 0; i < upload._Upload_members_count; i++) {
    374a:	4290      	cmp	r0, r2
    374c:	d11c      	bne.n	3788 <FIH_LABEL_FIH_CALL_END_796+0x13c>
    if (img_chunk_off == SIZE_MAX || img_chunk == NULL) {
    374e:	1c6b      	adds	r3, r5, #1
    3750:	d0cf      	beq.n	36f2 <FIH_LABEL_FIH_CALL_END_796+0xa6>
    3752:	f1b8 0f00 	cmp.w	r8, #0
    3756:	d0cc      	beq.n	36f2 <FIH_LABEL_FIH_CALL_END_796+0xa6>
    rc = flash_area_open(flash_area_id_from_direct_image(img_num), &fap);
    3758:	4638      	mov	r0, r7
    375a:	f7fc fef3 	bl	544 <flash_area_id_from_direct_image>
    375e:	a906      	add	r1, sp, #24
    3760:	b2c0      	uxtb	r0, r0
    3762:	f7ff fbbd 	bl	2ee0 <flash_area_open>
    if (rc) {
    3766:	4604      	mov	r4, r0
    3768:	2800      	cmp	r0, #0
    376a:	d1c2      	bne.n	36f2 <FIH_LABEL_FIH_CALL_END_796+0xa6>
    if (img_chunk_off == 0) {
    376c:	4e3a      	ldr	r6, [pc, #232]	; (3858 <FIH_LABEL_FIH_CALL_END_796+0x20c>)
    376e:	2d00      	cmp	r5, #0
    3770:	d17a      	bne.n	3868 <FIH_LABEL_FIH_CALL_END_796+0x21c>
        const size_t area_size = flash_area_get_size(fap);
    3772:	9806      	ldr	r0, [sp, #24]
        curr_off = 0;
    3774:	6034      	str	r4, [r6, #0]
	return (uint32_t)fa->fa_size;
    3776:	6885      	ldr	r5, [r0, #8]
        if (flash_area_sector_from_off(boot_status_off(fap), &status_sector)) {
    3778:	f006 ff2f 	bl	a5da <boot_status_off>
    377c:	4937      	ldr	r1, [pc, #220]	; (385c <FIH_LABEL_FIH_CALL_END_796+0x210>)
    377e:	f7fc feeb 	bl	558 <flash_area_sector_from_off>
    3782:	b1a0      	cbz	r0, 37ae <FIH_LABEL_FIH_CALL_END_796+0x162>
            rc = MGMT_ERR_EUNKNOWN;
    3784:	2401      	movs	r4, #1
    3786:	e7b5      	b.n	36f4 <FIH_LABEL_FIH_CALL_END_796+0xa8>
        switch(member->_Member_choice) {
    3788:	7a19      	ldrb	r1, [r3, #8]
    378a:	2903      	cmp	r1, #3
    378c:	d804      	bhi.n	3798 <FIH_LABEL_FIH_CALL_END_796+0x14c>
    378e:	e8df f001 	tbb	[pc, r1]
    3792:	0602      	.short	0x0602
    3794:	0c09      	.short	0x0c09
                img_num = member->_Member_image;
    3796:	681f      	ldr	r7, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    3798:	3201      	adds	r2, #1
    379a:	330c      	adds	r3, #12
    379c:	e7d5      	b.n	374a <FIH_LABEL_FIH_CALL_END_796+0xfe>
                img_chunk_len = member->_Member_data.len;
    379e:	e9d3 8900 	ldrd	r8, r9, [r3]
                break;
    37a2:	e7f9      	b.n	3798 <FIH_LABEL_FIH_CALL_END_796+0x14c>
                img_size_tmp = member->_Member_len;
    37a4:	f8d3 a000 	ldr.w	sl, [r3]
                break;
    37a8:	e7f6      	b.n	3798 <FIH_LABEL_FIH_CALL_END_796+0x14c>
                img_chunk_off = member->_Member_off;
    37aa:	681d      	ldr	r5, [r3, #0]
                break;
    37ac:	e7f4      	b.n	3798 <FIH_LABEL_FIH_CALL_END_796+0x14c>
        if (img_size_tmp > area_size) {
    37ae:	4555      	cmp	r5, sl
    37b0:	d39f      	bcc.n	36f2 <FIH_LABEL_FIH_CALL_END_796+0xa6>
        not_yet_erased = 0;
    37b2:	4b2b      	ldr	r3, [pc, #172]	; (3860 <FIH_LABEL_FIH_CALL_END_796+0x214>)
    37b4:	601c      	str	r4, [r3, #0]
        img_size = img_size_tmp;
    37b6:	4b2b      	ldr	r3, [pc, #172]	; (3864 <FIH_LABEL_FIH_CALL_END_796+0x218>)
    37b8:	f8c3 a000 	str.w	sl, [r3]
                                 curr_off + img_chunk_len - 1);
    37bc:	6832      	ldr	r2, [r6, #0]
    not_yet_erased = erase_range(fap, not_yet_erased,
    37be:	4d28      	ldr	r5, [pc, #160]	; (3860 <FIH_LABEL_FIH_CALL_END_796+0x214>)
                                 curr_off + img_chunk_len - 1);
    37c0:	3a01      	subs	r2, #1
    not_yet_erased = erase_range(fap, not_yet_erased,
    37c2:	6829      	ldr	r1, [r5, #0]
    37c4:	9806      	ldr	r0, [sp, #24]
    37c6:	444a      	add	r2, r9
    37c8:	f007 feb1 	bl	b52e <erase_range>
    if (not_yet_erased < 0) {
    37cc:	2800      	cmp	r0, #0
    not_yet_erased = erase_range(fap, not_yet_erased,
    37ce:	6028      	str	r0, [r5, #0]
    if (not_yet_erased < 0) {
    37d0:	db8f      	blt.n	36f2 <FIH_LABEL_FIH_CALL_END_796+0xa6>
    rem_bytes = img_chunk_len % flash_area_align(fap);
    37d2:	9806      	ldr	r0, [sp, #24]
    37d4:	f007 fe69 	bl	b4aa <flash_area_align>
    37d8:	fbb9 f3f0 	udiv	r3, r9, r0
    37dc:	fb03 9210 	mls	r2, r3, r0, r9
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    37e0:	6833      	ldr	r3, [r6, #0]
    img_chunk_len -= rem_bytes;
    37e2:	b2d5      	uxtb	r5, r2
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    37e4:	444b      	add	r3, r9
    img_chunk_len -= rem_bytes;
    37e6:	eba9 0505 	sub.w	r5, r9, r5
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    37ea:	f8df 9078 	ldr.w	r9, [pc, #120]	; 3864 <FIH_LABEL_FIH_CALL_END_796+0x218>
    if (flash_area_align(fap) > 1 &&
    37ee:	9806      	ldr	r0, [sp, #24]
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    37f0:	f8d9 1000 	ldr.w	r1, [r9]
    37f4:	428b      	cmp	r3, r1
    37f6:	bf38      	it	cc
    37f8:	2200      	movcc	r2, #0
    37fa:	fa5f fa82 	uxtb.w	sl, r2
    if (flash_area_align(fap) > 1 &&
    37fe:	f007 fe54 	bl	b4aa <flash_area_align>
    3802:	2801      	cmp	r0, #1
    3804:	d906      	bls.n	3814 <FIH_LABEL_FIH_CALL_END_796+0x1c8>
        (((size_t)img_chunk) & (flash_area_align(fap) - 1)) != 0) {
    3806:	9806      	ldr	r0, [sp, #24]
    3808:	f007 fe4f 	bl	b4aa <flash_area_align>
    380c:	3801      	subs	r0, #1
    if (flash_area_align(fap) > 1 &&
    380e:	ea18 0f00 	tst.w	r8, r0
    3812:	d175      	bne.n	3900 <FIH_LABEL_FIH_CALL_END_796+0x2b4>
        rc = flash_area_write(fap, curr_off, img_chunk, img_chunk_len);
    3814:	462b      	mov	r3, r5
    3816:	4642      	mov	r2, r8
    3818:	6831      	ldr	r1, [r6, #0]
    381a:	9806      	ldr	r0, [sp, #24]
    381c:	f007 fe1c 	bl	b458 <flash_area_write>
    if (rc == 0 && rem_bytes) {
    3820:	2800      	cmp	r0, #0
    3822:	d050      	beq.n	38c6 <FIH_LABEL_FIH_CALL_END_796+0x27a>
    3824:	e765      	b.n	36f2 <FIH_LABEL_FIH_CALL_END_796+0xa6>
    3826:	bf00      	nop
    3828:	20013770 	.word	0x20013770
    382c:	20013740 	.word	0x20013740
    3830:	0000f206 	.word	0x0000f206
    3834:	20002000 	.word	0x20002000
    3838:	96f3b83d 	.word	0x96f3b83d
    383c:	20002740 	.word	0x20002740
    3840:	0000f20d 	.word	0x0000f20d
    3844:	0000f213 	.word	0x0000f213
    3848:	0000f218 	.word	0x0000f218
    384c:	0000f220 	.word	0x0000f220
    3850:	0000ef57 	.word	0x0000ef57
    3854:	0000f22f 	.word	0x0000f22f
    3858:	2001373c 	.word	0x2001373c
    385c:	20013734 	.word	0x20013734
    3860:	20013730 	.word	0x20013730
    3864:	2001372c 	.word	0x2001372c
    } else if (img_chunk_off != curr_off) {
    3868:	6833      	ldr	r3, [r6, #0]
    386a:	42ab      	cmp	r3, r5
    386c:	f47f af42 	bne.w	36f4 <FIH_LABEL_FIH_CALL_END_796+0xa8>
    } else if (curr_off + img_chunk_len > img_size) {
    3870:	4b46      	ldr	r3, [pc, #280]	; (398c <FIH_LABEL_FIH_CALL_END_796+0x340>)
    3872:	444d      	add	r5, r9
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	429d      	cmp	r5, r3
    3878:	d9a0      	bls.n	37bc <FIH_LABEL_FIH_CALL_END_796+0x170>
    387a:	e73a      	b.n	36f2 <FIH_LABEL_FIH_CALL_END_796+0xa6>
            if (write_size > img_chunk_len) {
    387c:	45ab      	cmp	fp, r5
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    387e:	9806      	ldr	r0, [sp, #24]
                write_size = img_chunk_len;
    3880:	bf88      	it	hi
    3882:	fa5f fb85 	uxtbhi.w	fp, r5
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    3886:	f007 fe17 	bl	b4b8 <flash_area_erased_val>
    388a:	2240      	movs	r2, #64	; 0x40
    388c:	4601      	mov	r1, r0
    388e:	a818      	add	r0, sp, #96	; 0x60
    3890:	f008 f983 	bl	bb9a <memset>
            memcpy(wbs_aligned, img_chunk, write_size);
    3894:	465a      	mov	r2, fp
    3896:	4641      	mov	r1, r8
    3898:	a818      	add	r0, sp, #96	; 0x60
    389a:	f008 f973 	bl	bb84 <memcpy>
            rc = flash_area_write(fap, curr_off, wbs_aligned, write_size);
    389e:	465b      	mov	r3, fp
    38a0:	6831      	ldr	r1, [r6, #0]
    38a2:	9806      	ldr	r0, [sp, #24]
    38a4:	aa18      	add	r2, sp, #96	; 0x60
    38a6:	f007 fdd7 	bl	b458 <flash_area_write>
            if (rc != 0) {
    38aa:	2800      	cmp	r0, #0
    38ac:	f47f af21 	bne.w	36f2 <FIH_LABEL_FIH_CALL_END_796+0xa6>
            curr_off += write_size;
    38b0:	6833      	ldr	r3, [r6, #0]
            img_chunk += write_size;
    38b2:	44d8      	add	r8, fp
            curr_off += write_size;
    38b4:	445b      	add	r3, fp
    38b6:	6033      	str	r3, [r6, #0]
            img_chunk_len -= write_size;
    38b8:	eba5 050b 	sub.w	r5, r5, fp
        while (img_chunk_len >= flash_area_align(fap)) {
    38bc:	9806      	ldr	r0, [sp, #24]
    38be:	f007 fdf4 	bl	b4aa <flash_area_align>
    38c2:	4285      	cmp	r5, r0
    38c4:	d2da      	bcs.n	387c <FIH_LABEL_FIH_CALL_END_796+0x230>
    if (rc == 0 && rem_bytes) {
    38c6:	f1ba 0f00 	cmp.w	sl, #0
    38ca:	d11c      	bne.n	3906 <FIH_LABEL_FIH_CALL_END_796+0x2ba>
        curr_off += img_chunk_len + rem_bytes;
    38cc:	6833      	ldr	r3, [r6, #0]
        if (curr_off == img_size) {
    38ce:	f8d9 2000 	ldr.w	r2, [r9]
        curr_off += img_chunk_len + rem_bytes;
    38d2:	4453      	add	r3, sl
    38d4:	442b      	add	r3, r5
        if (curr_off == img_size) {
    38d6:	4293      	cmp	r3, r2
        curr_off += img_chunk_len + rem_bytes;
    38d8:	6033      	str	r3, [r6, #0]
        if (curr_off == img_size) {
    38da:	f47f af0b 	bne.w	36f4 <FIH_LABEL_FIH_CALL_END_796+0xa8>
	return fs->fs_off;
    38de:	4b2c      	ldr	r3, [pc, #176]	; (3990 <FIH_LABEL_FIH_CALL_END_796+0x344>)
            if (erase_range(fap, start, start) < 0) {
    38e0:	9806      	ldr	r0, [sp, #24]
    38e2:	681a      	ldr	r2, [r3, #0]
    38e4:	4611      	mov	r1, r2
    38e6:	f007 fe22 	bl	b52e <erase_range>
    38ea:	2800      	cmp	r0, #0
    38ec:	f6ff af4a 	blt.w	3784 <FIH_LABEL_FIH_CALL_END_796+0x138>
            rc = BOOT_HOOK_CALL(boot_serial_uploaded_hook, 0, img_num, fap,
    38f0:	4638      	mov	r0, r7
    38f2:	f8d9 2000 	ldr.w	r2, [r9]
    38f6:	9906      	ldr	r1, [sp, #24]
    38f8:	f008 fc5e 	bl	c1b8 <boot_serial_uploaded_hook>
    38fc:	4604      	mov	r4, r0
            if (rc) {
    38fe:	e6f9      	b.n	36f4 <FIH_LABEL_FIH_CALL_END_796+0xa8>
        uint8_t write_size = MCUBOOT_SERIAL_UNALIGNED_BUFFER_SIZE;
    3900:	f04f 0b40 	mov.w	fp, #64	; 0x40
    3904:	e7da      	b.n	38bc <FIH_LABEL_FIH_CALL_END_796+0x270>
        memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    3906:	9806      	ldr	r0, [sp, #24]
    3908:	f007 fdd6 	bl	b4b8 <flash_area_erased_val>
    390c:	2208      	movs	r2, #8
    390e:	4601      	mov	r1, r0
    3910:	a818      	add	r0, sp, #96	; 0x60
    3912:	f008 f942 	bl	bb9a <memset>
        memcpy(wbs_aligned, img_chunk + img_chunk_len, rem_bytes);
    3916:	4652      	mov	r2, sl
    3918:	eb08 0105 	add.w	r1, r8, r5
    391c:	a818      	add	r0, sp, #96	; 0x60
    391e:	f008 f931 	bl	bb84 <memcpy>
        rc = flash_area_write(fap, curr_off + img_chunk_len, wbs_aligned,
    3922:	f8dd 8018 	ldr.w	r8, [sp, #24]
    3926:	6831      	ldr	r1, [r6, #0]
    3928:	4640      	mov	r0, r8
    392a:	eb05 0b01 	add.w	fp, r5, r1
    392e:	f007 fdbc 	bl	b4aa <flash_area_align>
    3932:	4659      	mov	r1, fp
    3934:	4603      	mov	r3, r0
    3936:	aa18      	add	r2, sp, #96	; 0x60
    3938:	4640      	mov	r0, r8
    393a:	f007 fd8d 	bl	b458 <flash_area_write>
    if (rc == 0) {
    393e:	2800      	cmp	r0, #0
    3940:	f47f aed7 	bne.w	36f2 <FIH_LABEL_FIH_CALL_END_796+0xa6>
    3944:	e7c2      	b.n	38cc <FIH_LABEL_FIH_CALL_END_796+0x280>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    3946:	b998      	cbnz	r0, 3970 <FIH_LABEL_FIH_CALL_END_796+0x324>
        switch (hdr->nh_id) {
    3948:	79e3      	ldrb	r3, [r4, #7]
    394a:	2b01      	cmp	r3, #1
    394c:	f43f ae31 	beq.w	35b2 <boot_serial_input+0x4e>
    3950:	2b05      	cmp	r3, #5
    3952:	d003      	beq.n	395c <FIH_LABEL_FIH_CALL_END_796+0x310>
    3954:	2b00      	cmp	r3, #0
    3956:	f47f ae2b 	bne.w	35b0 <boot_serial_input+0x4c>
    395a:	e6be      	b.n	36da <FIH_LABEL_FIH_CALL_END_796+0x8e>
    bs_rc_rsp(0);
    395c:	f7ff fdd4 	bl	3508 <bs_rc_rsp>
	return z_impl_k_sleep(timeout);
    3960:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    3964:	2100      	movs	r1, #0
    3966:	f006 f8e3 	bl	9b30 <z_impl_k_sleep>
    sys_reboot(SYS_REBOOT_COLD);
    396a:	2001      	movs	r0, #1
    396c:	f007 fbe1 	bl	b132 <sys_reboot>
        if (bs_peruser_system_specific(hdr, buf, len, cbor_state) == 0) {
    3970:	462a      	mov	r2, r5
    3972:	4631      	mov	r1, r6
    3974:	4620      	mov	r0, r4
    3976:	4b07      	ldr	r3, [pc, #28]	; (3994 <FIH_LABEL_FIH_CALL_END_796+0x348>)
    3978:	f7fc fe06 	bl	588 <bs_peruser_system_specific>
    397c:	2800      	cmp	r0, #0
    397e:	f47f aeac 	bne.w	36da <FIH_LABEL_FIH_CALL_END_796+0x8e>
}
    3982:	b029      	add	sp, #164	; 0xa4
    3984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            boot_serial_output();
    3988:	f7ff bcf8 	b.w	337c <boot_serial_output>
    398c:	2001372c 	.word	0x2001372c
    3990:	20013734 	.word	0x20013734
    3994:	20013740 	.word	0x20013740

00003998 <boot_serial_start>:
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    bs_entry = true;
    3998:	2301      	movs	r3, #1
{
    399a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int dec_off = 0;
    399e:	2500      	movs	r5, #0
{
    39a0:	4606      	mov	r6, r0
    bs_entry = true;
    39a2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 3a64 <boot_serial_start+0xcc>
    39a6:	4c30      	ldr	r4, [pc, #192]	; (3a68 <boot_serial_start+0xd0>)
    39a8:	f888 3000 	strb.w	r3, [r8]
    boot_uf = f;
    39ac:	4b2f      	ldr	r3, [pc, #188]	; (3a6c <boot_serial_start+0xd4>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    39ae:	4f30      	ldr	r7, [pc, #192]	; (3a70 <boot_serial_start+0xd8>)
    int dec_off = 0;
    39b0:	9500      	str	r5, [sp, #0]
    boot_uf = f;
    39b2:	6018      	str	r0, [r3, #0]
    while (timeout_in_ms > 0 || bs_entry) {
    39b4:	f898 3000 	ldrb.w	r3, [r8]
    39b8:	b913      	cbnz	r3, 39c0 <boot_serial_start+0x28>
    boot_serial_read_console(f,0);
}
    39ba:	b002      	add	sp, #8
    39bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39c0:	4b2c      	ldr	r3, [pc, #176]	; (3a74 <boot_serial_start+0xdc>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    39c2:	f5c5 6180 	rsb	r1, r5, #1024	; 0x400
    39c6:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
    39ca:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
    39ce:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
    39d2:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
    39d6:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    39da:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
    39de:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
    39e2:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
    39e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    39ea:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
    39ee:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
    39f2:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
    39f6:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
    39fa:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    39fe:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
    3a02:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
    3a06:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
    3a0a:	6833      	ldr	r3, [r6, #0]
    3a0c:	aa01      	add	r2, sp, #4
    3a0e:	3101      	adds	r1, #1
    3a10:	1978      	adds	r0, r7, r5
    3a12:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    3a14:	2800      	cmp	r0, #0
    3a16:	9b01      	ldr	r3, [sp, #4]
    3a18:	dc01      	bgt.n	3a1e <boot_serial_start+0x86>
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	d0ca      	beq.n	39b4 <boot_serial_start+0x1c>
        off += rc;
    3a1e:	4405      	add	r5, r0
        if (!full_line) {
    3a20:	b92b      	cbnz	r3, 3a2e <boot_serial_start+0x96>
            if (off == max_input) {
    3a22:	f240 4301 	movw	r3, #1025	; 0x401
    3a26:	429d      	cmp	r5, r3
    3a28:	d1c4      	bne.n	39b4 <boot_serial_start+0x1c>
                off = 0;
    3a2a:	2500      	movs	r5, #0
    3a2c:	e7c2      	b.n	39b4 <boot_serial_start+0x1c>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    3a2e:	783b      	ldrb	r3, [r7, #0]
    3a30:	2b06      	cmp	r3, #6
    3a32:	d109      	bne.n	3a48 <boot_serial_start+0xb0>
    3a34:	787b      	ldrb	r3, [r7, #1]
    3a36:	2b09      	cmp	r3, #9
    3a38:	d10b      	bne.n	3a52 <boot_serial_start+0xba>
            dec_off = 0;
    3a3a:	2300      	movs	r3, #0
    3a3c:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    3a3e:	4669      	mov	r1, sp
    3a40:	1ea8      	subs	r0, r5, #2
    3a42:	f7ff fd21 	bl	3488 <boot_serial_in_dec.constprop.0>
    3a46:	e004      	b.n	3a52 <boot_serial_start+0xba>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    3a48:	2b04      	cmp	r3, #4
    3a4a:	d102      	bne.n	3a52 <boot_serial_start+0xba>
    3a4c:	787b      	ldrb	r3, [r7, #1]
    3a4e:	2b14      	cmp	r3, #20
    3a50:	d0f5      	beq.n	3a3e <boot_serial_start+0xa6>
        if (rc == 1) {
    3a52:	2801      	cmp	r0, #1
    3a54:	d1e9      	bne.n	3a2a <boot_serial_start+0x92>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    3a56:	9900      	ldr	r1, [sp, #0]
    3a58:	4807      	ldr	r0, [pc, #28]	; (3a78 <boot_serial_start+0xe0>)
    3a5a:	3902      	subs	r1, #2
    3a5c:	f7ff fd82 	bl	3564 <boot_serial_input>
    3a60:	e7e3      	b.n	3a2a <boot_serial_start+0x92>
    3a62:	bf00      	nop
    3a64:	20015ffb 	.word	0x20015ffb
    3a68:	6e524635 	.word	0x6e524635
    3a6c:	20013774 	.word	0x20013774
    3a70:	200163fd 	.word	0x200163fd
    3a74:	50018000 	.word	0x50018000
    3a78:	20015ffe 	.word	0x20015ffe

00003a7c <decode_repeated_Upload_members>:
	return tmp_result;
}

static bool decode_repeated_Upload_members(
		zcbor_state_t *state, struct Upload_members *result)
{
    3a7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3a7e:	4604      	mov	r4, r0
    3a80:	460d      	mov	r5, r1
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    3a82:	f007 ffe9 	bl	ba58 <zcbor_union_start_code>
    3a86:	2800      	cmp	r0, #0
    3a88:	d068      	beq.n	3b5c <decode_repeated_Upload_members+0xe0>
    3a8a:	4b35      	ldr	r3, [pc, #212]	; (3b60 <decode_repeated_Upload_members+0xe4>)
    3a8c:	4669      	mov	r1, sp
    3a8e:	9300      	str	r3, [sp, #0]
    3a90:	2305      	movs	r3, #5
    3a92:	4620      	mov	r0, r4
    3a94:	9301      	str	r3, [sp, #4]
    3a96:	f007 feb5 	bl	b804 <zcbor_tstr_expect>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    3a9a:	b160      	cbz	r0, 3ab6 <decode_repeated_Upload_members+0x3a>
	&& (zcbor_int32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    3a9c:	4629      	mov	r1, r5
    3a9e:	4620      	mov	r0, r4
    3aa0:	f007 fe91 	bl	b7c6 <zcbor_int32_decode>
    3aa4:	b138      	cbz	r0, 3ab6 <decode_repeated_Upload_members+0x3a>
    3aa6:	2300      	movs	r3, #0
    3aa8:	722b      	strb	r3, [r5, #8]
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    3aaa:	4620      	mov	r0, r4
    3aac:	f007 ffdb 	bl	ba66 <zcbor_union_end_code>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    3ab0:	2001      	movs	r0, #1

	if (!tmp_result)
		zcbor_trace();

	return tmp_result;
}
    3ab2:	b002      	add	sp, #8
    3ab4:	bd70      	pop	{r4, r5, r6, pc}
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"data", tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    3ab6:	4620      	mov	r0, r4
    3ab8:	f007 ffd1 	bl	ba5e <zcbor_union_elem_code>
    3abc:	b178      	cbz	r0, 3ade <decode_repeated_Upload_members+0x62>
    3abe:	4b29      	ldr	r3, [pc, #164]	; (3b64 <decode_repeated_Upload_members+0xe8>)
    3ac0:	4669      	mov	r1, sp
    3ac2:	9300      	str	r3, [sp, #0]
    3ac4:	2304      	movs	r3, #4
    3ac6:	4620      	mov	r0, r4
    3ac8:	9301      	str	r3, [sp, #4]
    3aca:	f007 fe9b 	bl	b804 <zcbor_tstr_expect>
    3ace:	b130      	cbz	r0, 3ade <decode_repeated_Upload_members+0x62>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    3ad0:	4629      	mov	r1, r5
    3ad2:	4620      	mov	r0, r4
    3ad4:	f007 fe93 	bl	b7fe <zcbor_bstr_decode>
    3ad8:	b108      	cbz	r0, 3ade <decode_repeated_Upload_members+0x62>
    3ada:	2301      	movs	r3, #1
    3adc:	e7e4      	b.n	3aa8 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"len", tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    3ade:	4620      	mov	r0, r4
    3ae0:	f007 ffbd 	bl	ba5e <zcbor_union_elem_code>
    3ae4:	b178      	cbz	r0, 3b06 <decode_repeated_Upload_members+0x8a>
    3ae6:	4b20      	ldr	r3, [pc, #128]	; (3b68 <decode_repeated_Upload_members+0xec>)
    3ae8:	4669      	mov	r1, sp
    3aea:	9300      	str	r3, [sp, #0]
    3aec:	2303      	movs	r3, #3
    3aee:	4620      	mov	r0, r4
    3af0:	9301      	str	r3, [sp, #4]
    3af2:	f007 fe87 	bl	b804 <zcbor_tstr_expect>
    3af6:	b130      	cbz	r0, 3b06 <decode_repeated_Upload_members+0x8a>
	&& (zcbor_int32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    3af8:	4629      	mov	r1, r5
    3afa:	4620      	mov	r0, r4
    3afc:	f007 fe63 	bl	b7c6 <zcbor_int32_decode>
    3b00:	b108      	cbz	r0, 3b06 <decode_repeated_Upload_members+0x8a>
    3b02:	2302      	movs	r3, #2
    3b04:	e7d0      	b.n	3aa8 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"off", tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    3b06:	4620      	mov	r0, r4
    3b08:	f007 ffa9 	bl	ba5e <zcbor_union_elem_code>
    3b0c:	b178      	cbz	r0, 3b2e <decode_repeated_Upload_members+0xb2>
    3b0e:	2603      	movs	r6, #3
    3b10:	4b16      	ldr	r3, [pc, #88]	; (3b6c <decode_repeated_Upload_members+0xf0>)
    3b12:	4669      	mov	r1, sp
    3b14:	4620      	mov	r0, r4
    3b16:	9300      	str	r3, [sp, #0]
    3b18:	9601      	str	r6, [sp, #4]
    3b1a:	f007 fe73 	bl	b804 <zcbor_tstr_expect>
    3b1e:	b130      	cbz	r0, 3b2e <decode_repeated_Upload_members+0xb2>
	&& (zcbor_int32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    3b20:	4629      	mov	r1, r5
    3b22:	4620      	mov	r0, r4
    3b24:	f007 fe4f 	bl	b7c6 <zcbor_int32_decode>
    3b28:	b108      	cbz	r0, 3b2e <decode_repeated_Upload_members+0xb2>
    3b2a:	722e      	strb	r6, [r5, #8]
    3b2c:	e7bd      	b.n	3aaa <decode_repeated_Upload_members+0x2e>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    3b2e:	4620      	mov	r0, r4
    3b30:	f007 ff95 	bl	ba5e <zcbor_union_elem_code>
    3b34:	b178      	cbz	r0, 3b56 <decode_repeated_Upload_members+0xda>
    3b36:	4b0e      	ldr	r3, [pc, #56]	; (3b70 <decode_repeated_Upload_members+0xf4>)
    3b38:	4669      	mov	r1, sp
    3b3a:	9300      	str	r3, [sp, #0]
    3b3c:	2303      	movs	r3, #3
    3b3e:	4620      	mov	r0, r4
    3b40:	9301      	str	r3, [sp, #4]
    3b42:	f007 fe5f 	bl	b804 <zcbor_tstr_expect>
    3b46:	b130      	cbz	r0, 3b56 <decode_repeated_Upload_members+0xda>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    3b48:	4629      	mov	r1, r5
    3b4a:	4620      	mov	r0, r4
    3b4c:	f007 fe57 	bl	b7fe <zcbor_bstr_decode>
    3b50:	b108      	cbz	r0, 3b56 <decode_repeated_Upload_members+0xda>
    3b52:	2304      	movs	r3, #4
    3b54:	e7a8      	b.n	3aa8 <decode_repeated_Upload_members+0x2c>
    3b56:	4620      	mov	r0, r4
    3b58:	f007 ff85 	bl	ba66 <zcbor_union_end_code>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    3b5c:	2000      	movs	r0, #0
    3b5e:	e7a8      	b.n	3ab2 <decode_repeated_Upload_members+0x36>
    3b60:	0000f20d 	.word	0x0000f20d
    3b64:	0000f233 	.word	0x0000f233
    3b68:	0000f238 	.word	0x0000f238
    3b6c:	0000f22f 	.word	0x0000f22f
    3b70:	0000f23c 	.word	0x0000f23c

00003b74 <cbor_decode_Upload>:

int cbor_decode_Upload(
		const uint8_t *payload, size_t payload_len,
		struct Upload *result,
		size_t *payload_len_out)
{
    3b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	zcbor_state_t states[4];

	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    3b78:	f04f 0901 	mov.w	r9, #1
{
    3b7c:	b09d      	sub	sp, #116	; 0x74
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    3b7e:	ac04      	add	r4, sp, #16
{
    3b80:	4607      	mov	r7, r0
    3b82:	460e      	mov	r6, r1
    3b84:	4690      	mov	r8, r2
    3b86:	461d      	mov	r5, r3
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    3b88:	4602      	mov	r2, r0
    3b8a:	460b      	mov	r3, r1
    3b8c:	4620      	mov	r0, r4
    3b8e:	2104      	movs	r1, #4
    3b90:	f8cd 9000 	str.w	r9, [sp]
    3b94:	f007 ff6b 	bl	ba6e <zcbor_new_state>
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    3b98:	4620      	mov	r0, r4
    3b9a:	f007 fe36 	bl	b80a <zcbor_map_start_decode>
    3b9e:	b170      	cbz	r0, 3bbe <cbor_decode_Upload+0x4a>
    3ba0:	230c      	movs	r3, #12
    3ba2:	2105      	movs	r1, #5
    3ba4:	e9cd 8301 	strd	r8, r3, [sp, #4]
    3ba8:	4648      	mov	r0, r9
    3baa:	4b11      	ldr	r3, [pc, #68]	; (3bf0 <cbor_decode_Upload+0x7c>)
    3bac:	9400      	str	r4, [sp, #0]
    3bae:	f108 023c 	add.w	r2, r8, #60	; 0x3c
    3bb2:	f007 fe4a 	bl	b84a <zcbor_multi_decode>
    3bb6:	b960      	cbnz	r0, 3bd2 <cbor_decode_Upload+0x5e>
    3bb8:	4620      	mov	r0, r4
    3bba:	f007 fe41 	bl	b840 <zcbor_list_map_end_force_decode>
/** Return the current error state, replacing it with SUCCESS. */
static inline int zcbor_pop_error(zcbor_state_t *state)
{
	int err = state->constant_state->error;

	state->constant_state->error = ZCBOR_SUCCESS;
    3bbe:	2200      	movs	r2, #0
	int err = state->constant_state->error;
    3bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3bc2:	68d8      	ldr	r0, [r3, #12]
	state->constant_state->error = ZCBOR_SUCCESS;
    3bc4:	60da      	str	r2, [r3, #12]
				(size_t)states[0].payload - (size_t)payload);
	}

	if (!ret) {
		int status = zcbor_pop_error(states);
		return (status == ZCBOR_SUCCESS) ? ZCBOR_ERR_UNKNOWN : status;
    3bc6:	4290      	cmp	r0, r2
    3bc8:	bf08      	it	eq
    3bca:	201f      	moveq	r0, #31
	}
	return ZCBOR_SUCCESS;
}
    3bcc:	b01d      	add	sp, #116	; 0x74
    3bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    3bd2:	4620      	mov	r0, r4
    3bd4:	f007 fe32 	bl	b83c <zcbor_map_end_decode>
    3bd8:	2800      	cmp	r0, #0
    3bda:	d0f0      	beq.n	3bbe <cbor_decode_Upload+0x4a>
	if (ret && (payload_len_out != NULL)) {
    3bdc:	b90d      	cbnz	r5, 3be2 <cbor_decode_Upload+0x6e>
	return ZCBOR_SUCCESS;
    3bde:	2000      	movs	r0, #0
    3be0:	e7f4      	b.n	3bcc <cbor_decode_Upload+0x58>
		*payload_len_out = MIN(payload_len,
    3be2:	9b04      	ldr	r3, [sp, #16]
    3be4:	1bdb      	subs	r3, r3, r7
    3be6:	42b3      	cmp	r3, r6
    3be8:	bf94      	ite	ls
    3bea:	602b      	strls	r3, [r5, #0]
    3bec:	602e      	strhi	r6, [r5, #0]
    3bee:	e7f6      	b.n	3bde <cbor_decode_Upload+0x6a>
    3bf0:	00003a7d 	.word	0x00003a7d

00003bf4 <get_result_len>:
	return true;
}


static uint_fast32_t get_result_len(const void *const input, uint_fast32_t max_result_len)
{
    3bf4:	4602      	mov	r2, r0

	for (; len > 0; len--) {
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
    3bf6:	1e4b      	subs	r3, r1, #1
{
    3bf8:	4608      	mov	r0, r1
		if (u8_result[len - 1] != 0) {
    3bfa:	5cd1      	ldrb	r1, [r2, r3]
    3bfc:	b151      	cbz	r1, 3c14 <get_result_len+0x20>
			break;
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    3bfe:	2802      	cmp	r0, #2
    3c00:	d90f      	bls.n	3c22 <get_result_len+0x2e>
    3c02:	4b08      	ldr	r3, [pc, #32]	; (3c24 <get_result_len+0x30>)
    3c04:	4403      	add	r3, r0
    3c06:	2001      	movs	r0, #1
    3c08:	f813 3c02 	ldrb.w	r3, [r3, #-2]
    3c0c:	4098      	lsls	r0, r3
    3c0e:	b2c0      	uxtb	r0, r0
    3c10:	4770      	bx	lr
	for (; len > 0; len--) {
    3c12:	b12b      	cbz	r3, 3c20 <get_result_len+0x2c>
		if (u8_result[len - 1] != 0) {
    3c14:	4618      	mov	r0, r3
    3c16:	3b01      	subs	r3, #1
    3c18:	5cd1      	ldrb	r1, [r2, r3]
    3c1a:	2900      	cmp	r1, #0
    3c1c:	d0f9      	beq.n	3c12 <get_result_len+0x1e>
    3c1e:	e7ee      	b.n	3bfe <get_result_len+0xa>
    3c20:	4618      	mov	r0, r3
}
    3c22:	4770      	bx	lr
    3c24:	0000f240 	.word	0x0000f240

00003c28 <value_encode>:
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
		const void *const input, uint_fast32_t max_result_len)
{
    3c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c2a:	4605      	mov	r5, r0
    3c2c:	460f      	mov	r7, r1
	zcbor_assert(max_result_len != 0, "0-length result not supported.\r\n");

	uint_fast32_t result_len = get_result_len(input, max_result_len);
    3c2e:	4610      	mov	r0, r2
    3c30:	4619      	mov	r1, r3
{
    3c32:	4616      	mov	r6, r2
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    3c34:	f7ff ffde 	bl	3bf4 <get_result_len>
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    3c38:	2801      	cmp	r0, #1
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    3c3a:	4604      	mov	r4, r0
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    3c3c:	682a      	ldr	r2, [r5, #0]
    3c3e:	68e9      	ldr	r1, [r5, #12]
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    3c40:	d11c      	bne.n	3c7c <value_encode+0x54>
    3c42:	7833      	ldrb	r3, [r6, #0]
    3c44:	2b17      	cmp	r3, #23
    3c46:	d904      	bls.n	3c52 <value_encode+0x2a>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    3c48:	1c93      	adds	r3, r2, #2
    3c4a:	4299      	cmp	r1, r3
    3c4c:	d31a      	bcc.n	3c84 <value_encode+0x5c>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    3c4e:	2300      	movs	r3, #0
    3c50:	e025      	b.n	3c9e <value_encode+0x76>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    3c52:	1c50      	adds	r0, r2, #1
    3c54:	4281      	cmp	r1, r0
    3c56:	d315      	bcc.n	3c84 <value_encode+0x5c>
		return 0;
    3c58:	2400      	movs	r4, #0
	ZCBOR_CHECK_PAYLOAD();
    3c5a:	428a      	cmp	r2, r1
    3c5c:	d212      	bcs.n	3c84 <value_encode+0x5c>
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    3c5e:	1c51      	adds	r1, r2, #1
    3c60:	f003 031f 	and.w	r3, r3, #31
    3c64:	6029      	str	r1, [r5, #0]
    3c66:	ea43 1147 	orr.w	r1, r3, r7, lsl #5
    3c6a:	7011      	strb	r1, [r2, #0]
	for (; encoded_len > 0; encoded_len--) {
    3c6c:	4434      	add	r4, r6
    3c6e:	42b4      	cmp	r4, r6
    3c70:	d118      	bne.n	3ca4 <value_encode+0x7c>
	state->elem_count++;
    3c72:	68ab      	ldr	r3, [r5, #8]
	return true;
    3c74:	2001      	movs	r0, #1
	state->elem_count++;
    3c76:	3301      	adds	r3, #1
    3c78:	60ab      	str	r3, [r5, #8]
	return true;
    3c7a:	e007      	b.n	3c8c <value_encode+0x64>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    3c7c:	1c43      	adds	r3, r0, #1
    3c7e:	4413      	add	r3, r2
    3c80:	4299      	cmp	r1, r3
    3c82:	d204      	bcs.n	3c8e <value_encode+0x66>
{
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
#endif
	{
		state->constant_state->error = err;
    3c84:	2208      	movs	r2, #8
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    3c86:	2000      	movs	r0, #0
    3c88:	696b      	ldr	r3, [r5, #20]
    3c8a:	60da      	str	r2, [r3, #12]
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
}
    3c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    3c8e:	b908      	cbnz	r0, 3c94 <value_encode+0x6c>
	if (!encode_header_byte(state, major_type,
    3c90:	7833      	ldrb	r3, [r6, #0]
    3c92:	e7e2      	b.n	3c5a <value_encode+0x32>
	switch(val) {
    3c94:	1e83      	subs	r3, r0, #2
    3c96:	2b06      	cmp	r3, #6
    3c98:	d8d9      	bhi.n	3c4e <value_encode+0x26>
    3c9a:	4806      	ldr	r0, [pc, #24]	; (3cb4 <value_encode+0x8c>)
    3c9c:	5cc3      	ldrb	r3, [r0, r3]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    3c9e:	3318      	adds	r3, #24
    3ca0:	b2db      	uxtb	r3, r3
    3ca2:	e7da      	b.n	3c5a <value_encode+0x32>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
    3ca4:	682b      	ldr	r3, [r5, #0]
    3ca6:	1c5a      	adds	r2, r3, #1
    3ca8:	602a      	str	r2, [r5, #0]
    3caa:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
    3cae:	701a      	strb	r2, [r3, #0]
	for (; encoded_len > 0; encoded_len--) {
    3cb0:	e7dd      	b.n	3c6e <value_encode+0x46>
    3cb2:	bf00      	nop
    3cb4:	0000f240 	.word	0x0000f240

00003cb8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3cb8:	4901      	ldr	r1, [pc, #4]	; (3cc0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3cba:	2210      	movs	r2, #16
	str	r2, [r1]
    3cbc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3cbe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3cc0:	e000ed10 	.word	0xe000ed10

00003cc4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3cc4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3cc6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3cc8:	f380 8811 	msr	BASEPRI, r0
	isb
    3ccc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3cd0:	b501      	push	{r0, lr}
    3cd2:	f7fd ffd1 	bl	1c78 <z_arm_on_enter_cpu_idle>
    3cd6:	2800      	cmp	r0, #0
    3cd8:	d002      	beq.n	3ce0 <_skip_0>
    3cda:	f3bf 8f4f 	dsb	sy
    3cde:	bf30      	wfi

00003ce0 <_skip_0>:
    3ce0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3ce4:	b662      	cpsie	i
	isb
    3ce6:	f3bf 8f6f 	isb	sy

	bx	lr
    3cea:	4770      	bx	lr

00003cec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3cec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3cee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3cf0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    3cf4:	b501      	push	{r0, lr}
    3cf6:	f7fd ffbf 	bl	1c78 <z_arm_on_enter_cpu_idle>
    3cfa:	2800      	cmp	r0, #0
    3cfc:	d002      	beq.n	3d04 <_skip_1>
    3cfe:	f3bf 8f4f 	dsb	sy
    3d02:	bf20      	wfe

00003d04 <_skip_1>:
    3d04:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    3d08:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3d0c:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3d0e:	4770      	bx	lr

00003d10 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3d10:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3d12:	2800      	cmp	r0, #0
    3d14:	db07      	blt.n	3d26 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d16:	2301      	movs	r3, #1
    3d18:	0941      	lsrs	r1, r0, #5
    3d1a:	4a03      	ldr	r2, [pc, #12]	; (3d28 <arch_irq_enable+0x18>)
    3d1c:	f000 001f 	and.w	r0, r0, #31
    3d20:	4083      	lsls	r3, r0
    3d22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3d26:	4770      	bx	lr
    3d28:	e000e100 	.word	0xe000e100

00003d2c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3d2c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3d2e:	2800      	cmp	r0, #0
    3d30:	db0c      	blt.n	3d4c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d32:	2201      	movs	r2, #1
    3d34:	4906      	ldr	r1, [pc, #24]	; (3d50 <arch_irq_disable+0x24>)
    3d36:	0943      	lsrs	r3, r0, #5
    3d38:	f000 001f 	and.w	r0, r0, #31
    3d3c:	4082      	lsls	r2, r0
    3d3e:	3320      	adds	r3, #32
    3d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3d44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d48:	f3bf 8f6f 	isb	sy
}
    3d4c:	4770      	bx	lr
    3d4e:	bf00      	nop
    3d50:	e000e100 	.word	0xe000e100

00003d54 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3d54:	4b05      	ldr	r3, [pc, #20]	; (3d6c <arch_irq_is_enabled+0x18>)
    3d56:	0942      	lsrs	r2, r0, #5
    3d58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3d5c:	2301      	movs	r3, #1
    3d5e:	f000 001f 	and.w	r0, r0, #31
    3d62:	fa03 f000 	lsl.w	r0, r3, r0
}
    3d66:	4010      	ands	r0, r2
    3d68:	4770      	bx	lr
    3d6a:	bf00      	nop
    3d6c:	e000e100 	.word	0xe000e100

00003d70 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3d70:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3d72:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    3d74:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d78:	bfac      	ite	ge
    3d7a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d7e:	4b06      	ldrlt	r3, [pc, #24]	; (3d98 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d80:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3d84:	b2c9      	uxtb	r1, r1
    3d86:	bfab      	itete	ge
    3d88:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d8c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d90:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d94:	5419      	strblt	r1, [r3, r0]
}
    3d96:	4770      	bx	lr
    3d98:	e000ed14 	.word	0xe000ed14

00003d9c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3d9c:	bf30      	wfi
    b z_SysNmiOnReset
    3d9e:	f7ff bffd 	b.w	3d9c <z_SysNmiOnReset>
    3da2:	bf00      	nop

00003da4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3da4:	4a0b      	ldr	r2, [pc, #44]	; (3dd4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3da6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3da8:	4b0b      	ldr	r3, [pc, #44]	; (3dd8 <z_arm_prep_c+0x34>)
    3daa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3dae:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3db4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3db8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3dbc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3dc4:	f005 f8c2 	bl	8f4c <z_bss_zero>
	z_data_copy();
    3dc8:	f005 ff5e 	bl	9c88 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3dcc:	f000 f9aa 	bl	4124 <z_arm_interrupt_init>
	z_cstart();
    3dd0:	f005 f8fc 	bl	8fcc <z_cstart>
    3dd4:	00000000 	.word	0x00000000
    3dd8:	e000ed00 	.word	0xe000ed00

00003ddc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3ddc:	4a09      	ldr	r2, [pc, #36]	; (3e04 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3dde:	490a      	ldr	r1, [pc, #40]	; (3e08 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3de0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3de2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    3de4:	6718      	str	r0, [r3, #112]	; 0x70
	_current->arch.swap_return_value = _k_neg_eagain;
    3de6:	6759      	str	r1, [r3, #116]	; 0x74

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3de8:	4908      	ldr	r1, [pc, #32]	; (3e0c <arch_swap+0x30>)
    3dea:	684b      	ldr	r3, [r1, #4]
    3dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3df0:	604b      	str	r3, [r1, #4]
    3df2:	2300      	movs	r3, #0
    3df4:	f383 8811 	msr	BASEPRI, r3
    3df8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3dfc:	6893      	ldr	r3, [r2, #8]
}
    3dfe:	6f58      	ldr	r0, [r3, #116]	; 0x74
    3e00:	4770      	bx	lr
    3e02:	bf00      	nop
    3e04:	200143e0 	.word	0x200143e0
    3e08:	0000ee60 	.word	0x0000ee60
    3e0c:	e000ed00 	.word	0xe000ed00

00003e10 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3e10:	4913      	ldr	r1, [pc, #76]	; (3e60 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3e12:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3e14:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3e18:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3e1a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3e1e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3e22:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3e24:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3e28:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3e2c:	4f0d      	ldr	r7, [pc, #52]	; (3e64 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3e2e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3e32:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
    3e34:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3e36:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3e38:	6f10      	ldr	r0, [r2, #112]	; 0x70
    movs r3, #0
    3e3a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3e3e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3e42:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3e46:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3e4a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    3e4e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    3e52:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3e54:	f007 fe3e 	bl	bad4 <configure_builtin_stack_guard>
    pop {r2, lr}
    3e58:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3e5c:	4770      	bx	lr
    3e5e:	0000      	.short	0x0000
    ldr r1, =_kernel
    3e60:	200143e0 	.word	0x200143e0
    ldr v4, =_SCS_ICSR
    3e64:	e000ed04 	.word	0xe000ed04

00003e68 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3e68:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3e6c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3e6e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3e72:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3e76:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3e78:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3e7c:	2902      	cmp	r1, #2
    beq _oops
    3e7e:	d0ff      	beq.n	3e80 <_oops>

00003e80 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3e80:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3e82:	f007 fe18 	bl	bab6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3e86:	bd01      	pop	{r0, pc}

00003e88 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3e88:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3e8c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    3e8e:	490b      	ldr	r1, [pc, #44]	; (3ebc <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    3e90:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3e94:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    3e96:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    3e9a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3e9e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    3ea0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    3ea4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3eac:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3eb0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3eb2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3eb4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3eb6:	6703      	str	r3, [r0, #112]	; 0x70
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3eb8:	4770      	bx	lr
    3eba:	bf00      	nop
    3ebc:	0000a7fd 	.word	0x0000a7fd

00003ec0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3ec0:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <arch_switch_to_main_thread+0x24>)
    3ec2:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    3ec4:	6e03      	ldr	r3, [r0, #96]	; 0x60
    3ec6:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3eca:	4610      	mov	r0, r2
    3ecc:	f381 8809 	msr	PSP, r1
    3ed0:	2100      	movs	r1, #0
    3ed2:	b663      	cpsie	if
    3ed4:	f381 8811 	msr	BASEPRI, r1
    3ed8:	f3bf 8f6f 	isb	sy
    3edc:	2200      	movs	r2, #0
    3ede:	2300      	movs	r3, #0
    3ee0:	f006 fc8c 	bl	a7fc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3ee4:	200143e0 	.word	0x200143e0

00003ee8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3ee8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3eea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3eee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3ef2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3ef6:	4904      	ldr	r1, [pc, #16]	; (3f08 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3ef8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3efa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3efc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3efe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3f02:	4902      	ldr	r1, [pc, #8]	; (3f0c <_isr_wrapper+0x24>)
	bx r1
    3f04:	4708      	bx	r1
    3f06:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    3f08:	0000e6c0 	.word	0x0000e6c0
	ldr r1, =z_arm_int_exit
    3f0c:	00003f11 	.word	0x00003f11

00003f10 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3f10:	4b04      	ldr	r3, [pc, #16]	; (3f24 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3f12:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3f14:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
    3f16:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3f18:	d003      	beq.n	3f22 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3f1a:	4903      	ldr	r1, [pc, #12]	; (3f28 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3f20:	600a      	str	r2, [r1, #0]

00003f22 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3f22:	4770      	bx	lr
	ldr r3, =_kernel
    3f24:	200143e0 	.word	0x200143e0
	ldr r1, =_SCS_ICSR
    3f28:	e000ed04 	.word	0xe000ed04

00003f2c <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3f2c:	4b08      	ldr	r3, [pc, #32]	; (3f50 <usage_fault.constprop.0+0x24>)
    3f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3f32:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3f3e:	f3c0 5000 	ubfx	r0, r0, #20, #1
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3f42:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3f46:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    3f4a:	0040      	lsls	r0, r0, #1
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3f4c:	629a      	str	r2, [r3, #40]	; 0x28
}
    3f4e:	4770      	bx	lr
    3f50:	e000ed00 	.word	0xe000ed00

00003f54 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3f54:	4b0d      	ldr	r3, [pc, #52]	; (3f8c <bus_fault.constprop.0+0x38>)
    3f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f5c:	0592      	lsls	r2, r2, #22
    3f5e:	d507      	bpl.n	3f70 <bus_fault.constprop.0+0x1c>
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f62:	0412      	lsls	r2, r2, #16
    3f64:	d504      	bpl.n	3f70 <bus_fault.constprop.0+0x1c>
			if (from_hard_fault != 0) {
    3f66:	b118      	cbz	r0, 3f70 <bus_fault.constprop.0+0x1c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3f6e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3f70:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f76:	05d2      	lsls	r2, r2, #23
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3f78:	4a04      	ldr	r2, [pc, #16]	; (3f8c <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3f7a:	bf58      	it	pl
    3f7c:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3f7e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f80:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3f84:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3f86:	7008      	strb	r0, [r1, #0]
}
    3f88:	4770      	bx	lr
    3f8a:	bf00      	nop
    3f8c:	e000ed00 	.word	0xe000ed00

00003f90 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3f90:	4b12      	ldr	r3, [pc, #72]	; (3fdc <mem_manage_fault.constprop.0+0x4c>)
    3f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f98:	0792      	lsls	r2, r2, #30
    3f9a:	d508      	bpl.n	3fae <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    3f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fa0:	0612      	lsls	r2, r2, #24
    3fa2:	d504      	bpl.n	3fae <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    3fa4:	b118      	cbz	r0, 3fae <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3fac:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3fae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fb4:	06d0      	lsls	r0, r2, #27
	*recoverable = memory_fault_recoverable(esf, true);
    3fb6:	f04f 0000 	mov.w	r0, #0
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3fba:	bf58      	it	pl
    3fbc:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3fbe:	4b07      	ldr	r3, [pc, #28]	; (3fdc <mem_manage_fault.constprop.0+0x4c>)
    3fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fc2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3fc4:	bf42      	ittt	mi
    3fc6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3fc8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3fcc:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fd0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3fd4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3fd6:	7008      	strb	r0, [r1, #0]
}
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop
    3fdc:	e000ed00 	.word	0xe000ed00

00003fe0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3fe0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3fe2:	4b44      	ldr	r3, [pc, #272]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
{
    3fe4:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3fe6:	685b      	ldr	r3, [r3, #4]
    3fe8:	2500      	movs	r5, #0
{
    3fea:	b08a      	sub	sp, #40	; 0x28
    3fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3ff0:	f385 8811 	msr	BASEPRI, r5
    3ff4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3ff8:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    3ffc:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    4000:	d111      	bne.n	4026 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4002:	f002 000c 	and.w	r0, r2, #12
    4006:	2808      	cmp	r0, #8
    4008:	d00d      	beq.n	4026 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    400a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    400c:	bf4c      	ite	mi
    400e:	460e      	movmi	r6, r1
			*nested_exc = true;
    4010:	2501      	movpl	r5, #1
	*recoverable = false;
    4012:	2200      	movs	r2, #0
	switch (fault) {
    4014:	3b03      	subs	r3, #3
	*recoverable = false;
    4016:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    401a:	2b03      	cmp	r3, #3
    401c:	d805      	bhi.n	402a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a>
    401e:	e8df f003 	tbb	[pc, r3]
    4022:	5c1e      	.short	0x5c1e
    4024:	5960      	.short	0x5960
		return NULL;
    4026:	462e      	mov	r6, r5
    4028:	e7f3      	b.n	4012 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12>
    402a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    402c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4030:	b99b      	cbnz	r3, 405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4032:	2220      	movs	r2, #32
    4034:	4631      	mov	r1, r6
    4036:	a802      	add	r0, sp, #8
    4038:	f007 fda4 	bl	bb84 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    403c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    403e:	2d00      	cmp	r5, #0
    4040:	d053      	beq.n	40ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xea>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4042:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4046:	b922      	cbnz	r2, 4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4048:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    404c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4050:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4052:	4620      	mov	r0, r4
    4054:	a902      	add	r1, sp, #8
    4056:	f007 fd2c 	bl	bab2 <z_arm_fatal_error>
}
    405a:	b00a      	add	sp, #40	; 0x28
    405c:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    405e:	4b25      	ldr	r3, [pc, #148]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    4060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4062:	0791      	lsls	r1, r2, #30
    4064:	d4e1      	bmi.n	402a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4068:	2a00      	cmp	r2, #0
    406a:	dbde      	blt.n	402a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    406e:	0052      	lsls	r2, r2, #1
    4070:	d5db      	bpl.n	402a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    4072:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4074:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    4076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    407a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    407c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4080:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    4084:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    4086:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    408a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    408e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4090:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4094:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4098:	f64d 7202 	movw	r2, #57090	; 0xdf02
    409c:	4291      	cmp	r1, r2
    409e:	d009      	beq.n	40b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    40a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40a2:	b2d2      	uxtb	r2, r2
    40a4:	b142      	cbz	r2, 40b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    40a6:	2001      	movs	r0, #1
    40a8:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    40ac:	f7ff ff70 	bl	3f90 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    40b0:	4604      	mov	r4, r0
		break;
    40b2:	e7bb      	b.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
			reason = esf->basic.r0;
    40b4:	6834      	ldr	r4, [r6, #0]
    40b6:	e7b9      	b.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    40b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40ba:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    40be:	d005      	beq.n	40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    40c0:	2001      	movs	r0, #1
    40c2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    40c6:	f7ff ff45 	bl	3f54 <bus_fault.constprop.0>
    40ca:	e7f1      	b.n	40b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    40cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    40d2:	d3aa      	bcc.n	402a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a>
		reason = usage_fault(esf);
    40d4:	f7ff ff2a 	bl	3f2c <usage_fault.constprop.0>
    40d8:	e7ea      	b.n	40b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb0>
		reason = mem_manage_fault(esf, 0, recoverable);
    40da:	2000      	movs	r0, #0
    40dc:	f10d 0107 	add.w	r1, sp, #7
    40e0:	e7e4      	b.n	40ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xac>
		reason = bus_fault(esf, 0, recoverable);
    40e2:	2000      	movs	r0, #0
    40e4:	f10d 0107 	add.w	r1, sp, #7
    40e8:	e7ed      	b.n	40c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    40ea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    40ee:	f023 0301 	bic.w	r3, r3, #1
    40f2:	e7ad      	b.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
    40f4:	e000ed00 	.word	0xe000ed00

000040f8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    40f8:	4b04      	ldr	r3, [pc, #16]	; (410c <z_arm_fault_init+0x14>)
    40fa:	695a      	ldr	r2, [r3, #20]
    40fc:	f042 0210 	orr.w	r2, r2, #16
    4100:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    4102:	695a      	ldr	r2, [r3, #20]
    4104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4108:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    410a:	4770      	bx	lr
    410c:	e000ed00 	.word	0xe000ed00

00004110 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4110:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4114:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4118:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    411a:	4672      	mov	r2, lr
	bl z_arm_fault
    411c:	f7ff ff60 	bl	3fe0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4120:	bd01      	pop	{r0, pc}
    4122:	bf00      	nop

00004124 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4124:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4126:	2120      	movs	r1, #32
    4128:	4803      	ldr	r0, [pc, #12]	; (4138 <z_arm_interrupt_init+0x14>)
    412a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    412c:	3301      	adds	r3, #1
    412e:	2b45      	cmp	r3, #69	; 0x45
    4130:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4134:	d1f9      	bne.n	412a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4136:	4770      	bx	lr
    4138:	e000e100 	.word	0xe000e100

0000413c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    413c:	2000      	movs	r0, #0
    msr CONTROL, r0
    413e:	f380 8814 	msr	CONTROL, r0
    isb
    4142:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    4146:	2000      	movs	r0, #0
    msr MSPLIM, r0
    4148:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    414c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4150:	f7fd fdde 	bl	1d10 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4154:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4156:	490e      	ldr	r1, [pc, #56]	; (4190 <__start+0x54>)
    str r0, [r1]
    4158:	6008      	str	r0, [r1, #0]
    dsb
    415a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    415e:	480d      	ldr	r0, [pc, #52]	; (4194 <__start+0x58>)
    msr msp, r0
    4160:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4164:	f000 f83e 	bl	41e4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4168:	2020      	movs	r0, #32
    msr BASEPRI, r0
    416a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    416e:	480a      	ldr	r0, [pc, #40]	; (4198 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4170:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    4174:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4176:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    417a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    417e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4180:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4182:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4186:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    418a:	f7ff fe0b 	bl	3da4 <z_arm_prep_c>
    418e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    4190:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4194:	2005a148 	.word	0x2005a148
    ldr r0, =z_interrupt_stacks
    4198:	20057008 	.word	0x20057008

0000419c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    419c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    41a0:	4905      	ldr	r1, [pc, #20]	; (41b8 <sys_arch_reboot+0x1c>)
    41a2:	4b06      	ldr	r3, [pc, #24]	; (41bc <sys_arch_reboot+0x20>)
    41a4:	68ca      	ldr	r2, [r1, #12]
    41a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    41aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    41ac:	60cb      	str	r3, [r1, #12]
    41ae:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    41b2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    41b4:	e7fd      	b.n	41b2 <sys_arch_reboot+0x16>
    41b6:	bf00      	nop
    41b8:	e000ed00 	.word	0xe000ed00
    41bc:	05fa0004 	.word	0x05fa0004

000041c0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    41c0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    41c2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    41c4:	4906      	ldr	r1, [pc, #24]	; (41e0 <z_arm_clear_arm_mpu_config+0x20>)
    41c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    41ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    41ce:	4293      	cmp	r3, r2
    41d0:	db00      	blt.n	41d4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    41d2:	4770      	bx	lr
  mpu->RNR = rnr;
    41d4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    41d8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    41dc:	3301      	adds	r3, #1
    41de:	e7f6      	b.n	41ce <z_arm_clear_arm_mpu_config+0xe>
    41e0:	e000ed00 	.word	0xe000ed00

000041e4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    41e4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    41e6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    41e8:	2400      	movs	r4, #0
    41ea:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    41ee:	f7ff ffe7 	bl	41c0 <z_arm_clear_arm_mpu_config>
    41f2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    41f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    41f8:	4a0c      	ldr	r2, [pc, #48]	; (422c <z_arm_init_arch_hw_at_boot+0x48>)
    41fa:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    41fe:	3301      	adds	r3, #1
    4200:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    4202:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4206:	d1f8      	bne.n	41fa <z_arm_init_arch_hw_at_boot+0x16>
    4208:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    420a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    420e:	4a07      	ldr	r2, [pc, #28]	; (422c <z_arm_init_arch_hw_at_boot+0x48>)
    4210:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4214:	3301      	adds	r3, #1
    4216:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4218:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    421c:	d1f8      	bne.n	4210 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    421e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4220:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4224:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4228:	bd10      	pop	{r4, pc}
    422a:	bf00      	nop
    422c:	e000e100 	.word	0xe000e100

00004230 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4230:	4b08      	ldr	r3, [pc, #32]	; (4254 <z_impl_k_thread_abort+0x24>)
    4232:	689b      	ldr	r3, [r3, #8]
    4234:	4283      	cmp	r3, r0
    4236:	d10b      	bne.n	4250 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4238:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    423c:	b143      	cbz	r3, 4250 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    423e:	4b06      	ldr	r3, [pc, #24]	; (4258 <z_impl_k_thread_abort+0x28>)
    4240:	685a      	ldr	r2, [r3, #4]
    4242:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4246:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    424a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    424e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    4250:	f005 bca8 	b.w	9ba4 <z_thread_abort>
    4254:	200143e0 	.word	0x200143e0
    4258:	e000ed00 	.word	0xe000ed00

0000425c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    425c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    425e:	4c09      	ldr	r4, [pc, #36]	; (4284 <z_arm_configure_static_mpu_regions+0x28>)
    4260:	4a09      	ldr	r2, [pc, #36]	; (4288 <z_arm_configure_static_mpu_regions+0x2c>)
    4262:	4623      	mov	r3, r4
    4264:	2101      	movs	r1, #1
    4266:	4809      	ldr	r0, [pc, #36]	; (428c <z_arm_configure_static_mpu_regions+0x30>)
    4268:	f000 f8ea 	bl	4440 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    426c:	2300      	movs	r3, #0
    426e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    4270:	4b07      	ldr	r3, [pc, #28]	; (4290 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    4272:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    4274:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    4276:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    4278:	9301      	str	r3, [sp, #4]
    427a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    427c:	f000 f8ea 	bl	4454 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4280:	b004      	add	sp, #16
    4282:	bd10      	pop	{r4, pc}
    4284:	20080000 	.word	0x20080000
    4288:	20002000 	.word	0x20002000
    428c:	0000eb24 	.word	0x0000eb24
    4290:	20002460 	.word	0x20002460

00004294 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    4294:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    4296:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    4298:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    429a:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    429e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    42a2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    42a4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    42a6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    42a8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    42ac:	4905      	ldr	r1, [pc, #20]	; (42c4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    42ae:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    42b2:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    42b6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    42ba:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    42be:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    42c2:	bd10      	pop	{r4, pc}
    42c4:	e000ed00 	.word	0xe000ed00

000042c8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    42c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42cc:	460f      	mov	r7, r1
    42ce:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    42d0:	4606      	mov	r6, r0
    42d2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    42d6:	4d4e      	ldr	r5, [pc, #312]	; (4410 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    42d8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    42da:	45b8      	cmp	r8, r7
    42dc:	f280 8094 	bge.w	4408 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    42e0:	f8d6 9004 	ldr.w	r9, [r6, #4]
    42e4:	f1b9 0f00 	cmp.w	r9, #0
    42e8:	d036      	beq.n	4358 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    42ea:	f1b9 0f1f 	cmp.w	r9, #31
    42ee:	f240 8089 	bls.w	4404 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    42f2:	f019 0f1f 	tst.w	r9, #31
    42f6:	f040 8085 	bne.w	4404 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    42fa:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    42fe:	f01a 0f1f 	tst.w	sl, #31
    4302:	d17f      	bne.n	4404 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4304:	4650      	mov	r0, sl
    4306:	f007 fbe9 	bl	badc <arm_cmse_mpu_region_get>
    430a:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    430c:	eb09 000a 	add.w	r0, r9, sl
    4310:	3801      	subs	r0, #1
    4312:	f007 fbe3 	bl	badc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4316:	4583      	cmp	fp, r0
    4318:	d174      	bne.n	4404 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    431a:	f11b 0f16 	cmn.w	fp, #22
    431e:	d071      	beq.n	4404 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    4320:	455c      	cmp	r4, fp
    4322:	dd6f      	ble.n	4404 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    4324:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    4328:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    432c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    4330:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    4334:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4338:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    433c:	e9d6 3200 	ldrd	r3, r2, [r6]
    4340:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    4342:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    4344:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    4348:	d11e      	bne.n	4388 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    434a:	45ca      	cmp	sl, r9
    434c:	d108      	bne.n	4360 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    434e:	4631      	mov	r1, r6
    4350:	fa5f f08b 	uxtb.w	r0, fp
    4354:	f007 fbcb 	bl	baee <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    4358:	f108 0801 	add.w	r8, r8, #1
    435c:	360c      	adds	r6, #12
    435e:	e7bc      	b.n	42da <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    4360:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    4362:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    4366:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    436a:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    436e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    4372:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    4374:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    4378:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    437a:	f007 fbb8 	bl	baee <mpu_configure_region>

			if (reg_index == -EINVAL) {
    437e:	f110 0f16 	cmn.w	r0, #22
    4382:	d03f      	beq.n	4404 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    4384:	1c44      	adds	r4, r0, #1
    4386:	e7e7      	b.n	4358 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    4388:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    438c:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    4390:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    4392:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    4396:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    439a:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    439c:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    439e:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    43a0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    43a2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    43a6:	d0e8      	beq.n	437a <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    43a8:	f007 fba1 	bl	baee <mpu_configure_region>
			if (reg_index == -EINVAL) {
    43ac:	f110 0f16 	cmn.w	r0, #22
    43b0:	d028      	beq.n	4404 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    43b2:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    43b6:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    43ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    43be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    43c2:	f362 0304 	bfi	r3, r2, #0, #5
    43c6:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    43ca:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    43ce:	f89d 2008 	ldrb.w	r2, [sp, #8]
    43d2:	085b      	lsrs	r3, r3, #1
    43d4:	f363 1247 	bfi	r2, r3, #5, #3
    43d8:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    43dc:	e9d6 3200 	ldrd	r3, r2, [r6]
    43e0:	4413      	add	r3, r2
    43e2:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    43e4:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    43e8:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    43ea:	4453      	add	r3, sl
    43ec:	eba3 0309 	sub.w	r3, r3, r9
    43f0:	b2c8      	uxtb	r0, r1
    43f2:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    43f6:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    43f8:	9303      	str	r3, [sp, #12]
    43fa:	d803      	bhi.n	4404 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    43fc:	4669      	mov	r1, sp
    43fe:	f7ff ff49 	bl	4294 <region_init>
    4402:	e7bf      	b.n	4384 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    4404:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    4408:	4620      	mov	r0, r4
    440a:	b005      	add	sp, #20
    440c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4410:	e000ed00 	.word	0xe000ed00

00004414 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4414:	2205      	movs	r2, #5
    4416:	4b04      	ldr	r3, [pc, #16]	; (4428 <arm_core_mpu_enable+0x14>)
    4418:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    441c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4420:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	e000ed00 	.word	0xe000ed00

0000442c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    442c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4430:	2200      	movs	r2, #0
    4432:	4b02      	ldr	r3, [pc, #8]	; (443c <arm_core_mpu_disable+0x10>)
    4434:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4438:	4770      	bx	lr
    443a:	bf00      	nop
    443c:	e000ed00 	.word	0xe000ed00

00004440 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4440:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4442:	4c03      	ldr	r4, [pc, #12]	; (4450 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    4444:	7822      	ldrb	r2, [r4, #0]
    4446:	f7ff ff3f 	bl	42c8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    444a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    444c:	bd10      	pop	{r4, pc}
    444e:	bf00      	nop
    4450:	200167fe 	.word	0x200167fe

00004454 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    4454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4458:	4d29      	ldr	r5, [pc, #164]	; (4500 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    445a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    445c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    445e:	f04f 0800 	mov.w	r8, #0
    4462:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    4464:	4f27      	ldr	r7, [pc, #156]	; (4504 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4466:	45d0      	cmp	r8, sl
    4468:	da1b      	bge.n	44a2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    446a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    446e:	f1b9 0f00 	cmp.w	r9, #0
    4472:	d03f      	beq.n	44f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4474:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4476:	4608      	mov	r0, r1
    4478:	9101      	str	r1, [sp, #4]
    447a:	f007 fb2f 	bl	badc <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    447e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4480:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4482:	eb09 0001 	add.w	r0, r9, r1
    4486:	3801      	subs	r0, #1
    4488:	f007 fb28 	bl	badc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    448c:	4284      	cmp	r4, r0
    448e:	f04f 0214 	mov.w	r2, #20
    4492:	4b1d      	ldr	r3, [pc, #116]	; (4508 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    4494:	d008      	beq.n	44a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    4496:	fb02 f308 	mul.w	r3, r2, r8
    449a:	f06f 0215 	mvn.w	r2, #21
    449e:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    44a2:	b003      	add	sp, #12
    44a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    44a8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    44ac:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    44ae:	d0f8      	beq.n	44a2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    44b0:	7819      	ldrb	r1, [r3, #0]
    44b2:	42a1      	cmp	r1, r4
    44b4:	ddf5      	ble.n	44a2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    44b6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    44ba:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    44be:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    44c2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    44c6:	f100 0108 	add.w	r1, r0, #8
    44ca:	7b00      	ldrb	r0, [r0, #12]
    44cc:	f364 0004 	bfi	r0, r4, #0, #5
    44d0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    44d2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    44d6:	790c      	ldrb	r4, [r1, #4]
    44d8:	0840      	lsrs	r0, r0, #1
    44da:	f360 1447 	bfi	r4, r0, #5, #3
    44de:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    44e0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    44e4:	f021 011f 	bic.w	r1, r1, #31
    44e8:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    44ea:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    44ee:	f021 011f 	bic.w	r1, r1, #31
    44f2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    44f4:	f108 0801 	add.w	r8, r8, #1
    44f8:	3514      	adds	r5, #20
    44fa:	360c      	adds	r6, #12
    44fc:	e7b3      	b.n	4466 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    44fe:	bf00      	nop
    4500:	20013778 	.word	0x20013778
    4504:	e000ed00 	.word	0xe000ed00
    4508:	200167fe 	.word	0x200167fe

0000450c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    450c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    450e:	4d0e      	ldr	r5, [pc, #56]	; (4548 <z_arm_mpu_init+0x3c>)
    4510:	682c      	ldr	r4, [r5, #0]
    4512:	2c08      	cmp	r4, #8
    4514:	d815      	bhi.n	4542 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4516:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    4518:	f7ff ff88 	bl	442c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    451c:	4b0b      	ldr	r3, [pc, #44]	; (454c <z_arm_mpu_init+0x40>)
    451e:	4a0c      	ldr	r2, [pc, #48]	; (4550 <z_arm_mpu_init+0x44>)
    4520:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4524:	4284      	cmp	r4, r0
    4526:	d105      	bne.n	4534 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4528:	4b0a      	ldr	r3, [pc, #40]	; (4554 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    452a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    452c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    452e:	f7ff ff71 	bl	4414 <arm_core_mpu_enable>
}
    4532:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4534:	6869      	ldr	r1, [r5, #4]
    4536:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    453a:	f7ff feab 	bl	4294 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    453e:	3001      	adds	r0, #1
    4540:	e7f0      	b.n	4524 <z_arm_mpu_init+0x18>
		return -1;
    4542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4546:	e7f4      	b.n	4532 <z_arm_mpu_init+0x26>
    4548:	0000eb30 	.word	0x0000eb30
    454c:	e000ed00 	.word	0xe000ed00
    4550:	0044ffaa 	.word	0x0044ffaa
    4554:	200167fe 	.word	0x200167fe

00004558 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    4558:	b40c      	push	{r2, r3}
    455a:	b510      	push	{r4, lr}
    455c:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    455e:	b909      	cbnz	r1, 4564 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    4560:	f10d 000b 	add.w	r0, sp, #11
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    4564:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    4566:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    456a:	ab09      	add	r3, sp, #36	; 0x24
    456c:	9a08      	ldr	r2, [sp, #32]
    456e:	9400      	str	r4, [sp, #0]
    4570:	a904      	add	r1, sp, #16
    4572:	4805      	ldr	r0, [pc, #20]	; (4588 <snprintf+0x30>)
    4574:	9303      	str	r3, [sp, #12]
    4576:	f7fd f905 	bl	1784 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    457a:	9b04      	ldr	r3, [sp, #16]
    457c:	701c      	strb	r4, [r3, #0]
	return r;
}
    457e:	b006      	add	sp, #24
    4580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4584:	b002      	add	sp, #8
    4586:	4770      	bx	lr
    4588:	0000bbad 	.word	0x0000bbad

0000458c <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    458c:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    458e:	4801      	ldr	r0, [pc, #4]	; (4594 <usbd_evt_put+0x8>)
    4590:	f009 bd96 	b.w	e0c0 <k_queue_append>
    4594:	20002348 	.word	0x20002348

00004598 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4598:	4901      	ldr	r1, [pc, #4]	; (45a0 <usbd_work_schedule+0x8>)
    459a:	4802      	ldr	r0, [pc, #8]	; (45a4 <usbd_work_schedule+0xc>)
    459c:	f009 bdd6 	b.w	e14c <k_work_submit_to_queue>
    45a0:	200137b4 	.word	0x200137b4
    45a4:	200024f8 	.word	0x200024f8

000045a8 <endpoint_ctx>:
	if (NRF_USBD_EPIN_CHECK(ep)) {
    45a8:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    45aa:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    45ae:	d512      	bpl.n	45d6 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    45b0:	2b08      	cmp	r3, #8
    45b2:	d105      	bne.n	45c0 <endpoint_ctx+0x18>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    45b4:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    45b6:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    45ba:	d506      	bpl.n	45ca <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    45bc:	480e      	ldr	r0, [pc, #56]	; (45f8 <endpoint_ctx+0x50>)
    45be:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    45c0:	f010 0f78 	tst.w	r0, #120	; 0x78
    45c4:	d112      	bne.n	45ec <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    45c6:	f000 030f 	and.w	r3, r0, #15
			return &ctx->ep_ctx[ep_num];
    45ca:	204c      	movs	r0, #76	; 0x4c
    45cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    45d0:	4b0a      	ldr	r3, [pc, #40]	; (45fc <endpoint_ctx+0x54>)
    45d2:	4418      	add	r0, r3
    45d4:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    45d6:	2b08      	cmp	r3, #8
    45d8:	d105      	bne.n	45e6 <endpoint_ctx+0x3e>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    45da:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    45dc:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    45e0:	d506      	bpl.n	45f0 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    45e2:	4807      	ldr	r0, [pc, #28]	; (4600 <endpoint_ctx+0x58>)
    45e4:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    45e6:	f010 0f78 	tst.w	r0, #120	; 0x78
    45ea:	d0f6      	beq.n	45da <endpoint_ctx+0x32>
		return NULL;
    45ec:	2000      	movs	r0, #0
}
    45ee:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    45f0:	4804      	ldr	r0, [pc, #16]	; (4604 <endpoint_ctx+0x5c>)
    45f2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    45f6:	4770      	bx	lr
    45f8:	200138d8 	.word	0x200138d8
    45fc:	2001378c 	.word	0x2001378c
    4600:	200139f8 	.word	0x200139f8
    4604:	200138f8 	.word	0x200138f8

00004608 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    4608:	2200      	movs	r2, #0
    460a:	2300      	movs	r3, #0
    460c:	4801      	ldr	r0, [pc, #4]	; (4614 <usbd_evt_get+0xc>)
    460e:	f004 bef9 	b.w	9404 <z_impl_k_queue_get>
    4612:	bf00      	nop
    4614:	20002348 	.word	0x20002348

00004618 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    4618:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    461a:	4c05      	ldr	r4, [pc, #20]	; (4630 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    461c:	f7ff fff4 	bl	4608 <usbd_evt_get>
		if (ev) {
    4620:	b120      	cbz	r0, 462c <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4622:	1d01      	adds	r1, r0, #4
    4624:	4620      	mov	r0, r4
    4626:	f009 fc8e 	bl	df46 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    462a:	e7f7      	b.n	461c <usbd_evt_flush+0x4>
}
    462c:	bd10      	pop	{r4, pc}
    462e:	bf00      	nop
    4630:	200022c8 	.word	0x200022c8

00004634 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    4634:	b507      	push	{r0, r1, r2, lr}
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    4636:	2300      	movs	r3, #0
    4638:	2200      	movs	r2, #0
    463a:	480e      	ldr	r0, [pc, #56]	; (4674 <usbd_evt_alloc+0x40>)
    463c:	a901      	add	r1, sp, #4
    463e:	f004 fd45 	bl	90cc <k_mem_slab_alloc>
    4642:	b190      	cbz	r0, 466a <usbd_evt_alloc+0x36>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    4644:	f7ff ffe8 	bl	4618 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4648:	2200      	movs	r2, #0
    464a:	2300      	movs	r3, #0
    464c:	4809      	ldr	r0, [pc, #36]	; (4674 <usbd_evt_alloc+0x40>)
    464e:	a901      	add	r1, sp, #4
    4650:	f004 fd3c 	bl	90cc <k_mem_slab_alloc>
    4654:	b938      	cbnz	r0, 4666 <usbd_evt_alloc+0x32>
			return NULL;
		}

		ev = (struct usbd_event *)block.data;
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    4656:	2304      	movs	r3, #4
		ev = (struct usbd_event *)block.data;
    4658:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
    465a:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    465c:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    465e:	f7ff ff95 	bl	458c <usbd_evt_put>
		usbd_work_schedule();
    4662:	f7ff ff99 	bl	4598 <usbd_work_schedule>

		return NULL;
    4666:	2000      	movs	r0, #0
    4668:	e001      	b.n	466e <usbd_evt_alloc+0x3a>
	}

	ev = (struct usbd_event *)block.data;
    466a:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    466c:	6040      	str	r0, [r0, #4]

	return ev;
}
    466e:	b003      	add	sp, #12
    4670:	f85d fb04 	ldr.w	pc, [sp], #4
    4674:	200022c8 	.word	0x200022c8

00004678 <submit_dc_power_event>:

static void submit_dc_power_event(enum usbd_periph_state state)
{
    4678:	b510      	push	{r4, lr}
    467a:	4604      	mov	r4, r0
	struct usbd_event *ev = usbd_evt_alloc();
    467c:	f7ff ffda 	bl	4634 <usbd_evt_alloc>

	if (!ev) {
    4680:	b160      	cbz	r0, 469c <submit_dc_power_event+0x24>
		return;
	}

	ev->evt_type = USBD_EVT_POWER;
    4682:	2200      	movs	r2, #0
	ev->evt.pwr_evt.state = state;
    4684:	7204      	strb	r4, [r0, #8]
	ev->evt_type = USBD_EVT_POWER;
    4686:	7402      	strb	r2, [r0, #16]

	usbd_evt_put(ev);
    4688:	f7ff ff80 	bl	458c <usbd_evt_put>

	if (usbd_ctx.attached) {
    468c:	4b04      	ldr	r3, [pc, #16]	; (46a0 <submit_dc_power_event+0x28>)
    468e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4692:	b11b      	cbz	r3, 469c <submit_dc_power_event+0x24>
		usbd_work_schedule();
	}
}
    4694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    4698:	f7ff bf7e 	b.w	4598 <usbd_work_schedule>
}
    469c:	bd10      	pop	{r4, pc}
    469e:	bf00      	nop
    46a0:	2001378c 	.word	0x2001378c

000046a4 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    46a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    46a6:	7887      	ldrb	r7, [r0, #2]
{
    46a8:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    46aa:	4638      	mov	r0, r7
    46ac:	f7ff ff7c 	bl	45a8 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    46b0:	063b      	lsls	r3, r7, #24
		endpoint_ctx(p_event->data.eptransfer.ep);
    46b2:	4604      	mov	r4, r0
		switch (p_event->data.eptransfer.status) {
    46b4:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    46b6:	d512      	bpl.n	46de <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    46b8:	2d00      	cmp	r5, #0
    46ba:	d143      	bne.n	4744 <usbd_event_transfer_data+0xa0>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
    46bc:	f7ff ffba 	bl	4634 <usbd_evt_alloc>

			if (!ev) {
    46c0:	4603      	mov	r3, r0
    46c2:	2800      	cmp	r0, #0
    46c4:	d03e      	beq.n	4744 <usbd_event_transfer_data+0xa0>

			LOG_DBG("write complete, ep 0x%02x",
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
    46c6:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    46c8:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    46ca:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    46cc:	2203      	movs	r2, #3
    46ce:	7302      	strb	r2, [r0, #12]
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->read_pending = true;
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
			ev->evt.ep_evt.ep = ep_ctx;
    46d0:	609c      	str	r4, [r3, #8]

			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
			ev->evt.ep_evt.ep = ep_ctx;

			usbd_evt_put(ev);
    46d2:	f7ff ff5b 	bl	458c <usbd_evt_put>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    46d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
    46da:	f7ff bf5d 	b.w	4598 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    46de:	b14d      	cbz	r5, 46f4 <usbd_event_transfer_data+0x50>
    46e0:	2d01      	cmp	r5, #1
    46e2:	d12f      	bne.n	4744 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    46e4:	f7ff ffa6 	bl	4634 <usbd_evt_alloc>
			if (!ev) {
    46e8:	4603      	mov	r3, r0
    46ea:	b358      	cbz	r0, 4744 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    46ec:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    46ee:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    46f0:	7305      	strb	r5, [r0, #12]
    46f2:	e7ed      	b.n	46d0 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    46f4:	f7ff ff9e 	bl	4634 <usbd_evt_alloc>
			if (!ev) {
    46f8:	b320      	cbz	r0, 4744 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    46fa:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    46fc:	4b12      	ldr	r3, [pc, #72]	; (4748 <usbd_event_transfer_data+0xa4>)
    46fe:	f012 0f80 	tst.w	r2, #128	; 0x80
    4702:	f002 0108 	and.w	r1, r2, #8
    4706:	d011      	beq.n	472c <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    4708:	b141      	cbz	r1, 471c <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    470a:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    470e:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    4710:	2301      	movs	r3, #1
    4712:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4714:	2302      	movs	r3, #2
			ev->evt.ep_evt.ep = ep_ctx;
    4716:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4718:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    471a:	e7da      	b.n	46d2 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    471c:	2114      	movs	r1, #20
    471e:	f002 020f 	and.w	r2, r2, #15
    4722:	fb01 3302 	mla	r3, r1, r2, r3
    4726:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    472a:	e7f0      	b.n	470e <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    472c:	b111      	cbz	r1, 4734 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    472e:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    4732:	e7ec      	b.n	470e <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    4734:	2114      	movs	r1, #20
    4736:	f002 020f 	and.w	r2, r2, #15
    473a:	fb01 3302 	mla	r3, r1, r2, r3
    473e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    4742:	e7e4      	b.n	470e <usbd_event_transfer_data+0x6a>
}
    4744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4746:	bf00      	nop
    4748:	50036000 	.word	0x50036000

0000474c <usb_dc_power_event_handler>:
	switch (event) {
    474c:	2801      	cmp	r0, #1
{
    474e:	b507      	push	{r0, r1, r2, lr}
	switch (event) {
    4750:	d00f      	beq.n	4772 <usb_dc_power_event_handler+0x26>
    4752:	2802      	cmp	r0, #2
    4754:	d00e      	beq.n	4774 <usb_dc_power_event_handler+0x28>
    4756:	b948      	cbnz	r0, 476c <usb_dc_power_event_handler+0x20>
	z_impl_k_timer_start(timer, duration, period);
    4758:	2200      	movs	r2, #0
    475a:	2300      	movs	r3, #0
    475c:	4808      	ldr	r0, [pc, #32]	; (4780 <usb_dc_power_event_handler+0x34>)
    475e:	e9cd 2300 	strd	r2, r3, [sp]
    4762:	f645 129a 	movw	r2, #22938	; 0x599a
    4766:	2300      	movs	r3, #0
    4768:	f005 fc44 	bl	9ff4 <z_impl_k_timer_start>
}
    476c:	b003      	add	sp, #12
    476e:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (event) {
    4772:	2000      	movs	r0, #0
}
    4774:	b003      	add	sp, #12
    4776:	f85d eb04 	ldr.w	lr, [sp], #4
	submit_dc_power_event(new_state);
    477a:	f7ff bf7d 	b.w	4678 <submit_dc_power_event>
    477e:	bf00      	nop
    4780:	20002258 	.word	0x20002258

00004784 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    4784:	b513      	push	{r0, r1, r4, lr}

#ifdef CONFIG_HAS_HW_NRF_USBREG
	/* Use CLOCK/POWER priority for compatibility with other series where
	 * USB events are handled by CLOCK interrupt handler.
	 */
	IRQ_CONNECT(USBREGULATOR_IRQn,
    4786:	2200      	movs	r2, #0
    4788:	2101      	movs	r1, #1
    478a:	2037      	movs	r0, #55	; 0x37
    478c:	f7ff faf0 	bl	3d70 <z_arm_irq_priority_set>
		    DT_IRQ(DT_INST(0, nordic_nrf_clock), priority),
		    nrfx_isr, nrfx_usbreg_irq_handler, 0);
	irq_enable(USBREGULATOR_IRQn);
    4790:	2037      	movs	r0, #55	; 0x37
    4792:	f7ff fabd 	bl	3d10 <arch_irq_enable>

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    4796:	4812      	ldr	r0, [pc, #72]	; (47e0 <usb_init+0x5c>)
    4798:	f003 fe8c 	bl	84b4 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    479c:	4b11      	ldr	r3, [pc, #68]	; (47e4 <usb_init+0x60>)
    479e:	4298      	cmp	r0, r3
    47a0:	d11a      	bne.n	47d8 <usb_init+0x54>
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    47a2:	2400      	movs	r4, #0
	(void)nrfx_power_init(&power_config);
    47a4:	4810      	ldr	r0, [pc, #64]	; (47e8 <usb_init+0x64>)
    47a6:	f003 f90b 	bl	79c0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    47aa:	4810      	ldr	r0, [pc, #64]	; (47ec <usb_init+0x68>)
    47ac:	f004 fb52 	bl	8e54 <nrfx_usbreg_init>
	k_work_queue_start(&usbd_work_queue,
    47b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    47b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    47b8:	490d      	ldr	r1, [pc, #52]	; (47f0 <usb_init+0x6c>)
    47ba:	480e      	ldr	r0, [pc, #56]	; (47f4 <usb_init+0x70>)
    47bc:	9400      	str	r4, [sp, #0]
    47be:	f004 ff8d 	bl	96dc <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    47c2:	490d      	ldr	r1, [pc, #52]	; (47f8 <usb_init+0x74>)
    47c4:	480b      	ldr	r0, [pc, #44]	; (47f4 <usb_init+0x70>)
    47c6:	f009 fbed 	bl	dfa4 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    47ca:	480c      	ldr	r0, [pc, #48]	; (47fc <usb_init+0x78>)
    47cc:	490c      	ldr	r1, [pc, #48]	; (4800 <usb_init+0x7c>)
    47ce:	f009 fca0 	bl	e112 <k_work_init>

	return 0;
    47d2:	4620      	mov	r0, r4
}
    47d4:	b002      	add	sp, #8
    47d6:	bd10      	pop	{r4, pc}
		return -EIO;
    47d8:	f06f 0004 	mvn.w	r0, #4
    47dc:	e7fa      	b.n	47d4 <usb_init+0x50>
    47de:	bf00      	nop
    47e0:	0000483d 	.word	0x0000483d
    47e4:	0bad0000 	.word	0x0bad0000
    47e8:	0000f279 	.word	0x0000f279
    47ec:	0000eb58 	.word	0x0000eb58
    47f0:	20056c08 	.word	0x20056c08
    47f4:	200024f8 	.word	0x200024f8
    47f8:	0000f26e 	.word	0x0000f26e
    47fc:	200137b4 	.word	0x200137b4
    4800:	000049c1 	.word	0x000049c1

00004804 <hfxo_stop.constprop.0.isra.0>:
    4804:	2300      	movs	r3, #0
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    4806:	b510      	push	{r4, lr}
    4808:	490b      	ldr	r1, [pc, #44]	; (4838 <hfxo_stop.constprop.0.isra.0+0x34>)
    480a:	e8d1 2fef 	ldaex	r2, [r1]
    480e:	2a01      	cmp	r2, #1
    4810:	d103      	bne.n	481a <hfxo_stop.constprop.0.isra.0+0x16>
    4812:	e8c1 3fe0 	stlex	r0, r3, [r1]
    4816:	2800      	cmp	r0, #0
    4818:	d1f7      	bne.n	480a <hfxo_stop.constprop.0.isra.0+0x6>
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    481a:	d10c      	bne.n	4836 <hfxo_stop.constprop.0.isra.0+0x32>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    481c:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    4820:	3914      	subs	r1, #20
    4822:	4620      	mov	r0, r4
    4824:	f006 fb95 	bl	af52 <onoff_cancel>

	if (rv == -EALREADY) {
    4828:	3078      	adds	r0, #120	; 0x78
    482a:	d104      	bne.n	4836 <hfxo_stop.constprop.0.isra.0+0x32>
		rv = onoff_release(mgr);
    482c:	4620      	mov	r0, r4
}
    482e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4832:	f006 bb69 	b.w	af08 <onoff_release>
    4836:	bd10      	pop	{r4, pc}
    4838:	200137ac 	.word	0x200137ac

0000483c <usbd_event_handler>:
{
    483c:	b5f0      	push	{r4, r5, r6, r7, lr}
    483e:	4606      	mov	r6, r0
    4840:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    4842:	2214      	movs	r2, #20
    4844:	2100      	movs	r1, #0
    4846:	a803      	add	r0, sp, #12
    4848:	f007 f9a7 	bl	bb9a <memset>
	switch (p_event->type) {
    484c:	7833      	ldrb	r3, [r6, #0]
    484e:	3b01      	subs	r3, #1
    4850:	2b05      	cmp	r3, #5
    4852:	d821      	bhi.n	4898 <usbd_event_handler+0x5c>
    4854:	e8df f003 	tbb	[pc, r3]
    4858:	1414037a 	.word	0x1414037a
    485c:	166a      	.short	0x166a
    485e:	2303      	movs	r3, #3
		evt.evt_type = USBD_EVT_POWER;
    4860:	2400      	movs	r4, #0
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    4862:	f88d 3014 	strb.w	r3, [sp, #20]
		ev = usbd_evt_alloc();
    4866:	f7ff fee5 	bl	4634 <usbd_evt_alloc>
		if (!ev) {
    486a:	4603      	mov	r3, r0
    486c:	b1a0      	cbz	r0, 4898 <usbd_event_handler+0x5c>
		ev->evt = evt.evt;
    486e:	f100 0208 	add.w	r2, r0, #8
		ev->evt_type = evt.evt_type;
    4872:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    4874:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    4878:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    487c:	4618      	mov	r0, r3
    487e:	e01d      	b.n	48bc <usbd_event_handler+0x80>
	switch (p_event->type) {
    4880:	2304      	movs	r3, #4
    4882:	e7ed      	b.n	4860 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4884:	78b7      	ldrb	r7, [r6, #2]
    4886:	4638      	mov	r0, r7
    4888:	f7ff fe8e 	bl	45a8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    488c:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    488e:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    4890:	b123      	cbz	r3, 489c <usbd_event_handler+0x60>
    4892:	3b01      	subs	r3, #1
    4894:	2b02      	cmp	r3, #2
    4896:	d943      	bls.n	4920 <usbd_event_handler+0xe4>
}
    4898:	b009      	add	sp, #36	; 0x24
    489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    489c:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    489e:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    48a0:	d513      	bpl.n	48ca <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
    48a2:	2d00      	cmp	r5, #0
    48a4:	d1f8      	bne.n	4898 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    48a6:	f7ff fec5 	bl	4634 <usbd_evt_alloc>
			if (!ev) {
    48aa:	4603      	mov	r3, r0
    48ac:	2800      	cmp	r0, #0
    48ae:	d0f3      	beq.n	4898 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    48b0:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    48b2:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    48b4:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    48b6:	2203      	movs	r2, #3
    48b8:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    48ba:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    48bc:	f7ff fe66 	bl	458c <usbd_evt_put>
}
    48c0:	b009      	add	sp, #36	; 0x24
    48c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    48c6:	f7ff be67 	b.w	4598 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    48ca:	b155      	cbz	r5, 48e2 <usbd_event_handler+0xa6>
    48cc:	2d01      	cmp	r5, #1
    48ce:	d1e3      	bne.n	4898 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    48d0:	f7ff feb0 	bl	4634 <usbd_evt_alloc>
			if (!ev) {
    48d4:	4603      	mov	r3, r0
    48d6:	2800      	cmp	r0, #0
    48d8:	d0de      	beq.n	4898 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    48da:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    48dc:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    48de:	7305      	strb	r5, [r0, #12]
    48e0:	e7eb      	b.n	48ba <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
    48e2:	f7ff fea7 	bl	4634 <usbd_evt_alloc>
			if (!ev) {
    48e6:	4607      	mov	r7, r0
    48e8:	2800      	cmp	r0, #0
    48ea:	d0d5      	beq.n	4898 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    48ec:	2301      	movs	r3, #1
    48ee:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    48f0:	2302      	movs	r3, #2
			ev->evt.ep_evt.ep = ep_ctx;
    48f2:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    48f4:	7303      	strb	r3, [r0, #12]
			err_code = nrfx_usbd_ep_status_get(
    48f6:	f104 010c 	add.w	r1, r4, #12
    48fa:	78b0      	ldrb	r0, [r6, #2]
    48fc:	f009 fa9a 	bl	de34 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    4900:	4a13      	ldr	r2, [pc, #76]	; (4950 <usbd_event_handler+0x114>)
    4902:	68e1      	ldr	r1, [r4, #12]
    4904:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    4908:	428b      	cmp	r3, r1
    490a:	d906      	bls.n	491a <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    490c:	1a5b      	subs	r3, r3, r1
    490e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    4912:	f004 f805 	bl	8920 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    4916:	4638      	mov	r0, r7
    4918:	e7d0      	b.n	48bc <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
    491a:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    491e:	e7fa      	b.n	4916 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
    4920:	4630      	mov	r0, r6
}
    4922:	b009      	add	sp, #36	; 0x24
    4924:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    4928:	f7ff bebc 	b.w	46a4 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    492c:	a801      	add	r0, sp, #4
    492e:	f003 ffd1 	bl	88d4 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    4932:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4936:	2b05      	cmp	r3, #5
    4938:	d104      	bne.n	4944 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    493a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    493e:	f013 0f60 	tst.w	r3, #96	; 0x60
    4942:	d0a9      	beq.n	4898 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    4944:	4b03      	ldr	r3, [pc, #12]	; (4954 <usbd_event_handler+0x118>)
			evt.evt_type = USBD_EVT_EP;
    4946:	2401      	movs	r4, #1
			evt.evt.ep_evt.ep = ep_ctx;
    4948:	9305      	str	r3, [sp, #20]
	if (put_evt) {
    494a:	e78c      	b.n	4866 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    494c:	2402      	movs	r4, #2
    494e:	e78a      	b.n	4866 <usbd_event_handler+0x2a>
    4950:	2001378c 	.word	0x2001378c
    4954:	200138f8 	.word	0x200138f8

00004958 <eps_ctx_init>:
{
    4958:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    495a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    495c:	f064 007f 	orn	r0, r4, #127	; 0x7f
    4960:	b2c0      	uxtb	r0, r0
    4962:	f7ff fe21 	bl	45a8 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4966:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4968:	f007 f92f 	bl	bbca <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    496c:	2c08      	cmp	r4, #8
    496e:	d1f5      	bne.n	495c <eps_ctx_init+0x4>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4970:	2400      	movs	r4, #0
    4972:	4d0e      	ldr	r5, [pc, #56]	; (49ac <eps_ctx_init+0x54>)
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4974:	b2e0      	uxtb	r0, r4
    4976:	f7ff fe17 	bl	45a8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    497a:	6903      	ldr	r3, [r0, #16]
    497c:	b903      	cbnz	r3, 4980 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    497e:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4980:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4982:	f007 f922 	bl	bbca <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4986:	2c08      	cmp	r4, #8
    4988:	f105 0540 	add.w	r5, r5, #64	; 0x40
    498c:	d1f2      	bne.n	4974 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    498e:	4808      	ldr	r0, [pc, #32]	; (49b0 <eps_ctx_init+0x58>)
    4990:	f007 f91b 	bl	bbca <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    4994:	4b07      	ldr	r3, [pc, #28]	; (49b4 <eps_ctx_init+0x5c>)
    4996:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    499a:	b912      	cbnz	r2, 49a2 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    499c:	4a06      	ldr	r2, [pc, #24]	; (49b8 <eps_ctx_init+0x60>)
    499e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    49a2:	4806      	ldr	r0, [pc, #24]	; (49bc <eps_ctx_init+0x64>)
    49a4:	f007 f911 	bl	bbca <ep_ctx_reset>
}
    49a8:	2000      	movs	r0, #0
    49aa:	bd38      	pop	{r3, r4, r5, pc}
    49ac:	20013e1c 	.word	0x20013e1c
    49b0:	200138d8 	.word	0x200138d8
    49b4:	2001378c 	.word	0x2001378c
    49b8:	20013a1c 	.word	0x20013a1c
    49bc:	200139f8 	.word	0x200139f8

000049c0 <usbd_work_handler>:
{
    49c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    49c4:	4607      	mov	r7, r0
	return get_usbd_ctx()->ready;
    49c6:	4cad      	ldr	r4, [pc, #692]	; (4c7c <usbd_work_handler+0x2bc>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    49c8:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4c80 <usbd_work_handler+0x2c0>
{
    49cc:	b085      	sub	sp, #20
	while ((ev = usbd_evt_get()) != NULL) {
    49ce:	f7ff fe1b 	bl	4608 <usbd_evt_get>
    49d2:	b910      	cbnz	r0, 49da <usbd_work_handler+0x1a>
}
    49d4:	b005      	add	sp, #20
    49d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    49da:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    49de:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    49e0:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    49e4:	b93b      	cbnz	r3, 49f6 <usbd_work_handler+0x36>
    49e6:	2a00      	cmp	r2, #0
    49e8:	f000 8088 	beq.w	4afc <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    49ec:	4649      	mov	r1, r9
    49ee:	48a4      	ldr	r0, [pc, #656]	; (4c80 <usbd_work_handler+0x2c0>)
    49f0:	f009 faa9 	bl	df46 <k_mem_slab_free>
}
    49f4:	e7eb      	b.n	49ce <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    49f6:	2a04      	cmp	r2, #4
    49f8:	d844      	bhi.n	4a84 <usbd_work_handler+0xc4>
    49fa:	e8df f012 	tbh	[pc, r2, lsl #1]
    49fe:	007f      	.short	0x007f
    4a00:	00fe0005 	.word	0x00fe0005
    4a04:	012f0114 	.word	0x012f0114
	switch (ep_evt->evt_type) {
    4a08:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4a0a:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    4a0c:	2b03      	cmp	r3, #3
    4a0e:	d839      	bhi.n	4a84 <usbd_work_handler+0xc4>
    4a10:	e8df f003 	tbb	[pc, r3]
    4a14:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4a18:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    4a1a:	2208      	movs	r2, #8
    4a1c:	2100      	movs	r1, #0
    4a1e:	4630      	mov	r0, r6
    4a20:	f007 f8bb 	bl	bb9a <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4a24:	4b97      	ldr	r3, [pc, #604]	; (4c84 <usbd_work_handler+0x2c4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4a26:	4898      	ldr	r0, [pc, #608]	; (4c88 <usbd_work_handler+0x2c8>)
    4a28:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    4a2c:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    4a2e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    4a32:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4a34:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4a38:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    4a3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    4a40:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    4a42:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4a46:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    4a4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    4a4e:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    4a50:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4a54:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4a58:	4631      	mov	r1, r6
    4a5a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4a5e:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    4a60:	80f3      	strh	r3, [r6, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4a62:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4a64:	f007 f88e 	bl	bb84 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    4a68:	682b      	ldr	r3, [r5, #0]
    4a6a:	2100      	movs	r1, #0
    4a6c:	7a68      	ldrb	r0, [r5, #9]
    4a6e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    4a70:	f996 3000 	ldrsb.w	r3, [r6]
    4a74:	2b00      	cmp	r3, #0
    4a76:	db08      	blt.n	4a8a <usbd_work_handler+0xca>
    4a78:	88f3      	ldrh	r3, [r6, #6]
    4a7a:	b133      	cbz	r3, 4a8a <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
    4a7c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    4a80:	f003 ff4e 	bl	8920 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4a84:	4649      	mov	r1, r9
    4a86:	4640      	mov	r0, r8
    4a88:	e7b2      	b.n	49f0 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
    4a8a:	2300      	movs	r3, #0
    4a8c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    4a90:	e7f8      	b.n	4a84 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
    4a92:	7f6b      	ldrb	r3, [r5, #29]
    4a94:	2b00      	cmp	r3, #0
    4a96:	d0f5      	beq.n	4a84 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
    4a98:	7f2b      	ldrb	r3, [r5, #28]
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d0f2      	beq.n	4a84 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
    4a9e:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	ep_ctx->read_pending = false;
    4aa4:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4aaa:	4878      	ldr	r0, [pc, #480]	; (4c8c <usbd_work_handler+0x2cc>)
	ep_ctx->read_complete = false;
    4aac:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4aae:	f007 f8a2 	bl	bbf6 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    4ab2:	696b      	ldr	r3, [r5, #20]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4ab4:	a901      	add	r1, sp, #4
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    4ab6:	9301      	str	r3, [sp, #4]
    4ab8:	686b      	ldr	r3, [r5, #4]
    4aba:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4abe:	7a68      	ldrb	r0, [r5, #9]
    4ac0:	f003 fd3a 	bl	8538 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    4ac4:	4871      	ldr	r0, [pc, #452]	; (4c8c <usbd_work_handler+0x2cc>)
    4ac6:	f007 f898 	bl	bbfa <k_mutex_unlock.isra.0>
    4aca:	e7db      	b.n	4a84 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4acc:	2101      	movs	r1, #1
    4ace:	682b      	ldr	r3, [r5, #0]
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4ad0:	7a68      	ldrb	r0, [r5, #9]
    4ad2:	4798      	blx	r3
		break;
    4ad4:	e7d6      	b.n	4a84 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4ad6:	7aab      	ldrb	r3, [r5, #10]
    4ad8:	b96b      	cbnz	r3, 4af6 <usbd_work_handler+0x136>
    4ada:	7feb      	ldrb	r3, [r5, #31]
    4adc:	b95b      	cbnz	r3, 4af6 <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4ade:	486b      	ldr	r0, [pc, #428]	; (4c8c <usbd_work_handler+0x2cc>)
    4ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ae8:	f007 f885 	bl	bbf6 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    4aec:	f003 ff4c 	bl	8988 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    4af0:	4866      	ldr	r0, [pc, #408]	; (4c8c <usbd_work_handler+0x2cc>)
    4af2:	f007 f882 	bl	bbfa <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4af6:	2102      	movs	r1, #2
    4af8:	682b      	ldr	r3, [r5, #0]
    4afa:	e7e9      	b.n	4ad0 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
    4afc:	7a02      	ldrb	r2, [r0, #8]
    4afe:	2a04      	cmp	r2, #4
    4b00:	d8c0      	bhi.n	4a84 <usbd_work_handler+0xc4>
    4b02:	e8df f002 	tbb	[pc, r2]
    4b06:	0355      	.short	0x0355
    4b08:	631f      	.short	0x631f
    4b0a:	6f          	.byte	0x6f
    4b0b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    4b0c:	f003 fcc8 	bl	84a0 <nrfx_usbd_is_enabled>
    4b10:	4605      	mov	r5, r0
    4b12:	2800      	cmp	r0, #0
    4b14:	d1b6      	bne.n	4a84 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
    4b16:	f003 fc6f 	bl	83f8 <nrfx_usbd_enable>
    4b1a:	2301      	movs	r3, #1
    4b1c:	495c      	ldr	r1, [pc, #368]	; (4c90 <usbd_work_handler+0x2d0>)
    4b1e:	e8d1 2fef 	ldaex	r2, [r1]
    4b22:	2a00      	cmp	r2, #0
    4b24:	d103      	bne.n	4b2e <usbd_work_handler+0x16e>
    4b26:	e8c1 3fe0 	stlex	r0, r3, [r1]
    4b2a:	2800      	cmp	r0, #0
    4b2c:	d1f7      	bne.n	4b1e <usbd_work_handler+0x15e>
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    4b2e:	d1a9      	bne.n	4a84 <usbd_work_handler+0xc4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4b30:	f841 5c08 	str.w	r5, [r1, #-8]
    4b34:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4b38:	69e0      	ldr	r0, [r4, #28]
    4b3a:	3914      	subs	r1, #20
    4b3c:	6163      	str	r3, [r4, #20]
    4b3e:	f006 f98b 	bl	ae58 <onoff_request>
    4b42:	e79f      	b.n	4a84 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
    4b44:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4b46:	f065 007f 	orn	r0, r5, #127	; 0x7f
    4b4a:	b2c0      	uxtb	r0, r0
    4b4c:	f7ff fd2c 	bl	45a8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4b50:	7a03      	ldrb	r3, [r0, #8]
    4b52:	b113      	cbz	r3, 4b5a <usbd_work_handler+0x19a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4b54:	7a40      	ldrb	r0, [r0, #9]
    4b56:	f004 f8f9 	bl	8d4c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    4b5a:	3501      	adds	r5, #1
    4b5c:	2d08      	cmp	r5, #8
    4b5e:	d1f2      	bne.n	4b46 <usbd_work_handler+0x186>
		if (ep_ctx->cfg.en) {
    4b60:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    4b64:	b11b      	cbz	r3, 4b6e <usbd_work_handler+0x1ae>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4b66:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    4b6a:	f004 f8ef 	bl	8d4c <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    4b6e:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4b70:	b2e8      	uxtb	r0, r5
    4b72:	f7ff fd19 	bl	45a8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4b76:	7a03      	ldrb	r3, [r0, #8]
    4b78:	b113      	cbz	r3, 4b80 <usbd_work_handler+0x1c0>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4b7a:	7a40      	ldrb	r0, [r0, #9]
    4b7c:	f004 f8e6 	bl	8d4c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    4b80:	3501      	adds	r5, #1
    4b82:	2d08      	cmp	r5, #8
    4b84:	d1f4      	bne.n	4b70 <usbd_work_handler+0x1b0>
		if (ep_ctx->cfg.en) {
    4b86:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4b8a:	b11b      	cbz	r3, 4b94 <usbd_work_handler+0x1d4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4b8c:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    4b90:	f004 f8dc 	bl	8d4c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    4b94:	2001      	movs	r0, #1
    4b96:	f003 fc65 	bl	8464 <nrfx_usbd_start>
		ctx->ready = true;
    4b9a:	2301      	movs	r3, #1
    4b9c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    4ba0:	6823      	ldr	r3, [r4, #0]
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	f43f af6e 	beq.w	4a84 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    4ba8:	2100      	movs	r1, #0
    4baa:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    4bac:	4798      	blx	r3
    4bae:	e769      	b.n	4a84 <usbd_work_handler+0xc4>
		ctx->ready = false;
    4bb0:	2500      	movs	r5, #0
    4bb2:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    4bb6:	f004 f859 	bl	8c6c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4bba:	f7ff fe23 	bl	4804 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    4bbe:	6823      	ldr	r3, [r4, #0]
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	f43f af5f 	beq.w	4a84 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    4bc6:	4629      	mov	r1, r5
    4bc8:	2004      	movs	r0, #4
    4bca:	e7ef      	b.n	4bac <usbd_work_handler+0x1ec>
		if (dev_ready()) {
    4bcc:	2b00      	cmp	r3, #0
    4bce:	f43f af59 	beq.w	4a84 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
    4bd2:	f004 f865 	bl	8ca0 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    4bd6:	6823      	ldr	r3, [r4, #0]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	f43f af53 	beq.w	4a84 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4bde:	2100      	movs	r1, #0
    4be0:	2005      	movs	r0, #5
    4be2:	e7e3      	b.n	4bac <usbd_work_handler+0x1ec>
		if (ctx->status_cb && dev_ready()) {
    4be4:	6822      	ldr	r2, [r4, #0]
    4be6:	2a00      	cmp	r2, #0
    4be8:	f43f af4c 	beq.w	4a84 <usbd_work_handler+0xc4>
    4bec:	2b00      	cmp	r3, #0
    4bee:	f43f af49 	beq.w	4a84 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4bf2:	2100      	movs	r1, #0
    4bf4:	2006      	movs	r0, #6
    4bf6:	4790      	blx	r2
    4bf8:	e744      	b.n	4a84 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4bfa:	f107 0510 	add.w	r5, r7, #16
    4bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4c06:	4628      	mov	r0, r5
    4c08:	f006 fff5 	bl	bbf6 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    4c0c:	f7ff fea4 	bl	4958 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4c10:	4628      	mov	r0, r5
    4c12:	f006 fff2 	bl	bbfa <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    4c16:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	f43f af32 	beq.w	4a84 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
    4c20:	2100      	movs	r1, #0
    4c22:	2001      	movs	r0, #1
    4c24:	e7c2      	b.n	4bac <usbd_work_handler+0x1ec>
	if (ep_ctx->cfg.en) {
    4c26:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4c2a:	b17b      	cbz	r3, 4c4c <usbd_work_handler+0x28c>
		ep_ctx->read_pending = true;
    4c2c:	2501      	movs	r5, #1
    4c2e:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    4c32:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    4c36:	f7ff fcfd 	bl	4634 <usbd_evt_alloc>
		if (!ev) {
    4c3a:	b138      	cbz	r0, 4c4c <usbd_work_handler+0x28c>
		ev->evt.ep_evt.ep = ep_ctx;
    4c3c:	4a15      	ldr	r2, [pc, #84]	; (4c94 <usbd_work_handler+0x2d4>)
		ev->evt_type = USBD_EVT_EP;
    4c3e:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4c40:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4c42:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    4c44:	f7ff fca2 	bl	458c <usbd_evt_put>
		usbd_work_schedule();
    4c48:	f7ff fca6 	bl	4598 <usbd_work_schedule>
			if (ctx->status_cb) {
    4c4c:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4c50:	2b00      	cmp	r3, #0
    4c52:	f43f af17 	beq.w	4a84 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
    4c56:	2100      	movs	r1, #0
    4c58:	200a      	movs	r0, #10
    4c5a:	e7a7      	b.n	4bac <usbd_work_handler+0x1ec>
	nrfx_power_usbevt_disable();
    4c5c:	f004 f8e2 	bl	8e24 <nrfx_usbreg_disable>
	nrfx_usbd_disable();
    4c60:	f004 f804 	bl	8c6c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4c64:	f003 fbbe 	bl	83e4 <nrfx_usbd_uninit>
	usbd_evt_flush();
    4c68:	f7ff fcd6 	bl	4618 <usbd_evt_flush>
	ret = eps_ctx_init();
    4c6c:	f7ff fe74 	bl	4958 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4c70:	f004 f8d0 	bl	8e14 <nrfx_usbreg_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4c74:	4808      	ldr	r0, [pc, #32]	; (4c98 <usbd_work_handler+0x2d8>)
    4c76:	f003 fc1d 	bl	84b4 <nrfx_usbd_init>
}
    4c7a:	e703      	b.n	4a84 <usbd_work_handler+0xc4>
    4c7c:	2001378c 	.word	0x2001378c
    4c80:	200022c8 	.word	0x200022c8
    4c84:	50036000 	.word	0x50036000
    4c88:	20013790 	.word	0x20013790
    4c8c:	200137c4 	.word	0x200137c4
    4c90:	200137ac 	.word	0x200137ac
    4c94:	200139f8 	.word	0x200139f8
    4c98:	0000483d 	.word	0x0000483d

00004c9c <usb_dc_attach>:
{
    4c9c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    4c9e:	4d15      	ldr	r5, [pc, #84]	; (4cf4 <usb_dc_attach+0x58>)
    4ca0:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    4ca4:	bb24      	cbnz	r4, 4cf0 <usb_dc_attach+0x54>
	return z_impl_k_mutex_init(mutex);
    4ca6:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4caa:	f009 f994 	bl	dfd6 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4cae:	2002      	movs	r0, #2
    4cb0:	f000 fb40 	bl	5334 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4cb4:	4622      	mov	r2, r4
    4cb6:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    4cb8:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4cba:	2036      	movs	r0, #54	; 0x36
    4cbc:	f7ff f858 	bl	3d70 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    4cc0:	f004 f8a8 	bl	8e14 <nrfx_usbreg_enable>
	ret = eps_ctx_init();
    4cc4:	f7ff fe48 	bl	4958 <eps_ctx_init>
	if (ret == 0) {
    4cc8:	4604      	mov	r4, r0
    4cca:	b910      	cbnz	r0, 4cd2 <usb_dc_attach+0x36>
		ctx->attached = true;
    4ccc:	2301      	movs	r3, #1
    4cce:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    4cd2:	4b09      	ldr	r3, [pc, #36]	; (4cf8 <usb_dc_attach+0x5c>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    4cd4:	681b      	ldr	r3, [r3, #0]
    4cd6:	b10b      	cbz	r3, 4cdc <usb_dc_attach+0x40>
		usbd_work_schedule();
    4cd8:	f7ff fc5e 	bl	4598 <usbd_work_schedule>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_usbreg_status_get(NRF_USBREG_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    4cdc:	4b07      	ldr	r3, [pc, #28]	; (4cfc <usb_dc_attach+0x60>)
    4cde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_usbreg_state_t nrfx_usbreg_usbstatus_get(void)
{
    uint32_t status = nrf_usbreg_status_get(NRF_USBREGULATOR);
    if (0 == (status & NRF_USBREG_STATUS_VBUSDETECT_MASK))
    4ce2:	07db      	lsls	r3, r3, #31
    4ce4:	d502      	bpl.n	4cec <usb_dc_attach+0x50>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    4ce6:	2000      	movs	r0, #0
    4ce8:	f7ff fd30 	bl	474c <usb_dc_power_event_handler>
}
    4cec:	4620      	mov	r0, r4
    4cee:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    4cf0:	2400      	movs	r4, #0
    4cf2:	e7fb      	b.n	4cec <usb_dc_attach+0x50>
    4cf4:	2001378c 	.word	0x2001378c
    4cf8:	20002348 	.word	0x20002348
    4cfc:	50037000 	.word	0x50037000

00004d00 <usb_dc_detach>:
{
    4d00:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d0a:	480b      	ldr	r0, [pc, #44]	; (4d38 <usb_dc_detach+0x38>)
    4d0c:	f006 ff73 	bl	bbf6 <k_mutex_lock.constprop.0.isra.0>
	usbd_evt_flush();
    4d10:	f7ff fc82 	bl	4618 <usbd_evt_flush>
	if (nrfx_usbd_is_enabled()) {
    4d14:	f003 fbc4 	bl	84a0 <nrfx_usbd_is_enabled>
    4d18:	b108      	cbz	r0, 4d1e <usb_dc_detach+0x1e>
		nrfx_usbd_disable();
    4d1a:	f003 ffa7 	bl	8c6c <nrfx_usbd_disable>
	ctx->attached = false;
    4d1e:	2400      	movs	r4, #0
	(void)hfxo_stop(ctx);
    4d20:	f7ff fd70 	bl	4804 <hfxo_stop.constprop.0.isra.0>
	nrfx_power_usbevt_disable();
    4d24:	f004 f87e 	bl	8e24 <nrfx_usbreg_disable>
	ctx->attached = false;
    4d28:	4804      	ldr	r0, [pc, #16]	; (4d3c <usb_dc_detach+0x3c>)
    4d2a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
	k_mutex_unlock(&ctx->drv_lock);
    4d2e:	3038      	adds	r0, #56	; 0x38
    4d30:	f006 ff63 	bl	bbfa <k_mutex_unlock.isra.0>
}
    4d34:	4620      	mov	r0, r4
    4d36:	bd10      	pop	{r4, pc}
    4d38:	200137c4 	.word	0x200137c4
    4d3c:	2001378c 	.word	0x2001378c

00004d40 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    4d40:	4b07      	ldr	r3, [pc, #28]	; (4d60 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    4d42:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4d46:	b13a      	cbz	r2, 4d58 <usb_dc_set_address+0x18>
    4d48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	bf14      	ite	ne
    4d50:	2000      	movne	r0, #0
    4d52:	f06f 0012 	mvneq.w	r0, #18
    4d56:	4770      	bx	lr
    4d58:	f06f 0012 	mvn.w	r0, #18
}
    4d5c:	4770      	bx	lr
    4d5e:	bf00      	nop
    4d60:	2001378c 	.word	0x2001378c

00004d64 <usb_dc_ep_configure>:
{
    4d64:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4d66:	4b10      	ldr	r3, [pc, #64]	; (4da8 <usb_dc_ep_configure+0x44>)
{
    4d68:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4d6e:	b1c3      	cbz	r3, 4da2 <usb_dc_ep_configure+0x3e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    4d70:	7805      	ldrb	r5, [r0, #0]
    4d72:	4628      	mov	r0, r5
    4d74:	f7ff fc18 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    4d78:	b910      	cbnz	r0, 4d80 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    4d7a:	f06f 0015 	mvn.w	r0, #21
}
    4d7e:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4d80:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    4d82:	7923      	ldrb	r3, [r4, #4]
    4d84:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    4d86:	8863      	ldrh	r3, [r4, #2]
    4d88:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4d8a:	7820      	ldrb	r0, [r4, #0]
    4d8c:	8861      	ldrh	r1, [r4, #2]
    4d8e:	f010 0f08 	tst.w	r0, #8
    4d92:	d102      	bne.n	4d9a <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    4d94:	1e4b      	subs	r3, r1, #1
    4d96:	420b      	tst	r3, r1
    4d98:	d1ef      	bne.n	4d7a <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4d9a:	f009 f846 	bl	de2a <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4d9e:	2000      	movs	r0, #0
    4da0:	e7ed      	b.n	4d7e <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    4da2:	f06f 0012 	mvn.w	r0, #18
    4da6:	e7ea      	b.n	4d7e <usb_dc_ep_configure+0x1a>
    4da8:	2001378c 	.word	0x2001378c

00004dac <usb_dc_ep_set_stall>:
{
    4dac:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4dae:	4b12      	ldr	r3, [pc, #72]	; (4df8 <usb_dc_ep_set_stall+0x4c>)
{
    4db0:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4db2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4db6:	b1ca      	cbz	r2, 4dec <usb_dc_ep_set_stall+0x40>
    4db8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4dbc:	b1b3      	cbz	r3, 4dec <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    4dbe:	f7ff fbf3 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    4dc2:	4604      	mov	r4, r0
    4dc4:	b1a8      	cbz	r0, 4df2 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    4dc6:	7a83      	ldrb	r3, [r0, #10]
    4dc8:	2b01      	cmp	r3, #1
    4dca:	d012      	beq.n	4df2 <usb_dc_ep_set_stall+0x46>
    4dcc:	d907      	bls.n	4dde <usb_dc_ep_set_stall+0x32>
    4dce:	3b02      	subs	r3, #2
    4dd0:	2b01      	cmp	r3, #1
    4dd2:	d907      	bls.n	4de4 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.len = 0U;
    4dd4:	2000      	movs	r0, #0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4dd6:	6963      	ldr	r3, [r4, #20]
	ep_ctx->buf.len = 0U;
    4dd8:	60e0      	str	r0, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4dda:	61a3      	str	r3, [r4, #24]
}
    4ddc:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
    4dde:	f003 fddb 	bl	8998 <nrfx_usbd_setup_stall>
		break;
    4de2:	e7f7      	b.n	4dd4 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    4de4:	4628      	mov	r0, r5
    4de6:	f003 fd47 	bl	8878 <nrfx_usbd_ep_stall>
		break;
    4dea:	e7f3      	b.n	4dd4 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    4dec:	f06f 0012 	mvn.w	r0, #18
    4df0:	e7f4      	b.n	4ddc <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    4df2:	f06f 0015 	mvn.w	r0, #21
    4df6:	e7f1      	b.n	4ddc <usb_dc_ep_set_stall+0x30>
    4df8:	2001378c 	.word	0x2001378c

00004dfc <usb_dc_ep_clear_stall>:
{
    4dfc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4dfe:	4b0e      	ldr	r3, [pc, #56]	; (4e38 <usb_dc_ep_clear_stall+0x3c>)
{
    4e00:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4e02:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4e06:	b182      	cbz	r2, 4e2a <usb_dc_ep_clear_stall+0x2e>
    4e08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4e0c:	b16b      	cbz	r3, 4e2a <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    4e0e:	f7ff fbcb 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    4e12:	b168      	cbz	r0, 4e30 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    4e14:	f015 0408 	ands.w	r4, r5, #8
    4e18:	d10a      	bne.n	4e30 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4e1a:	4628      	mov	r0, r5
    4e1c:	f003 fd4e 	bl	88bc <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4e20:	4628      	mov	r0, r5
    4e22:	f003 ffe7 	bl	8df4 <nrfx_usbd_ep_stall_clear>
	return 0;
    4e26:	4620      	mov	r0, r4
}
    4e28:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4e2a:	f06f 0012 	mvn.w	r0, #18
    4e2e:	e7fb      	b.n	4e28 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    4e30:	f06f 0015 	mvn.w	r0, #21
    4e34:	e7f8      	b.n	4e28 <usb_dc_ep_clear_stall+0x2c>
    4e36:	bf00      	nop
    4e38:	2001378c 	.word	0x2001378c

00004e3c <usb_dc_ep_is_stalled>:
{
    4e3c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4e3e:	4b0c      	ldr	r3, [pc, #48]	; (4e70 <usb_dc_ep_is_stalled+0x34>)
{
    4e40:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4e42:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4e46:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    4e48:	b162      	cbz	r2, 4e64 <usb_dc_ep_is_stalled+0x28>
    4e4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4e4e:	b14b      	cbz	r3, 4e64 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4e50:	f7ff fbaa 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    4e54:	b148      	cbz	r0, 4e6a <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    4e56:	b144      	cbz	r4, 4e6a <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4e58:	4628      	mov	r0, r5
    4e5a:	f003 fd15 	bl	8888 <nrfx_usbd_ep_stall_check>
    4e5e:	7020      	strb	r0, [r4, #0]
	return 0;
    4e60:	2000      	movs	r0, #0
}
    4e62:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4e64:	f06f 0012 	mvn.w	r0, #18
    4e68:	e7fb      	b.n	4e62 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4e6a:	f06f 0015 	mvn.w	r0, #21
    4e6e:	e7f8      	b.n	4e62 <usb_dc_ep_is_stalled+0x26>
    4e70:	2001378c 	.word	0x2001378c

00004e74 <usb_dc_ep_enable>:
{
    4e74:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    4e76:	4e13      	ldr	r6, [pc, #76]	; (4ec4 <usb_dc_ep_enable+0x50>)
{
    4e78:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4e7a:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    4e7e:	b1c3      	cbz	r3, 4eb2 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    4e80:	f7ff fb92 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    4e84:	4605      	mov	r5, r0
    4e86:	b1b8      	cbz	r0, 4eb8 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4e88:	0723      	lsls	r3, r4, #28
    4e8a:	d405      	bmi.n	4e98 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4e8c:	4620      	mov	r0, r4
    4e8e:	f003 fd15 	bl	88bc <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4e92:	4620      	mov	r0, r4
    4e94:	f003 ffae 	bl	8df4 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4e98:	7a2b      	ldrb	r3, [r5, #8]
    4e9a:	b983      	cbnz	r3, 4ebe <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    4e9c:	2301      	movs	r3, #1
    4e9e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4ea0:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    4ea4:	b90b      	cbnz	r3, 4eaa <usb_dc_ep_enable+0x36>
	return 0;
    4ea6:	2000      	movs	r0, #0
}
    4ea8:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    4eaa:	4620      	mov	r0, r4
    4eac:	f003 ff4e 	bl	8d4c <nrfx_usbd_ep_enable>
    4eb0:	e7f9      	b.n	4ea6 <usb_dc_ep_enable+0x32>
		return -ENODEV;
    4eb2:	f06f 0012 	mvn.w	r0, #18
    4eb6:	e7f7      	b.n	4ea8 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    4eb8:	f06f 0015 	mvn.w	r0, #21
    4ebc:	e7f4      	b.n	4ea8 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    4ebe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4ec2:	e7f1      	b.n	4ea8 <usb_dc_ep_enable+0x34>
    4ec4:	2001378c 	.word	0x2001378c

00004ec8 <usb_dc_ep_write>:
{
    4ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    4ecc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 4fb4 <usb_dc_ep_write+0xec>
{
    4ed0:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    4ed2:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    4ed6:	4607      	mov	r7, r0
    4ed8:	4689      	mov	r9, r1
    4eda:	4615      	mov	r5, r2
    4edc:	b085      	sub	sp, #20
	if (!dev_attached() || !dev_ready()) {
    4ede:	2b00      	cmp	r3, #0
    4ee0:	d061      	beq.n	4fa6 <usb_dc_ep_write+0xde>
    4ee2:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d05d      	beq.n	4fa6 <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    4eea:	0603      	lsls	r3, r0, #24
    4eec:	d55e      	bpl.n	4fac <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
    4eee:	f7ff fb5b 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    4ef2:	4604      	mov	r4, r0
    4ef4:	2800      	cmp	r0, #0
    4ef6:	d059      	beq.n	4fac <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
    4ef8:	7a03      	ldrb	r3, [r0, #8]
    4efa:	2b00      	cmp	r3, #0
    4efc:	d056      	beq.n	4fac <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f06:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4f0a:	f006 fe74 	bl	bbf6 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    4f0e:	7fa3      	ldrb	r3, [r4, #30]
    4f10:	b14b      	cbz	r3, 4f26 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    4f12:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4f16:	f006 fe70 	bl	bbfa <k_mutex_unlock.isra.0>
		return -EAGAIN;
    4f1a:	f06f 040a 	mvn.w	r4, #10
}
    4f1e:	4620      	mov	r0, r4
    4f20:	b005      	add	sp, #20
    4f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4f26:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    4f28:	b1c5      	cbz	r5, 4f5c <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4f2a:	b33b      	cbz	r3, 4f7c <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
    4f2c:	2301      	movs	r3, #1
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4f2e:	f04f 0800 	mov.w	r8, #0
	ep_ctx->write_in_progress = true;
    4f32:	77a3      	strb	r3, [r4, #30]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4f34:	4638      	mov	r0, r7
    4f36:	a901      	add	r1, sp, #4
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4f38:	e9cd 9501 	strd	r9, r5, [sp, #4]
    4f3c:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4f40:	f003 fafa 	bl	8538 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    4f44:	4b1c      	ldr	r3, [pc, #112]	; (4fb8 <usb_dc_ep_write+0xf0>)
    4f46:	4298      	cmp	r0, r3
    4f48:	d029      	beq.n	4f9e <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
    4f4a:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
    4f4e:	bb1e      	cbnz	r6, 4f98 <usb_dc_ep_write+0xd0>
		result = -EIO;
    4f50:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    4f54:	4819      	ldr	r0, [pc, #100]	; (4fbc <usb_dc_ep_write+0xf4>)
    4f56:	f006 fe50 	bl	bbfa <k_mutex_unlock.isra.0>
	return result;
    4f5a:	e7e0      	b.n	4f1e <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
    4f5c:	7fe2      	ldrb	r2, [r4, #31]
    4f5e:	b102      	cbz	r2, 4f62 <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
    4f60:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4f62:	2b00      	cmp	r3, #0
    4f64:	d1e2      	bne.n	4f2c <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    4f66:	f003 fd1f 	bl	89a8 <nrfx_usbd_last_setup_dir_get>
    4f6a:	42b8      	cmp	r0, r7
    4f6c:	d0de      	beq.n	4f2c <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
    4f6e:	f003 fd0b 	bl	8988 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    4f72:	4812      	ldr	r0, [pc, #72]	; (4fbc <usb_dc_ep_write+0xf4>)
    4f74:	f006 fe41 	bl	bbfa <k_mutex_unlock.isra.0>
		return 0;
    4f78:	2400      	movs	r4, #0
    4f7a:	e7d0      	b.n	4f1e <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4f7c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    4f80:	42ab      	cmp	r3, r5
    4f82:	d9f0      	bls.n	4f66 <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    4f84:	6862      	ldr	r2, [r4, #4]
    4f86:	fbb5 f3f2 	udiv	r3, r5, r2
    4f8a:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4f8e:	2b00      	cmp	r3, #0
    4f90:	d1e9      	bne.n	4f66 <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
    4f92:	2301      	movs	r3, #1
    4f94:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    4f96:	e7e6      	b.n	4f66 <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
    4f98:	f8c6 8000 	str.w	r8, [r6]
    4f9c:	e7d8      	b.n	4f50 <usb_dc_ep_write+0x88>
		if (ret_bytes) {
    4f9e:	b106      	cbz	r6, 4fa2 <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
    4fa0:	6035      	str	r5, [r6, #0]
	int result = 0;
    4fa2:	2400      	movs	r4, #0
    4fa4:	e7d6      	b.n	4f54 <usb_dc_ep_write+0x8c>
		return -ENODEV;
    4fa6:	f06f 0412 	mvn.w	r4, #18
    4faa:	e7b8      	b.n	4f1e <usb_dc_ep_write+0x56>
		return -EINVAL;
    4fac:	f06f 0415 	mvn.w	r4, #21
    4fb0:	e7b5      	b.n	4f1e <usb_dc_ep_write+0x56>
    4fb2:	bf00      	nop
    4fb4:	2001378c 	.word	0x2001378c
    4fb8:	0bad0000 	.word	0x0bad0000
    4fbc:	200137c4 	.word	0x200137c4

00004fc0 <usb_dc_ep_read_wait>:
{
    4fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fc4:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    4fc6:	4b20      	ldr	r3, [pc, #128]	; (5048 <usb_dc_ep_read_wait+0x88>)
{
    4fc8:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    4fca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4fce:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    4fd0:	2a00      	cmp	r2, #0
    4fd2:	d033      	beq.n	503c <usb_dc_ep_read_wait+0x7c>
    4fd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4fd8:	b383      	cbz	r3, 503c <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4fda:	0603      	lsls	r3, r0, #24
    4fdc:	d431      	bmi.n	5042 <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    4fde:	b901      	cbnz	r1, 4fe2 <usb_dc_ep_read_wait+0x22>
    4fe0:	bb7f      	cbnz	r7, 5042 <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    4fe2:	f7ff fae1 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    4fe6:	4604      	mov	r4, r0
    4fe8:	b358      	cbz	r0, 5042 <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    4fea:	7a03      	ldrb	r3, [r0, #8]
    4fec:	b34b      	cbz	r3, 5042 <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ff6:	4815      	ldr	r0, [pc, #84]	; (504c <usb_dc_ep_read_wait+0x8c>)
    4ff8:	f006 fdfd 	bl	bbf6 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    4ffc:	68e3      	ldr	r3, [r4, #12]
    4ffe:	46b8      	mov	r8, r7
    5000:	429f      	cmp	r7, r3
    5002:	bf28      	it	cs
    5004:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    5006:	b946      	cbnz	r6, 501a <usb_dc_ep_read_wait+0x5a>
    5008:	b93f      	cbnz	r7, 501a <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    500a:	b105      	cbz	r5, 500e <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    500c:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    500e:	480f      	ldr	r0, [pc, #60]	; (504c <usb_dc_ep_read_wait+0x8c>)
    5010:	f006 fdf3 	bl	bbfa <k_mutex_unlock.isra.0>
		return 0;
    5014:	2000      	movs	r0, #0
}
    5016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    501a:	4642      	mov	r2, r8
    501c:	4630      	mov	r0, r6
    501e:	69a1      	ldr	r1, [r4, #24]
    5020:	f006 fdb0 	bl	bb84 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    5024:	69a3      	ldr	r3, [r4, #24]
    5026:	4443      	add	r3, r8
    5028:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    502a:	68e3      	ldr	r3, [r4, #12]
    502c:	eba3 0308 	sub.w	r3, r3, r8
    5030:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    5032:	2d00      	cmp	r5, #0
    5034:	d0eb      	beq.n	500e <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    5036:	f8c5 8000 	str.w	r8, [r5]
    503a:	e7e8      	b.n	500e <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    503c:	f06f 0012 	mvn.w	r0, #18
    5040:	e7e9      	b.n	5016 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    5042:	f06f 0015 	mvn.w	r0, #21
    5046:	e7e6      	b.n	5016 <usb_dc_ep_read_wait+0x56>
    5048:	2001378c 	.word	0x2001378c
    504c:	200137c4 	.word	0x200137c4

00005050 <usb_dc_ep_read_continue>:
{
    5050:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    5052:	4d1e      	ldr	r5, [pc, #120]	; (50cc <usb_dc_ep_read_continue+0x7c>)
{
    5054:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    5056:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    505a:	b382      	cbz	r2, 50be <usb_dc_ep_read_continue+0x6e>
    505c:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    5060:	b36a      	cbz	r2, 50be <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5062:	061b      	lsls	r3, r3, #24
    5064:	d42e      	bmi.n	50c4 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    5066:	f7ff fa9f 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    506a:	4604      	mov	r4, r0
    506c:	b350      	cbz	r0, 50c4 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    506e:	7a03      	ldrb	r3, [r0, #8]
    5070:	b343      	cbz	r3, 50c4 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    507a:	f105 0038 	add.w	r0, r5, #56	; 0x38
    507e:	f006 fdba 	bl	bbf6 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    5082:	68e3      	ldr	r3, [r4, #12]
    5084:	b9b3      	cbnz	r3, 50b4 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    5086:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    5088:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    508a:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    508c:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    508e:	7f63      	ldrb	r3, [r4, #29]
    5090:	b183      	cbz	r3, 50b4 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    5092:	f7ff facf 	bl	4634 <usbd_evt_alloc>
			if (!ev) {
    5096:	b930      	cbnz	r0, 50a6 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    5098:	f105 0038 	add.w	r0, r5, #56	; 0x38
    509c:	f006 fdad 	bl	bbfa <k_mutex_unlock.isra.0>
				return -ENOMEM;
    50a0:	f06f 000b 	mvn.w	r0, #11
}
    50a4:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    50a6:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    50a8:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    50aa:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    50ac:	f7ff fa6e 	bl	458c <usbd_evt_put>
			usbd_work_schedule();
    50b0:	f7ff fa72 	bl	4598 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    50b4:	4806      	ldr	r0, [pc, #24]	; (50d0 <usb_dc_ep_read_continue+0x80>)
    50b6:	f006 fda0 	bl	bbfa <k_mutex_unlock.isra.0>
	return 0;
    50ba:	2000      	movs	r0, #0
    50bc:	e7f2      	b.n	50a4 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    50be:	f06f 0012 	mvn.w	r0, #18
    50c2:	e7ef      	b.n	50a4 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    50c4:	f06f 0015 	mvn.w	r0, #21
    50c8:	e7ec      	b.n	50a4 <usb_dc_ep_read_continue+0x54>
    50ca:	bf00      	nop
    50cc:	2001378c 	.word	0x2001378c
    50d0:	200137c4 	.word	0x200137c4

000050d4 <usb_dc_ep_set_callback>:
{
    50d4:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    50d6:	4b08      	ldr	r3, [pc, #32]	; (50f8 <usb_dc_ep_set_callback+0x24>)
{
    50d8:	460c      	mov	r4, r1
	if (!dev_attached()) {
    50da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    50de:	b12b      	cbz	r3, 50ec <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    50e0:	f7ff fa62 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    50e4:	b128      	cbz	r0, 50f2 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    50e6:	6004      	str	r4, [r0, #0]
	return 0;
    50e8:	2000      	movs	r0, #0
}
    50ea:	bd10      	pop	{r4, pc}
		return -ENODEV;
    50ec:	f06f 0012 	mvn.w	r0, #18
    50f0:	e7fb      	b.n	50ea <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    50f2:	f06f 0015 	mvn.w	r0, #21
    50f6:	e7f8      	b.n	50ea <usb_dc_ep_set_callback+0x16>
    50f8:	2001378c 	.word	0x2001378c

000050fc <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    50fc:	4b01      	ldr	r3, [pc, #4]	; (5104 <usb_dc_set_status_callback+0x8>)
    50fe:	6018      	str	r0, [r3, #0]
}
    5100:	4770      	bx	lr
    5102:	bf00      	nop
    5104:	2001378c 	.word	0x2001378c

00005108 <usb_dc_ep_mps>:
{
    5108:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    510a:	4b07      	ldr	r3, [pc, #28]	; (5128 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    510c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5110:	b123      	cbz	r3, 511c <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    5112:	f7ff fa49 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    5116:	b120      	cbz	r0, 5122 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    5118:	6840      	ldr	r0, [r0, #4]
}
    511a:	bd08      	pop	{r3, pc}
		return -ENODEV;
    511c:	f06f 0012 	mvn.w	r0, #18
    5120:	e7fb      	b.n	511a <usb_dc_ep_mps+0x12>
		return -EINVAL;
    5122:	f06f 0015 	mvn.w	r0, #21
    5126:	e7f8      	b.n	511a <usb_dc_ep_mps+0x12>
    5128:	2001378c 	.word	0x2001378c

0000512c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    512c:	4b08      	ldr	r3, [pc, #32]	; (5150 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    512e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5130:	1ac3      	subs	r3, r0, r3
{
    5132:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5134:	4907      	ldr	r1, [pc, #28]	; (5154 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    5136:	109b      	asrs	r3, r3, #2
{
    5138:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    513a:	4359      	muls	r1, r3
    513c:	2240      	movs	r2, #64	; 0x40
    513e:	4806      	ldr	r0, [pc, #24]	; (5158 <onoff_stop+0x2c>)
    5140:	f006 fdb9 	bl	bcb6 <stop>
	notify(mgr, res);
    5144:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5146:	4601      	mov	r1, r0
	notify(mgr, res);
    5148:	4620      	mov	r0, r4
}
    514a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    514e:	4718      	bx	r3
    5150:	20014030 	.word	0x20014030
    5154:	b6db6db7 	.word	0xb6db6db7
    5158:	0000e5e8 	.word	0x0000e5e8

0000515c <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    515c:	2340      	movs	r3, #64	; 0x40
{
    515e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5160:	4c0b      	ldr	r4, [pc, #44]	; (5190 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5162:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    5164:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5166:	460b      	mov	r3, r1
{
    5168:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    516a:	490a      	ldr	r1, [pc, #40]	; (5194 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    516c:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    516e:	4361      	muls	r1, r4
{
    5170:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5172:	4a09      	ldr	r2, [pc, #36]	; (5198 <onoff_start+0x3c>)
    5174:	4809      	ldr	r0, [pc, #36]	; (519c <onoff_start+0x40>)
    5176:	f006 fdcb 	bl	bd10 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    517a:	1e01      	subs	r1, r0, #0
    517c:	da05      	bge.n	518a <onoff_start+0x2e>
		notify(mgr, err);
    517e:	4630      	mov	r0, r6
    5180:	462b      	mov	r3, r5
	}
}
    5182:	b002      	add	sp, #8
    5184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    5188:	4718      	bx	r3
}
    518a:	b002      	add	sp, #8
    518c:	bd70      	pop	{r4, r5, r6, pc}
    518e:	bf00      	nop
    5190:	20014030 	.word	0x20014030
    5194:	b6db6db7 	.word	0xb6db6db7
    5198:	0000bd7d 	.word	0x0000bd7d
    519c:	0000e5e8 	.word	0x0000e5e8

000051a0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    51a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    51a4:	2200      	movs	r2, #0
    51a6:	2101      	movs	r1, #1
{
    51a8:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    51aa:	2005      	movs	r0, #5
    51ac:	f7fe fde0 	bl	3d70 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    51b0:	4811      	ldr	r0, [pc, #68]	; (51f8 <clk_init+0x58>)
    51b2:	f001 ff97 	bl	70e4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    51b6:	4b11      	ldr	r3, [pc, #68]	; (51fc <clk_init+0x5c>)
    51b8:	4298      	cmp	r0, r3
    51ba:	d119      	bne.n	51f0 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    51bc:	f001 ffa2 	bl	7104 <nrfx_clock_enable>
    51c0:	2400      	movs	r4, #0
	return &data->mgr[type];
    51c2:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    51c6:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    51c8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 5200 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    51cc:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    51ce:	4641      	mov	r1, r8
    51d0:	fb09 5004 	mla	r0, r9, r4, r5
    51d4:	f005 fe2d 	bl	ae32 <onoff_manager_init>
		if (err < 0) {
    51d8:	2800      	cmp	r0, #0
    51da:	db07      	blt.n	51ec <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    51dc:	2301      	movs	r3, #1
    51de:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    51e2:	441c      	add	r4, r3
    51e4:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    51e6:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    51e8:	d1f0      	bne.n	51cc <clk_init+0x2c>
	}

	return 0;
    51ea:	2000      	movs	r0, #0
}
    51ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    51f0:	f06f 0004 	mvn.w	r0, #4
    51f4:	e7fa      	b.n	51ec <clk_init+0x4c>
    51f6:	bf00      	nop
    51f8:	00005239 	.word	0x00005239
    51fc:	0bad0000 	.word	0x0bad0000
    5200:	0000eb60 	.word	0x0000eb60

00005204 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    5204:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5206:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    5208:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    520a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    520c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    520e:	4808      	ldr	r0, [pc, #32]	; (5230 <clkstarted_handle.constprop.0+0x2c>)
    5210:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    5212:	3378      	adds	r3, #120	; 0x78
    5214:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    5216:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    521a:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    521c:	f006 fd38 	bl	bc90 <set_on_state>
	if (callback) {
    5220:	b12d      	cbz	r5, 522e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5222:	4632      	mov	r2, r6
    5224:	462b      	mov	r3, r5
}
    5226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    522a:	4802      	ldr	r0, [pc, #8]	; (5234 <clkstarted_handle.constprop.0+0x30>)
    522c:	4718      	bx	r3
}
    522e:	bd70      	pop	{r4, r5, r6, pc}
    5230:	20014030 	.word	0x20014030
    5234:	0000e5e8 	.word	0x0000e5e8

00005238 <clock_event_handler>:
	switch (event) {
    5238:	2805      	cmp	r0, #5
    523a:	d811      	bhi.n	5260 <clock_event_handler+0x28>
    523c:	e8df f000 	tbb	[pc, r0]
    5240:	10100e03 	.word	0x10100e03
    5244:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5246:	4b07      	ldr	r3, [pc, #28]	; (5264 <clock_event_handler+0x2c>)
    5248:	6f98      	ldr	r0, [r3, #120]	; 0x78
    524a:	f010 0007 	ands.w	r0, r0, #7
    524e:	d107      	bne.n	5260 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5250:	f7ff bfd8 	b.w	5204 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    5254:	2002      	movs	r0, #2
    5256:	e7fb      	b.n	5250 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    5258:	2003      	movs	r0, #3
    525a:	e7f9      	b.n	5250 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    525c:	2001      	movs	r0, #1
    525e:	e7f7      	b.n	5250 <clock_event_handler+0x18>
}
    5260:	4770      	bx	lr
    5262:	bf00      	nop
    5264:	20014030 	.word	0x20014030

00005268 <generic_hfclk_start>:
{
    5268:	b508      	push	{r3, lr}
	__asm__ volatile(
    526a:	f04f 0320 	mov.w	r3, #32
    526e:	f3ef 8111 	mrs	r1, BASEPRI
    5272:	f383 8812 	msr	BASEPRI_MAX, r3
    5276:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    527a:	4a12      	ldr	r2, [pc, #72]	; (52c4 <generic_hfclk_start+0x5c>)
    527c:	6813      	ldr	r3, [r2, #0]
    527e:	f043 0002 	orr.w	r0, r3, #2
    5282:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5284:	07da      	lsls	r2, r3, #31
    5286:	d408      	bmi.n	529a <generic_hfclk_start+0x32>
	__asm__ volatile(
    5288:	f381 8811 	msr	BASEPRI, r1
    528c:	f3bf 8f6f 	isb	sy
}
    5290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5294:	2001      	movs	r0, #1
    5296:	f008 bc80 	b.w	db9a <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    529a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    529e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    52a2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    52a6:	07d3      	lsls	r3, r2, #31
    52a8:	d5ee      	bpl.n	5288 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    52aa:	4807      	ldr	r0, [pc, #28]	; (52c8 <generic_hfclk_start+0x60>)
    52ac:	f006 fcf0 	bl	bc90 <set_on_state>
    52b0:	f381 8811 	msr	BASEPRI, r1
    52b4:	f3bf 8f6f 	isb	sy
}
    52b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    52bc:	2000      	movs	r0, #0
    52be:	f7ff bfa1 	b.w	5204 <clkstarted_handle.constprop.0>
    52c2:	bf00      	nop
    52c4:	200140d0 	.word	0x200140d0
    52c8:	200140a8 	.word	0x200140a8

000052cc <api_blocking_start>:
{
    52cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    52ce:	2200      	movs	r2, #0
    52d0:	2301      	movs	r3, #1
    52d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    52d6:	466b      	mov	r3, sp
    52d8:	4a08      	ldr	r2, [pc, #32]	; (52fc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    52da:	f8cd d000 	str.w	sp, [sp]
    52de:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    52e2:	f006 fd44 	bl	bd6e <api_start>
	if (err < 0) {
    52e6:	2800      	cmp	r0, #0
    52e8:	db05      	blt.n	52f6 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    52ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    52ee:	2300      	movs	r3, #0
    52f0:	4668      	mov	r0, sp
    52f2:	f004 f8db 	bl	94ac <z_impl_k_sem_take>
}
    52f6:	b005      	add	sp, #20
    52f8:	f85d fb04 	ldr.w	pc, [sp], #4
    52fc:	0000bdb3 	.word	0x0000bdb3

00005300 <generic_hfclk_stop>:
{
    5300:	b510      	push	{r4, lr}
	__asm__ volatile(
    5302:	f04f 0320 	mov.w	r3, #32
    5306:	f3ef 8411 	mrs	r4, BASEPRI
    530a:	f383 8812 	msr	BASEPRI_MAX, r3
    530e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    5312:	4a07      	ldr	r2, [pc, #28]	; (5330 <generic_hfclk_stop+0x30>)
    5314:	6813      	ldr	r3, [r2, #0]
    5316:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    531a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    531c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    531e:	d402      	bmi.n	5326 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5320:	2001      	movs	r0, #1
    5322:	f008 fc99 	bl	dc58 <nrfx_clock_stop>
	__asm__ volatile(
    5326:	f384 8811 	msr	BASEPRI, r4
    532a:	f3bf 8f6f 	isb	sy
}
    532e:	bd10      	pop	{r4, pc}
    5330:	200140d0 	.word	0x200140d0

00005334 <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
    5334:	b2c3      	uxtb	r3, r0
}
    5336:	201c      	movs	r0, #28
    5338:	4a01      	ldr	r2, [pc, #4]	; (5340 <z_nrf_clock_control_get_onoff+0xc>)
    533a:	fb03 2000 	mla	r0, r3, r0, r2
    533e:	4770      	bx	lr
    5340:	20014030 	.word	0x20014030

00005344 <z_nrf_clock_control_lf_on>:
{
    5344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5348:	2201      	movs	r2, #1
    534a:	4607      	mov	r7, r0
    534c:	4937      	ldr	r1, [pc, #220]	; (542c <z_nrf_clock_control_lf_on+0xe8>)
    534e:	e8d1 3fef 	ldaex	r3, [r1]
    5352:	e8c1 2fe0 	stlex	r0, r2, [r1]
    5356:	2800      	cmp	r0, #0
    5358:	d1f9      	bne.n	534e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    535a:	b933      	cbnz	r3, 536a <z_nrf_clock_control_lf_on+0x26>
    535c:	4934      	ldr	r1, [pc, #208]	; (5430 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    535e:	4835      	ldr	r0, [pc, #212]	; (5434 <z_nrf_clock_control_lf_on+0xf0>)
    5360:	604b      	str	r3, [r1, #4]
    5362:	60cb      	str	r3, [r1, #12]
    5364:	608a      	str	r2, [r1, #8]
    5366:	f005 fd77 	bl	ae58 <onoff_request>
	switch (start_mode) {
    536a:	1e7b      	subs	r3, r7, #1
    536c:	2b01      	cmp	r3, #1
    536e:	d82b      	bhi.n	53c8 <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5370:	2f01      	cmp	r7, #1
    5372:	d107      	bne.n	5384 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5374:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5378:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    537c:	f003 0303 	and.w	r3, r3, #3
    5380:	2b02      	cmp	r3, #2
    5382:	d021      	beq.n	53c8 <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5384:	f008 fe08 	bl	df98 <k_is_in_isr>
    5388:	4605      	mov	r5, r0
    538a:	b9f8      	cbnz	r0, 53cc <z_nrf_clock_control_lf_on+0x88>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    538c:	4b2a      	ldr	r3, [pc, #168]	; (5438 <z_nrf_clock_control_lf_on+0xf4>)
    538e:	781b      	ldrb	r3, [r3, #0]
    5390:	b1e3      	cbz	r3, 53cc <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    5392:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5396:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    5398:	4606      	mov	r6, r0
    539a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    539e:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    53a2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 543c <z_nrf_clock_control_lf_on+0xf8>
    53a6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    53aa:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    53ae:	03d2      	lsls	r2, r2, #15
    53b0:	d516      	bpl.n	53e0 <z_nrf_clock_control_lf_on+0x9c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    53b2:	f003 0303 	and.w	r3, r3, #3
    53b6:	2b02      	cmp	r3, #2
    53b8:	d001      	beq.n	53be <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    53ba:	2f01      	cmp	r7, #1
    53bc:	d110      	bne.n	53e0 <z_nrf_clock_control_lf_on+0x9c>
	if (isr_mode) {
    53be:	b375      	cbz	r5, 541e <z_nrf_clock_control_lf_on+0xda>
    53c0:	f386 8811 	msr	BASEPRI, r6
    53c4:	f3bf 8f6f 	isb	sy
}
    53c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    53cc:	f04f 0320 	mov.w	r3, #32
    53d0:	f3ef 8611 	mrs	r6, BASEPRI
    53d4:	f383 8812 	msr	BASEPRI_MAX, r3
    53d8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    53dc:	2501      	movs	r5, #1
    53de:	e7de      	b.n	539e <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    53e0:	b1c5      	cbz	r5, 5414 <z_nrf_clock_control_lf_on+0xd0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    53e2:	4630      	mov	r0, r6
    53e4:	f7fe fc82 	bl	3cec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    53e8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    53ec:	b2db      	uxtb	r3, r3
    53ee:	2b01      	cmp	r3, #1
    53f0:	d1d9      	bne.n	53a6 <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    53f2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    53f6:	2a00      	cmp	r2, #0
    53f8:	d0d5      	beq.n	53a6 <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53fa:	2200      	movs	r2, #0
    53fc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    5400:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    5404:	2202      	movs	r2, #2
    5406:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    540a:	2220      	movs	r2, #32
    540c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5410:	60a3      	str	r3, [r4, #8]
}
    5412:	e7c8      	b.n	53a6 <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    5414:	2100      	movs	r1, #0
    5416:	2021      	movs	r0, #33	; 0x21
    5418:	f004 fb8a 	bl	9b30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    541c:	e7e4      	b.n	53e8 <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENSET = mask;
    541e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5422:	2202      	movs	r2, #2
    5424:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5428:	e7ce      	b.n	53c8 <z_nrf_clock_control_lf_on+0x84>
    542a:	bf00      	nop
    542c:	2001402c 	.word	0x2001402c
    5430:	2001401c 	.word	0x2001401c
    5434:	2001404c 	.word	0x2001404c
    5438:	20056806 	.word	0x20056806
    543c:	e000e100 	.word	0xe000e100

00005440 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    5440:	b530      	push	{r4, r5, lr}
	return port->config;
    5442:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5444:	f001 041f 	and.w	r4, r1, #31
    5448:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    544a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    544e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5450:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5454:	d105      	bne.n	5462 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    5456:	4620      	mov	r0, r4
    5458:	f002 f904 	bl	7664 <nrfx_gpiote_trigger_disable>

		return 0;
    545c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    545e:	b005      	add	sp, #20
    5460:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    5462:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    5464:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5468:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    546c:	d114      	bne.n	5498 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    546e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5472:	bf0c      	ite	eq
    5474:	2304      	moveq	r3, #4
    5476:	2305      	movne	r3, #5
    5478:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    547c:	2300      	movs	r3, #0
    547e:	4620      	mov	r0, r4
    5480:	4619      	mov	r1, r3
    5482:	aa02      	add	r2, sp, #8
    5484:	f001 ff2c 	bl	72e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5488:	4b1f      	ldr	r3, [pc, #124]	; (5508 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    548a:	4298      	cmp	r0, r3
    548c:	d138      	bne.n	5500 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    548e:	2101      	movs	r1, #1
    5490:	4620      	mov	r0, r4
    5492:	f002 f8a1 	bl	75d8 <nrfx_gpiote_trigger_enable>
	return 0;
    5496:	e7e1      	b.n	545c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5498:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    549c:	d025      	beq.n	54ea <gpio_nrfx_pin_interrupt_configure+0xaa>
    549e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    54a2:	bf14      	ite	ne
    54a4:	2301      	movne	r3, #1
    54a6:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    54a8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    54ac:	6883      	ldr	r3, [r0, #8]
    54ae:	40cb      	lsrs	r3, r1
    54b0:	07d9      	lsls	r1, r3, #31
    54b2:	d4e3      	bmi.n	547c <gpio_nrfx_pin_interrupt_configure+0x3c>
    54b4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    54b8:	d1e0      	bne.n	547c <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    54ba:	4a14      	ldr	r2, [pc, #80]	; (550c <gpio_nrfx_pin_interrupt_configure+0xcc>)
    54bc:	4814      	ldr	r0, [pc, #80]	; (5510 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    54be:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    54c0:	2901      	cmp	r1, #1
    54c2:	bf08      	it	eq
    54c4:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    54c6:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    54ca:	3380      	adds	r3, #128	; 0x80
    54cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    54d0:	07db      	lsls	r3, r3, #31
    54d2:	d4d3      	bmi.n	547c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    54d4:	f10d 0507 	add.w	r5, sp, #7
    54d8:	4629      	mov	r1, r5
    54da:	4620      	mov	r0, r4
    54dc:	f002 f828 	bl	7530 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    54e0:	4b0c      	ldr	r3, [pc, #48]	; (5514 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    54e2:	4298      	cmp	r0, r3
    54e4:	d003      	beq.n	54ee <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    54e6:	9503      	str	r5, [sp, #12]
    54e8:	e7c8      	b.n	547c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    54ea:	2303      	movs	r3, #3
    54ec:	e7dc      	b.n	54a8 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    54ee:	4628      	mov	r0, r5
    54f0:	f002 f86c 	bl	75cc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    54f4:	4b04      	ldr	r3, [pc, #16]	; (5508 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    54f6:	4298      	cmp	r0, r3
    54f8:	d0f5      	beq.n	54e6 <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    54fa:	f06f 000b 	mvn.w	r0, #11
    54fe:	e7ae      	b.n	545e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    5500:	f06f 0015 	mvn.w	r0, #21
    5504:	e7ab      	b.n	545e <gpio_nrfx_pin_interrupt_configure+0x1e>
    5506:	bf00      	nop
    5508:	0bad0000 	.word	0x0bad0000
    550c:	50842500 	.word	0x50842500
    5510:	50842800 	.word	0x50842800
    5514:	0bad0004 	.word	0x0bad0004

00005518 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5518:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    551a:	f002 f847 	bl	75ac <nrfx_gpiote_is_init>
    551e:	4604      	mov	r4, r0
    5520:	b968      	cbnz	r0, 553e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5522:	f002 f81b 	bl	755c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5526:	4b08      	ldr	r3, [pc, #32]	; (5548 <gpio_nrfx_init+0x30>)
    5528:	4298      	cmp	r0, r3
    552a:	d10a      	bne.n	5542 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    552c:	4621      	mov	r1, r4
    552e:	4807      	ldr	r0, [pc, #28]	; (554c <gpio_nrfx_init+0x34>)
    5530:	f001 fff8 	bl	7524 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5534:	4622      	mov	r2, r4
    5536:	2105      	movs	r1, #5
    5538:	200d      	movs	r0, #13
    553a:	f7fe fc19 	bl	3d70 <z_arm_irq_priority_set>
		return 0;
    553e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5540:	bd10      	pop	{r4, pc}
		return -EIO;
    5542:	f06f 0004 	mvn.w	r0, #4
    5546:	e7fb      	b.n	5540 <gpio_nrfx_init+0x28>
    5548:	0bad0000 	.word	0x0bad0000
    554c:	00005551 	.word	0x00005551

00005550 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5550:	0942      	lsrs	r2, r0, #5
{
    5552:	4603      	mov	r3, r0
    5554:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5556:	d002      	beq.n	555e <nrfx_gpio_handler+0xe>
    5558:	2a01      	cmp	r2, #1
    555a:	d017      	beq.n	558c <nrfx_gpio_handler+0x3c>
}
    555c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    555e:	4e0d      	ldr	r6, [pc, #52]	; (5594 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    5560:	6932      	ldr	r2, [r6, #16]
    5562:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5564:	2900      	cmp	r1, #0
    5566:	d0f9      	beq.n	555c <nrfx_gpio_handler+0xc>
    5568:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    556a:	f003 031f 	and.w	r3, r3, #31
	return node->next;
    556e:	680c      	ldr	r4, [r1, #0]
    5570:	409d      	lsls	r5, r3
    5572:	2900      	cmp	r1, #0
    5574:	d0f2      	beq.n	555c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    5576:	688a      	ldr	r2, [r1, #8]
    5578:	402a      	ands	r2, r5
    557a:	d002      	beq.n	5582 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    557c:	4630      	mov	r0, r6
    557e:	684b      	ldr	r3, [r1, #4]
    5580:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5582:	b12c      	cbz	r4, 5590 <nrfx_gpio_handler+0x40>
    5584:	6823      	ldr	r3, [r4, #0]
    5586:	4621      	mov	r1, r4
    5588:	461c      	mov	r4, r3
    558a:	e7f2      	b.n	5572 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    558c:	4e02      	ldr	r6, [pc, #8]	; (5598 <nrfx_gpio_handler+0x48>)
    558e:	e7e7      	b.n	5560 <nrfx_gpio_handler+0x10>
    5590:	4623      	mov	r3, r4
    5592:	e7f8      	b.n	5586 <nrfx_gpio_handler+0x36>
    5594:	0000e618 	.word	0x0000e618
    5598:	0000e600 	.word	0x0000e600

0000559c <gpio_nrfx_pin_configure>:
{
    559c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    55a0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    55a2:	f001 051f 	and.w	r5, r1, #31
    55a6:	7b3b      	ldrb	r3, [r7, #12]
{
    55a8:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    55aa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    55ae:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    55b0:	4628      	mov	r0, r5
    55b2:	f10d 0103 	add.w	r1, sp, #3
    55b6:	f001 ffbb 	bl	7530 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    55ba:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    55be:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    55c0:	d10b      	bne.n	55da <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    55c2:	4628      	mov	r0, r5
    55c4:	f002 f876 	bl	76b4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    55c8:	4b3c      	ldr	r3, [pc, #240]	; (56bc <gpio_nrfx_pin_configure+0x120>)
    55ca:	4598      	cmp	r8, r3
    55cc:	d103      	bne.n	55d6 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    55ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
    55d2:	f001 fff5 	bl	75c0 <nrfx_gpiote_channel_free>
		return 0;
    55d6:	2000      	movs	r0, #0
    55d8:	e00c      	b.n	55f4 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    55da:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    55dc:	4628      	mov	r0, r5
    55de:	4619      	mov	r1, r3
    55e0:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    55e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    55e6:	f001 fe7b 	bl	72e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    55ea:	4b34      	ldr	r3, [pc, #208]	; (56bc <gpio_nrfx_pin_configure+0x120>)
    55ec:	4298      	cmp	r0, r3
    55ee:	d004      	beq.n	55fa <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    55f0:	f06f 0015 	mvn.w	r0, #21
}
    55f4:	b004      	add	sp, #16
    55f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    55fa:	4580      	cmp	r8, r0
    55fc:	d103      	bne.n	5606 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    55fe:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5602:	f001 ffdd 	bl	75c0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    5606:	03a3      	lsls	r3, r4, #14
    5608:	d549      	bpl.n	569e <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    560a:	f240 3306 	movw	r3, #774	; 0x306
    560e:	4023      	ands	r3, r4
    5610:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    5614:	d019      	beq.n	564a <gpio_nrfx_pin_configure+0xae>
    5616:	d80c      	bhi.n	5632 <gpio_nrfx_pin_configure+0x96>
    5618:	2b06      	cmp	r3, #6
    561a:	d017      	beq.n	564c <gpio_nrfx_pin_configure+0xb0>
    561c:	d804      	bhi.n	5628 <gpio_nrfx_pin_configure+0x8c>
    561e:	b1ab      	cbz	r3, 564c <gpio_nrfx_pin_configure+0xb0>
    5620:	2b02      	cmp	r3, #2
    5622:	d1e5      	bne.n	55f0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    5624:	2304      	movs	r3, #4
    5626:	e011      	b.n	564c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    562c:	d1e0      	bne.n	55f0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    562e:	2301      	movs	r3, #1
    5630:	e00c      	b.n	564c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5632:	f240 2202 	movw	r2, #514	; 0x202
    5636:	4293      	cmp	r3, r2
    5638:	d026      	beq.n	5688 <gpio_nrfx_pin_configure+0xec>
    563a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    563e:	d025      	beq.n	568c <gpio_nrfx_pin_configure+0xf0>
    5640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5644:	d1d4      	bne.n	55f0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    5646:	2302      	movs	r3, #2
    5648:	e000      	b.n	564c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    564a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    564c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5650:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5654:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    5658:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    565a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    565e:	bf4c      	ite	mi
    5660:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    5662:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5666:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    5668:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    566c:	d510      	bpl.n	5690 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    566e:	2301      	movs	r3, #1
    5670:	687a      	ldr	r2, [r7, #4]
    5672:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    5674:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5676:	2200      	movs	r2, #0
    5678:	4628      	mov	r0, r5
    567a:	a901      	add	r1, sp, #4
    567c:	f001 fede 	bl	743c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5680:	4b0e      	ldr	r3, [pc, #56]	; (56bc <gpio_nrfx_pin_configure+0x120>)
    5682:	4298      	cmp	r0, r3
    5684:	d0a7      	beq.n	55d6 <gpio_nrfx_pin_configure+0x3a>
    5686:	e7b3      	b.n	55f0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    5688:	2305      	movs	r3, #5
    568a:	e7df      	b.n	564c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    568c:	2303      	movs	r3, #3
    568e:	e7dd      	b.n	564c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5690:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5692:	bf41      	itttt	mi
    5694:	2301      	movmi	r3, #1
    5696:	687a      	ldrmi	r2, [r7, #4]
    5698:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    569a:	60d3      	strmi	r3, [r2, #12]
}
    569c:	e7eb      	b.n	5676 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    569e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    56a0:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    56a4:	bf4c      	ite	mi
    56a6:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    56a8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    56ac:	461a      	mov	r2, r3
    56ae:	4628      	mov	r0, r5
    56b0:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    56b2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    56b6:	f001 fe13 	bl	72e0 <nrfx_gpiote_input_configure>
    56ba:	e7e1      	b.n	5680 <gpio_nrfx_pin_configure+0xe4>
    56bc:	0bad0000 	.word	0x0bad0000

000056c0 <regulator_fixed_enable>:
struct regulator_fixed_data {
	struct regulator_common_data common;
};

static int regulator_fixed_enable(const struct device *dev)
{
    56c0:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_fixed_config *cfg = dev->config;
    56c2:	6845      	ldr	r5, [r0, #4]
	int ret;

	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    56c4:	7c29      	ldrb	r1, [r5, #16]
    56c6:	f011 0401 	ands.w	r4, r1, #1
    56ca:	d116      	bne.n	56fa <regulator_fixed_enable+0x3a>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    56cc:	2201      	movs	r2, #1
    56ce:	7b29      	ldrb	r1, [r5, #12]
    56d0:	68a8      	ldr	r0, [r5, #8]
    56d2:	f006 fbf6 	bl	bec2 <gpio_pin_set>
		return 0;
	}

	ret = gpio_pin_set_dt(&cfg->enable, 1);
	if (ret < 0) {
    56d6:	2800      	cmp	r0, #0
    56d8:	db10      	blt.n	56fc <regulator_fixed_enable+0x3c>
		return ret;
	}

	if (cfg->off_on_delay_us > 0U) {
    56da:	686d      	ldr	r5, [r5, #4]
    56dc:	b16d      	cbz	r5, 56fa <regulator_fixed_enable+0x3a>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    56de:	4908      	ldr	r1, [pc, #32]	; (5700 <regulator_fixed_enable+0x40>)
    56e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    56e4:	468c      	mov	ip, r1
    56e6:	4621      	mov	r1, r4
    56e8:	fbe5 c100 	umlal	ip, r1, r5, r0
    56ec:	2300      	movs	r3, #0
    56ee:	4660      	mov	r0, ip
    56f0:	4a04      	ldr	r2, [pc, #16]	; (5704 <regulator_fixed_enable+0x44>)
    56f2:	f7fa fd2f 	bl	154 <__aeabi_uldivmod>
    56f6:	f004 fa1b 	bl	9b30 <z_impl_k_sleep>
		return 0;
    56fa:	2000      	movs	r0, #0
		k_sleep(K_USEC(cfg->off_on_delay_us));
	}

	return 0;
}
    56fc:	bd38      	pop	{r3, r4, r5, pc}
    56fe:	bf00      	nop
    5700:	000f423f 	.word	0x000f423f
    5704:	000f4240 	.word	0x000f4240

00005708 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
    5708:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
    570c:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
    5710:	280a      	cmp	r0, #10
    5712:	bf9a      	itte	ls
    5714:	4b02      	ldrls	r3, [pc, #8]	; (5720 <qspi_get_zephyr_ret_code+0x18>)
    5716:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
    571a:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
    571e:	4770      	bx	lr
    5720:	0000ef08 	.word	0x0000ef08

00005724 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
    5724:	4b02      	ldr	r3, [pc, #8]	; (5730 <qspi_nor_pages_layout+0xc>)
    5726:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5728:	2301      	movs	r3, #1
    572a:	6013      	str	r3, [r2, #0]
}
    572c:	4770      	bx	lr
    572e:	bf00      	nop
    5730:	0000ecb4 	.word	0x0000ecb4

00005734 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
    5734:	4800      	ldr	r0, [pc, #0]	; (5738 <qspi_flash_get_parameters+0x4>)
    5736:	4770      	bx	lr
    5738:	0000ec50 	.word	0x0000ec50

0000573c <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
    573c:	4b05      	ldr	r3, [pc, #20]	; (5754 <qspi_wait_for_completion.isra.0+0x18>)
    573e:	4299      	cmp	r1, r3
    5740:	d106      	bne.n	5750 <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
    5742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    574a:	3020      	adds	r0, #32
    574c:	f003 beae 	b.w	94ac <z_impl_k_sem_take>
}
    5750:	4770      	bx	lr
    5752:	bf00      	nop
    5754:	0bad0000 	.word	0x0bad0000

00005758 <qspi_device_init>:
{
    5758:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
    575a:	6905      	ldr	r5, [r0, #16]
{
    575c:	4604      	mov	r4, r0
	if (!qspi_initialized) {
    575e:	4e0f      	ldr	r6, [pc, #60]	; (579c <qspi_device_init+0x44>)
	qspi_lock(dev);
    5760:	4628      	mov	r0, r5
    5762:	f006 fbf3 	bl	bf4c <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
    5766:	f105 0030 	add.w	r0, r5, #48	; 0x30
    576a:	f006 fbe7 	bl	bf3c <k_sem_give>
	if (!qspi_initialized) {
    576e:	7833      	ldrb	r3, [r6, #0]
    5770:	b98b      	cbnz	r3, 5796 <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    5772:	462a      	mov	r2, r5
    5774:	490a      	ldr	r1, [pc, #40]	; (57a0 <qspi_device_init+0x48>)
    5776:	6860      	ldr	r0, [r4, #4]
    5778:	f002 faa8 	bl	7ccc <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
    577c:	f7ff ffc4 	bl	5708 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
    5780:	fab0 f380 	clz	r3, r0
    5784:	4605      	mov	r5, r0
    5786:	095b      	lsrs	r3, r3, #5
    5788:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
    578a:	6920      	ldr	r0, [r4, #16]
    578c:	3010      	adds	r0, #16
    578e:	f006 fbd5 	bl	bf3c <k_sem_give>
}
    5792:	4628      	mov	r0, r5
    5794:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    5796:	2500      	movs	r5, #0
    5798:	e7f7      	b.n	578a <qspi_device_init+0x32>
    579a:	bf00      	nop
    579c:	200167ff 	.word	0x200167ff
    57a0:	0000bf41 	.word	0x0000bf41

000057a4 <qspi_device_uninit>:
{
    57a4:	b538      	push	{r3, r4, r5, lr}
    57a6:	4604      	mov	r4, r0
	qspi_lock(dev);
    57a8:	6900      	ldr	r0, [r0, #16]
    57aa:	f006 fbcf 	bl	bf4c <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
    57ae:	6925      	ldr	r5, [r4, #16]
    57b0:	2200      	movs	r2, #0
    57b2:	2300      	movs	r3, #0
    57b4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    57b8:	f003 fe78 	bl	94ac <z_impl_k_sem_take>
	if (last) {
    57bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
    57be:	b94b      	cbnz	r3, 57d4 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
    57c0:	4d0a      	ldr	r5, [pc, #40]	; (57ec <qspi_device_uninit+0x48>)
    57c2:	f002 fb9d 	bl	7f00 <nrfx_qspi_mem_busy_check>
    57c6:	42a8      	cmp	r0, r5
    57c8:	d10a      	bne.n	57e0 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
    57ca:	f002 fbbb 	bl	7f44 <nrfx_qspi_uninit>
		qspi_initialized = false;
    57ce:	2200      	movs	r2, #0
    57d0:	4b07      	ldr	r3, [pc, #28]	; (57f0 <qspi_device_uninit+0x4c>)
    57d2:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
    57d4:	6920      	ldr	r0, [r4, #16]
}
    57d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
    57da:	3010      	adds	r0, #16
    57dc:	f006 bbae 	b.w	bf3c <k_sem_give>
	return z_impl_k_sleep(timeout);
    57e0:	2100      	movs	r1, #0
    57e2:	f240 6067 	movw	r0, #1639	; 0x667
    57e6:	f004 f9a3 	bl	9b30 <z_impl_k_sleep>
    57ea:	e7ea      	b.n	57c2 <qspi_device_uninit+0x1e>
    57ec:	0bad0000 	.word	0x0bad0000
    57f0:	200167ff 	.word	0x200167ff

000057f4 <qspi_nor_read>:
{
    57f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57f8:	4607      	mov	r7, r0
    57fa:	4688      	mov	r8, r1
    57fc:	461c      	mov	r4, r3
	if (!dest) {
    57fe:	4616      	mov	r6, r2
{
    5800:	b085      	sub	sp, #20
	if (!dest) {
    5802:	2a00      	cmp	r2, #0
    5804:	f000 809a 	beq.w	593c <qspi_nor_read+0x148>
	if (!size) {
    5808:	2b00      	cmp	r3, #0
    580a:	f000 8095 	beq.w	5938 <qspi_nor_read+0x144>
	if (addr < 0 ||
    580e:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
    5810:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
    5812:	f2c0 8093 	blt.w	593c <qspi_nor_read+0x148>
    5816:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    5818:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
    581a:	4293      	cmp	r3, r2
    581c:	f200 808e 	bhi.w	593c <qspi_nor_read+0x148>
	int rc = qspi_device_init(dev);
    5820:	f7ff ff9a 	bl	5758 <qspi_device_init>
	if (rc != 0) {
    5824:	4605      	mov	r5, r0
    5826:	2800      	cmp	r0, #0
    5828:	d17f      	bne.n	592a <qspi_nor_read+0x136>
	qspi_lock(dev);
    582a:	f1c8 0500 	rsb	r5, r8, #0
    582e:	f005 0503 	and.w	r5, r5, #3
    5832:	6938      	ldr	r0, [r7, #16]
    5834:	f006 fb8a 	bl	bf4c <qspi_lock.isra.0>
	if (flash_prefix > size) {
    5838:	42a5      	cmp	r5, r4
    583a:	bf28      	it	cs
    583c:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
    583e:	4273      	negs	r3, r6
    5840:	f003 0303 	and.w	r3, r3, #3
    5844:	f006 0903 	and.w	r9, r6, #3
    5848:	bf58      	it	pl
    584a:	f1c3 0900 	rsbpl	r9, r3, #0
    584e:	f1c9 0900 	rsb	r9, r9, #0
    5852:	f009 0903 	and.w	r9, r9, #3
    5856:	45a1      	cmp	r9, r4
    5858:	bf28      	it	cs
    585a:	46a1      	movcs	r9, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    585c:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
    585e:	eba4 0409 	sub.w	r4, r4, r9
    5862:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
    5866:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
    586a:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
    586c:	bfc8      	it	gt
    586e:	46a2      	movgt	sl, r4
    5870:	f003 0b03 	and.w	fp, r3, #3
    5874:	bfc8      	it	gt
    5876:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
    587a:	f1ba 0f00 	cmp.w	sl, #0
    587e:	d018      	beq.n	58b2 <qspi_nor_read+0xbe>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
    5880:	eb06 0309 	add.w	r3, r6, r9
    5884:	eb08 0205 	add.w	r2, r8, r5
    5888:	4651      	mov	r1, sl
    588a:	4618      	mov	r0, r3
    588c:	9301      	str	r3, [sp, #4]
    588e:	f008 fa66 	bl	dd5e <nrfx_qspi_read>
    5892:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    5894:	4601      	mov	r1, r0
    5896:	6938      	ldr	r0, [r7, #16]
    5898:	f7ff ff50 	bl	573c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    589c:	4a29      	ldr	r2, [pc, #164]	; (5944 <qspi_nor_read+0x150>)
    589e:	4294      	cmp	r4, r2
    58a0:	d13b      	bne.n	591a <qspi_nor_read+0x126>
		if (flash_prefix != dest_prefix) {
    58a2:	454d      	cmp	r5, r9
    58a4:	d005      	beq.n	58b2 <qspi_nor_read+0xbe>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
    58a6:	9b01      	ldr	r3, [sp, #4]
    58a8:	4652      	mov	r2, sl
    58aa:	4619      	mov	r1, r3
    58ac:	1970      	adds	r0, r6, r5
    58ae:	f006 f952 	bl	bb56 <memmove>
	if (flash_prefix != 0) {
    58b2:	b1bd      	cbz	r5, 58e4 <qspi_nor_read+0xf0>
				     (WORD_SIZE - flash_prefix));
    58b4:	f1c5 0904 	rsb	r9, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
    58b8:	2104      	movs	r1, #4
    58ba:	eba8 0209 	sub.w	r2, r8, r9
    58be:	a802      	add	r0, sp, #8
    58c0:	f008 fa4d 	bl	dd5e <nrfx_qspi_read>
    58c4:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    58c6:	4601      	mov	r1, r0
    58c8:	6938      	ldr	r0, [r7, #16]
    58ca:	f7ff ff37 	bl	573c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    58ce:	4b1d      	ldr	r3, [pc, #116]	; (5944 <qspi_nor_read+0x150>)
    58d0:	429c      	cmp	r4, r3
    58d2:	d122      	bne.n	591a <qspi_nor_read+0x126>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
    58d4:	f109 0308 	add.w	r3, r9, #8
    58d8:	462a      	mov	r2, r5
    58da:	4630      	mov	r0, r6
    58dc:	eb0d 0103 	add.w	r1, sp, r3
    58e0:	f006 f950 	bl	bb84 <memcpy>
	if (flash_suffix != 0) {
    58e4:	f1bb 0f00 	cmp.w	fp, #0
    58e8:	d016      	beq.n	5918 <qspi_nor_read+0x124>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    58ea:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
    58ec:	eb08 0205 	add.w	r2, r8, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    58f0:	4452      	add	r2, sl
    58f2:	eb0d 0001 	add.w	r0, sp, r1
    58f6:	f008 fa32 	bl	dd5e <nrfx_qspi_read>
    58fa:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    58fc:	4601      	mov	r1, r0
    58fe:	6938      	ldr	r0, [r7, #16]
    5900:	f7ff ff1c 	bl	573c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    5904:	4b0f      	ldr	r3, [pc, #60]	; (5944 <qspi_nor_read+0x150>)
    5906:	429c      	cmp	r4, r3
    5908:	d107      	bne.n	591a <qspi_nor_read+0x126>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
    590a:	eb0a 0005 	add.w	r0, sl, r5
    590e:	465a      	mov	r2, fp
    5910:	a902      	add	r1, sp, #8
    5912:	4430      	add	r0, r6
    5914:	f006 f936 	bl	bb84 <memcpy>
	return res;
    5918:	4c0a      	ldr	r4, [pc, #40]	; (5944 <qspi_nor_read+0x150>)
	k_sem_give(&dev_data->sem);
    591a:	6938      	ldr	r0, [r7, #16]
    591c:	3010      	adds	r0, #16
    591e:	f006 fb0d 	bl	bf3c <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    5922:	4620      	mov	r0, r4
    5924:	f7ff fef0 	bl	5708 <qspi_get_zephyr_ret_code>
    5928:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    592a:	4638      	mov	r0, r7
    592c:	f7ff ff3a 	bl	57a4 <qspi_device_uninit>
}
    5930:	4628      	mov	r0, r5
    5932:	b005      	add	sp, #20
    5934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
    5938:	461d      	mov	r5, r3
    593a:	e7f9      	b.n	5930 <qspi_nor_read+0x13c>
		return -EINVAL;
    593c:	f06f 0515 	mvn.w	r5, #21
    5940:	e7f6      	b.n	5930 <qspi_nor_read+0x13c>
    5942:	bf00      	nop
    5944:	0bad0000 	.word	0x0bad0000

00005948 <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    5948:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    594c:	2202      	movs	r2, #2
{
    594e:	b570      	push	{r4, r5, r6, lr}
    5950:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    5954:	6843      	ldr	r3, [r0, #4]
{
    5956:	b086      	sub	sp, #24
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    5958:	6a1d      	ldr	r5, [r3, #32]
{
    595a:	4604      	mov	r4, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    595c:	2100      	movs	r1, #0
    595e:	4628      	mov	r0, r5
    5960:	aa03      	add	r2, sp, #12
    5962:	f006 fc02 	bl	c16a <pinctrl_lookup_state>
	if (ret < 0) {
    5966:	2800      	cmp	r0, #0
    5968:	db4e      	blt.n	5a08 <qspi_nor_init+0xc0>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    596a:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    596c:	682a      	ldr	r2, [r5, #0]
    596e:	7919      	ldrb	r1, [r3, #4]
    5970:	6818      	ldr	r0, [r3, #0]
    5972:	f000 fcab 	bl	62cc <pinctrl_configure_pins>
	if (ret < 0) {
    5976:	2800      	cmp	r0, #0
    5978:	db46      	blt.n	5a08 <qspi_nor_init+0xc0>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
    597a:	2200      	movs	r2, #0
    597c:	2101      	movs	r1, #1
    597e:	202b      	movs	r0, #43	; 0x2b
    5980:	f7fe f9f6 	bl	3d70 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
    5984:	6865      	ldr	r5, [r4, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    5986:	6922      	ldr	r2, [r4, #16]
    5988:	4628      	mov	r0, r5
    598a:	4933      	ldr	r1, [pc, #204]	; (5a58 <qspi_nor_init+0x110>)
    598c:	f002 f99e 	bl	7ccc <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
    5990:	f7ff feba 	bl	5708 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
    5994:	2800      	cmp	r0, #0
    5996:	db37      	blt.n	5a08 <qspi_nor_init+0xc0>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
    5998:	7aeb      	ldrb	r3, [r5, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    599a:	3b02      	subs	r3, #2
    599c:	2b01      	cmp	r3, #1
    599e:	d935      	bls.n	5a0c <qspi_nor_init+0xc4>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
    59a0:	7aad      	ldrb	r5, [r5, #10]
    59a2:	3d03      	subs	r5, #3
    59a4:	2d01      	cmp	r5, #1
    59a6:	bf8c      	ite	hi
    59a8:	2500      	movhi	r5, #0
    59aa:	2501      	movls	r5, #1
		ret = qspi_rdsr(dev, sr_num);
    59ac:	4620      	mov	r0, r4
    59ae:	f006 fb2b 	bl	c008 <qspi_rdsr.constprop.0>
		if (ret < 0) {
    59b2:	2800      	cmp	r0, #0
    59b4:	db28      	blt.n	5a08 <qspi_nor_init+0xc0>
		uint8_t sr = (uint8_t)ret;
    59b6:	b2c2      	uxtb	r2, r0
		if (qe_state != qe_value) {
    59b8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    59bc:	4285      	cmp	r5, r0
    59be:	ad01      	add	r5, sp, #4
    59c0:	d126      	bne.n	5a10 <qspi_nor_init+0xc8>
	qspi_device_uninit(dev);
    59c2:	4620      	mov	r0, r4
    59c4:	f7ff feee 	bl	57a4 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
    59c8:	2603      	movs	r6, #3
    59ca:	2300      	movs	r3, #0
    59cc:	e9cd 6302 	strd	r6, r3, [sp, #8]
    59d0:	9304      	str	r3, [sp, #16]
    59d2:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
    59d4:	4620      	mov	r0, r4
	const struct qspi_buf rx_buf = {
    59d6:	f8cd d004 	str.w	sp, [sp, #4]
	const struct qspi_cmd cmd = {
    59da:	f88d 300c 	strb.w	r3, [sp, #12]
    59de:	9505      	str	r5, [sp, #20]
	int ret = qspi_device_init(dev);
    59e0:	f7ff feba 	bl	5758 <qspi_device_init>
	if (ret == 0) {
    59e4:	4602      	mov	r2, r0
    59e6:	bb88      	cbnz	r0, 5a4c <qspi_nor_init+0x104>
		ret = qspi_send_cmd(dev, &cmd, false);
    59e8:	4620      	mov	r0, r4
    59ea:	a903      	add	r1, sp, #12
    59ec:	f006 fabb 	bl	bf66 <qspi_send_cmd>
    59f0:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    59f2:	4620      	mov	r0, r4
    59f4:	f7ff fed6 	bl	57a4 <qspi_device_uninit>
	if (ret != 0) {
    59f8:	bb5d      	cbnz	r5, 5a52 <qspi_nor_init+0x10a>
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
    59fa:	6860      	ldr	r0, [r4, #4]
    59fc:	4632      	mov	r2, r6
    59fe:	4669      	mov	r1, sp
    5a00:	301c      	adds	r0, #28
    5a02:	f006 f898 	bl	bb36 <memcmp>
    5a06:	bb20      	cbnz	r0, 5a52 <qspi_nor_init+0x10a>
}
    5a08:	b006      	add	sp, #24
    5a0a:	bd70      	pop	{r4, r5, r6, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    5a0c:	2501      	movs	r5, #1
    5a0e:	e7cd      	b.n	59ac <qspi_nor_init+0x64>
	uint8_t sr_array[2] = {0};
    5a10:	2300      	movs	r3, #0
			sr ^= qe_mask;
    5a12:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
    5a16:	f8ad 3000 	strh.w	r3, [sp]
		sr_array[0] = sr_val;
    5a1a:	f88d 2000 	strb.w	r2, [sp]
	const struct qspi_buf sr_buf = {
    5a1e:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
    5a20:	4620      	mov	r0, r4
    5a22:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    5a24:	e9cd 2302 	strd	r2, r3, [sp, #8]
	const struct qspi_buf sr_buf = {
    5a28:	f8cd d004 	str.w	sp, [sp, #4]
	struct qspi_cmd cmd = {
    5a2c:	9305      	str	r3, [sp, #20]
    5a2e:	f88d 200c 	strb.w	r2, [sp, #12]
    5a32:	9504      	str	r5, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
    5a34:	f006 fa97 	bl	bf66 <qspi_send_cmd>
	if (ret == 0) {
    5a38:	2800      	cmp	r0, #0
    5a3a:	d1e5      	bne.n	5a08 <qspi_nor_init+0xc0>
		ret = qspi_rdsr(dev, 1);
    5a3c:	4620      	mov	r0, r4
    5a3e:	f006 fae3 	bl	c008 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
    5a42:	2800      	cmp	r0, #0
    5a44:	dbe0      	blt.n	5a08 <qspi_nor_init+0xc0>
    5a46:	07c3      	lsls	r3, r0, #31
    5a48:	d4f8      	bmi.n	5a3c <qspi_nor_init+0xf4>
    5a4a:	e7ba      	b.n	59c2 <qspi_nor_init+0x7a>
	qspi_device_uninit(dev);
    5a4c:	4620      	mov	r0, r4
    5a4e:	f7ff fea9 	bl	57a4 <qspi_device_uninit>
		return -ENODEV;
    5a52:	f06f 0012 	mvn.w	r0, #18
    5a56:	e7d7      	b.n	5a08 <qspi_nor_init+0xc0>
    5a58:	0000bf41 	.word	0x0000bf41

00005a5c <qspi_nor_erase>:
{
    5a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
    5a60:	1e0d      	subs	r5, r1, #0
{
    5a62:	4606      	mov	r6, r0
    5a64:	4690      	mov	r8, r2
	const struct qspi_nor_config *params = dev->config;
    5a66:	f8d0 9004 	ldr.w	r9, [r0, #4]
	if (addr < 0 ||
    5a6a:	db6a      	blt.n	5b42 <qspi_nor_erase+0xe6>
    5a6c:	f8d9 3018 	ldr.w	r3, [r9, #24]
	    (addr + size) > params->size) {
    5a70:	18aa      	adds	r2, r5, r2
	if (addr < 0 ||
    5a72:	429a      	cmp	r2, r3
    5a74:	d865      	bhi.n	5b42 <qspi_nor_erase+0xe6>
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
    5a76:	f3c5 020b 	ubfx	r2, r5, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
    5a7a:	f1b8 0f00 	cmp.w	r8, #0
    5a7e:	d060      	beq.n	5b42 <qspi_nor_erase+0xe6>
    5a80:	f3c8 030b 	ubfx	r3, r8, #0, #12
    5a84:	4313      	orrs	r3, r2
    5a86:	d15c      	bne.n	5b42 <qspi_nor_erase+0xe6>
	rv = qspi_device_init(dev);
    5a88:	f7ff fe66 	bl	5758 <qspi_device_init>
	if (rv != 0) {
    5a8c:	4604      	mov	r4, r0
    5a8e:	bb68      	cbnz	r0, 5aec <qspi_nor_erase+0x90>
	qspi_trans_lock(dev);
    5a90:	6930      	ldr	r0, [r6, #16]
    5a92:	f006 fa62 	bl	bf5a <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
    5a96:	4621      	mov	r1, r4
    5a98:	4630      	mov	r0, r6
    5a9a:	f006 faa0 	bl	bfde <qspi_nor_write_protection_set>
	if (rv != 0) {
    5a9e:	4604      	mov	r4, r0
    5aa0:	bb08      	cbnz	r0, 5ae6 <qspi_nor_erase+0x8a>
	qspi_lock(dev);
    5aa2:	6930      	ldr	r0, [r6, #16]
    5aa4:	f006 fa52 	bl	bf4c <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
    5aa8:	f8df a09c 	ldr.w	sl, [pc, #156]	; 5b48 <qspi_nor_erase+0xec>
		if (size == params->size) {
    5aac:	f8d9 3018 	ldr.w	r3, [r9, #24]
    5ab0:	4543      	cmp	r3, r8
    5ab2:	d121      	bne.n	5af8 <qspi_nor_erase+0x9c>
			res = nrfx_qspi_chip_erase();
    5ab4:	f008 f956 	bl	dd64 <nrfx_qspi_chip_erase>
    5ab8:	46c3      	mov	fp, r8
    5aba:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
    5abc:	4639      	mov	r1, r7
    5abe:	6930      	ldr	r0, [r6, #16]
    5ac0:	f7ff fe3c 	bl	573c <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
    5ac4:	4557      	cmp	r7, sl
    5ac6:	d12c      	bne.n	5b22 <qspi_nor_erase+0xc6>
	while (size > 0) {
    5ac8:	ebb8 080b 	subs.w	r8, r8, fp
			addr += adj;
    5acc:	445d      	add	r5, fp
	while (size > 0) {
    5ace:	d1ed      	bne.n	5aac <qspi_nor_erase+0x50>
	k_sem_give(&dev_data->sem);
    5ad0:	6930      	ldr	r0, [r6, #16]
    5ad2:	3010      	adds	r0, #16
    5ad4:	f006 fa32 	bl	bf3c <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    5ad8:	2101      	movs	r1, #1
    5ada:	4630      	mov	r0, r6
    5adc:	f006 fa7f 	bl	bfde <qspi_nor_write_protection_set>
    5ae0:	2c00      	cmp	r4, #0
    5ae2:	bf08      	it	eq
    5ae4:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
    5ae6:	6930      	ldr	r0, [r6, #16]
    5ae8:	f006 fa28 	bl	bf3c <k_sem_give>
	qspi_device_uninit(dev);
    5aec:	4630      	mov	r0, r6
    5aee:	f7ff fe59 	bl	57a4 <qspi_device_uninit>
}
    5af2:	4620      	mov	r0, r4
    5af4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    5af8:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
    5afc:	d309      	bcc.n	5b12 <qspi_nor_erase+0xb6>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
    5afe:	b2ab      	uxth	r3, r5
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    5b00:	b9a3      	cbnz	r3, 5b2c <qspi_nor_erase+0xd0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    5b02:	4629      	mov	r1, r5
    5b04:	2001      	movs	r0, #1
    5b06:	f002 fa6b 	bl	7fe0 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
    5b0a:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    5b0e:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
    5b10:	e7d4      	b.n	5abc <qspi_nor_erase+0x60>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    5b12:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
    5b16:	d209      	bcs.n	5b2c <qspi_nor_erase+0xd0>
		qspi_wait_for_completion(dev, res);
    5b18:	490c      	ldr	r1, [pc, #48]	; (5b4c <qspi_nor_erase+0xf0>)
    5b1a:	6930      	ldr	r0, [r6, #16]
    5b1c:	f7ff fe0e 	bl	573c <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
    5b20:	4f0a      	ldr	r7, [pc, #40]	; (5b4c <qspi_nor_erase+0xf0>)
			rv = qspi_get_zephyr_ret_code(res);
    5b22:	4638      	mov	r0, r7
    5b24:	f7ff fdf0 	bl	5708 <qspi_get_zephyr_ret_code>
    5b28:	4604      	mov	r4, r0
			break;
    5b2a:	e7d1      	b.n	5ad0 <qspi_nor_erase+0x74>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
    5b2c:	f3c5 000b 	ubfx	r0, r5, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    5b30:	2800      	cmp	r0, #0
    5b32:	d1f1      	bne.n	5b18 <qspi_nor_erase+0xbc>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    5b34:	4629      	mov	r1, r5
    5b36:	f002 fa53 	bl	7fe0 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
    5b3a:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    5b3e:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
    5b40:	e7bc      	b.n	5abc <qspi_nor_erase+0x60>
		return -EINVAL;
    5b42:	f06f 0415 	mvn.w	r4, #21
    5b46:	e7d4      	b.n	5af2 <qspi_nor_erase+0x96>
    5b48:	0bad0000 	.word	0x0bad0000
    5b4c:	0bad0004 	.word	0x0bad0004

00005b50 <qspi_nor_write>:
{
    5b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5b54:	4605      	mov	r5, r0
    5b56:	460f      	mov	r7, r1
    5b58:	461e      	mov	r6, r3
	if (!src) {
    5b5a:	4690      	mov	r8, r2
    5b5c:	2a00      	cmp	r2, #0
    5b5e:	f000 8081 	beq.w	5c64 <qspi_nor_write+0x114>
	if ((size == 0)
    5b62:	2b00      	cmp	r3, #0
    5b64:	d07e      	beq.n	5c64 <qspi_nor_write+0x114>
	    || ((size > 4) && ((size % 4U) != 0))) {
    5b66:	2b04      	cmp	r3, #4
    5b68:	d901      	bls.n	5b6e <qspi_nor_write+0x1e>
    5b6a:	079a      	lsls	r2, r3, #30
    5b6c:	d17a      	bne.n	5c64 <qspi_nor_write+0x114>
	if ((addr % 4U) != 0) {
    5b6e:	07bb      	lsls	r3, r7, #30
    5b70:	d178      	bne.n	5c64 <qspi_nor_write+0x114>
	if (addr < 0 ||
    5b72:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
    5b74:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
    5b76:	db75      	blt.n	5c64 <qspi_nor_write+0x114>
    5b78:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    5b7a:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
    5b7c:	4293      	cmp	r3, r2
    5b7e:	d871      	bhi.n	5c64 <qspi_nor_write+0x114>
	int rc = qspi_device_init(dev);
    5b80:	4628      	mov	r0, r5
    5b82:	f7ff fde9 	bl	5758 <qspi_device_init>
	if (rc != 0) {
    5b86:	4604      	mov	r4, r0
    5b88:	2800      	cmp	r0, #0
    5b8a:	d160      	bne.n	5c4e <qspi_nor_write+0xfe>
	qspi_trans_lock(dev);
    5b8c:	6928      	ldr	r0, [r5, #16]
    5b8e:	f006 f9e4 	bl	bf5a <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
    5b92:	4621      	mov	r1, r4
    5b94:	4628      	mov	r0, r5
    5b96:	f006 fa22 	bl	bfde <qspi_nor_write_protection_set>
    5b9a:	4604      	mov	r4, r0
	qspi_lock(dev);
    5b9c:	6928      	ldr	r0, [r5, #16]
    5b9e:	f006 f9d5 	bl	bf4c <qspi_lock.isra.0>
	if (!res) {
    5ba2:	2c00      	cmp	r4, #0
    5ba4:	d140      	bne.n	5c28 <qspi_nor_write+0xd8>
		if (size < 4U) {
    5ba6:	2e03      	cmp	r6, #3
    5ba8:	d81c      	bhi.n	5be4 <qspi_nor_write+0x94>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
    5baa:	463a      	mov	r2, r7
    5bac:	2104      	movs	r1, #4
    5bae:	4668      	mov	r0, sp
    5bb0:	f008 f8d5 	bl	dd5e <nrfx_qspi_read>
    5bb4:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
    5bb6:	4601      	mov	r1, r0
    5bb8:	6928      	ldr	r0, [r5, #16]
    5bba:	f7ff fdbf 	bl	573c <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
    5bbe:	4b2b      	ldr	r3, [pc, #172]	; (5c6c <qspi_nor_write+0x11c>)
    5bc0:	429c      	cmp	r4, r3
    5bc2:	d131      	bne.n	5c28 <qspi_nor_write+0xd8>
		memcpy(buf, sptr, slen);
    5bc4:	4632      	mov	r2, r6
    5bc6:	4641      	mov	r1, r8
    5bc8:	4668      	mov	r0, sp
    5bca:	f005 ffdb 	bl	bb84 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
    5bce:	463a      	mov	r2, r7
    5bd0:	2104      	movs	r1, #4
    5bd2:	4668      	mov	r0, sp
			res = nrfx_qspi_write(src, size, addr);
    5bd4:	f008 f8c0 	bl	dd58 <nrfx_qspi_write>
    5bd8:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    5bda:	4601      	mov	r1, r0
    5bdc:	6928      	ldr	r0, [r5, #16]
    5bde:	f7ff fdad 	bl	573c <qspi_wait_for_completion.isra.0>
    5be2:	e021      	b.n	5c28 <qspi_nor_write+0xd8>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5be4:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
    5be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5bec:	d036      	beq.n	5c5c <qspi_nor_write+0x10c>
			if (res == NRFX_SUCCESS) {
    5bee:	f8df a07c 	ldr.w	sl, [pc, #124]	; 5c6c <qspi_nor_write+0x11c>
			size_t len = MIN(slen, sizeof(buf));
    5bf2:	2e10      	cmp	r6, #16
    5bf4:	46b1      	mov	r9, r6
    5bf6:	bf28      	it	cs
    5bf8:	f04f 0910 	movcs.w	r9, #16
			memcpy(buf, sp, len);
    5bfc:	4641      	mov	r1, r8
    5bfe:	464a      	mov	r2, r9
    5c00:	4668      	mov	r0, sp
    5c02:	f005 ffbf 	bl	bb84 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
    5c06:	463a      	mov	r2, r7
    5c08:	2110      	movs	r1, #16
    5c0a:	4668      	mov	r0, sp
    5c0c:	f008 f8a4 	bl	dd58 <nrfx_qspi_write>
    5c10:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    5c12:	4601      	mov	r1, r0
    5c14:	6928      	ldr	r0, [r5, #16]
    5c16:	f7ff fd91 	bl	573c <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
    5c1a:	4554      	cmp	r4, sl
    5c1c:	d104      	bne.n	5c28 <qspi_nor_write+0xd8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    5c1e:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
    5c22:	44c8      	add	r8, r9
				addr += len;
    5c24:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    5c26:	d1e4      	bne.n	5bf2 <qspi_nor_write+0xa2>
	k_sem_give(&dev_data->sem);
    5c28:	6928      	ldr	r0, [r5, #16]
    5c2a:	3010      	adds	r0, #16
    5c2c:	f006 f986 	bl	bf3c <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
    5c30:	2101      	movs	r1, #1
    5c32:	4628      	mov	r0, r5
    5c34:	f006 f9d3 	bl	bfde <qspi_nor_write_protection_set>
    5c38:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
    5c3a:	6928      	ldr	r0, [r5, #16]
    5c3c:	f006 f97e 	bl	bf3c <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    5c40:	2c00      	cmp	r4, #0
    5c42:	bf14      	ite	ne
    5c44:	4620      	movne	r0, r4
    5c46:	4630      	moveq	r0, r6
    5c48:	f7ff fd5e 	bl	5708 <qspi_get_zephyr_ret_code>
    5c4c:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
    5c4e:	4628      	mov	r0, r5
    5c50:	f7ff fda8 	bl	57a4 <qspi_device_uninit>
}
    5c54:	4620      	mov	r0, r4
    5c56:	b004      	add	sp, #16
    5c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = nrfx_qspi_write(src, size, addr);
    5c5c:	463a      	mov	r2, r7
    5c5e:	4631      	mov	r1, r6
    5c60:	4640      	mov	r0, r8
    5c62:	e7b7      	b.n	5bd4 <qspi_nor_write+0x84>
		return -EINVAL;
    5c64:	f06f 0415 	mvn.w	r4, #21
    5c68:	e7f4      	b.n	5c54 <qspi_nor_write+0x104>
    5c6a:	bf00      	nop
    5c6c:	0bad0000 	.word	0x0bad0000

00005c70 <flash_sim_page_layout>:

static void flash_sim_page_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &flash_sim_pages_layout;
    5c70:	4b02      	ldr	r3, [pc, #8]	; (5c7c <flash_sim_page_layout+0xc>)
    5c72:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5c74:	2301      	movs	r3, #1
    5c76:	6013      	str	r3, [r2, #0]
}
    5c78:	4770      	bx	lr
    5c7a:	bf00      	nop
    5c7c:	0000ecbc 	.word	0x0000ecbc

00005c80 <flash_sim_get_parameters>:
flash_sim_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_sim_parameters;
}
    5c80:	4800      	ldr	r0, [pc, #0]	; (5c84 <flash_sim_get_parameters+0x4>)
    5c82:	4770      	bx	lr
    5c84:	0000ecc4 	.word	0x0000ecc4

00005c88 <flash_sim_write>:
{
    5c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5c8c:	461c      	mov	r4, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5c8e:	440b      	add	r3, r1
    5c90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    5c94:	460d      	mov	r5, r1
    5c96:	4617      	mov	r7, r2
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5c98:	d82c      	bhi.n	5cf4 <flash_sim_write+0x6c>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    5c9a:	2900      	cmp	r1, #0
    5c9c:	db2a      	blt.n	5cf4 <flash_sim_write+0x6c>
	if ((offset % FLASH_SIMULATOR_PROG_UNIT) ||
    5c9e:	ea41 0604 	orr.w	r6, r1, r4
    5ca2:	f016 0603 	ands.w	r6, r6, #3
    5ca6:	d125      	bne.n	5cf4 <flash_sim_write+0x6c>
	memset(buf, FLASH_SIMULATOR_ERASE_VALUE, sizeof(buf));
    5ca8:	2204      	movs	r2, #4
    5caa:	21ff      	movs	r1, #255	; 0xff
    5cac:	eb0d 0002 	add.w	r0, sp, r2
    5cb0:	f005 ff73 	bl	bb9a <memset>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    5cb4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 5cfc <flash_sim_write+0x74>
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    5cb8:	eb08 0905 	add.w	r9, r8, r5
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    5cbc:	42a6      	cmp	r6, r4
    5cbe:	d309      	bcc.n	5cd4 <flash_sim_write+0x4c>
    5cc0:	463a      	mov	r2, r7
    5cc2:	eb08 0305 	add.w	r3, r8, r5
    5cc6:	443c      	add	r4, r7
	for (uint32_t i = 0; i < len; i++) {
    5cc8:	42a2      	cmp	r2, r4
    5cca:	d10c      	bne.n	5ce6 <flash_sim_write+0x5e>
	return 0;
    5ccc:	2000      	movs	r0, #0
}
    5cce:	b003      	add	sp, #12
    5cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    5cd4:	2204      	movs	r2, #4
    5cd6:	eb09 0106 	add.w	r1, r9, r6
    5cda:	eb0d 0002 	add.w	r0, sp, r2
    5cde:	f005 ff2a 	bl	bb36 <memcmp>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    5ce2:	3604      	adds	r6, #4
    5ce4:	e7ea      	b.n	5cbc <flash_sim_write+0x34>
		*(MOCK_FLASH(offset + i)) &= *((uint8_t *)data + i);
    5ce6:	7819      	ldrb	r1, [r3, #0]
    5ce8:	f812 0b01 	ldrb.w	r0, [r2], #1
    5cec:	4001      	ands	r1, r0
    5cee:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i = 0; i < len; i++) {
    5cf2:	e7e9      	b.n	5cc8 <flash_sim_write+0x40>
		return -EINVAL;
    5cf4:	f06f 0015 	mvn.w	r0, #21
    5cf8:	e7e9      	b.n	5cce <flash_sim_write+0x46>
    5cfa:	bf00      	nop
    5cfc:	20016800 	.word	0x20016800

00005d00 <flash_sim_read>:
{
    5d00:	4610      	mov	r0, r2
    5d02:	b508      	push	{r3, lr}
    5d04:	461a      	mov	r2, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5d06:	440b      	add	r3, r1
    5d08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    5d0c:	d807      	bhi.n	5d1e <flash_sim_read+0x1e>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    5d0e:	2900      	cmp	r1, #0
    5d10:	db05      	blt.n	5d1e <flash_sim_read+0x1e>
	memcpy(data, MOCK_FLASH(offset), len);
    5d12:	4b04      	ldr	r3, [pc, #16]	; (5d24 <flash_sim_read+0x24>)
    5d14:	4419      	add	r1, r3
    5d16:	f005 ff35 	bl	bb84 <memcpy>
	return 0;
    5d1a:	2000      	movs	r0, #0
}
    5d1c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    5d1e:	f06f 0015 	mvn.w	r0, #21
    5d22:	e7fb      	b.n	5d1c <flash_sim_read+0x1c>
    5d24:	20016800 	.word	0x20016800

00005d28 <flash_sim_erase>:
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5d28:	188b      	adds	r3, r1, r2
    5d2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    5d2e:	b570      	push	{r4, r5, r6, lr}
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5d30:	d81b      	bhi.n	5d6a <flash_sim_erase+0x42>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    5d32:	2900      	cmp	r1, #0
    5d34:	db19      	blt.n	5d6a <flash_sim_erase+0x42>
	    (len % FLASH_SIMULATOR_ERASE_UNIT)) {
    5d36:	ea42 0601 	orr.w	r6, r2, r1
    5d3a:	f3c6 060b 	ubfx	r6, r6, #0, #12
	if ((offset % FLASH_SIMULATOR_ERASE_UNIT) ||
    5d3e:	b9a6      	cbnz	r6, 5d6a <flash_sim_erase+0x42>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    5d40:	4c0b      	ldr	r4, [pc, #44]	; (5d70 <flash_sim_erase+0x48>)
    5d42:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    5d46:	f021 010f 	bic.w	r1, r1, #15
    5d4a:	0b15      	lsrs	r5, r2, #12
    5d4c:	440c      	add	r4, r1
    5d4e:	42ae      	cmp	r6, r5
    5d50:	d101      	bne.n	5d56 <flash_sim_erase+0x2e>
    5d52:	2000      	movs	r0, #0
}
    5d54:	bd70      	pop	{r4, r5, r6, pc}
	memset(MOCK_FLASH(unit_addr), FLASH_SIMULATOR_ERASE_VALUE,
    5d56:	4620      	mov	r0, r4
    5d58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5d5c:	21ff      	movs	r1, #255	; 0xff
    5d5e:	f005 ff1c 	bl	bb9a <memset>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    5d62:	3601      	adds	r6, #1
    5d64:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    5d68:	e7f1      	b.n	5d4e <flash_sim_erase+0x26>
		return -EINVAL;
    5d6a:	f06f 0015 	mvn.w	r0, #21
    5d6e:	e7f1      	b.n	5d54 <flash_sim_erase+0x2c>
    5d70:	20016800 	.word	0x20016800

00005d74 <flash_init>:
}

#endif /* CONFIG_ARCH_POSIX */

static int flash_init(const struct device *dev)
{
    5d74:	b508      	push	{r3, lr}
	memset(mock_flash, FLASH_SIMULATOR_ERASE_VALUE, ARRAY_SIZE(mock_flash));
    5d76:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5d7a:	21ff      	movs	r1, #255	; 0xff
    5d7c:	4802      	ldr	r0, [pc, #8]	; (5d88 <flash_init+0x14>)
    5d7e:	f005 ff0c 	bl	bb9a <memset>
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_stats, STATS_SIZE_32, "flash_sim_stats");
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_thresholds, STATS_SIZE_32,
			   "flash_sim_thresholds");
	return flash_mock_init(dev);
}
    5d82:	2000      	movs	r0, #0
    5d84:	bd08      	pop	{r3, pc}
    5d86:	bf00      	nop
    5d88:	20016800 	.word	0x20016800

00005d8c <z_impl_flash_simulator_get_memory>:
void *z_impl_flash_simulator_get_memory(const struct device *dev,
					size_t *mock_size)
{
	ARG_UNUSED(dev);

	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    5d8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	return mock_flash;
}
    5d90:	4801      	ldr	r0, [pc, #4]	; (5d98 <z_impl_flash_simulator_get_memory+0xc>)
	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    5d92:	600b      	str	r3, [r1, #0]
}
    5d94:	4770      	bx	lr
    5d96:	bf00      	nop
    5d98:	20016800 	.word	0x20016800

00005d9c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    5d9c:	4b02      	ldr	r3, [pc, #8]	; (5da8 <flash_nrf_pages_layout+0xc>)
    5d9e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5da0:	2301      	movs	r3, #1
    5da2:	6013      	str	r3, [r2, #0]
}
    5da4:	4770      	bx	lr
    5da6:	bf00      	nop
    5da8:	2001411c 	.word	0x2001411c

00005dac <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    5dac:	4800      	ldr	r0, [pc, #0]	; (5db0 <flash_nrf_get_parameters+0x4>)
    5dae:	4770      	bx	lr
    5db0:	0000ecf4 	.word	0x0000ecf4

00005db4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    5db4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    5db6:	2201      	movs	r2, #1
    5db8:	4806      	ldr	r0, [pc, #24]	; (5dd4 <nrf_flash_init+0x20>)
    5dba:	4611      	mov	r1, r2
    5dbc:	f008 f98b 	bl	e0d6 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    5dc0:	f007 ffbd 	bl	dd3e <nrfx_nvmc_flash_page_count_get>
    5dc4:	4c04      	ldr	r4, [pc, #16]	; (5dd8 <nrf_flash_init+0x24>)
    5dc6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    5dc8:	f007 ffb6 	bl	dd38 <nrfx_nvmc_flash_page_size_get>
    5dcc:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    5dce:	2000      	movs	r0, #0
    5dd0:	bd10      	pop	{r4, pc}
    5dd2:	bf00      	nop
    5dd4:	20014124 	.word	0x20014124
    5dd8:	2001411c 	.word	0x2001411c

00005ddc <flash_nrf_erase>:
{
    5ddc:	b570      	push	{r4, r5, r6, lr}
    5dde:	460c      	mov	r4, r1
    5de0:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5de2:	f007 ffa9 	bl	dd38 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    5de6:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5de8:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    5dea:	4620      	mov	r0, r4
    5dec:	f006 f927 	bl	c03e <is_regular_addr_valid>
    5df0:	b308      	cbz	r0, 5e36 <flash_nrf_erase+0x5a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    5df2:	fbb4 f3f6 	udiv	r3, r4, r6
    5df6:	fb06 4313 	mls	r3, r6, r3, r4
    5dfa:	b9e3      	cbnz	r3, 5e36 <flash_nrf_erase+0x5a>
    5dfc:	fbb5 f3f6 	udiv	r3, r5, r6
    5e00:	fb06 5313 	mls	r3, r6, r3, r5
    5e04:	b9bb      	cbnz	r3, 5e36 <flash_nrf_erase+0x5a>
		if (!n_pages) {
    5e06:	42ae      	cmp	r6, r5
    5e08:	d901      	bls.n	5e0e <flash_nrf_erase+0x32>
			return 0;
    5e0a:	2000      	movs	r0, #0
}
    5e0c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
    5e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e16:	4809      	ldr	r0, [pc, #36]	; (5e3c <flash_nrf_erase+0x60>)
    5e18:	f003 fb48 	bl	94ac <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5e1c:	f007 ff8c 	bl	dd38 <nrfx_nvmc_flash_page_size_get>
    5e20:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5e22:	4620      	mov	r0, r4
    5e24:	f001 fd5c 	bl	78e0 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    5e28:	1bad      	subs	r5, r5, r6
    5e2a:	4434      	add	r4, r6
    5e2c:	d1f9      	bne.n	5e22 <flash_nrf_erase+0x46>
	z_impl_k_sem_give(sem);
    5e2e:	4803      	ldr	r0, [pc, #12]	; (5e3c <flash_nrf_erase+0x60>)
    5e30:	f003 fb1c 	bl	946c <z_impl_k_sem_give>
}
    5e34:	e7e9      	b.n	5e0a <flash_nrf_erase+0x2e>
			return -EINVAL;
    5e36:	f06f 0015 	mvn.w	r0, #21
    5e3a:	e7e7      	b.n	5e0c <flash_nrf_erase+0x30>
    5e3c:	20014124 	.word	0x20014124

00005e40 <flash_nrf_write>:
{
    5e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e44:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    5e46:	4619      	mov	r1, r3
    5e48:	4628      	mov	r0, r5
{
    5e4a:	4616      	mov	r6, r2
    5e4c:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    5e4e:	f006 f8f6 	bl	c03e <is_regular_addr_valid>
    5e52:	b3c8      	cbz	r0, 5ec8 <flash_nrf_write+0x88>
	if (!len) {
    5e54:	b914      	cbnz	r4, 5e5c <flash_nrf_write+0x1c>
		return 0;
    5e56:	2000      	movs	r0, #0
}
    5e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
    5e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e64:	481a      	ldr	r0, [pc, #104]	; (5ed0 <flash_nrf_write+0x90>)
    5e66:	f003 fb21 	bl	94ac <z_impl_k_sem_take>
		nrf_flash_sync_get_timestamp_begin();
	}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
#if IS_ENABLED(CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS)
	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
    5e6a:	f015 0703 	ands.w	r7, r5, #3
    5e6e:	d00c      	beq.n	5e8a <flash_nrf_write+0x4a>
		uint32_t count = sizeof(uint32_t) - (w_ctx->flash_addr & 0x3);
    5e70:	f1c7 0704 	rsb	r7, r7, #4
    5e74:	42a7      	cmp	r7, r4
    5e76:	bf28      	it	cs
    5e78:	4627      	movcs	r7, r4

		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    5e7a:	4631      	mov	r1, r6
    5e7c:	4628      	mov	r0, r5
    5e7e:	463a      	mov	r2, r7
    5e80:	f001 fd5c 	bl	793c <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
    5e84:	443d      	add	r5, r7
	w_ctx->data_addr += shift;
    5e86:	443e      	add	r6, r7
	w_ctx->len -= shift;
    5e88:	1be4      	subs	r4, r4, r7
{
    5e8a:	2700      	movs	r7, #0
    5e8c:	f024 0803 	bic.w	r8, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    5e90:	45b8      	cmp	r8, r7
    5e92:	eb07 0005 	add.w	r0, r7, r5
    5e96:	d112      	bne.n	5ebe <flash_nrf_write+0x7e>
    5e98:	f06f 0203 	mvn.w	r2, #3
    5e9c:	08a3      	lsrs	r3, r4, #2
    5e9e:	fb02 4203 	mla	r2, r2, r3, r4
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#if IS_ENABLED(CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS)
	/* Write remaining unaligned data */
	if (w_ctx->len) {
    5ea2:	b11a      	cbz	r2, 5eac <flash_nrf_write+0x6c>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    5ea4:	eb06 0108 	add.w	r1, r6, r8
    5ea8:	f001 fd48 	bl	793c <nrfx_nvmc_bytes_write>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    5eac:	4a09      	ldr	r2, [pc, #36]	; (5ed4 <flash_nrf_write+0x94>)
    5eae:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    5eb2:	07db      	lsls	r3, r3, #31
    5eb4:	d5fb      	bpl.n	5eae <flash_nrf_write+0x6e>
	z_impl_k_sem_give(sem);
    5eb6:	4806      	ldr	r0, [pc, #24]	; (5ed0 <flash_nrf_write+0x90>)
    5eb8:	f003 fad8 	bl	946c <z_impl_k_sem_give>
	return ret;
    5ebc:	e7cb      	b.n	5e56 <flash_nrf_write+0x16>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    5ebe:	59f1      	ldr	r1, [r6, r7]
    5ec0:	f001 fd2c 	bl	791c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    5ec4:	3704      	adds	r7, #4
}
    5ec6:	e7e3      	b.n	5e90 <flash_nrf_write+0x50>
		return -EINVAL;
    5ec8:	f06f 0015 	mvn.w	r0, #21
    5ecc:	e7c4      	b.n	5e58 <flash_nrf_write+0x18>
    5ece:	bf00      	nop
    5ed0:	20014124 	.word	0x20014124
    5ed4:	50039000 	.word	0x50039000

00005ed8 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5ed8:	2301      	movs	r3, #1
    5eda:	4083      	lsls	r3, r0
{
    5edc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5ede:	43dc      	mvns	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5ee0:	4a0b      	ldr	r2, [pc, #44]	; (5f10 <compare_int_lock+0x38>)
    5ee2:	e8d2 1fef 	ldaex	r1, [r2]
    5ee6:	ea01 0504 	and.w	r5, r1, r4
    5eea:	e8c2 5fe6 	stlex	r6, r5, [r2]
    5eee:	2e00      	cmp	r6, #0
    5ef0:	d1f7      	bne.n	5ee2 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5ef2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5ef6:	4082      	lsls	r2, r0
    5ef8:	4806      	ldr	r0, [pc, #24]	; (5f14 <compare_int_lock+0x3c>)
    5efa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    5efe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f02:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5f06:	420b      	tst	r3, r1
}
    5f08:	bf14      	ite	ne
    5f0a:	2001      	movne	r0, #1
    5f0c:	2000      	moveq	r0, #0
    5f0e:	bd70      	pop	{r4, r5, r6, pc}
    5f10:	20014138 	.word	0x20014138
    5f14:	50015000 	.word	0x50015000

00005f18 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    5f18:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    5f1a:	490e      	ldr	r1, [pc, #56]	; (5f54 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    5f1c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    5f20:	e9d1 3400 	ldrd	r3, r4, [r1]
    5f24:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    5f26:	18c3      	adds	r3, r0, r3
    5f28:	f144 0400 	adc.w	r4, r4, #0
    5f2c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5f30:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5f34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5f38:	d209      	bcs.n	5f4e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5f3a:	4b07      	ldr	r3, [pc, #28]	; (5f58 <sys_clock_timeout_handler+0x40>)
    5f3c:	681b      	ldr	r3, [r3, #0]
    5f3e:	0a1a      	lsrs	r2, r3, #8
    5f40:	061b      	lsls	r3, r3, #24
    5f42:	199c      	adds	r4, r3, r6
    5f44:	4b05      	ldr	r3, [pc, #20]	; (5f5c <sys_clock_timeout_handler+0x44>)
    5f46:	f142 0500 	adc.w	r5, r2, #0
    5f4a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    5f4e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    5f50:	f003 bf70 	b.w	9e34 <sys_clock_announce>
    5f54:	200025a0 	.word	0x200025a0
    5f58:	2001413c 	.word	0x2001413c
    5f5c:	200025a8 	.word	0x200025a8

00005f60 <compare_int_unlock>:
	if (key) {
    5f60:	b1d9      	cbz	r1, 5f9a <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    5f62:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5f64:	4a0d      	ldr	r2, [pc, #52]	; (5f9c <compare_int_unlock+0x3c>)
    5f66:	4083      	lsls	r3, r0
    5f68:	e8d2 cfef 	ldaex	ip, [r2]
    5f6c:	ea4c 0c03 	orr.w	ip, ip, r3
    5f70:	e8c2 cfe1 	stlex	r1, ip, [r2]
    5f74:	2900      	cmp	r1, #0
    5f76:	d1f7      	bne.n	5f68 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    5f7c:	4a08      	ldr	r2, [pc, #32]	; (5fa0 <compare_int_unlock+0x40>)
    5f7e:	4083      	lsls	r3, r0
    5f80:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f84:	4b07      	ldr	r3, [pc, #28]	; (5fa4 <compare_int_unlock+0x44>)
    5f86:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5f8a:	40c3      	lsrs	r3, r0
    5f8c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f8e:	bf42      	ittt	mi
    5f90:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    5f94:	4b04      	ldrmi	r3, [pc, #16]	; (5fa8 <compare_int_unlock+0x48>)
    5f96:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5f9a:	4770      	bx	lr
    5f9c:	20014138 	.word	0x20014138
    5fa0:	50015000 	.word	0x50015000
    5fa4:	20014134 	.word	0x20014134
    5fa8:	e000e100 	.word	0xe000e100

00005fac <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5fac:	4b0d      	ldr	r3, [pc, #52]	; (5fe4 <z_nrf_rtc_timer_read+0x38>)
    5fae:	6818      	ldr	r0, [r3, #0]
    5fb0:	0a01      	lsrs	r1, r0, #8
    5fb2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5fb4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5fb8:	4b0b      	ldr	r3, [pc, #44]	; (5fe8 <z_nrf_rtc_timer_read+0x3c>)
    5fba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5fbe:	1818      	adds	r0, r3, r0
    5fc0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5fc8:	d20a      	bcs.n	5fe0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5fca:	4b08      	ldr	r3, [pc, #32]	; (5fec <z_nrf_rtc_timer_read+0x40>)
    5fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    5fd0:	4290      	cmp	r0, r2
    5fd2:	eb71 0303 	sbcs.w	r3, r1, r3
    5fd6:	d203      	bcs.n	5fe0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5fd8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5fdc:	f141 0100 	adc.w	r1, r1, #0
}
    5fe0:	4770      	bx	lr
    5fe2:	bf00      	nop
    5fe4:	2001413c 	.word	0x2001413c
    5fe8:	50015000 	.word	0x50015000
    5fec:	200025a8 	.word	0x200025a8

00005ff0 <compare_set>:
{
    5ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ff4:	4616      	mov	r6, r2
    5ff6:	461f      	mov	r7, r3
    5ff8:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    5ffa:	f7ff ff6d 	bl	5ed8 <compare_int_lock>
    5ffe:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6000:	f7ff ffd4 	bl	5fac <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6004:	42b0      	cmp	r0, r6
    6006:	eb71 0307 	sbcs.w	r3, r1, r7
    600a:	d250      	bcs.n	60ae <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    600c:	4b38      	ldr	r3, [pc, #224]	; (60f0 <compare_set+0x100>)
    600e:	1a30      	subs	r0, r6, r0
    6010:	eb67 0101 	sbc.w	r1, r7, r1
    6014:	4298      	cmp	r0, r3
    6016:	f171 0100 	sbcs.w	r1, r1, #0
    601a:	d265      	bcs.n	60e8 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    601c:	4b35      	ldr	r3, [pc, #212]	; (60f4 <compare_set+0x104>)
    601e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    6022:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6026:	429f      	cmp	r7, r3
    6028:	bf08      	it	eq
    602a:	4296      	cmpeq	r6, r2
    602c:	d049      	beq.n	60c2 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    602e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
    6032:	4931      	ldr	r1, [pc, #196]	; (60f8 <compare_set+0x108>)
    6034:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    6038:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    603a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    603e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    6042:	f006 f882 	bl	c14a <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    6046:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    604a:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    604c:	f104 0550 	add.w	r5, r4, #80	; 0x50
    6050:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6052:	b2ad      	uxth	r5, r5
    6054:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    6058:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    605c:	4a27      	ldr	r2, [pc, #156]	; (60fc <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    605e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    6062:	9301      	str	r3, [sp, #4]
    6064:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6068:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    606c:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    6070:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    6074:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6078:	eba0 0008 	sub.w	r0, r0, r8
    607c:	3803      	subs	r0, #3
    607e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6082:	4290      	cmp	r0, r2
    6084:	d91d      	bls.n	60c2 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6086:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    6088:	b160      	cbz	r0, 60a4 <compare_set+0xb4>
     return p_reg->COUNTER;
    608a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    608e:	eba8 000b 	sub.w	r0, r8, fp
    6092:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    6096:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    609a:	d912      	bls.n	60c2 <compare_set+0xd2>
					event_clear(chan);
    609c:	4620      	mov	r0, r4
    609e:	f006 f854 	bl	c14a <event_clear>
    60a2:	4a16      	ldr	r2, [pc, #88]	; (60fc <compare_set+0x10c>)
			cc_val = now + cc_inc;
    60a4:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    60a8:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    60ac:	e7da      	b.n	6064 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    60ae:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    60b0:	4a13      	ldr	r2, [pc, #76]	; (6100 <compare_set+0x110>)
    60b2:	40a3      	lsls	r3, r4
    60b4:	e8d2 0fef 	ldaex	r0, [r2]
    60b8:	4318      	orrs	r0, r3
    60ba:	e8c2 0fe1 	stlex	r1, r0, [r2]
    60be:	2900      	cmp	r1, #0
    60c0:	d1f8      	bne.n	60b4 <compare_set+0xc4>
	return ret;
    60c2:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    60c4:	490b      	ldr	r1, [pc, #44]	; (60f4 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    60c6:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    60c8:	0123      	lsls	r3, r4, #4
    60ca:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    60ce:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    60d0:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    60d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    60d6:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    60d8:	4620      	mov	r0, r4
    60da:	9900      	ldr	r1, [sp, #0]
    60dc:	f7ff ff40 	bl	5f60 <compare_int_unlock>
}
    60e0:	4628      	mov	r0, r5
    60e2:	b003      	add	sp, #12
    60e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    60e8:	f06f 0515 	mvn.w	r5, #21
    60ec:	e7f4      	b.n	60d8 <compare_set+0xe8>
    60ee:	bf00      	nop
    60f0:	00800001 	.word	0x00800001
    60f4:	20002590 	.word	0x20002590
    60f8:	50015000 	.word	0x50015000
    60fc:	007ffffd 	.word	0x007ffffd
    6100:	20014134 	.word	0x20014134

00006104 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    6104:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PRESCALER = val;
    6106:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    6108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    610c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6110:	4d16      	ldr	r5, [pc, #88]	; (616c <sys_clock_driver_init+0x68>)
    6112:	4b17      	ldr	r3, [pc, #92]	; (6170 <sys_clock_driver_init+0x6c>)
    6114:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    6118:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    611c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6120:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    6124:	2302      	movs	r3, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6126:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    612a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    612e:	4b11      	ldr	r3, [pc, #68]	; (6174 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6130:	2101      	movs	r1, #1
    6132:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    6136:	2015      	movs	r0, #21
    6138:	4622      	mov	r2, r4
    613a:	f7fd fe19 	bl	3d70 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    613e:	2015      	movs	r0, #21
    6140:	f7fd fde6 	bl	3d10 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6144:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6146:	4a0c      	ldr	r2, [pc, #48]	; (6178 <sys_clock_driver_init+0x74>)
    6148:	60ab      	str	r3, [r5, #8]
    614a:	602b      	str	r3, [r5, #0]
    614c:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    614e:	4b0b      	ldr	r3, [pc, #44]	; (617c <sys_clock_driver_init+0x78>)
    6150:	4a0b      	ldr	r2, [pc, #44]	; (6180 <sys_clock_driver_init+0x7c>)
    6152:	9300      	str	r3, [sp, #0]
    6154:	4620      	mov	r0, r4
    6156:	2300      	movs	r3, #0
    6158:	9401      	str	r4, [sp, #4]
    615a:	f7ff ff49 	bl	5ff0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    615e:	4620      	mov	r0, r4
    6160:	f7ff f8f0 	bl	5344 <z_nrf_clock_control_lf_on>

	return 0;
}
    6164:	4620      	mov	r0, r4
    6166:	b003      	add	sp, #12
    6168:	bd30      	pop	{r4, r5, pc}
    616a:	bf00      	nop
    616c:	50015000 	.word	0x50015000
    6170:	20002590 	.word	0x20002590
    6174:	e000e100 	.word	0xe000e100
    6178:	20014138 	.word	0x20014138
    617c:	00005f19 	.word	0x00005f19
    6180:	007fffff 	.word	0x007fffff

00006184 <rtc_nrf_isr>:
{
    6184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    6188:	4b2e      	ldr	r3, [pc, #184]	; (6244 <rtc_nrf_isr+0xc0>)
    618a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    618e:	0790      	lsls	r0, r2, #30
    6190:	d50b      	bpl.n	61aa <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6192:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    6196:	b142      	cbz	r2, 61aa <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6198:	2200      	movs	r2, #0
    619a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    619e:	4a2a      	ldr	r2, [pc, #168]	; (6248 <rtc_nrf_isr+0xc4>)
    61a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    61a4:	6813      	ldr	r3, [r2, #0]
    61a6:	3301      	adds	r3, #1
    61a8:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    61aa:	4a26      	ldr	r2, [pc, #152]	; (6244 <rtc_nrf_isr+0xc0>)
    61ac:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    61b0:	03d9      	lsls	r1, r3, #15
    61b2:	d527      	bpl.n	6204 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    61b4:	4b25      	ldr	r3, [pc, #148]	; (624c <rtc_nrf_isr+0xc8>)
    61b6:	e8d3 1fef 	ldaex	r1, [r3]
    61ba:	f021 0001 	bic.w	r0, r1, #1
    61be:	e8c3 0fe4 	stlex	r4, r0, [r3]
    61c2:	2c00      	cmp	r4, #0
    61c4:	d1f7      	bne.n	61b6 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    61c6:	07cb      	lsls	r3, r1, #31
    61c8:	d402      	bmi.n	61d0 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61ca:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    61ce:	b1cb      	cbz	r3, 6204 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    61d0:	2500      	movs	r5, #0
    61d2:	4c1c      	ldr	r4, [pc, #112]	; (6244 <rtc_nrf_isr+0xc0>)
    61d4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    61d8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    61dc:	f7ff fee6 	bl	5fac <z_nrf_rtc_timer_read>
    61e0:	f04f 0320 	mov.w	r3, #32
    61e4:	f3ef 8211 	mrs	r2, BASEPRI
    61e8:	f383 8812 	msr	BASEPRI_MAX, r3
    61ec:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    61f0:	4b17      	ldr	r3, [pc, #92]	; (6250 <rtc_nrf_isr+0xcc>)
    61f2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    61f6:	42b0      	cmp	r0, r6
    61f8:	41b9      	sbcs	r1, r7
    61fa:	d206      	bcs.n	620a <rtc_nrf_isr+0x86>
	__asm__ volatile(
    61fc:	f382 8811 	msr	BASEPRI, r2
    6200:	f3bf 8f6f 	isb	sy
}
    6204:	b003      	add	sp, #12
    6206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    620a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    620e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6212:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    6216:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6218:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    621c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6220:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6224:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6228:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    622c:	f382 8811 	msr	BASEPRI, r2
    6230:	f3bf 8f6f 	isb	sy
		if (handler) {
    6234:	2900      	cmp	r1, #0
    6236:	d0e5      	beq.n	6204 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    6238:	9000      	str	r0, [sp, #0]
    623a:	4632      	mov	r2, r6
    623c:	463b      	mov	r3, r7
    623e:	4628      	mov	r0, r5
    6240:	4788      	blx	r1
    6242:	e7df      	b.n	6204 <rtc_nrf_isr+0x80>
    6244:	50015000 	.word	0x50015000
    6248:	2001413c 	.word	0x2001413c
    624c:	20014134 	.word	0x20014134
    6250:	20002590 	.word	0x20002590

00006254 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    6254:	1c43      	adds	r3, r0, #1
{
    6256:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    6258:	d021      	beq.n	629e <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    625a:	2801      	cmp	r0, #1
    625c:	dd21      	ble.n	62a2 <sys_clock_set_timeout+0x4e>
    625e:	4a12      	ldr	r2, [pc, #72]	; (62a8 <sys_clock_set_timeout+0x54>)
    6260:	4b12      	ldr	r3, [pc, #72]	; (62ac <sys_clock_set_timeout+0x58>)
    6262:	4290      	cmp	r0, r2
    6264:	bfd4      	ite	le
    6266:	4604      	movle	r4, r0
    6268:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    626a:	f7ff fe9f 	bl	5fac <z_nrf_rtc_timer_read>
    626e:	4b10      	ldr	r3, [pc, #64]	; (62b0 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    6270:	490e      	ldr	r1, [pc, #56]	; (62ac <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6272:	e9d3 2300 	ldrd	r2, r3, [r3]
    6276:	1a80      	subs	r0, r0, r2
		cyc = 0;
    6278:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    627c:	bf28      	it	cs
    627e:	2400      	movcs	r4, #0
	cyc += unannounced;
    6280:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    6282:	428c      	cmp	r4, r1
    6284:	bf28      	it	cs
    6286:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    6288:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    628a:	490a      	ldr	r1, [pc, #40]	; (62b4 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    628c:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    628e:	9001      	str	r0, [sp, #4]
    6290:	9100      	str	r1, [sp, #0]
    6292:	f143 0300 	adc.w	r3, r3, #0
    6296:	f7ff feab 	bl	5ff0 <compare_set>
}
    629a:	b002      	add	sp, #8
    629c:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    629e:	4c03      	ldr	r4, [pc, #12]	; (62ac <sys_clock_set_timeout+0x58>)
    62a0:	e7e3      	b.n	626a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    62a2:	2401      	movs	r4, #1
    62a4:	e7e1      	b.n	626a <sys_clock_set_timeout+0x16>
    62a6:	bf00      	nop
    62a8:	007ffffe 	.word	0x007ffffe
    62ac:	007fffff 	.word	0x007fffff
    62b0:	200025a0 	.word	0x200025a0
    62b4:	00005f19 	.word	0x00005f19

000062b8 <sys_clock_elapsed>:
{
    62b8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    62ba:	f7ff fe77 	bl	5fac <z_nrf_rtc_timer_read>
    62be:	4b02      	ldr	r3, [pc, #8]	; (62c8 <sys_clock_elapsed+0x10>)
    62c0:	681b      	ldr	r3, [r3, #0]
}
    62c2:	1ac0      	subs	r0, r0, r3
    62c4:	bd08      	pop	{r3, pc}
    62c6:	bf00      	nop
    62c8:	200025a0 	.word	0x200025a0

000062cc <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    62cc:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    62d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    62d4:	4e56      	ldr	r6, [pc, #344]	; (6430 <pinctrl_configure_pins+0x164>)
    62d6:	4f57      	ldr	r7, [pc, #348]	; (6434 <pinctrl_configure_pins+0x168>)
    62d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    62dc:	4281      	cmp	r1, r0
    62de:	d102      	bne.n	62e6 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    62e0:	2000      	movs	r0, #0
}
    62e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    62e6:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    62e8:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    62ec:	f3c4 2543 	ubfx	r5, r4, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    62f0:	0c24      	lsrs	r4, r4, #16
			pin = 0xFFFFFFFFU;
    62f2:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    62f4:	f1a4 0404 	sub.w	r4, r4, #4
			pin = 0xFFFFFFFFU;
    62f8:	bf08      	it	eq
    62fa:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    62fe:	2c1e      	cmp	r4, #30
    6300:	f200 8092 	bhi.w	6428 <pinctrl_configure_pins+0x15c>
    6304:	e8df f004 	tbb	[pc, r4]
    6308:	90272310 	.word	0x90272310
    630c:	2b909090 	.word	0x2b909090
    6310:	90909058 	.word	0x90909058
    6314:	90909090 	.word	0x90909090
    6318:	725b9090 	.word	0x725b9090
    631c:	90907875 	.word	0x90907875
    6320:	84817b90 	.word	0x84817b90
    6324:	8a87      	.short	0x8a87
    6326:	8d          	.byte	0x8d
    6327:	00          	.byte	0x00
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    6328:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    632a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    632e:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    6332:	f1b9 0f01 	cmp.w	r9, #1
    6336:	bf14      	ite	ne
    6338:	46b0      	movne	r8, r6
    633a:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    633c:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6340:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    6344:	f8c8 e00c 	str.w	lr, [r8, #12]
    6348:	f04f 0e01 	mov.w	lr, #1
    634c:	e00e      	b.n	636c <pinctrl_configure_pins+0xa0>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    634e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    6352:	2401      	movs	r4, #1
    6354:	e7eb      	b.n	632e <pinctrl_configure_pins+0x62>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    6356:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    635a:	2400      	movs	r4, #0
    635c:	e044      	b.n	63e8 <pinctrl_configure_pins+0x11c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    635e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    6362:	2d00      	cmp	r5, #0
    6364:	d1f9      	bne.n	635a <pinctrl_configure_pins+0x8e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    6366:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    6368:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    636a:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    636c:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    6370:	f003 091f 	and.w	r9, r3, #31
    6374:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    6378:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    637c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    6380:	bf1c      	itt	ne
    6382:	2401      	movne	r4, #1
    6384:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    6388:	2b01      	cmp	r3, #1
    638a:	bf0c      	ite	eq
    638c:	46b8      	moveq	r8, r7
    638e:	46b0      	movne	r8, r6
    6390:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    6394:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    6398:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    639c:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    63a0:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    63a2:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    63a6:	ea43 030e 	orr.w	r3, r3, lr
    63aa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    63ae:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    63b2:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    63b6:	e791      	b.n	62dc <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    63b8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    63bc:	e7d1      	b.n	6362 <pinctrl_configure_pins+0x96>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    63be:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    63c2:	6804      	ldr	r4, [r0, #0]
    63c4:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    63c8:	2c00      	cmp	r4, #0
    63ca:	d0c2      	beq.n	6352 <pinctrl_configure_pins+0x86>
    return pin_number >> 5;
    63cc:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    63d0:	f1b8 0f01 	cmp.w	r8, #1
    63d4:	bf14      	ite	ne
    63d6:	46b6      	movne	lr, r6
    63d8:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    63da:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    63de:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    63e2:	f8ce 4008 	str.w	r4, [lr, #8]
    63e6:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    63e8:	46a6      	mov	lr, r4
    63ea:	e7bf      	b.n	636c <pinctrl_configure_pins+0xa0>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    63ec:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    63f0:	e7e7      	b.n	63c2 <pinctrl_configure_pins+0xf6>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    63f2:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    63f6:	e7e4      	b.n	63c2 <pinctrl_configure_pins+0xf6>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    63f8:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    63fc:	e7e1      	b.n	63c2 <pinctrl_configure_pins+0xf6>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    63fe:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    6402:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    6404:	f04f 0e00 	mov.w	lr, #0
    6408:	e7b0      	b.n	636c <pinctrl_configure_pins+0xa0>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    640a:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    if (value == 0)
    640e:	e7dd      	b.n	63cc <pinctrl_configure_pins+0x100>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    6410:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    6414:	e7f5      	b.n	6402 <pinctrl_configure_pins+0x136>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    6416:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
			if (write != NO_WRITE) {
    641a:	e7f2      	b.n	6402 <pinctrl_configure_pins+0x136>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    641c:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    6420:	e7ef      	b.n	6402 <pinctrl_configure_pins+0x136>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    6422:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    6426:	e7ec      	b.n	6402 <pinctrl_configure_pins+0x136>
		switch (NRF_GET_FUN(pins[i])) {
    6428:	f06f 0085 	mvn.w	r0, #133	; 0x85
    642c:	e759      	b.n	62e2 <pinctrl_configure_pins+0x16>
    642e:	bf00      	nop
    6430:	50842500 	.word	0x50842500
    6434:	50842800 	.word	0x50842800

00006438 <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    6438:	ea40 0301 	orr.w	r3, r0, r1
    643c:	f3c3 030d 	ubfx	r3, r3, #0, #14
{
    6440:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    6442:	b98b      	cbnz	r3, 6468 <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    6444:	f240 1515 	movw	r5, #277	; 0x115
    6448:	4c09      	ldr	r4, [pc, #36]	; (6470 <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    644a:	0b89      	lsrs	r1, r1, #14
		nrf_spu_flashregion_set(NRF_SPU_S,
    644c:	f3c0 3087 	ubfx	r0, r0, #14, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    6450:	4299      	cmp	r1, r3
    6452:	d101      	bne.n	6458 <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    6454:	2000      	movs	r0, #0
}
    6456:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    6458:	18c2      	adds	r2, r0, r3
    645a:	b2d2      	uxtb	r2, r2
    645c:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    6460:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    6464:	3301      	adds	r3, #1
    6466:	e7f3      	b.n	6450 <fprotect_area+0x18>
		return -EINVAL;
    6468:	f06f 0015 	mvn.w	r0, #21
    646c:	e7f3      	b.n	6456 <fprotect_area+0x1e>
    646e:	bf00      	nop
    6470:	50003000 	.word	0x50003000

00006474 <pcd_fw_copy_status_get>:
	cmd->magic = PCD_CMD_MAGIC_FAIL;
}

enum pcd_status pcd_fw_copy_status_get(void)
{
	if (cmd->magic == PCD_CMD_MAGIC_COPY) {
    6474:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    6478:	6818      	ldr	r0, [r3, #0]
    647a:	4b05      	ldr	r3, [pc, #20]	; (6490 <pcd_fw_copy_status_get+0x1c>)
    647c:	4298      	cmp	r0, r3
    647e:	d005      	beq.n	648c <pcd_fw_copy_status_get+0x18>
		return PCD_STATUS_COPY;
	} else if (cmd->magic == PCD_CMD_MAGIC_DONE) {
		return PCD_STATUS_COPY_DONE;
	}

	return PCD_STATUS_COPY_FAILED;
    6480:	4b04      	ldr	r3, [pc, #16]	; (6494 <pcd_fw_copy_status_get+0x20>)
    6482:	4298      	cmp	r0, r3
    6484:	bf0c      	ite	eq
    6486:	2001      	moveq	r0, #1
    6488:	2002      	movne	r0, #2
    648a:	4770      	bx	lr
		return PCD_STATUS_COPY;
    648c:	2000      	movs	r0, #0
}
    648e:	4770      	bx	lr
    6490:	b5b4b3b6 	.word	0xb5b4b3b6
    6494:	f103ce5d 	.word	0xf103ce5d

00006498 <network_core_finished_check_handler>:
	 */
	nrf_spu_extdomain_set(NRF_SPU, 0, false, false);
}

static void network_core_finished_check_handler(struct k_timer *timer)
{
    6498:	b508      	push	{r3, lr}
	if (pcd_fw_copy_status_get() != PCD_STATUS_COPY) {
    649a:	f7ff ffeb 	bl	6474 <pcd_fw_copy_status_get>
    649e:	b130      	cbz	r0, 64ae <network_core_finished_check_handler+0x16>
	z_impl_k_timer_stop(timer);
    64a0:	4803      	ldr	r0, [pc, #12]	; (64b0 <network_core_finished_check_handler+0x18>)
    64a2:	f007 ffb2 	bl	e40a <z_impl_k_timer_stop>
                                             bool           secure_attr,
                                             bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->EXTDOMAIN[domain_id].PERM & SPU_EXTDOMAIN_PERM_LOCK_Msk));

    p_reg->EXTDOMAIN[domain_id].PERM =
    64a6:	2200      	movs	r2, #0
    64a8:	4b02      	ldr	r3, [pc, #8]	; (64b4 <network_core_finished_check_handler+0x1c>)
    64aa:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
		 * successfully, tidy up and cancel timer
		 */
		k_timer_stop(&network_core_finished_check_timer);
		network_core_pcd_tidy();
	}
}
    64ae:	bd08      	pop	{r3, pc}
    64b0:	20002290 	.word	0x20002290
    64b4:	50003000 	.word	0x50003000

000064b8 <pcd_network_core_update_initiate>:
    64b8:	2210      	movs	r2, #16
    64ba:	4b14      	ldr	r3, [pc, #80]	; (650c <pcd_network_core_update_initiate+0x54>)

	return network_core_pcd_cmdset(src_addr, len, wait);
}

int pcd_network_core_update_initiate(const void *src_addr, size_t len)
{
    64bc:	b513      	push	{r0, r1, r4, lr}
    64be:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
}

#if NRF_RESET_HAS_APPLICATION
NRF_STATIC_INLINE void nrf_reset_network_force_off(NRF_RESET_Type * p_reg, bool hold)
{
    p_reg->NETWORK.FORCEOFF = (hold ? RESET_NETWORK_FORCEOFF_FORCEOFF_Hold :
    64c2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    64c6:	2301      	movs	r3, #1
    64c8:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    64cc:	b1d0      	cbz	r0, 6504 <pcd_network_core_update_initiate+0x4c>
    64ce:	b1c9      	cbz	r1, 6504 <pcd_network_core_update_initiate+0x4c>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    64d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    64d4:	4c0e      	ldr	r4, [pc, #56]	; (6510 <pcd_network_core_update_initiate+0x58>)
	cmd->len = len;
    64d6:	6099      	str	r1, [r3, #8]
	cmd->data = data;
    64d8:	e9c3 4000 	strd	r4, r0, [r3]
	cmd->offset = offset;
    64dc:	f44f 4108 	mov.w	r1, #34816	; 0x8800
    64e0:	2400      	movs	r4, #0
    64e2:	60d9      	str	r1, [r3, #12]
    64e4:	f8c2 4614 	str.w	r4, [r2, #1556]	; 0x614
	int rc = network_core_update(src_addr, len, false);

	if (rc == 0) {
		k_timer_start(&network_core_finished_check_timer,
    64e8:	2300      	movs	r3, #0
	compiler_barrier();
    64ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	z_impl_k_timer_start(timer, duration, period);
    64ee:	4809      	ldr	r0, [pc, #36]	; (6514 <pcd_network_core_update_initiate+0x5c>)
    64f0:	e9cd 2300 	strd	r2, r3, [sp]
    64f4:	f003 fd7e 	bl	9ff4 <z_impl_k_timer_start>
	z_impl_k_busy_wait(usec_to_wait);
    64f8:	4807      	ldr	r0, [pc, #28]	; (6518 <pcd_network_core_update_initiate+0x60>)
    64fa:	f007 ff60 	bl	e3be <z_impl_k_busy_wait>
    64fe:	4620      	mov	r0, r4
			      NETWORK_CORE_UPDATE_CHECK_TIME);
		k_busy_wait(1 * USEC_PER_SEC);
	}

	return rc;
}
    6500:	b002      	add	sp, #8
    6502:	bd10      	pop	{r4, pc}
    6504:	f06f 0015 	mvn.w	r0, #21
	return rc;
    6508:	e7fa      	b.n	6500 <pcd_network_core_update_initiate+0x48>
    650a:	bf00      	nop
    650c:	50003000 	.word	0x50003000
    6510:	b5b4b3b6 	.word	0xb5b4b3b6
    6514:	20002290 	.word	0x20002290
    6518:	000f4240 	.word	0x000f4240

0000651c <pcd_network_core_update>:
    651c:	2210      	movs	r2, #16
    651e:	4b17      	ldr	r3, [pc, #92]	; (657c <pcd_network_core_update+0x60>)

int pcd_network_core_update(const void *src_addr, size_t len)
{
    6520:	b510      	push	{r4, lr}
    6522:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
    6526:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    652a:	2301      	movs	r3, #1
    652c:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    6530:	b308      	cbz	r0, 6576 <pcd_network_core_update+0x5a>
    6532:	b301      	cbz	r1, 6576 <pcd_network_core_update+0x5a>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    6534:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	cmd->len = len;
    6538:	6099      	str	r1, [r3, #8]
	cmd->offset = offset;
    653a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
	cmd->magic = PCD_CMD_MAGIC_COPY;
    653e:	4c10      	ldr	r4, [pc, #64]	; (6580 <pcd_network_core_update+0x64>)
	cmd->offset = offset;
    6540:	60d9      	str	r1, [r3, #12]
	cmd->data = data;
    6542:	e9c3 4000 	strd	r4, r0, [r3]
    6546:	2300      	movs	r3, #0
    6548:	4c0e      	ldr	r4, [pc, #56]	; (6584 <pcd_network_core_update+0x68>)
    654a:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
    654e:	4620      	mov	r0, r4
    6550:	f007 ff35 	bl	e3be <z_impl_k_busy_wait>
		err = pcd_fw_copy_status_get();
    6554:	f7ff ff8e 	bl	6474 <pcd_fw_copy_status_get>
	} while (err == PCD_STATUS_COPY);
    6558:	2800      	cmp	r0, #0
    655a:	d0f8      	beq.n	654e <pcd_network_core_update+0x32>
	if (err == PCD_STATUS_COPY_FAILED) {
    655c:	2802      	cmp	r0, #2
    655e:	d009      	beq.n	6574 <pcd_network_core_update+0x58>
    6560:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6564:	2201      	movs	r2, #1
    6566:	2000      	movs	r0, #0
    6568:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    656c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    6570:	f8c3 0440 	str.w	r0, [r3, #1088]	; 0x440
	return network_core_update(src_addr, len, true);
}
    6574:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6576:	f06f 0015 	mvn.w	r0, #21
	return network_core_update(src_addr, len, true);
    657a:	e7fb      	b.n	6574 <pcd_network_core_update+0x58>
    657c:	50003000 	.word	0x50003000
    6580:	b5b4b3b6 	.word	0xb5b4b3b6
    6584:	000f4240 	.word	0x000f4240

00006588 <pcd_lock_ram>:
    p_reg->RAMREGION[region_id].PERM = permissions         |
    6588:	f44f 7282 	mov.w	r2, #260	; 0x104
    658c:	4b01      	ldr	r3, [pc, #4]	; (6594 <pcd_lock_ram+0xc>)
    658e:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
{
	uint32_t region = PCD_CMD_ADDRESS/CONFIG_NRF_SPU_RAM_REGION_SIZE;

	nrf_spu_ramregion_set(NRF_SPU, region, false, NRF_SPU_MEM_PERM_READ,
			true);
}
    6592:	4770      	bx	lr
    6594:	50003000 	.word	0x50003000

00006598 <boot_read_image_header_hook>:
#include <dfu/pcd.h>

int boot_read_image_header_hook(int img_index, int slot,
		struct image_header *img_head)
{
	if (img_index == 1 && slot == 0) {
    6598:	2801      	cmp	r0, #1
    659a:	d10f      	bne.n	65bc <boot_read_image_header_hook+0x24>
    659c:	b979      	cbnz	r1, 65be <boot_read_image_header_hook+0x26>
		img_head->ih_magic = IMAGE_MAGIC;
    659e:	4b08      	ldr	r3, [pc, #32]	; (65c0 <boot_read_image_header_hook+0x28>)
		img_head->ih_ver.iv_major = 0;
		img_head->ih_ver.iv_minor = 0;
		img_head->ih_ver.iv_revision = 0;
		img_head->ih_ver.iv_build_num = 0;
		img_head->_pad1 = 0;
		return 0;
    65a0:	4608      	mov	r0, r1
		img_head->ih_magic = IMAGE_MAGIC;
    65a2:	6013      	str	r3, [r2, #0]
		img_head->ih_hdr_size = PM_MCUBOOT_PAD_SIZE;
    65a4:	f44f 7300 	mov.w	r3, #512	; 0x200
    65a8:	8113      	strh	r3, [r2, #8]
		img_head->ih_img_size = PM_CPUNET_APP_SIZE;
    65aa:	f44f 335e 	mov.w	r3, #227328	; 0x37800
		img_head->ih_ver.iv_build_num = 0;
    65ae:	e9c2 1105 	strd	r1, r1, [r2, #20]
		img_head->ih_flags = 0;
    65b2:	e9c2 3103 	strd	r3, r1, [r2, #12]
		img_head->ih_load_addr = PM_MCUBOOT_PRIMARY_1_ADDRESS;
    65b6:	6051      	str	r1, [r2, #4]
		img_head->_pad1 = 0;
    65b8:	61d1      	str	r1, [r2, #28]
		return 0;
    65ba:	4770      	bx	lr
	}

	return BOOT_HOOK_REGULAR;
    65bc:	2001      	movs	r0, #1
}
    65be:	4770      	bx	lr
    65c0:	96f3b83d 	.word	0x96f3b83d

000065c4 <boot_image_check_hook>:

fih_int boot_image_check_hook(int img_index, int slot)
{
	if (img_index == 1 && slot == 0) {
    65c4:	2801      	cmp	r0, #1
    65c6:	d103      	bne.n	65d0 <boot_image_check_hook+0xc>
    65c8:	b919      	cbnz	r1, 65d2 <boot_image_check_hook+0xe>
		FIH_RET(FIH_SUCCESS);
    65ca:	4b02      	ldr	r3, [pc, #8]	; (65d4 <boot_image_check_hook+0x10>)
    65cc:	6818      	ldr	r0, [r3, #0]
    65ce:	4770      	bx	lr
	}

	FIH_RET(fih_int_encode(BOOT_HOOK_REGULAR));
    65d0:	2001      	movs	r0, #1
}
    65d2:	4770      	bx	lr
    65d4:	20002740 	.word	0x20002740

000065d8 <network_core_update>:

	return BOOT_HOOK_REGULAR;
}

int network_core_update(bool wait)
{
    65d8:	b513      	push	{r0, r1, r4, lr}
    65da:	4604      	mov	r4, r0
    65dc:	4810      	ldr	r0, [pc, #64]	; (6620 <network_core_update+0x48>)
    65de:	f007 fc58 	bl	de92 <z_device_is_ready>
	static const struct device *mock_flash_dev;
	void *mock_flash;
	size_t mock_size;

	mock_flash_dev = DEVICE_DT_GET(DT_NODELABEL(PM_MCUBOOT_PRIMARY_1_DEV));
	if (!device_is_ready(mock_flash_dev)) {
    65e2:	b1b0      	cbz	r0, 6612 <network_core_update+0x3a>
		union { uintptr_t x; size_t * val; } parm1 = { .val = mock_size };
		return (void *) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_FLASH_SIMULATOR_GET_MEMORY);
	}
#endif
	compiler_barrier();
	return z_impl_flash_simulator_get_memory(dev, mock_size);
    65e4:	2000      	movs	r0, #0
    65e6:	a901      	add	r1, sp, #4
    65e8:	f7ff fbd0 	bl	5d8c <z_impl_flash_simulator_get_memory>
		return -ENODEV;
	}

	mock_flash = flash_simulator_get_memory(NULL, &mock_size);
	hdr = (struct image_header *) mock_flash;
	if (hdr->ih_magic == IMAGE_MAGIC) {
    65ec:	4b0d      	ldr	r3, [pc, #52]	; (6624 <network_core_update+0x4c>)
    65ee:	6802      	ldr	r2, [r0, #0]
    65f0:	429a      	cmp	r2, r3
    65f2:	d111      	bne.n	6618 <network_core_update+0x40>
		uint32_t fw_size = hdr->ih_img_size;
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    65f4:	8903      	ldrh	r3, [r0, #8]
		uint32_t fw_size = hdr->ih_img_size;
    65f6:	68c1      	ldr	r1, [r0, #12]
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    65f8:	4418      	add	r0, r3
		uint32_t *vtable = (uint32_t *)(vtable_addr);
		uint32_t reset_addr = vtable[1];

		if (reset_addr > PM_CPUNET_B0N_ADDRESS) {
    65fa:	6843      	ldr	r3, [r0, #4]
    65fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    6600:	d90a      	bls.n	6618 <network_core_update+0x40>
			if (wait) {
    6602:	b11c      	cbz	r4, 660c <network_core_update+0x34>
				return pcd_network_core_update(vtable, fw_size);
    6604:	f7ff ff8a 	bl	651c <pcd_network_core_update>
		}
	}

	/* No IMAGE_MAGIC no valid image */
	return -ENODATA;
}
    6608:	b002      	add	sp, #8
    660a:	bd10      	pop	{r4, pc}
				return pcd_network_core_update_initiate(vtable, fw_size);
    660c:	f7ff ff54 	bl	64b8 <pcd_network_core_update_initiate>
    6610:	e7fa      	b.n	6608 <network_core_update+0x30>
		return -ENODEV;
    6612:	f06f 0012 	mvn.w	r0, #18
    6616:	e7f7      	b.n	6608 <network_core_update+0x30>
	return -ENODATA;
    6618:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    661c:	e7f4      	b.n	6608 <network_core_update+0x30>
    661e:	bf00      	nop
    6620:	0000e648 	.word	0x0000e648
    6624:	96f3b83d 	.word	0x96f3b83d

00006628 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    6628:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    662a:	6881      	ldr	r1, [r0, #8]
{
    662c:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    662e:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    6630:	f021 0407 	bic.w	r4, r1, #7
{
    6634:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    6636:	f004 ff3f 	bl	b4b8 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    663a:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    663c:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    663e:	4668      	mov	r0, sp
    6640:	f005 faab 	bl	bb9a <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    6644:	2210      	movs	r2, #16
    6646:	4668      	mov	r0, sp
    6648:	4906      	ldr	r1, [pc, #24]	; (6664 <boot_write_magic+0x3c>)
    664a:	f005 fa9b 	bl	bb84 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    664e:	2310      	movs	r3, #16
    6650:	466a      	mov	r2, sp
    6652:	4621      	mov	r1, r4
    6654:	4628      	mov	r0, r5
    6656:	f004 feff 	bl	b458 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    665a:	3800      	subs	r0, #0
    665c:	bf18      	it	ne
    665e:	2001      	movne	r0, #1
    6660:	b005      	add	sp, #20
    6662:	bd30      	pop	{r4, r5, pc}
    6664:	0000ef1e 	.word	0x0000ef1e

00006668 <boot_read_swap_state>:
{
    6668:	b530      	push	{r4, r5, lr}
    666a:	460d      	mov	r5, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    666c:	6881      	ldr	r1, [r0, #8]
{
    666e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    6670:	2310      	movs	r3, #16
    6672:	aa02      	add	r2, sp, #8
    6674:	3910      	subs	r1, #16
{
    6676:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    6678:	f004 fed9 	bl	b42e <flash_area_read>
    if (rc < 0) {
    667c:	2800      	cmp	r0, #0
    667e:	da02      	bge.n	6686 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    6680:	2001      	movs	r0, #1
}
    6682:	b007      	add	sp, #28
    6684:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    6686:	2210      	movs	r2, #16
    6688:	4620      	mov	r0, r4
    668a:	a902      	add	r1, sp, #8
    668c:	f005 fdba 	bl	c204 <bootutil_buffer_is_erased>
    6690:	2800      	cmp	r0, #0
    6692:	d13a      	bne.n	670a <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    6694:	2210      	movs	r2, #16
    6696:	491e      	ldr	r1, [pc, #120]	; (6710 <boot_read_swap_state+0xa8>)
    6698:	a802      	add	r0, sp, #8
    669a:	f005 fa4c 	bl	bb36 <memcmp>
    return BOOT_MAGIC_BAD;
    669e:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    66a0:	bf0c      	ite	eq
    66a2:	2301      	moveq	r3, #1
    66a4:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    66a6:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    66a8:	4620      	mov	r0, r4
    66aa:	f005 fd97 	bl	c1dc <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    66ae:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    66b0:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    66b2:	f10d 0207 	add.w	r2, sp, #7
    66b6:	4620      	mov	r0, r4
    66b8:	f004 feb9 	bl	b42e <flash_area_read>
    if (rc < 0) {
    66bc:	2800      	cmp	r0, #0
    66be:	dbdf      	blt.n	6680 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    66c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    66c4:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    66c6:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    66ca:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    66cc:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    66ce:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    66d0:	2201      	movs	r2, #1
    66d2:	f10d 0107 	add.w	r1, sp, #7
    66d6:	f005 fd95 	bl	c204 <bootutil_buffer_is_erased>
    66da:	b910      	cbnz	r0, 66e2 <boot_read_swap_state+0x7a>
    66dc:	786b      	ldrb	r3, [r5, #1]
    66de:	2b04      	cmp	r3, #4
    66e0:	d903      	bls.n	66ea <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    66e2:	2301      	movs	r3, #1
    66e4:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    66e6:	2300      	movs	r3, #0
    66e8:	712b      	strb	r3, [r5, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    66ea:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    66ec:	4620      	mov	r0, r4
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    66ee:	3a18      	subs	r2, #24
    66f0:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    66f4:	3a08      	subs	r2, #8
    66f6:	1ca9      	adds	r1, r5, #2
    66f8:	f005 fd97 	bl	c22a <boot_read_flag>
    if (rc) {
    66fc:	2800      	cmp	r0, #0
    66fe:	d1bf      	bne.n	6680 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    6700:	4620      	mov	r0, r4
    6702:	1ce9      	adds	r1, r5, #3
    6704:	f005 fdad 	bl	c262 <boot_read_image_ok>
    6708:	e7bb      	b.n	6682 <boot_read_swap_state+0x1a>
    670a:	2303      	movs	r3, #3
    670c:	e7cb      	b.n	66a6 <boot_read_swap_state+0x3e>
    670e:	bf00      	nop
    6710:	0000ef1e 	.word	0x0000ef1e

00006714 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    6714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    6716:	4669      	mov	r1, sp
{
    6718:	4604      	mov	r4, r0
    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    671a:	f005 fd3b 	bl	c194 <boot_read_swap_state_primary_slot_hook>
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    671e:	2801      	cmp	r0, #1
    6720:	d14a      	bne.n	67b8 <boot_swap_type_multi+0xa4>
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6722:	4669      	mov	r1, sp
    6724:	2c00      	cmp	r4, #0
    6726:	d041      	beq.n	67ac <boot_swap_type_multi+0x98>
    6728:	2c01      	cmp	r4, #1
    672a:	d03a      	beq.n	67a2 <boot_swap_type_multi+0x8e>
    672c:	20ff      	movs	r0, #255	; 0xff
    672e:	f005 fd9e 	bl	c26e <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    6732:	2800      	cmp	r0, #0
    6734:	d148      	bne.n	67c8 <boot_swap_type_multi+0xb4>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6736:	20ff      	movs	r0, #255	; 0xff
    6738:	a902      	add	r1, sp, #8
    673a:	f005 fd98 	bl	c26e <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
    673e:	2801      	cmp	r0, #1
    6740:	d140      	bne.n	67c4 <boot_swap_type_multi+0xb0>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    6742:	2303      	movs	r3, #3
    6744:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    6748:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    674c:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    674e:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    6752:	f89d 6008 	ldrb.w	r6, [sp, #8]
    6756:	4a21      	ldr	r2, [pc, #132]	; (67dc <boot_swap_type_multi+0xc8>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    6758:	4629      	mov	r1, r5
    675a:	7810      	ldrb	r0, [r2, #0]
    675c:	f005 fd44 	bl	c1e8 <boot_magic_compatible_check>
    6760:	b3a0      	cbz	r0, 67cc <boot_swap_type_multi+0xb8>
            boot_magic_compatible_check(table->magic_secondary_slot,
    6762:	4631      	mov	r1, r6
    6764:	7850      	ldrb	r0, [r2, #1]
    6766:	f005 fd3f 	bl	c1e8 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    676a:	b378      	cbz	r0, 67cc <boot_swap_type_multi+0xb8>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    676c:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
    676e:	2b04      	cmp	r3, #4
    6770:	d003      	beq.n	677a <boot_swap_type_multi+0x66>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    6772:	f89d 1003 	ldrb.w	r1, [sp, #3]
    6776:	4299      	cmp	r1, r3
    6778:	d128      	bne.n	67cc <boot_swap_type_multi+0xb8>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    677a:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    677c:	2b04      	cmp	r3, #4
    677e:	d003      	beq.n	6788 <boot_swap_type_multi+0x74>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    6780:	f89d 100b 	ldrb.w	r1, [sp, #11]
    6784:	4299      	cmp	r1, r3
    6786:	d121      	bne.n	67cc <boot_swap_type_multi+0xb8>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    6788:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    678a:	2b04      	cmp	r3, #4
    678c:	d003      	beq.n	6796 <boot_swap_type_multi+0x82>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    678e:	f89d 1002 	ldrb.w	r1, [sp, #2]
    6792:	4299      	cmp	r1, r3
    6794:	d11a      	bne.n	67cc <boot_swap_type_multi+0xb8>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
            BOOT_LOG_INF("Swap type: %s",
    6796:	7950      	ldrb	r0, [r2, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    6798:	1e83      	subs	r3, r0, #2
    679a:	2b02      	cmp	r3, #2
    679c:	d814      	bhi.n	67c8 <boot_swap_type_multi+0xb4>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    679e:	b004      	add	sp, #16
    67a0:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    67a2:	f005 fd64 	bl	c26e <boot_read_swap_state_by_id>
    if (rc) {
    67a6:	b978      	cbnz	r0, 67c8 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    67a8:	2008      	movs	r0, #8
    67aa:	e7c5      	b.n	6738 <boot_swap_type_multi+0x24>
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    67ac:	2004      	movs	r0, #4
    67ae:	f005 fd5e 	bl	c26e <boot_read_swap_state_by_id>
    if (rc) {
    67b2:	b948      	cbnz	r0, 67c8 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    67b4:	2002      	movs	r0, #2
    67b6:	e7bf      	b.n	6738 <boot_swap_type_multi+0x24>
    if (rc) {
    67b8:	b930      	cbnz	r0, 67c8 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    67ba:	2c00      	cmp	r4, #0
    67bc:	d0fa      	beq.n	67b4 <boot_swap_type_multi+0xa0>
    67be:	2c01      	cmp	r4, #1
    67c0:	d1b9      	bne.n	6736 <boot_swap_type_multi+0x22>
    67c2:	e7f1      	b.n	67a8 <boot_swap_type_multi+0x94>
    } else if (rc) {
    67c4:	2800      	cmp	r0, #0
    67c6:	d0c1      	beq.n	674c <boot_swap_type_multi+0x38>
        return BOOT_SWAP_TYPE_PANIC;
    67c8:	20ff      	movs	r0, #255	; 0xff
    67ca:	e7e8      	b.n	679e <boot_swap_type_multi+0x8a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    67cc:	3401      	adds	r4, #1
    67ce:	2c03      	cmp	r4, #3
    67d0:	f102 0206 	add.w	r2, r2, #6
    67d4:	d1c0      	bne.n	6758 <boot_swap_type_multi+0x44>
    return BOOT_SWAP_TYPE_NONE;
    67d6:	2001      	movs	r0, #1
    67d8:	e7e1      	b.n	679e <boot_swap_type_multi+0x8a>
    67da:	bf00      	nop
    67dc:	0000f340 	.word	0x0000f340

000067e0 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    67e0:	6801      	ldr	r1, [r0, #0]
    67e2:	4a0e      	ldr	r2, [pc, #56]	; (681c <verify_header+0x3c>)
{
    67e4:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    67e6:	4291      	cmp	r1, r2
    67e8:	d115      	bne.n	6816 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    67ea:	69c1      	ldr	r1, [r0, #28]
    67ec:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    67f0:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    67f4:	4291      	cmp	r1, r2
    67f6:	d10e      	bne.n	6816 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    67f8:	6882      	ldr	r2, [r0, #8]
    67fa:	2a01      	cmp	r2, #1
    67fc:	d80b      	bhi.n	6816 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    67fe:	68c2      	ldr	r2, [r0, #12]
    6800:	b112      	cbz	r2, 6808 <verify_header+0x28>
    6802:	6901      	ldr	r1, [r0, #16]
    6804:	428a      	cmp	r2, r1
    6806:	d006      	beq.n	6816 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    6808:	6958      	ldr	r0, [r3, #20]
    680a:	b128      	cbz	r0, 6818 <verify_header+0x38>
    680c:	699b      	ldr	r3, [r3, #24]
    680e:	1a1b      	subs	r3, r3, r0
    6810:	4258      	negs	r0, r3
    6812:	4158      	adcs	r0, r3
    6814:	4770      	bx	lr
        return( 1 );
    6816:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    6818:	4770      	bx	lr
    681a:	bf00      	nop
    681c:	ff00aa55 	.word	0xff00aa55

00006820 <verify_chain>:

static int verify_chain( void )
{
    6820:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    6822:	4b0d      	ldr	r3, [pc, #52]	; (6858 <verify_chain+0x38>)
    6824:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    6826:	b1a6      	cbz	r6, 6852 <verify_chain+0x32>
    6828:	4630      	mov	r0, r6
    682a:	f7ff ffd9 	bl	67e0 <verify_header>
    682e:	4604      	mov	r4, r0
    6830:	b978      	cbnz	r0, 6852 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    6832:	68f3      	ldr	r3, [r6, #12]
    6834:	b96b      	cbnz	r3, 6852 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    6836:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    6838:	b90d      	cbnz	r5, 683e <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    683a:	4620      	mov	r0, r4
    683c:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    683e:	4628      	mov	r0, r5
    6840:	f7ff ffce 	bl	67e0 <verify_header>
    6844:	b928      	cbnz	r0, 6852 <verify_chain+0x32>
        if( cur->prev != prv )
    6846:	68eb      	ldr	r3, [r5, #12]
    6848:	42b3      	cmp	r3, r6
    684a:	d102      	bne.n	6852 <verify_chain+0x32>
        cur = cur->next;
    684c:	462e      	mov	r6, r5
    684e:	692d      	ldr	r5, [r5, #16]
    6850:	e7f2      	b.n	6838 <verify_chain+0x18>
        return( 1 );
    6852:	2401      	movs	r4, #1
    6854:	e7f1      	b.n	683a <verify_chain+0x1a>
    6856:	bf00      	nop
    6858:	20014140 	.word	0x20014140

0000685c <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    6860:	4f3f      	ldr	r7, [pc, #252]	; (6960 <buffer_alloc_calloc+0x104>)
    6862:	683c      	ldr	r4, [r7, #0]
    6864:	b1d4      	cbz	r4, 689c <buffer_alloc_calloc+0x40>
    6866:	68bc      	ldr	r4, [r7, #8]
    6868:	b1c4      	cbz	r4, 689c <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    686a:	2800      	cmp	r0, #0
    686c:	d04a      	beq.n	6904 <buffer_alloc_calloc+0xa8>
    686e:	2900      	cmp	r1, #0
    6870:	d048      	beq.n	6904 <buffer_alloc_calloc+0xa8>
    original_len = len = n * size;
    6872:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    6876:	fbb5 f0f0 	udiv	r0, r5, r0
    687a:	4288      	cmp	r0, r1
    687c:	d142      	bne.n	6904 <buffer_alloc_calloc+0xa8>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    687e:	1d28      	adds	r0, r5, #4
    6880:	d840      	bhi.n	6904 <buffer_alloc_calloc+0xa8>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    6882:	07a9      	lsls	r1, r5, #30
    6884:	d00d      	beq.n	68a2 <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    6886:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    688a:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    688c:	68fc      	ldr	r4, [r7, #12]
    688e:	e003      	b.n	6898 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    6890:	6863      	ldr	r3, [r4, #4]
    6892:	42b3      	cmp	r3, r6
    6894:	d238      	bcs.n	6908 <buffer_alloc_calloc+0xac>
            break;

        cur = cur->next_free;
    6896:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    6898:	2c00      	cmp	r4, #0
    689a:	d1f9      	bne.n	6890 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    689c:	4620      	mov	r0, r4
    689e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    68a2:	462e      	mov	r6, r5
    68a4:	e7f2      	b.n	688c <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    68a6:	60fb      	str	r3, [r7, #12]
    68a8:	e041      	b.n	692e <buffer_alloc_calloc+0xd2>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    68aa:	f106 0120 	add.w	r1, r6, #32
    68ae:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    68b0:	3a20      	subs	r2, #32
    68b2:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    68b4:	2200      	movs	r2, #0
    new->prev = cur;
    68b6:	e9c3 2402 	strd	r2, r4, [r3, #8]
    new->magic1 = MAGIC1;
    68ba:	482a      	ldr	r0, [pc, #168]	; (6964 <buffer_alloc_calloc+0x108>)
    new->next = cur->next;
    68bc:	6922      	ldr	r2, [r4, #16]
    68be:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    68c0:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    68c2:	4929      	ldr	r1, [pc, #164]	; (6968 <buffer_alloc_calloc+0x10c>)
    68c4:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    68c6:	b102      	cbz	r2, 68ca <buffer_alloc_calloc+0x6e>
        new->next->prev = new;
    68c8:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    68ca:	6962      	ldr	r2, [r4, #20]
    68cc:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    68ce:	69a1      	ldr	r1, [r4, #24]
    68d0:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    68d2:	b1aa      	cbz	r2, 6900 <buffer_alloc_calloc+0xa4>
        new->prev_free->next_free = new;
    68d4:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    68d6:	699a      	ldr	r2, [r3, #24]
    68d8:	b102      	cbz	r2, 68dc <buffer_alloc_calloc+0x80>
        new->next_free->prev_free = new;
    68da:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    68dc:	f04f 0901 	mov.w	r9, #1
    cur->next = new;
    68e0:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    68e2:	2300      	movs	r3, #0
    cur->size = len;
    68e4:	e9c4 6901 	strd	r6, r9, [r4, #4]
    cur->next_free = NULL;
    68e8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    68ec:	693b      	ldr	r3, [r7, #16]
    68ee:	07db      	lsls	r3, r3, #31
    68f0:	d52e      	bpl.n	6950 <buffer_alloc_calloc+0xf4>
    68f2:	f7ff ff95 	bl	6820 <verify_chain>
    68f6:	b358      	cbz	r0, 6950 <buffer_alloc_calloc+0xf4>
        mbedtls_exit( 1 );
    68f8:	4b1c      	ldr	r3, [pc, #112]	; (696c <buffer_alloc_calloc+0x110>)
    68fa:	4648      	mov	r0, r9
    68fc:	681b      	ldr	r3, [r3, #0]
    68fe:	e026      	b.n	694e <buffer_alloc_calloc+0xf2>
        heap.first_free = new;
    6900:	60fb      	str	r3, [r7, #12]
    6902:	e7e8      	b.n	68d6 <buffer_alloc_calloc+0x7a>
        return( NULL );
    6904:	2400      	movs	r4, #0
    6906:	e7c9      	b.n	689c <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    6908:	68a3      	ldr	r3, [r4, #8]
    690a:	b11b      	cbz	r3, 6914 <buffer_alloc_calloc+0xb8>
        mbedtls_exit( 1 );
    690c:	4b17      	ldr	r3, [pc, #92]	; (696c <buffer_alloc_calloc+0x110>)
    690e:	2001      	movs	r0, #1
    6910:	681b      	ldr	r3, [r3, #0]
    6912:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    6914:	6862      	ldr	r2, [r4, #4]
    6916:	f104 0820 	add.w	r8, r4, #32
    691a:	1b92      	subs	r2, r2, r6
    691c:	2a23      	cmp	r2, #35	; 0x23
    691e:	d8c4      	bhi.n	68aa <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    6920:	2301      	movs	r3, #1
    6922:	60a3      	str	r3, [r4, #8]
            cur->prev_free->next_free = cur->next_free;
    6924:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
        if( cur->prev_free != NULL )
    6928:	2a00      	cmp	r2, #0
    692a:	d0bc      	beq.n	68a6 <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    692c:	6193      	str	r3, [r2, #24]
        if( cur->next_free != NULL )
    692e:	69a3      	ldr	r3, [r4, #24]
    6930:	b10b      	cbz	r3, 6936 <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    6932:	6962      	ldr	r2, [r4, #20]
    6934:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    6936:	2300      	movs	r3, #0
        cur->next_free = NULL;
    6938:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    693c:	693b      	ldr	r3, [r7, #16]
    693e:	07da      	lsls	r2, r3, #31
    6940:	d506      	bpl.n	6950 <buffer_alloc_calloc+0xf4>
    6942:	f7ff ff6d 	bl	6820 <verify_chain>
    6946:	b118      	cbz	r0, 6950 <buffer_alloc_calloc+0xf4>
            mbedtls_exit( 1 );
    6948:	2001      	movs	r0, #1
    694a:	4b08      	ldr	r3, [pc, #32]	; (696c <buffer_alloc_calloc+0x110>)
    694c:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    694e:	4798      	blx	r3
    memset( ret, 0, original_len );
    6950:	462a      	mov	r2, r5
    6952:	2100      	movs	r1, #0
    6954:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    6956:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    6958:	f005 f91f 	bl	bb9a <memset>
    return( ret );
    695c:	e79e      	b.n	689c <buffer_alloc_calloc+0x40>
    695e:	bf00      	nop
    6960:	20014140 	.word	0x20014140
    6964:	ff00aa55 	.word	0xff00aa55
    6968:	ee119966 	.word	0xee119966
    696c:	20002150 	.word	0x20002150

00006970 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    6970:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    6972:	4605      	mov	r5, r0
    6974:	2800      	cmp	r0, #0
    6976:	f000 8088 	beq.w	6a8a <buffer_alloc_free+0x11a>
    697a:	4e44      	ldr	r6, [pc, #272]	; (6a8c <buffer_alloc_free+0x11c>)
    697c:	6833      	ldr	r3, [r6, #0]
    697e:	2b00      	cmp	r3, #0
    6980:	f000 8083 	beq.w	6a8a <buffer_alloc_free+0x11a>
    6984:	68b2      	ldr	r2, [r6, #8]
    6986:	2a00      	cmp	r2, #0
    6988:	d07f      	beq.n	6a8a <buffer_alloc_free+0x11a>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    698a:	4283      	cmp	r3, r0
    698c:	d803      	bhi.n	6996 <buffer_alloc_free+0x26>
    698e:	6872      	ldr	r2, [r6, #4]
    6990:	4413      	add	r3, r2
    6992:	4298      	cmp	r0, r3
    6994:	d303      	bcc.n	699e <buffer_alloc_free+0x2e>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    6996:	4b3e      	ldr	r3, [pc, #248]	; (6a90 <buffer_alloc_free+0x120>)
    6998:	2001      	movs	r0, #1
    699a:	681b      	ldr	r3, [r3, #0]
    699c:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    699e:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    69a2:	4620      	mov	r0, r4
    69a4:	f7ff ff1c 	bl	67e0 <verify_header>
    69a8:	b118      	cbz	r0, 69b2 <buffer_alloc_free+0x42>
        mbedtls_exit( 1 );
    69aa:	4b39      	ldr	r3, [pc, #228]	; (6a90 <buffer_alloc_free+0x120>)
    69ac:	2001      	movs	r0, #1
    69ae:	681b      	ldr	r3, [r3, #0]
    69b0:	4798      	blx	r3

    if( hdr->alloc != 1 )
    69b2:	f855 3c18 	ldr.w	r3, [r5, #-24]
    69b6:	2b01      	cmp	r3, #1
    69b8:	d003      	beq.n	69c2 <buffer_alloc_free+0x52>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    69ba:	4b35      	ldr	r3, [pc, #212]	; (6a90 <buffer_alloc_free+0x120>)
    69bc:	2001      	movs	r0, #1
    69be:	681b      	ldr	r3, [r3, #0]
    69c0:	4798      	blx	r3
    }

    hdr->alloc = 0;
    69c2:	2300      	movs	r3, #0
    69c4:	f845 3c18 	str.w	r3, [r5, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    69c8:	f855 3c14 	ldr.w	r3, [r5, #-20]
    69cc:	b33b      	cbz	r3, 6a1e <buffer_alloc_free+0xae>
    69ce:	689a      	ldr	r2, [r3, #8]
    69d0:	bb2a      	cbnz	r2, 6a1e <buffer_alloc_free+0xae>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    69d2:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    69d6:	f102 0120 	add.w	r1, r2, #32
    69da:	685a      	ldr	r2, [r3, #4]
    69dc:	440a      	add	r2, r1
    69de:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    69e0:	e955 3205 	ldrd	r3, r2, [r5, #-20]
    69e4:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    69e6:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
    69ea:	692b      	ldr	r3, [r5, #16]
    69ec:	b103      	cbz	r3, 69f0 <buffer_alloc_free+0x80>
            hdr->next->prev = hdr;
    69ee:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    69f0:	2220      	movs	r2, #32
    69f2:	2100      	movs	r1, #0
    69f4:	4620      	mov	r0, r4
    69f6:	f005 f8d0 	bl	bb9a <memset>
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    69fa:	6928      	ldr	r0, [r5, #16]
    69fc:	b110      	cbz	r0, 6a04 <buffer_alloc_free+0x94>
    69fe:	6883      	ldr	r3, [r0, #8]
    6a00:	2b00      	cmp	r3, #0
    6a02:	d02e      	beq.n	6a62 <buffer_alloc_free+0xf2>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    6a04:	6933      	ldr	r3, [r6, #16]
    6a06:	079b      	lsls	r3, r3, #30
    6a08:	d53f      	bpl.n	6a8a <buffer_alloc_free+0x11a>
    6a0a:	f7ff ff09 	bl	6820 <verify_chain>
    6a0e:	2800      	cmp	r0, #0
    6a10:	d03b      	beq.n	6a8a <buffer_alloc_free+0x11a>
        mbedtls_exit( 1 );
}
    6a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        mbedtls_exit( 1 );
    6a16:	4b1e      	ldr	r3, [pc, #120]	; (6a90 <buffer_alloc_free+0x120>)
    6a18:	2001      	movs	r0, #1
    6a1a:	681b      	ldr	r3, [r3, #0]
    6a1c:	4718      	bx	r3
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    6a1e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    6a22:	2800      	cmp	r0, #0
    6a24:	d02a      	beq.n	6a7c <buffer_alloc_free+0x10c>
    6a26:	6883      	ldr	r3, [r0, #8]
    6a28:	bb43      	cbnz	r3, 6a7c <buffer_alloc_free+0x10c>
        hdr->size += sizeof(memory_header) + hdr->next->size;
    6a2a:	6842      	ldr	r2, [r0, #4]
    6a2c:	6863      	ldr	r3, [r4, #4]
    6a2e:	4413      	add	r3, r2
    6a30:	3320      	adds	r3, #32
    6a32:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    6a34:	6903      	ldr	r3, [r0, #16]
    6a36:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    6a38:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    6a3c:	b99a      	cbnz	r2, 6a66 <buffer_alloc_free+0xf6>
    6a3e:	b9cb      	cbnz	r3, 6a74 <buffer_alloc_free+0x104>
        hdr->prev_free = old->prev_free;
    6a40:	6943      	ldr	r3, [r0, #20]
    6a42:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
    6a44:	6982      	ldr	r2, [r0, #24]
    6a46:	61a2      	str	r2, [r4, #24]
        if( hdr->prev_free != NULL )
    6a48:	b1b3      	cbz	r3, 6a78 <buffer_alloc_free+0x108>
            hdr->prev_free->next_free = hdr;
    6a4a:	619c      	str	r4, [r3, #24]
        if( hdr->next_free != NULL )
    6a4c:	69a3      	ldr	r3, [r4, #24]
    6a4e:	b103      	cbz	r3, 6a52 <buffer_alloc_free+0xe2>
            hdr->next_free->prev_free = hdr;
    6a50:	615c      	str	r4, [r3, #20]
        if( hdr->next != NULL )
    6a52:	6923      	ldr	r3, [r4, #16]
    6a54:	b103      	cbz	r3, 6a58 <buffer_alloc_free+0xe8>
            hdr->next->prev = hdr;
    6a56:	60dc      	str	r4, [r3, #12]
        memset( old, 0, sizeof(memory_header) );
    6a58:	2220      	movs	r2, #32
    6a5a:	2100      	movs	r1, #0
    6a5c:	f005 f89d 	bl	bb9a <memset>
    if( old == NULL )
    6a60:	e7d0      	b.n	6a04 <buffer_alloc_free+0x94>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    6a62:	462c      	mov	r4, r5
    6a64:	e7e1      	b.n	6a2a <buffer_alloc_free+0xba>
                hdr->prev_free->next_free = hdr->next_free;
    6a66:	6193      	str	r3, [r2, #24]
            if( hdr->next_free != NULL )
    6a68:	69a3      	ldr	r3, [r4, #24]
    6a6a:	2b00      	cmp	r3, #0
    6a6c:	d0e8      	beq.n	6a40 <buffer_alloc_free+0xd0>
                hdr->next_free->prev_free = hdr->prev_free;
    6a6e:	6962      	ldr	r2, [r4, #20]
    6a70:	615a      	str	r2, [r3, #20]
    6a72:	e7e5      	b.n	6a40 <buffer_alloc_free+0xd0>
                heap.first_free = hdr->next_free;
    6a74:	60f3      	str	r3, [r6, #12]
    6a76:	e7f7      	b.n	6a68 <buffer_alloc_free+0xf8>
            heap.first_free = hdr;
    6a78:	60f4      	str	r4, [r6, #12]
    6a7a:	e7e7      	b.n	6a4c <buffer_alloc_free+0xdc>
        hdr->next_free = heap.first_free;
    6a7c:	68f3      	ldr	r3, [r6, #12]
    6a7e:	f845 3c08 	str.w	r3, [r5, #-8]
        if( heap.first_free != NULL )
    6a82:	b103      	cbz	r3, 6a86 <buffer_alloc_free+0x116>
            heap.first_free->prev_free = hdr;
    6a84:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    6a86:	60f4      	str	r4, [r6, #12]
    6a88:	e7bc      	b.n	6a04 <buffer_alloc_free+0x94>
}
    6a8a:	bd70      	pop	{r4, r5, r6, pc}
    6a8c:	20014140 	.word	0x20014140
    6a90:	20002150 	.word	0x20002150

00006a94 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    6a94:	b538      	push	{r3, r4, r5, lr}
    6a96:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    6a98:	2214      	movs	r2, #20
    6a9a:	2100      	movs	r1, #0
{
    6a9c:	4605      	mov	r5, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    6a9e:	4813      	ldr	r0, [pc, #76]	; (6aec <mbedtls_memory_buffer_alloc_init+0x58>)
    6aa0:	f005 f87b 	bl	bb9a <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    6aa4:	4912      	ldr	r1, [pc, #72]	; (6af0 <mbedtls_memory_buffer_alloc_init+0x5c>)
    6aa6:	4813      	ldr	r0, [pc, #76]	; (6af4 <mbedtls_memory_buffer_alloc_init+0x60>)
    6aa8:	f000 f834 	bl	6b14 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    6aac:	2c23      	cmp	r4, #35	; 0x23
    6aae:	d91c      	bls.n	6aea <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    6ab0:	f015 0303 	ands.w	r3, r5, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    6ab4:	bf1f      	itttt	ne
    6ab6:	3c04      	subne	r4, #4
    6ab8:	18e4      	addne	r4, r4, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    6aba:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    6abe:	18ed      	addne	r5, r5, r3
    }

    memset( buf, 0, len );
    6ac0:	4622      	mov	r2, r4
    6ac2:	2100      	movs	r1, #0
    6ac4:	4628      	mov	r0, r5
    6ac6:	f005 f868 	bl	bb9a <memset>

    heap.buf = buf;
    6aca:	4b08      	ldr	r3, [pc, #32]	; (6aec <mbedtls_memory_buffer_alloc_init+0x58>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    6acc:	490a      	ldr	r1, [pc, #40]	; (6af8 <mbedtls_memory_buffer_alloc_init+0x64>)
    heap.len = len;
    6ace:	e9c3 5400 	strd	r5, r4, [r3]
    heap.first->size = len - sizeof( memory_header );
    6ad2:	3c20      	subs	r4, #32
    heap.first = (memory_header *)buf;
    6ad4:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    6ad6:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    6ad8:	689a      	ldr	r2, [r3, #8]
    6ada:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    6adc:	689a      	ldr	r2, [r3, #8]
    6ade:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    6ae2:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    6ae6:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    6ae8:	60da      	str	r2, [r3, #12]
}
    6aea:	bd38      	pop	{r3, r4, r5, pc}
    6aec:	20014140 	.word	0x20014140
    6af0:	00006971 	.word	0x00006971
    6af4:	0000685d 	.word	0x0000685d
    6af8:	ff00aa55 	.word	0xff00aa55

00006afc <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    6afc:	4b01      	ldr	r3, [pc, #4]	; (6b04 <mbedtls_calloc+0x8>)
    6afe:	681b      	ldr	r3, [r3, #0]
    6b00:	4718      	bx	r3
    6b02:	bf00      	nop
    6b04:	20002158 	.word	0x20002158

00006b08 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    6b08:	4b01      	ldr	r3, [pc, #4]	; (6b10 <mbedtls_free+0x8>)
    6b0a:	681b      	ldr	r3, [r3, #0]
    6b0c:	4718      	bx	r3
    6b0e:	bf00      	nop
    6b10:	20002154 	.word	0x20002154

00006b14 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    6b14:	4b02      	ldr	r3, [pc, #8]	; (6b20 <mbedtls_platform_set_calloc_free+0xc>)
    6b16:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    6b18:	4b02      	ldr	r3, [pc, #8]	; (6b24 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    6b1a:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    6b1c:	6019      	str	r1, [r3, #0]
}
    6b1e:	4770      	bx	lr
    6b20:	20002158 	.word	0x20002158
    6b24:	20002154 	.word	0x20002154

00006b28 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6b2a:	f100 0608 	add.w	r6, r0, #8
    6b2e:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6b30:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6b32:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6b34:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6b36:	f005 ff30 	bl	c99a <mbedtls_mpi_size>
    6b3a:	4287      	cmp	r7, r0
    6b3c:	d14b      	bne.n	6bd6 <rsa_check_context.constprop.0+0xae>
    6b3e:	6863      	ldr	r3, [r4, #4]
    6b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6b44:	d847      	bhi.n	6bd6 <rsa_check_context.constprop.0+0xae>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    6b46:	2100      	movs	r1, #0
    6b48:	4630      	mov	r0, r6
    6b4a:	f006 f891 	bl	cc70 <mbedtls_mpi_cmp_int>
    6b4e:	2800      	cmp	r0, #0
    6b50:	dd41      	ble.n	6bd6 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    6b52:	2100      	movs	r1, #0
    6b54:	4630      	mov	r0, r6
    6b56:	f005 fef2 	bl	c93e <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    6b5a:	b3e0      	cbz	r0, 6bd6 <rsa_check_context.constprop.0+0xae>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    6b5c:	b945      	cbnz	r5, 6b70 <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    6b5e:	4629      	mov	r1, r5
    6b60:	f104 0014 	add.w	r0, r4, #20

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    6b64:	f006 f884 	bl	cc70 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    6b68:	2800      	cmp	r0, #0
    6b6a:	dd34      	ble.n	6bd6 <rsa_check_context.constprop.0+0xae>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
    6b6c:	2000      	movs	r0, #0
}
    6b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    6b70:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    6b74:	2100      	movs	r1, #0
    6b76:	4628      	mov	r0, r5
    6b78:	f006 f87a 	bl	cc70 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    6b7c:	2800      	cmp	r0, #0
    6b7e:	dd2a      	ble.n	6bd6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    6b80:	2100      	movs	r1, #0
    6b82:	4628      	mov	r0, r5
    6b84:	f005 fedb 	bl	c93e <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    6b88:	b328      	cbz	r0, 6bd6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    6b8a:	f104 0538 	add.w	r5, r4, #56	; 0x38
    6b8e:	2100      	movs	r1, #0
    6b90:	4628      	mov	r0, r5
    6b92:	f006 f86d 	bl	cc70 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    6b96:	2800      	cmp	r0, #0
    6b98:	dd1d      	ble.n	6bd6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    6b9a:	2100      	movs	r1, #0
    6b9c:	4628      	mov	r0, r5
    6b9e:	f005 fece 	bl	c93e <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    6ba2:	b1c0      	cbz	r0, 6bd6 <rsa_check_context.constprop.0+0xae>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    6ba4:	2100      	movs	r1, #0
    6ba6:	f104 0014 	add.w	r0, r4, #20
    6baa:	f006 f861 	bl	cc70 <mbedtls_mpi_cmp_int>
    6bae:	2800      	cmp	r0, #0
    6bb0:	dd11      	ble.n	6bd6 <rsa_check_context.constprop.0+0xae>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    6bb2:	2100      	movs	r1, #0
    6bb4:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6bb8:	f006 f85a 	bl	cc70 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    6bbc:	2800      	cmp	r0, #0
    6bbe:	dd0a      	ble.n	6bd6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    6bc0:	2100      	movs	r1, #0
    6bc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
    6bc6:	f006 f853 	bl	cc70 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    6bca:	2800      	cmp	r0, #0
    6bcc:	dd03      	ble.n	6bd6 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    6bce:	2100      	movs	r1, #0
    6bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    6bd4:	e7c6      	b.n	6b64 <rsa_check_context.constprop.0+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    6bd6:	4801      	ldr	r0, [pc, #4]	; (6bdc <rsa_check_context.constprop.0+0xb4>)
    6bd8:	e7c9      	b.n	6b6e <rsa_check_context.constprop.0+0x46>
    6bda:	bf00      	nop
    6bdc:	ffffbf80 	.word	0xffffbf80

00006be0 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    6be0:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    6be2:	2100      	movs	r1, #0
{
    6be4:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    6be6:	f7ff ff9f 	bl	6b28 <rsa_check_context.constprop.0>
    6bea:	4605      	mov	r5, r0
    6bec:	b110      	cbz	r0, 6bf4 <mbedtls_rsa_check_pubkey+0x14>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    6bee:	4d0e      	ldr	r5, [pc, #56]	; (6c28 <mbedtls_rsa_check_pubkey+0x48>)
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    6bf0:	4628      	mov	r0, r5
    6bf2:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    6bf4:	f104 0608 	add.w	r6, r4, #8
    6bf8:	4630      	mov	r0, r6
    6bfa:	f005 feb0 	bl	c95e <mbedtls_mpi_bitlen>
    6bfe:	287f      	cmp	r0, #127	; 0x7f
    6c00:	d9f5      	bls.n	6bee <mbedtls_rsa_check_pubkey+0xe>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    6c02:	3414      	adds	r4, #20
    6c04:	4629      	mov	r1, r5
    6c06:	4620      	mov	r0, r4
    6c08:	f005 fe99 	bl	c93e <mbedtls_mpi_get_bit>
    6c0c:	2800      	cmp	r0, #0
    6c0e:	d0ee      	beq.n	6bee <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    6c10:	4620      	mov	r0, r4
    6c12:	f005 fea4 	bl	c95e <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    6c16:	2801      	cmp	r0, #1
    6c18:	d9e9      	bls.n	6bee <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    6c1a:	4631      	mov	r1, r6
    6c1c:	4620      	mov	r0, r4
    6c1e:	f005 ffe6 	bl	cbee <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    6c22:	2800      	cmp	r0, #0
    6c24:	dbe4      	blt.n	6bf0 <mbedtls_rsa_check_pubkey+0x10>
    6c26:	e7e2      	b.n	6bee <mbedtls_rsa_check_pubkey+0xe>
    6c28:	ffffbe00 	.word	0xffffbe00

00006c2c <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    6c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c2e:	460c      	mov	r4, r1
    6c30:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    6c32:	2100      	movs	r1, #0
{
    6c34:	4605      	mov	r5, r0
    6c36:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    6c38:	f7ff ff76 	bl	6b28 <rsa_check_context.constprop.0>
    6c3c:	2800      	cmp	r0, #0
    6c3e:	d139      	bne.n	6cb4 <mbedtls_rsa_public+0x88>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    6c40:	a803      	add	r0, sp, #12
    6c42:	f005 fdd2 	bl	c7ea <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    6c46:	4621      	mov	r1, r4
    6c48:	686a      	ldr	r2, [r5, #4]
    6c4a:	a803      	add	r0, sp, #12
    6c4c:	f005 feab 	bl	c9a6 <mbedtls_mpi_read_binary>
    6c50:	4604      	mov	r4, r0
    6c52:	b118      	cbz	r0, 6c5c <mbedtls_rsa_public+0x30>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    6c54:	a803      	add	r0, sp, #12
    6c56:	f005 fdce 	bl	c7f6 <mbedtls_mpi_free>

    if( ret != 0 )
    6c5a:	e00c      	b.n	6c76 <mbedtls_rsa_public+0x4a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    6c5c:	f105 0408 	add.w	r4, r5, #8
    6c60:	4621      	mov	r1, r4
    6c62:	a803      	add	r0, sp, #12
    6c64:	f005 ffc3 	bl	cbee <mbedtls_mpi_cmp_mpi>
    6c68:	2800      	cmp	r0, #0
    6c6a:	db07      	blt.n	6c7c <mbedtls_rsa_public+0x50>
    mbedtls_mpi_free( &T );
    6c6c:	a803      	add	r0, sp, #12
    6c6e:	f005 fdc2 	bl	c7f6 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    6c72:	f06f 0403 	mvn.w	r4, #3
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    6c76:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );
    6c7a:	e018      	b.n	6cae <mbedtls_rsa_public+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    6c7c:	f105 0368 	add.w	r3, r5, #104	; 0x68
    6c80:	a903      	add	r1, sp, #12
    olen = ctx->len;
    6c82:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    6c84:	4608      	mov	r0, r1
    6c86:	9300      	str	r3, [sp, #0]
    6c88:	f105 0214 	add.w	r2, r5, #20
    6c8c:	4623      	mov	r3, r4
    6c8e:	f006 fb09 	bl	d2a4 <mbedtls_mpi_exp_mod>
    6c92:	4604      	mov	r4, r0
    6c94:	2800      	cmp	r0, #0
    6c96:	d1dd      	bne.n	6c54 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    6c98:	463a      	mov	r2, r7
    6c9a:	4631      	mov	r1, r6
    6c9c:	a803      	add	r0, sp, #12
    6c9e:	f005 fea3 	bl	c9e8 <mbedtls_mpi_write_binary>
    6ca2:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
    6ca4:	a803      	add	r0, sp, #12
    6ca6:	f005 fda6 	bl	c7f6 <mbedtls_mpi_free>
    if( ret != 0 )
    6caa:	2c00      	cmp	r4, #0
    6cac:	d1e3      	bne.n	6c76 <mbedtls_rsa_public+0x4a>

    return( 0 );
}
    6cae:	4620      	mov	r0, r4
    6cb0:	b007      	add	sp, #28
    6cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    6cb4:	4c00      	ldr	r4, [pc, #0]	; (6cb8 <mbedtls_rsa_public+0x8c>)
    6cb6:	e7fa      	b.n	6cae <mbedtls_rsa_public+0x82>
    6cb8:	ffffbf80 	.word	0xffffbf80

00006cbc <mbedtls_sha256_starts>:
#endif

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
    6cbc:	4a23      	ldr	r2, [pc, #140]	; (6d4c <mbedtls_sha256_starts+0x90>)
{
    6cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 == 0 )
    6cc2:	f1b1 0800 	subs.w	r8, r1, #0
    6cc6:	bf18      	it	ne
    6cc8:	4696      	movne	lr, r2
    6cca:	4a21      	ldr	r2, [pc, #132]	; (6d50 <mbedtls_sha256_starts+0x94>)
    6ccc:	4921      	ldr	r1, [pc, #132]	; (6d54 <mbedtls_sha256_starts+0x98>)
    6cce:	bf18      	it	ne
    6cd0:	4694      	movne	ip, r2
    6cd2:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    6cd6:	bf08      	it	eq
    6cd8:	468e      	moveq	lr, r1
    6cda:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    6cde:	491e      	ldr	r1, [pc, #120]	; (6d58 <mbedtls_sha256_starts+0x9c>)
    6ce0:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    6ce4:	bf08      	it	eq
    6ce6:	468c      	moveq	ip, r1
    6ce8:	491c      	ldr	r1, [pc, #112]	; (6d5c <mbedtls_sha256_starts+0xa0>)
    6cea:	bf18      	it	ne
    6cec:	4611      	movne	r1, r2
    6cee:	4a1c      	ldr	r2, [pc, #112]	; (6d60 <mbedtls_sha256_starts+0xa4>)
    6cf0:	4f1c      	ldr	r7, [pc, #112]	; (6d64 <mbedtls_sha256_starts+0xa8>)
    6cf2:	bf18      	it	ne
    6cf4:	4617      	movne	r7, r2
    6cf6:	4a1c      	ldr	r2, [pc, #112]	; (6d68 <mbedtls_sha256_starts+0xac>)
    6cf8:	4e1c      	ldr	r6, [pc, #112]	; (6d6c <mbedtls_sha256_starts+0xb0>)
    6cfa:	bf18      	it	ne
    6cfc:	4616      	movne	r6, r2
    6cfe:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    6d02:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    6d06:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    6d0a:	4d19      	ldr	r5, [pc, #100]	; (6d70 <mbedtls_sha256_starts+0xb4>)
    6d0c:	bf18      	it	ne
    6d0e:	4615      	movne	r5, r2
    6d10:	4a18      	ldr	r2, [pc, #96]	; (6d74 <mbedtls_sha256_starts+0xb8>)
{
    6d12:	4603      	mov	r3, r0
    if( is224 == 0 )
    6d14:	4c18      	ldr	r4, [pc, #96]	; (6d78 <mbedtls_sha256_starts+0xbc>)
    6d16:	4819      	ldr	r0, [pc, #100]	; (6d7c <mbedtls_sha256_starts+0xc0>)
    6d18:	bf18      	it	ne
    6d1a:	4614      	movne	r4, r2
    6d1c:	f1a2 6211 	sub.w	r2, r2, #152043520	; 0x9100000
    6d20:	f5a2 220c 	sub.w	r2, r2, #573440	; 0x8c000
    6d24:	f2a2 228e 	subw	r2, r2, #654	; 0x28e
    6d28:	bf18      	it	ne
    6d2a:	4602      	movne	r2, r0
    ctx->total[0] = 0;
    6d2c:	2000      	movs	r0, #0
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    6d2e:	e9c3 ec02 	strd	lr, ip, [r3, #8]
    ctx->total[1] = 0;
    6d32:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    6d36:	e9c3 1704 	strd	r1, r7, [r3, #16]
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    6d3a:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[6] = 0x1F83D9AB;
        ctx->state[7] = 0x5BE0CD19;
    6d3e:	e9c3 4208 	strd	r4, r2, [r3, #32]
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
#endif
    }

    ctx->is224 = is224;
    6d42:	f8c3 8068 	str.w	r8, [r3, #104]	; 0x68

    return( 0 );
}
    6d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d4a:	bf00      	nop
    6d4c:	c1059ed8 	.word	0xc1059ed8
    6d50:	367cd507 	.word	0x367cd507
    6d54:	6a09e667 	.word	0x6a09e667
    6d58:	bb67ae85 	.word	0xbb67ae85
    6d5c:	3c6ef372 	.word	0x3c6ef372
    6d60:	f70e5939 	.word	0xf70e5939
    6d64:	a54ff53a 	.word	0xa54ff53a
    6d68:	ffc00b31 	.word	0xffc00b31
    6d6c:	510e527f 	.word	0x510e527f
    6d70:	9b05688c 	.word	0x9b05688c
    6d74:	64f98fa7 	.word	0x64f98fa7
    6d78:	1f83d9ab 	.word	0x1f83d9ab
    6d7c:	befa4fa4 	.word	0xbefa4fa4

00006d80 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    6d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d84:	b0d1      	sub	sp, #324	; 0x144
    6d86:	f50d 7b8e 	add.w	fp, sp, #284	; 0x11c
    6d8a:	465a      	mov	r2, fp
    6d8c:	1d03      	adds	r3, r0, #4
    6d8e:	9301      	str	r3, [sp, #4]
    6d90:	f100 0324 	add.w	r3, r0, #36	; 0x24
    6d94:	9303      	str	r3, [sp, #12]
    6d96:	9b01      	ldr	r3, [sp, #4]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    6d98:	f853 0f04 	ldr.w	r0, [r3, #4]!
    6d9c:	f842 0f04 	str.w	r0, [r2, #4]!
    for( i = 0; i < 8; i++ )
    6da0:	9803      	ldr	r0, [sp, #12]
    6da2:	4298      	cmp	r0, r3
    6da4:	d1f8      	bne.n	6d98 <mbedtls_internal_sha256_process+0x18>
    6da6:	e9dd 0748 	ldrd	r0, r7, [sp, #288]	; 0x120

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    6daa:	f04f 0900 	mov.w	r9, #0
    6dae:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    6db0:	ad4c      	add	r5, sp, #304	; 0x130
    6db2:	9302      	str	r3, [sp, #8]
    6db4:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    6db8:	9304      	str	r3, [sp, #16]
    6dba:	4b42      	ldr	r3, [pc, #264]	; (6ec4 <mbedtls_internal_sha256_process+0x144>)
    6dbc:	aa06      	add	r2, sp, #24
    6dbe:	9305      	str	r3, [sp, #20]
    6dc0:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    {
        if( i < 16 )
    6dc4:	f1b9 0f0f 	cmp.w	r9, #15
    6dc8:	d863      	bhi.n	6e92 <mbedtls_internal_sha256_process+0x112>
            local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
    6dca:	784c      	ldrb	r4, [r1, #1]
    6dcc:	780b      	ldrb	r3, [r1, #0]
    6dce:	0424      	lsls	r4, r4, #16
    6dd0:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    6dd4:	78cb      	ldrb	r3, [r1, #3]
    6dd6:	4323      	orrs	r3, r4
    6dd8:	788c      	ldrb	r4, [r1, #2]
    6dda:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6dde:	ea4f 2af5 	mov.w	sl, r5, ror #11
    6de2:	ea8c 0408 	eor.w	r4, ip, r8
    6de6:	9e05      	ldr	r6, [sp, #20]
    6de8:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
    6dec:	402c      	ands	r4, r5
    6dee:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
    6df2:	ea84 040c 	eor.w	r4, r4, ip
    6df6:	4454      	add	r4, sl
    6df8:	f856 ab04 	ldr.w	sl, [r6], #4
    6dfc:	6093      	str	r3, [r2, #8]
    6dfe:	4454      	add	r4, sl
    6e00:	4423      	add	r3, r4
    6e02:	9c02      	ldr	r4, [sp, #8]
    6e04:	ea4f 3a70 	mov.w	sl, r0, ror #13
    6e08:	4423      	add	r3, r4
    6e0a:	ea40 0407 	orr.w	r4, r0, r7
    6e0e:	9605      	str	r6, [sp, #20]
    6e10:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
    6e14:	ea04 040e 	and.w	r4, r4, lr
    6e18:	ea00 0607 	and.w	r6, r0, r7
    6e1c:	ea8a 5ab0 	eor.w	sl, sl, r0, ror #22
    6e20:	4334      	orrs	r4, r6
    6e22:	4454      	add	r4, sl
    for( i = 0; i < 64; i++ )
    6e24:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6e28:	f8dd a010 	ldr.w	sl, [sp, #16]
    for( i = 0; i < 64; i++ )
    6e2c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6e30:	449a      	add	sl, r3
    for( i = 0; i < 64; i++ )
    6e32:	f102 0204 	add.w	r2, r2, #4
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6e36:	4423      	add	r3, r4
    for( i = 0; i < 64; i++ )
    6e38:	f101 0104 	add.w	r1, r1, #4
    6e3c:	f8cd c008 	str.w	ip, [sp, #8]
    6e40:	f8cd e010 	str.w	lr, [sp, #16]
    6e44:	d11e      	bne.n	6e84 <mbedtls_internal_sha256_process+0x104>
    6e46:	e9cd 3406 	strd	r3, r4, [sp, #24]
    6e4a:	e9cd 8c4e 	strd	r8, ip, [sp, #312]	; 0x138
    6e4e:	e9cd a54c 	strd	sl, r5, [sp, #304]	; 0x130
    6e52:	e9cd 7e4a 	strd	r7, lr, [sp, #296]	; 0x128
    6e56:	e9cd 3048 	strd	r3, r0, [sp, #288]	; 0x120
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    6e5a:	9a01      	ldr	r2, [sp, #4]
    6e5c:	f852 3f04 	ldr.w	r3, [r2, #4]!
    6e60:	9201      	str	r2, [sp, #4]
    6e62:	f85b 2f04 	ldr.w	r2, [fp, #4]!
    6e66:	4413      	add	r3, r2
    6e68:	9a01      	ldr	r2, [sp, #4]
    6e6a:	6013      	str	r3, [r2, #0]
    for( i = 0; i < 8; i++ )
    6e6c:	9b03      	ldr	r3, [sp, #12]
    6e6e:	4293      	cmp	r3, r2
    6e70:	d1f3      	bne.n	6e5a <mbedtls_internal_sha256_process+0xda>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    6e72:	a806      	add	r0, sp, #24
    6e74:	f44f 7194 	mov.w	r1, #296	; 0x128
    6e78:	f003 fa52 	bl	a320 <mbedtls_platform_zeroize>

    return( 0 );
}
    6e7c:	2000      	movs	r0, #0
    6e7e:	b051      	add	sp, #324	; 0x144
    6e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e84:	46be      	mov	lr, r7
    6e86:	46c4      	mov	ip, r8
    6e88:	4607      	mov	r7, r0
    6e8a:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6e8c:	4618      	mov	r0, r3
    6e8e:	4655      	mov	r5, sl
    6e90:	e798      	b.n	6dc4 <mbedtls_internal_sha256_process+0x44>
            R( i );
    6e92:	6813      	ldr	r3, [r2, #0]
    6e94:	f852 4c38 	ldr.w	r4, [r2, #-56]
    6e98:	ea4f 4af3 	mov.w	sl, r3, ror #19
    6e9c:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    6ea0:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    6ea4:	f852 3c14 	ldr.w	r3, [r2, #-20]
    6ea8:	f852 6c34 	ldr.w	r6, [r2, #-52]
    6eac:	4423      	add	r3, r4
    6eae:	f852 4c34 	ldr.w	r4, [r2, #-52]
    6eb2:	4453      	add	r3, sl
    6eb4:	ea4f 44b4 	mov.w	r4, r4, ror #18
    6eb8:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
    6ebc:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
    6ec0:	4423      	add	r3, r4
    6ec2:	e78c      	b.n	6dde <mbedtls_internal_sha256_process+0x5e>
    6ec4:	0000ecfc 	.word	0x0000ecfc

00006ec8 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6ec8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6ecc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6ed0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6ed4:	2a07      	cmp	r2, #7
    6ed6:	d105      	bne.n	6ee4 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    6ed8:	3b02      	subs	r3, #2
    6eda:	2b03      	cmp	r3, #3
    6edc:	d802      	bhi.n	6ee4 <nrf53_errata_42+0x1c>
    6ede:	4a02      	ldr	r2, [pc, #8]	; (6ee8 <nrf53_errata_42+0x20>)
    6ee0:	5cd0      	ldrb	r0, [r2, r3]
    6ee2:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    6ee4:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    6ee6:	4770      	bx	lr
    6ee8:	0000f356 	.word	0x0000f356

00006eec <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    6eec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6ef0:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    6ef4:	4b03      	ldr	r3, [pc, #12]	; (6f04 <SystemCoreClockUpdate+0x18>)
    6ef6:	f002 0203 	and.w	r2, r2, #3
    6efa:	40d3      	lsrs	r3, r2
    6efc:	4a02      	ldr	r2, [pc, #8]	; (6f08 <SystemCoreClockUpdate+0x1c>)
    6efe:	6013      	str	r3, [r2, #0]
#endif
}
    6f00:	4770      	bx	lr
    6f02:	bf00      	nop
    6f04:	07a12000 	.word	0x07a12000
    6f08:	2000215c 	.word	0x2000215c

00006f0c <SystemInit>:

void SystemInit(void)
{
    6f0c:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    6f0e:	f7ff ffdb 	bl	6ec8 <nrf53_errata_42>
    6f12:	b158      	cbz	r0, 6f2c <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    6f14:	4b4f      	ldr	r3, [pc, #316]	; (7054 <SystemInit+0x148>)
    6f16:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    6f1a:	b93a      	cbnz	r2, 6f2c <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    6f1c:	210d      	movs	r1, #13
    6f1e:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    6f22:	2101      	movs	r1, #1
    6f24:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    6f28:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    6f2c:	2200      	movs	r2, #0
    6f2e:	00d3      	lsls	r3, r2, #3
    6f30:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    6f34:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    6f38:	3101      	adds	r1, #1
    6f3a:	d007      	beq.n	6f4c <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6f3c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    6f40:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6f42:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    6f46:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6f48:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    6f4a:	d1f0      	bne.n	6f2e <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    6f4c:	f7ff ffbc 	bl	6ec8 <nrf53_errata_42>
    6f50:	2800      	cmp	r0, #0
    6f52:	d176      	bne.n	7042 <SystemInit+0x136>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    6f54:	f7ff ffb8 	bl	6ec8 <nrf53_errata_42>
    6f58:	b140      	cbz	r0, 6f6c <SystemInit+0x60>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    6f5a:	4b3f      	ldr	r3, [pc, #252]	; (7058 <SystemInit+0x14c>)
    6f5c:	4a3f      	ldr	r2, [pc, #252]	; (705c <SystemInit+0x150>)
    6f5e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    6f62:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f66:	2201      	movs	r2, #1
    6f68:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6f6c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6f70:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6f74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6f78:	2a07      	cmp	r2, #7
    6f7a:	d109      	bne.n	6f90 <SystemInit+0x84>
                {
                    switch(var2)
    6f7c:	3b02      	subs	r3, #2
    6f7e:	2b03      	cmp	r3, #3
    6f80:	d806      	bhi.n	6f90 <SystemInit+0x84>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    6f82:	4a37      	ldr	r2, [pc, #220]	; (7060 <SystemInit+0x154>)
    6f84:	5cd3      	ldrb	r3, [r2, r3]
    6f86:	b11b      	cbz	r3, 6f90 <SystemInit+0x84>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    6f88:	2200      	movs	r2, #0
    6f8a:	4b36      	ldr	r3, [pc, #216]	; (7064 <SystemInit+0x158>)
    6f8c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    6f90:	f7ff ff9a 	bl	6ec8 <nrf53_errata_42>
    6f94:	b150      	cbz	r0, 6fac <SystemInit+0xa0>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    6f96:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6f9e:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    6fa0:	bf42      	ittt	mi
    6fa2:	2200      	movmi	r2, #0
    6fa4:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    6fa8:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6fac:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6fb0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6fb4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6fb8:	2a07      	cmp	r2, #7
    6fba:	d109      	bne.n	6fd0 <SystemInit+0xc4>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    6fbc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6fc0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6fc4:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    6fc6:	bf44      	itt	mi
    6fc8:	f06f 0201 	mvnmi.w	r2, #1
    6fcc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    6fd0:	f7ff ff7a 	bl	6ec8 <nrf53_errata_42>
    6fd4:	b118      	cbz	r0, 6fde <SystemInit+0xd2>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    6fd6:	2265      	movs	r2, #101	; 0x65
    6fd8:	4b1e      	ldr	r3, [pc, #120]	; (7054 <SystemInit+0x148>)
    6fda:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6fde:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6fe2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6fe6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    6fea:	2a07      	cmp	r2, #7
    6fec:	d116      	bne.n	701c <SystemInit+0x110>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    6fee:	4b1d      	ldr	r3, [pc, #116]	; (7064 <SystemInit+0x158>)
    6ff0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	da11      	bge.n	701c <SystemInit+0x110>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    6ff8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6ffc:	2203      	movs	r2, #3
    6ffe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    7002:	2201      	movs	r2, #1
    7004:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    7006:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    700a:	2a00      	cmp	r2, #0
    700c:	d0fb      	beq.n	7006 <SystemInit+0xfa>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    700e:	2200      	movs	r2, #0
    7010:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    7014:	2201      	movs	r2, #1
    7016:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    7018:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    701c:	4a12      	ldr	r2, [pc, #72]	; (7068 <SystemInit+0x15c>)
    701e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    7022:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    7026:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    702a:	4a10      	ldr	r2, [pc, #64]	; (706c <SystemInit+0x160>)
    702c:	4b10      	ldr	r3, [pc, #64]	; (7070 <SystemInit+0x164>)
    702e:	6811      	ldr	r1, [r2, #0]
    7030:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    7034:	69d2      	ldr	r2, [r2, #28]
    7036:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    703a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    703e:	f7ff bf55 	b.w	6eec <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    7042:	2229      	movs	r2, #41	; 0x29
    7044:	4b03      	ldr	r3, [pc, #12]	; (7054 <SystemInit+0x148>)
    7046:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    704a:	2203      	movs	r2, #3
    704c:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    7050:	e780      	b.n	6f54 <SystemInit+0x48>
    7052:	bf00      	nop
    7054:	50004000 	.word	0x50004000
    7058:	50039000 	.word	0x50039000
    705c:	beef0044 	.word	0xbeef0044
    7060:	0000f352 	.word	0x0000f352
    7064:	50032000 	.word	0x50032000
    7068:	e000ed00 	.word	0xe000ed00
    706c:	00ff8000 	.word	0x00ff8000
    7070:	50006000 	.word	0x50006000

00007074 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    7074:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    7076:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    7078:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    707a:	fab2 f382 	clz	r3, r2
    707e:	f1c3 031f 	rsb	r3, r3, #31
    7082:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    7084:	fa05 f403 	lsl.w	r4, r5, r3
    7088:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    708c:	e8d0 6fef 	ldaex	r6, [r0]
    7090:	4296      	cmp	r6, r2
    7092:	d104      	bne.n	709e <nrfx_flag32_alloc+0x2a>
    7094:	e8c0 4fec 	stlex	ip, r4, [r0]
    7098:	f1bc 0f00 	cmp.w	ip, #0
    709c:	d1f6      	bne.n	708c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    709e:	d1eb      	bne.n	7078 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    70a0:	4801      	ldr	r0, [pc, #4]	; (70a8 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    70a2:	700b      	strb	r3, [r1, #0]
}
    70a4:	bd70      	pop	{r4, r5, r6, pc}
    70a6:	bf00      	nop
    70a8:	0bad0000 	.word	0x0bad0000

000070ac <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    70ac:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    70ae:	6803      	ldr	r3, [r0, #0]
    70b0:	40cb      	lsrs	r3, r1
    70b2:	07db      	lsls	r3, r3, #31
    70b4:	d410      	bmi.n	70d8 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    70b6:	2301      	movs	r3, #1
    70b8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    70ba:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    70bc:	ea43 0102 	orr.w	r1, r3, r2
    70c0:	e8d0 4fef 	ldaex	r4, [r0]
    70c4:	4294      	cmp	r4, r2
    70c6:	d104      	bne.n	70d2 <nrfx_flag32_free+0x26>
    70c8:	e8c0 1fec 	stlex	ip, r1, [r0]
    70cc:	f1bc 0f00 	cmp.w	ip, #0
    70d0:	d1f6      	bne.n	70c0 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    70d2:	d1f2      	bne.n	70ba <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    70d4:	4801      	ldr	r0, [pc, #4]	; (70dc <nrfx_flag32_free+0x30>)
}
    70d6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    70d8:	4801      	ldr	r0, [pc, #4]	; (70e0 <nrfx_flag32_free+0x34>)
    70da:	e7fc      	b.n	70d6 <nrfx_flag32_free+0x2a>
    70dc:	0bad0000 	.word	0x0bad0000
    70e0:	0bad0004 	.word	0x0bad0004

000070e4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    70e4:	4b04      	ldr	r3, [pc, #16]	; (70f8 <nrfx_clock_init+0x14>)
    70e6:	791a      	ldrb	r2, [r3, #4]
    70e8:	b922      	cbnz	r2, 70f4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    70ea:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    70ec:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    70ee:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    70f0:	4802      	ldr	r0, [pc, #8]	; (70fc <nrfx_clock_init+0x18>)
    70f2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    70f4:	4802      	ldr	r0, [pc, #8]	; (7100 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    70f6:	4770      	bx	lr
    70f8:	20014154 	.word	0x20014154
    70fc:	0bad0000 	.word	0x0bad0000
    7100:	0bad000c 	.word	0x0bad000c

00007104 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    7104:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7106:	2005      	movs	r0, #5
    7108:	f7fc fe24 	bl	3d54 <arch_irq_is_enabled>
    710c:	b910      	cbnz	r0, 7114 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    710e:	2005      	movs	r0, #5
    7110:	f7fc fdfe 	bl	3d10 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7114:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    7118:	2301      	movs	r3, #1
    711a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    711e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    7122:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    7126:	4a01      	ldr	r2, [pc, #4]	; (712c <nrfx_clock_enable+0x28>)
    7128:	7013      	strb	r3, [r2, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    712a:	bd08      	pop	{r3, pc}
    712c:	20056800 	.word	0x20056800

00007130 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7130:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    7134:	b510      	push	{r4, lr}
    7136:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    713a:	b152      	cbz	r2, 7152 <nrfx_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    713c:	2000      	movs	r0, #0
    713e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    7142:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    7146:	2201      	movs	r2, #1
    7148:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    714c:	4b23      	ldr	r3, [pc, #140]	; (71dc <nrfx_clock_irq_handler+0xac>)
    714e:	681b      	ldr	r3, [r3, #0]
    7150:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7152:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7156:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    715a:	b18a      	cbz	r2, 7180 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    715c:	2200      	movs	r2, #0
    715e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7162:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7166:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    716a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    716e:	f002 0203 	and.w	r2, r2, #3
    7172:	2a01      	cmp	r2, #1
    7174:	f04f 0102 	mov.w	r1, #2
    7178:	d128      	bne.n	71cc <nrfx_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    717a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    717e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7180:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7184:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    7188:	b162      	cbz	r2, 71a4 <nrfx_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    718a:	2200      	movs	r2, #0
    718c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    7190:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    7194:	f44f 7280 	mov.w	r2, #256	; 0x100
    7198:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    719c:	4b0f      	ldr	r3, [pc, #60]	; (71dc <nrfx_clock_irq_handler+0xac>)
    719e:	2004      	movs	r0, #4
    71a0:	681b      	ldr	r3, [r3, #0]
    71a2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    71a4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    71a8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    71ac:	b1aa      	cbz	r2, 71da <nrfx_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71ae:	2200      	movs	r2, #0
    71b0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    71b4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    71b8:	f44f 7200 	mov.w	r2, #512	; 0x200
    71bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    71c0:	4b06      	ldr	r3, [pc, #24]	; (71dc <nrfx_clock_irq_handler+0xac>)
    71c2:	2005      	movs	r0, #5
    }
#endif
}
    71c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    71c8:	681b      	ldr	r3, [r3, #0]
    71ca:	4718      	bx	r3
    71cc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    71d0:	4b02      	ldr	r3, [pc, #8]	; (71dc <nrfx_clock_irq_handler+0xac>)
    71d2:	2001      	movs	r0, #1
    71d4:	681b      	ldr	r3, [r3, #0]
    71d6:	4798      	blx	r3
    71d8:	e7d2      	b.n	7180 <nrfx_clock_irq_handler+0x50>
}
    71da:	bd10      	pop	{r4, pc}
    71dc:	20014154 	.word	0x20014154

000071e0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    71e0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    71e2:	f003 021f 	and.w	r2, r3, #31
    71e6:	6002      	str	r2, [r0, #0]
}
    71e8:	4a03      	ldr	r2, [pc, #12]	; (71f8 <nrf_gpio_pin_port_decode+0x18>)
    71ea:	4804      	ldr	r0, [pc, #16]	; (71fc <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    71ec:	095b      	lsrs	r3, r3, #5
}
    71ee:	2b01      	cmp	r3, #1
    71f0:	bf18      	it	ne
    71f2:	4610      	movne	r0, r2
    71f4:	4770      	bx	lr
    71f6:	bf00      	nop
    71f8:	50842500 	.word	0x50842500
    71fc:	50842800 	.word	0x50842800

00007200 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    7200:	4b03      	ldr	r3, [pc, #12]	; (7210 <pin_in_use_by_te+0x10>)
    7202:	3008      	adds	r0, #8
    7204:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7208:	f3c0 1040 	ubfx	r0, r0, #5, #1
    720c:	4770      	bx	lr
    720e:	bf00      	nop
    7210:	20002160 	.word	0x20002160

00007214 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    7214:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7216:	4c0d      	ldr	r4, [pc, #52]	; (724c <call_handler+0x38>)
    7218:	f100 0308 	add.w	r3, r0, #8
    721c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    7220:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7222:	05da      	lsls	r2, r3, #23
{
    7224:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7226:	d507      	bpl.n	7238 <call_handler+0x24>
    7228:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    722c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    7230:	6852      	ldr	r2, [r2, #4]
    7232:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    7236:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    7238:	68a3      	ldr	r3, [r4, #8]
    723a:	b12b      	cbz	r3, 7248 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    723c:	4631      	mov	r1, r6
    723e:	4628      	mov	r0, r5
    7240:	68e2      	ldr	r2, [r4, #12]
    }
}
    7242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7246:	4718      	bx	r3
}
    7248:	bd70      	pop	{r4, r5, r6, pc}
    724a:	bf00      	nop
    724c:	20002160 	.word	0x20002160

00007250 <release_handler>:
{
    7250:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7252:	4a12      	ldr	r2, [pc, #72]	; (729c <release_handler+0x4c>)
    7254:	3008      	adds	r0, #8
    7256:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    725a:	05d9      	lsls	r1, r3, #23
    725c:	d51b      	bpl.n	7296 <release_handler+0x46>
    725e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    7262:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7266:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    726a:	2000      	movs	r0, #0
    726c:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7270:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    7274:	f413 7f80 	tst.w	r3, #256	; 0x100
    7278:	d003      	beq.n	7282 <release_handler+0x32>
    727a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    727e:	4299      	cmp	r1, r3
    7280:	d009      	beq.n	7296 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7282:	3001      	adds	r0, #1
    7284:	2830      	cmp	r0, #48	; 0x30
    7286:	d1f3      	bne.n	7270 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    7288:	2300      	movs	r3, #0
    728a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    728e:	4804      	ldr	r0, [pc, #16]	; (72a0 <release_handler+0x50>)
}
    7290:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    7292:	f7ff bf0b 	b.w	70ac <nrfx_flag32_free>
}
    7296:	bc10      	pop	{r4}
    7298:	4770      	bx	lr
    729a:	bf00      	nop
    729c:	20002160 	.word	0x20002160
    72a0:	200021d4 	.word	0x200021d4

000072a4 <pin_handler_trigger_uninit>:
{
    72a4:	b538      	push	{r3, r4, r5, lr}
    72a6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    72a8:	f7ff ffaa 	bl	7200 <pin_in_use_by_te>
    72ac:	4c0b      	ldr	r4, [pc, #44]	; (72dc <pin_handler_trigger_uninit+0x38>)
    72ae:	f102 0508 	add.w	r5, r2, #8
    72b2:	b160      	cbz	r0, 72ce <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    72b4:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    72b6:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    72ba:	0b5b      	lsrs	r3, r3, #13
    72bc:	009b      	lsls	r3, r3, #2
    72be:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    72c2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    72c6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    72ca:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    72ce:	4610      	mov	r0, r2
    72d0:	f7ff ffbe 	bl	7250 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    72d4:	2300      	movs	r3, #0
    72d6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    72da:	bd38      	pop	{r3, r4, r5, pc}
    72dc:	20002160 	.word	0x20002160

000072e0 <nrfx_gpiote_input_configure>:
{
    72e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    72e4:	4604      	mov	r4, r0
    72e6:	4690      	mov	r8, r2
    72e8:	461d      	mov	r5, r3
    if (p_input_config)
    72ea:	b301      	cbz	r1, 732e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    72ec:	4e4f      	ldr	r6, [pc, #316]	; (742c <nrfx_gpiote_input_configure+0x14c>)
    72ee:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    72f2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    72f6:	079b      	lsls	r3, r3, #30
    72f8:	d502      	bpl.n	7300 <nrfx_gpiote_input_configure+0x20>
    72fa:	f7ff ff81 	bl	7200 <pin_in_use_by_te>
    72fe:	bb28      	cbnz	r0, 734c <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    7300:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    7302:	4620      	mov	r0, r4
    7304:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    7308:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    730c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    7310:	f10d 020f 	add.w	r2, sp, #15
    7314:	460b      	mov	r3, r1
    7316:	f10d 010e 	add.w	r1, sp, #14
    731a:	f006 fc9f 	bl	dc5c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    731e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    7322:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7326:	f043 0301 	orr.w	r3, r3, #1
    732a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    732e:	f1b8 0f00 	cmp.w	r8, #0
    7332:	d02d      	beq.n	7390 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7334:	4e3d      	ldr	r6, [pc, #244]	; (742c <nrfx_gpiote_input_configure+0x14c>)
    7336:	f104 0708 	add.w	r7, r4, #8
    733a:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    733e:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    7342:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7344:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    7348:	d502      	bpl.n	7350 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    734a:	b1cb      	cbz	r3, 7380 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    734c:	4838      	ldr	r0, [pc, #224]	; (7430 <nrfx_gpiote_input_configure+0x150>)
    734e:	e021      	b.n	7394 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    7350:	f021 0120 	bic.w	r1, r1, #32
    7354:	04c9      	lsls	r1, r1, #19
    7356:	0cc9      	lsrs	r1, r1, #19
    7358:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    735c:	b183      	cbz	r3, 7380 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    735e:	2803      	cmp	r0, #3
    7360:	d8f4      	bhi.n	734c <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    7362:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7366:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    736a:	4662      	mov	r2, ip
    736c:	0092      	lsls	r2, r2, #2
    736e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    7372:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    7376:	b980      	cbnz	r0, 739a <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    7378:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    737c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    7380:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    7384:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    7388:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    738c:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    7390:	bb1d      	cbnz	r5, 73da <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    7392:	4828      	ldr	r0, [pc, #160]	; (7434 <nrfx_gpiote_input_configure+0x154>)
}
    7394:	b004      	add	sp, #16
    7396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    739a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    739e:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    73a2:	f023 0303 	bic.w	r3, r3, #3
    73a6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    73aa:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    73ae:	f041 0120 	orr.w	r1, r1, #32
    73b2:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    73b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    73ba:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    73be:	0223      	lsls	r3, r4, #8
    73c0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    73c4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    73c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    73cc:	ea43 030e 	orr.w	r3, r3, lr
    73d0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    73d4:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    73d8:	e7d2      	b.n	7380 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    73da:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    73dc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    73e0:	f7ff ff36 	bl	7250 <release_handler>
    if (!handler)
    73e4:	2e00      	cmp	r6, #0
    73e6:	d0d4      	beq.n	7392 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    73e8:	4d10      	ldr	r5, [pc, #64]	; (742c <nrfx_gpiote_input_configure+0x14c>)
    73ea:	e9d5 2300 	ldrd	r2, r3, [r5]
    73ee:	4296      	cmp	r6, r2
    73f0:	d101      	bne.n	73f6 <nrfx_gpiote_input_configure+0x116>
    73f2:	429f      	cmp	r7, r3
    73f4:	d018      	beq.n	7428 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    73f6:	4810      	ldr	r0, [pc, #64]	; (7438 <nrfx_gpiote_input_configure+0x158>)
    73f8:	f10d 010f 	add.w	r1, sp, #15
    73fc:	f7ff fe3a 	bl	7074 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    7400:	4b0c      	ldr	r3, [pc, #48]	; (7434 <nrfx_gpiote_input_configure+0x154>)
    7402:	4298      	cmp	r0, r3
    7404:	d1c6      	bne.n	7394 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    7406:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    740a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    740e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    7410:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7412:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    7416:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    741a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    741e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7422:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    7426:	e7b4      	b.n	7392 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7428:	2200      	movs	r2, #0
    742a:	e7ee      	b.n	740a <nrfx_gpiote_input_configure+0x12a>
    742c:	20002160 	.word	0x20002160
    7430:	0bad0004 	.word	0x0bad0004
    7434:	0bad0000 	.word	0x0bad0000
    7438:	200021d4 	.word	0x200021d4

0000743c <nrfx_gpiote_output_configure>:
{
    743c:	b5f0      	push	{r4, r5, r6, r7, lr}
    743e:	4604      	mov	r4, r0
    7440:	4615      	mov	r5, r2
    7442:	b085      	sub	sp, #20
    if (p_config)
    7444:	b319      	cbz	r1, 748e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7446:	4e34      	ldr	r6, [pc, #208]	; (7518 <nrfx_gpiote_output_configure+0xdc>)
    7448:	f100 0708 	add.w	r7, r0, #8
    744c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    7450:	0793      	lsls	r3, r2, #30
    7452:	d403      	bmi.n	745c <nrfx_gpiote_output_configure+0x20>
    7454:	f7ff fed4 	bl	7200 <pin_in_use_by_te>
    7458:	2800      	cmp	r0, #0
    745a:	d15a      	bne.n	7512 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    745c:	f012 0f1c 	tst.w	r2, #28
    7460:	d002      	beq.n	7468 <nrfx_gpiote_output_configure+0x2c>
    7462:	784b      	ldrb	r3, [r1, #1]
    7464:	2b01      	cmp	r3, #1
    7466:	d054      	beq.n	7512 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    7468:	2301      	movs	r3, #1
    746a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    746e:	2300      	movs	r3, #0
    7470:	1c4a      	adds	r2, r1, #1
    7472:	e9cd 1300 	strd	r1, r3, [sp]
    7476:	4620      	mov	r0, r4
    7478:	1c8b      	adds	r3, r1, #2
    747a:	f10d 010f 	add.w	r1, sp, #15
    747e:	f006 fbed 	bl	dc5c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    7482:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    7486:	f043 0303 	orr.w	r3, r3, #3
    748a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    748e:	b915      	cbnz	r5, 7496 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    7490:	4822      	ldr	r0, [pc, #136]	; (751c <nrfx_gpiote_output_configure+0xe0>)
}
    7492:	b005      	add	sp, #20
    7494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7496:	4e20      	ldr	r6, [pc, #128]	; (7518 <nrfx_gpiote_output_configure+0xdc>)
    7498:	f104 0708 	add.w	r7, r4, #8
    749c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    74a0:	0783      	lsls	r3, r0, #30
    74a2:	d536      	bpl.n	7512 <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    74a4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    74a8:	2300      	movs	r3, #0
    74aa:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    74ac:	f020 0020 	bic.w	r0, r0, #32
    74b0:	0089      	lsls	r1, r1, #2
    74b2:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    74b6:	04c0      	lsls	r0, r0, #19
    74b8:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    74bc:	0cc0      	lsrs	r0, r0, #19
    74be:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    74c2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    74c6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    74ca:	786a      	ldrb	r2, [r5, #1]
    74cc:	2a00      	cmp	r2, #0
    74ce:	d0df      	beq.n	7490 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    74d0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    74d4:	78ad      	ldrb	r5, [r5, #2]
    74d6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    74da:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    74de:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    74e2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    74e6:	0223      	lsls	r3, r4, #8
    74e8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    74ec:	0412      	lsls	r2, r2, #16
    74ee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    74f2:	ea43 030e 	orr.w	r3, r3, lr
    74f6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    74f8:	052a      	lsls	r2, r5, #20
    74fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    74fe:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7502:	4313      	orrs	r3, r2
    7504:	f040 0020 	orr.w	r0, r0, #32
    7508:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    750c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7510:	e7be      	b.n	7490 <nrfx_gpiote_output_configure+0x54>
{
    7512:	4803      	ldr	r0, [pc, #12]	; (7520 <nrfx_gpiote_output_configure+0xe4>)
    7514:	e7bd      	b.n	7492 <nrfx_gpiote_output_configure+0x56>
    7516:	bf00      	nop
    7518:	20002160 	.word	0x20002160
    751c:	0bad0000 	.word	0x0bad0000
    7520:	0bad0004 	.word	0x0bad0004

00007524 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    7524:	4b01      	ldr	r3, [pc, #4]	; (752c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    7526:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    752a:	4770      	bx	lr
    752c:	20002160 	.word	0x20002160

00007530 <nrfx_gpiote_channel_get>:
{
    7530:	b508      	push	{r3, lr}
    7532:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    7534:	f7ff fe64 	bl	7200 <pin_in_use_by_te>
    7538:	b138      	cbz	r0, 754a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    753a:	4b05      	ldr	r3, [pc, #20]	; (7550 <nrfx_gpiote_channel_get+0x20>)
    753c:	3208      	adds	r2, #8
    753e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    7542:	4804      	ldr	r0, [pc, #16]	; (7554 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7544:	0b5b      	lsrs	r3, r3, #13
    7546:	700b      	strb	r3, [r1, #0]
}
    7548:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    754a:	4803      	ldr	r0, [pc, #12]	; (7558 <nrfx_gpiote_channel_get+0x28>)
    754c:	e7fc      	b.n	7548 <nrfx_gpiote_channel_get+0x18>
    754e:	bf00      	nop
    7550:	20002160 	.word	0x20002160
    7554:	0bad0000 	.word	0x0bad0000
    7558:	0bad0004 	.word	0x0bad0004

0000755c <nrfx_gpiote_init>:
{
    755c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    755e:	4c0f      	ldr	r4, [pc, #60]	; (759c <nrfx_gpiote_init+0x40>)
    7560:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    7564:	b9bd      	cbnz	r5, 7596 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    7566:	2260      	movs	r2, #96	; 0x60
    7568:	4629      	mov	r1, r5
    756a:	f104 0010 	add.w	r0, r4, #16
    756e:	f004 fb14 	bl	bb9a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    7572:	200d      	movs	r0, #13
    7574:	f7fc fbcc 	bl	3d10 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7578:	4b09      	ldr	r3, [pc, #36]	; (75a0 <nrfx_gpiote_init+0x44>)
    return err_code;
    757a:	480a      	ldr	r0, [pc, #40]	; (75a4 <nrfx_gpiote_init+0x48>)
    757c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    7580:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    7584:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7588:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    758c:	2301      	movs	r3, #1
    758e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    7592:	6763      	str	r3, [r4, #116]	; 0x74
}
    7594:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    7596:	4804      	ldr	r0, [pc, #16]	; (75a8 <nrfx_gpiote_init+0x4c>)
    7598:	e7fc      	b.n	7594 <nrfx_gpiote_init+0x38>
    759a:	bf00      	nop
    759c:	20002160 	.word	0x20002160
    75a0:	5000d000 	.word	0x5000d000
    75a4:	0bad0000 	.word	0x0bad0000
    75a8:	0bad0005 	.word	0x0bad0005

000075ac <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    75ac:	4b03      	ldr	r3, [pc, #12]	; (75bc <nrfx_gpiote_is_init+0x10>)
    75ae:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    75b2:	3800      	subs	r0, #0
    75b4:	bf18      	it	ne
    75b6:	2001      	movne	r0, #1
    75b8:	4770      	bx	lr
    75ba:	bf00      	nop
    75bc:	20002160 	.word	0x20002160

000075c0 <nrfx_gpiote_channel_free>:
{
    75c0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    75c2:	4801      	ldr	r0, [pc, #4]	; (75c8 <nrfx_gpiote_channel_free+0x8>)
    75c4:	f7ff bd72 	b.w	70ac <nrfx_flag32_free>
    75c8:	200021d0 	.word	0x200021d0

000075cc <nrfx_gpiote_channel_alloc>:
{
    75cc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    75ce:	4801      	ldr	r0, [pc, #4]	; (75d4 <nrfx_gpiote_channel_alloc+0x8>)
    75d0:	f7ff bd50 	b.w	7074 <nrfx_flag32_alloc>
    75d4:	200021d0 	.word	0x200021d0

000075d8 <nrfx_gpiote_trigger_enable>:
{
    75d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    75da:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    75dc:	f7ff fe10 	bl	7200 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    75e0:	4b1e      	ldr	r3, [pc, #120]	; (765c <nrfx_gpiote_trigger_enable+0x84>)
    75e2:	f104 0208 	add.w	r2, r4, #8
    75e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    75ea:	b1e8      	cbz	r0, 7628 <nrfx_gpiote_trigger_enable+0x50>
    75ec:	f013 0502 	ands.w	r5, r3, #2
    75f0:	d11a      	bne.n	7628 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    75f2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    75f4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    75f6:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    75fa:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    75fe:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7602:	6005      	str	r5, [r0, #0]
    7604:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    7608:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    760a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    760e:	f040 0001 	orr.w	r0, r0, #1
    7612:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    7616:	b129      	cbz	r1, 7624 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7618:	2201      	movs	r2, #1
    761a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    761e:	4a10      	ldr	r2, [pc, #64]	; (7660 <nrfx_gpiote_trigger_enable+0x88>)
    7620:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    7624:	b003      	add	sp, #12
    7626:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7628:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    762c:	2b04      	cmp	r3, #4
    762e:	d011      	beq.n	7654 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7630:	2b05      	cmp	r3, #5
    7632:	d011      	beq.n	7658 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7634:	a801      	add	r0, sp, #4
    7636:	9401      	str	r4, [sp, #4]
    7638:	f7ff fdd2 	bl	71e0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    763c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    763e:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7640:	40d9      	lsrs	r1, r3
    7642:	f001 0101 	and.w	r1, r1, #1
    7646:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7648:	4620      	mov	r0, r4
}
    764a:	b003      	add	sp, #12
    764c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7650:	f006 bb4d 	b.w	dcee <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7654:	2103      	movs	r1, #3
    7656:	e7f7      	b.n	7648 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7658:	2102      	movs	r1, #2
    765a:	e7f5      	b.n	7648 <nrfx_gpiote_trigger_enable+0x70>
    765c:	20002160 	.word	0x20002160
    7660:	5000d000 	.word	0x5000d000

00007664 <nrfx_gpiote_trigger_disable>:
{
    7664:	b508      	push	{r3, lr}
    7666:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7668:	f7ff fdca 	bl	7200 <pin_in_use_by_te>
    766c:	b1c0      	cbz	r0, 76a0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    766e:	4b0f      	ldr	r3, [pc, #60]	; (76ac <nrfx_gpiote_trigger_disable+0x48>)
    7670:	f102 0108 	add.w	r1, r2, #8
    7674:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7678:	0799      	lsls	r1, r3, #30
    767a:	d411      	bmi.n	76a0 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    767c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    767e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7680:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    7682:	490b      	ldr	r1, [pc, #44]	; (76b0 <nrfx_gpiote_trigger_disable+0x4c>)
    7684:	009b      	lsls	r3, r3, #2
    7686:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    768a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    768e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    7692:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    7696:	f022 0203 	bic.w	r2, r2, #3
    769a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    769e:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    76a0:	2100      	movs	r1, #0
}
    76a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    76a6:	4610      	mov	r0, r2
    76a8:	f006 bb21 	b.w	dcee <nrf_gpio_cfg_sense_set>
    76ac:	20002160 	.word	0x20002160
    76b0:	5000d000 	.word	0x5000d000

000076b4 <nrfx_gpiote_pin_uninit>:
{
    76b4:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    76b6:	4b10      	ldr	r3, [pc, #64]	; (76f8 <nrfx_gpiote_pin_uninit+0x44>)
    76b8:	f100 0208 	add.w	r2, r0, #8
    76bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    76c0:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    76c2:	07db      	lsls	r3, r3, #31
    76c4:	d516      	bpl.n	76f4 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    76c6:	f7ff ffcd 	bl	7664 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    76ca:	4620      	mov	r0, r4
    76cc:	f7ff fdea 	bl	72a4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76d0:	a801      	add	r0, sp, #4
    76d2:	9401      	str	r4, [sp, #4]
    76d4:	f7ff fd84 	bl	71e0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    76d8:	9b01      	ldr	r3, [sp, #4]
    76da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    76de:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    76e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    76e6:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    76ea:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    76ee:	4803      	ldr	r0, [pc, #12]	; (76fc <nrfx_gpiote_pin_uninit+0x48>)
}
    76f0:	b002      	add	sp, #8
    76f2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    76f4:	4802      	ldr	r0, [pc, #8]	; (7700 <nrfx_gpiote_pin_uninit+0x4c>)
    76f6:	e7fb      	b.n	76f0 <nrfx_gpiote_pin_uninit+0x3c>
    76f8:	20002160 	.word	0x20002160
    76fc:	0bad0000 	.word	0x0bad0000
    7700:	0bad0004 	.word	0x0bad0004

00007704 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    7704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    7708:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    770a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    770c:	4634      	mov	r4, r6
{
    770e:	4b63      	ldr	r3, [pc, #396]	; (789c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    7710:	4863      	ldr	r0, [pc, #396]	; (78a0 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7712:	4964      	ldr	r1, [pc, #400]	; (78a4 <nrfx_gpiote_irq_handler+0x1a0>)
{
    7714:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7716:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7718:	b135      	cbz	r5, 7728 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    771a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    771e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7720:	bf1e      	ittt	ne
    7722:	601c      	strne	r4, [r3, #0]
    7724:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    7726:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7728:	3304      	adds	r3, #4
    772a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    772c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7730:	d1f1      	bne.n	7716 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7732:	f8df a16c 	ldr.w	sl, [pc, #364]	; 78a0 <nrfx_gpiote_irq_handler+0x19c>
    7736:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    773a:	2b00      	cmp	r3, #0
    773c:	f000 8091 	beq.w	7862 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    7740:	f8df 8164 	ldr.w	r8, [pc, #356]	; 78a8 <nrfx_gpiote_irq_handler+0x1a4>
    7744:	f8d8 3020 	ldr.w	r3, [r8, #32]
    7748:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    774a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    774e:	4b57      	ldr	r3, [pc, #348]	; (78ac <nrfx_gpiote_irq_handler+0x1a8>)
    7750:	6a1a      	ldr	r2, [r3, #32]
    7752:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    7754:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7756:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    775a:	f10d 0b10 	add.w	fp, sp, #16
    775e:	ea4f 1349 	mov.w	r3, r9, lsl #5
    7762:	9300      	str	r3, [sp, #0]
    7764:	e048      	b.n	77f8 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    7766:	fa94 f4a4 	rbit	r4, r4
    776a:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    776e:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7770:	4a4f      	ldr	r2, [pc, #316]	; (78b0 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    7772:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7774:	f104 0308 	add.w	r3, r4, #8
    7778:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    777c:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    777e:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    7780:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7784:	fa03 f202 	lsl.w	r2, r3, r2
    7788:	f81b 3000 	ldrb.w	r3, [fp, r0]
    778c:	9403      	str	r4, [sp, #12]
    778e:	ea23 0302 	bic.w	r3, r3, r2
    7792:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7796:	a803      	add	r0, sp, #12
    7798:	f7ff fd22 	bl	71e0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    779c:	9b03      	ldr	r3, [sp, #12]
    779e:	08b9      	lsrs	r1, r7, #2
    77a0:	3380      	adds	r3, #128	; 0x80
    77a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    77a6:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    77aa:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    77ac:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    77ae:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    77b2:	d52b      	bpl.n	780c <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    77b4:	4620      	mov	r0, r4
    77b6:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    77b8:	b2dd      	uxtb	r5, r3
    77ba:	f7ff fd2b 	bl	7214 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    77be:	a803      	add	r0, sp, #12
    77c0:	9403      	str	r4, [sp, #12]
    77c2:	f7ff fd0d 	bl	71e0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    77c6:	9b03      	ldr	r3, [sp, #12]
    77c8:	3380      	adds	r3, #128	; 0x80
    77ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    77ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
    77d2:	429d      	cmp	r5, r3
    77d4:	d107      	bne.n	77e6 <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    77d6:	2100      	movs	r1, #0
    77d8:	4620      	mov	r0, r4
    77da:	f006 fa88 	bl	dcee <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    77de:	4629      	mov	r1, r5
    77e0:	4620      	mov	r0, r4
    77e2:	f006 fa84 	bl	dcee <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    77e6:	a803      	add	r0, sp, #12
    77e8:	9403      	str	r4, [sp, #12]
    77ea:	f7ff fcf9 	bl	71e0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    77ee:	2201      	movs	r2, #1
    77f0:	9b03      	ldr	r3, [sp, #12]
    77f2:	fa02 f303 	lsl.w	r3, r2, r3
    77f6:	6203      	str	r3, [r0, #32]
            while (latch[i])
    77f8:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    77fc:	2c00      	cmp	r4, #0
    77fe:	d1b2      	bne.n	7766 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7800:	f1b9 0f00 	cmp.w	r9, #0
    7804:	d11d      	bne.n	7842 <nrfx_gpiote_irq_handler+0x13e>
    7806:	f04f 0901 	mov.w	r9, #1
    780a:	e7a8      	b.n	775e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    780c:	2b02      	cmp	r3, #2
    780e:	d10c      	bne.n	782a <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    7810:	2103      	movs	r1, #3
    7812:	4620      	mov	r0, r4
    7814:	f006 fa6b 	bl	dcee <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7818:	f005 0305 	and.w	r3, r5, #5
    781c:	2b01      	cmp	r3, #1
    781e:	d1e2      	bne.n	77e6 <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    7820:	4639      	mov	r1, r7
    7822:	4620      	mov	r0, r4
    7824:	f7ff fcf6 	bl	7214 <call_handler>
    7828:	e7dd      	b.n	77e6 <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    782a:	2102      	movs	r1, #2
    782c:	4620      	mov	r0, r4
    782e:	9301      	str	r3, [sp, #4]
    7830:	f006 fa5d 	bl	dcee <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7834:	2d03      	cmp	r5, #3
    7836:	d0f3      	beq.n	7820 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7838:	9b01      	ldr	r3, [sp, #4]
    783a:	2b03      	cmp	r3, #3
    783c:	d1d3      	bne.n	77e6 <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    783e:	2d02      	cmp	r5, #2
    7840:	e7ed      	b.n	781e <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7842:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    7846:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    784a:	f8d8 3020 	ldr.w	r3, [r8, #32]
    784e:	4917      	ldr	r1, [pc, #92]	; (78ac <nrfx_gpiote_irq_handler+0x1a8>)
    7850:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    7852:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    7856:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    7858:	4313      	orrs	r3, r2
    785a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    785c:	620a      	str	r2, [r1, #32]
    785e:	f47f af7a 	bne.w	7756 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    7862:	2401      	movs	r4, #1
    while (mask)
    7864:	b916      	cbnz	r6, 786c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    7866:	b007      	add	sp, #28
    7868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    786c:	fa96 f3a6 	rbit	r3, r6
    7870:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7874:	fa04 f203 	lsl.w	r2, r4, r3
    7878:	009b      	lsls	r3, r3, #2
    787a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    787e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7882:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7886:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    788a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    788e:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    7892:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7896:	f7ff fcbd 	bl	7214 <call_handler>
    789a:	e7e3      	b.n	7864 <nrfx_gpiote_irq_handler+0x160>
    789c:	5000d100 	.word	0x5000d100
    78a0:	5000d000 	.word	0x5000d000
    78a4:	5000d120 	.word	0x5000d120
    78a8:	50842500 	.word	0x50842500
    78ac:	50842800 	.word	0x50842800
    78b0:	20002160 	.word	0x20002160

000078b4 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    78b4:	2200      	movs	r2, #0
    78b6:	4b03      	ldr	r3, [pc, #12]	; (78c4 <nvmc_readonly_mode_set+0x10>)
    78b8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    78bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    78c0:	4770      	bx	lr
    78c2:	bf00      	nop
    78c4:	50039000 	.word	0x50039000

000078c8 <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    78c8:	4a04      	ldr	r2, [pc, #16]	; (78dc <nvmc_word_write+0x14>)
    78ca:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    78ce:	07db      	lsls	r3, r3, #31
    78d0:	d5fb      	bpl.n	78ca <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    78d2:	6001      	str	r1, [r0, #0]
    78d4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    78d8:	4770      	bx	lr
    78da:	bf00      	nop
    78dc:	50039000 	.word	0x50039000

000078e0 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    78e0:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    78e2:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    78e6:	b983      	cbnz	r3, 790a <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    78e8:	2202      	movs	r2, #2
    78ea:	4b09      	ldr	r3, [pc, #36]	; (7910 <nrfx_nvmc_page_erase+0x30>)
    78ec:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    78f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    78f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    78f8:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    78fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    78fe:	07d2      	lsls	r2, r2, #31
    7900:	d5fb      	bpl.n	78fa <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    7902:	f7ff ffd7 	bl	78b4 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    7906:	4803      	ldr	r0, [pc, #12]	; (7914 <nrfx_nvmc_page_erase+0x34>)
}
    7908:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    790a:	4803      	ldr	r0, [pc, #12]	; (7918 <nrfx_nvmc_page_erase+0x38>)
    790c:	e7fc      	b.n	7908 <nrfx_nvmc_page_erase+0x28>
    790e:	bf00      	nop
    7910:	50039000 	.word	0x50039000
    7914:	0bad0000 	.word	0x0bad0000
    7918:	0bad000a 	.word	0x0bad000a

0000791c <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    791c:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    791e:	b508      	push	{r3, lr}
    7920:	4b05      	ldr	r3, [pc, #20]	; (7938 <nrfx_nvmc_word_write+0x1c>)
    7922:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    7926:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    792a:	f7ff ffcd 	bl	78c8 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    792e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    7932:	f7ff bfbf 	b.w	78b4 <nvmc_readonly_mode_set>
    7936:	bf00      	nop
    7938:	50039000 	.word	0x50039000

0000793c <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    793c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7940:	4615      	mov	r5, r2
    p_reg->CONFIGNS = (uint32_t)mode;
    7942:	2201      	movs	r2, #1
    7944:	4b1d      	ldr	r3, [pc, #116]	; (79bc <nrfx_nvmc_bytes_write+0x80>)
    7946:	4604      	mov	r4, r0
    7948:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    794c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
    7950:	f010 0303 	ands.w	r3, r0, #3
{
    7954:	460e      	mov	r6, r1
    if (unaligned_bytes != 0)
    7956:	d010      	beq.n	797a <nrfx_nvmc_bytes_write+0x3e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
    7958:	f1c3 0704 	rsb	r7, r3, #4
    795c:	42af      	cmp	r7, r5
    795e:	bf28      	it	cs
    7960:	462f      	movcs	r7, r5
        if (leading_bytes > num_bytes)
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
    7962:	463a      	mov	r2, r7
    7964:	eba0 0803 	sub.w	r8, r0, r3
    7968:	f006 f9d0 	bl	dd0c <partial_word_create>
    796c:	4601      	mov	r1, r0
    796e:	4640      	mov	r0, r8
    7970:	f7ff ffaa 	bl	78c8 <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
    7974:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
    7976:	443c      	add	r4, r7
        bytes_src += leading_bytes;
    7978:	443e      	add	r6, r7
    for (uint32_t i = 0; i < num_words; i++)
    797a:	4637      	mov	r7, r6
    797c:	f025 0803 	bic.w	r8, r5, #3
    7980:	44b0      	add	r8, r6
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    7982:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
    7986:	45b8      	cmp	r8, r7
    7988:	d111      	bne.n	79ae <nrfx_nvmc_bytes_write+0x72>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
    798a:	f015 0203 	ands.w	r2, r5, #3
    798e:	d00a      	beq.n	79a6 <nrfx_nvmc_bytes_write+0x6a>
        addr += word_count * NVMC_BYTES_IN_WORD;
    7990:	f025 0503 	bic.w	r5, r5, #3
    7994:	442c      	add	r4, r5
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
    7996:	1971      	adds	r1, r6, r5
    7998:	4620      	mov	r0, r4
    799a:	f006 f9b7 	bl	dd0c <partial_word_create>
    799e:	4601      	mov	r1, r0
    79a0:	4620      	mov	r0, r4
    79a2:	f7ff ff91 	bl	78c8 <nvmc_word_write>
    }

    nvmc_readonly_mode_set();
}
    79a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    nvmc_readonly_mode_set();
    79aa:	f7ff bf83 	b.w	78b4 <nvmc_readonly_mode_set>
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    79ae:	eb09 0007 	add.w	r0, r9, r7
    79b2:	f857 1b04 	ldr.w	r1, [r7], #4
    79b6:	f7ff ff87 	bl	78c8 <nvmc_word_write>
    for (uint32_t i = 0; i < num_words; i++)
    79ba:	e7e4      	b.n	7986 <nrfx_nvmc_bytes_write+0x4a>
    79bc:	50039000 	.word	0x50039000

000079c0 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    79c0:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    79c2:	4c17      	ldr	r4, [pc, #92]	; (7a20 <nrfx_power_init+0x60>)
    79c4:	7823      	ldrb	r3, [r4, #0]
    79c6:	bb4b      	cbnz	r3, 7a1c <nrfx_power_init+0x5c>
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
    79c8:	7803      	ldrb	r3, [r0, #0]
    79ca:	4a16      	ldr	r2, [pc, #88]	; (7a24 <nrfx_power_init+0x64>)
    79cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
    79d0:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
#elif defined(REGULATORS_PRESENT)
    nrf_regulators_dcdcen_set(NRF_REGULATORS, p_config->dcdcen);
    79d4:	7803      	ldrb	r3, [r0, #0]
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    79d6:	f003 0301 	and.w	r3, r3, #1
    79da:	f8c2 3704 	str.w	r3, [r2, #1796]	; 0x704
#if !defined(NRF_TRUSTZONE_NONSECURE)
    if (p_config->dcdcen && nrf53_errata_53())
    79de:	7803      	ldrb	r3, [r0, #0]
    79e0:	07db      	lsls	r3, r3, #31
    79e2:	d510      	bpl.n	7a06 <nrfx_power_init+0x46>
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    79e4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    79e8:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    79ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    79f0:	2907      	cmp	r1, #7
    79f2:	d108      	bne.n	7a06 <nrfx_power_init+0x46>
                    switch(var2)
    79f4:	3b02      	subs	r3, #2
    79f6:	2b03      	cmp	r3, #3
    79f8:	d805      	bhi.n	7a06 <nrfx_power_init+0x46>
    79fa:	490b      	ldr	r1, [pc, #44]	; (7a28 <nrfx_power_init+0x68>)
    79fc:	5ccb      	ldrb	r3, [r1, r3]
    79fe:	b113      	cbz	r3, 7a06 <nrfx_power_init+0x46>
    {
        *((volatile uint32_t *)0x50004728ul) = 0x1;
    7a00:	2301      	movs	r3, #1
    7a02:	f8c2 3728 	str.w	r3, [r2, #1832]	; 0x728
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7a06:	2005      	movs	r0, #5
    7a08:	f7fc f9a4 	bl	3d54 <arch_irq_is_enabled>
    7a0c:	b910      	cbnz	r0, 7a14 <nrfx_power_init+0x54>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7a0e:	2005      	movs	r0, #5
    7a10:	f7fc f97e 	bl	3d10 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    7a14:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    7a16:	4805      	ldr	r0, [pc, #20]	; (7a2c <nrfx_power_init+0x6c>)
    m_initialized = true;
    7a18:	7023      	strb	r3, [r4, #0]
}
    7a1a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    7a1c:	4804      	ldr	r0, [pc, #16]	; (7a30 <nrfx_power_init+0x70>)
    7a1e:	e7fc      	b.n	7a1a <nrfx_power_init+0x5a>
    7a20:	20056801 	.word	0x20056801
    7a24:	50004000 	.word	0x50004000
    7a28:	0000f371 	.word	0x0000f371
    7a2c:	0bad0000 	.word	0x0bad0000
    7a30:	0bad000c 	.word	0x0bad000c

00007a34 <nrfx_power_irq_handler>:
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_power_int_enable_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->INTENSET;
    7a34:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    7a38:	b510      	push	{r4, lr}
    7a3a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7a3e:	0761      	lsls	r1, r4, #29
    7a40:	d50a      	bpl.n	7a58 <nrfx_power_irq_handler+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a42:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    if (ret)
    7a46:	b13a      	cbz	r2, 7a58 <nrfx_power_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a48:	2200      	movs	r2, #0
    7a4a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    7a4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    7a52:	4b12      	ldr	r3, [pc, #72]	; (7a9c <nrfx_power_irq_handler+0x68>)
    7a54:	681b      	ldr	r3, [r3, #0]
    7a56:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    7a58:	06a2      	lsls	r2, r4, #26
    7a5a:	d50c      	bpl.n	7a76 <nrfx_power_irq_handler+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a5c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7a60:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    if (ret)
    7a64:	b13a      	cbz	r2, 7a76 <nrfx_power_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a66:	2000      	movs	r0, #0
    7a68:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    7a6c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    7a70:	4b0b      	ldr	r3, [pc, #44]	; (7aa0 <nrfx_power_irq_handler+0x6c>)
    7a72:	681b      	ldr	r3, [r3, #0]
    7a74:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    7a76:	0663      	lsls	r3, r4, #25
    7a78:	d50f      	bpl.n	7a9a <nrfx_power_irq_handler+0x66>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a7a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7a7e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (ret)
    7a82:	b152      	cbz	r2, 7a9a <nrfx_power_irq_handler+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a84:	2200      	movs	r2, #0
    7a86:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    7a8a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    7a8e:	4b04      	ldr	r3, [pc, #16]	; (7aa0 <nrfx_power_irq_handler+0x6c>)
    7a90:	2001      	movs	r0, #1
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    }
#endif
}
    7a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    7a96:	681b      	ldr	r3, [r3, #0]
    7a98:	4718      	bx	r3
}
    7a9a:	bd10      	pop	{r4, pc}
    7a9c:	20014160 	.word	0x20014160
    7aa0:	2001415c 	.word	0x2001415c

00007aa4 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
    7aa4:	b570      	push	{r4, r5, r6, lr}
    7aa6:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
    7aaa:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    7aae:	d168      	bne.n	7b82 <qspi_xfer+0xde>
    7ab0:	0784      	lsls	r4, r0, #30
    7ab2:	d166      	bne.n	7b82 <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
    7ab4:	4d35      	ldr	r5, [pc, #212]	; (7b8c <qspi_xfer+0xe8>)
    7ab6:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
    7aba:	2c01      	cmp	r4, #1
    7abc:	d001      	beq.n	7ac2 <qspi_xfer+0x1e>
    7abe:	429c      	cmp	r4, r3
    7ac0:	d161      	bne.n	7b86 <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
    7ac2:	682c      	ldr	r4, [r5, #0]
    7ac4:	bb04      	cbnz	r4, 7b08 <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7ac6:	2b02      	cmp	r3, #2
    7ac8:	4b31      	ldr	r3, [pc, #196]	; (7b90 <qspi_xfer+0xec>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
    7aca:	bf0b      	itete	eq
    7acc:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
    7ad0:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    7ad4:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    7ad8:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    7adc:	bf0b      	itete	eq
    7ade:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
    7ae2:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
    7ae6:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
    7ae8:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7aea:	2100      	movs	r1, #0
    7aec:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7af0:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    7af4:	2201      	movs	r2, #1
    7af6:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    7afa:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7afc:	4a24      	ldr	r2, [pc, #144]	; (7b90 <qspi_xfer+0xec>)
    7afe:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    7b02:	2b00      	cmp	r3, #0
    7b04:	d0fb      	beq.n	7afe <qspi_xfer+0x5a>
    7b06:	e00d      	b.n	7b24 <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
    7b08:	68ae      	ldr	r6, [r5, #8]
    7b0a:	4c21      	ldr	r4, [pc, #132]	; (7b90 <qspi_xfer+0xec>)
    7b0c:	b166      	cbz	r6, 7b28 <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7b0e:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
    7b10:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
    7b12:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
    7b14:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7b16:	d12d      	bne.n	7b74 <qspi_xfer+0xd0>
    p_reg->WRITE.DST = dest_addr;
    7b18:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    7b1c:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
    7b20:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
    7b24:	481b      	ldr	r0, [pc, #108]	; (7b94 <qspi_xfer+0xf0>)
}
    7b26:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7b28:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
    7b2a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
    7b2e:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
    7b30:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
    7b32:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
    7b34:	bf0c      	ite	eq
    7b36:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
    7b3a:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b3e:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    7b42:	bf0b      	itete	eq
    7b44:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    7b48:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    7b4c:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
    7b50:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
    7b54:	bf08      	it	eq
    7b56:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b58:	490d      	ldr	r1, [pc, #52]	; (7b90 <qspi_xfer+0xec>)
        task = NRF_QSPI_TASK_READSTART;
    7b5a:	bf18      	it	ne
    7b5c:	2304      	movne	r3, #4
    7b5e:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
    7b62:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b64:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    7b68:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
    7b6c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b70:	601a      	str	r2, [r3, #0]
}
    7b72:	e7d7      	b.n	7b24 <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
    7b74:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
    7b78:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
    7b7c:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
    7b80:	e7d0      	b.n	7b24 <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
    7b82:	4805      	ldr	r0, [pc, #20]	; (7b98 <qspi_xfer+0xf4>)
    7b84:	e7cf      	b.n	7b26 <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
    7b86:	4805      	ldr	r0, [pc, #20]	; (7b9c <qspi_xfer+0xf8>)
    7b88:	e7cd      	b.n	7b26 <qspi_xfer+0x82>
    7b8a:	bf00      	nop
    7b8c:	20014164 	.word	0x20014164
    7b90:	5002b000 	.word	0x5002b000
    7b94:	0bad0000 	.word	0x0bad0000
    7b98:	0bad000a 	.word	0x0bad000a
    7b9c:	0bad000b 	.word	0x0bad000b

00007ba0 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
    7ba0:	b538      	push	{r3, r4, r5, lr}
    7ba2:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ba4:	4d06      	ldr	r5, [pc, #24]	; (7bc0 <qspi_ready_wait+0x20>)
    7ba6:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
    7baa:	b933      	cbnz	r3, 7bba <qspi_ready_wait+0x1a>
    7bac:	200a      	movs	r0, #10
    7bae:	f005 ff2f 	bl	da10 <nrfx_busy_wait>
    7bb2:	3c01      	subs	r4, #1
    7bb4:	d1f7      	bne.n	7ba6 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
    7bb6:	4803      	ldr	r0, [pc, #12]	; (7bc4 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
    7bb8:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
    7bba:	4803      	ldr	r0, [pc, #12]	; (7bc8 <qspi_ready_wait+0x28>)
    7bbc:	e7fc      	b.n	7bb8 <qspi_ready_wait+0x18>
    7bbe:	bf00      	nop
    7bc0:	5002b000 	.word	0x5002b000
    7bc4:	0bad0007 	.word	0x0bad0007
    7bc8:	0bad0000 	.word	0x0bad0000

00007bcc <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
    7bcc:	4b08      	ldr	r3, [pc, #32]	; (7bf0 <qspi_event_xfer_handle.constprop.0+0x24>)
    7bce:	689a      	ldr	r2, [r3, #8]
    7bd0:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
    7bd2:	691a      	ldr	r2, [r3, #16]
    7bd4:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
    7bd6:	699a      	ldr	r2, [r3, #24]
    7bd8:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
    7bda:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
    7bdc:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
    7bde:	b132      	cbz	r2, 7bee <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
    7be0:	695a      	ldr	r2, [r3, #20]
    7be2:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
    7be4:	69da      	ldr	r2, [r3, #28]
    7be6:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
    7be8:	2200      	movs	r2, #0
    7bea:	60da      	str	r2, [r3, #12]
    7bec:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
    7bee:	4770      	bx	lr
    7bf0:	20014164 	.word	0x20014164

00007bf4 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    7bf4:	b510      	push	{r4, lr}
        case 0: return NRF_P0;
    7bf6:	4a0a      	ldr	r2, [pc, #40]	; (7c20 <nrf_gpio_cfg.constprop.0+0x2c>)
    7bf8:	4c0a      	ldr	r4, [pc, #40]	; (7c24 <nrf_gpio_cfg.constprop.0+0x30>)
    *p_pin = pin_number & 0x1F;
    7bfa:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
    7bfe:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    7c00:	2801      	cmp	r0, #1
    7c02:	bf18      	it	ne
    7c04:	4622      	movne	r2, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    7c06:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7c0a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    7c0e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    7c12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7c16:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    7c1a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    7c1e:	bd10      	pop	{r4, pc}
    7c20:	50842800 	.word	0x50842800
    7c24:	50842500 	.word	0x50842500

00007c28 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
    7c28:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
    7c2a:	4b0e      	ldr	r3, [pc, #56]	; (7c64 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
    7c2c:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
    7c2e:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
    7c32:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
    7c36:	2807      	cmp	r0, #7
    7c38:	d813      	bhi.n	7c62 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
    7c3a:	e8df f000 	tbb	[pc, r0]
    7c3e:	0f11      	.short	0x0f11
    7c40:	080a0b0d 	.word	0x080a0b0d
    7c44:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
    7c46:	0e10      	lsrs	r0, r2, #24
    7c48:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
    7c4a:	0c10      	lsrs	r0, r2, #16
    7c4c:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
    7c4e:	0a10      	lsrs	r0, r2, #8
    7c50:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
    7c52:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
    7c54:	0e1a      	lsrs	r2, r3, #24
    7c56:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
    7c58:	0c1a      	lsrs	r2, r3, #16
    7c5a:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
    7c5c:	0a1a      	lsrs	r2, r3, #8
    7c5e:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
    7c60:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
    7c62:	bd10      	pop	{r4, pc}
    7c64:	5002b000 	.word	0x5002b000

00007c68 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
    7c68:	3802      	subs	r0, #2
    7c6a:	2807      	cmp	r0, #7
    7c6c:	d81f      	bhi.n	7cae <nrf_qspi_cinstrdata_set.constprop.0+0x46>
    7c6e:	e8df f000 	tbb	[pc, r0]
    7c72:	2729      	.short	0x2729
    7c74:	21231125 	.word	0x21231125
    7c78:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
    7c7a:	79cb      	ldrb	r3, [r1, #7]
    7c7c:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
    7c7e:	798a      	ldrb	r2, [r1, #6]
    7c80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
    7c84:	794a      	ldrb	r2, [r1, #5]
    7c86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
    7c8a:	790a      	ldrb	r2, [r1, #4]
    7c8c:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
    7c8e:	4a0e      	ldr	r2, [pc, #56]	; (7cc8 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    7c90:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
    7c94:	78cb      	ldrb	r3, [r1, #3]
    7c96:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
    7c98:	788a      	ldrb	r2, [r1, #2]
    7c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
    7c9e:	784a      	ldrb	r2, [r1, #1]
    7ca0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
    7ca4:	780a      	ldrb	r2, [r1, #0]
    7ca6:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
    7ca8:	4a07      	ldr	r2, [pc, #28]	; (7cc8 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    7caa:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
    7cae:	4770      	bx	lr
    switch (length)
    7cb0:	2300      	movs	r3, #0
    7cb2:	e7e4      	b.n	7c7e <nrf_qspi_cinstrdata_set.constprop.0+0x16>
    7cb4:	2300      	movs	r3, #0
    7cb6:	e7e5      	b.n	7c84 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
    7cb8:	2300      	movs	r3, #0
    7cba:	e7e6      	b.n	7c8a <nrf_qspi_cinstrdata_set.constprop.0+0x22>
    7cbc:	2300      	movs	r3, #0
    7cbe:	e7eb      	b.n	7c98 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
    7cc0:	2300      	movs	r3, #0
    7cc2:	e7ec      	b.n	7c9e <nrf_qspi_cinstrdata_set.constprop.0+0x36>
    7cc4:	2300      	movs	r3, #0
    7cc6:	e7ed      	b.n	7ca4 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
    7cc8:	5002b000 	.word	0x5002b000

00007ccc <nrfx_qspi_init>:
{
    7ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7cce:	4f67      	ldr	r7, [pc, #412]	; (7e6c <nrfx_qspi_init+0x1a0>)
{
    7cd0:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7cd2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
{
    7cd6:	460d      	mov	r5, r1
    7cd8:	4616      	mov	r6, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7cda:	2b00      	cmp	r3, #0
    7cdc:	f040 80c2 	bne.w	7e64 <nrfx_qspi_init+0x198>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    7ce0:	7cc2      	ldrb	r2, [r0, #19]
    7ce2:	b112      	cbz	r2, 7cea <nrfx_qspi_init+0x1e>
    7ce4:	7d03      	ldrb	r3, [r0, #20]
    7ce6:	2b00      	cmp	r3, #0
    7ce8:	d16c      	bne.n	7dc4 <nrfx_qspi_init+0xf8>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7cea:	7920      	ldrb	r0, [r4, #4]
    7cec:	28ff      	cmp	r0, #255	; 0xff
    7cee:	f000 80bb 	beq.w	7e68 <nrfx_qspi_init+0x19c>
    7cf2:	7963      	ldrb	r3, [r4, #5]
    7cf4:	2bff      	cmp	r3, #255	; 0xff
    7cf6:	f000 80b7 	beq.w	7e68 <nrfx_qspi_init+0x19c>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7cfa:	79a3      	ldrb	r3, [r4, #6]
    7cfc:	2bff      	cmp	r3, #255	; 0xff
    7cfe:	f000 80b3 	beq.w	7e68 <nrfx_qspi_init+0x19c>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
    7d02:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7d04:	29ff      	cmp	r1, #255	; 0xff
    7d06:	f000 80af 	beq.w	7e68 <nrfx_qspi_init+0x19c>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    7d0a:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    7d0c:	f8df c160 	ldr.w	ip, [pc, #352]	; 7e70 <nrfx_qspi_init+0x1a4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    7d10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    7d14:	4563      	cmp	r3, ip
    7d16:	f040 80a7 	bne.w	7e68 <nrfx_qspi_init+0x19c>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
    7d1a:	290e      	cmp	r1, #14
    7d1c:	f040 80a4 	bne.w	7e68 <nrfx_qspi_init+0x19c>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7d20:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
    7d22:	2bff      	cmp	r3, #255	; 0xff
    7d24:	d002      	beq.n	7d2c <nrfx_qspi_init+0x60>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7d26:	2b0f      	cmp	r3, #15
    7d28:	f040 809e 	bne.w	7e68 <nrfx_qspi_init+0x19c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7d2c:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
    7d2e:	2bff      	cmp	r3, #255	; 0xff
    7d30:	d002      	beq.n	7d38 <nrfx_qspi_init+0x6c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7d32:	2b10      	cmp	r3, #16
    7d34:	f040 8098 	bne.w	7e68 <nrfx_qspi_init+0x19c>
    if (!p_config->skip_gpio_cfg)
    7d38:	b9b2      	cbnz	r2, 7d68 <nrfx_qspi_init+0x9c>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
    7d3a:	2103      	movs	r1, #3
    7d3c:	f7ff ff5a 	bl	7bf4 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
    7d40:	7960      	ldrb	r0, [r4, #5]
    7d42:	f7ff ff57 	bl	7bf4 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
    7d46:	79a0      	ldrb	r0, [r4, #6]
    7d48:	f7ff ff54 	bl	7bf4 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
    7d4c:	79e0      	ldrb	r0, [r4, #7]
    7d4e:	f7ff ff51 	bl	7bf4 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7d52:	7a20      	ldrb	r0, [r4, #8]
    7d54:	28ff      	cmp	r0, #255	; 0xff
    7d56:	d001      	beq.n	7d5c <nrfx_qspi_init+0x90>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
    7d58:	f7ff ff4c 	bl	7bf4 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7d5c:	7a60      	ldrb	r0, [r4, #9]
    7d5e:	28ff      	cmp	r0, #255	; 0xff
    7d60:	d002      	beq.n	7d68 <nrfx_qspi_init+0x9c>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
    7d62:	2103      	movs	r1, #3
    7d64:	f7ff ff46 	bl	7bf4 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
    7d68:	7d23      	ldrb	r3, [r4, #20]
    7d6a:	bb5b      	cbnz	r3, 7dc4 <nrfx_qspi_init+0xf8>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
    7d6c:	7923      	ldrb	r3, [r4, #4]
    7d6e:	2bff      	cmp	r3, #255	; 0xff
    7d70:	bf14      	ite	ne
    7d72:	461a      	movne	r2, r3
    7d74:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7d78:	4b3e      	ldr	r3, [pc, #248]	; (7e74 <nrfx_qspi_init+0x1a8>)
    7d7a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
    7d7e:	7962      	ldrb	r2, [r4, #5]
    7d80:	2aff      	cmp	r2, #255	; 0xff
    7d82:	bf08      	it	eq
    7d84:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7d88:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
    7d8c:	79a2      	ldrb	r2, [r4, #6]
    7d8e:	2aff      	cmp	r2, #255	; 0xff
    7d90:	bf08      	it	eq
    7d92:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7d96:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
    7d9a:	79e2      	ldrb	r2, [r4, #7]
    7d9c:	2aff      	cmp	r2, #255	; 0xff
    7d9e:	bf08      	it	eq
    7da0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7da4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
    7da8:	7a22      	ldrb	r2, [r4, #8]
    7daa:	2aff      	cmp	r2, #255	; 0xff
    7dac:	bf08      	it	eq
    7dae:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7db2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
    7db6:	7a62      	ldrb	r2, [r4, #9]
    7db8:	2aff      	cmp	r2, #255	; 0xff
    7dba:	bf08      	it	eq
    7dbc:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7dc0:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
    7dc4:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
    7dc6:	4a2b      	ldr	r2, [pc, #172]	; (7e74 <nrfx_qspi_init+0x1a8>)
    7dc8:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    7dcc:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
    7dce:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
    7dd0:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    7dd2:	019b      	lsls	r3, r3, #6
    7dd4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
    7dd8:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
    7dda:	7b61      	ldrb	r1, [r4, #13]
    7ddc:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
    7de0:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
    7de4:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
    7de6:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
    7dea:	bbb1      	cbnz	r1, 7e5a <nrfx_qspi_init+0x18e>
        regval |= ((1 << 16) | (1 << 17));
    7dec:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
    7df0:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
    7df4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    7df8:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    7dfc:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
    7e00:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    7e02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    7e06:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
    7e0a:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
    7e0c:	7be1      	ldrb	r1, [r4, #15]
    7e0e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
    7e12:	7c21      	ldrb	r1, [r4, #16]
    7e14:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
    7e18:	7c61      	ldrb	r1, [r4, #17]
    7e1a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
    7e1e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    7e22:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
    7e24:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    7e28:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
    7e2c:	2301      	movs	r3, #1
    7e2e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
    7e32:	b115      	cbz	r5, 7e3a <nrfx_qspi_init+0x16e>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
    7e34:	202b      	movs	r0, #43	; 0x2b
    7e36:	f7fb ff6b 	bl	3d10 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
    7e3a:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    7e3c:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
    7e3e:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
    7e42:	4b0c      	ldr	r3, [pc, #48]	; (7e74 <nrfx_qspi_init+0x1a8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    7e44:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
    7e48:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7e4c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e50:	601a      	str	r2, [r3, #0]
}
    7e52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
    7e56:	f7ff bea3 	b.w	7ba0 <qspi_ready_wait>
        regval &= ~(1 << 17);
    7e5a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
    7e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7e62:	e7c5      	b.n	7df0 <nrfx_qspi_init+0x124>
        return NRFX_ERROR_INVALID_STATE;
    7e64:	4804      	ldr	r0, [pc, #16]	; (7e78 <nrfx_qspi_init+0x1ac>)
}
    7e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7e68:	4804      	ldr	r0, [pc, #16]	; (7e7c <nrfx_qspi_init+0x1b0>)
    7e6a:	e7fc      	b.n	7e66 <nrfx_qspi_init+0x19a>
    7e6c:	20014164 	.word	0x20014164
    7e70:	000d1211 	.word	0x000d1211
    7e74:	5002b000 	.word	0x5002b000
    7e78:	0bad0005 	.word	0x0bad0005
    7e7c:	0bad0004 	.word	0x0bad0004

00007e80 <nrfx_qspi_cinstr_xfer>:
{
    7e80:	b570      	push	{r4, r5, r6, lr}
    7e82:	4614      	mov	r4, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    7e84:	4a19      	ldr	r2, [pc, #100]	; (7eec <nrfx_qspi_cinstr_xfer+0x6c>)
{
    7e86:	4605      	mov	r5, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    7e88:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    7e8c:	2a01      	cmp	r2, #1
    7e8e:	d12b      	bne.n	7ee8 <nrfx_qspi_cinstr_xfer+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7e90:	2200      	movs	r2, #0
    7e92:	4e17      	ldr	r6, [pc, #92]	; (7ef0 <nrfx_qspi_cinstr_xfer+0x70>)
    7e94:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
    7e98:	b111      	cbz	r1, 7ea0 <nrfx_qspi_cinstr_xfer+0x20>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
    7e9a:	7840      	ldrb	r0, [r0, #1]
    7e9c:	f7ff fee4 	bl	7c68 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
    7ea0:	2301      	movs	r3, #1
    7ea2:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7ea6:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7ea8:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7eaa:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7eac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    7eb0:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7eb2:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    7eb4:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7eb6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    7eba:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    7ebc:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
    7ec0:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    7ec2:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    7ec6:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    7eca:	f7ff fe69 	bl	7ba0 <qspi_ready_wait>
    7ece:	4b09      	ldr	r3, [pc, #36]	; (7ef4 <nrfx_qspi_cinstr_xfer+0x74>)
    7ed0:	4298      	cmp	r0, r3
    7ed2:	d008      	beq.n	7ee6 <nrfx_qspi_cinstr_xfer+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7ed4:	2300      	movs	r3, #0
    7ed6:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
    7eda:	b11c      	cbz	r4, 7ee4 <nrfx_qspi_cinstr_xfer+0x64>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
    7edc:	4621      	mov	r1, r4
    7ede:	7868      	ldrb	r0, [r5, #1]
    7ee0:	f7ff fea2 	bl	7c28 <nrf_qspi_cinstrdata_get.constprop.0>
        return NRFX_ERROR_BUSY;
    7ee4:	4804      	ldr	r0, [pc, #16]	; (7ef8 <nrfx_qspi_cinstr_xfer+0x78>)
}
    7ee6:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
    7ee8:	4804      	ldr	r0, [pc, #16]	; (7efc <nrfx_qspi_cinstr_xfer+0x7c>)
    7eea:	e7fc      	b.n	7ee6 <nrfx_qspi_cinstr_xfer+0x66>
    7eec:	20014164 	.word	0x20014164
    7ef0:	5002b000 	.word	0x5002b000
    7ef4:	0bad0007 	.word	0x0bad0007
    7ef8:	0bad0000 	.word	0x0bad0000
    7efc:	0bad000b 	.word	0x0bad000b

00007f00 <nrfx_qspi_mem_busy_check>:
{
    7f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
    7f02:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
    7f04:	4a0c      	ldr	r2, [pc, #48]	; (7f38 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    7f06:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
    7f08:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    7f0a:	f10d 0207 	add.w	r2, sp, #7
    7f0e:	4611      	mov	r1, r2
    uint8_t status_value = 0;
    7f10:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
    7f14:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    7f18:	f7ff ffb2 	bl	7e80 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
    7f1c:	4b07      	ldr	r3, [pc, #28]	; (7f3c <nrfx_qspi_mem_busy_check+0x3c>)
    7f1e:	4298      	cmp	r0, r3
    7f20:	d106      	bne.n	7f30 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
    7f22:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
    7f26:	f013 0f01 	tst.w	r3, #1
    7f2a:	4b05      	ldr	r3, [pc, #20]	; (7f40 <nrfx_qspi_mem_busy_check+0x40>)
    7f2c:	bf18      	it	ne
    7f2e:	4618      	movne	r0, r3
}
    7f30:	b005      	add	sp, #20
    7f32:	f85d fb04 	ldr.w	pc, [sp], #4
    7f36:	bf00      	nop
    7f38:	01000205 	.word	0x01000205
    7f3c:	0bad0000 	.word	0x0bad0000
    7f40:	0bad000b 	.word	0x0bad000b

00007f44 <nrfx_qspi_uninit>:
{
    7f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
    7f48:	202b      	movs	r0, #43	; 0x2b
    7f4a:	f7fb feef 	bl	3d2c <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
    7f4e:	4b21      	ldr	r3, [pc, #132]	; (7fd4 <nrfx_qspi_uninit+0x90>)
    if (!m_cb.skip_gpio_cfg)
    7f50:	4e21      	ldr	r6, [pc, #132]	; (7fd8 <nrfx_qspi_uninit+0x94>)
    7f52:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
    7f56:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
    7f5a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
    7f5e:	bf04      	itt	eq
    7f60:	4a1e      	ldreq	r2, [pc, #120]	; (7fdc <nrfx_qspi_uninit+0x98>)
    7f62:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
    7f66:	2201      	movs	r2, #1
    7f68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7f6c:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
    7f6e:	2200      	movs	r2, #0
    7f70:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
    7f78:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
    7f7c:	bb22      	cbnz	r2, 7fc8 <nrfx_qspi_uninit+0x84>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
    7f7e:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
    7f82:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
    7f86:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
    7f88:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
    7f8c:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
    7f90:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
    7f94:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    7f98:	f005 fedb 	bl	dd52 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
    7f9c:	fa5f f089 	uxtb.w	r0, r9
    7fa0:	f005 fed7 	bl	dd52 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
    7fa4:	fa5f f088 	uxtb.w	r0, r8
    7fa8:	f005 fed3 	bl	dd52 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
    7fac:	b2f8      	uxtb	r0, r7
    7fae:	f005 fed0 	bl	dd52 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7fb2:	b2e8      	uxtb	r0, r5
    7fb4:	28ff      	cmp	r0, #255	; 0xff
    7fb6:	b2e4      	uxtb	r4, r4
    7fb8:	d001      	beq.n	7fbe <nrfx_qspi_uninit+0x7a>
        nrf_gpio_cfg_default(pins.io2_pin);
    7fba:	f005 feca 	bl	dd52 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7fbe:	2cff      	cmp	r4, #255	; 0xff
    7fc0:	d002      	beq.n	7fc8 <nrfx_qspi_uninit+0x84>
        nrf_gpio_cfg_default(pins.io3_pin);
    7fc2:	4620      	mov	r0, r4
    7fc4:	f005 fec5 	bl	dd52 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
    7fc8:	2300      	movs	r3, #0
    7fca:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    7fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7fd2:	bf00      	nop
    7fd4:	5002b000 	.word	0x5002b000
    7fd8:	20014164 	.word	0x20014164
    7fdc:	00030100 	.word	0x00030100

00007fe0 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
    7fe0:	078b      	lsls	r3, r1, #30
    7fe2:	d121      	bne.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
    7fe4:	4a12      	ldr	r2, [pc, #72]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7fe6:	6813      	ldr	r3, [r2, #0]
    7fe8:	b11b      	cbz	r3, 7ff2 <nrfx_qspi_erase+0x12>
    7fea:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    7fee:	2b01      	cmp	r3, #1
    7ff0:	d11c      	bne.n	802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
    7ff2:	2304      	movs	r3, #4
    7ff4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
    7ff8:	4b0e      	ldr	r3, [pc, #56]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7ffa:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7ffe:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
    8000:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8004:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8008:	2101      	movs	r1, #1
    800a:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
    800c:	6810      	ldr	r0, [r2, #0]
    800e:	b940      	cbnz	r0, 8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8010:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    8014:	2900      	cmp	r1, #0
    8016:	d0fb      	beq.n	8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
    8018:	2301      	movs	r3, #1
    801a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
    801e:	4806      	ldr	r0, [pc, #24]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    8020:	4770      	bx	lr
    p_reg->INTENSET = mask;
    8022:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
    8026:	e7fa      	b.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
        return NRFX_ERROR_INVALID_ADDR;
    8028:	4804      	ldr	r0, [pc, #16]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    802a:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
    802c:	4804      	ldr	r0, [pc, #16]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
}
    802e:	4770      	bx	lr
    8030:	20014164 	.word	0x20014164
    8034:	5002b000 	.word	0x5002b000
    8038:	0bad0000 	.word	0x0bad0000
    803c:	0bad000a 	.word	0x0bad000a
    8040:	0bad000b 	.word	0x0bad000b

00008044 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
    8044:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8046:	4b17      	ldr	r3, [pc, #92]	; (80a4 <nrfx_qspi_irq_handler+0x60>)
    8048:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    804c:	b1e2      	cbz	r2, 8088 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    804e:	2200      	movs	r2, #0
    switch (m_cb.state)
    8050:	4c15      	ldr	r4, [pc, #84]	; (80a8 <nrfx_qspi_irq_handler+0x64>)
    8052:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8056:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    805a:	2a03      	cmp	r2, #3
    805c:	d015      	beq.n	808a <nrfx_qspi_irq_handler+0x46>
    805e:	2a04      	cmp	r2, #4
    8060:	d015      	beq.n	808e <nrfx_qspi_irq_handler+0x4a>
    8062:	2a02      	cmp	r2, #2
    8064:	d104      	bne.n	8070 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
    8066:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    8068:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
    806c:	f7ff fdae 	bl	7bcc <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
    8070:	68a3      	ldr	r3, [r4, #8]
    8072:	b913      	cbnz	r3, 807a <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
    8074:	2301      	movs	r3, #1
    8076:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
    807a:	e9d4 3100 	ldrd	r3, r1, [r4]
    807e:	2000      	movs	r0, #0
    8080:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
    8082:	2300      	movs	r3, #0
    8084:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
    8088:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    808a:	2302      	movs	r3, #2
    808c:	e7ec      	b.n	8068 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
    808e:	2203      	movs	r2, #3
    8090:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
    8094:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
    8098:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
    809a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    809e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    80a2:	e7e5      	b.n	8070 <nrfx_qspi_irq_handler+0x2c>
    80a4:	5002b000 	.word	0x5002b000
    80a8:	20014164 	.word	0x20014164

000080ac <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    80ac:	4b05      	ldr	r3, [pc, #20]	; (80c4 <ep_state_access+0x18>)
    80ae:	f010 0f80 	tst.w	r0, #128	; 0x80
    80b2:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    80b6:	bf08      	it	eq
    80b8:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    80ba:	f000 000f 	and.w	r0, r0, #15
}
    80be:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    80c2:	4770      	bx	lr
    80c4:	20014340 	.word	0x20014340

000080c8 <ev_usbreset_handler>:
 * @{
 */

static void ev_usbreset_handler(void)
{
    m_bus_suspend = false;
    80c8:	2300      	movs	r3, #0
{
    80ca:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    80cc:	4a06      	ldr	r2, [pc, #24]	; (80e8 <ev_usbreset_handler+0x20>)

    const nrfx_usbd_evt_t evt = {
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    80ce:	a801      	add	r0, sp, #4
    m_bus_suspend = false;
    80d0:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    80d2:	4a06      	ldr	r2, [pc, #24]	; (80ec <ev_usbreset_handler+0x24>)
    80d4:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    80d6:	2301      	movs	r3, #1
    80d8:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    80da:	4b05      	ldr	r3, [pc, #20]	; (80f0 <ev_usbreset_handler+0x28>)
    80dc:	681b      	ldr	r3, [r3, #0]
    80de:	4798      	blx	r3
}
    80e0:	b003      	add	sp, #12
    80e2:	f85d fb04 	ldr.w	pc, [sp], #4
    80e6:	bf00      	nop
    80e8:	20056804 	.word	0x20056804
    80ec:	20056803 	.word	0x20056803
    80f0:	200143d8 	.word	0x200143d8

000080f4 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    80f4:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    80f6:	4b19      	ldr	r3, [pc, #100]	; (815c <ev_usbevent_handler+0x68>)
    80f8:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    80fc:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    8100:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    8102:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8106:	d508      	bpl.n	811a <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    8108:	2201      	movs	r2, #1
    810a:	4b15      	ldr	r3, [pc, #84]	; (8160 <ev_usbevent_handler+0x6c>)
        const nrfx_usbd_evt_t evt = {
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    810c:	a801      	add	r0, sp, #4
        m_bus_suspend = true;
    810e:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    8110:	2302      	movs	r3, #2
    8112:	9301      	str	r3, [sp, #4]
        m_event_handler(&evt);
    8114:	4b13      	ldr	r3, [pc, #76]	; (8164 <ev_usbevent_handler+0x70>)
    8116:	681b      	ldr	r3, [r3, #0]
    8118:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    811a:	05a2      	lsls	r2, r4, #22
    811c:	d508      	bpl.n	8130 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    811e:	2200      	movs	r2, #0
    8120:	4b0f      	ldr	r3, [pc, #60]	; (8160 <ev_usbevent_handler+0x6c>)
        const nrfx_usbd_evt_t evt = {
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    8122:	a801      	add	r0, sp, #4
        m_bus_suspend = false;
    8124:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    8126:	2303      	movs	r3, #3
    8128:	9301      	str	r3, [sp, #4]
        m_event_handler(&evt);
    812a:	4b0e      	ldr	r3, [pc, #56]	; (8164 <ev_usbevent_handler+0x70>)
    812c:	681b      	ldr	r3, [r3, #0]
    812e:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    8130:	0563      	lsls	r3, r4, #21
    8132:	d510      	bpl.n	8156 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    8134:	4b0a      	ldr	r3, [pc, #40]	; (8160 <ev_usbevent_handler+0x6c>)
    8136:	781a      	ldrb	r2, [r3, #0]
    8138:	b16a      	cbz	r2, 8156 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    813a:	2200      	movs	r2, #0
    813c:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    813e:	2201      	movs	r2, #1
    8140:	4b06      	ldr	r3, [pc, #24]	; (815c <ev_usbevent_handler+0x68>)
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    8142:	a801      	add	r0, sp, #4
    8144:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8148:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
            const nrfx_usbd_evt_t evt = {
    814c:	2304      	movs	r3, #4
    814e:	9301      	str	r3, [sp, #4]
            m_event_handler(&evt);
    8150:	4b04      	ldr	r3, [pc, #16]	; (8164 <ev_usbevent_handler+0x70>)
    8152:	681b      	ldr	r3, [r3, #0]
    8154:	4798      	blx	r3
        }
    }
}
    8156:	b002      	add	sp, #8
    8158:	bd10      	pop	{r4, pc}
    815a:	bf00      	nop
    815c:	50036000 	.word	0x50036000
    8160:	20056804 	.word	0x20056804
    8164:	200143d8 	.word	0x200143d8

00008168 <nrfx_usbd_feeder_flash>:
{
    8168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    816a:	684b      	ldr	r3, [r1, #4]
    816c:	4606      	mov	r6, r0
    816e:	429a      	cmp	r2, r3
    8170:	bf28      	it	cs
    8172:	461a      	movcs	r2, r3
    8174:	4615      	mov	r5, r2
    8176:	460c      	mov	r4, r1
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    8178:	4f08      	ldr	r7, [pc, #32]	; (819c <nrfx_usbd_feeder_flash+0x34>)
    817a:	6809      	ldr	r1, [r1, #0]
    817c:	4638      	mov	r0, r7
    817e:	f003 fd01 	bl	bb84 <memcpy>
    p_next->size = tx_size;
    8182:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    8186:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    8188:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    818a:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    818c:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    818e:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    8190:	6023      	str	r3, [r4, #0]
}
    8192:	3800      	subs	r0, #0
    8194:	bf18      	it	ne
    8196:	2001      	movne	r0, #1
    8198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    819a:	bf00      	nop
    819c:	20014198 	.word	0x20014198

000081a0 <nrfx_usbd_feeder_flash_zlp>:
{
    81a0:	b570      	push	{r4, r5, r6, lr}
    81a2:	684b      	ldr	r3, [r1, #4]
    81a4:	4606      	mov	r6, r0
    81a6:	429a      	cmp	r2, r3
    81a8:	bf28      	it	cs
    81aa:	461a      	movcs	r2, r3
    81ac:	460d      	mov	r5, r1
    81ae:	4614      	mov	r4, r2
    if (tx_size != 0)
    81b0:	b18a      	cbz	r2, 81d6 <nrfx_usbd_feeder_flash_zlp+0x36>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    81b2:	6809      	ldr	r1, [r1, #0]
    81b4:	4809      	ldr	r0, [pc, #36]	; (81dc <nrfx_usbd_feeder_flash_zlp+0x3c>)
    81b6:	f003 fce5 	bl	bb84 <memcpy>
        p_next->p_data.tx = p_buffer;
    81ba:	4b08      	ldr	r3, [pc, #32]	; (81dc <nrfx_usbd_feeder_flash_zlp+0x3c>)
    p_next->size = tx_size;
    81bc:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    81c0:	686b      	ldr	r3, [r5, #4]
}
    81c2:	1e20      	subs	r0, r4, #0
    p_transfer->size -= tx_size;
    81c4:	eba3 0304 	sub.w	r3, r3, r4
    81c8:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    81ca:	682b      	ldr	r3, [r5, #0]
}
    81cc:	bf18      	it	ne
    81ce:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    81d0:	4423      	add	r3, r4
    81d2:	602b      	str	r3, [r5, #0]
}
    81d4:	bd70      	pop	{r4, r5, r6, pc}
    81d6:	4613      	mov	r3, r2
    81d8:	e7f0      	b.n	81bc <nrfx_usbd_feeder_flash_zlp+0x1c>
    81da:	bf00      	nop
    81dc:	20014198 	.word	0x20014198

000081e0 <ev_sof_handler>:
    nrfx_usbd_evt_t evt =  {
    81e0:	2300      	movs	r3, #0
{
    81e2:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    81e4:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    81e8:	4b0b      	ldr	r3, [pc, #44]	; (8218 <ev_sof_handler+0x38>)
    m_event_handler(&evt);
    81ea:	a801      	add	r0, sp, #4
    81ec:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    81f0:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    81f4:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    81f8:	4a08      	ldr	r2, [pc, #32]	; (821c <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    81fa:	2b00      	cmp	r3, #0
    81fc:	bf14      	ite	ne
    81fe:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    8202:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    8206:	6813      	ldr	r3, [r2, #0]
    8208:	430b      	orrs	r3, r1
    820a:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    820c:	4b04      	ldr	r3, [pc, #16]	; (8220 <ev_sof_handler+0x40>)
    820e:	681b      	ldr	r3, [r3, #0]
    8210:	4798      	blx	r3
}
    8212:	b003      	add	sp, #12
    8214:	f85d fb04 	ldr.w	pc, [sp], #4
    8218:	50036000 	.word	0x50036000
    821c:	200143d4 	.word	0x200143d4
    8220:	200143d8 	.word	0x200143d8

00008224 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8224:	4b04      	ldr	r3, [pc, #16]	; (8238 <atomic_and.constprop.0.isra.0+0x14>)
    8226:	e8d3 1fef 	ldaex	r1, [r3]
    822a:	4001      	ands	r1, r0
    822c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    8230:	2a00      	cmp	r2, #0
    8232:	d1f8      	bne.n	8226 <atomic_and.constprop.0.isra.0+0x2>
}
    8234:	4770      	bx	lr
    8236:	bf00      	nop
    8238:	200143d0 	.word	0x200143d0

0000823c <nrf_usbd_epin_dma_handler>:
    m_dma_pending = false;
    823c:	2200      	movs	r2, #0
{
    823e:	b508      	push	{r3, lr}
    m_dma_pending = false;
    8240:	4b0b      	ldr	r3, [pc, #44]	; (8270 <nrf_usbd_epin_dma_handler+0x34>)
{
    8242:	4601      	mov	r1, r0
    m_dma_pending = false;
    8244:	701a      	strb	r2, [r3, #0]
    usbd_ep_state_t * p_state = ep_state_access(ep);
    8246:	f7ff ff31 	bl	80ac <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    824a:	7b83      	ldrb	r3, [r0, #14]
    824c:	2b03      	cmp	r3, #3
    824e:	d10a      	bne.n	8266 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8250:	4608      	mov	r0, r1
    8252:	f005 fdca 	bl	ddea <ep2bit>
    8256:	2301      	movs	r3, #1
    8258:	fa03 f000 	lsl.w	r0, r3, r0
    825c:	43c0      	mvns	r0, r0
}
    825e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8262:	f7ff bfdf 	b.w	8224 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    8266:	6803      	ldr	r3, [r0, #0]
    8268:	2b00      	cmp	r3, #0
    826a:	d0f1      	beq.n	8250 <nrf_usbd_epin_dma_handler+0x14>
}
    826c:	bd08      	pop	{r3, pc}
    826e:	bf00      	nop
    8270:	20056802 	.word	0x20056802

00008274 <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    8274:	2200      	movs	r2, #0
    8276:	4b08      	ldr	r3, [pc, #32]	; (8298 <nrf_usbd_ep0in_dma_handler+0x24>)
    8278:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    827a:	4b08      	ldr	r3, [pc, #32]	; (829c <nrf_usbd_ep0in_dma_handler+0x28>)
    827c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    8280:	2a03      	cmp	r2, #3
    8282:	d103      	bne.n	828c <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8284:	f06f 0001 	mvn.w	r0, #1
    8288:	f7ff bfcc 	b.w	8224 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8290:	2b00      	cmp	r3, #0
    8292:	d0f7      	beq.n	8284 <nrf_usbd_ep0in_dma_handler+0x10>
}
    8294:	4770      	bx	lr
    8296:	bf00      	nop
    8298:	20056802 	.word	0x20056802
    829c:	200142b0 	.word	0x200142b0

000082a0 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    82a0:	2201      	movs	r2, #1
{
    82a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    82a4:	fa02 f501 	lsl.w	r5, r2, r1
    82a8:	491c      	ldr	r1, [pc, #112]	; (831c <usbd_ep_data_handler+0x7c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    82aa:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    82ae:	680b      	ldr	r3, [r1, #0]
{
    82b0:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    82b2:	ea43 0305 	orr.w	r3, r3, r5
    82b6:	4e1a      	ldr	r6, [pc, #104]	; (8320 <usbd_ep_data_handler+0x80>)
    82b8:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    82ba:	d024      	beq.n	8306 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    82bc:	4b19      	ldr	r3, [pc, #100]	; (8324 <usbd_ep_data_handler+0x84>)
    82be:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    82c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    82c6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    82ca:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    82ce:	681a      	ldr	r2, [r3, #0]
    if (ret)
    82d0:	b132      	cbz	r2, 82e0 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    82d2:	2200      	movs	r2, #0
            if (ep != NRFX_USBD_EPIN0)
    82d4:	2880      	cmp	r0, #128	; 0x80
    82d6:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    82d8:	681b      	ldr	r3, [r3, #0]
    82da:	d011      	beq.n	8300 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    82dc:	f7ff ffae 	bl	823c <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    82e0:	6833      	ldr	r3, [r6, #0]
    82e2:	402b      	ands	r3, r5
    82e4:	d10a      	bne.n	82fc <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    82e6:	2206      	movs	r2, #6
    82e8:	f88d 4006 	strb.w	r4, [sp, #6]
    82ec:	f88d 2004 	strb.w	r2, [sp, #4]
    82f0:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    82f4:	4b0c      	ldr	r3, [pc, #48]	; (8328 <usbd_ep_data_handler+0x88>)
    82f6:	a801      	add	r0, sp, #4
    82f8:	681b      	ldr	r3, [r3, #0]
    82fa:	4798      	blx	r3
}
    82fc:	b002      	add	sp, #8
    82fe:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    8300:	f7ff ffb8 	bl	8274 <nrf_usbd_ep0in_dma_handler>
    8304:	e7ec      	b.n	82e0 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    8306:	6833      	ldr	r3, [r6, #0]
    8308:	421d      	tst	r5, r3
    830a:	d1f7      	bne.n	82fc <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    830c:	2306      	movs	r3, #6
    830e:	f88d 0006 	strb.w	r0, [sp, #6]
    8312:	f88d 3004 	strb.w	r3, [sp, #4]
    8316:	f88d 2007 	strb.w	r2, [sp, #7]
    831a:	e7eb      	b.n	82f4 <usbd_ep_data_handler+0x54>
    831c:	200143d4 	.word	0x200143d4
    8320:	200143d0 	.word	0x200143d0
    8324:	0000ef40 	.word	0x0000ef40
    8328:	200143d8 	.word	0x200143d8

0000832c <ev_setup_data_handler>:
{
    832c:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    832e:	4b05      	ldr	r3, [pc, #20]	; (8344 <ev_setup_data_handler+0x18>)
    8330:	781a      	ldrb	r2, [r3, #0]
    8332:	4610      	mov	r0, r2
    8334:	f005 fd59 	bl	ddea <ep2bit>
}
    8338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    833c:	4601      	mov	r1, r0
    833e:	4610      	mov	r0, r2
    8340:	f7ff bfae 	b.w	82a0 <usbd_ep_data_handler>
    8344:	20056803 	.word	0x20056803

00008348 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    8348:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    834a:	2200      	movs	r2, #0
    834c:	4b0d      	ldr	r3, [pc, #52]	; (8384 <ev_dma_epout8_handler+0x3c>)
    834e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8350:	4b0d      	ldr	r3, [pc, #52]	; (8388 <ev_dma_epout8_handler+0x40>)
    8352:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    8356:	2a03      	cmp	r2, #3
    8358:	d010      	beq.n	837c <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    835a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    835e:	b96b      	cbnz	r3, 837c <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8360:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    8364:	f7ff ff5e 	bl	8224 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8368:	2306      	movs	r3, #6
    836a:	f88d 3004 	strb.w	r3, [sp, #4]
    836e:	2308      	movs	r3, #8
    8370:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    8374:	4b05      	ldr	r3, [pc, #20]	; (838c <ev_dma_epout8_handler+0x44>)
    8376:	a801      	add	r0, sp, #4
    8378:	681b      	ldr	r3, [r3, #0]
    837a:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    837c:	b003      	add	sp, #12
    837e:	f85d fb04 	ldr.w	pc, [sp], #4
    8382:	bf00      	nop
    8384:	20056802 	.word	0x20056802
    8388:	200142b0 	.word	0x200142b0
    838c:	200143d8 	.word	0x200143d8

00008390 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8390:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    8392:	2200      	movs	r2, #0
    8394:	4b10      	ldr	r3, [pc, #64]	; (83d8 <ev_dma_epin8_handler+0x48>)
    8396:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8398:	4b10      	ldr	r3, [pc, #64]	; (83dc <ev_dma_epin8_handler+0x4c>)
    839a:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    839e:	2a03      	cmp	r2, #3
    83a0:	d106      	bne.n	83b0 <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    83a2:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    83a6:	b003      	add	sp, #12
    83a8:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    83ac:	f7ff bf3a 	b.w	8224 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    83b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    83b4:	b96b      	cbnz	r3, 83d2 <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    83b6:	f46f 7080 	mvn.w	r0, #256	; 0x100
    83ba:	f7ff ff33 	bl	8224 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    83be:	2306      	movs	r3, #6
    83c0:	f88d 3004 	strb.w	r3, [sp, #4]
    83c4:	2388      	movs	r3, #136	; 0x88
    83c6:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    83ca:	4b05      	ldr	r3, [pc, #20]	; (83e0 <ev_dma_epin8_handler+0x50>)
    83cc:	a801      	add	r0, sp, #4
    83ce:	681b      	ldr	r3, [r3, #0]
    83d0:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    83d2:	b003      	add	sp, #12
    83d4:	f85d fb04 	ldr.w	pc, [sp], #4
    83d8:	20056802 	.word	0x20056802
    83dc:	200142b0 	.word	0x200142b0
    83e0:	200143d8 	.word	0x200143d8

000083e4 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    83e4:	2300      	movs	r3, #0
    83e6:	4a02      	ldr	r2, [pc, #8]	; (83f0 <nrfx_usbd_uninit+0xc>)
    83e8:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    83ea:	4a02      	ldr	r2, [pc, #8]	; (83f4 <nrfx_usbd_uninit+0x10>)
    83ec:	7013      	strb	r3, [r2, #0]
    return;
}
    83ee:	4770      	bx	lr
    83f0:	200143d8 	.word	0x200143d8
    83f4:	20056805 	.word	0x20056805

000083f8 <nrfx_usbd_enable>:
    p_reg->EVENTCAUSE = flags;
    83f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    83fc:	4b13      	ldr	r3, [pc, #76]	; (844c <nrfx_usbd_enable+0x54>)
    83fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8402:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    8406:	2201      	movs	r2, #1
    8408:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    840c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    8410:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    8414:	0512      	lsls	r2, r2, #20
    8416:	d5fb      	bpl.n	8410 <nrfx_usbd_enable+0x18>
    p_reg->EVENTCAUSE = flags;
    8418:	f44f 6200 	mov.w	r2, #2048	; 0x800
    841c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8420:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    8424:	2280      	movs	r2, #128	; 0x80
    8426:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    842a:	2200      	movs	r2, #0
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    842c:	f240 11ff 	movw	r1, #511	; 0x1ff
    8430:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    8434:	4b06      	ldr	r3, [pc, #24]	; (8450 <nrfx_usbd_enable+0x58>)
    8436:	6019      	str	r1, [r3, #0]
    m_ep_dma_waiting = 0;
    8438:	4b06      	ldr	r3, [pc, #24]	; (8454 <nrfx_usbd_enable+0x5c>)
    843a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    843c:	4b06      	ldr	r3, [pc, #24]	; (8458 <nrfx_usbd_enable+0x60>)
    843e:	701a      	strb	r2, [r3, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8440:	4b06      	ldr	r3, [pc, #24]	; (845c <nrfx_usbd_enable+0x64>)
    8442:	701a      	strb	r2, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    8444:	2202      	movs	r2, #2
    8446:	4b06      	ldr	r3, [pc, #24]	; (8460 <nrfx_usbd_enable+0x68>)
    8448:	701a      	strb	r2, [r3, #0]
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_end();
    }
}
    844a:	4770      	bx	lr
    844c:	50036000 	.word	0x50036000
    8450:	200143d4 	.word	0x200143d4
    8454:	200143d0 	.word	0x200143d0
    8458:	20056802 	.word	0x20056802
    845c:	20056803 	.word	0x20056803
    8460:	20056805 	.word	0x20056805

00008464 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    8464:	2200      	movs	r2, #0
    8466:	4b0a      	ldr	r3, [pc, #40]	; (8490 <nrfx_usbd_start+0x2c>)
{
    8468:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    846a:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    846c:	4a09      	ldr	r2, [pc, #36]	; (8494 <nrfx_usbd_start+0x30>)
    846e:	4b0a      	ldr	r3, [pc, #40]	; (8498 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    8470:	4c0a      	ldr	r4, [pc, #40]	; (849c <nrfx_usbd_start+0x38>)
    8472:	2800      	cmp	r0, #0
    8474:	bf08      	it	eq
    8476:	4613      	moveq	r3, r2
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    8478:	2036      	movs	r0, #54	; 0x36
    847a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    847e:	f7fb fc47 	bl	3d10 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    8482:	2301      	movs	r3, #1
    8484:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    8488:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    848c:	bd10      	pop	{r4, pc}
    848e:	bf00      	nop
    8490:	20056804 	.word	0x20056804
    8494:	01c01407 	.word	0x01c01407
    8498:	01e01407 	.word	0x01e01407
    849c:	50036000 	.word	0x50036000

000084a0 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    84a0:	4b03      	ldr	r3, [pc, #12]	; (84b0 <nrfx_usbd_is_enabled+0x10>)
    84a2:	7818      	ldrb	r0, [r3, #0]
}
    84a4:	2801      	cmp	r0, #1
    84a6:	bf94      	ite	ls
    84a8:	2000      	movls	r0, #0
    84aa:	2001      	movhi	r0, #1
    84ac:	4770      	bx	lr
    84ae:	bf00      	nop
    84b0:	20056805 	.word	0x20056805

000084b4 <nrfx_usbd_init>:
{
    84b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    84b6:	4b1c      	ldr	r3, [pc, #112]	; (8528 <nrfx_usbd_init+0x74>)
    84b8:	781c      	ldrb	r4, [r3, #0]
    84ba:	bb94      	cbnz	r4, 8522 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    84bc:	4a1b      	ldr	r2, [pc, #108]	; (852c <nrfx_usbd_init+0x78>)
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    84be:	f240 17ff 	movw	r7, #511	; 0x1ff
    m_event_handler = event_handler;
    84c2:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    84c4:	2201      	movs	r2, #1
        p_state->status = NRFX_USBD_EP_OK;
    84c6:	4626      	mov	r6, r4
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    84c8:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    84ca:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    84ce:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    84d2:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    84d4:	bf14      	ite	ne
    84d6:	4639      	movne	r1, r7
    84d8:	2140      	moveq	r1, #64	; 0x40
    84da:	4628      	mov	r0, r5
    84dc:	f005 fca5 	bl	de2a <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    84e0:	4628      	mov	r0, r5
    84e2:	f7ff fde3 	bl	80ac <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    84e6:	3401      	adds	r4, #1
    84e8:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    84ea:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    84ec:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    84ee:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    84f0:	d1eb      	bne.n	84ca <nrfx_usbd_init+0x16>
    84f2:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    84f4:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    84f8:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    84fa:	f014 0f08 	tst.w	r4, #8
    84fe:	b2e6      	uxtb	r6, r4
    8500:	bf14      	ite	ne
    8502:	4639      	movne	r1, r7
    8504:	2140      	moveq	r1, #64	; 0x40
    8506:	4630      	mov	r0, r6
    8508:	f005 fc8f 	bl	de2a <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    850c:	4630      	mov	r0, r6
    850e:	f7ff fdcd 	bl	80ac <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    8512:	3401      	adds	r4, #1
    8514:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    8516:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    8518:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    851a:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    851c:	d1ed      	bne.n	84fa <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    851e:	4804      	ldr	r0, [pc, #16]	; (8530 <nrfx_usbd_init+0x7c>)
}
    8520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    8522:	4804      	ldr	r0, [pc, #16]	; (8534 <nrfx_usbd_init+0x80>)
    8524:	e7fc      	b.n	8520 <nrfx_usbd_init+0x6c>
    8526:	bf00      	nop
    8528:	20056805 	.word	0x20056805
    852c:	200143d8 	.word	0x200143d8
    8530:	0bad0000 	.word	0x0bad0000
    8534:	0bad0005 	.word	0x0bad0005

00008538 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    8538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    853c:	4604      	mov	r4, r0
	__asm__ volatile(
    853e:	f04f 0320 	mov.w	r3, #32
    8542:	f3ef 8611 	mrs	r6, BASEPRI
    8546:	f383 8812 	msr	BASEPRI_MAX, r3
    854a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    854e:	f010 090f 	ands.w	r9, r0, #15
    8552:	d103      	bne.n	855c <nrfx_usbd_ep_transfer+0x24>
    8554:	4b28      	ldr	r3, [pc, #160]	; (85f8 <nrfx_usbd_ep_transfer+0xc0>)
    8556:	781b      	ldrb	r3, [r3, #0]
    8558:	4283      	cmp	r3, r0
    855a:	d148      	bne.n	85ee <nrfx_usbd_ep_transfer+0xb6>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    855c:	4b27      	ldr	r3, [pc, #156]	; (85fc <nrfx_usbd_ep_transfer+0xc4>)
    855e:	4f28      	ldr	r7, [pc, #160]	; (8600 <nrfx_usbd_ep_transfer+0xc8>)
    8560:	681a      	ldr	r2, [r3, #0]
    8562:	683b      	ldr	r3, [r7, #0]
    8564:	43d2      	mvns	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    8566:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8568:	b292      	uxth	r2, r2
    856a:	431a      	orrs	r2, r3
    856c:	f04f 0801 	mov.w	r8, #1
    const uint8_t ep_bitpos = ep2bit(ep);
    8570:	f005 fc3b 	bl	ddea <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8574:	fa08 f800 	lsl.w	r8, r8, r0
    8578:	ea12 0f08 	tst.w	r2, r8
    857c:	d139      	bne.n	85f2 <nrfx_usbd_ep_transfer+0xba>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    857e:	4620      	mov	r0, r4
    8580:	f7ff fd94 	bl	80ac <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8584:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    8586:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8588:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    858a:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    858e:	d52a      	bpl.n	85e6 <nrfx_usbd_ep_transfer+0xae>
    8590:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8592:	6888      	ldr	r0, [r1, #8]
    8594:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8598:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    859c:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    85a0:	d11e      	bne.n	85e0 <nrfx_usbd_ep_transfer+0xa8>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    85a2:	4a18      	ldr	r2, [pc, #96]	; (8604 <nrfx_usbd_ep_transfer+0xcc>)
    85a4:	4c18      	ldr	r4, [pc, #96]	; (8608 <nrfx_usbd_ep_transfer+0xd0>)
    85a6:	2800      	cmp	r0, #0
    85a8:	bf08      	it	eq
    85aa:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    85ac:	4817      	ldr	r0, [pc, #92]	; (860c <nrfx_usbd_ep_transfer+0xd4>)
    85ae:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    85b0:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    85b2:	c907      	ldmia	r1, {r0, r1, r2}
    85b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    85b8:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    85ba:	2300      	movs	r3, #0
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    85bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    85c0:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    85c2:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    85c4:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    85c6:	4812      	ldr	r0, [pc, #72]	; (8610 <nrfx_usbd_ep_transfer+0xd8>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    85c8:	ea43 0308 	orr.w	r3, r3, r8
    85cc:	603b      	str	r3, [r7, #0]
    85ce:	4b11      	ldr	r3, [pc, #68]	; (8614 <nrfx_usbd_ep_transfer+0xdc>)
    85d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    85d4:	f386 8811 	msr	BASEPRI, r6
    85d8:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    85dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    85e0:	4a0d      	ldr	r2, [pc, #52]	; (8618 <nrfx_usbd_ep_transfer+0xe0>)
    85e2:	4c0e      	ldr	r4, [pc, #56]	; (861c <nrfx_usbd_ep_transfer+0xe4>)
    85e4:	e7df      	b.n	85a6 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    85e6:	4a0e      	ldr	r2, [pc, #56]	; (8620 <nrfx_usbd_ep_transfer+0xe8>)
    85e8:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    85ea:	4a0e      	ldr	r2, [pc, #56]	; (8624 <nrfx_usbd_ep_transfer+0xec>)
    85ec:	e7e0      	b.n	85b0 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    85ee:	480e      	ldr	r0, [pc, #56]	; (8628 <nrfx_usbd_ep_transfer+0xf0>)
    85f0:	e7f0      	b.n	85d4 <nrfx_usbd_ep_transfer+0x9c>
        ret = NRFX_ERROR_BUSY;
    85f2:	480e      	ldr	r0, [pc, #56]	; (862c <nrfx_usbd_ep_transfer+0xf4>)
    85f4:	e7ee      	b.n	85d4 <nrfx_usbd_ep_transfer+0x9c>
    85f6:	bf00      	nop
    85f8:	20056803 	.word	0x20056803
    85fc:	200143d4 	.word	0x200143d4
    8600:	200143d0 	.word	0x200143d0
    8604:	0000ddc1 	.word	0x0000ddc1
    8608:	0000dd9f 	.word	0x0000dd9f
    860c:	20014244 	.word	0x20014244
    8610:	0bad0000 	.word	0x0bad0000
    8614:	e000e100 	.word	0xe000e100
    8618:	000081a1 	.word	0x000081a1
    861c:	00008169 	.word	0x00008169
    8620:	200141d8 	.word	0x200141d8
    8624:	0000dd6d 	.word	0x0000dd6d
    8628:	0bad000a 	.word	0x0bad000a
    862c:	0bad000b 	.word	0x0bad000b

00008630 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8630:	f010 0f08 	tst.w	r0, #8
    8634:	4b07      	ldr	r3, [pc, #28]	; (8654 <nrfx_usbd_epout_size_get+0x24>)
    8636:	d006      	beq.n	8646 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    8638:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    863c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8640:	bf18      	it	ne
    8642:	2000      	movne	r0, #0
    8644:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    8646:	f000 000f 	and.w	r0, r0, #15
    864a:	f500 7094 	add.w	r0, r0, #296	; 0x128
    864e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    8652:	4770      	bx	lr
    8654:	50036000 	.word	0x50036000

00008658 <usbd_dmareq_process>:
{
    8658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    865c:	4e54      	ldr	r6, [pc, #336]	; (87b0 <usbd_dmareq_process+0x158>)
{
    865e:	b085      	sub	sp, #20
    if (!m_dma_pending)
    8660:	7833      	ldrb	r3, [r6, #0]
    8662:	2b00      	cmp	r3, #0
    8664:	d169      	bne.n	873a <usbd_dmareq_process+0xe2>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    8666:	f8df 814c 	ldr.w	r8, [pc, #332]	; 87b4 <usbd_dmareq_process+0x15c>
    866a:	4d53      	ldr	r5, [pc, #332]	; (87b8 <usbd_dmareq_process+0x160>)
    866c:	f8d8 4000 	ldr.w	r4, [r8]
    8670:	682b      	ldr	r3, [r5, #0]
    8672:	401c      	ands	r4, r3
    8674:	d061      	beq.n	873a <usbd_dmareq_process+0xe2>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    8676:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    867a:	bf14      	ite	ne
    867c:	fa93 f4a3 	rbitne	r4, r3
    8680:	fa94 f4a4 	rbiteq	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8684:	f04f 0901 	mov.w	r9, #1
    return NRF_CTZ(req);
    8688:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    868c:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8690:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8692:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8696:	d953      	bls.n	8740 <usbd_dmareq_process+0xe8>
    8698:	3c10      	subs	r4, #16
    869a:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    869c:	4620      	mov	r0, r4
    869e:	f7ff fd05 	bl	80ac <ep_state_access>
    86a2:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    86a4:	4620      	mov	r0, r4
    86a6:	f7ff ffc3 	bl	8630 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    86aa:	f8da 7000 	ldr.w	r7, [sl]
    86ae:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    86b0:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    86b2:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    86b6:	f8da 1004 	ldr.w	r1, [sl, #4]
    86ba:	a802      	add	r0, sp, #8
    86bc:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    86be:	9b02      	ldr	r3, [sp, #8]
    86c0:	2b00      	cmp	r3, #0
    86c2:	d149      	bne.n	8758 <usbd_dmareq_process+0x100>
                if (!continue_transfer)
    86c4:	b908      	cbnz	r0, 86ca <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    86c6:	f8ca 0000 	str.w	r0, [sl]
    m_dma_pending = true;
    86ca:	2301      	movs	r3, #1
    86cc:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    86ce:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    86d0:	9a03      	ldr	r2, [sp, #12]
            m_ep_ready &= ~(1U << pos);
    86d2:	ea03 0309 	and.w	r3, r3, r9
    86d6:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    86d8:	f8da 3008 	ldr.w	r3, [sl, #8]
            if (NRF_USBD_EPIN_CHECK(ep))
    86dc:	b261      	sxtb	r1, r4
            p_state->transfer_cnt += transfer.size;
    86de:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    86e0:	2900      	cmp	r1, #0
    86e2:	f8ca 3008 	str.w	r3, [sl, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    86e6:	f004 0508 	and.w	r5, r4, #8
    86ea:	9802      	ldr	r0, [sp, #8]
    86ec:	4b33      	ldr	r3, [pc, #204]	; (87bc <usbd_dmareq_process+0x164>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    86ee:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    86f2:	da4e      	bge.n	8792 <usbd_dmareq_process+0x13a>
        if (NRF_USBD_EPISO_CHECK(ep))
    86f4:	2d00      	cmp	r5, #0
    86f6:	d044      	beq.n	8782 <usbd_dmareq_process+0x12a>
            p_reg->ISOIN.PTR    = ptr;
    86f8:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    86fc:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    8700:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8702:	2201      	movs	r2, #1
    8704:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8708:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    870c:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8710:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8712:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    8714:	4a2a      	ldr	r2, [pc, #168]	; (87c0 <usbd_dmareq_process+0x168>)
    8716:	4b2b      	ldr	r3, [pc, #172]	; (87c4 <usbd_dmareq_process+0x16c>)
    8718:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    871c:	bf38      	it	cc
    871e:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8720:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8724:	4925      	ldr	r1, [pc, #148]	; (87bc <usbd_dmareq_process+0x164>)
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8726:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    872a:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    872e:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    8730:	b91a      	cbnz	r2, 873a <usbd_dmareq_process+0xe2>
    8732:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    8736:	2a00      	cmp	r2, #0
    8738:	d0f9      	beq.n	872e <usbd_dmareq_process+0xd6>
}
    873a:	b005      	add	sp, #20
    873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8740:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8744:	4620      	mov	r0, r4
    8746:	f7ff fcb1 	bl	80ac <ep_state_access>
    874a:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    874c:	6803      	ldr	r3, [r0, #0]
    874e:	8982      	ldrh	r2, [r0, #12]
    8750:	6841      	ldr	r1, [r0, #4]
    8752:	a802      	add	r0, sp, #8
    8754:	4798      	blx	r3
    8756:	e7b5      	b.n	86c4 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    8758:	9b03      	ldr	r3, [sp, #12]
    875a:	459b      	cmp	fp, r3
    875c:	d9b2      	bls.n	86c4 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    875e:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8760:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8762:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8766:	f7ff fd5d 	bl	8224 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    876a:	2306      	movs	r3, #6
    876c:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    8770:	4b15      	ldr	r3, [pc, #84]	; (87c8 <usbd_dmareq_process+0x170>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8772:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    8776:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8778:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    877c:	a801      	add	r0, sp, #4
    877e:	4798      	blx	r3
                    continue;
    8780:	e774      	b.n	866c <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    8782:	2514      	movs	r5, #20
    8784:	fb05 3304 	mla	r3, r5, r4, r3
    8788:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    878c:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    8790:	e7b6      	b.n	8700 <usbd_dmareq_process+0xa8>
        if (NRF_USBD_EPISO_CHECK(ep))
    8792:	b12d      	cbz	r5, 87a0 <usbd_dmareq_process+0x148>
            p_reg->ISOOUT.PTR    = ptr;
    8794:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    8798:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    879c:	2328      	movs	r3, #40	; 0x28
    879e:	e7b0      	b.n	8702 <usbd_dmareq_process+0xaa>
            p_reg->EPOUT[epnr].PTR    = ptr;
    87a0:	2514      	movs	r5, #20
    87a2:	fb05 3304 	mla	r3, r5, r4, r3
    87a6:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    87aa:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    87ae:	e7f5      	b.n	879c <usbd_dmareq_process+0x144>
    87b0:	20056802 	.word	0x20056802
    87b4:	200143d0 	.word	0x200143d0
    87b8:	200143d4 	.word	0x200143d4
    87bc:	50036000 	.word	0x50036000
    87c0:	0000ef2e 	.word	0x0000ef2e
    87c4:	0000ef40 	.word	0x0000ef40
    87c8:	200143d8 	.word	0x200143d8

000087cc <ev_epdata_handler>:
{
    87cc:	b538      	push	{r3, r4, r5, lr}
        dataepstatus &= ~(1UL << bitpos);
    87ce:	2501      	movs	r5, #1
    return p_reg->EPDATASTATUS;
    87d0:	4b0e      	ldr	r3, [pc, #56]	; (880c <ev_epdata_handler+0x40>)
    87d2:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    87d6:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    while (dataepstatus)
    87da:	b91c      	cbnz	r4, 87e4 <ev_epdata_handler+0x18>
}
    87dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    87e0:	f7ff bf3a 	b.w	8658 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    87e4:	fa94 f3a4 	rbit	r3, r4
    87e8:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    87ec:	2b0f      	cmp	r3, #15
    87ee:	bfc8      	it	gt
    87f0:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    87f4:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    87f6:	bfd4      	ite	le
    87f8:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    87fc:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    87fe:	fa05 f303 	lsl.w	r3, r5, r3
    8802:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    8806:	f7ff fd4b 	bl	82a0 <usbd_ep_data_handler>
    880a:	e7e6      	b.n	87da <ev_epdata_handler+0xe>
    880c:	50036000 	.word	0x50036000

00008810 <nrf_usbd_epout_dma_handler>:
{
    8810:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    8812:	2200      	movs	r2, #0
    8814:	4b16      	ldr	r3, [pc, #88]	; (8870 <nrf_usbd_epout_dma_handler+0x60>)
{
    8816:	4604      	mov	r4, r0
    m_dma_pending = false;
    8818:	701a      	strb	r2, [r3, #0]
    usbd_ep_state_t * p_state = ep_state_access(ep);
    881a:	f7ff fc47 	bl	80ac <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    881e:	7b83      	ldrb	r3, [r0, #14]
    8820:	2b03      	cmp	r3, #3
    8822:	d10d      	bne.n	8840 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8824:	4620      	mov	r0, r4
    8826:	f005 fae0 	bl	ddea <ep2bit>
    882a:	2301      	movs	r3, #1
    882c:	fa03 f000 	lsl.w	r0, r3, r0
    8830:	43c0      	mvns	r0, r0
    8832:	f7ff fcf7 	bl	8224 <atomic_and.constprop.0.isra.0>
}
    8836:	b003      	add	sp, #12
    8838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    883c:	f7ff bf0c 	b.w	8658 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    8840:	6805      	ldr	r5, [r0, #0]
    8842:	2d00      	cmp	r5, #0
    8844:	d1f7      	bne.n	8836 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8846:	4620      	mov	r0, r4
    8848:	f005 facf 	bl	ddea <ep2bit>
    884c:	2301      	movs	r3, #1
    884e:	fa03 f000 	lsl.w	r0, r3, r0
    8852:	43c0      	mvns	r0, r0
    8854:	f7ff fce6 	bl	8224 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8858:	2306      	movs	r3, #6
    885a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    885e:	4b05      	ldr	r3, [pc, #20]	; (8874 <nrf_usbd_epout_dma_handler+0x64>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8860:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    8864:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8866:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    886a:	a801      	add	r0, sp, #4
    886c:	4798      	blx	r3
    886e:	e7e2      	b.n	8836 <nrf_usbd_epout_dma_handler+0x26>
    8870:	20056802 	.word	0x20056802
    8874:	200143d8 	.word	0x200143d8

00008878 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    8878:	4b02      	ldr	r3, [pc, #8]	; (8884 <nrfx_usbd_ep_stall+0xc>)
    887a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    887e:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    8882:	4770      	bx	lr
    8884:	50036000 	.word	0x50036000

00008888 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8888:	0702      	lsls	r2, r0, #28
    888a:	d413      	bmi.n	88b4 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    888c:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8890:	f010 0f80 	tst.w	r0, #128	; 0x80
    8894:	4a08      	ldr	r2, [pc, #32]	; (88b8 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    8896:	bf0b      	itete	eq
    8898:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    889c:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    88a0:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    88a4:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    88a8:	bf08      	it	eq
    88aa:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    88ac:	1e43      	subs	r3, r0, #1
    88ae:	4258      	negs	r0, r3
    88b0:	4158      	adcs	r0, r3
    88b2:	4770      	bx	lr
        return false;
    88b4:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    88b6:	4770      	bx	lr
    88b8:	50036000 	.word	0x50036000

000088bc <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    88bc:	4b04      	ldr	r3, [pc, #16]	; (88d0 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    88be:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    88c2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    88c6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    88ca:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    88ce:	4770      	bx	lr
    88d0:	50036000 	.word	0x50036000

000088d4 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    88d4:	b510      	push	{r4, lr}
    88d6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    88d8:	2208      	movs	r2, #8
    88da:	2100      	movs	r1, #0
    88dc:	f003 f95d 	bl	bb9a <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    88e0:	4b0e      	ldr	r3, [pc, #56]	; (891c <nrfx_usbd_setup_get+0x48>)
    88e2:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    88e6:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    88e8:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    88ec:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    88ee:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    88f2:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    88f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    88fa:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    88fc:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    8900:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    8904:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    8908:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    890a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    890e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    8912:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    8916:	80e3      	strh	r3, [r4, #6]
}
    8918:	bd10      	pop	{r4, pc}
    891a:	bf00      	nop
    891c:	50036000 	.word	0x50036000

00008920 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8920:	2201      	movs	r2, #1
    8922:	4b02      	ldr	r3, [pc, #8]	; (892c <nrfx_usbd_setup_data_clear+0xc>)
    8924:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    8928:	4770      	bx	lr
    892a:	bf00      	nop
    892c:	50036000 	.word	0x50036000

00008930 <ev_dma_epout0_handler>:
    m_dma_pending = false;
    8930:	2200      	movs	r2, #0
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8932:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    8934:	4b11      	ldr	r3, [pc, #68]	; (897c <ev_dma_epout0_handler+0x4c>)
    8936:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8938:	4b11      	ldr	r3, [pc, #68]	; (8980 <ev_dma_epout0_handler+0x50>)
    893a:	7b9a      	ldrb	r2, [r3, #14]
    893c:	2a03      	cmp	r2, #3
    893e:	d106      	bne.n	894e <ev_dma_epout0_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8940:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8944:	b002      	add	sp, #8
    8946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    894a:	f7ff bc6b 	b.w	8224 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    894e:	681c      	ldr	r4, [r3, #0]
    8950:	b974      	cbnz	r4, 8970 <ev_dma_epout0_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8952:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    8956:	f7ff fc65 	bl	8224 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    895a:	2306      	movs	r3, #6
    895c:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8960:	4b08      	ldr	r3, [pc, #32]	; (8984 <ev_dma_epout0_handler+0x54>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8962:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    8966:	681b      	ldr	r3, [r3, #0]
    8968:	a801      	add	r0, sp, #4
    896a:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    896c:	b002      	add	sp, #8
    896e:	bd10      	pop	{r4, pc}
    8970:	b002      	add	sp, #8
    8972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    8976:	f7ff bfd3 	b.w	8920 <nrfx_usbd_setup_data_clear>
    897a:	bf00      	nop
    897c:	20056802 	.word	0x20056802
    8980:	200142b0 	.word	0x200142b0
    8984:	200143d8 	.word	0x200143d8

00008988 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8988:	2201      	movs	r2, #1
    898a:	4b02      	ldr	r3, [pc, #8]	; (8994 <nrfx_usbd_setup_clear+0xc>)
    898c:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    898e:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    8990:	4770      	bx	lr
    8992:	bf00      	nop
    8994:	50036000 	.word	0x50036000

00008998 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8998:	2201      	movs	r2, #1
    899a:	4b02      	ldr	r3, [pc, #8]	; (89a4 <nrfx_usbd_setup_stall+0xc>)
    899c:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    899e:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    89a0:	4770      	bx	lr
    89a2:	bf00      	nop
    89a4:	50036000 	.word	0x50036000

000089a8 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    89a8:	4b01      	ldr	r3, [pc, #4]	; (89b0 <nrfx_usbd_last_setup_dir_get+0x8>)
    89aa:	7818      	ldrb	r0, [r3, #0]
    89ac:	4770      	bx	lr
    89ae:	bf00      	nop
    89b0:	20056803 	.word	0x20056803

000089b4 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    89b4:	4602      	mov	r2, r0
    89b6:	b510      	push	{r4, lr}
	__asm__ volatile(
    89b8:	f04f 0320 	mov.w	r3, #32
    89bc:	f3ef 8411 	mrs	r4, BASEPRI
    89c0:	f383 8812 	msr	BASEPRI_MAX, r3
    89c4:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    89c8:	f005 fa0f 	bl	ddea <ep2bit>
    89cc:	2301      	movs	r3, #1
    89ce:	490d      	ldr	r1, [pc, #52]	; (8a04 <nrfx_usbd_transfer_out_drop+0x50>)
    89d0:	fa03 f000 	lsl.w	r0, r3, r0
    89d4:	680b      	ldr	r3, [r1, #0]
    89d6:	ea23 0300 	bic.w	r3, r3, r0
    89da:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    89dc:	f012 0108 	ands.w	r1, r2, #8
    89e0:	d10a      	bne.n	89f8 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    89e2:	f002 030f 	and.w	r3, r2, #15
    89e6:	009b      	lsls	r3, r3, #2
    89e8:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    89ec:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    89f0:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    89f4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    89f8:	f384 8811 	msr	BASEPRI, r4
    89fc:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    8a00:	bd10      	pop	{r4, pc}
    8a02:	bf00      	nop
    8a04:	200143d4 	.word	0x200143d4

00008a08 <usbd_ep_abort>:
{
    8a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8a0a:	4601      	mov	r1, r0
	__asm__ volatile(
    8a0c:	f04f 0320 	mov.w	r3, #32
    8a10:	f3ef 8511 	mrs	r5, BASEPRI
    8a14:	f383 8812 	msr	BASEPRI_MAX, r3
    8a18:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    8a1c:	f7ff fb46 	bl	80ac <ep_state_access>
    8a20:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8a22:	4608      	mov	r0, r1
    8a24:	f005 f9e1 	bl	ddea <ep2bit>
    8a28:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    8a2a:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8a2e:	fa02 f200 	lsl.w	r2, r2, r0
    8a32:	482e      	ldr	r0, [pc, #184]	; (8aec <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    8a34:	d119      	bne.n	8a6a <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8a36:	6803      	ldr	r3, [r0, #0]
    8a38:	ea32 0303 	bics.w	r3, r2, r3
    8a3c:	d00a      	beq.n	8a54 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    8a3e:	4608      	mov	r0, r1
    8a40:	f7ff ffb8 	bl	89b4 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    8a44:	2303      	movs	r3, #3
    8a46:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    8a48:	f385 8811 	msr	BASEPRI, r5
    8a4c:	f3bf 8f6f 	isb	sy
}
    8a50:	b003      	add	sp, #12
    8a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    8a54:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8a56:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    8a58:	4925      	ldr	r1, [pc, #148]	; (8af0 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8a5a:	ea23 0302 	bic.w	r3, r3, r2
    8a5e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    8a60:	680b      	ldr	r3, [r1, #0]
    8a62:	ea23 0302 	bic.w	r3, r3, r2
    8a66:	600b      	str	r3, [r1, #0]
    8a68:	e7ec      	b.n	8a44 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    8a6a:	070b      	lsls	r3, r1, #28
    8a6c:	d415      	bmi.n	8a9a <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    8a6e:	2980      	cmp	r1, #128	; 0x80
    8a70:	4b20      	ldr	r3, [pc, #128]	; (8af4 <usbd_ep_abort+0xec>)
    8a72:	d02f      	beq.n	8ad4 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    8a74:	f001 040f 	and.w	r4, r1, #15
    8a78:	f204 34da 	addw	r4, r4, #986	; 0x3da
    8a7c:	0064      	lsls	r4, r4, #1
    8a7e:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8a82:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8a86:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8a8a:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8a8c:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8a90:	433c      	orrs	r4, r7
    8a92:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    8a96:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    8a9a:	4f15      	ldr	r7, [pc, #84]	; (8af0 <usbd_ep_abort+0xe8>)
    8a9c:	6804      	ldr	r4, [r0, #0]
    8a9e:	683b      	ldr	r3, [r7, #0]
    8aa0:	ea64 0c03 	orn	ip, r4, r3
    8aa4:	ea1c 0f02 	tst.w	ip, r2
    8aa8:	d0ce      	beq.n	8a48 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    8aaa:	4313      	orrs	r3, r2
    8aac:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    8aae:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8ab0:	ea24 0402 	bic.w	r4, r4, r2
    8ab4:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    8ab6:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    8ab8:	2303      	movs	r3, #3
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8aba:	2206      	movs	r2, #6
            p_state->status = NRFX_USBD_EP_ABORTED;
    8abc:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8abe:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    8ac2:	4b0d      	ldr	r3, [pc, #52]	; (8af8 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8ac4:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    8ac8:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8aca:	f88d 1006 	strb.w	r1, [sp, #6]
            m_event_handler(&evt);
    8ace:	a801      	add	r0, sp, #4
    8ad0:	4798      	blx	r3
    8ad2:	e7b9      	b.n	8a48 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    8ad4:	f240 74b4 	movw	r4, #1972	; 0x7b4
    8ad8:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8adc:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8ae0:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8ae4:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8ae6:	f044 0404 	orr.w	r4, r4, #4
    8aea:	e7d1      	b.n	8a90 <usbd_ep_abort+0x88>
    8aec:	200143d0 	.word	0x200143d0
    8af0:	200143d4 	.word	0x200143d4
    8af4:	50036000 	.word	0x50036000
    8af8:	200143d8 	.word	0x200143d8

00008afc <ev_setup_handler>:
{
    8afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    8afe:	4b14      	ldr	r3, [pc, #80]	; (8b50 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8b00:	4c14      	ldr	r4, [pc, #80]	; (8b54 <ev_setup_handler+0x58>)
    8b02:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    8b06:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    8b08:	4e13      	ldr	r6, [pc, #76]	; (8b58 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8b0a:	43da      	mvns	r2, r3
    8b0c:	4b13      	ldr	r3, [pc, #76]	; (8b5c <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    8b0e:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8b10:	681b      	ldr	r3, [r3, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    8b12:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8b14:	b292      	uxth	r2, r2
    8b16:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    8b18:	f005 f967 	bl	ddea <ep2bit>
    8b1c:	2301      	movs	r3, #1
    8b1e:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8b20:	4213      	tst	r3, r2
    8b22:	d002      	beq.n	8b2a <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    8b24:	4608      	mov	r0, r1
    8b26:	f7ff ff6f 	bl	8a08 <usbd_ep_abort>
    (void)(NRFX_ATOMIC_FETCH_AND(
    8b2a:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    8b2e:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    m_last_setup_dir =
    8b32:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    8b34:	f7ff fb76 	bl	8224 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    8b38:	6823      	ldr	r3, [r4, #0]
    m_event_handler(&evt);
    8b3a:	a801      	add	r0, sp, #4
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    8b3c:	f043 0301 	orr.w	r3, r3, #1
    8b40:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    8b42:	2305      	movs	r3, #5
    8b44:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    8b46:	4b06      	ldr	r3, [pc, #24]	; (8b60 <ev_setup_handler+0x64>)
    8b48:	681b      	ldr	r3, [r3, #0]
    8b4a:	4798      	blx	r3
}
    8b4c:	b002      	add	sp, #8
    8b4e:	bd70      	pop	{r4, r5, r6, pc}
    8b50:	50036000 	.word	0x50036000
    8b54:	200143d4 	.word	0x200143d4
    8b58:	20056803 	.word	0x20056803
    8b5c:	200143d0 	.word	0x200143d0
    8b60:	200143d8 	.word	0x200143d8

00008b64 <nrfx_usbd_irq_handler>:
{
    8b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    8b68:	4b1a      	ldr	r3, [pc, #104]	; (8bd4 <nrfx_usbd_irq_handler+0x70>)
            active |= 1UL << event_nr;
    8b6a:	2401      	movs	r4, #1
    8b6c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    8b70:	2300      	movs	r3, #0
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8b72:	461d      	mov	r5, r3
    while (to_process)
    8b74:	b970      	cbnz	r0, 8b94 <nrfx_usbd_irq_handler+0x30>
        active &= ~(1UL << event_nr);
    8b76:	f04f 0801 	mov.w	r8, #1
        m_isr[event_nr]();
    8b7a:	4f17      	ldr	r7, [pc, #92]	; (8bd8 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    8b7c:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    8b80:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
    while (active)
    8b84:	b9bc      	cbnz	r4, 8bb6 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    8b86:	f7ff fd67 	bl	8658 <usbd_dmareq_process>
    if (setup_active)
    8b8a:	b306      	cbz	r6, 8bce <nrfx_usbd_irq_handler+0x6a>
}
    8b8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    8b90:	f7ff bfb4 	b.w	8afc <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    8b94:	fa90 f2a0 	rbit	r2, r0
    8b98:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8b9c:	490f      	ldr	r1, [pc, #60]	; (8bdc <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    8b9e:	0096      	lsls	r6, r2, #2
    8ba0:	4431      	add	r1, r6
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8ba2:	680e      	ldr	r6, [r1, #0]
            active |= 1UL << event_nr;
    8ba4:	fa04 f202 	lsl.w	r2, r4, r2
    if (ret)
    8ba8:	b116      	cbz	r6, 8bb0 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8baa:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8bac:	6809      	ldr	r1, [r1, #0]
    8bae:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    8bb0:	ea20 0002 	bic.w	r0, r0, r2
    8bb4:	e7de      	b.n	8b74 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    8bb6:	fa94 f5a4 	rbit	r5, r4
    8bba:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    8bbe:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    8bc2:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    8bc6:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    8bc8:	ea24 0405 	bic.w	r4, r4, r5
    8bcc:	e7da      	b.n	8b84 <nrfx_usbd_irq_handler+0x20>
}
    8bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8bd2:	bf00      	nop
    8bd4:	50036000 	.word	0x50036000
    8bd8:	0000edfc 	.word	0x0000edfc
    8bdc:	50036100 	.word	0x50036100

00008be0 <usbd_ep_abort_all>:
{
    8be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        ep_waiting &= ~(1U << bitpos);
    8be2:	2701      	movs	r7, #1
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    8be4:	4e10      	ldr	r6, [pc, #64]	; (8c28 <usbd_ep_abort_all+0x48>)
    8be6:	4b11      	ldr	r3, [pc, #68]	; (8c2c <usbd_ep_abort_all+0x4c>)
    8be8:	6834      	ldr	r4, [r6, #0]
    8bea:	681b      	ldr	r3, [r3, #0]
    8bec:	0c24      	lsrs	r4, r4, #16
    8bee:	0424      	lsls	r4, r4, #16
    8bf0:	431c      	orrs	r4, r3
    while (0 != ep_waiting)
    8bf2:	b91c      	cbnz	r4, 8bfc <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8bf4:	f240 13ff 	movw	r3, #511	; 0x1ff
    8bf8:	6033      	str	r3, [r6, #0]
}
    8bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    8bfc:	fa94 f5a4 	rbit	r5, r4
    8c00:	fab5 f585 	clz	r5, r5
    8c04:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8c06:	2d0f      	cmp	r5, #15
    8c08:	bfc6      	itte	gt
    8c0a:	f1a5 0010 	subgt.w	r0, r5, #16
    8c0e:	b2c0      	uxtbgt	r0, r0
    8c10:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    8c14:	0703      	lsls	r3, r0, #28
    8c16:	d401      	bmi.n	8c1c <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    8c18:	f7ff fef6 	bl	8a08 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    8c1c:	fa07 f505 	lsl.w	r5, r7, r5
    8c20:	ea24 0405 	bic.w	r4, r4, r5
    8c24:	e7e5      	b.n	8bf2 <usbd_ep_abort_all+0x12>
    8c26:	bf00      	nop
    8c28:	200143d4 	.word	0x200143d4
    8c2c:	200143d0 	.word	0x200143d0

00008c30 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8c30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8c34:	4b0b      	ldr	r3, [pc, #44]	; (8c64 <nrfx_usbd_stop+0x34>)
{
    8c36:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    8c38:	2036      	movs	r0, #54	; 0x36
    8c3a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    8c3e:	f7fb f889 	bl	3d54 <arch_irq_is_enabled>
    8c42:	b170      	cbz	r0, 8c62 <nrfx_usbd_stop+0x32>
        usbd_ep_abort_all();
    8c44:	f7ff ffcc 	bl	8be0 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    8c48:	2300      	movs	r3, #0
    8c4a:	4c07      	ldr	r4, [pc, #28]	; (8c68 <nrfx_usbd_stop+0x38>)
        NRFX_IRQ_DISABLE(USBD_IRQn);
    8c4c:	2036      	movs	r0, #54	; 0x36
    8c4e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    8c52:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    8c56:	f7fb f869 	bl	3d2c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    8c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8c5e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    8c62:	bd10      	pop	{r4, pc}
    8c64:	e000e100 	.word	0xe000e100
    8c68:	50036000 	.word	0x50036000

00008c6c <nrfx_usbd_disable>:
{
    8c6c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    8c6e:	f7ff ffdf 	bl	8c30 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    8c72:	4b08      	ldr	r3, [pc, #32]	; (8c94 <nrfx_usbd_disable+0x28>)
    8c74:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    8c78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    8c7c:	2200      	movs	r2, #0
    8c7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8c82:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    8c86:	4b04      	ldr	r3, [pc, #16]	; (8c98 <nrfx_usbd_disable+0x2c>)
    8c88:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8c8a:	2201      	movs	r2, #1
    8c8c:	4b03      	ldr	r3, [pc, #12]	; (8c9c <nrfx_usbd_disable+0x30>)
    8c8e:	701a      	strb	r2, [r3, #0]
}
    8c90:	bd08      	pop	{r3, pc}
    8c92:	bf00      	nop
    8c94:	50036000 	.word	0x50036000
    8c98:	20056802 	.word	0x20056802
    8c9c:	20056805 	.word	0x20056805

00008ca0 <nrfx_usbd_suspend>:
{
    8ca0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8ca2:	f04f 0320 	mov.w	r3, #32
    8ca6:	f3ef 8511 	mrs	r5, BASEPRI
    8caa:	f383 8812 	msr	BASEPRI_MAX, r3
    8cae:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    8cb2:	4b10      	ldr	r3, [pc, #64]	; (8cf4 <nrfx_usbd_suspend+0x54>)
    8cb4:	781b      	ldrb	r3, [r3, #0]
    8cb6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    8cba:	b1a3      	cbz	r3, 8ce6 <nrfx_usbd_suspend+0x46>
        usbd_ep_abort_all();
    8cbc:	f7ff ff90 	bl	8be0 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    8cc0:	4b0d      	ldr	r3, [pc, #52]	; (8cf8 <nrfx_usbd_suspend+0x58>)
    8cc2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    8cc6:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    8cca:	d10c      	bne.n	8ce6 <nrfx_usbd_suspend+0x46>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    8ccc:	2101      	movs	r1, #1
    8cce:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    8cd2:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    8cd6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    8cda:	0589      	lsls	r1, r1, #22
    8cdc:	d504      	bpl.n	8ce8 <nrfx_usbd_suspend+0x48>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    8cde:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    8ce2:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    8ce6:	2400      	movs	r4, #0
	__asm__ volatile(
    8ce8:	f385 8811 	msr	BASEPRI, r5
    8cec:	f3bf 8f6f 	isb	sy
}
    8cf0:	4620      	mov	r0, r4
    8cf2:	bd38      	pop	{r3, r4, r5, pc}
    8cf4:	20056804 	.word	0x20056804
    8cf8:	50036000 	.word	0x50036000

00008cfc <nrfx_usbd_ep_disable>:
{
    8cfc:	b510      	push	{r4, lr}
    8cfe:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    8d00:	f7ff fe82 	bl	8a08 <usbd_ep_abort>
        p_reg->EPINEN &= ~(1UL << epnr);
    8d04:	2301      	movs	r3, #1
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8d06:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    8d0a:	4083      	lsls	r3, r0
    8d0c:	43db      	mvns	r3, r3
    8d0e:	4a0c      	ldr	r2, [pc, #48]	; (8d40 <nrfx_usbd_ep_disable+0x44>)
    if (NRF_USBD_EPIN_CHECK(ep))
    8d10:	f014 0f80 	tst.w	r4, #128	; 0x80
        p_reg->EPINEN &= ~(1UL << epnr);
    8d14:	bf15      	itete	ne
    8d16:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8d1a:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    8d1e:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8d20:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    8d22:	bf15      	itete	ne
    8d24:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8d28:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8d2c:	4b05      	ldrne	r3, [pc, #20]	; (8d44 <nrfx_usbd_ep_disable+0x48>)
    8d2e:	4b06      	ldreq	r3, [pc, #24]	; (8d48 <nrfx_usbd_ep_disable+0x4c>)
    8d30:	5c1a      	ldrb	r2, [r3, r0]
    8d32:	2301      	movs	r3, #1
    8d34:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    8d36:	4a02      	ldr	r2, [pc, #8]	; (8d40 <nrfx_usbd_ep_disable+0x44>)
    8d38:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    8d3c:	bd10      	pop	{r4, pc}
    8d3e:	bf00      	nop
    8d40:	50036000 	.word	0x50036000
    8d44:	0000f37e 	.word	0x0000f37e
    8d48:	0000f375 	.word	0x0000f375

00008d4c <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8d4c:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    8d50:	b570      	push	{r4, r5, r6, lr}
    8d52:	4924      	ldr	r1, [pc, #144]	; (8de4 <nrfx_usbd_ep_enable+0x98>)
    8d54:	4604      	mov	r4, r0
    8d56:	f04f 0501 	mov.w	r5, #1
    8d5a:	f000 030f 	and.w	r3, r0, #15
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8d5e:	d012      	beq.n	8d86 <nrfx_usbd_ep_enable+0x3a>
    8d60:	4a21      	ldr	r2, [pc, #132]	; (8de8 <nrfx_usbd_ep_enable+0x9c>)
    8d62:	5cd2      	ldrb	r2, [r2, r3]
    8d64:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    8d68:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    8d6c:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    8d70:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8d72:	07d0      	lsls	r0, r2, #31
    8d74:	d406      	bmi.n	8d84 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    8d76:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    8d7a:	fa05 f303 	lsl.w	r3, r5, r3
    8d7e:	4313      	orrs	r3, r2
    8d80:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    8d84:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8d86:	4a19      	ldr	r2, [pc, #100]	; (8dec <nrfx_usbd_ep_enable+0xa0>)
    8d88:	5cd2      	ldrb	r2, [r2, r3]
    8d8a:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    8d8e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    8d92:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    8d96:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8d98:	07d2      	lsls	r2, r2, #31
    8d9a:	d4f3      	bmi.n	8d84 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    8d9c:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    8da0:	fa05 f203 	lsl.w	r2, r5, r3
    8da4:	4332      	orrs	r2, r6
    8da6:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    8daa:	2b00      	cmp	r3, #0
    8dac:	d0ea      	beq.n	8d84 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    8dae:	0703      	lsls	r3, r0, #28
    8db0:	d4e8      	bmi.n	8d84 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    8db2:	f04f 0320 	mov.w	r3, #32
    8db6:	f3ef 8611 	mrs	r6, BASEPRI
    8dba:	f383 8812 	msr	BASEPRI_MAX, r3
    8dbe:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    8dc2:	f7ff fdf7 	bl	89b4 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8dc6:	4620      	mov	r0, r4
    8dc8:	f005 f80f 	bl	ddea <ep2bit>
    8dcc:	4a08      	ldr	r2, [pc, #32]	; (8df0 <nrfx_usbd_ep_enable+0xa4>)
    8dce:	fa05 f000 	lsl.w	r0, r5, r0
    8dd2:	6813      	ldr	r3, [r2, #0]
    8dd4:	ea23 0300 	bic.w	r3, r3, r0
    8dd8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    8dda:	f386 8811 	msr	BASEPRI, r6
    8dde:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    8de2:	e7cf      	b.n	8d84 <nrfx_usbd_ep_enable+0x38>
    8de4:	50036000 	.word	0x50036000
    8de8:	0000f37e 	.word	0x0000f37e
    8dec:	0000f375 	.word	0x0000f375
    8df0:	200143d0 	.word	0x200143d0

00008df4 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8df4:	0603      	lsls	r3, r0, #24
{
    8df6:	b510      	push	{r4, lr}
    8df8:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8dfa:	d405      	bmi.n	8e08 <nrfx_usbd_ep_stall_clear+0x14>
    8dfc:	f7ff fd44 	bl	8888 <nrfx_usbd_ep_stall_check>
    8e00:	b110      	cbz	r0, 8e08 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    8e02:	4620      	mov	r0, r4
    8e04:	f7ff fdd6 	bl	89b4 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    8e08:	4b01      	ldr	r3, [pc, #4]	; (8e10 <nrfx_usbd_ep_stall_clear+0x1c>)
    8e0a:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    8e0e:	bd10      	pop	{r4, pc}
    8e10:	50036000 	.word	0x50036000

00008e14 <nrfx_usbreg_enable>:
    p_reg->INTENSET = mask;
    8e14:	2207      	movs	r2, #7
    8e16:	4b02      	ldr	r3, [pc, #8]	; (8e20 <nrfx_usbreg_enable+0xc>)
    8e18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
void nrfx_usbreg_enable(void)
{
    nrf_usbreg_int_enable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                            NRF_USBREG_INT_USBREMOVED  |
                                            NRF_USBREG_INT_USBPWRRDY);
}
    8e1c:	4770      	bx	lr
    8e1e:	bf00      	nop
    8e20:	50037000 	.word	0x50037000

00008e24 <nrfx_usbreg_disable>:
    p_reg->INTENCLR = mask;
    8e24:	2207      	movs	r2, #7
    8e26:	4b02      	ldr	r3, [pc, #8]	; (8e30 <nrfx_usbreg_disable+0xc>)
    8e28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
void nrfx_usbreg_disable(void)
{
    nrf_usbreg_int_disable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                             NRF_USBREG_INT_USBREMOVED  |
                                             NRF_USBREG_INT_USBPWRRDY);
}
    8e2c:	4770      	bx	lr
    8e2e:	bf00      	nop
    8e30:	50037000 	.word	0x50037000

00008e34 <nrfx_usbreg_uninit>:
    8e34:	2207      	movs	r2, #7

void nrfx_usbreg_uninit(void)
{
    8e36:	b508      	push	{r3, lr}
    8e38:	4b04      	ldr	r3, [pc, #16]	; (8e4c <nrfx_usbreg_uninit+0x18>)
    nrfx_usbreg_disable();
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    8e3a:	2037      	movs	r0, #55	; 0x37
    8e3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    8e40:	f7fa ff74 	bl	3d2c <arch_irq_disable>
    m_usbevt_handler = NULL;
    8e44:	2200      	movs	r2, #0
    8e46:	4b02      	ldr	r3, [pc, #8]	; (8e50 <nrfx_usbreg_uninit+0x1c>)
    8e48:	601a      	str	r2, [r3, #0]
}
    8e4a:	bd08      	pop	{r3, pc}
    8e4c:	50037000 	.word	0x50037000
    8e50:	200143dc 	.word	0x200143dc

00008e54 <nrfx_usbreg_init>:
{
    8e54:	b510      	push	{r4, lr}
    8e56:	4604      	mov	r4, r0
    nrfx_usbreg_uninit();
    8e58:	f7ff ffec 	bl	8e34 <nrfx_usbreg_uninit>
    m_usbevt_handler = p_config->handler;
    8e5c:	6822      	ldr	r2, [r4, #0]
    8e5e:	4b07      	ldr	r3, [pc, #28]	; (8e7c <nrfx_usbreg_init+0x28>)
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    8e60:	2037      	movs	r0, #55	; 0x37
    m_usbevt_handler = p_config->handler;
    8e62:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8e64:	2200      	movs	r2, #0
    8e66:	4b06      	ldr	r3, [pc, #24]	; (8e80 <nrfx_usbreg_init+0x2c>)
    8e68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8e6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    8e70:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
    8e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    8e78:	f7fa bf4a 	b.w	3d10 <arch_irq_enable>
    8e7c:	200143dc 	.word	0x200143dc
    8e80:	50037000 	.word	0x50037000

00008e84 <nrfx_usbreg_irq_handler>:

void nrfx_usbreg_irq_handler(void)
{
    8e84:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e86:	4c11      	ldr	r4, [pc, #68]	; (8ecc <nrfx_usbreg_irq_handler+0x48>)
    8e88:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED))
    8e8c:	b12b      	cbz	r3, 8e9a <nrfx_usbreg_irq_handler+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8e8e:	2000      	movs	r0, #0
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED);
        m_usbevt_handler(NRFX_USBREG_EVT_DETECTED);
    8e90:	4b0f      	ldr	r3, [pc, #60]	; (8ed0 <nrfx_usbreg_irq_handler+0x4c>)
    8e92:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    8e96:	681b      	ldr	r3, [r3, #0]
    8e98:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e9a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED))
    8e9e:	b133      	cbz	r3, 8eae <nrfx_usbreg_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ea0:	2300      	movs	r3, #0
    8ea2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED);
        m_usbevt_handler(NRFX_USBREG_EVT_REMOVED);
    8ea6:	4b0a      	ldr	r3, [pc, #40]	; (8ed0 <nrfx_usbreg_irq_handler+0x4c>)
    8ea8:	2001      	movs	r0, #1
    8eaa:	681b      	ldr	r3, [r3, #0]
    8eac:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8eae:	4b07      	ldr	r3, [pc, #28]	; (8ecc <nrfx_usbreg_irq_handler+0x48>)
    8eb0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY))
    8eb4:	b142      	cbz	r2, 8ec8 <nrfx_usbreg_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8eb6:	2200      	movs	r2, #0
    8eb8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY);
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    8ebc:	4b04      	ldr	r3, [pc, #16]	; (8ed0 <nrfx_usbreg_irq_handler+0x4c>)
    8ebe:	2002      	movs	r0, #2
    }
}
    8ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    8ec4:	681b      	ldr	r3, [r3, #0]
    8ec6:	4718      	bx	r3
}
    8ec8:	bd10      	pop	{r4, pc}
    8eca:	bf00      	nop
    8ecc:	50037000 	.word	0x50037000
    8ed0:	200143dc 	.word	0x200143dc

00008ed4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8ed4:	4b0f      	ldr	r3, [pc, #60]	; (8f14 <z_sys_init_run_level+0x40>)
{
    8ed6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8ed8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    8edc:	3001      	adds	r0, #1
    8ede:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    8ee2:	42a6      	cmp	r6, r4
    8ee4:	d800      	bhi.n	8ee8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    8ee6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    8ee8:	e9d4 3500 	ldrd	r3, r5, [r4]
    8eec:	4628      	mov	r0, r5
    8eee:	4798      	blx	r3
		if (dev != NULL) {
    8ef0:	b16d      	cbz	r5, 8f0e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    8ef2:	b138      	cbz	r0, 8f04 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    8ef4:	2800      	cmp	r0, #0
    8ef6:	bfb8      	it	lt
    8ef8:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    8efa:	28ff      	cmp	r0, #255	; 0xff
    8efc:	bfa8      	it	ge
    8efe:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    8f00:	68eb      	ldr	r3, [r5, #12]
    8f02:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    8f04:	68ea      	ldr	r2, [r5, #12]
    8f06:	7853      	ldrb	r3, [r2, #1]
    8f08:	f043 0301 	orr.w	r3, r3, #1
    8f0c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8f0e:	3408      	adds	r4, #8
    8f10:	e7e7      	b.n	8ee2 <z_sys_init_run_level+0xe>
    8f12:	bf00      	nop
    8f14:	0000ee64 	.word	0x0000ee64

00008f18 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    8f18:	2201      	movs	r2, #1
{
    8f1a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    8f1c:	4b09      	ldr	r3, [pc, #36]	; (8f44 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    8f1e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    8f20:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    8f22:	f7ff ffd7 	bl	8ed4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    8f26:	f005 fa94 	bl	e452 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    8f2a:	2004      	movs	r0, #4
    8f2c:	f7ff ffd2 	bl	8ed4 <z_sys_init_run_level>

	z_init_static_threads();
    8f30:	f000 f956 	bl	91e0 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    8f34:	f7f7 fa76 	bl	424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8f38:	4a03      	ldr	r2, [pc, #12]	; (8f48 <bg_thread_main+0x30>)
    8f3a:	7b13      	ldrb	r3, [r2, #12]
    8f3c:	f023 0301 	bic.w	r3, r3, #1
    8f40:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    8f42:	bd08      	pop	{r3, pc}
    8f44:	20056806 	.word	0x20056806
    8f48:	20002628 	.word	0x20002628

00008f4c <z_bss_zero>:
{
    8f4c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    8f4e:	4803      	ldr	r0, [pc, #12]	; (8f5c <z_bss_zero+0x10>)
    8f50:	4a03      	ldr	r2, [pc, #12]	; (8f60 <z_bss_zero+0x14>)
    8f52:	2100      	movs	r1, #0
    8f54:	1a12      	subs	r2, r2, r0
    8f56:	f004 ffce 	bl	def6 <z_early_memset>
}
    8f5a:	bd08      	pop	{r3, pc}
    8f5c:	20002460 	.word	0x20002460
    8f60:	20056808 	.word	0x20056808

00008f64 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
    8f64:	2378      	movs	r3, #120	; 0x78
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    8f66:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    8f68:	4e13      	ldr	r6, [pc, #76]	; (8fb8 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
    8f6a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
    8f6c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    8f70:	2300      	movs	r3, #0
{
    8f72:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    8f74:	e9cd 2304 	strd	r2, r3, [sp, #16]
    8f78:	220f      	movs	r2, #15
    8f7a:	9301      	str	r3, [sp, #4]
    8f7c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8f80:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    8f82:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8f86:	4d0d      	ldr	r5, [pc, #52]	; (8fbc <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    8f88:	490d      	ldr	r1, [pc, #52]	; (8fc0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8f8a:	fb03 5500 	mla	r5, r3, r0, r5
{
    8f8e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    8f90:	fb02 1100 	mla	r1, r2, r0, r1
    8f94:	4b0b      	ldr	r3, [pc, #44]	; (8fc4 <z_init_cpu+0x60>)
    8f96:	4630      	mov	r0, r6
    8f98:	9500      	str	r5, [sp, #0]
    8f9a:	f000 f8c5 	bl	9128 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8f9e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    8fa0:	742c      	strb	r4, [r5, #16]
    8fa2:	f023 0304 	bic.w	r3, r3, #4
    8fa6:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    8fa8:	4b07      	ldr	r3, [pc, #28]	; (8fc8 <z_init_cpu+0x64>)
    8faa:	3401      	adds	r4, #1
    8fac:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    8fb0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    8fb2:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    8fb4:	b006      	add	sp, #24
    8fb6:	bd70      	pop	{r4, r5, r6, pc}
    8fb8:	200025b0 	.word	0x200025b0
    8fbc:	200143e0 	.word	0x200143e0
    8fc0:	20057808 	.word	0x20057808
    8fc4:	0000dfaf 	.word	0x0000dfaf
    8fc8:	20057008 	.word	0x20057008

00008fcc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    8fcc:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    8fce:	2000      	movs	r0, #0
{
    8fd0:	b0a4      	sub	sp, #144	; 0x90
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    8fd2:	f7ff ff7f 	bl	8ed4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    8fd6:	4b2d      	ldr	r3, [pc, #180]	; (908c <z_cstart+0xc0>)
	uint32_t msp =
    8fd8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    8fdc:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    8fe0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8fe4:	2400      	movs	r4, #0
    8fe6:	23e0      	movs	r3, #224	; 0xe0
    8fe8:	4d29      	ldr	r5, [pc, #164]	; (9090 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    8fea:	4e2a      	ldr	r6, [pc, #168]	; (9094 <z_cstart+0xc8>)
    8fec:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    8ff0:	77ec      	strb	r4, [r5, #31]
    8ff2:	762c      	strb	r4, [r5, #24]
    8ff4:	766c      	strb	r4, [r5, #25]
    8ff6:	76ac      	strb	r4, [r5, #26]
    8ff8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8ffc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8ffe:	4f26      	ldr	r7, [pc, #152]	; (9098 <z_cstart+0xcc>)
    9000:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    9004:	626b      	str	r3, [r5, #36]	; 0x24
    9006:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    900a:	f7fb f875 	bl	40f8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    900e:	f7fa fe53 	bl	3cb8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    9012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9016:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    9018:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    901a:	f7fb fa77 	bl	450c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    901e:	f7fb f91d 	bl	425c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    9022:	f240 1301 	movw	r3, #257	; 0x101
    9026:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    902a:	ab06      	add	r3, sp, #24
    902c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    902e:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
	dummy_thread->resource_pool = NULL;
    9032:	9421      	str	r4, [sp, #132]	; 0x84
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    9034:	f004 ff2c 	bl	de90 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    9038:	2001      	movs	r0, #1
    903a:	f7ff ff4b 	bl	8ed4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    903e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    9040:	4d16      	ldr	r5, [pc, #88]	; (909c <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    9042:	f7ff ff47 	bl	8ed4 <z_sys_init_run_level>
	z_sched_init();
    9046:	f000 fced 	bl	9a24 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    904a:	4b15      	ldr	r3, [pc, #84]	; (90a0 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    904c:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    904e:	9305      	str	r3, [sp, #20]
    9050:	2301      	movs	r3, #1
    9052:	4914      	ldr	r1, [pc, #80]	; (90a4 <z_cstart+0xd8>)
    9054:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    9058:	e9cd 4303 	strd	r4, r3, [sp, #12]
    905c:	4628      	mov	r0, r5
    905e:	463b      	mov	r3, r7
    9060:	e9cd 4401 	strd	r4, r4, [sp, #4]
    9064:	9400      	str	r4, [sp, #0]
    9066:	f000 f85f 	bl	9128 <z_setup_new_thread>
    906a:	4606      	mov	r6, r0
    906c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    906e:	4628      	mov	r0, r5
    9070:	f022 0204 	bic.w	r2, r2, #4
    9074:	736a      	strb	r2, [r5, #13]
    9076:	f005 f8d6 	bl	e226 <z_ready_thread>
	z_init_cpu(0);
    907a:	4620      	mov	r0, r4
    907c:	f7ff ff72 	bl	8f64 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    9080:	463a      	mov	r2, r7
    9082:	4631      	mov	r1, r6
    9084:	4628      	mov	r0, r5
    9086:	f7fa ff1b 	bl	3ec0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    908a:	bf00      	nop
    908c:	20057008 	.word	0x20057008
    9090:	e000ed00 	.word	0xe000ed00
    9094:	200143e0 	.word	0x200143e0
    9098:	00008f19 	.word	0x00008f19
    909c:	20002628 	.word	0x20002628
    90a0:	0000f39a 	.word	0x0000f39a
    90a4:	20057948 	.word	0x20057948

000090a8 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
    90a8:	2000      	movs	r0, #0
{
    90aa:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    90ac:	4c05      	ldr	r4, [pc, #20]	; (90c4 <init_mem_slab_module+0x1c>)
    90ae:	4d06      	ldr	r5, [pc, #24]	; (90c8 <init_mem_slab_module+0x20>)
    90b0:	42ac      	cmp	r4, r5
    90b2:	d300      	bcc.n	90b6 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    90b4:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    90b6:	4620      	mov	r0, r4
    90b8:	f004 ff21 	bl	defe <create_free_list>
		if (rc < 0) {
    90bc:	2800      	cmp	r0, #0
    90be:	dbf9      	blt.n	90b4 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    90c0:	341c      	adds	r4, #28
    90c2:	e7f5      	b.n	90b0 <init_mem_slab_module+0x8>
    90c4:	200022c8 	.word	0x200022c8
    90c8:	200022e4 	.word	0x200022e4

000090cc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    90cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    90ce:	460c      	mov	r4, r1
	__asm__ volatile(
    90d0:	f04f 0520 	mov.w	r5, #32
    90d4:	f3ef 8111 	mrs	r1, BASEPRI
    90d8:	f385 8812 	msr	BASEPRI_MAX, r5
    90dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    90e0:	6945      	ldr	r5, [r0, #20]
    90e2:	b15d      	cbz	r5, 90fc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    90e4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    90e6:	682b      	ldr	r3, [r5, #0]
    90e8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    90ea:	6983      	ldr	r3, [r0, #24]
    90ec:	3301      	adds	r3, #1
    90ee:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    90f0:	2000      	movs	r0, #0
	__asm__ volatile(
    90f2:	f381 8811 	msr	BASEPRI, r1
    90f6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    90fa:	e011      	b.n	9120 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    90fc:	ea52 0603 	orrs.w	r6, r2, r3
    9100:	d103      	bne.n	910a <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    9102:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    9106:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    9108:	e7f3      	b.n	90f2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    910a:	e9cd 2300 	strd	r2, r3, [sp]
    910e:	4602      	mov	r2, r0
    9110:	3008      	adds	r0, #8
    9112:	f000 fb97 	bl	9844 <z_pend_curr>
		if (result == 0) {
    9116:	b918      	cbnz	r0, 9120 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    9118:	4b02      	ldr	r3, [pc, #8]	; (9124 <k_mem_slab_alloc+0x58>)
    911a:	689b      	ldr	r3, [r3, #8]
    911c:	695b      	ldr	r3, [r3, #20]
    911e:	6023      	str	r3, [r4, #0]
}
    9120:	b002      	add	sp, #8
    9122:	bd70      	pop	{r4, r5, r6, pc}
    9124:	200143e0 	.word	0x200143e0

00009128 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    9128:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    912c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    912e:	f100 0558 	add.w	r5, r0, #88	; 0x58
    9132:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    9134:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    9136:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    913a:	2500      	movs	r5, #0
{
    913c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    913e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    9140:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    9142:	e9c0 5506 	strd	r5, r5, [r0, #24]
    9146:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9148:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    914a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    914c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    9150:	e9c0 1618 	strd	r1, r6, [r0, #96]	; 0x60
	thread_base->pended_on = NULL;
    9154:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    9156:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    9158:	6685      	str	r5, [r0, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    915a:	9202      	str	r2, [sp, #8]
    915c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    915e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9162:	9201      	str	r2, [sp, #4]
    9164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9166:	9200      	str	r2, [sp, #0]
    9168:	4642      	mov	r2, r8
    916a:	f7fa fe8d 	bl	3e88 <arch_new_thread>
	if (!_current) {
    916e:	4b05      	ldr	r3, [pc, #20]	; (9184 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    9170:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    9172:	689b      	ldr	r3, [r3, #8]
    9174:	b103      	cbz	r3, 9178 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    9176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
}
    9178:	4640      	mov	r0, r8
    917a:	66e3      	str	r3, [r4, #108]	; 0x6c
    917c:	b004      	add	sp, #16
    917e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9182:	bf00      	nop
    9184:	200143e0 	.word	0x200143e0

00009188 <z_impl_k_thread_create>:
{
    9188:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    918a:	2500      	movs	r5, #0
{
    918c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    918e:	9505      	str	r5, [sp, #20]
    9190:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    9192:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9196:	9504      	str	r5, [sp, #16]
    9198:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    919a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    919c:	9503      	str	r5, [sp, #12]
    919e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    91a0:	9502      	str	r5, [sp, #8]
    91a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    91a4:	9501      	str	r5, [sp, #4]
    91a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    91a8:	9500      	str	r5, [sp, #0]
    91aa:	f7ff ffbd 	bl	9128 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    91ae:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    91b2:	bf08      	it	eq
    91b4:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    91b8:	d005      	beq.n	91c6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    91ba:	ea56 0307 	orrs.w	r3, r6, r7
    91be:	d105      	bne.n	91cc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    91c0:	4620      	mov	r0, r4
    91c2:	f000 fbaf 	bl	9924 <z_sched_start>
}
    91c6:	4620      	mov	r0, r4
    91c8:	b007      	add	sp, #28
    91ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    91cc:	463a      	mov	r2, r7
    91ce:	4633      	mov	r3, r6
    91d0:	4902      	ldr	r1, [pc, #8]	; (91dc <z_impl_k_thread_create+0x54>)
    91d2:	f104 0018 	add.w	r0, r4, #24
    91d6:	f000 fdb7 	bl	9d48 <z_add_timeout>
    91da:	e7f4      	b.n	91c6 <z_impl_k_thread_create+0x3e>
    91dc:	0000e1e3 	.word	0x0000e1e3

000091e0 <z_init_static_threads>:
{
    91e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    91e4:	4c29      	ldr	r4, [pc, #164]	; (928c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    91e6:	4d2a      	ldr	r5, [pc, #168]	; (9290 <z_init_static_threads+0xb0>)
{
    91e8:	b087      	sub	sp, #28
    91ea:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    91ec:	42ae      	cmp	r6, r5
    91ee:	f104 0430 	add.w	r4, r4, #48	; 0x30
    91f2:	d30f      	bcc.n	9214 <z_init_static_threads+0x34>
	k_sched_lock();
    91f4:	f000 fbe6 	bl	99c4 <k_sched_lock>
    91f8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    91fc:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    9200:	4c22      	ldr	r4, [pc, #136]	; (928c <z_init_static_threads+0xac>)
    9202:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9294 <z_init_static_threads+0xb4>
    9206:	42ac      	cmp	r4, r5
    9208:	d320      	bcc.n	924c <z_init_static_threads+0x6c>
}
    920a:	b007      	add	sp, #28
    920c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    9210:	f000 bbec 	b.w	99ec <k_sched_unlock>
		z_setup_new_thread(
    9214:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9218:	9305      	str	r3, [sp, #20]
    921a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    921e:	9304      	str	r3, [sp, #16]
    9220:	f854 3c14 	ldr.w	r3, [r4, #-20]
    9224:	9303      	str	r3, [sp, #12]
    9226:	f854 3c18 	ldr.w	r3, [r4, #-24]
    922a:	9302      	str	r3, [sp, #8]
    922c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    9230:	9301      	str	r3, [sp, #4]
    9232:	f854 3c20 	ldr.w	r3, [r4, #-32]
    9236:	9300      	str	r3, [sp, #0]
    9238:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    923c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    9240:	f7ff ff72 	bl	9128 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    9244:	f854 3c30 	ldr.w	r3, [r4, #-48]
    9248:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    924a:	e7ce      	b.n	91ea <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    924c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    924e:	1c5a      	adds	r2, r3, #1
    9250:	d00d      	beq.n	926e <z_init_static_threads+0x8e>
    9252:	2100      	movs	r1, #0
    9254:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    9256:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    925a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    925e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    9262:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9266:	d104      	bne.n	9272 <z_init_static_threads+0x92>
	z_sched_start(thread);
    9268:	4640      	mov	r0, r8
    926a:	f000 fb5b 	bl	9924 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    926e:	3430      	adds	r4, #48	; 0x30
    9270:	e7c9      	b.n	9206 <z_init_static_threads+0x26>
    9272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9276:	2300      	movs	r3, #0
    9278:	f7f6 ff6c 	bl	154 <__aeabi_uldivmod>
    927c:	4602      	mov	r2, r0
    927e:	460b      	mov	r3, r1
    9280:	f108 0018 	add.w	r0, r8, #24
    9284:	4649      	mov	r1, r9
    9286:	f000 fd5f 	bl	9d48 <z_add_timeout>
    928a:	e7f0      	b.n	926e <z_init_static_threads+0x8e>
    928c:	0000e8e8 	.word	0x0000e8e8
    9290:	0000e8e8 	.word	0x0000e8e8
    9294:	0000e1e3 	.word	0x0000e1e3

00009298 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    9298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    929c:	4604      	mov	r4, r0
    929e:	4617      	mov	r7, r2
    92a0:	461e      	mov	r6, r3
	__asm__ volatile(
    92a2:	f04f 0320 	mov.w	r3, #32
    92a6:	f3ef 8811 	mrs	r8, BASEPRI
    92aa:	f383 8812 	msr	BASEPRI_MAX, r3
    92ae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    92b2:	68c3      	ldr	r3, [r0, #12]
    92b4:	4a33      	ldr	r2, [pc, #204]	; (9384 <z_impl_k_mutex_lock+0xec>)
    92b6:	b17b      	cbz	r3, 92d8 <z_impl_k_mutex_lock+0x40>
    92b8:	6880      	ldr	r0, [r0, #8]
    92ba:	6891      	ldr	r1, [r2, #8]
    92bc:	4288      	cmp	r0, r1
    92be:	d019      	beq.n	92f4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    92c0:	ea57 0306 	orrs.w	r3, r7, r6
    92c4:	d118      	bne.n	92f8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    92c6:	f388 8811 	msr	BASEPRI, r8
    92ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    92ce:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    92d2:	b002      	add	sp, #8
    92d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    92d8:	6891      	ldr	r1, [r2, #8]
    92da:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    92de:	3301      	adds	r3, #1
    92e0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    92e2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    92e4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    92e6:	60a3      	str	r3, [r4, #8]
    92e8:	f388 8811 	msr	BASEPRI, r8
    92ec:	f3bf 8f6f 	isb	sy
		return 0;
    92f0:	2000      	movs	r0, #0
    92f2:	e7ee      	b.n	92d2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    92f4:	6921      	ldr	r1, [r4, #16]
    92f6:	e7f2      	b.n	92de <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    92f8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    92fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    9300:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    9304:	4299      	cmp	r1, r3
    9306:	bfa8      	it	ge
    9308:	4619      	movge	r1, r3
    930a:	4291      	cmp	r1, r2
    930c:	bfb8      	it	lt
    930e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    9310:	428b      	cmp	r3, r1
    9312:	dd2e      	ble.n	9372 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    9314:	f004 fe57 	bl	dfc6 <adjust_owner_prio.isra.0>
    9318:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    931a:	4622      	mov	r2, r4
    931c:	4641      	mov	r1, r8
    931e:	e9cd 7600 	strd	r7, r6, [sp]
    9322:	4819      	ldr	r0, [pc, #100]	; (9388 <z_impl_k_mutex_lock+0xf0>)
    9324:	f000 fa8e 	bl	9844 <z_pend_curr>
	if (got_mutex == 0) {
    9328:	2800      	cmp	r0, #0
    932a:	d0e1      	beq.n	92f0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    932c:	f04f 0320 	mov.w	r3, #32
    9330:	f3ef 8611 	mrs	r6, BASEPRI
    9334:	f383 8812 	msr	BASEPRI_MAX, r3
    9338:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    933c:	68a0      	ldr	r0, [r4, #8]
    933e:	b1d0      	cbz	r0, 9376 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9340:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9342:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9344:	429c      	cmp	r4, r3
    9346:	d00a      	beq.n	935e <z_impl_k_mutex_lock+0xc6>
    9348:	b14b      	cbz	r3, 935e <z_impl_k_mutex_lock+0xc6>
    934a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    934e:	4299      	cmp	r1, r3
    9350:	bfa8      	it	ge
    9352:	4619      	movge	r1, r3
    9354:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    9358:	4299      	cmp	r1, r3
    935a:	bfb8      	it	lt
    935c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    935e:	f004 fe32 	bl	dfc6 <adjust_owner_prio.isra.0>
    9362:	b140      	cbz	r0, 9376 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    9364:	4631      	mov	r1, r6
    9366:	4808      	ldr	r0, [pc, #32]	; (9388 <z_impl_k_mutex_lock+0xf0>)
    9368:	f000 faca 	bl	9900 <z_reschedule>
	return -EAGAIN;
    936c:	f06f 000a 	mvn.w	r0, #10
    9370:	e7af      	b.n	92d2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    9372:	2500      	movs	r5, #0
    9374:	e7d1      	b.n	931a <z_impl_k_mutex_lock+0x82>
	if (resched) {
    9376:	2d00      	cmp	r5, #0
    9378:	d1f4      	bne.n	9364 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    937a:	f386 8811 	msr	BASEPRI, r6
    937e:	f3bf 8f6f 	isb	sy
    9382:	e7f3      	b.n	936c <z_impl_k_mutex_lock+0xd4>
    9384:	200143e0 	.word	0x200143e0
    9388:	20056807 	.word	0x20056807

0000938c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    938c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    938e:	6883      	ldr	r3, [r0, #8]
{
    9390:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    9392:	b36b      	cbz	r3, 93f0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    9394:	4a19      	ldr	r2, [pc, #100]	; (93fc <z_impl_k_mutex_unlock+0x70>)
    9396:	6892      	ldr	r2, [r2, #8]
    9398:	4293      	cmp	r3, r2
    939a:	d12c      	bne.n	93f6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    939c:	68c3      	ldr	r3, [r0, #12]
    939e:	2b01      	cmp	r3, #1
    93a0:	d903      	bls.n	93aa <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    93a2:	3b01      	subs	r3, #1
    93a4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    93a6:	2000      	movs	r0, #0
}
    93a8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    93aa:	f04f 0320 	mov.w	r3, #32
    93ae:	f3ef 8511 	mrs	r5, BASEPRI
    93b2:	f383 8812 	msr	BASEPRI_MAX, r3
    93b6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    93ba:	6901      	ldr	r1, [r0, #16]
    93bc:	6880      	ldr	r0, [r0, #8]
    93be:	f004 fe02 	bl	dfc6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    93c2:	4620      	mov	r0, r4
    93c4:	f004 ff66 	bl	e294 <z_unpend_first_thread>
	mutex->owner = new_owner;
    93c8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    93ca:	b158      	cbz	r0, 93e4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    93cc:	f990 200e 	ldrsb.w	r2, [r0, #14]
    93d0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    93d2:	2200      	movs	r2, #0
    93d4:	6742      	str	r2, [r0, #116]	; 0x74
		z_ready_thread(new_owner);
    93d6:	f004 ff26 	bl	e226 <z_ready_thread>
		z_reschedule(&lock, key);
    93da:	4629      	mov	r1, r5
    93dc:	4808      	ldr	r0, [pc, #32]	; (9400 <z_impl_k_mutex_unlock+0x74>)
    93de:	f000 fa8f 	bl	9900 <z_reschedule>
    93e2:	e7e0      	b.n	93a6 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    93e4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    93e6:	f385 8811 	msr	BASEPRI, r5
    93ea:	f3bf 8f6f 	isb	sy
    93ee:	e7da      	b.n	93a6 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    93f0:	f06f 0015 	mvn.w	r0, #21
    93f4:	e7d8      	b.n	93a8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    93f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    93fa:	e7d5      	b.n	93a8 <z_impl_k_mutex_unlock+0x1c>
    93fc:	200143e0 	.word	0x200143e0
    9400:	20056807 	.word	0x20056807

00009404 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    9404:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9406:	4611      	mov	r1, r2
	__asm__ volatile(
    9408:	f04f 0220 	mov.w	r2, #32
    940c:	f3ef 8511 	mrs	r5, BASEPRI
    9410:	f382 8812 	msr	BASEPRI_MAX, r2
    9414:	f3bf 8f6f 	isb	sy
    9418:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    941a:	b19c      	cbz	r4, 9444 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    941c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    941e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9420:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9424:	4294      	cmp	r4, r2
	list->head = node;
    9426:	6003      	str	r3, [r0, #0]
	list->tail = node;
    9428:	bf08      	it	eq
    942a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    942c:	2101      	movs	r1, #1
    942e:	4620      	mov	r0, r4
    9430:	f004 fe3a 	bl	e0a8 <z_queue_node_peek>
    9434:	4604      	mov	r4, r0
	__asm__ volatile(
    9436:	f385 8811 	msr	BASEPRI, r5
    943a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    943e:	4620      	mov	r0, r4
    9440:	b003      	add	sp, #12
    9442:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9444:	ea51 0203 	orrs.w	r2, r1, r3
    9448:	d0f5      	beq.n	9436 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    944a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    944e:	e9cd 1300 	strd	r1, r3, [sp]
    9452:	4610      	mov	r0, r2
    9454:	4629      	mov	r1, r5
    9456:	f000 f9f5 	bl	9844 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    945a:	2800      	cmp	r0, #0
    945c:	d1ef      	bne.n	943e <z_impl_k_queue_get+0x3a>
    945e:	4b02      	ldr	r3, [pc, #8]	; (9468 <z_impl_k_queue_get+0x64>)
    9460:	689b      	ldr	r3, [r3, #8]
    9462:	695c      	ldr	r4, [r3, #20]
    9464:	e7eb      	b.n	943e <z_impl_k_queue_get+0x3a>
    9466:	bf00      	nop
    9468:	200143e0 	.word	0x200143e0

0000946c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    946c:	b538      	push	{r3, r4, r5, lr}
    946e:	4604      	mov	r4, r0
	__asm__ volatile(
    9470:	f04f 0320 	mov.w	r3, #32
    9474:	f3ef 8511 	mrs	r5, BASEPRI
    9478:	f383 8812 	msr	BASEPRI_MAX, r3
    947c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    9480:	f004 ff08 	bl	e294 <z_unpend_first_thread>

	if (thread != NULL) {
    9484:	b148      	cbz	r0, 949a <z_impl_k_sem_give+0x2e>
    9486:	2200      	movs	r2, #0
    9488:	6742      	str	r2, [r0, #116]	; 0x74
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    948a:	f004 fecc 	bl	e226 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    948e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    9490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    9494:	4804      	ldr	r0, [pc, #16]	; (94a8 <z_impl_k_sem_give+0x3c>)
    9496:	f000 ba33 	b.w	9900 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    949a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    949e:	429a      	cmp	r2, r3
    94a0:	bf18      	it	ne
    94a2:	3301      	addne	r3, #1
    94a4:	60a3      	str	r3, [r4, #8]
}
    94a6:	e7f2      	b.n	948e <z_impl_k_sem_give+0x22>
    94a8:	20056807 	.word	0x20056807

000094ac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    94ac:	b513      	push	{r0, r1, r4, lr}
    94ae:	f04f 0420 	mov.w	r4, #32
    94b2:	f3ef 8111 	mrs	r1, BASEPRI
    94b6:	f384 8812 	msr	BASEPRI_MAX, r4
    94ba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    94be:	6884      	ldr	r4, [r0, #8]
    94c0:	b144      	cbz	r4, 94d4 <z_impl_k_sem_take+0x28>
		sem->count--;
    94c2:	3c01      	subs	r4, #1
    94c4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    94c6:	f381 8811 	msr	BASEPRI, r1
    94ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    94ce:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    94d0:	b002      	add	sp, #8
    94d2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    94d4:	ea52 0403 	orrs.w	r4, r2, r3
    94d8:	d106      	bne.n	94e8 <z_impl_k_sem_take+0x3c>
    94da:	f381 8811 	msr	BASEPRI, r1
    94de:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    94e2:	f06f 000f 	mvn.w	r0, #15
    94e6:	e7f3      	b.n	94d0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    94e8:	e9cd 2300 	strd	r2, r3, [sp]
    94ec:	4602      	mov	r2, r0
    94ee:	4802      	ldr	r0, [pc, #8]	; (94f8 <z_impl_k_sem_take+0x4c>)
    94f0:	f000 f9a8 	bl	9844 <z_pend_curr>
	return ret;
    94f4:	e7ec      	b.n	94d0 <z_impl_k_sem_take+0x24>
    94f6:	bf00      	nop
    94f8:	20056807 	.word	0x20056807

000094fc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    94fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9500:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    9502:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    9506:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	return list->head;
    950a:	4e46      	ldr	r6, [pc, #280]	; (9624 <work_queue_main+0x128>)
{
    950c:	b085      	sub	sp, #20
	__asm__ volatile(
    950e:	f04f 0320 	mov.w	r3, #32
    9512:	f3ef 8711 	mrs	r7, BASEPRI
    9516:	f383 8812 	msr	BASEPRI_MAX, r3
    951a:	f3bf 8f6f 	isb	sy
    951e:	6fa5      	ldr	r5, [r4, #120]	; 0x78
Z_GENLIST_GET(slist, snode)
    9520:	b98d      	cbnz	r5, 9546 <work_queue_main+0x4a>
		} else if (flag_test_and_clear(&queue->flags,
    9522:	2102      	movs	r1, #2
    9524:	f104 0090 	add.w	r0, r4, #144	; 0x90
    9528:	f004 fde1 	bl	e0ee <flag_test_and_clear>
    952c:	2800      	cmp	r0, #0
    952e:	d140      	bne.n	95b2 <work_queue_main+0xb6>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    9530:	2300      	movs	r3, #0
    9532:	4639      	mov	r1, r7
    9534:	e9cd 8900 	strd	r8, r9, [sp]
    9538:	9302      	str	r3, [sp, #8]
    953a:	f104 0280 	add.w	r2, r4, #128	; 0x80
    953e:	483a      	ldr	r0, [pc, #232]	; (9628 <work_queue_main+0x12c>)
    9540:	f000 fb90 	bl	9c64 <z_sched_wait>
			continue;
    9544:	e7e3      	b.n	950e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9546:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	return node->next;
    9548:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    954a:	4295      	cmp	r5, r2
	list->head = node;
    954c:	67a3      	str	r3, [r4, #120]	; 0x78
	list->tail = node;
    954e:	bf08      	it	eq
    9550:	67e3      	streq	r3, [r4, #124]	; 0x7c
	*flagp |= BIT(bit);
    9552:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    9556:	f043 0302 	orr.w	r3, r3, #2
    955a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	*flagp &= ~BIT(bit);
    955e:	68eb      	ldr	r3, [r5, #12]
    9560:	f023 0304 	bic.w	r3, r3, #4
    9564:	f043 0301 	orr.w	r3, r3, #1
    9568:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    956a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    956c:	f387 8811 	msr	BASEPRI, r7
    9570:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    9574:	4628      	mov	r0, r5
    9576:	4798      	blx	r3
	__asm__ volatile(
    9578:	f04f 0320 	mov.w	r3, #32
    957c:	f3ef 8b11 	mrs	fp, BASEPRI
    9580:	f383 8812 	msr	BASEPRI_MAX, r3
    9584:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    9588:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    958a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    958c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9590:	d419      	bmi.n	95c6 <work_queue_main+0xca>
	*flagp &= ~BIT(bit);
    9592:	60ea      	str	r2, [r5, #12]
    9594:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    9598:	f023 0302 	bic.w	r3, r3, #2
    959c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	__asm__ volatile(
    95a0:	f38b 8811 	msr	BASEPRI, fp
    95a4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    95a8:	05db      	lsls	r3, r3, #23
    95aa:	d4b0      	bmi.n	950e <work_queue_main+0x12>
	z_impl_k_yield();
    95ac:	f000 fa42 	bl	9a34 <z_impl_k_yield>
}
    95b0:	e7ad      	b.n	950e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    95b2:	f104 0588 	add.w	r5, r4, #136	; 0x88
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    95b6:	2200      	movs	r2, #0
    95b8:	2101      	movs	r1, #1
    95ba:	4628      	mov	r0, r5
    95bc:	f004 fec0 	bl	e340 <z_sched_wake>
    95c0:	2800      	cmp	r0, #0
    95c2:	d1f8      	bne.n	95b6 <work_queue_main+0xba>
    95c4:	e7b4      	b.n	9530 <work_queue_main+0x34>
	return list->head;
    95c6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    95c8:	f023 0303 	bic.w	r3, r3, #3
    95cc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    95ce:	2800      	cmp	r0, #0
    95d0:	d0e0      	beq.n	9594 <work_queue_main+0x98>
	return node->next;
    95d2:	2700      	movs	r7, #0
	parent->next = child;
    95d4:	463b      	mov	r3, r7
	return node->next;
    95d6:	f8d0 a000 	ldr.w	sl, [r0]
    95da:	2800      	cmp	r0, #0
    95dc:	d0da      	beq.n	9594 <work_queue_main+0x98>
		if (wc->work == work) {
    95de:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    95e0:	4601      	mov	r1, r0
		if (wc->work == work) {
    95e2:	4295      	cmp	r5, r2
    95e4:	d10c      	bne.n	9600 <work_queue_main+0x104>
    95e6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    95e8:	b99f      	cbnz	r7, 9612 <work_queue_main+0x116>
    95ea:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    95ec:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    95ee:	4282      	cmp	r2, r0
    95f0:	d100      	bne.n	95f4 <work_queue_main+0xf8>
	list->tail = node;
    95f2:	6071      	str	r1, [r6, #4]
	parent->next = child;
    95f4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    95f8:	f7ff ff38 	bl	946c <z_impl_k_sem_give>
}
    95fc:	4639      	mov	r1, r7
    95fe:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9600:	f1ba 0f00 	cmp.w	sl, #0
    9604:	d00b      	beq.n	961e <work_queue_main+0x122>
	return node->next;
    9606:	f8da 2000 	ldr.w	r2, [sl]
    960a:	4650      	mov	r0, sl
    960c:	460f      	mov	r7, r1
    960e:	4692      	mov	sl, r2
    9610:	e7e3      	b.n	95da <work_queue_main+0xde>
	parent->next = child;
    9612:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    9614:	6872      	ldr	r2, [r6, #4]
    9616:	4282      	cmp	r2, r0
	list->tail = node;
    9618:	bf08      	it	eq
    961a:	6077      	streq	r7, [r6, #4]
}
    961c:	e7ea      	b.n	95f4 <work_queue_main+0xf8>
    961e:	4652      	mov	r2, sl
    9620:	e7f3      	b.n	960a <work_queue_main+0x10e>
    9622:	bf00      	nop
    9624:	20014400 	.word	0x20014400
    9628:	20056807 	.word	0x20056807

0000962c <submit_to_queue_locked>:
{
    962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    962e:	68c3      	ldr	r3, [r0, #12]
{
    9630:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9632:	079a      	lsls	r2, r3, #30
{
    9634:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9636:	f3c3 0640 	ubfx	r6, r3, #1, #1
    963a:	d42c      	bmi.n	9696 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    963c:	075b      	lsls	r3, r3, #29
    963e:	d41a      	bmi.n	9676 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    9640:	680b      	ldr	r3, [r1, #0]
    9642:	b90b      	cbnz	r3, 9648 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    9644:	6883      	ldr	r3, [r0, #8]
    9646:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    9648:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    964a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    964c:	bf42      	ittt	mi
    964e:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
    9650:	2602      	movmi	r6, #2
			*queuep = work->queue;
    9652:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    9654:	683d      	ldr	r5, [r7, #0]
		ret = 1;
    9656:	bf58      	it	pl
    9658:	2601      	movpl	r6, #1
	if (queue == NULL) {
    965a:	2d00      	cmp	r5, #0
    965c:	d038      	beq.n	96d0 <submit_to_queue_locked+0xa4>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    965e:	4b1e      	ldr	r3, [pc, #120]	; (96d8 <submit_to_queue_locked+0xac>)
    9660:	689b      	ldr	r3, [r3, #8]
    9662:	42ab      	cmp	r3, r5
    9664:	d00a      	beq.n	967c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    9666:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    966a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    966c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9670:	d414      	bmi.n	969c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    9672:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    9676:	2300      	movs	r3, #0
    9678:	603b      	str	r3, [r7, #0]
	return ret;
    967a:	e024      	b.n	96c6 <submit_to_queue_locked+0x9a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    967c:	f004 fc8c 	bl	df98 <k_is_in_isr>
    9680:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    9684:	2800      	cmp	r0, #0
    9686:	d1f0      	bne.n	966a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9688:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    968a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    968e:	d5f0      	bpl.n	9672 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    9690:	b152      	cbz	r2, 96a8 <submit_to_queue_locked+0x7c>
    9692:	075b      	lsls	r3, r3, #29
    9694:	d408      	bmi.n	96a8 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    9696:	f06f 060f 	mvn.w	r6, #15
    969a:	e7ec      	b.n	9676 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    969c:	2a00      	cmp	r2, #0
    969e:	d1fa      	bne.n	9696 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    96a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    96a4:	2b00      	cmp	r3, #0
    96a6:	d1f6      	bne.n	9696 <submit_to_queue_locked+0x6a>
	parent->next = child;
    96a8:	2300      	movs	r3, #0
    96aa:	6023      	str	r3, [r4, #0]
	return list->tail;
    96ac:	6feb      	ldr	r3, [r5, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
    96ae:	b963      	cbnz	r3, 96ca <submit_to_queue_locked+0x9e>
	list->head = node;
    96b0:	e9c5 441e 	strd	r4, r4, [r5, #120]	; 0x78
		(void)notify_queue_locked(queue);
    96b4:	4628      	mov	r0, r5
    96b6:	f004 fd25 	bl	e104 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    96ba:	68e3      	ldr	r3, [r4, #12]
    96bc:	f043 0304 	orr.w	r3, r3, #4
    96c0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    96c2:	683b      	ldr	r3, [r7, #0]
    96c4:	60a3      	str	r3, [r4, #8]
}
    96c6:	4630      	mov	r0, r6
    96c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    96ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
    96cc:	67ec      	str	r4, [r5, #124]	; 0x7c
}
    96ce:	e7f1      	b.n	96b4 <submit_to_queue_locked+0x88>
		return -EINVAL;
    96d0:	f06f 0615 	mvn.w	r6, #21
    96d4:	e7cf      	b.n	9676 <submit_to_queue_locked+0x4a>
    96d6:	bf00      	nop
    96d8:	200143e0 	.word	0x200143e0

000096dc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    96dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    96de:	4604      	mov	r4, r0
	list->head = NULL;
    96e0:	2000      	movs	r0, #0
    96e2:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
    96e4:	e9c4 001e 	strd	r0, r0, [r4, #120]	; 0x78
    96e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    96ea:	f104 0080 	add.w	r0, r4, #128	; 0x80
	list->tail = (sys_dnode_t *)list;
    96ee:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    96f2:	f104 0088 	add.w	r0, r4, #136	; 0x88
    96f6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    96fa:	b31d      	cbz	r5, 9744 <k_work_queue_start+0x68>
    96fc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    96fe:	2800      	cmp	r0, #0
    9700:	f240 1001 	movw	r0, #257	; 0x101
    9704:	bf08      	it	eq
    9706:	2001      	moveq	r0, #1
	*flagp = flags;
    9708:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    970c:	2000      	movs	r0, #0
    970e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    9712:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    9716:	e9cd 3003 	strd	r3, r0, [sp, #12]
    971a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    971e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    9722:	4620      	mov	r0, r4
    9724:	4b08      	ldr	r3, [pc, #32]	; (9748 <k_work_queue_start+0x6c>)
    9726:	9400      	str	r4, [sp, #0]
    9728:	f7ff fd2e 	bl	9188 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    972c:	b125      	cbz	r5, 9738 <k_work_queue_start+0x5c>
    972e:	6829      	ldr	r1, [r5, #0]
    9730:	b111      	cbz	r1, 9738 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    9732:	4620      	mov	r0, r4
    9734:	f004 fc36 	bl	dfa4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    9738:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    973a:	b009      	add	sp, #36	; 0x24
    973c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9740:	f004 bc33 	b.w	dfaa <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9744:	2001      	movs	r0, #1
    9746:	e7df      	b.n	9708 <k_work_queue_start+0x2c>
    9748:	000094fd 	.word	0x000094fd

0000974c <update_cache>:
	return list->head == list;
    974c:	4a0a      	ldr	r2, [pc, #40]	; (9778 <update_cache+0x2c>)
    974e:	4611      	mov	r1, r2
    9750:	f851 3f18 	ldr.w	r3, [r1, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9754:	428b      	cmp	r3, r1
    9756:	d000      	beq.n	975a <update_cache+0xe>
	 * the queue (actually we have to, otherwise the assembly
	 * context switch code for all architectures would be
	 * responsible for putting it back in z_swap and ISR return!),
	 * which makes this choice simple.
	 */
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9758:	b903      	cbnz	r3, 975c <update_cache+0x10>
    975a:	68d3      	ldr	r3, [r2, #12]
	if (preempt_ok != 0) {
    975c:	b948      	cbnz	r0, 9772 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    975e:	6891      	ldr	r1, [r2, #8]
    9760:	7b48      	ldrb	r0, [r1, #13]
    9762:	06c0      	lsls	r0, r0, #27
    9764:	d105      	bne.n	9772 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    9766:	6998      	ldr	r0, [r3, #24]
    9768:	b918      	cbnz	r0, 9772 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    976a:	89c8      	ldrh	r0, [r1, #14]
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
	} else {
		_kernel.ready_q.cache = _current;
    976c:	287f      	cmp	r0, #127	; 0x7f
    976e:	bf88      	it	hi
    9770:	460b      	movhi	r3, r1
    9772:	6153      	str	r3, [r2, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    9774:	4770      	bx	lr
    9776:	bf00      	nop
    9778:	200143e0 	.word	0x200143e0

0000977c <unready_thread>:

	return thread->base.pended_on;
}

static void unready_thread(struct k_thread *thread)
{
    977c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    977e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    9782:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    9784:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    9786:	7b43      	ldrb	r3, [r0, #13]
    9788:	da04      	bge.n	9794 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    978a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    978e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    9790:	f004 fced 	bl	e16e <sys_dlist_remove>
	update_cache(thread == _current);
    9794:	4b04      	ldr	r3, [pc, #16]	; (97a8 <unready_thread+0x2c>)
    9796:	6898      	ldr	r0, [r3, #8]
    9798:	1a43      	subs	r3, r0, r1
    979a:	4258      	negs	r0, r3
    979c:	4158      	adcs	r0, r3
}
    979e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    97a2:	f7ff bfd3 	b.w	974c <update_cache>
    97a6:	bf00      	nop
    97a8:	200143e0 	.word	0x200143e0

000097ac <pend_locked>:
{
    97ac:	b570      	push	{r4, r5, r6, lr}
    97ae:	4615      	mov	r5, r2
    97b0:	461c      	mov	r4, r3
    97b2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    97b4:	f004 fced 	bl	e192 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    97b8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    97bc:	bf08      	it	eq
    97be:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    97c2:	d008      	beq.n	97d6 <pend_locked+0x2a>
    97c4:	462a      	mov	r2, r5
    97c6:	4623      	mov	r3, r4
    97c8:	f106 0018 	add.w	r0, r6, #24
    97cc:	4902      	ldr	r1, [pc, #8]	; (97d8 <pend_locked+0x2c>)
}
    97ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    97d2:	f000 bab9 	b.w	9d48 <z_add_timeout>
    97d6:	bd70      	pop	{r4, r5, r6, pc}
    97d8:	0000e1e3 	.word	0x0000e1e3

000097dc <ready_thread>:
{
    97dc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    97de:	f990 300d 	ldrsb.w	r3, [r0, #13]
    97e2:	7b42      	ldrb	r2, [r0, #13]
    97e4:	2b00      	cmp	r3, #0
    97e6:	db29      	blt.n	983c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    97e8:	06d3      	lsls	r3, r2, #27
    97ea:	d127      	bne.n	983c <ready_thread+0x60>
	return node->next != NULL;
    97ec:	6983      	ldr	r3, [r0, #24]
    97ee:	bb2b      	cbnz	r3, 983c <ready_thread+0x60>
	return list->head == list;
    97f0:	4913      	ldr	r1, [pc, #76]	; (9840 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    97f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    97f6:	7342      	strb	r2, [r0, #13]
    97f8:	460a      	mov	r2, r1
    97fa:	f852 4f18 	ldr.w	r4, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    97fe:	4294      	cmp	r4, r2
    9800:	bf18      	it	ne
    9802:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9804:	69cc      	ldr	r4, [r1, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9806:	b923      	cbnz	r3, 9812 <ready_thread+0x36>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    9808:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
    980c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    980e:	61c8      	str	r0, [r1, #28]
}
    9810:	e00c      	b.n	982c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    9812:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    9816:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    981a:	42b5      	cmp	r5, r6
    981c:	d00a      	beq.n	9834 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    981e:	42ae      	cmp	r6, r5
    9820:	dd08      	ble.n	9834 <ready_thread+0x58>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    9822:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
    9824:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    9828:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    982a:	6058      	str	r0, [r3, #4]
		update_cache(0);
    982c:	2000      	movs	r0, #0
}
    982e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    9830:	f7ff bf8c 	b.w	974c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    9834:	429c      	cmp	r4, r3
    9836:	d0e7      	beq.n	9808 <ready_thread+0x2c>
    9838:	681b      	ldr	r3, [r3, #0]
    983a:	e7e4      	b.n	9806 <ready_thread+0x2a>
}
    983c:	bc70      	pop	{r4, r5, r6}
    983e:	4770      	bx	lr
    9840:	200143e0 	.word	0x200143e0

00009844 <z_pend_curr>:
{
    9844:	b538      	push	{r3, r4, r5, lr}
    9846:	460c      	mov	r4, r1
    9848:	4611      	mov	r1, r2
    984a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    984e:	f04f 0520 	mov.w	r5, #32
    9852:	f3ef 8011 	mrs	r0, BASEPRI
    9856:	f385 8812 	msr	BASEPRI_MAX, r5
    985a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    985e:	4804      	ldr	r0, [pc, #16]	; (9870 <z_pend_curr+0x2c>)
    9860:	6880      	ldr	r0, [r0, #8]
    9862:	f7ff ffa3 	bl	97ac <pend_locked>
	ret = arch_swap(key);
    9866:	4620      	mov	r0, r4
}
    9868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    986c:	f7fa bab6 	b.w	3ddc <arch_swap>
    9870:	200143e0 	.word	0x200143e0

00009874 <z_set_prio>:
{
    9874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9876:	4604      	mov	r4, r0
    9878:	f04f 0320 	mov.w	r3, #32
    987c:	f3ef 8611 	mrs	r6, BASEPRI
    9880:	f383 8812 	msr	BASEPRI_MAX, r3
    9884:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    9888:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    988a:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    988c:	06da      	lsls	r2, r3, #27
    988e:	d119      	bne.n	98c4 <z_set_prio+0x50>
	return node->next != NULL;
    9890:	6985      	ldr	r5, [r0, #24]
    9892:	b9bd      	cbnz	r5, 98c4 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9898:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    989a:	f004 fc68 	bl	e16e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    989e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    98a0:	4a16      	ldr	r2, [pc, #88]	; (98fc <z_set_prio+0x88>)
    98a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    98a6:	7343      	strb	r3, [r0, #13]
    98a8:	4613      	mov	r3, r2
				thread->base.prio = prio;
    98aa:	7381      	strb	r1, [r0, #14]
    98ac:	f853 0f18 	ldr.w	r0, [r3, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    98b0:	4298      	cmp	r0, r3
    98b2:	bf18      	it	ne
    98b4:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    98b6:	69d0      	ldr	r0, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    98b8:	b95d      	cbnz	r5, 98d2 <z_set_prio+0x5e>
	node->prev = tail;
    98ba:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    98be:	6004      	str	r4, [r0, #0]
	list->tail = node;
    98c0:	61d4      	str	r4, [r2, #28]
}
    98c2:	e011      	b.n	98e8 <z_set_prio+0x74>
    98c4:	2000      	movs	r0, #0
			thread->base.prio = prio;
    98c6:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    98c8:	f386 8811 	msr	BASEPRI, r6
    98cc:	f3bf 8f6f 	isb	sy
}
    98d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    98d2:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    98d6:	42b9      	cmp	r1, r7
    98d8:	d00b      	beq.n	98f2 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    98da:	428f      	cmp	r7, r1
    98dc:	dd09      	ble.n	98f2 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    98de:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    98e0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    98e4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    98e6:	606c      	str	r4, [r5, #4]
			update_cache(1);
    98e8:	2001      	movs	r0, #1
    98ea:	f7ff ff2f 	bl	974c <update_cache>
    98ee:	2001      	movs	r0, #1
    98f0:	e7ea      	b.n	98c8 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    98f2:	42a8      	cmp	r0, r5
    98f4:	d0e1      	beq.n	98ba <z_set_prio+0x46>
    98f6:	682d      	ldr	r5, [r5, #0]
    98f8:	e7de      	b.n	98b8 <z_set_prio+0x44>
    98fa:	bf00      	nop
    98fc:	200143e0 	.word	0x200143e0

00009900 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9900:	b949      	cbnz	r1, 9916 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9902:	f3ef 8005 	mrs	r0, IPSR
    9906:	b930      	cbnz	r0, 9916 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    9908:	4b05      	ldr	r3, [pc, #20]	; (9920 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    990a:	695a      	ldr	r2, [r3, #20]
    990c:	689b      	ldr	r3, [r3, #8]
    990e:	429a      	cmp	r2, r3
    9910:	d001      	beq.n	9916 <z_reschedule+0x16>
    9912:	f7fa ba63 	b.w	3ddc <arch_swap>
    9916:	f381 8811 	msr	BASEPRI, r1
    991a:	f3bf 8f6f 	isb	sy
}
    991e:	4770      	bx	lr
    9920:	200143e0 	.word	0x200143e0

00009924 <z_sched_start>:
{
    9924:	b510      	push	{r4, lr}
	__asm__ volatile(
    9926:	f04f 0220 	mov.w	r2, #32
    992a:	f3ef 8411 	mrs	r4, BASEPRI
    992e:	f382 8812 	msr	BASEPRI_MAX, r2
    9932:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    9936:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    9938:	0751      	lsls	r1, r2, #29
    993a:	d404      	bmi.n	9946 <z_sched_start+0x22>
	__asm__ volatile(
    993c:	f384 8811 	msr	BASEPRI, r4
    9940:	f3bf 8f6f 	isb	sy
}
    9944:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9946:	f022 0204 	bic.w	r2, r2, #4
    994a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    994c:	f7ff ff46 	bl	97dc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    9950:	4621      	mov	r1, r4
}
    9952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    9956:	4801      	ldr	r0, [pc, #4]	; (995c <z_sched_start+0x38>)
    9958:	f7ff bfd2 	b.w	9900 <z_reschedule>
    995c:	20056807 	.word	0x20056807

00009960 <z_impl_k_thread_suspend>:
{
    9960:	b570      	push	{r4, r5, r6, lr}
    9962:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    9964:	3018      	adds	r0, #24
    9966:	f004 fd0e 	bl	e386 <z_abort_timeout>
	__asm__ volatile(
    996a:	f04f 0320 	mov.w	r3, #32
    996e:	f3ef 8611 	mrs	r6, BASEPRI
    9972:	f383 8812 	msr	BASEPRI_MAX, r3
    9976:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    997a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    997e:	7b63      	ldrb	r3, [r4, #13]
    9980:	2a00      	cmp	r2, #0
    9982:	da05      	bge.n	9990 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    9988:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    998a:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    998c:	f004 fbef 	bl	e16e <sys_dlist_remove>
		update_cache(thread == _current);
    9990:	4d0b      	ldr	r5, [pc, #44]	; (99c0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9992:	7b63      	ldrb	r3, [r4, #13]
    9994:	68a8      	ldr	r0, [r5, #8]
    9996:	f043 0310 	orr.w	r3, r3, #16
    999a:	7363      	strb	r3, [r4, #13]
    999c:	1b03      	subs	r3, r0, r4
    999e:	4258      	negs	r0, r3
    99a0:	4158      	adcs	r0, r3
    99a2:	f7ff fed3 	bl	974c <update_cache>
	__asm__ volatile(
    99a6:	f386 8811 	msr	BASEPRI, r6
    99aa:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    99ae:	68ab      	ldr	r3, [r5, #8]
    99b0:	42a3      	cmp	r3, r4
    99b2:	d103      	bne.n	99bc <z_impl_k_thread_suspend+0x5c>
}
    99b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    99b8:	f004 bca8 	b.w	e30c <z_reschedule_unlocked>
}
    99bc:	bd70      	pop	{r4, r5, r6, pc}
    99be:	bf00      	nop
    99c0:	200143e0 	.word	0x200143e0

000099c4 <k_sched_lock>:
	__asm__ volatile(
    99c4:	f04f 0320 	mov.w	r3, #32
    99c8:	f3ef 8111 	mrs	r1, BASEPRI
    99cc:	f383 8812 	msr	BASEPRI_MAX, r3
    99d0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    99d4:	4b04      	ldr	r3, [pc, #16]	; (99e8 <k_sched_lock+0x24>)
    99d6:	689a      	ldr	r2, [r3, #8]
    99d8:	7bd3      	ldrb	r3, [r2, #15]
    99da:	3b01      	subs	r3, #1
    99dc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    99de:	f381 8811 	msr	BASEPRI, r1
    99e2:	f3bf 8f6f 	isb	sy
}
    99e6:	4770      	bx	lr
    99e8:	200143e0 	.word	0x200143e0

000099ec <k_sched_unlock>:
{
    99ec:	b510      	push	{r4, lr}
	__asm__ volatile(
    99ee:	f04f 0320 	mov.w	r3, #32
    99f2:	f3ef 8411 	mrs	r4, BASEPRI
    99f6:	f383 8812 	msr	BASEPRI_MAX, r3
    99fa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    99fe:	4b08      	ldr	r3, [pc, #32]	; (9a20 <k_sched_unlock+0x34>)
		update_cache(0);
    9a00:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    9a02:	689a      	ldr	r2, [r3, #8]
    9a04:	7bd3      	ldrb	r3, [r2, #15]
    9a06:	3301      	adds	r3, #1
    9a08:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    9a0a:	f7ff fe9f 	bl	974c <update_cache>
	__asm__ volatile(
    9a0e:	f384 8811 	msr	BASEPRI, r4
    9a12:	f3bf 8f6f 	isb	sy
}
    9a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    9a1a:	f004 bc77 	b.w	e30c <z_reschedule_unlocked>
    9a1e:	bf00      	nop
    9a20:	200143e0 	.word	0x200143e0

00009a24 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    9a24:	4b02      	ldr	r3, [pc, #8]	; (9a30 <z_sched_init+0xc>)
    9a26:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
    9a2a:	e9c3 2206 	strd	r2, r2, [r3, #24]

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
    9a2e:	4770      	bx	lr
    9a30:	200143e0 	.word	0x200143e0

00009a34 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    9a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    9a36:	f04f 0320 	mov.w	r3, #32
    9a3a:	f3ef 8511 	mrs	r5, BASEPRI
    9a3e:	f383 8812 	msr	BASEPRI_MAX, r3
    9a42:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    9a46:	4919      	ldr	r1, [pc, #100]	; (9aac <z_impl_k_yield+0x78>)
    9a48:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9a4a:	7b43      	ldrb	r3, [r0, #13]
    9a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9a50:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9a52:	f004 fb8c 	bl	e16e <sys_dlist_remove>
	return list->head == list;
    9a56:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    9a58:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    9a5a:	7b5a      	ldrb	r2, [r3, #13]
    9a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9a60:	735a      	strb	r2, [r3, #13]
    9a62:	f850 2f18 	ldr.w	r2, [r0, #24]!
	return (node == list->tail) ? NULL : node->next;
    9a66:	69cc      	ldr	r4, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a68:	4282      	cmp	r2, r0
    9a6a:	bf08      	it	eq
    9a6c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9a6e:	b922      	cbnz	r2, 9a7a <z_impl_k_yield+0x46>
	node->prev = tail;
    9a70:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    9a74:	6023      	str	r3, [r4, #0]
	list->tail = node;
    9a76:	61cb      	str	r3, [r1, #28]
}
    9a78:	e00c      	b.n	9a94 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    9a7a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    9a7e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    9a82:	42be      	cmp	r6, r7
    9a84:	d00e      	beq.n	9aa4 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9a86:	42b7      	cmp	r7, r6
    9a88:	dd0c      	ble.n	9aa4 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    9a8a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    9a8c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    9a90:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    9a92:	6053      	str	r3, [r2, #4]
	update_cache(1);
    9a94:	2001      	movs	r0, #1
    9a96:	f7ff fe59 	bl	974c <update_cache>
    9a9a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    9a9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9aa0:	f7fa b99c 	b.w	3ddc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    9aa4:	42a2      	cmp	r2, r4
    9aa6:	d0e3      	beq.n	9a70 <z_impl_k_yield+0x3c>
    9aa8:	6812      	ldr	r2, [r2, #0]
    9aaa:	e7e0      	b.n	9a6e <z_impl_k_yield+0x3a>
    9aac:	200143e0 	.word	0x200143e0

00009ab0 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    9ab0:	ea50 0301 	orrs.w	r3, r0, r1
{
    9ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ab8:	4605      	mov	r5, r0
    9aba:	460e      	mov	r6, r1
	if (ticks == 0) {
    9abc:	d103      	bne.n	9ac6 <z_tick_sleep+0x16>
	z_impl_k_yield();
    9abe:	f7ff ffb9 	bl	9a34 <z_impl_k_yield>
		k_yield();
		return 0;
    9ac2:	2000      	movs	r0, #0
    9ac4:	e02a      	b.n	9b1c <z_tick_sleep+0x6c>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    9ac6:	1c83      	adds	r3, r0, #2
    9ac8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    9acc:	db28      	blt.n	9b20 <z_tick_sleep+0x70>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    9ace:	f004 fc70 	bl	e3b2 <sys_clock_tick_get_32>
    9ad2:	182c      	adds	r4, r5, r0
    9ad4:	f04f 0320 	mov.w	r3, #32
    9ad8:	f3ef 8811 	mrs	r8, BASEPRI
    9adc:	f383 8812 	msr	BASEPRI_MAX, r3
    9ae0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	unready_thread(_current);
    9ae4:	4f10      	ldr	r7, [pc, #64]	; (9b28 <z_tick_sleep+0x78>)
    9ae6:	68b8      	ldr	r0, [r7, #8]
    9ae8:	f7ff fe48 	bl	977c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    9aec:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9aee:	490f      	ldr	r1, [pc, #60]	; (9b2c <z_tick_sleep+0x7c>)
    9af0:	462a      	mov	r2, r5
    9af2:	4633      	mov	r3, r6
    9af4:	3018      	adds	r0, #24
    9af6:	f000 f927 	bl	9d48 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    9afa:	68ba      	ldr	r2, [r7, #8]
    9afc:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9afe:	7b53      	ldrb	r3, [r2, #13]
    9b00:	f043 0310 	orr.w	r3, r3, #16
    9b04:	7353      	strb	r3, [r2, #13]
    9b06:	f7fa f969 	bl	3ddc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    9b0a:	f004 fc52 	bl	e3b2 <sys_clock_tick_get_32>
    9b0e:	1a20      	subs	r0, r4, r0
    9b10:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    9b14:	2801      	cmp	r0, #1
    9b16:	f173 0300 	sbcs.w	r3, r3, #0
    9b1a:	dbd2      	blt.n	9ac2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    9b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    9b20:	f06f 0401 	mvn.w	r4, #1
    9b24:	1a24      	subs	r4, r4, r0
    9b26:	e7d5      	b.n	9ad4 <z_tick_sleep+0x24>
    9b28:	200143e0 	.word	0x200143e0
    9b2c:	0000e1e3 	.word	0x0000e1e3

00009b30 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9b30:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    9b34:	bf08      	it	eq
    9b36:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    9b3a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9b3c:	d106      	bne.n	9b4c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    9b3e:	4b08      	ldr	r3, [pc, #32]	; (9b60 <z_impl_k_sleep+0x30>)
    9b40:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9b42:	f7ff ff0d 	bl	9960 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    9b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    9b4a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    9b4c:	f7ff ffb0 	bl	9ab0 <z_tick_sleep>
    9b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9b54:	fb80 0303 	smull	r0, r3, r0, r3
    9b58:	0bc0      	lsrs	r0, r0, #15
    9b5a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    9b5e:	e7f4      	b.n	9b4a <z_impl_k_sleep+0x1a>
    9b60:	200143e0 	.word	0x200143e0

00009b64 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    9b64:	b538      	push	{r3, r4, r5, lr}
    9b66:	2100      	movs	r1, #0
    9b68:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    9b6c:	4c08      	ldr	r4, [pc, #32]	; (9b90 <z_impl_k_usleep+0x2c>)
    9b6e:	2300      	movs	r3, #0
    9b70:	fbc0 4105 	smlal	r4, r1, r0, r5
    9b74:	4a07      	ldr	r2, [pc, #28]	; (9b94 <z_impl_k_usleep+0x30>)
    9b76:	4620      	mov	r0, r4
    9b78:	f7f6 faec 	bl	154 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    9b7c:	17c1      	asrs	r1, r0, #31
    9b7e:	f7ff ff97 	bl	9ab0 <z_tick_sleep>
    9b82:	4b04      	ldr	r3, [pc, #16]	; (9b94 <z_impl_k_usleep+0x30>)
    9b84:	fb80 0303 	smull	r0, r3, r0, r3
    9b88:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    9b8a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    9b8e:	bd38      	pop	{r3, r4, r5, pc}
    9b90:	000f423f 	.word	0x000f423f
    9b94:	000f4240 	.word	0x000f4240

00009b98 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    9b98:	4b01      	ldr	r3, [pc, #4]	; (9ba0 <z_impl_z_current_get+0x8>)
    9b9a:	6898      	ldr	r0, [r3, #8]
    9b9c:	4770      	bx	lr
    9b9e:	bf00      	nop
    9ba0:	200143e0 	.word	0x200143e0

00009ba4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    9ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ba8:	4604      	mov	r4, r0
    9baa:	f04f 0320 	mov.w	r3, #32
    9bae:	f3ef 8611 	mrs	r6, BASEPRI
    9bb2:	f383 8812 	msr	BASEPRI_MAX, r3
    9bb6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    9bba:	7b03      	ldrb	r3, [r0, #12]
    9bbc:	07d9      	lsls	r1, r3, #31
    9bbe:	d50b      	bpl.n	9bd8 <z_thread_abort+0x34>
	__asm__ volatile(
    9bc0:	f386 8811 	msr	BASEPRI, r6
    9bc4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    9bc8:	4040      	eors	r0, r0
    9bca:	f380 8811 	msr	BASEPRI, r0
    9bce:	f04f 0004 	mov.w	r0, #4
    9bd2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    9bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    9bd8:	7b43      	ldrb	r3, [r0, #13]
    9bda:	071a      	lsls	r2, r3, #28
    9bdc:	d504      	bpl.n	9be8 <z_thread_abort+0x44>
    9bde:	f386 8811 	msr	BASEPRI, r6
    9be2:	f3bf 8f6f 	isb	sy
    9be6:	e7f5      	b.n	9bd4 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9be8:	f023 0220 	bic.w	r2, r3, #32
    9bec:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    9bf0:	09d2      	lsrs	r2, r2, #7
    9bf2:	d120      	bne.n	9c36 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9bf4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    9bf6:	68a3      	ldr	r3, [r4, #8]
    9bf8:	b113      	cbz	r3, 9c00 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    9bfa:	4620      	mov	r0, r4
    9bfc:	f004 fabf 	bl	e17e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    9c00:	f104 0018 	add.w	r0, r4, #24
    9c04:	f004 fbbf 	bl	e386 <z_abort_timeout>
    9c08:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    9c0c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    9c10:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c12:	42bd      	cmp	r5, r7
    9c14:	d000      	beq.n	9c18 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9c16:	b9b5      	cbnz	r5, 9c46 <z_thread_abort+0xa2>
		update_cache(1);
    9c18:	2001      	movs	r0, #1
    9c1a:	f7ff fd97 	bl	974c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    9c1e:	4b10      	ldr	r3, [pc, #64]	; (9c60 <z_thread_abort+0xbc>)
    9c20:	689b      	ldr	r3, [r3, #8]
    9c22:	42a3      	cmp	r3, r4
    9c24:	d1db      	bne.n	9bde <z_thread_abort+0x3a>
    9c26:	f3ef 8305 	mrs	r3, IPSR
    9c2a:	2b00      	cmp	r3, #0
    9c2c:	d1d7      	bne.n	9bde <z_thread_abort+0x3a>
    9c2e:	4630      	mov	r0, r6
    9c30:	f7fa f8d4 	bl	3ddc <arch_swap>
	return ret;
    9c34:	e7d3      	b.n	9bde <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9c36:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    9c3a:	f043 0308 	orr.w	r3, r3, #8
    9c3e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9c40:	f004 fa95 	bl	e16e <sys_dlist_remove>
}
    9c44:	e7d7      	b.n	9bf6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    9c46:	4628      	mov	r0, r5
    9c48:	f004 fa99 	bl	e17e <unpend_thread_no_timeout>
    9c4c:	f105 0018 	add.w	r0, r5, #24
    9c50:	f004 fb99 	bl	e386 <z_abort_timeout>
		ready_thread(thread);
    9c54:	4628      	mov	r0, r5
    9c56:	f8c5 8074 	str.w	r8, [r5, #116]	; 0x74
    9c5a:	f7ff fdbf 	bl	97dc <ready_thread>
    9c5e:	e7d7      	b.n	9c10 <z_thread_abort+0x6c>
    9c60:	200143e0 	.word	0x200143e0

00009c64 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    9c64:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9c66:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    9c6a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9c6c:	e9cd 6700 	strd	r6, r7, [sp]
    9c70:	f7ff fde8 	bl	9844 <z_pend_curr>

	if (data != NULL) {
    9c74:	b11c      	cbz	r4, 9c7e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    9c76:	4b03      	ldr	r3, [pc, #12]	; (9c84 <z_sched_wait+0x20>)
    9c78:	689b      	ldr	r3, [r3, #8]
    9c7a:	695b      	ldr	r3, [r3, #20]
    9c7c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    9c7e:	b002      	add	sp, #8
    9c80:	bdd0      	pop	{r4, r6, r7, pc}
    9c82:	bf00      	nop
    9c84:	200143e0 	.word	0x200143e0

00009c88 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    9c88:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    9c8a:	4806      	ldr	r0, [pc, #24]	; (9ca4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    9c8c:	4a06      	ldr	r2, [pc, #24]	; (9ca8 <z_data_copy+0x20>)
    9c8e:	4907      	ldr	r1, [pc, #28]	; (9cac <z_data_copy+0x24>)
    9c90:	1a12      	subs	r2, r2, r0
    9c92:	f004 f932 	bl	defa <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    9c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9c9a:	4a05      	ldr	r2, [pc, #20]	; (9cb0 <z_data_copy+0x28>)
    9c9c:	4905      	ldr	r1, [pc, #20]	; (9cb4 <z_data_copy+0x2c>)
    9c9e:	4806      	ldr	r0, [pc, #24]	; (9cb8 <z_data_copy+0x30>)
    9ca0:	f004 b92b 	b.w	defa <z_early_memcpy>
    9ca4:	20002000 	.word	0x20002000
    9ca8:	20002460 	.word	0x20002460
    9cac:	0000f3ac 	.word	0x0000f3ac
    9cb0:	00000000 	.word	0x00000000
    9cb4:	0000f3ac 	.word	0x0000f3ac
    9cb8:	20002000 	.word	0x20002000

00009cbc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9cbc:	4b03      	ldr	r3, [pc, #12]	; (9ccc <elapsed+0x10>)
    9cbe:	681b      	ldr	r3, [r3, #0]
    9cc0:	b90b      	cbnz	r3, 9cc6 <elapsed+0xa>
    9cc2:	f7fc baf9 	b.w	62b8 <sys_clock_elapsed>
}
    9cc6:	2000      	movs	r0, #0
    9cc8:	4770      	bx	lr
    9cca:	bf00      	nop
    9ccc:	20014408 	.word	0x20014408

00009cd0 <next_timeout>:

static int32_t next_timeout(void)
{
    9cd0:	b510      	push	{r4, lr}
	return list->head == list;
    9cd2:	4b0e      	ldr	r3, [pc, #56]	; (9d0c <next_timeout+0x3c>)
    9cd4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9cd6:	429c      	cmp	r4, r3
    9cd8:	d104      	bne.n	9ce4 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    9cda:	f7ff ffef 	bl	9cbc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    9cde:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    9ce2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    9ce4:	f7ff ffea 	bl	9cbc <elapsed>
	if ((to == NULL) ||
    9ce8:	2c00      	cmp	r4, #0
    9cea:	d0f8      	beq.n	9cde <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    9cec:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    9cf0:	1a1b      	subs	r3, r3, r0
    9cf2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    9cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9cfa:	f172 0100 	sbcs.w	r1, r2, #0
    9cfe:	daee      	bge.n	9cde <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    9d00:	2a00      	cmp	r2, #0
    9d02:	bfac      	ite	ge
    9d04:	4618      	movge	r0, r3
    9d06:	2000      	movlt	r0, #0
	return ret;
    9d08:	e7eb      	b.n	9ce2 <next_timeout+0x12>
    9d0a:	bf00      	nop
    9d0c:	200021dc 	.word	0x200021dc

00009d10 <remove_timeout>:
{
    9d10:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9d12:	b170      	cbz	r0, 9d32 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    9d14:	4b0b      	ldr	r3, [pc, #44]	; (9d44 <remove_timeout+0x34>)
    9d16:	685b      	ldr	r3, [r3, #4]
    9d18:	4298      	cmp	r0, r3
    9d1a:	d00a      	beq.n	9d32 <remove_timeout+0x22>
    9d1c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    9d1e:	b143      	cbz	r3, 9d32 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    9d20:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    9d24:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    9d28:	1912      	adds	r2, r2, r4
    9d2a:	eb41 0105 	adc.w	r1, r1, r5
    9d2e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    9d32:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    9d36:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9d38:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9d3a:	2300      	movs	r3, #0
	node->prev = NULL;
    9d3c:	e9c0 3300 	strd	r3, r3, [r0]
}
    9d40:	bd30      	pop	{r4, r5, pc}
    9d42:	bf00      	nop
    9d44:	200021dc 	.word	0x200021dc

00009d48 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9d4c:	bf08      	it	eq
    9d4e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    9d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d54:	4604      	mov	r4, r0
    9d56:	461d      	mov	r5, r3
    9d58:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9d5a:	d05c      	beq.n	9e16 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    9d5c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    9d5e:	f04f 0320 	mov.w	r3, #32
    9d62:	f3ef 8711 	mrs	r7, BASEPRI
    9d66:	f383 8812 	msr	BASEPRI_MAX, r3
    9d6a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9d6e:	3201      	adds	r2, #1
    9d70:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    9d74:	da24      	bge.n	9dc0 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9d76:	f06f 0301 	mvn.w	r3, #1
    9d7a:	492c      	ldr	r1, [pc, #176]	; (9e2c <z_add_timeout+0xe4>)
    9d7c:	e9d1 2000 	ldrd	r2, r0, [r1]
    9d80:	1a9b      	subs	r3, r3, r2
    9d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9d86:	eb62 0000 	sbc.w	r0, r2, r0
    9d8a:	1b9e      	subs	r6, r3, r6
    9d8c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    9d90:	2e01      	cmp	r6, #1
    9d92:	f170 0300 	sbcs.w	r3, r0, #0
    9d96:	da01      	bge.n	9d9c <z_add_timeout+0x54>
    9d98:	2601      	movs	r6, #1
    9d9a:	2000      	movs	r0, #0
    9d9c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    9da0:	4e23      	ldr	r6, [pc, #140]	; (9e30 <z_add_timeout+0xe8>)
    9da2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    9da6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9da8:	45b4      	cmp	ip, r6
    9daa:	bf08      	it	eq
    9dac:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    9db0:	f1bc 0f00 	cmp.w	ip, #0
    9db4:	d10d      	bne.n	9dd2 <z_add_timeout+0x8a>
	node->prev = tail;
    9db6:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    9dba:	602c      	str	r4, [r5, #0]
	list->tail = node;
    9dbc:	6074      	str	r4, [r6, #4]
}
    9dbe:	e01c      	b.n	9dfa <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    9dc0:	f7ff ff7c 	bl	9cbc <elapsed>
    9dc4:	3601      	adds	r6, #1
    9dc6:	f145 0500 	adc.w	r5, r5, #0
    9dca:	1836      	adds	r6, r6, r0
    9dcc:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    9dd0:	e7e4      	b.n	9d9c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    9dd2:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    9dd6:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    9dda:	4293      	cmp	r3, r2
    9ddc:	eb71 0e00 	sbcs.w	lr, r1, r0
    9de0:	da1a      	bge.n	9e18 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    9de2:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    9de4:	f8dc 3004 	ldr.w	r3, [ip, #4]
    9de8:	eb60 0001 	sbc.w	r0, r0, r1
    9dec:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    9df0:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    9df4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9df6:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    9dfa:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9dfc:	42b3      	cmp	r3, r6
    9dfe:	d006      	beq.n	9e0e <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    9e00:	429c      	cmp	r4, r3
    9e02:	d104      	bne.n	9e0e <z_add_timeout+0xc6>
			if (next_time == 0 ||
			    _current_cpu->slice_ticks != next_time) {
				sys_clock_set_timeout(next_time, false);
			}
#else
			sys_clock_set_timeout(next_timeout(), false);
    9e04:	f7ff ff64 	bl	9cd0 <next_timeout>
    9e08:	2100      	movs	r1, #0
    9e0a:	f7fc fa23 	bl	6254 <sys_clock_set_timeout>
	__asm__ volatile(
    9e0e:	f387 8811 	msr	BASEPRI, r7
    9e12:	f3bf 8f6f 	isb	sy
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    9e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    9e18:	1a9b      	subs	r3, r3, r2
    9e1a:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    9e1e:	45ac      	cmp	ip, r5
    9e20:	e9c4 3104 	strd	r3, r1, [r4, #16]
    9e24:	d0c7      	beq.n	9db6 <z_add_timeout+0x6e>
    9e26:	f8dc c000 	ldr.w	ip, [ip]
    9e2a:	e7c1      	b.n	9db0 <z_add_timeout+0x68>
    9e2c:	200026a0 	.word	0x200026a0
    9e30:	200021dc 	.word	0x200021dc

00009e34 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    9e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e38:	4603      	mov	r3, r0
	__asm__ volatile(
    9e3a:	f04f 0220 	mov.w	r2, #32
    9e3e:	f3ef 8411 	mrs	r4, BASEPRI
    9e42:	f382 8812 	msr	BASEPRI_MAX, r2
    9e46:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9e4a:	4f25      	ldr	r7, [pc, #148]	; (9ee0 <sys_clock_announce+0xac>)
	return list->head == list;
    9e4c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 9ee4 <sys_clock_announce+0xb0>
    9e50:	f8d9 0000 	ldr.w	r0, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    9e54:	f8df c090 	ldr.w	ip, [pc, #144]	; 9ee8 <sys_clock_announce+0xb4>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e58:	4548      	cmp	r0, r9
	announce_remaining = ticks;
    9e5a:	603b      	str	r3, [r7, #0]
	return list->head == list;
    9e5c:	ea4f 75e3 	mov.w	r5, r3, asr #31
		curr_tick += dt;
    9e60:	e9dc 1e00 	ldrd	r1, lr, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e64:	d00c      	beq.n	9e80 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9e66:	b158      	cbz	r0, 9e80 <sys_clock_announce+0x4c>
    9e68:	e9d0 8604 	ldrd	r8, r6, [r0, #16]
    9e6c:	4543      	cmp	r3, r8
    9e6e:	eb75 0206 	sbcs.w	r2, r5, r6
    9e72:	da17      	bge.n	9ea4 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    9e74:	ebb8 0203 	subs.w	r2, r8, r3
    9e78:	eb66 0605 	sbc.w	r6, r6, r5
    9e7c:	e9c0 2604 	strd	r2, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    9e80:	1859      	adds	r1, r3, r1
    9e82:	eb4e 0505 	adc.w	r5, lr, r5
    9e86:	e9cc 1500 	strd	r1, r5, [ip]
	announce_remaining = 0;
    9e8a:	2500      	movs	r5, #0
    9e8c:	603d      	str	r5, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9e8e:	f7ff ff1f 	bl	9cd0 <next_timeout>
    9e92:	4629      	mov	r1, r5
    9e94:	f7fc f9de 	bl	6254 <sys_clock_set_timeout>
	__asm__ volatile(
    9e98:	f384 8811 	msr	BASEPRI, r4
    9e9c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    9ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    9ea4:	eb18 0101 	adds.w	r1, r8, r1
    9ea8:	eb4e 73e8 	adc.w	r3, lr, r8, asr #31
		t->dticks = 0;
    9eac:	2200      	movs	r2, #0
		curr_tick += dt;
    9eae:	e9cc 1300 	strd	r1, r3, [ip]
		t->dticks = 0;
    9eb2:	2300      	movs	r3, #0
    9eb4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    9eb8:	f7ff ff2a 	bl	9d10 <remove_timeout>
    9ebc:	f384 8811 	msr	BASEPRI, r4
    9ec0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    9ec4:	6883      	ldr	r3, [r0, #8]
    9ec6:	4798      	blx	r3
	__asm__ volatile(
    9ec8:	f04f 0320 	mov.w	r3, #32
    9ecc:	f3ef 8411 	mrs	r4, BASEPRI
    9ed0:	f383 8812 	msr	BASEPRI_MAX, r3
    9ed4:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    9ed8:	683b      	ldr	r3, [r7, #0]
    9eda:	eba3 0308 	sub.w	r3, r3, r8
    9ede:	e7b7      	b.n	9e50 <sys_clock_announce+0x1c>
    9ee0:	20014408 	.word	0x20014408
    9ee4:	200021dc 	.word	0x200021dc
    9ee8:	200026a0 	.word	0x200026a0

00009eec <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9eec:	b510      	push	{r4, lr}
    9eee:	f04f 0320 	mov.w	r3, #32
    9ef2:	f3ef 8411 	mrs	r4, BASEPRI
    9ef6:	f383 8812 	msr	BASEPRI_MAX, r3
    9efa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    9efe:	f7ff fedd 	bl	9cbc <elapsed>
    9f02:	4603      	mov	r3, r0
    9f04:	4a05      	ldr	r2, [pc, #20]	; (9f1c <sys_clock_tick_get+0x30>)
    9f06:	e9d2 0100 	ldrd	r0, r1, [r2]
    9f0a:	1818      	adds	r0, r3, r0
    9f0c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    9f10:	f384 8811 	msr	BASEPRI, r4
    9f14:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    9f18:	bd10      	pop	{r4, pc}
    9f1a:	bf00      	nop
    9f1c:	200026a0 	.word	0x200026a0

00009f20 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9f20:	b570      	push	{r4, r5, r6, lr}
    9f22:	4604      	mov	r4, r0
	__asm__ volatile(
    9f24:	f04f 0320 	mov.w	r3, #32
    9f28:	f3ef 8511 	mrs	r5, BASEPRI
    9f2c:	f383 8812 	msr	BASEPRI_MAX, r3
    9f30:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9f34:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    9f38:	3301      	adds	r3, #1
    9f3a:	f142 0200 	adc.w	r2, r2, #0
    9f3e:	2b02      	cmp	r3, #2
    9f40:	f172 0200 	sbcs.w	r2, r2, #0
    9f44:	d322      	bcc.n	9f8c <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    9f46:	f004 fa38 	bl	e3ba <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    9f4a:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    9f4e:	3001      	adds	r0, #1
    9f50:	f141 0100 	adc.w	r1, r1, #0
    9f54:	18c0      	adds	r0, r0, r3
    9f56:	eb41 0102 	adc.w	r1, r1, r2
    9f5a:	2801      	cmp	r0, #1
    9f5c:	f171 0100 	sbcs.w	r1, r1, #0
    9f60:	db32      	blt.n	9fc8 <z_timer_expiration_handler+0xa8>
    9f62:	f004 fa2a 	bl	e3ba <z_impl_k_uptime_ticks>
    9f66:	3001      	adds	r0, #1
    9f68:	f141 0300 	adc.w	r3, r1, #0
    9f6c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    9f70:	1880      	adds	r0, r0, r2
    9f72:	f06f 0201 	mvn.w	r2, #1
    9f76:	eb43 0301 	adc.w	r3, r3, r1
    9f7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f7e:	1a12      	subs	r2, r2, r0
    9f80:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9f84:	4620      	mov	r0, r4
    9f86:	491a      	ldr	r1, [pc, #104]	; (9ff0 <z_timer_expiration_handler+0xd0>)
    9f88:	f7ff fede 	bl	9d48 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    9f8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9f8e:	3301      	adds	r3, #1
    9f90:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    9f92:	6a23      	ldr	r3, [r4, #32]
    9f94:	b173      	cbz	r3, 9fb4 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    9f96:	f385 8811 	msr	BASEPRI, r5
    9f9a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9f9e:	4620      	mov	r0, r4
    9fa0:	6a23      	ldr	r3, [r4, #32]
    9fa2:	4798      	blx	r3
	__asm__ volatile(
    9fa4:	f04f 0320 	mov.w	r3, #32
    9fa8:	f3ef 8511 	mrs	r5, BASEPRI
    9fac:	f383 8812 	msr	BASEPRI_MAX, r3
    9fb0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    9fb4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9fb8:	42a6      	cmp	r6, r4
    9fba:	d000      	beq.n	9fbe <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    9fbc:	b94e      	cbnz	r6, 9fd2 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    9fbe:	f385 8811 	msr	BASEPRI, r5
    9fc2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    9fc6:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    9fc8:	f06f 0201 	mvn.w	r2, #1
    9fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9fd0:	e7d8      	b.n	9f84 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    9fd2:	4630      	mov	r0, r6
    9fd4:	f004 f937 	bl	e246 <z_unpend_thread_no_timeout>
    9fd8:	2300      	movs	r3, #0
    9fda:	6773      	str	r3, [r6, #116]	; 0x74
    9fdc:	f385 8811 	msr	BASEPRI, r5
    9fe0:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    9fe4:	4630      	mov	r0, r6
}
    9fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    9fea:	f004 b91c 	b.w	e226 <z_ready_thread>
    9fee:	bf00      	nop
    9ff0:	00009f21 	.word	0x00009f21

00009ff4 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9ff8:	bf08      	it	eq
    9ffa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    9ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a002:	4619      	mov	r1, r3
    a004:	4605      	mov	r5, r0
    a006:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    a00a:	4614      	mov	r4, r2
    a00c:	4691      	mov	r9, r2
    a00e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a010:	d037      	beq.n	a082 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a012:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    a016:	bf08      	it	eq
    a018:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    a01c:	4637      	mov	r7, r6
    a01e:	4682      	mov	sl, r0
    a020:	d011      	beq.n	a046 <z_impl_k_timer_start+0x52>
    a022:	ea50 0306 	orrs.w	r3, r0, r6
    a026:	d00e      	beq.n	a046 <z_impl_k_timer_start+0x52>
    a028:	1c72      	adds	r2, r6, #1
    a02a:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    a02e:	db0a      	blt.n	a046 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    a030:	2e02      	cmp	r6, #2
    a032:	4684      	mov	ip, r0
    a034:	f170 0000 	sbcs.w	r0, r0, #0
    a038:	bfbc      	itt	lt
    a03a:	2702      	movlt	r7, #2
    a03c:	f04f 0c00 	movlt.w	ip, #0
    a040:	3f01      	subs	r7, #1
    a042:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    a046:	1c63      	adds	r3, r4, #1
    a048:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    a04c:	db0a      	blt.n	a064 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    a04e:	2c01      	cmp	r4, #1
    a050:	f171 0300 	sbcs.w	r3, r1, #0
    a054:	4622      	mov	r2, r4
    a056:	bfbc      	itt	lt
    a058:	2201      	movlt	r2, #1
    a05a:	2100      	movlt	r1, #0
    a05c:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    a060:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    a064:	4628      	mov	r0, r5
    a066:	f004 f98e 	bl	e386 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    a06a:	2300      	movs	r3, #0
	timer->period = period;
    a06c:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
    a070:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a072:	464a      	mov	r2, r9
    a074:	4643      	mov	r3, r8
    a076:	4628      	mov	r0, r5
		     duration);
}
    a078:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a07c:	4902      	ldr	r1, [pc, #8]	; (a088 <z_impl_k_timer_start+0x94>)
    a07e:	f7ff be63 	b.w	9d48 <z_add_timeout>
}
    a082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a086:	bf00      	nop
    a088:	00009f21 	.word	0x00009f21

0000a08c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    a08c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a08e:	4606      	mov	r6, r0
    a090:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    a092:	f003 ff81 	bl	df98 <k_is_in_isr>
    a096:	b978      	cbnz	r0, a0b8 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    a098:	4b0b      	ldr	r3, [pc, #44]	; (a0c8 <z_thread_aligned_alloc+0x3c>)
    a09a:	689b      	ldr	r3, [r3, #8]
    a09c:	6edc      	ldr	r4, [r3, #108]	; 0x6c
	}

	if (heap != NULL) {
    a09e:	b17c      	cbz	r4, a0c0 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    a0a0:	1d2a      	adds	r2, r5, #4
    a0a2:	d209      	bcs.n	a0b8 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    a0a4:	2000      	movs	r0, #0
    a0a6:	2100      	movs	r1, #0
    a0a8:	e9cd 0100 	strd	r0, r1, [sp]
    a0ac:	4620      	mov	r0, r4
    a0ae:	f046 0104 	orr.w	r1, r6, #4
    a0b2:	f004 f9d7 	bl	e464 <k_heap_aligned_alloc>
	if (mem == NULL) {
    a0b6:	b908      	cbnz	r0, a0bc <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    a0b8:	2400      	movs	r4, #0
	}

	return ret;
    a0ba:	e001      	b.n	a0c0 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    a0bc:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    a0be:	1d04      	adds	r4, r0, #4
}
    a0c0:	4620      	mov	r0, r4
    a0c2:	b002      	add	sp, #8
    a0c4:	bd70      	pop	{r4, r5, r6, pc}
    a0c6:	bf00      	nop
    a0c8:	200143e0 	.word	0x200143e0

0000a0cc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    a0cc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a0ce:	4c06      	ldr	r4, [pc, #24]	; (a0e8 <statics_init+0x1c>)
    a0d0:	4d06      	ldr	r5, [pc, #24]	; (a0ec <statics_init+0x20>)
    a0d2:	42ac      	cmp	r4, r5
    a0d4:	d301      	bcc.n	a0da <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    a0d6:	2000      	movs	r0, #0
    a0d8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    a0da:	4620      	mov	r0, r4
    a0dc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    a0e0:	f004 f9b8 	bl	e454 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a0e4:	3414      	adds	r4, #20
    a0e6:	e7f4      	b.n	a0d2 <statics_init+0x6>
    a0e8:	200022e4 	.word	0x200022e4
    a0ec:	200022e4 	.word	0x200022e4

0000a0f0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    a0f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    a0f2:	2400      	movs	r4, #0
    a0f4:	4b08      	ldr	r3, [pc, #32]	; (a118 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    a0f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
    a0fa:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
    a0fc:	ab02      	add	r3, sp, #8
    a0fe:	9300      	str	r3, [sp, #0]
    a100:	4906      	ldr	r1, [pc, #24]	; (a11c <k_sys_work_q_init+0x2c>)
    a102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a106:	4806      	ldr	r0, [pc, #24]	; (a120 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    a108:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    a10c:	f7ff fae6 	bl	96dc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    a110:	4620      	mov	r0, r4
    a112:	b004      	add	sp, #16
    a114:	bd10      	pop	{r4, pc}
    a116:	bf00      	nop
    a118:	0000f3a2 	.word	0x0000f3a2
    a11c:	2005a148 	.word	0x2005a148
    a120:	200026a8 	.word	0x200026a8

0000a124 <nrf_cc3xx_platform_init_no_rng>:
    a124:	b510      	push	{r4, lr}
    a126:	4c0a      	ldr	r4, [pc, #40]	; (a150 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    a128:	6823      	ldr	r3, [r4, #0]
    a12a:	b11b      	cbz	r3, a134 <nrf_cc3xx_platform_init_no_rng+0x10>
    a12c:	2301      	movs	r3, #1
    a12e:	2000      	movs	r0, #0
    a130:	6023      	str	r3, [r4, #0]
    a132:	bd10      	pop	{r4, pc}
    a134:	f000 f8fe 	bl	a334 <CC_LibInitNoRng>
    a138:	2800      	cmp	r0, #0
    a13a:	d0f7      	beq.n	a12c <nrf_cc3xx_platform_init_no_rng+0x8>
    a13c:	3801      	subs	r0, #1
    a13e:	2807      	cmp	r0, #7
    a140:	d803      	bhi.n	a14a <nrf_cc3xx_platform_init_no_rng+0x26>
    a142:	4b04      	ldr	r3, [pc, #16]	; (a154 <nrf_cc3xx_platform_init_no_rng+0x30>)
    a144:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a148:	bd10      	pop	{r4, pc}
    a14a:	4803      	ldr	r0, [pc, #12]	; (a158 <nrf_cc3xx_platform_init_no_rng+0x34>)
    a14c:	bd10      	pop	{r4, pc}
    a14e:	bf00      	nop
    a150:	2001440c 	.word	0x2001440c
    a154:	0000ee7c 	.word	0x0000ee7c
    a158:	ffff8ffe 	.word	0xffff8ffe

0000a15c <nrf_cc3xx_platform_abort>:
    a15c:	f3bf 8f4f 	dsb	sy
    a160:	4905      	ldr	r1, [pc, #20]	; (a178 <nrf_cc3xx_platform_abort+0x1c>)
    a162:	4b06      	ldr	r3, [pc, #24]	; (a17c <nrf_cc3xx_platform_abort+0x20>)
    a164:	68ca      	ldr	r2, [r1, #12]
    a166:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a16a:	4313      	orrs	r3, r2
    a16c:	60cb      	str	r3, [r1, #12]
    a16e:	f3bf 8f4f 	dsb	sy
    a172:	bf00      	nop
    a174:	e7fd      	b.n	a172 <nrf_cc3xx_platform_abort+0x16>
    a176:	bf00      	nop
    a178:	e000ed00 	.word	0xe000ed00
    a17c:	05fa0004 	.word	0x05fa0004

0000a180 <CC_PalAbort>:
    a180:	b430      	push	{r4, r5}
    a182:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    a186:	2500      	movs	r5, #0
    a188:	4b0b      	ldr	r3, [pc, #44]	; (a1b8 <CC_PalAbort+0x38>)
    a18a:	4c0c      	ldr	r4, [pc, #48]	; (a1bc <CC_PalAbort+0x3c>)
    a18c:	490c      	ldr	r1, [pc, #48]	; (a1c0 <CC_PalAbort+0x40>)
    a18e:	6849      	ldr	r1, [r1, #4]
    a190:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    a194:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    a198:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    a19c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    a1a0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    a1a4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    a1a8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    a1ac:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    a1b0:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    a1b4:	bc30      	pop	{r4, r5}
    a1b6:	4708      	bx	r1
    a1b8:	50845000 	.word	0x50845000
    a1bc:	50844000 	.word	0x50844000
    a1c0:	200021e4 	.word	0x200021e4

0000a1c4 <nrf_cc3xx_platform_set_abort>:
    a1c4:	4b02      	ldr	r3, [pc, #8]	; (a1d0 <nrf_cc3xx_platform_set_abort+0xc>)
    a1c6:	e9d0 1200 	ldrd	r1, r2, [r0]
    a1ca:	e9c3 1200 	strd	r1, r2, [r3]
    a1ce:	4770      	bx	lr
    a1d0:	200021e4 	.word	0x200021e4

0000a1d4 <mutex_free>:
    a1d4:	b510      	push	{r4, lr}
    a1d6:	4604      	mov	r4, r0
    a1d8:	b150      	cbz	r0, a1f0 <mutex_free+0x1c>
    a1da:	6863      	ldr	r3, [r4, #4]
    a1dc:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    a1e0:	d005      	beq.n	a1ee <mutex_free+0x1a>
    a1e2:	4a06      	ldr	r2, [pc, #24]	; (a1fc <mutex_free+0x28>)
    a1e4:	4293      	cmp	r3, r2
    a1e6:	d002      	beq.n	a1ee <mutex_free+0x1a>
    a1e8:	2300      	movs	r3, #0
    a1ea:	6062      	str	r2, [r4, #4]
    a1ec:	6023      	str	r3, [r4, #0]
    a1ee:	bd10      	pop	{r4, pc}
    a1f0:	4b03      	ldr	r3, [pc, #12]	; (a200 <mutex_free+0x2c>)
    a1f2:	4804      	ldr	r0, [pc, #16]	; (a204 <mutex_free+0x30>)
    a1f4:	685b      	ldr	r3, [r3, #4]
    a1f6:	4798      	blx	r3
    a1f8:	e7ef      	b.n	a1da <mutex_free+0x6>
    a1fa:	bf00      	nop
    a1fc:	a95c5f2c 	.word	0xa95c5f2c
    a200:	200021e4 	.word	0x200021e4
    a204:	0000ee9c 	.word	0x0000ee9c

0000a208 <mutex_lock>:
    a208:	b1c8      	cbz	r0, a23e <mutex_lock+0x36>
    a20a:	6843      	ldr	r3, [r0, #4]
    a20c:	4a0d      	ldr	r2, [pc, #52]	; (a244 <mutex_lock+0x3c>)
    a20e:	4293      	cmp	r3, r2
    a210:	d013      	beq.n	a23a <mutex_lock+0x32>
    a212:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    a216:	d00e      	beq.n	a236 <mutex_lock+0x2e>
    a218:	2301      	movs	r3, #1
    a21a:	e850 2f00 	ldrex	r2, [r0]
    a21e:	4619      	mov	r1, r3
    a220:	e840 1c00 	strex	ip, r1, [r0]
    a224:	f09c 0f00 	teq	ip, #0
    a228:	d1f7      	bne.n	a21a <mutex_lock+0x12>
    a22a:	2a01      	cmp	r2, #1
    a22c:	d0f5      	beq.n	a21a <mutex_lock+0x12>
    a22e:	f3bf 8f5f 	dmb	sy
    a232:	2000      	movs	r0, #0
    a234:	4770      	bx	lr
    a236:	4804      	ldr	r0, [pc, #16]	; (a248 <mutex_lock+0x40>)
    a238:	4770      	bx	lr
    a23a:	4804      	ldr	r0, [pc, #16]	; (a24c <mutex_lock+0x44>)
    a23c:	4770      	bx	lr
    a23e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a242:	4770      	bx	lr
    a244:	a95c5f2c 	.word	0xa95c5f2c
    a248:	ffff8fe9 	.word	0xffff8fe9
    a24c:	ffff8fea 	.word	0xffff8fea

0000a250 <mutex_unlock>:
    a250:	4603      	mov	r3, r0
    a252:	b180      	cbz	r0, a276 <mutex_unlock+0x26>
    a254:	6842      	ldr	r2, [r0, #4]
    a256:	4909      	ldr	r1, [pc, #36]	; (a27c <mutex_unlock+0x2c>)
    a258:	428a      	cmp	r2, r1
    a25a:	d00a      	beq.n	a272 <mutex_unlock+0x22>
    a25c:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    a260:	d005      	beq.n	a26e <mutex_unlock+0x1e>
    a262:	f3bf 8f5f 	dmb	sy
    a266:	2200      	movs	r2, #0
    a268:	4610      	mov	r0, r2
    a26a:	601a      	str	r2, [r3, #0]
    a26c:	4770      	bx	lr
    a26e:	4804      	ldr	r0, [pc, #16]	; (a280 <mutex_unlock+0x30>)
    a270:	4770      	bx	lr
    a272:	4804      	ldr	r0, [pc, #16]	; (a284 <mutex_unlock+0x34>)
    a274:	4770      	bx	lr
    a276:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a27a:	4770      	bx	lr
    a27c:	a95c5f2c 	.word	0xa95c5f2c
    a280:	ffff8fe9 	.word	0xffff8fe9
    a284:	ffff8fea 	.word	0xffff8fea

0000a288 <mutex_init>:
    a288:	b510      	push	{r4, lr}
    a28a:	4604      	mov	r4, r0
    a28c:	b120      	cbz	r0, a298 <mutex_init+0x10>
    a28e:	2300      	movs	r3, #0
    a290:	4a03      	ldr	r2, [pc, #12]	; (a2a0 <mutex_init+0x18>)
    a292:	6023      	str	r3, [r4, #0]
    a294:	6062      	str	r2, [r4, #4]
    a296:	bd10      	pop	{r4, pc}
    a298:	4802      	ldr	r0, [pc, #8]	; (a2a4 <mutex_init+0x1c>)
    a29a:	f7ff ff71 	bl	a180 <CC_PalAbort>
    a29e:	e7f6      	b.n	a28e <mutex_init+0x6>
    a2a0:	3a00003a 	.word	0x3a00003a
    a2a4:	0000eec4 	.word	0x0000eec4

0000a2a8 <nrf_cc3xx_platform_set_mutexes>:
    a2a8:	b570      	push	{r4, r5, r6, lr}
    a2aa:	4c19      	ldr	r4, [pc, #100]	; (a310 <nrf_cc3xx_platform_set_mutexes+0x68>)
    a2ac:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a2b0:	6806      	ldr	r6, [r0, #0]
    a2b2:	f8c4 c004 	str.w	ip, [r4, #4]
    a2b6:	f8d0 c008 	ldr.w	ip, [r0, #8]
    a2ba:	68c0      	ldr	r0, [r0, #12]
    a2bc:	f8c4 c008 	str.w	ip, [r4, #8]
    a2c0:	60e0      	str	r0, [r4, #12]
    a2c2:	6026      	str	r6, [r4, #0]
    a2c4:	6808      	ldr	r0, [r1, #0]
    a2c6:	4b13      	ldr	r3, [pc, #76]	; (a314 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    a2c8:	4d13      	ldr	r5, [pc, #76]	; (a318 <nrf_cc3xx_platform_set_mutexes+0x70>)
    a2ca:	6018      	str	r0, [r3, #0]
    a2cc:	6848      	ldr	r0, [r1, #4]
    a2ce:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    a2d2:	6058      	str	r0, [r3, #4]
    a2d4:	6888      	ldr	r0, [r1, #8]
    a2d6:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    a2da:	6098      	str	r0, [r3, #8]
    a2dc:	68c8      	ldr	r0, [r1, #12]
    a2de:	6909      	ldr	r1, [r1, #16]
    a2e0:	60d8      	str	r0, [r3, #12]
    a2e2:	6119      	str	r1, [r3, #16]
    a2e4:	d012      	beq.n	a30c <nrf_cc3xx_platform_set_mutexes+0x64>
    a2e6:	2300      	movs	r3, #0
    a2e8:	4a0c      	ldr	r2, [pc, #48]	; (a31c <nrf_cc3xx_platform_set_mutexes+0x74>)
    a2ea:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a2ee:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    a2f2:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    a2f6:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    a2fa:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    a2fe:	47b0      	blx	r6
    a300:	6823      	ldr	r3, [r4, #0]
    a302:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    a306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a30a:	4718      	bx	r3
    a30c:	bd70      	pop	{r4, r5, r6, pc}
    a30e:	bf00      	nop
    a310:	200021f4 	.word	0x200021f4
    a314:	20002204 	.word	0x20002204
    a318:	20014424 	.word	0x20014424
    a31c:	a95c5f2c 	.word	0xa95c5f2c

0000a320 <mbedtls_platform_zeroize>:
    a320:	b138      	cbz	r0, a332 <mbedtls_platform_zeroize+0x12>
    a322:	b131      	cbz	r1, a332 <mbedtls_platform_zeroize+0x12>
    a324:	2200      	movs	r2, #0
    a326:	4401      	add	r1, r0
    a328:	4603      	mov	r3, r0
    a32a:	3001      	adds	r0, #1
    a32c:	4288      	cmp	r0, r1
    a32e:	701a      	strb	r2, [r3, #0]
    a330:	d1fa      	bne.n	a328 <mbedtls_platform_zeroize+0x8>
    a332:	4770      	bx	lr

0000a334 <CC_LibInitNoRng>:
    a334:	b508      	push	{r3, lr}
    a336:	f000 f811 	bl	a35c <CC_HalInit>
    a33a:	b930      	cbnz	r0, a34a <CC_LibInitNoRng+0x16>
    a33c:	f000 f810 	bl	a360 <CC_PalInit>
    a340:	b938      	cbnz	r0, a352 <CC_LibInitNoRng+0x1e>
    a342:	4a05      	ldr	r2, [pc, #20]	; (a358 <CC_LibInitNoRng+0x24>)
    a344:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    a348:	bd08      	pop	{r3, pc}
    a34a:	f000 f837 	bl	a3bc <CC_PalTerminate>
    a34e:	2003      	movs	r0, #3
    a350:	bd08      	pop	{r3, pc}
    a352:	2004      	movs	r0, #4
    a354:	bd08      	pop	{r3, pc}
    a356:	bf00      	nop
    a358:	50845000 	.word	0x50845000

0000a35c <CC_HalInit>:
    a35c:	2000      	movs	r0, #0
    a35e:	4770      	bx	lr

0000a360 <CC_PalInit>:
    a360:	b510      	push	{r4, lr}
    a362:	4811      	ldr	r0, [pc, #68]	; (a3a8 <CC_PalInit+0x48>)
    a364:	f000 f848 	bl	a3f8 <CC_PalMutexCreate>
    a368:	b100      	cbz	r0, a36c <CC_PalInit+0xc>
    a36a:	bd10      	pop	{r4, pc}
    a36c:	480f      	ldr	r0, [pc, #60]	; (a3ac <CC_PalInit+0x4c>)
    a36e:	f000 f843 	bl	a3f8 <CC_PalMutexCreate>
    a372:	2800      	cmp	r0, #0
    a374:	d1f9      	bne.n	a36a <CC_PalInit+0xa>
    a376:	4c0e      	ldr	r4, [pc, #56]	; (a3b0 <CC_PalInit+0x50>)
    a378:	4620      	mov	r0, r4
    a37a:	f000 f83d 	bl	a3f8 <CC_PalMutexCreate>
    a37e:	2800      	cmp	r0, #0
    a380:	d1f3      	bne.n	a36a <CC_PalInit+0xa>
    a382:	4b0c      	ldr	r3, [pc, #48]	; (a3b4 <CC_PalInit+0x54>)
    a384:	480c      	ldr	r0, [pc, #48]	; (a3b8 <CC_PalInit+0x58>)
    a386:	601c      	str	r4, [r3, #0]
    a388:	f000 f836 	bl	a3f8 <CC_PalMutexCreate>
    a38c:	4601      	mov	r1, r0
    a38e:	2800      	cmp	r0, #0
    a390:	d1eb      	bne.n	a36a <CC_PalInit+0xa>
    a392:	f000 f82d 	bl	a3f0 <CC_PalDmaInit>
    a396:	4604      	mov	r4, r0
    a398:	b108      	cbz	r0, a39e <CC_PalInit+0x3e>
    a39a:	4620      	mov	r0, r4
    a39c:	bd10      	pop	{r4, pc}
    a39e:	f000 f83f 	bl	a420 <CC_PalPowerSaveModeInit>
    a3a2:	4620      	mov	r0, r4
    a3a4:	e7fa      	b.n	a39c <CC_PalInit+0x3c>
    a3a6:	bf00      	nop
    a3a8:	2000223c 	.word	0x2000223c
    a3ac:	20002230 	.word	0x20002230
    a3b0:	20002238 	.word	0x20002238
    a3b4:	20002240 	.word	0x20002240
    a3b8:	20002234 	.word	0x20002234

0000a3bc <CC_PalTerminate>:
    a3bc:	b508      	push	{r3, lr}
    a3be:	4808      	ldr	r0, [pc, #32]	; (a3e0 <CC_PalTerminate+0x24>)
    a3c0:	f000 f824 	bl	a40c <CC_PalMutexDestroy>
    a3c4:	4807      	ldr	r0, [pc, #28]	; (a3e4 <CC_PalTerminate+0x28>)
    a3c6:	f000 f821 	bl	a40c <CC_PalMutexDestroy>
    a3ca:	4807      	ldr	r0, [pc, #28]	; (a3e8 <CC_PalTerminate+0x2c>)
    a3cc:	f000 f81e 	bl	a40c <CC_PalMutexDestroy>
    a3d0:	4806      	ldr	r0, [pc, #24]	; (a3ec <CC_PalTerminate+0x30>)
    a3d2:	f000 f81b 	bl	a40c <CC_PalMutexDestroy>
    a3d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a3da:	f000 b80b 	b.w	a3f4 <CC_PalDmaTerminate>
    a3de:	bf00      	nop
    a3e0:	2000223c 	.word	0x2000223c
    a3e4:	20002230 	.word	0x20002230
    a3e8:	20002238 	.word	0x20002238
    a3ec:	20002234 	.word	0x20002234

0000a3f0 <CC_PalDmaInit>:
    a3f0:	2000      	movs	r0, #0
    a3f2:	4770      	bx	lr

0000a3f4 <CC_PalDmaTerminate>:
    a3f4:	4770      	bx	lr
    a3f6:	bf00      	nop

0000a3f8 <CC_PalMutexCreate>:
    a3f8:	b508      	push	{r3, lr}
    a3fa:	4b03      	ldr	r3, [pc, #12]	; (a408 <CC_PalMutexCreate+0x10>)
    a3fc:	6802      	ldr	r2, [r0, #0]
    a3fe:	681b      	ldr	r3, [r3, #0]
    a400:	6810      	ldr	r0, [r2, #0]
    a402:	4798      	blx	r3
    a404:	2000      	movs	r0, #0
    a406:	bd08      	pop	{r3, pc}
    a408:	200021f4 	.word	0x200021f4

0000a40c <CC_PalMutexDestroy>:
    a40c:	b508      	push	{r3, lr}
    a40e:	4b03      	ldr	r3, [pc, #12]	; (a41c <CC_PalMutexDestroy+0x10>)
    a410:	6802      	ldr	r2, [r0, #0]
    a412:	685b      	ldr	r3, [r3, #4]
    a414:	6810      	ldr	r0, [r2, #0]
    a416:	4798      	blx	r3
    a418:	2000      	movs	r0, #0
    a41a:	bd08      	pop	{r3, pc}
    a41c:	200021f4 	.word	0x200021f4

0000a420 <CC_PalPowerSaveModeInit>:
    a420:	b570      	push	{r4, r5, r6, lr}
    a422:	4c09      	ldr	r4, [pc, #36]	; (a448 <CC_PalPowerSaveModeInit+0x28>)
    a424:	4d09      	ldr	r5, [pc, #36]	; (a44c <CC_PalPowerSaveModeInit+0x2c>)
    a426:	6920      	ldr	r0, [r4, #16]
    a428:	68ab      	ldr	r3, [r5, #8]
    a42a:	4798      	blx	r3
    a42c:	b118      	cbz	r0, a436 <CC_PalPowerSaveModeInit+0x16>
    a42e:	4b08      	ldr	r3, [pc, #32]	; (a450 <CC_PalPowerSaveModeInit+0x30>)
    a430:	4808      	ldr	r0, [pc, #32]	; (a454 <CC_PalPowerSaveModeInit+0x34>)
    a432:	685b      	ldr	r3, [r3, #4]
    a434:	4798      	blx	r3
    a436:	2100      	movs	r1, #0
    a438:	4a07      	ldr	r2, [pc, #28]	; (a458 <CC_PalPowerSaveModeInit+0x38>)
    a43a:	68eb      	ldr	r3, [r5, #12]
    a43c:	6011      	str	r1, [r2, #0]
    a43e:	6920      	ldr	r0, [r4, #16]
    a440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a444:	4718      	bx	r3
    a446:	bf00      	nop
    a448:	20002204 	.word	0x20002204
    a44c:	200021f4 	.word	0x200021f4
    a450:	200021e4 	.word	0x200021e4
    a454:	0000eee8 	.word	0x0000eee8
    a458:	20014420 	.word	0x20014420

0000a45c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a45c:	4770      	bx	lr

0000a45e <flash_device_base>:
    if (fd_id != FLASH_DEVICE_ID) {
    a45e:	b908      	cbnz	r0, a464 <flash_device_base+0x6>
    *ret = FLASH_DEVICE_BASE;
    a460:	6008      	str	r0, [r1, #0]
    return 0;
    a462:	4770      	bx	lr
        return -EINVAL;
    a464:	f06f 0015 	mvn.w	r0, #21
}
    a468:	4770      	bx	lr

0000a46a <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    a46a:	b121      	cbz	r1, a476 <flash_area_id_from_multi_image_slot+0xc>
    a46c:	2901      	cmp	r1, #1
    a46e:	d007      	beq.n	a480 <flash_area_id_from_multi_image_slot+0x16>
    a470:	f06f 0015 	mvn.w	r0, #21
    a474:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    a476:	b148      	cbz	r0, a48c <flash_area_id_from_multi_image_slot+0x22>
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    a478:	2801      	cmp	r0, #1
    a47a:	bf18      	it	ne
    a47c:	20ff      	movne	r0, #255	; 0xff
    a47e:	4770      	bx	lr
    a480:	b130      	cbz	r0, a490 <flash_area_id_from_multi_image_slot+0x26>
    a482:	2801      	cmp	r0, #1
    a484:	bf14      	ite	ne
    a486:	20ff      	movne	r0, #255	; 0xff
    a488:	2008      	moveq	r0, #8
    a48a:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    a48c:	2004      	movs	r0, #4
    a48e:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    a490:	2002      	movs	r0, #2
}
    a492:	4770      	bx	lr

0000a494 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    a494:	2000      	movs	r0, #0
    a496:	4770      	bx	lr

0000a498 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    a498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a49c:	460e      	mov	r6, r1
    a49e:	4617      	mov	r7, r2
    a4a0:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    a4a2:	4604      	mov	r4, r0
    a4a4:	b928      	cbnz	r0, a4b2 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    a4a6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    a4aa:	4640      	mov	r0, r8
    a4ac:	b003      	add	sp, #12
    a4ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    a4b2:	2900      	cmp	r1, #0
    a4b4:	d0f7      	beq.n	a4a6 <bootutil_tlv_iter_begin+0xe>
    a4b6:	2a00      	cmp	r2, #0
    a4b8:	d0f5      	beq.n	a4a6 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    a4ba:	68cb      	ldr	r3, [r1, #12]
    a4bc:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    a4be:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    a4c0:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    a4c2:	2304      	movs	r3, #4
    a4c4:	4629      	mov	r1, r5
    a4c6:	eb0d 0203 	add.w	r2, sp, r3
    a4ca:	f000 ffb0 	bl	b42e <flash_area_read>
    a4ce:	4680      	mov	r8, r0
    a4d0:	2800      	cmp	r0, #0
    a4d2:	d1e8      	bne.n	a4a6 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    a4d4:	f646 1208 	movw	r2, #26888	; 0x6908
    a4d8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    a4dc:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    a4de:	4291      	cmp	r1, r2
    a4e0:	d125      	bne.n	a52e <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    a4e2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    a4e6:	4299      	cmp	r1, r3
    a4e8:	d1dd      	bne.n	a4a6 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    a4ea:	2304      	movs	r3, #4
    a4ec:	4638      	mov	r0, r7
    a4ee:	eb0d 0203 	add.w	r2, sp, r3
    a4f2:	4429      	add	r1, r5
    a4f4:	f000 ff9b 	bl	b42e <flash_area_read>
    a4f8:	2800      	cmp	r0, #0
    a4fa:	d1d4      	bne.n	a4a6 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    a4fc:	f646 1307 	movw	r3, #26887	; 0x6907
    a500:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a504:	429a      	cmp	r2, r3
    a506:	d1ce      	bne.n	a4a6 <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    a508:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    a50c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    a510:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    a514:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    a516:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    a518:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    a51c:	442b      	add	r3, r5
    a51e:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    a520:	8973      	ldrh	r3, [r6, #10]
    a522:	4413      	add	r3, r2
    a524:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    a526:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    a528:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    a52a:	6125      	str	r5, [r4, #16]
    return 0;
    a52c:	e7bd      	b.n	a4aa <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    a52e:	2b00      	cmp	r3, #0
    a530:	d0e4      	beq.n	a4fc <bootutil_tlv_iter_begin+0x64>
    a532:	e7b8      	b.n	a4a6 <bootutil_tlv_iter_begin+0xe>

0000a534 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    a534:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a538:	460e      	mov	r6, r1
    a53a:	4617      	mov	r7, r2
    a53c:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    a53e:	4604      	mov	r4, r0
    a540:	b920      	cbnz	r0, a54c <bootutil_tlv_iter_next+0x18>
        return -1;
    a542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    a546:	b002      	add	sp, #8
    a548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    a54c:	6803      	ldr	r3, [r0, #0]
    a54e:	2b00      	cmp	r3, #0
    a550:	d0f7      	beq.n	a542 <bootutil_tlv_iter_next+0xe>
    a552:	6843      	ldr	r3, [r0, #4]
    a554:	2b00      	cmp	r3, #0
    a556:	d0f4      	beq.n	a542 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    a558:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    a55c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    a560:	429a      	cmp	r2, r3
    a562:	d216      	bcs.n	a592 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    a564:	6823      	ldr	r3, [r4, #0]
    a566:	895b      	ldrh	r3, [r3, #10]
    a568:	b123      	cbz	r3, a574 <bootutil_tlv_iter_next+0x40>
    a56a:	68e3      	ldr	r3, [r4, #12]
    a56c:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    a56e:	bf04      	itt	eq
    a570:	3304      	addeq	r3, #4
    a572:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    a574:	2304      	movs	r3, #4
    a576:	6921      	ldr	r1, [r4, #16]
    a578:	6860      	ldr	r0, [r4, #4]
    a57a:	eb0d 0203 	add.w	r2, sp, r3
    a57e:	f000 ff56 	bl	b42e <flash_area_read>
        if (rc) {
    a582:	2800      	cmp	r0, #0
    a584:	d1dd      	bne.n	a542 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    a586:	7aa3      	ldrb	r3, [r4, #10]
    a588:	b12b      	cbz	r3, a596 <bootutil_tlv_iter_next+0x62>
    a58a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    a58e:	429a      	cmp	r2, r3
    a590:	d301      	bcc.n	a596 <bootutil_tlv_iter_next+0x62>
            return 1;
    a592:	2001      	movs	r0, #1
    a594:	e7d7      	b.n	a546 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    a596:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    a598:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    a59c:	4543      	cmp	r3, r8
    a59e:	f101 0204 	add.w	r2, r1, #4
    a5a2:	d003      	beq.n	a5ac <bootutil_tlv_iter_next+0x78>
    a5a4:	f8bd c004 	ldrh.w	ip, [sp, #4]
    a5a8:	459c      	cmp	ip, r3
    a5aa:	d10b      	bne.n	a5c4 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    a5ac:	b115      	cbz	r5, a5b4 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    a5ae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a5b2:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    a5b4:	6923      	ldr	r3, [r4, #16]
    a5b6:	3304      	adds	r3, #4
    a5b8:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    a5ba:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    a5bc:	6923      	ldr	r3, [r4, #16]
    a5be:	4413      	add	r3, r2
    a5c0:	6123      	str	r3, [r4, #16]
            return 0;
    a5c2:	e7c0      	b.n	a546 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    a5c4:	6923      	ldr	r3, [r4, #16]
    a5c6:	4413      	add	r3, r2
    a5c8:	6123      	str	r3, [r4, #16]
    a5ca:	e7c7      	b.n	a55c <bootutil_tlv_iter_next+0x28>

0000a5cc <boot_fih_memequal>:
 */
#ifdef MCUBOOT_FIH_PROFILE_OFF
inline
fih_int boot_fih_memequal(const void *s1, const void *s2, size_t n)
{
    return memcmp(s1, s2, n);
    a5cc:	f001 bab3 	b.w	bb36 <memcmp>

0000a5d0 <boot_trailer_sz>:
}

uint32_t
boot_status_sz(uint32_t min_write_sz)
{
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    a5d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    a5d4:	4358      	muls	r0, r3

uint32_t
boot_trailer_sz(uint32_t min_write_sz)
{
    return boot_status_sz(min_write_sz) + boot_trailer_info_sz();
}
    a5d6:	3030      	adds	r0, #48	; 0x30
    a5d8:	4770      	bx	lr

0000a5da <boot_status_off>:
    return -1;
}

uint32_t
boot_status_off(const struct flash_area *fap)
{
    a5da:	b510      	push	{r4, lr}
    a5dc:	4604      	mov	r4, r0
    uint32_t off_from_end;
    uint32_t elem_sz;

    elem_sz = flash_area_align(fap);
    a5de:	f000 ff64 	bl	b4aa <flash_area_align>
    }
#endif

    assert(off_from_end <= flash_area_get_size(fap));
    return flash_area_get_size(fap) - off_from_end;
}
    a5e2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    return flash_area_get_size(fap) - off_from_end;
    a5e6:	68a3      	ldr	r3, [r4, #8]
    a5e8:	3b30      	subs	r3, #48	; 0x30
}
    a5ea:	fb02 3010 	mls	r0, r2, r0, r3
    a5ee:	bd10      	pop	{r4, pc}

0000a5f0 <bootutil_max_image_size>:
                   * this value to fail.
                   */
    }
    return flash_sector_get_off(&sector);
#elif defined(MCUBOOT_OVERWRITE_ONLY)
    return boot_swap_info_off(fap);
    a5f0:	f001 bdf4 	b.w	c1dc <boot_swap_info_off>

0000a5f4 <boot_initialize_area>:
{
    a5f4:	4603      	mov	r3, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    a5f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
    a5fa:	b513      	push	{r0, r1, r4, lr}
    a5fc:	4608      	mov	r0, r1
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a5fe:	f893 10b8 	ldrb.w	r1, [r3, #184]	; 0xb8
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    a602:	9201      	str	r2, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a604:	b199      	cbz	r1, a62e <boot_initialize_area+0x3a>
    a606:	2901      	cmp	r1, #1
    a608:	d003      	beq.n	a612 <boot_initialize_area+0x1e>
    a60a:	28ff      	cmp	r0, #255	; 0xff
    a60c:	d011      	beq.n	a632 <boot_initialize_area+0x3e>
        return BOOT_EFLASH;
    a60e:	2001      	movs	r0, #1
    a610:	e01d      	b.n	a64e <boot_initialize_area+0x5a>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a612:	2801      	cmp	r0, #1
    a614:	d00d      	beq.n	a632 <boot_initialize_area+0x3e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    a616:	2208      	movs	r2, #8
    a618:	4282      	cmp	r2, r0
    a61a:	d1f8      	bne.n	a60e <boot_initialize_area+0x1a>
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    a61c:	2458      	movs	r4, #88	; 0x58
    a61e:	fb04 3201 	mla	r2, r4, r1, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    a622:	fb04 3301 	mla	r3, r4, r1, r3
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    a626:	6d12      	ldr	r2, [r2, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    a628:	f103 0454 	add.w	r4, r3, #84	; 0x54
    a62c:	e009      	b.n	a642 <boot_initialize_area+0x4e>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a62e:	2804      	cmp	r0, #4
    a630:	d10f      	bne.n	a652 <boot_initialize_area+0x5e>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    a632:	2458      	movs	r4, #88	; 0x58
    a634:	fb04 3201 	mla	r2, r4, r1, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    a638:	fb04 3301 	mla	r3, r4, r1, r3
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    a63c:	6a52      	ldr	r2, [r2, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    a63e:	f103 0428 	add.w	r4, r3, #40	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    a642:	a901      	add	r1, sp, #4
    a644:	f7f8 fc74 	bl	2f30 <flash_area_get_sectors>
    if (rc != 0) {
    a648:	b908      	cbnz	r0, a64e <boot_initialize_area+0x5a>
    *out_num_sectors = num_sectors;
    a64a:	9b01      	ldr	r3, [sp, #4]
    a64c:	6023      	str	r3, [r4, #0]
}
    a64e:	b002      	add	sp, #8
    a650:	bd10      	pop	{r4, pc}
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    a652:	2202      	movs	r2, #2
    a654:	e7e0      	b.n	a618 <boot_initialize_area+0x24>

0000a656 <boot_read_sectors>:
{
    a656:	b538      	push	{r3, r4, r5, lr}
    image_index = BOOT_CURR_IMG(state);
    a658:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
{
    a65c:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a65e:	b1e9      	cbz	r1, a69c <boot_read_sectors+0x46>
    a660:	2901      	cmp	r1, #1
    a662:	d006      	beq.n	a672 <boot_read_sectors+0x1c>
    a664:	21ff      	movs	r1, #255	; 0xff
    a666:	f7ff ffc5 	bl	a5f4 <boot_initialize_area>
    if (rc != 0) {
    a66a:	b1f0      	cbz	r0, a6aa <boot_read_sectors+0x54>
        return BOOT_EFLASH;
    a66c:	2501      	movs	r5, #1
}
    a66e:	4628      	mov	r0, r5
    a670:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a672:	f7ff ffbf 	bl	a5f4 <boot_initialize_area>
    if (rc != 0) {
    a676:	2800      	cmp	r0, #0
    a678:	d1f8      	bne.n	a66c <boot_read_sectors+0x16>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    a67a:	2108      	movs	r1, #8
    a67c:	4620      	mov	r0, r4
    a67e:	f7ff ffb9 	bl	a5f4 <boot_initialize_area>
    if (rc != 0) {
    a682:	4605      	mov	r5, r0
    a684:	b998      	cbnz	r0, a6ae <boot_read_sectors+0x58>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    a686:	2258      	movs	r2, #88	; 0x58
    a688:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    a68c:	fb02 4303 	mla	r3, r2, r3, r4
    a690:	6a18      	ldr	r0, [r3, #32]
    a692:	f000 ff0a 	bl	b4aa <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    a696:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    return 0;
    a69a:	e7e8      	b.n	a66e <boot_read_sectors+0x18>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a69c:	2104      	movs	r1, #4
    a69e:	f7ff ffa9 	bl	a5f4 <boot_initialize_area>
    if (rc != 0) {
    a6a2:	2800      	cmp	r0, #0
    a6a4:	d1e2      	bne.n	a66c <boot_read_sectors+0x16>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    a6a6:	2102      	movs	r1, #2
    a6a8:	e7e8      	b.n	a67c <boot_read_sectors+0x26>
    a6aa:	21ff      	movs	r1, #255	; 0xff
    a6ac:	e7e6      	b.n	a67c <boot_read_sectors+0x26>
        return BOOT_EFLASH_SEC;
    a6ae:	2509      	movs	r5, #9
    a6b0:	e7dd      	b.n	a66e <boot_read_sectors+0x18>

0000a6b2 <boot_read_image_headers>:
{
    a6b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6b6:	4604      	mov	r4, r0
    a6b8:	460d      	mov	r5, r1
    a6ba:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    a6bc:	f04f 0900 	mov.w	r9, #0
    a6c0:	f04f 082c 	mov.w	r8, #44	; 0x2c
    a6c4:	2758      	movs	r7, #88	; 0x58
        rc = BOOT_HOOK_CALL(boot_read_image_header_hook, BOOT_HOOK_REGULAR,
    a6c6:	fb08 fa09 	mul.w	sl, r8, r9
    a6ca:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    a6ce:	4649      	mov	r1, r9
    a6d0:	fb17 a200 	smlabb	r2, r7, r0, sl
    a6d4:	4422      	add	r2, r4
    a6d6:	f7fb ff5f 	bl	6598 <boot_read_image_header_hook>
        if (rc == BOOT_HOOK_REGULAR)
    a6da:	2801      	cmp	r0, #1
    a6dc:	d109      	bne.n	a6f2 <boot_read_image_headers+0x40>
    a6de:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    a6e2:	4633      	mov	r3, r6
    a6e4:	fb17 a202 	smlabb	r2, r7, r2, sl
    a6e8:	4649      	mov	r1, r9
    a6ea:	4620      	mov	r0, r4
    a6ec:	4422      	add	r2, r4
    a6ee:	f000 f825 	bl	a73c <boot_read_image_header>
        if (rc != 0) {
    a6f2:	b138      	cbz	r0, a704 <boot_read_image_headers+0x52>
            if (i > 0 && !require_all) {
    a6f4:	f1b9 0f00 	cmp.w	r9, #0
    a6f8:	d002      	beq.n	a700 <boot_read_image_headers+0x4e>
                return 0;
    a6fa:	2d00      	cmp	r5, #0
    a6fc:	bf08      	it	eq
    a6fe:	2000      	moveq	r0, #0
}
    a700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    a704:	f1b9 0f00 	cmp.w	r9, #0
    a708:	d1fa      	bne.n	a700 <boot_read_image_headers+0x4e>
    a70a:	f04f 0901 	mov.w	r9, #1
    a70e:	e7da      	b.n	a6c6 <boot_read_image_headers+0x14>

0000a710 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    a710:	2301      	movs	r3, #1
    a712:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    a714:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    a718:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    a71a:	2300      	movs	r3, #0
    bs->source = 0;
    a71c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    a720:	4770      	bx	lr

0000a722 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    a722:	7943      	ldrb	r3, [r0, #5]
    a724:	2b01      	cmp	r3, #1
    a726:	d107      	bne.n	a738 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    a728:	6803      	ldr	r3, [r0, #0]
    a72a:	2b01      	cmp	r3, #1
    a72c:	d104      	bne.n	a738 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    a72e:	7900      	ldrb	r0, [r0, #4]
    a730:	1e43      	subs	r3, r0, #1
    a732:	4258      	negs	r0, r3
    a734:	4158      	adcs	r0, r3
    a736:	4770      	bx	lr
    a738:	2000      	movs	r0, #0
}
    a73a:	4770      	bx	lr

0000a73c <boot_read_image_header>:
#endif

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
    a73c:	b513      	push	{r0, r1, r4, lr}

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    a73e:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
{
    a742:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    a744:	f7ff fe91 	bl	a46a <flash_area_id_from_multi_image_slot>

    rc = flash_area_open(area_id, &fap);
    a748:	a901      	add	r1, sp, #4
    a74a:	b2c0      	uxtb	r0, r0
    a74c:	f7f8 fbc8 	bl	2ee0 <flash_area_open>
    if (rc == 0) {
    a750:	4601      	mov	r1, r0
    a752:	b968      	cbnz	r0, a770 <boot_read_image_header+0x34>
        rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    a754:	4622      	mov	r2, r4
    a756:	2320      	movs	r3, #32
    a758:	9801      	ldr	r0, [sp, #4]
    a75a:	f000 fe68 	bl	b42e <flash_area_read>
    a75e:	4604      	mov	r4, r0
        flash_area_close(fap);
    a760:	9801      	ldr	r0, [sp, #4]
    a762:	f000 fe63 	bl	b42c <flash_area_close>
    }

    if (rc != 0) {
    a766:	1e20      	subs	r0, r4, #0
    a768:	bf18      	it	ne
    a76a:	2001      	movne	r0, #1
        rc = BOOT_EFLASH;
    }

    return rc;
}
    a76c:	b002      	add	sp, #8
    a76e:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    a770:	2001      	movs	r0, #1
    return rc;
    a772:	e7fb      	b.n	a76c <boot_read_image_header+0x30>

0000a774 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
    a774:	2258      	movs	r2, #88	; 0x58
 * area, and have sizes that are a multiple of each other (powers of two
 * presumably!).
 */
int
boot_slots_compatible(struct boot_loader_state *state)
{
    a776:	b5f0      	push	{r4, r5, r6, r7, lr}
    a778:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
    a77c:	fb02 0303 	mla	r3, r2, r3, r0
    a780:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
    size_t i, j;
    int8_t smaller;

    num_sectors_primary = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_secondary = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    a784:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
    a788:	d836      	bhi.n	a7f8 <boot_slots_compatible+0x84>
    a78a:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    a78c:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
    a790:	d832      	bhi.n	a7f8 <boot_slots_compatible+0x84>
     * number of a slot's sectors are able to fit into another, which only
     * excludes cases where sector sizes are not a multiple of each other.
     */
    i = sz0 = primary_slot_sz = 0;
    j = sz1 = secondary_slot_sz = 0;
    smaller = 0;
    a792:	2100      	movs	r1, #0
    j = sz1 = secondary_slot_sz = 0;
    a794:	4608      	mov	r0, r1
    i = sz0 = primary_slot_sz = 0;
    a796:	460a      	mov	r2, r1
    j = sz1 = secondary_slot_sz = 0;
    a798:	460d      	mov	r5, r1
    i = sz0 = primary_slot_sz = 0;
    a79a:	460c      	mov	r4, r1
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    a79c:	4562      	cmp	r2, ip
    a79e:	d307      	bcc.n	a7b0 <boot_slots_compatible+0x3c>
    a7a0:	42b0      	cmp	r0, r6
    a7a2:	d305      	bcc.n	a7b0 <boot_slots_compatible+0x3c>
            smaller = sz0 = sz1 = 0;
        }
#endif
    }

    if ((i != num_sectors_primary) ||
    a7a4:	4562      	cmp	r2, ip
    a7a6:	d127      	bne.n	a7f8 <boot_slots_compatible+0x84>
    a7a8:	1b83      	subs	r3, r0, r6
    a7aa:	4258      	negs	r0, r3
    a7ac:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
    a7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (sz0 == sz1) {
    a7b0:	42ac      	cmp	r4, r5
    a7b2:	d10c      	bne.n	a7ce <boot_slots_compatible+0x5a>
	return fs->fs_size;
    a7b4:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    a7b6:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a7ba:	687f      	ldr	r7, [r7, #4]
            i++;
    a7bc:	3201      	adds	r2, #1
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a7be:	443c      	add	r4, r7
    a7c0:	6d1f      	ldr	r7, [r3, #80]	; 0x50
    a7c2:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a7c6:	687f      	ldr	r7, [r7, #4]
            j++;
    a7c8:	3001      	adds	r0, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a7ca:	443d      	add	r5, r7
            j++;
    a7cc:	e7e6      	b.n	a79c <boot_slots_compatible+0x28>
        } else if (sz0 < sz1) {
    a7ce:	d209      	bcs.n	a7e4 <boot_slots_compatible+0x70>
    a7d0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
            if (smaller == 2) {
    a7d2:	2902      	cmp	r1, #2
    a7d4:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a7d8:	687f      	ldr	r7, [r7, #4]
    a7da:	443c      	add	r4, r7
            if (smaller == 2) {
    a7dc:	d00c      	beq.n	a7f8 <boot_slots_compatible+0x84>
            smaller = 1;
    a7de:	2101      	movs	r1, #1
            i++;
    a7e0:	3201      	adds	r2, #1
    a7e2:	e7db      	b.n	a79c <boot_slots_compatible+0x28>
    a7e4:	6d1f      	ldr	r7, [r3, #80]	; 0x50
            if (smaller == 1) {
    a7e6:	2901      	cmp	r1, #1
    a7e8:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a7ec:	687f      	ldr	r7, [r7, #4]
    a7ee:	443d      	add	r5, r7
            if (smaller == 1) {
    a7f0:	d002      	beq.n	a7f8 <boot_slots_compatible+0x84>
            smaller = 2;
    a7f2:	2102      	movs	r1, #2
            j++;
    a7f4:	3001      	adds	r0, #1
    a7f6:	e7d1      	b.n	a79c <boot_slots_compatible+0x28>
        return 0;
    a7f8:	2000      	movs	r0, #0
    a7fa:	e7d8      	b.n	a7ae <boot_slots_compatible+0x3a>

0000a7fc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a7fc:	4604      	mov	r4, r0
    a7fe:	b508      	push	{r3, lr}
    a800:	4608      	mov	r0, r1
    a802:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a804:	461a      	mov	r2, r3
    a806:	47a0      	blx	r4
	return z_impl_z_current_get();
    a808:	f7ff f9c6 	bl	9b98 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a80c:	f7f9 fd10 	bl	4230 <z_impl_k_thread_abort>

0000a810 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    a810:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    a812:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    a816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    a81a:	bf2c      	ite	cs
    a81c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    a820:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    a824:	4770      	bx	lr

0000a826 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    a826:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    a82a:	6880      	ldr	r0, [r0, #8]
    a82c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    a830:	bf2c      	ite	cs
    a832:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    a836:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    a83a:	4770      	bx	lr

0000a83c <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    a83c:	2201      	movs	r2, #1
{
    a83e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    a840:	f7ff ffe6 	bl	a810 <chunk_field>
}
    a844:	40d0      	lsrs	r0, r2
    a846:	bd08      	pop	{r3, pc}

0000a848 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    a848:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    a84a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    a84e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a852:	d308      	bcc.n	a866 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    a854:	684b      	ldr	r3, [r1, #4]
		if (used) {
    a856:	b11a      	cbz	r2, a860 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    a858:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a85c:	604b      	str	r3, [r1, #4]
    a85e:	4770      	bx	lr
    a860:	f023 0301 	bic.w	r3, r3, #1
    a864:	e7fa      	b.n	a85c <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a866:	884b      	ldrh	r3, [r1, #2]
		if (used) {
    a868:	b11a      	cbz	r2, a872 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a86a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a86e:	804b      	strh	r3, [r1, #2]
		}
	}
}
    a870:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a872:	f023 0301 	bic.w	r3, r3, #1
    a876:	e7fa      	b.n	a86e <set_chunk_used+0x26>

0000a878 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a878:	0053      	lsls	r3, r2, #1
    a87a:	2201      	movs	r2, #1
    a87c:	f7ff bfd3 	b.w	a826 <chunk_set>

0000a880 <mem_to_chunkid>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    a880:	6883      	ldr	r3, [r0, #8]
    a882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a886:	bf34      	ite	cc
    a888:	2304      	movcc	r3, #4
    a88a:	2308      	movcs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a88c:	1ac9      	subs	r1, r1, r3
    a88e:	1a08      	subs	r0, r1, r0
}
    a890:	08c0      	lsrs	r0, r0, #3
    a892:	4770      	bx	lr

0000a894 <bucket_idx.isra.0>:
    a894:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a898:	bf34      	ite	cc
    a89a:	2304      	movcc	r3, #4
    a89c:	2308      	movcs	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    a89e:	1c48      	adds	r0, r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a8a0:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    a8a2:	eba0 00d3 	sub.w	r0, r0, r3, lsr #3
	return 31 - __builtin_clz(usable_sz);
    a8a6:	fab0 f080 	clz	r0, r0
}
    a8aa:	f1c0 001f 	rsb	r0, r0, #31
    a8ae:	4770      	bx	lr

0000a8b0 <free_list_remove_bidx>:
{
    a8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8b4:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
    a8b6:	2203      	movs	r2, #3
    a8b8:	460e      	mov	r6, r1
    a8ba:	4604      	mov	r4, r0
    a8bc:	f7ff ffa8 	bl	a810 <chunk_field>
	if (next_free_chunk(h, c) == c) {
    a8c0:	4286      	cmp	r6, r0
    a8c2:	4605      	mov	r5, r0
    a8c4:	f107 0804 	add.w	r8, r7, #4
    a8c8:	d10a      	bne.n	a8e0 <free_list_remove_bidx+0x30>
		h->avail_buckets &= ~BIT(bidx);
    a8ca:	2201      	movs	r2, #1
    a8cc:	68e3      	ldr	r3, [r4, #12]
    a8ce:	40ba      	lsls	r2, r7
    a8d0:	ea23 0302 	bic.w	r3, r3, r2
    a8d4:	60e3      	str	r3, [r4, #12]
		b->next = 0;
    a8d6:	2300      	movs	r3, #0
    a8d8:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
    a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
    a8e0:	4631      	mov	r1, r6
    a8e2:	2202      	movs	r2, #2
    a8e4:	4620      	mov	r0, r4
    a8e6:	f7ff ff93 	bl	a810 <chunk_field>
    a8ea:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
    a8ec:	462b      	mov	r3, r5
    a8ee:	4601      	mov	r1, r0
    a8f0:	2203      	movs	r2, #3
    a8f2:	4620      	mov	r0, r4
		b->next = second;
    a8f4:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
    a8f8:	f7ff ff95 	bl	a826 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    a8fc:	4633      	mov	r3, r6
    a8fe:	4629      	mov	r1, r5
    a900:	4620      	mov	r0, r4
}
    a902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a906:	2202      	movs	r2, #2
    a908:	f7ff bf8d 	b.w	a826 <chunk_set>

0000a90c <free_list_remove>:
{
    a90c:	b570      	push	{r4, r5, r6, lr}
    a90e:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    a910:	6886      	ldr	r6, [r0, #8]
    a912:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    a914:	f7ff ff92 	bl	a83c <chunk_size>
    a918:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    a91c:	4601      	mov	r1, r0
    a91e:	d301      	bcc.n	a924 <free_list_remove+0x18>
    a920:	2801      	cmp	r0, #1
    a922:	d009      	beq.n	a938 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    a924:	4630      	mov	r0, r6
    a926:	f7ff ffb5 	bl	a894 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
    a92a:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
    a92c:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
    a92e:	4620      	mov	r0, r4
}
    a930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
    a934:	f7ff bfbc 	b.w	a8b0 <free_list_remove_bidx>
}
    a938:	bd70      	pop	{r4, r5, r6, pc}

0000a93a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    a93a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a93e:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
    a940:	6880      	ldr	r0, [r0, #8]
    a942:	f7ff ffa7 	bl	a894 <bucket_idx.isra.0>
    a946:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    a94a:	f8da 9010 	ldr.w	r9, [sl, #16]
{
    a94e:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
    a950:	4606      	mov	r6, r0
	if (b->next) {
    a952:	f1b9 0f00 	cmp.w	r9, #0
    a956:	d01b      	beq.n	a990 <alloc_chunk+0x56>
    a958:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    a95a:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
    a95e:	4628      	mov	r0, r5
    a960:	4621      	mov	r1, r4
    a962:	f7ff ff6b 	bl	a83c <chunk_size>
    a966:	4540      	cmp	r0, r8
    a968:	d307      	bcc.n	a97a <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
    a96a:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    a96c:	4621      	mov	r1, r4
    a96e:	4628      	mov	r0, r5
    a970:	f7ff ff9e 	bl	a8b0 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    a974:	4620      	mov	r0, r4
    a976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
    a97a:	2203      	movs	r2, #3
    a97c:	4621      	mov	r1, r4
    a97e:	4628      	mov	r0, r5
    a980:	f7ff ff46 	bl	a810 <chunk_field>
		} while (--i && b->next != first);
    a984:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
    a986:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
    a98a:	d001      	beq.n	a990 <alloc_chunk+0x56>
    a98c:	4581      	cmp	r9, r0
    a98e:	d1e4      	bne.n	a95a <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    a990:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    a994:	68eb      	ldr	r3, [r5, #12]
    a996:	3601      	adds	r6, #1
    a998:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
    a99a:	401c      	ands	r4, r3
    a99c:	d0ea      	beq.n	a974 <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
    a99e:	fa94 f2a4 	rbit	r2, r4
    a9a2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    a9a6:	1d13      	adds	r3, r2, #4
    a9a8:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    a9ac:	e7de      	b.n	a96c <alloc_chunk+0x32>

0000a9ae <split_chunks>:
{
    a9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9b2:	4614      	mov	r4, r2
    a9b4:	460e      	mov	r6, r1
    a9b6:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
    a9b8:	f7ff ff40 	bl	a83c <chunk_size>
	chunksz_t lsz = rc - lc;
    a9bc:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
    a9c0:	1b37      	subs	r7, r6, r4
    a9c2:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
    a9c4:	4642      	mov	r2, r8
    a9c6:	4631      	mov	r1, r6
    a9c8:	4628      	mov	r0, r5
    a9ca:	f7ff ff55 	bl	a878 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
    a9ce:	463a      	mov	r2, r7
    a9d0:	4621      	mov	r1, r4
    a9d2:	4628      	mov	r0, r5
    a9d4:	f7ff ff50 	bl	a878 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a9d8:	4643      	mov	r3, r8
    a9da:	2200      	movs	r2, #0
    a9dc:	4621      	mov	r1, r4
    a9de:	4628      	mov	r0, r5
    a9e0:	f7ff ff21 	bl	a826 <chunk_set>
	return c + chunk_size(h, c);
    a9e4:	4621      	mov	r1, r4
    a9e6:	4628      	mov	r0, r5
    a9e8:	f7ff ff28 	bl	a83c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a9ec:	463b      	mov	r3, r7
    a9ee:	1821      	adds	r1, r4, r0
    a9f0:	2200      	movs	r2, #0
    a9f2:	4628      	mov	r0, r5
}
    a9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a9f8:	f7ff bf15 	b.w	a826 <chunk_set>

0000a9fc <merge_chunks>:
{
    a9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa00:	4616      	mov	r6, r2
    aa02:	4604      	mov	r4, r0
    aa04:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    aa06:	f7ff ff19 	bl	a83c <chunk_size>
    aa0a:	4631      	mov	r1, r6
    aa0c:	4605      	mov	r5, r0
    aa0e:	4620      	mov	r0, r4
    aa10:	f7ff ff14 	bl	a83c <chunk_size>
    aa14:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
    aa16:	462a      	mov	r2, r5
    aa18:	4639      	mov	r1, r7
    aa1a:	4620      	mov	r0, r4
    aa1c:	f7ff ff2c 	bl	a878 <set_chunk_size>
	return c + chunk_size(h, c);
    aa20:	4631      	mov	r1, r6
    aa22:	4620      	mov	r0, r4
    aa24:	f7ff ff0a 	bl	a83c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    aa28:	462b      	mov	r3, r5
    aa2a:	1831      	adds	r1, r6, r0
    aa2c:	2200      	movs	r2, #0
    aa2e:	4620      	mov	r0, r4
}
    aa30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aa34:	f7ff bef7 	b.w	a826 <chunk_set>

0000aa38 <free_list_add>:
{
    aa38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa3c:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    aa3e:	6886      	ldr	r6, [r0, #8]
    aa40:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    aa42:	f7ff fefb 	bl	a83c <chunk_size>
    aa46:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    aa4a:	4601      	mov	r1, r0
    aa4c:	d301      	bcc.n	aa52 <free_list_add+0x1a>
    aa4e:	2801      	cmp	r0, #1
    aa50:	d032      	beq.n	aab8 <free_list_add+0x80>
		int bidx = bucket_idx(h, chunk_size(h, c));
    aa52:	4630      	mov	r0, r6
    aa54:	f7ff ff1e 	bl	a894 <bucket_idx.isra.0>
	if (b->next == 0U) {
    aa58:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    aa5c:	690e      	ldr	r6, [r1, #16]
    aa5e:	b996      	cbnz	r6, aa86 <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
    aa60:	2201      	movs	r2, #1
    aa62:	68e3      	ldr	r3, [r4, #12]
    aa64:	4082      	lsls	r2, r0
    aa66:	4313      	orrs	r3, r2
    aa68:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    aa6a:	2202      	movs	r2, #2
		b->next = c;
    aa6c:	610d      	str	r5, [r1, #16]
    aa6e:	462b      	mov	r3, r5
    aa70:	4629      	mov	r1, r5
    aa72:	4620      	mov	r0, r4
    aa74:	f7ff fed7 	bl	a826 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    aa78:	2203      	movs	r2, #3
    aa7a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    aa7c:	4620      	mov	r0, r4
}
    aa7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aa82:	f7ff bed0 	b.w	a826 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    aa86:	2202      	movs	r2, #2
    aa88:	4631      	mov	r1, r6
    aa8a:	4620      	mov	r0, r4
    aa8c:	f7ff fec0 	bl	a810 <chunk_field>
    aa90:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    aa92:	4603      	mov	r3, r0
    aa94:	4629      	mov	r1, r5
    aa96:	4620      	mov	r0, r4
    aa98:	f7ff fec5 	bl	a826 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    aa9c:	2203      	movs	r2, #3
    aa9e:	4633      	mov	r3, r6
    aaa0:	4629      	mov	r1, r5
    aaa2:	4620      	mov	r0, r4
    aaa4:	f7ff febf 	bl	a826 <chunk_set>
    aaa8:	4639      	mov	r1, r7
    aaaa:	462b      	mov	r3, r5
    aaac:	4620      	mov	r0, r4
    aaae:	f7ff feba 	bl	a826 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    aab2:	2202      	movs	r2, #2
    aab4:	4631      	mov	r1, r6
    aab6:	e7e1      	b.n	aa7c <free_list_add+0x44>
    aab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000aabc <free_chunk>:
{
    aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aabe:	460c      	mov	r4, r1
    aac0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    aac2:	f7ff febb 	bl	a83c <chunk_size>
    aac6:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    aac8:	2201      	movs	r2, #1
    aaca:	4631      	mov	r1, r6
    aacc:	4628      	mov	r0, r5
    aace:	f7ff fe9f 	bl	a810 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
    aad2:	07c3      	lsls	r3, r0, #31
    aad4:	d40c      	bmi.n	aaf0 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
    aad6:	4631      	mov	r1, r6
    aad8:	4628      	mov	r0, r5
    aada:	f7ff ff17 	bl	a90c <free_list_remove>
	return c + chunk_size(h, c);
    aade:	4621      	mov	r1, r4
    aae0:	4628      	mov	r0, r5
    aae2:	f7ff feab 	bl	a83c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    aae6:	4621      	mov	r1, r4
    aae8:	1822      	adds	r2, r4, r0
    aaea:	4628      	mov	r0, r5
    aaec:	f7ff ff86 	bl	a9fc <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
    aaf0:	2200      	movs	r2, #0
    aaf2:	4621      	mov	r1, r4
    aaf4:	4628      	mov	r0, r5
    aaf6:	f7ff fe8b 	bl	a810 <chunk_field>
    aafa:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    aafc:	2201      	movs	r2, #1
    aafe:	4639      	mov	r1, r7
    ab00:	4628      	mov	r0, r5
    ab02:	f7ff fe85 	bl	a810 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
    ab06:	ea10 0602 	ands.w	r6, r0, r2
    ab0a:	d113      	bne.n	ab34 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
    ab0c:	4639      	mov	r1, r7
    ab0e:	4628      	mov	r0, r5
    ab10:	f7ff fefc 	bl	a90c <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
    ab14:	4621      	mov	r1, r4
    ab16:	4632      	mov	r2, r6
    ab18:	4628      	mov	r0, r5
    ab1a:	f7ff fe79 	bl	a810 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
    ab1e:	4622      	mov	r2, r4
    ab20:	1a21      	subs	r1, r4, r0
    ab22:	4628      	mov	r0, r5
    ab24:	f7ff ff6a 	bl	a9fc <merge_chunks>
    ab28:	4621      	mov	r1, r4
    ab2a:	4632      	mov	r2, r6
    ab2c:	4628      	mov	r0, r5
    ab2e:	f7ff fe6f 	bl	a810 <chunk_field>
    ab32:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
    ab34:	4621      	mov	r1, r4
    ab36:	4628      	mov	r0, r5
}
    ab38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
    ab3c:	f7ff bf7c 	b.w	aa38 <free_list_add>

0000ab40 <sys_heap_free>:
{
    ab40:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
    ab42:	b171      	cbz	r1, ab62 <sys_heap_free+0x22>
    ab44:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
    ab46:	2200      	movs	r2, #0
	chunkid_t c = mem_to_chunkid(h, mem);
    ab48:	4628      	mov	r0, r5
    ab4a:	f7ff fe99 	bl	a880 <mem_to_chunkid>
    ab4e:	4604      	mov	r4, r0
	set_chunk_used(h, c, false);
    ab50:	4601      	mov	r1, r0
    ab52:	4628      	mov	r0, r5
    ab54:	f7ff fe78 	bl	a848 <set_chunk_used>
	free_chunk(h, c);
    ab58:	4621      	mov	r1, r4
}
    ab5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
    ab5e:	f7ff bfad 	b.w	aabc <free_chunk>
}
    ab62:	bd38      	pop	{r3, r4, r5, pc}

0000ab64 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    ab64:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    ab66:	6806      	ldr	r6, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    ab68:	b909      	cbnz	r1, ab6e <sys_heap_alloc+0xa>
		return NULL;
    ab6a:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ab6c:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    ab6e:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
    ab70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    ab74:	d9f9      	bls.n	ab6a <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
    ab76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ab7a:	bf34      	ite	cc
    ab7c:	2304      	movcc	r3, #4
    ab7e:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ab80:	1dcc      	adds	r4, r1, #7
    ab82:	441c      	add	r4, r3
    ab84:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    ab86:	4621      	mov	r1, r4
    ab88:	4630      	mov	r0, r6
    ab8a:	f7ff fed6 	bl	a93a <alloc_chunk>
	if (c == 0U) {
    ab8e:	4605      	mov	r5, r0
    ab90:	2800      	cmp	r0, #0
    ab92:	d0ea      	beq.n	ab6a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    ab94:	4601      	mov	r1, r0
    ab96:	4630      	mov	r0, r6
    ab98:	f7ff fe50 	bl	a83c <chunk_size>
    ab9c:	42a0      	cmp	r0, r4
    ab9e:	d909      	bls.n	abb4 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
    aba0:	442c      	add	r4, r5
    aba2:	4629      	mov	r1, r5
    aba4:	4630      	mov	r0, r6
    aba6:	4622      	mov	r2, r4
    aba8:	f7ff ff01 	bl	a9ae <split_chunks>
		free_list_add(h, c + chunk_sz);
    abac:	4621      	mov	r1, r4
    abae:	4630      	mov	r0, r6
    abb0:	f7ff ff42 	bl	aa38 <free_list_add>
	set_chunk_used(h, c, true);
    abb4:	4630      	mov	r0, r6
    abb6:	2201      	movs	r2, #1
    abb8:	4629      	mov	r1, r5
    abba:	f7ff fe45 	bl	a848 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
    abbe:	68b3      	ldr	r3, [r6, #8]
    abc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    abc4:	bf34      	ite	cc
    abc6:	2304      	movcc	r3, #4
    abc8:	2308      	movcs	r3, #8
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    abca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    abce:	4418      	add	r0, r3
	return mem;
    abd0:	e7cc      	b.n	ab6c <sys_heap_alloc+0x8>

0000abd2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    abd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
    abd6:	6806      	ldr	r6, [r0, #0]
{
    abd8:	4614      	mov	r4, r2
	return big_heap_chunks(h->end_chunk);
    abda:	68b2      	ldr	r2, [r6, #8]
    abdc:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	return big_heap(h) ? 8 : 4;
    abe0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    abe4:	bf34      	ite	cc
    abe6:	2304      	movcc	r3, #4
    abe8:	2308      	movcs	r3, #8
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    abea:	ea19 0901 	ands.w	r9, r9, r1
{
    abee:	460f      	mov	r7, r1
	if (align != rew) {
    abf0:	d00b      	beq.n	ac0a <sys_heap_aligned_alloc+0x38>
	rew = align & -align;
    abf2:	4249      	negs	r1, r1
    abf4:	4039      	ands	r1, r7
    abf6:	428b      	cmp	r3, r1
    abf8:	464f      	mov	r7, r9
    abfa:	bf28      	it	cs
    abfc:	460b      	movcs	r3, r1
    abfe:	4689      	mov	r9, r1
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    ac00:	b954      	cbnz	r4, ac18 <sys_heap_aligned_alloc+0x46>
		return NULL;
    ac02:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ac04:	4628      	mov	r0, r5
    ac06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    ac0a:	4299      	cmp	r1, r3
    ac0c:	d8f8      	bhi.n	ac00 <sys_heap_aligned_alloc+0x2e>
			return sys_heap_alloc(heap, bytes);
    ac0e:	4621      	mov	r1, r4
}
    ac10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    ac14:	f7ff bfa6 	b.w	ab64 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    ac18:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    ac1c:	d9f1      	bls.n	ac02 <sys_heap_aligned_alloc+0x30>
    ac1e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    ac22:	bf34      	ite	cc
    ac24:	2204      	movcc	r2, #4
    ac26:	2208      	movcs	r2, #8
    ac28:	1de1      	adds	r1, r4, #7
    ac2a:	4439      	add	r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ac2c:	1ac9      	subs	r1, r1, r3
    ac2e:	4411      	add	r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ac30:	4630      	mov	r0, r6
    ac32:	08c9      	lsrs	r1, r1, #3
    ac34:	f7ff fe81 	bl	a93a <alloc_chunk>
	if (c0 == 0) {
    ac38:	4680      	mov	r8, r0
    ac3a:	2800      	cmp	r0, #0
    ac3c:	d0e1      	beq.n	ac02 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
    ac3e:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    ac40:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
    ac44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ac48:	bf34      	ite	cc
    ac4a:	2304      	movcc	r3, #4
    ac4c:	2308      	movcs	r3, #8
    ac4e:	441d      	add	r5, r3
    ac50:	4435      	add	r5, r6
    ac52:	1e7b      	subs	r3, r7, #1
    ac54:	441d      	add	r5, r3
    ac56:	427f      	negs	r7, r7
    ac58:	403d      	ands	r5, r7
    ac5a:	eba5 0509 	sub.w	r5, r5, r9
	chunkid_t c = mem_to_chunkid(h, mem);
    ac5e:	4629      	mov	r1, r5
    ac60:	4630      	mov	r0, r6
    ac62:	f7ff fe0d 	bl	a880 <mem_to_chunkid>
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ac66:	442c      	add	r4, r5
    ac68:	3407      	adds	r4, #7
    ac6a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ac6e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ac70:	4580      	cmp	r8, r0
	chunkid_t c = mem_to_chunkid(h, mem);
    ac72:	4607      	mov	r7, r0
	chunkid_t c_end = end - chunk_buf(h);
    ac74:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ac78:	d208      	bcs.n	ac8c <sys_heap_aligned_alloc+0xba>
		split_chunks(h, c0, c);
    ac7a:	4602      	mov	r2, r0
    ac7c:	4641      	mov	r1, r8
    ac7e:	4630      	mov	r0, r6
    ac80:	f7ff fe95 	bl	a9ae <split_chunks>
		free_list_add(h, c0);
    ac84:	4641      	mov	r1, r8
    ac86:	4630      	mov	r0, r6
    ac88:	f7ff fed6 	bl	aa38 <free_list_add>
	return c + chunk_size(h, c);
    ac8c:	4639      	mov	r1, r7
    ac8e:	4630      	mov	r0, r6
    ac90:	f7ff fdd4 	bl	a83c <chunk_size>
    ac94:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ac96:	4284      	cmp	r4, r0
    ac98:	d208      	bcs.n	acac <sys_heap_aligned_alloc+0xda>
		split_chunks(h, c, c_end);
    ac9a:	4639      	mov	r1, r7
    ac9c:	4630      	mov	r0, r6
    ac9e:	4622      	mov	r2, r4
    aca0:	f7ff fe85 	bl	a9ae <split_chunks>
		free_list_add(h, c_end);
    aca4:	4621      	mov	r1, r4
    aca6:	4630      	mov	r0, r6
    aca8:	f7ff fec6 	bl	aa38 <free_list_add>
	set_chunk_used(h, c, true);
    acac:	2201      	movs	r2, #1
    acae:	4639      	mov	r1, r7
    acb0:	4630      	mov	r0, r6
    acb2:	f7ff fdc9 	bl	a848 <set_chunk_used>
	return mem;
    acb6:	e7a5      	b.n	ac04 <sys_heap_aligned_alloc+0x32>

0000acb8 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    acb8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    acbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acbe:	bf2c      	ite	cs
    acc0:	2308      	movcs	r3, #8
    acc2:	2304      	movcc	r3, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    acc4:	1dce      	adds	r6, r1, #7
    acc6:	f026 0607 	bic.w	r6, r6, #7
	bytes -= heap_footer_bytes(bytes);
    acca:	1ad2      	subs	r2, r2, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    accc:	188c      	adds	r4, r1, r2
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    acce:	4637      	mov	r7, r6
    acd0:	2200      	movs	r2, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    acd2:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    acd6:	1ba4      	subs	r4, r4, r6
    acd8:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
    acda:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    acdc:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
    acde:	60b4      	str	r4, [r6, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    ace0:	4620      	mov	r0, r4
	h->avail_buckets = 0;
    ace2:	f847 2f0c 	str.w	r2, [r7, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    ace6:	f7ff fdd5 	bl	a894 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    acea:	4613      	mov	r3, r2
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    acec:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    acee:	351b      	adds	r5, #27
    acf0:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
    acf2:	4298      	cmp	r0, r3
    acf4:	da2e      	bge.n	ad54 <sys_heap_init+0x9c>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    acf6:	462a      	mov	r2, r5
    acf8:	4630      	mov	r0, r6
    acfa:	2100      	movs	r1, #0
    acfc:	f7ff fdbc 	bl	a878 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    ad00:	2300      	movs	r3, #0
    ad02:	4630      	mov	r0, r6
    ad04:	461a      	mov	r2, r3
    ad06:	4619      	mov	r1, r3
    ad08:	f7ff fd8d 	bl	a826 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ad0c:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
    ad0e:	4619      	mov	r1, r3
    ad10:	4630      	mov	r0, r6
    ad12:	2201      	movs	r2, #1
    ad14:	f7ff fd98 	bl	a848 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ad18:	463a      	mov	r2, r7
    ad1a:	4629      	mov	r1, r5
    ad1c:	f7ff fdac 	bl	a878 <set_chunk_size>
    ad20:	462b      	mov	r3, r5
    ad22:	2200      	movs	r2, #0
    ad24:	4629      	mov	r1, r5
    ad26:	4630      	mov	r0, r6
    ad28:	f7ff fd7d 	bl	a826 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    ad2c:	4621      	mov	r1, r4
    ad2e:	4630      	mov	r0, r6
    ad30:	f7ff fda2 	bl	a878 <set_chunk_size>
    ad34:	463b      	mov	r3, r7
    ad36:	4621      	mov	r1, r4
    ad38:	4630      	mov	r0, r6
    ad3a:	2200      	movs	r2, #0
    ad3c:	f7ff fd73 	bl	a826 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    ad40:	4621      	mov	r1, r4
    ad42:	4630      	mov	r0, r6
    ad44:	2201      	movs	r2, #1
    ad46:	f7ff fd7f 	bl	a848 <set_chunk_used>

	free_list_add(h, chunk0_size);
    ad4a:	4629      	mov	r1, r5
}
    ad4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    ad50:	f7ff be72 	b.w	aa38 <free_list_add>
		h->buckets[i].next = 0;
    ad54:	f847 2f04 	str.w	r2, [r7, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    ad58:	3301      	adds	r3, #1
    ad5a:	e7ca      	b.n	acf2 <sys_heap_init+0x3a>

0000ad5c <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ad5c:	2200      	movs	r2, #0
	return list->head;
    ad5e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ad60:	b90b      	cbnz	r3, ad66 <sys_slist_find_and_remove+0xa>
    ad62:	4618      	mov	r0, r3
    ad64:	4770      	bx	lr
    ad66:	428b      	cmp	r3, r1
    ad68:	d110      	bne.n	ad8c <sys_slist_find_and_remove+0x30>
	return node->next;
    ad6a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    ad6c:	b942      	cbnz	r2, ad80 <sys_slist_find_and_remove+0x24>
    ad6e:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    ad70:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    ad72:	4291      	cmp	r1, r2
    ad74:	d100      	bne.n	ad78 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    ad76:	6043      	str	r3, [r0, #4]
	parent->next = child;
    ad78:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ad7a:	2001      	movs	r0, #1
	parent->next = child;
    ad7c:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    ad7e:	4770      	bx	lr
	parent->next = child;
    ad80:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ad82:	6843      	ldr	r3, [r0, #4]
    ad84:	4299      	cmp	r1, r3
	list->tail = node;
    ad86:	bf08      	it	eq
    ad88:	6042      	streq	r2, [r0, #4]
}
    ad8a:	e7f5      	b.n	ad78 <sys_slist_find_and_remove+0x1c>
	return node->next;
    ad8c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ad8e:	681b      	ldr	r3, [r3, #0]
    ad90:	e7e6      	b.n	ad60 <sys_slist_find_and_remove+0x4>

0000ad92 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ad92:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    ad94:	f013 0307 	ands.w	r3, r3, #7
    ad98:	d105      	bne.n	ada6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    ad9a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	bf0c      	ite	eq
    ada0:	2000      	moveq	r0, #0
    ada2:	2003      	movne	r0, #3
    ada4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    ada6:	2b02      	cmp	r3, #2
    ada8:	d105      	bne.n	adb6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    adaa:	8b40      	ldrh	r0, [r0, #26]
    adac:	fab0 f080 	clz	r0, r0
    adb0:	0940      	lsrs	r0, r0, #5
    adb2:	0080      	lsls	r0, r0, #2
    adb4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    adb6:	2b01      	cmp	r3, #1
    adb8:	d105      	bne.n	adc6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    adba:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    adbc:	2b00      	cmp	r3, #0
    adbe:	bf0c      	ite	eq
    adc0:	2000      	moveq	r0, #0
    adc2:	2005      	movne	r0, #5
    adc4:	4770      	bx	lr
	int evt = EVT_NOP;
    adc6:	2000      	movs	r0, #0
}
    adc8:	4770      	bx	lr

0000adca <validate_args>:
{
    adca:	b510      	push	{r4, lr}
    adcc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    adce:	b100      	cbz	r0, add2 <validate_args+0x8>
    add0:	b911      	cbnz	r1, add8 <validate_args+0xe>
		return -EINVAL;
    add2:	f06f 0015 	mvn.w	r0, #21
}
    add6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    add8:	1d08      	adds	r0, r1, #4
    adda:	f000 f8d6 	bl	af8a <sys_notify_validate>
	if ((rv == 0)
    adde:	2800      	cmp	r0, #0
    ade0:	d1f9      	bne.n	add6 <validate_args+0xc>
	    && ((cli->notify.flags
    ade2:	68a3      	ldr	r3, [r4, #8]
    ade4:	2b03      	cmp	r3, #3
    ade6:	d9f6      	bls.n	add6 <validate_args+0xc>
    ade8:	e7f3      	b.n	add2 <validate_args+0x8>

0000adea <notify_one>:
{
    adea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adee:	460d      	mov	r5, r1
    adf0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    adf2:	4619      	mov	r1, r3
    adf4:	1d28      	adds	r0, r5, #4
{
    adf6:	4690      	mov	r8, r2
    adf8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    adfa:	f000 f8d7 	bl	afac <sys_notify_finalize>
	if (cb) {
    adfe:	4604      	mov	r4, r0
    ae00:	b138      	cbz	r0, ae12 <notify_one+0x28>
		cb(mgr, cli, state, res);
    ae02:	4633      	mov	r3, r6
    ae04:	4642      	mov	r2, r8
    ae06:	4629      	mov	r1, r5
    ae08:	4638      	mov	r0, r7
    ae0a:	46a4      	mov	ip, r4
}
    ae0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    ae10:	4760      	bx	ip
}
    ae12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ae16 <transition_complete>:
{
    ae16:	b410      	push	{r4}
	__asm__ volatile(
    ae18:	f04f 0420 	mov.w	r4, #32
    ae1c:	f3ef 8211 	mrs	r2, BASEPRI
    ae20:	f384 8812 	msr	BASEPRI_MAX, r4
    ae24:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    ae28:	6141      	str	r1, [r0, #20]
}
    ae2a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    ae2c:	2101      	movs	r1, #1
    ae2e:	f7f6 bb9b 	b.w	1568 <process_event>

0000ae32 <onoff_manager_init>:
{
    ae32:	b538      	push	{r3, r4, r5, lr}
    ae34:	460c      	mov	r4, r1
	if ((mgr == NULL)
    ae36:	4605      	mov	r5, r0
    ae38:	b158      	cbz	r0, ae52 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    ae3a:	b151      	cbz	r1, ae52 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    ae3c:	680b      	ldr	r3, [r1, #0]
    ae3e:	b143      	cbz	r3, ae52 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    ae40:	684b      	ldr	r3, [r1, #4]
    ae42:	b133      	cbz	r3, ae52 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    ae44:	221c      	movs	r2, #28
    ae46:	2100      	movs	r1, #0
    ae48:	f000 fea7 	bl	bb9a <memset>
	return 0;
    ae4c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    ae4e:	612c      	str	r4, [r5, #16]
}
    ae50:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ae52:	f06f 0015 	mvn.w	r0, #21
    ae56:	e7fb      	b.n	ae50 <onoff_manager_init+0x1e>

0000ae58 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    ae58:	b570      	push	{r4, r5, r6, lr}
    ae5a:	4605      	mov	r5, r0
    ae5c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    ae5e:	f7ff ffb4 	bl	adca <validate_args>

	if (rv < 0) {
    ae62:	1e04      	subs	r4, r0, #0
    ae64:	db15      	blt.n	ae92 <onoff_request+0x3a>
    ae66:	f04f 0320 	mov.w	r3, #32
    ae6a:	f3ef 8211 	mrs	r2, BASEPRI
    ae6e:	f383 8812 	msr	BASEPRI_MAX, r3
    ae72:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    ae76:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ae7a:	8b6b      	ldrh	r3, [r5, #26]
    ae7c:	8b2c      	ldrh	r4, [r5, #24]
    ae7e:	428b      	cmp	r3, r1
    ae80:	f004 0407 	and.w	r4, r4, #7
    ae84:	d107      	bne.n	ae96 <onoff_request+0x3e>
	__asm__ volatile(
    ae86:	f382 8811 	msr	BASEPRI, r2
    ae8a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    ae8e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    ae92:	4620      	mov	r0, r4
    ae94:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    ae96:	2c02      	cmp	r4, #2
    ae98:	d10c      	bne.n	aeb4 <onoff_request+0x5c>
		mgr->refs += 1U;
    ae9a:	3301      	adds	r3, #1
    ae9c:	836b      	strh	r3, [r5, #26]
    ae9e:	f382 8811 	msr	BASEPRI, r2
    aea2:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    aea6:	2300      	movs	r3, #0
    aea8:	4622      	mov	r2, r4
    aeaa:	4631      	mov	r1, r6
    aeac:	4628      	mov	r0, r5
    aeae:	f7ff ff9c 	bl	adea <notify_one>
    aeb2:	e7ee      	b.n	ae92 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    aeb4:	2c06      	cmp	r4, #6
    aeb6:	d814      	bhi.n	aee2 <onoff_request+0x8a>
    aeb8:	e8df f004 	tbb	[pc, r4]
    aebc:	13131304 	.word	0x13131304
    aec0:	1a04      	.short	0x1a04
    aec2:	04          	.byte	0x04
    aec3:	00          	.byte	0x00
	parent->next = child;
    aec4:	2300      	movs	r3, #0
    aec6:	6033      	str	r3, [r6, #0]
	return list->tail;
    aec8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    aeca:	b93b      	cbnz	r3, aedc <onoff_request+0x84>
	list->head = node;
    aecc:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    aed0:	b9ac      	cbnz	r4, aefe <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    aed2:	2102      	movs	r1, #2
    aed4:	4628      	mov	r0, r5
    aed6:	f7f6 fb47 	bl	1568 <process_event>
    aeda:	e7da      	b.n	ae92 <onoff_request+0x3a>
	parent->next = child;
    aedc:	601e      	str	r6, [r3, #0]
	list->tail = node;
    aede:	606e      	str	r6, [r5, #4]
}
    aee0:	e7f6      	b.n	aed0 <onoff_request+0x78>
    aee2:	f382 8811 	msr	BASEPRI, r2
    aee6:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    aeea:	f06f 0404 	mvn.w	r4, #4
    aeee:	e7d0      	b.n	ae92 <onoff_request+0x3a>
    aef0:	f382 8811 	msr	BASEPRI, r2
    aef4:	f3bf 8f6f 	isb	sy
    aef8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    aefc:	e7c9      	b.n	ae92 <onoff_request+0x3a>
    aefe:	f382 8811 	msr	BASEPRI, r2
    af02:	f3bf 8f6f 	isb	sy
		if (notify) {
    af06:	e7c4      	b.n	ae92 <onoff_request+0x3a>

0000af08 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    af08:	b510      	push	{r4, lr}
	__asm__ volatile(
    af0a:	f04f 0320 	mov.w	r3, #32
    af0e:	f3ef 8211 	mrs	r2, BASEPRI
    af12:	f383 8812 	msr	BASEPRI_MAX, r3
    af16:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    af1a:	8b04      	ldrh	r4, [r0, #24]
    af1c:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    af20:	2c02      	cmp	r4, #2
    af22:	d00a      	beq.n	af3a <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    af24:	2c01      	cmp	r4, #1
    af26:	bf0c      	ite	eq
    af28:	f06f 0004 	mvneq.w	r0, #4
    af2c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    af30:	f382 8811 	msr	BASEPRI, r2
    af34:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    af38:	e008      	b.n	af4c <onoff_release+0x44>
	mgr->refs -= 1U;
    af3a:	8b43      	ldrh	r3, [r0, #26]
    af3c:	3b01      	subs	r3, #1
    af3e:	b29b      	uxth	r3, r3
    af40:	8343      	strh	r3, [r0, #26]
	if (stop) {
    af42:	b923      	cbnz	r3, af4e <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    af44:	4621      	mov	r1, r4
    af46:	f7f6 fb0f 	bl	1568 <process_event>
	int rv = state;
    af4a:	4620      	mov	r0, r4
}
    af4c:	bd10      	pop	{r4, pc}
	int rv = state;
    af4e:	4620      	mov	r0, r4
    af50:	e7ee      	b.n	af30 <onoff_release+0x28>

0000af52 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    af52:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    af54:	b1b0      	cbz	r0, af84 <onoff_cancel+0x32>
    af56:	b1a9      	cbz	r1, af84 <onoff_cancel+0x32>
	__asm__ volatile(
    af58:	f04f 0220 	mov.w	r2, #32
    af5c:	f3ef 8511 	mrs	r5, BASEPRI
    af60:	f382 8812 	msr	BASEPRI_MAX, r2
    af64:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    af68:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    af6a:	f7ff fef7 	bl	ad5c <sys_slist_find_and_remove>
    af6e:	b130      	cbz	r0, af7e <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    af70:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    af74:	f385 8811 	msr	BASEPRI, r5
    af78:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    af7c:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    af7e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    af82:	e7f7      	b.n	af74 <onoff_cancel+0x22>
		return -EINVAL;
    af84:	f06f 0015 	mvn.w	r0, #21
    af88:	e7f8      	b.n	af7c <onoff_cancel+0x2a>

0000af8a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    af8a:	4603      	mov	r3, r0
    af8c:	b158      	cbz	r0, afa6 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    af8e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    af90:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    af94:	2a01      	cmp	r2, #1
    af96:	d003      	beq.n	afa0 <sys_notify_validate+0x16>
    af98:	2a03      	cmp	r2, #3
    af9a:	d104      	bne.n	afa6 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    af9c:	6802      	ldr	r2, [r0, #0]
    af9e:	b112      	cbz	r2, afa6 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    afa0:	2000      	movs	r0, #0
    afa2:	6098      	str	r0, [r3, #8]
    afa4:	4770      	bx	lr
    afa6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    afaa:	4770      	bx	lr

0000afac <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    afac:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    afae:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    afb0:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    afb4:	2a03      	cmp	r2, #3
    afb6:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    afba:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    afbc:	bf14      	ite	ne
    afbe:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    afc0:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    afc2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    afc4:	4770      	bx	lr

0000afc6 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    afc6:	440a      	add	r2, r1
    afc8:	428a      	cmp	r2, r1
    afca:	d100      	bne.n	afce <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    afcc:	4770      	bx	lr
		seed ^= *src++;
    afce:	f811 3b01 	ldrb.w	r3, [r1], #1
    afd2:	ba40      	rev16	r0, r0
    afd4:	b280      	uxth	r0, r0
    afd6:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    afd8:	f3c0 1303 	ubfx	r3, r0, #4, #4
    afdc:	4043      	eors	r3, r0
		seed ^= seed << 12U;
    afde:	0318      	lsls	r0, r3, #12
    afe0:	b280      	uxth	r0, r0
    afe2:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    afe4:	0158      	lsls	r0, r3, #5
    afe6:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    afea:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    afec:	e7ec      	b.n	afc8 <crc16_itu_t+0x2>

0000afee <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    afee:	4694      	mov	ip, r2
    aff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aff2:	4604      	mov	r4, r0
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
	wrap_size = buf->put_head - base;
	if (unlikely(wrap_size >= buf->size)) {
    aff4:	69c3      	ldr	r3, [r0, #28]
	base = buf->put_base;
    aff6:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    aff8:	6845      	ldr	r5, [r0, #4]
    affa:	6940      	ldr	r0, [r0, #20]
    affc:	1baf      	subs	r7, r5, r6
    affe:	1a28      	subs	r0, r5, r0
    b000:	1a1a      	subs	r2, r3, r0
	if (unlikely(wrap_size >= buf->size)) {
    b002:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    b004:	bf9c      	itt	ls
    b006:	1aff      	subls	r7, r7, r3
		base += buf->size;
    b008:	18f6      	addls	r6, r6, r3
	}
	wrap_size = buf->size - wrap_size;

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
    b00a:	4562      	cmp	r2, ip
    b00c:	bf28      	it	cs
    b00e:	4662      	movcs	r2, ip
	wrap_size = buf->size - wrap_size;
    b010:	1bd8      	subs	r0, r3, r7
	size = MIN(size, wrap_size);
    b012:	4290      	cmp	r0, r2
    b014:	bf28      	it	cs
    b016:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->put_head - base];
    b018:	6823      	ldr	r3, [r4, #0]
    b01a:	1bad      	subs	r5, r5, r6
    b01c:	442b      	add	r3, r5
    b01e:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    b020:	6863      	ldr	r3, [r4, #4]
    b022:	4403      	add	r3, r0
    b024:	6063      	str	r3, [r4, #4]

	return size;
}
    b026:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b028 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    b028:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    b02c:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    b02e:	428a      	cmp	r2, r1
    b030:	d30c      	bcc.n	b04c <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    b032:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    b034:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    b036:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    b038:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    b03c:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    b03e:	428a      	cmp	r2, r1
    b040:	d901      	bls.n	b046 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    b042:	2000      	movs	r0, #0
    b044:	4770      	bx	lr
		buf->put_base += buf->size;
    b046:	4413      	add	r3, r2
    b048:	60c3      	str	r3, [r0, #12]
    b04a:	e7fa      	b.n	b042 <ring_buf_put_finish+0x1a>
		return -EINVAL;
    b04c:	f06f 0015 	mvn.w	r0, #21
}
    b050:	4770      	bx	lr

0000b052 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    b052:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b056:	4680      	mov	r8, r0
    b058:	460e      	mov	r6, r1
    b05a:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    b05c:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    b05e:	462a      	mov	r2, r5
    b060:	a901      	add	r1, sp, #4
    b062:	4640      	mov	r0, r8
    b064:	f7ff ffc3 	bl	afee <ring_buf_put_claim>
    b068:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    b06a:	4602      	mov	r2, r0
    b06c:	4631      	mov	r1, r6
    b06e:	9801      	ldr	r0, [sp, #4]
    b070:	f000 fd88 	bl	bb84 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    b074:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    b076:	4427      	add	r7, r4
		data += partial_size;
    b078:	4426      	add	r6, r4
	} while (size && partial_size);
    b07a:	d001      	beq.n	b080 <ring_buf_put+0x2e>
    b07c:	2c00      	cmp	r4, #0
    b07e:	d1ee      	bne.n	b05e <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    b080:	4639      	mov	r1, r7
    b082:	4640      	mov	r0, r8
    b084:	f7ff ffd0 	bl	b028 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    b088:	4638      	mov	r0, r7
    b08a:	b002      	add	sp, #8
    b08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b090 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    b090:	b5f0      	push	{r4, r5, r6, r7, lr}
    b092:	4604      	mov	r4, r0
    b094:	4694      	mov	ip, r2
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    b096:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    b098:	6905      	ldr	r5, [r0, #16]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    b09a:	68a3      	ldr	r3, [r4, #8]
	if (unlikely(wrap_size >= buf->size)) {
    b09c:	69c0      	ldr	r0, [r0, #28]
	wrap_size = buf->get_head - base;
    b09e:	1baf      	subs	r7, r5, r6
    b0a0:	1b5a      	subs	r2, r3, r5
	if (unlikely(wrap_size >= buf->size)) {
    b0a2:	42b8      	cmp	r0, r7
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    b0a4:	bf9c      	itt	ls
    b0a6:	1836      	addls	r6, r6, r0
		wrap_size -= buf->size;
    b0a8:	1a3f      	subls	r7, r7, r0
	}
	wrap_size = buf->size - wrap_size;

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
    b0aa:	4562      	cmp	r2, ip
    b0ac:	bf28      	it	cs
    b0ae:	4662      	movcs	r2, ip
	wrap_size = buf->size - wrap_size;
    b0b0:	1bc0      	subs	r0, r0, r7
	size = MIN(size, wrap_size);
    b0b2:	4290      	cmp	r0, r2
    b0b4:	bf28      	it	cs
    b0b6:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->get_head - base];
    b0b8:	6823      	ldr	r3, [r4, #0]
    b0ba:	1bad      	subs	r5, r5, r6
    b0bc:	442b      	add	r3, r5
    b0be:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    b0c0:	6923      	ldr	r3, [r4, #16]
    b0c2:	4403      	add	r3, r0
    b0c4:	6123      	str	r3, [r4, #16]

	return size;
}
    b0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b0c8 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    b0c8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    b0cc:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    b0ce:	428a      	cmp	r2, r1
    b0d0:	d30c      	bcc.n	b0ec <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    b0d2:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;
    b0d4:	e9c0 1104 	strd	r1, r1, [r0, #16]

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    b0d8:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	wrap_size = buf->get_tail - buf->get_base;
    b0dc:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    b0de:	428a      	cmp	r2, r1
    b0e0:	d901      	bls.n	b0e6 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    b0e2:	2000      	movs	r0, #0
    b0e4:	4770      	bx	lr
		buf->get_base += buf->size;
    b0e6:	4413      	add	r3, r2
    b0e8:	6183      	str	r3, [r0, #24]
    b0ea:	e7fa      	b.n	b0e2 <ring_buf_get_finish+0x1a>
		return -EINVAL;
    b0ec:	f06f 0015 	mvn.w	r0, #21
}
    b0f0:	4770      	bx	lr

0000b0f2 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    b0f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b0f6:	4680      	mov	r8, r0
    b0f8:	460d      	mov	r5, r1
    b0fa:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    b0fc:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    b0fe:	4632      	mov	r2, r6
    b100:	4640      	mov	r0, r8
    b102:	a901      	add	r1, sp, #4
    b104:	f7ff ffc4 	bl	b090 <ring_buf_get_claim>
    b108:	4604      	mov	r4, r0
		if (data) {
    b10a:	b12d      	cbz	r5, b118 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    b10c:	4602      	mov	r2, r0
    b10e:	9901      	ldr	r1, [sp, #4]
    b110:	4628      	mov	r0, r5
    b112:	f000 fd37 	bl	bb84 <memcpy>
			data += partial_size;
    b116:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    b118:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    b11a:	4427      	add	r7, r4
	} while (size && partial_size);
    b11c:	d001      	beq.n	b122 <ring_buf_get+0x30>
    b11e:	2c00      	cmp	r4, #0
    b120:	d1ed      	bne.n	b0fe <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    b122:	4639      	mov	r1, r7
    b124:	4640      	mov	r0, r8
    b126:	f7ff ffcf 	bl	b0c8 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    b12a:	4638      	mov	r0, r7
    b12c:	b002      	add	sp, #8
    b12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b132 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    b132:	b508      	push	{r3, lr}
	__asm__ volatile(
    b134:	f04f 0220 	mov.w	r2, #32
    b138:	f3ef 8311 	mrs	r3, BASEPRI
    b13c:	f382 8812 	msr	BASEPRI_MAX, r2
    b140:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    b144:	f7f9 f82a 	bl	419c <sys_arch_reboot>
	arch_cpu_idle();
    b148:	f7f8 fdbc 	bl	3cc4 <arch_cpu_idle>
    b14c:	e7fc      	b.n	b148 <sys_reboot+0x16>

0000b14e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    b14e:	4770      	bx	lr

0000b150 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    b150:	f010 0f70 	tst.w	r0, #112	; 0x70
    b154:	d109      	bne.n	b16a <get_ep_bm_from_addr+0x1a>
	ep_idx = ep & (~USB_EP_DIR_IN);
    b156:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
    b15a:	f010 0f80 	tst.w	r0, #128	; 0x80
    b15e:	f04f 0001 	mov.w	r0, #1
		ep_bm = BIT(ep_idx + 16);
    b162:	bf18      	it	ne
    b164:	3310      	addne	r3, #16
		ep_bm = BIT(ep_idx);
    b166:	4098      	lsls	r0, r3
    b168:	4770      	bx	lr
	uint32_t ep_bm = 0;
    b16a:	2000      	movs	r0, #0
}
    b16c:	4770      	bx	lr

0000b16e <usb_write>:
{
    b16e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b172:	4606      	mov	r6, r0
    b174:	460f      	mov	r7, r1
    b176:	4690      	mov	r8, r2
    b178:	4699      	mov	r9, r3
    b17a:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    b17c:	464b      	mov	r3, r9
    b17e:	4642      	mov	r2, r8
    b180:	4639      	mov	r1, r7
    b182:	4630      	mov	r0, r6
    b184:	f7f9 fea0 	bl	4ec8 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    b188:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    b18c:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    b18e:	d103      	bne.n	b198 <usb_write+0x2a>
	z_impl_k_yield();
    b190:	f7fe fc50 	bl	9a34 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    b194:	3d01      	subs	r5, #1
    b196:	d1f1      	bne.n	b17c <usb_write+0xe>
}
    b198:	4620      	mov	r0, r4
    b19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b19e <usb_get_dev_data_by_cfg>:
	return list->head;
    b19e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b1a0:	b138      	cbz	r0, b1b2 <usb_get_dev_data_by_cfg+0x14>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    b1a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b1a6:	3804      	subs	r0, #4

		if (cfg_cur == cfg) {
    b1a8:	685b      	ldr	r3, [r3, #4]
    b1aa:	428b      	cmp	r3, r1
    b1ac:	d001      	beq.n	b1b2 <usb_get_dev_data_by_cfg+0x14>
	return node->next;
    b1ae:	6840      	ldr	r0, [r0, #4]
    b1b0:	e7f6      	b.n	b1a0 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    b1b2:	4770      	bx	lr

0000b1b4 <usb_get_dev_data_by_iface>:
	return list->head;
    b1b4:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b1b6:	b148      	cbz	r0, b1cc <usb_get_dev_data_by_iface+0x18>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    b1b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b1bc:	3804      	subs	r0, #4
		const struct usb_if_descriptor *if_desc =
    b1be:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    b1c0:	685b      	ldr	r3, [r3, #4]
    b1c2:	789b      	ldrb	r3, [r3, #2]
    b1c4:	428b      	cmp	r3, r1
    b1c6:	d001      	beq.n	b1cc <usb_get_dev_data_by_iface+0x18>
	return node->next;
    b1c8:	6840      	ldr	r0, [r0, #4]
    b1ca:	e7f4      	b.n	b1b6 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    b1cc:	4770      	bx	lr

0000b1ce <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    b1ce:	b530      	push	{r4, r5, lr}
	return list->head;
    b1d0:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b1d2:	b188      	cbz	r0, b1f8 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    b1d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b1d8:	3804      	subs	r0, #4
		const struct usb_cfg_data *cfg = dev->config;
    b1da:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    b1dc:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    b1de:	7f1d      	ldrb	r5, [r3, #28]
    b1e0:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    b1e2:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    b1e4:	b2dc      	uxtb	r4, r3
    b1e6:	42a5      	cmp	r5, r4
    b1e8:	d801      	bhi.n	b1ee <usb_get_dev_data_by_ep+0x20>
	return node->next;
    b1ea:	6840      	ldr	r0, [r0, #4]
    b1ec:	e7f1      	b.n	b1d2 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    b1ee:	3301      	adds	r3, #1
    b1f0:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    b1f4:	428c      	cmp	r4, r1
    b1f6:	d1f5      	bne.n	b1e4 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    b1f8:	bd30      	pop	{r4, r5, pc}

0000b1fa <usb_transfer_is_busy>:
{
    b1fa:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    b1fc:	f7f7 faee 	bl	27dc <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    b200:	b128      	cbz	r0, b20e <usb_transfer_is_busy+0x14>
    b202:	6840      	ldr	r0, [r0, #4]
    b204:	f110 0f10 	cmn.w	r0, #16
    b208:	bf14      	ite	ne
    b20a:	2000      	movne	r0, #0
    b20c:	2001      	moveq	r0, #1
}
    b20e:	bd08      	pop	{r3, pc}

0000b210 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    b210:	1c4b      	adds	r3, r1, #1
    b212:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    b214:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    b216:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    b218:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    b21c:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    b21e:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    b222:	4770      	bx	lr

0000b224 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    b224:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    b228:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    b22a:	4718      	bx	r3

0000b22c <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    b22c:	2200      	movs	r2, #0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b22e:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    b230:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    b234:	4770      	bx	lr

0000b236 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b236:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    b238:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
    b23c:	b108      	cbz	r0, b242 <cdc_acm_irq_tx_ready+0xc>
    b23e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    b242:	4770      	bx	lr

0000b244 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    b244:	2200      	movs	r2, #0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b246:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    b248:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    b24c:	4770      	bx	lr

0000b24e <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    b24e:	6903      	ldr	r3, [r0, #16]
}
    b250:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    b254:	4770      	bx	lr

0000b256 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b256:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    b258:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    b25c:	b112      	cbz	r2, b264 <cdc_acm_irq_is_pending+0xe>
    b25e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    b262:	b92a      	cbnz	r2, b270 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    b264:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    b268:	b118      	cbz	r0, b272 <cdc_acm_irq_is_pending+0x1c>
    b26a:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    b26e:	4770      	bx	lr
		return 1;
    b270:	2001      	movs	r0, #1
}
    b272:	4770      	bx	lr

0000b274 <cdc_acm_irq_update>:
}
    b274:	2001      	movs	r0, #1
    b276:	4770      	bx	lr

0000b278 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b278:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    b27a:	e9c3 1200 	strd	r1, r2, [r3]
}
    b27e:	4770      	bx	lr

0000b280 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    b280:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b282:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    b284:	d007      	beq.n	b296 <cdc_acm_line_ctrl_get+0x16>
    b286:	2904      	cmp	r1, #4
    b288:	d00a      	beq.n	b2a0 <cdc_acm_line_ctrl_get+0x20>
    b28a:	2901      	cmp	r1, #1
    b28c:	d10d      	bne.n	b2aa <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    b28e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		return 0;
    b290:	2000      	movs	r0, #0
		*val = (dev_data->line_state &
    b292:	6013      	str	r3, [r2, #0]
    b294:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    b296:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    b29a:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
    b29e:	e7f7      	b.n	b290 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    b2a0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    b2a4:	f003 0301 	and.w	r3, r3, #1
		return 0;
    b2a8:	e7f2      	b.n	b290 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
    b2aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    b2ae:	4770      	bx	lr

0000b2b0 <cdc_acm_configure>:
}
    b2b0:	2000      	movs	r0, #0
    b2b2:	4770      	bx	lr

0000b2b4 <cdc_acm_config_get>:
{
    b2b4:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b2b6:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    b2b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    b2ba:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    b2bc:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
    b2c0:	b16a      	cbz	r2, b2de <cdc_acm_config_get+0x2a>
    b2c2:	2a01      	cmp	r2, #1
    b2c4:	bf0c      	ite	eq
    b2c6:	2202      	moveq	r2, #2
    b2c8:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    b2ca:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    b2cc:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
    b2d0:	1e50      	subs	r0, r2, #1
    b2d2:	2803      	cmp	r0, #3
    b2d4:	d805      	bhi.n	b2e2 <cdc_acm_config_get+0x2e>
    b2d6:	e8df f000 	tbb	[pc, r0]
    b2da:	0505      	.short	0x0505
    b2dc:	0505      	.short	0x0505
	switch (dev_data->line_coding.bCharFormat) {
    b2de:	2201      	movs	r2, #1
    b2e0:	e7f3      	b.n	b2ca <cdc_acm_config_get+0x16>
	switch (dev_data->line_coding.bParityType) {
    b2e2:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
    b2e4:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    b2e6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    b2ea:	2b06      	cmp	r3, #6
    b2ec:	d009      	beq.n	b302 <cdc_acm_config_get+0x4e>
    b2ee:	2b07      	cmp	r3, #7
    b2f0:	d009      	beq.n	b306 <cdc_acm_config_get+0x52>
    b2f2:	2b05      	cmp	r3, #5
    b2f4:	bf0c      	ite	eq
    b2f6:	2300      	moveq	r3, #0
    b2f8:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    b2fa:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    b2fc:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    b2fe:	71c8      	strb	r0, [r1, #7]
}
    b300:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
    b302:	2301      	movs	r3, #1
    b304:	e7f9      	b.n	b2fa <cdc_acm_config_get+0x46>
    b306:	2302      	movs	r3, #2
    b308:	e7f7      	b.n	b2fa <cdc_acm_config_get+0x46>

0000b30a <cdc_acm_line_ctrl_set>:
{
    b30a:	b508      	push	{r3, lr}
	switch (ctrl) {
    b30c:	2940      	cmp	r1, #64	; 0x40
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b30e:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    b310:	d03e      	beq.n	b390 <cdc_acm_line_ctrl_set+0x86>
    b312:	d813      	bhi.n	b33c <cdc_acm_line_ctrl_set+0x32>
    b314:	2910      	cmp	r1, #16
    b316:	d031      	beq.n	b37c <cdc_acm_line_ctrl_set+0x72>
    b318:	d806      	bhi.n	b328 <cdc_acm_line_ctrl_set+0x1e>
    b31a:	2901      	cmp	r1, #1
    b31c:	d01e      	beq.n	b35c <cdc_acm_line_ctrl_set+0x52>
    b31e:	2908      	cmp	r1, #8
    b320:	d01f      	beq.n	b362 <cdc_acm_line_ctrl_set+0x58>
    b322:	f06f 0012 	mvn.w	r0, #18
}
    b326:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    b328:	2920      	cmp	r1, #32
    b32a:	d1fa      	bne.n	b322 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    b32c:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    b330:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    b334:	b34a      	cbz	r2, b38a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    b336:	f041 0104 	orr.w	r1, r1, #4
    b33a:	e026      	b.n	b38a <cdc_acm_line_ctrl_set+0x80>
	switch (ctrl) {
    b33c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    b340:	d02f      	beq.n	b3a2 <cdc_acm_line_ctrl_set+0x98>
    b342:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    b346:	d035      	beq.n	b3b4 <cdc_acm_line_ctrl_set+0xaa>
    b348:	2980      	cmp	r1, #128	; 0x80
    b34a:	d1ea      	bne.n	b322 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    b34c:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    b350:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    b354:	b1ca      	cbz	r2, b38a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    b356:	f041 0110 	orr.w	r1, r1, #16
    b35a:	e016      	b.n	b38a <cdc_acm_line_ctrl_set+0x80>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    b35c:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
    b35e:	2000      	movs	r0, #0
    b360:	e7e1      	b.n	b326 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    b362:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    b366:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    b36a:	b10a      	cbz	r2, b370 <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    b36c:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    b370:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    b374:	2101      	movs	r1, #1
    b376:	f7f7 fcf3 	bl	2d60 <cdc_acm_send_notification.isra.0>
		return 0;
    b37a:	e7f0      	b.n	b35e <cdc_acm_line_ctrl_set+0x54>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    b37c:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    b380:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    b384:	b10a      	cbz	r2, b38a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    b386:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    b38a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    b38e:	e7f2      	b.n	b376 <cdc_acm_line_ctrl_set+0x6c>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    b390:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    b394:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    b398:	2a00      	cmp	r2, #0
    b39a:	d0f6      	beq.n	b38a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    b39c:	f041 0108 	orr.w	r1, r1, #8
    b3a0:	e7f3      	b.n	b38a <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    b3a2:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    b3a6:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    b3aa:	2a00      	cmp	r2, #0
    b3ac:	d0ed      	beq.n	b38a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    b3ae:	f041 0120 	orr.w	r1, r1, #32
    b3b2:	e7ea      	b.n	b38a <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    b3b4:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    b3b8:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    b3bc:	2a00      	cmp	r2, #0
    b3be:	d0e4      	beq.n	b38a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    b3c0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b3c4:	e7e1      	b.n	b38a <cdc_acm_line_ctrl_set+0x80>

0000b3c6 <cdc_acm_fifo_read>:
{
    b3c6:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b3c8:	6904      	ldr	r4, [r0, #16]
{
    b3ca:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    b3cc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    b3ce:	f7ff fe90 	bl	b0f2 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    b3d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    b3d4:	4606      	mov	r6, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    b3d6:	691a      	ldr	r2, [r3, #16]
    b3d8:	6899      	ldr	r1, [r3, #8]
    b3da:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    b3dc:	bf04      	itt	eq
    b3de:	2200      	moveq	r2, #0
    b3e0:	f884 2029 	strbeq.w	r2, [r4, #41]	; 0x29
	if (dev_data->rx_paused == true) {
    b3e4:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
    b3e8:	b1aa      	cbz	r2, b416 <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    b3ea:	685a      	ldr	r2, [r3, #4]
    b3ec:	6959      	ldr	r1, [r3, #20]
    b3ee:	69db      	ldr	r3, [r3, #28]
    b3f0:	1a52      	subs	r2, r2, r1
    b3f2:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    b3f4:	2b3f      	cmp	r3, #63	; 0x3f
    b3f6:	d90e      	bls.n	b416 <cdc_acm_fifo_read+0x50>
			if (dev_data->configured && !dev_data->suspended) {
    b3f8:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    b3fc:	b143      	cbz	r3, b410 <cdc_acm_fifo_read+0x4a>
    b3fe:	f894 107f 	ldrb.w	r1, [r4, #127]	; 0x7f
    b402:	b929      	cbnz	r1, b410 <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    b404:	686b      	ldr	r3, [r5, #4]
    b406:	4622      	mov	r2, r4
    b408:	6a1b      	ldr	r3, [r3, #32]
    b40a:	7b18      	ldrb	r0, [r3, #12]
    b40c:	f7f7 fcca 	bl	2da4 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    b410:	2300      	movs	r3, #0
    b412:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
    b416:	4630      	mov	r0, r6
    b418:	bd70      	pop	{r4, r5, r6, pc}

0000b41a <cdc_acm_poll_in>:
	int ret = cdc_acm_fifo_read(dev, c, 1);
    b41a:	2201      	movs	r2, #1
{
    b41c:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    b41e:	f7ff ffd2 	bl	b3c6 <cdc_acm_fifo_read>
}
    b422:	3801      	subs	r0, #1
    b424:	bf18      	it	ne
    b426:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    b42a:	bd08      	pop	{r3, pc}

0000b42c <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    b42c:	4770      	bx	lr

0000b42e <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    b42e:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    b430:	b430      	push	{r4, r5}
    b432:	4604      	mov	r4, r0
    b434:	4618      	mov	r0, r3
    b436:	db0b      	blt.n	b450 <flash_area_read+0x22>
    b438:	68a5      	ldr	r5, [r4, #8]
    b43a:	4408      	add	r0, r1
    b43c:	42a8      	cmp	r0, r5
    b43e:	d807      	bhi.n	b450 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    b440:	68e0      	ldr	r0, [r4, #12]
    b442:	6864      	ldr	r4, [r4, #4]
    b444:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    b446:	6884      	ldr	r4, [r0, #8]
    b448:	6824      	ldr	r4, [r4, #0]
    b44a:	46a4      	mov	ip, r4
}
    b44c:	bc30      	pop	{r4, r5}
    b44e:	4760      	bx	ip
    b450:	f06f 0015 	mvn.w	r0, #21
    b454:	bc30      	pop	{r4, r5}
    b456:	4770      	bx	lr

0000b458 <flash_area_write>:
    b458:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    b45a:	b430      	push	{r4, r5}
    b45c:	4604      	mov	r4, r0
    b45e:	4618      	mov	r0, r3
    b460:	db0b      	blt.n	b47a <flash_area_write+0x22>
    b462:	68a5      	ldr	r5, [r4, #8]
    b464:	4408      	add	r0, r1
    b466:	42a8      	cmp	r0, r5
    b468:	d807      	bhi.n	b47a <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    b46a:	68e0      	ldr	r0, [r4, #12]
    b46c:	6864      	ldr	r4, [r4, #4]
    b46e:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    b470:	6884      	ldr	r4, [r0, #8]
    b472:	6864      	ldr	r4, [r4, #4]
    b474:	46a4      	mov	ip, r4
}
    b476:	bc30      	pop	{r4, r5}
    b478:	4760      	bx	ip
    b47a:	f06f 0015 	mvn.w	r0, #21
    b47e:	bc30      	pop	{r4, r5}
    b480:	4770      	bx	lr

0000b482 <flash_area_erase>:
    b482:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    b484:	4603      	mov	r3, r0
    b486:	b410      	push	{r4}
    b488:	4610      	mov	r0, r2
    b48a:	db0a      	blt.n	b4a2 <flash_area_erase+0x20>
    b48c:	689c      	ldr	r4, [r3, #8]
    b48e:	4408      	add	r0, r1
    b490:	42a0      	cmp	r0, r4
    b492:	d806      	bhi.n	b4a2 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    b494:	68d8      	ldr	r0, [r3, #12]
    b496:	685b      	ldr	r3, [r3, #4]
    b498:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    b49a:	6883      	ldr	r3, [r0, #8]
}
    b49c:	bc10      	pop	{r4}
    b49e:	689b      	ldr	r3, [r3, #8]
    b4a0:	4718      	bx	r3
    b4a2:	f06f 0015 	mvn.w	r0, #21
    b4a6:	bc10      	pop	{r4}
    b4a8:	4770      	bx	lr

0000b4aa <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    b4aa:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    b4ac:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    b4ae:	6883      	ldr	r3, [r0, #8]
    b4b0:	68db      	ldr	r3, [r3, #12]
    b4b2:	4798      	blx	r3
}
    b4b4:	6800      	ldr	r0, [r0, #0]
    b4b6:	bd08      	pop	{r3, pc}

0000b4b8 <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    b4b8:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    b4ba:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    b4bc:	6883      	ldr	r3, [r0, #8]
    b4be:	68db      	ldr	r3, [r3, #12]
    b4c0:	4798      	blx	r3

	return param->erase_value;
}
    b4c2:	7900      	ldrb	r0, [r0, #4]
    b4c4:	bd08      	pop	{r3, pc}

0000b4c6 <get_sectors_cb>:
{
    b4c6:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    b4c8:	684c      	ldr	r4, [r1, #4]
    b4ca:	6803      	ldr	r3, [r0, #0]
    b4cc:	42a3      	cmp	r3, r4
    b4ce:	d201      	bcs.n	b4d4 <get_sectors_cb+0xe>
		*bail_value = true;
    b4d0:	2001      	movs	r0, #1
}
    b4d2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    b4d4:	688a      	ldr	r2, [r1, #8]
    b4d6:	4422      	add	r2, r4
    b4d8:	4293      	cmp	r3, r2
    b4da:	d301      	bcc.n	b4e0 <get_sectors_cb+0x1a>
		*bail_value = false;
    b4dc:	2000      	movs	r0, #0
    b4de:	e7f8      	b.n	b4d2 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    b4e0:	694e      	ldr	r6, [r1, #20]
    b4e2:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    b4e6:	42b5      	cmp	r5, r6
    b4e8:	d303      	bcc.n	b4f2 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    b4ea:	f06f 030b 	mvn.w	r3, #11
    b4ee:	618b      	str	r3, [r1, #24]
		return true;
    b4f0:	e7f4      	b.n	b4dc <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    b4f2:	1b1b      	subs	r3, r3, r4
    b4f4:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    b4f8:	6843      	ldr	r3, [r0, #4]
    b4fa:	6908      	ldr	r0, [r1, #16]
    b4fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    b500:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    b502:	690b      	ldr	r3, [r1, #16]
    b504:	3301      	adds	r3, #1
    b506:	610b      	str	r3, [r1, #16]
	return true;
    b508:	e7e2      	b.n	b4d0 <get_sectors_cb+0xa>

0000b50a <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    b50a:	2000      	movs	r0, #0
{
    b50c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    b50e:	f7ff fe10 	bl	b132 <sys_reboot>

0000b512 <console_write>:
{
    b512:	b570      	push	{r4, r5, r6, lr}
    b514:	4606      	mov	r6, r0
    b516:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    b518:	2400      	movs	r4, #0
    b51a:	42ac      	cmp	r4, r5
    b51c:	db00      	blt.n	b520 <console_write+0xe>
}
    b51e:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    b520:	5d30      	ldrb	r0, [r6, r4]
    b522:	f7f7 fe85 	bl	3230 <console_out>
    b526:	3001      	adds	r0, #1
    b528:	d0f9      	beq.n	b51e <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    b52a:	3401      	adds	r4, #1
    b52c:	e7f5      	b.n	b51a <console_write+0x8>

0000b52e <erase_range>:
{
    b52e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b530:	4606      	mov	r6, r0
    if (end >= flash_area_get_size(fap)) {
    b532:	68b3      	ldr	r3, [r6, #8]
{
    b534:	460c      	mov	r4, r1
    if (end >= flash_area_get_size(fap)) {
    b536:	429a      	cmp	r2, r3
{
    b538:	4610      	mov	r0, r2
    if (end >= flash_area_get_size(fap)) {
    b53a:	d304      	bcc.n	b546 <erase_range+0x18>
        return -EINVAL;
    b53c:	f06f 0415 	mvn.w	r4, #21
}
    b540:	4620      	mov	r0, r4
    b542:	b002      	add	sp, #8
    b544:	bd70      	pop	{r4, r5, r6, pc}
    if (end < start) {
    b546:	428a      	cmp	r2, r1
    b548:	dbfa      	blt.n	b540 <erase_range+0x12>
    if (flash_area_sector_from_off(end, &sect)) {
    b54a:	4669      	mov	r1, sp
    b54c:	f7f5 f804 	bl	558 <flash_area_sector_from_off>
    b550:	2800      	cmp	r0, #0
    b552:	d1f3      	bne.n	b53c <erase_range+0xe>
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    b554:	e9dd 3500 	ldrd	r3, r5, [sp]
    b558:	441d      	add	r5, r3
    rc = flash_area_erase(fap, start, size);
    b55a:	4621      	mov	r1, r4
    b55c:	4630      	mov	r0, r6
    b55e:	1b2a      	subs	r2, r5, r4
    b560:	f7ff ff8f 	bl	b482 <flash_area_erase>
    if (rc != 0) {
    b564:	2800      	cmp	r0, #0
    b566:	d1e9      	bne.n	b53c <erase_range+0xe>
    return start + size;
    b568:	462c      	mov	r4, r5
    b56a:	e7e9      	b.n	b540 <erase_range+0x12>

0000b56c <initial_checks>:
} while(0)

static bool initial_checks(zcbor_state_t *state)
{
	ZCBOR_CHECK_ERROR();
	ZCBOR_CHECK_PAYLOAD();
    b56c:	6802      	ldr	r2, [r0, #0]
    b56e:	68c3      	ldr	r3, [r0, #12]
    b570:	429a      	cmp	r2, r3
    b572:	bf21      	itttt	cs
    b574:	2208      	movcs	r2, #8
    b576:	6943      	ldrcs	r3, [r0, #20]
    b578:	2000      	movcs	r0, #0
    b57a:	60da      	strcs	r2, [r3, #12]
	return true;
    b57c:	bf38      	it	cc
    b57e:	2001      	movcc	r0, #1
}
    b580:	4770      	bx	lr

0000b582 <type_check>:

static bool type_check(zcbor_state_t *state, zcbor_major_type_t exp_major_type)
{
    b582:	b510      	push	{r4, lr}
    b584:	4604      	mov	r4, r0
	if (!initial_checks(state)) {
    b586:	f7ff fff1 	bl	b56c <initial_checks>
    b58a:	b138      	cbz	r0, b59c <type_check+0x1a>
		ZCBOR_FAIL();
	}
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    b58c:	6823      	ldr	r3, [r4, #0]
    b58e:	781b      	ldrb	r3, [r3, #0]

	if (major_type != exp_major_type) {
    b590:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
    b594:	d003      	beq.n	b59e <type_check+0x1c>
    b596:	220a      	movs	r2, #10
    b598:	6963      	ldr	r3, [r4, #20]
    b59a:	60da      	str	r2, [r3, #12]
		ZCBOR_FAIL();
    b59c:	2000      	movs	r0, #0
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
	}
	return true;
}
    b59e:	bd10      	pop	{r4, pc}

0000b5a0 <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(zcbor_state_t *state,
		void *const result, uint_fast32_t result_len)
{
    b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5a4:	4604      	mov	r4, r0
    b5a6:	4617      	mov	r7, r2
	zcbor_trace();
	zcbor_assert(result_len != 0, "0-length result not supported.\r\n");
	zcbor_assert(result != NULL, NULL);

	INITIAL_CHECKS();
    b5a8:	f7ff ffe0 	bl	b56c <initial_checks>
{
    b5ac:	460d      	mov	r5, r1
	INITIAL_CHECKS();
    b5ae:	4680      	mov	r8, r0
    b5b0:	b120      	cbz	r0, b5bc <value_extract+0x1c>
	ZCBOR_ERR_IF((state->elem_count == 0), ZCBOR_ERR_LOW_ELEM_COUNT);
    b5b2:	68a3      	ldr	r3, [r4, #8]
    b5b4:	b93b      	cbnz	r3, b5c6 <value_extract+0x26>
    b5b6:	2203      	movs	r2, #3
    b5b8:	6963      	ldr	r3, [r4, #20]
    b5ba:	60da      	str	r2, [r3, #12]
	INITIAL_CHECKS();
    b5bc:	f04f 0800 	mov.w	r8, #0
		(state->payload) += len;
	}

	(state->elem_count)--;
	return true;
}
    b5c0:	4640      	mov	r0, r8
    b5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t additional = ADDITIONAL(*state->payload);
    b5c6:	6823      	ldr	r3, [r4, #0]
	memset(result, 0, result_len);
    b5c8:	463a      	mov	r2, r7
	uint8_t additional = ADDITIONAL(*state->payload);
    b5ca:	781e      	ldrb	r6, [r3, #0]
	state->payload_bak = state->payload;
    b5cc:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    b5ce:	3301      	adds	r3, #1
	memset(result, 0, result_len);
    b5d0:	2100      	movs	r1, #0
    b5d2:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
    b5d4:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
    b5d8:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
    b5da:	f000 fade 	bl	bb9a <memset>
	if (additional <= ZCBOR_VALUE_IN_HEADER) {
    b5de:	2e17      	cmp	r6, #23
    b5e0:	d804      	bhi.n	b5ec <value_extract+0x4c>
		u8_result[0] = additional;
    b5e2:	702e      	strb	r6, [r5, #0]
	(state->elem_count)--;
    b5e4:	68a3      	ldr	r3, [r4, #8]
    b5e6:	3b01      	subs	r3, #1
    b5e8:	60a3      	str	r3, [r4, #8]
	return true;
    b5ea:	e7e9      	b.n	b5c0 <value_extract+0x20>
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    b5ec:	3e18      	subs	r6, #24
    b5ee:	b2f2      	uxtb	r2, r6
    b5f0:	2a03      	cmp	r2, #3
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    b5f2:	6823      	ldr	r3, [r4, #0]
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    b5f4:	d808      	bhi.n	b608 <value_extract+0x68>
		return 1U << (additional - ZCBOR_VALUE_IS_1_BYTE);
    b5f6:	2101      	movs	r1, #1
    b5f8:	40b1      	lsls	r1, r6
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    b5fa:	428f      	cmp	r7, r1
    b5fc:	d209      	bcs.n	b612 <value_extract+0x72>
    b5fe:	3b01      	subs	r3, #1
    b600:	6023      	str	r3, [r4, #0]
    b602:	2205      	movs	r2, #5
    b604:	6963      	ldr	r3, [r4, #20]
    b606:	e7d8      	b.n	b5ba <value_extract+0x1a>
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
    b608:	3b01      	subs	r3, #1
    b60a:	6023      	str	r3, [r4, #0]
    b60c:	2207      	movs	r2, #7
    b60e:	6963      	ldr	r3, [r4, #20]
    b610:	e7d3      	b.n	b5ba <value_extract+0x1a>
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
    b612:	68e0      	ldr	r0, [r4, #12]
    b614:	185a      	adds	r2, r3, r1
    b616:	4290      	cmp	r0, r2
    b618:	d204      	bcs.n	b624 <value_extract+0x84>
    b61a:	3b01      	subs	r3, #1
    b61c:	6023      	str	r3, [r4, #0]
    b61e:	2208      	movs	r2, #8
    b620:	6963      	ldr	r3, [r4, #20]
    b622:	e7ca      	b.n	b5ba <value_extract+0x1a>
    b624:	1e4b      	subs	r3, r1, #1
    b626:	3d01      	subs	r5, #1
			u8_result[i] = (state->payload)[len - i - 1];
    b628:	6822      	ldr	r2, [r4, #0]
    b62a:	5cd2      	ldrb	r2, [r2, r3]
		for (uint_fast32_t i = 0; i < len; i++) {
    b62c:	3b01      	subs	r3, #1
			u8_result[i] = (state->payload)[len - i - 1];
    b62e:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (uint_fast32_t i = 0; i < len; i++) {
    b632:	d2f9      	bcs.n	b628 <value_extract+0x88>
		(state->payload) += len;
    b634:	6823      	ldr	r3, [r4, #0]
    b636:	440b      	add	r3, r1
    b638:	6023      	str	r3, [r4, #0]
    b63a:	e7d3      	b.n	b5e4 <value_extract+0x44>

0000b63c <str_start_decode>:
}


static bool str_start_decode(zcbor_state_t *state,
		struct zcbor_string *result, zcbor_major_type_t exp_major_type)
{
    b63c:	b538      	push	{r3, r4, r5, lr}
    b63e:	460c      	mov	r4, r1
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    b640:	4611      	mov	r1, r2
{
    b642:	4605      	mov	r5, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    b644:	f7ff ff9d 	bl	b582 <type_check>
    b648:	b908      	cbnz	r0, b64e <str_start_decode+0x12>
    b64a:	2000      	movs	r0, #0
		ZCBOR_FAIL();
	}

	result->value = state->payload;
	return true;
}
    b64c:	bd38      	pop	{r3, r4, r5, pc}
	if (!value_extract(state, &result->len, sizeof(result->len))) {
    b64e:	2204      	movs	r2, #4
    b650:	4628      	mov	r0, r5
    b652:	18a1      	adds	r1, r4, r2
    b654:	f7ff ffa4 	bl	b5a0 <value_extract>
    b658:	2800      	cmp	r0, #0
    b65a:	d0f6      	beq.n	b64a <str_start_decode+0xe>
	result->value = state->payload;
    b65c:	682b      	ldr	r3, [r5, #0]
    b65e:	6023      	str	r3, [r4, #0]
	return true;
    b660:	e7f4      	b.n	b64c <str_start_decode+0x10>

0000b662 <list_map_start_decode>:
}


static bool list_map_start_decode(zcbor_state_t *state,
		zcbor_major_type_t exp_major_type)
{
    b662:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b664:	4604      	mov	r4, r0
	uint_fast32_t new_elem_count;
	bool indefinite_length_array = false;

	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    b666:	f7ff ff8c 	bl	b582 <type_check>
    b66a:	4605      	mov	r5, r0
    b66c:	b168      	cbz	r0, b68a <list_map_start_decode+0x28>

	if (ADDITIONAL(*state->payload) == ZCBOR_VALUE_IS_INDEFINITE_LENGTH) {
    b66e:	6822      	ldr	r2, [r4, #0]
    b670:	7813      	ldrb	r3, [r2, #0]
    b672:	f003 031f 	and.w	r3, r3, #31
    b676:	2b1f      	cmp	r3, #31
    b678:	d119      	bne.n	b6ae <list_map_start_decode+0x4c>
		/* Indefinite length array. */
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
    b67a:	f06f 0310 	mvn.w	r3, #16
    b67e:	9301      	str	r3, [sp, #4]
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
    b680:	68a3      	ldr	r3, [r4, #8]
    b682:	b92b      	cbnz	r3, b690 <list_map_start_decode+0x2e>
    b684:	2203      	movs	r2, #3
    b686:	6963      	ldr	r3, [r4, #20]
    b688:	60da      	str	r2, [r3, #12]
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    b68a:	2000      	movs	r0, #0
	}

	state->indefinite_length_array = indefinite_length_array;

	return true;
}
    b68c:	b003      	add	sp, #12
    b68e:	bd30      	pop	{r4, r5, pc}
		state->payload++;
    b690:	3201      	adds	r2, #1
		state->elem_count--;
    b692:	3b01      	subs	r3, #1
		state->payload++;
    b694:	6022      	str	r2, [r4, #0]
		state->elem_count--;
    b696:	60a3      	str	r3, [r4, #8]
	if (!zcbor_new_backup(state, new_elem_count)) {
    b698:	4620      	mov	r0, r4
    b69a:	9901      	ldr	r1, [sp, #4]
    b69c:	f000 f98b 	bl	b9b6 <zcbor_new_backup>
    b6a0:	b978      	cbnz	r0, b6c2 <list_map_start_decode+0x60>
		FAIL_RESTORE();
    b6a2:	6863      	ldr	r3, [r4, #4]
    b6a4:	6023      	str	r3, [r4, #0]
    b6a6:	68a3      	ldr	r3, [r4, #8]
    b6a8:	3301      	adds	r3, #1
    b6aa:	60a3      	str	r3, [r4, #8]
    b6ac:	e7ed      	b.n	b68a <list_map_start_decode+0x28>
		if (!value_extract(state, &new_elem_count, sizeof(new_elem_count))) {
    b6ae:	2204      	movs	r2, #4
    b6b0:	4620      	mov	r0, r4
    b6b2:	eb0d 0102 	add.w	r1, sp, r2
    b6b6:	f7ff ff73 	bl	b5a0 <value_extract>
    b6ba:	2800      	cmp	r0, #0
    b6bc:	d0e5      	beq.n	b68a <list_map_start_decode+0x28>
	bool indefinite_length_array = false;
    b6be:	2500      	movs	r5, #0
    b6c0:	e7ea      	b.n	b698 <list_map_start_decode+0x36>
	state->indefinite_length_array = indefinite_length_array;
    b6c2:	7425      	strb	r5, [r4, #16]
	return true;
    b6c4:	e7e2      	b.n	b68c <list_map_start_decode+0x2a>

0000b6c6 <list_map_end_decode>:
	return true;
}


static bool list_map_end_decode(zcbor_state_t *state)
{
    b6c6:	b510      	push	{r4, lr}
	uint_fast32_t max_elem_count = 0;

	if (state->indefinite_length_array) {
    b6c8:	7c02      	ldrb	r2, [r0, #16]
{
    b6ca:	4604      	mov	r4, r0
	if (state->indefinite_length_array) {
    b6cc:	b18a      	cbz	r2, b6f2 <list_map_end_decode+0x2c>
	INITIAL_CHECKS();
    b6ce:	f7ff ff4d 	bl	b56c <initial_checks>
    b6d2:	b130      	cbz	r0, b6e2 <list_map_end_decode+0x1c>
	ZCBOR_ERR_IF(*state->payload != 0xFF, ZCBOR_ERR_WRONG_TYPE);
    b6d4:	6823      	ldr	r3, [r4, #0]
    b6d6:	781a      	ldrb	r2, [r3, #0]
    b6d8:	2aff      	cmp	r2, #255	; 0xff
    b6da:	d004      	beq.n	b6e6 <list_map_end_decode+0x20>
    b6dc:	220a      	movs	r2, #10
    b6de:	6963      	ldr	r3, [r4, #20]
    b6e0:	60da      	str	r2, [r3, #12]
			max_elem_count)) {
		ZCBOR_FAIL();
	}

	return true;
}
    b6e2:	2000      	movs	r0, #0
    b6e4:	bd10      	pop	{r4, pc}
	state->payload++;
    b6e6:	3301      	adds	r3, #1
    b6e8:	6023      	str	r3, [r4, #0]
		state->indefinite_length_array = false;
    b6ea:	2300      	movs	r3, #0
		max_elem_count = ZCBOR_MAX_ELEM_COUNT;
    b6ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		state->indefinite_length_array = false;
    b6f0:	7423      	strb	r3, [r4, #16]
	if (!zcbor_process_backup(state,
    b6f2:	4620      	mov	r0, r4
}
    b6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!zcbor_process_backup(state,
    b6f8:	2107      	movs	r1, #7
    b6fa:	f000 b97a 	b.w	b9f2 <zcbor_process_backup>

0000b6fe <str_decode>:
{
    b6fe:	b538      	push	{r3, r4, r5, lr}
    b700:	4604      	mov	r4, r0
    b702:	460d      	mov	r5, r1
	if (!str_start_decode(state, result, exp_major_type)) {
    b704:	f7ff ff9a 	bl	b63c <str_start_decode>
    b708:	b180      	cbz	r0, b72c <str_decode+0x2e>
	if (result->len > (state->payload_end - state->payload)) {
    b70a:	6823      	ldr	r3, [r4, #0]
    b70c:	68e2      	ldr	r2, [r4, #12]
    b70e:	6869      	ldr	r1, [r5, #4]
    b710:	1ad2      	subs	r2, r2, r3
    b712:	4291      	cmp	r1, r2
    b714:	d802      	bhi.n	b71c <str_decode+0x1e>
	state->payload += result->len;
    b716:	440b      	add	r3, r1
    b718:	6023      	str	r3, [r4, #0]
}
    b71a:	bd38      	pop	{r3, r4, r5, pc}
    b71c:	2208      	movs	r2, #8
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
    b71e:	6863      	ldr	r3, [r4, #4]
    b720:	6023      	str	r3, [r4, #0]
    b722:	68a3      	ldr	r3, [r4, #8]
    b724:	3301      	adds	r3, #1
    b726:	60a3      	str	r3, [r4, #8]
    b728:	6963      	ldr	r3, [r4, #20]
    b72a:	60da      	str	r2, [r3, #12]
		ZCBOR_FAIL();
    b72c:	2000      	movs	r0, #0
    b72e:	e7f4      	b.n	b71a <str_decode+0x1c>

0000b730 <str_expect>:
{
    b730:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b732:	460e      	mov	r6, r1
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    b734:	4669      	mov	r1, sp
{
    b736:	4604      	mov	r4, r0
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    b738:	f7ff ffe1 	bl	b6fe <str_decode>
    b73c:	4605      	mov	r5, r0
    b73e:	b158      	cbz	r0, b758 <str_expect+0x28>
	if ((tmp_result.len != result->len)
    b740:	9a01      	ldr	r2, [sp, #4]
    b742:	6873      	ldr	r3, [r6, #4]
    b744:	429a      	cmp	r2, r3
    b746:	d00b      	beq.n	b760 <str_expect+0x30>
    b748:	220b      	movs	r2, #11
		ERR_RESTORE(ZCBOR_ERR_WRONG_VALUE);
    b74a:	6863      	ldr	r3, [r4, #4]
    b74c:	6023      	str	r3, [r4, #0]
    b74e:	68a3      	ldr	r3, [r4, #8]
    b750:	3301      	adds	r3, #1
    b752:	60a3      	str	r3, [r4, #8]
    b754:	6963      	ldr	r3, [r4, #20]
    b756:	60da      	str	r2, [r3, #12]
		ZCBOR_FAIL();
    b758:	2500      	movs	r5, #0
}
    b75a:	4628      	mov	r0, r5
    b75c:	b002      	add	sp, #8
    b75e:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    b760:	9900      	ldr	r1, [sp, #0]
    b762:	6830      	ldr	r0, [r6, #0]
    b764:	f000 f9e7 	bl	bb36 <memcmp>
    b768:	2800      	cmp	r0, #0
    b76a:	d0f6      	beq.n	b75a <str_expect+0x2a>
    b76c:	e7ec      	b.n	b748 <str_expect+0x18>

0000b76e <zcbor_int64_decode>:
{
    b76e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b770:	4604      	mov	r4, r0
    b772:	460d      	mov	r5, r1
	INITIAL_CHECKS();
    b774:	f7ff fefa 	bl	b56c <initial_checks>
    b778:	b140      	cbz	r0, b78c <zcbor_int64_decode+0x1e>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    b77a:	6823      	ldr	r3, [r4, #0]
    b77c:	781b      	ldrb	r3, [r3, #0]
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    b77e:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    b780:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    b784:	d905      	bls.n	b792 <zcbor_int64_decode+0x24>
    b786:	220a      	movs	r2, #10
    b788:	6963      	ldr	r3, [r4, #20]
    b78a:	60da      	str	r2, [r3, #12]
	INITIAL_CHECKS();
    b78c:	2000      	movs	r0, #0
}
    b78e:	b002      	add	sp, #8
    b790:	bd70      	pop	{r4, r5, r6, pc}
	if (!value_extract(state, &uint_result, sizeof(uint_result))) {
    b792:	2208      	movs	r2, #8
    b794:	4669      	mov	r1, sp
    b796:	4620      	mov	r0, r4
    b798:	f7ff ff02 	bl	b5a0 <value_extract>
    b79c:	2800      	cmp	r0, #0
    b79e:	d0f5      	beq.n	b78c <zcbor_int64_decode+0x1e>
	int_result = (int64_t)uint_result;
    b7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (int_result < 0) {
    b7a4:	2b00      	cmp	r3, #0
    b7a6:	da07      	bge.n	b7b8 <zcbor_int64_decode+0x4a>
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    b7a8:	6863      	ldr	r3, [r4, #4]
    b7aa:	2205      	movs	r2, #5
    b7ac:	6023      	str	r3, [r4, #0]
    b7ae:	68a3      	ldr	r3, [r4, #8]
    b7b0:	3301      	adds	r3, #1
    b7b2:	60a3      	str	r3, [r4, #8]
    b7b4:	6963      	ldr	r3, [r4, #20]
    b7b6:	e7e8      	b.n	b78a <zcbor_int64_decode+0x1c>
	if (major_type == ZCBOR_MAJOR_TYPE_NINT) {
    b7b8:	2e01      	cmp	r6, #1
		*result = -1 - int_result;
    b7ba:	bf04      	itt	eq
    b7bc:	43d2      	mvneq	r2, r2
    b7be:	43db      	mvneq	r3, r3
    b7c0:	e9c5 2300 	strd	r2, r3, [r5]
    b7c4:	e7e3      	b.n	b78e <zcbor_int64_decode+0x20>

0000b7c6 <zcbor_int32_decode>:
{
    b7c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b7c8:	460d      	mov	r5, r1
	if (zcbor_int64_decode(state, &result64)) {
    b7ca:	4669      	mov	r1, sp
{
    b7cc:	4604      	mov	r4, r0
	if (zcbor_int64_decode(state, &result64)) {
    b7ce:	f7ff ffce 	bl	b76e <zcbor_int64_decode>
    b7d2:	b910      	cbnz	r0, b7da <zcbor_int32_decode+0x14>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    b7d4:	2000      	movs	r0, #0
}
    b7d6:	b003      	add	sp, #12
    b7d8:	bd30      	pop	{r4, r5, pc}
		if (result64 > INT32_MAX) {
    b7da:	9b00      	ldr	r3, [sp, #0]
    b7dc:	9a01      	ldr	r2, [sp, #4]
    b7de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b7e2:	f172 0200 	sbcs.w	r2, r2, #0
    b7e6:	db08      	blt.n	b7fa <zcbor_int32_decode+0x34>
    b7e8:	2205      	movs	r2, #5
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    b7ea:	6863      	ldr	r3, [r4, #4]
    b7ec:	6023      	str	r3, [r4, #0]
    b7ee:	68a3      	ldr	r3, [r4, #8]
    b7f0:	3301      	adds	r3, #1
    b7f2:	60a3      	str	r3, [r4, #8]
    b7f4:	6963      	ldr	r3, [r4, #20]
    b7f6:	60da      	str	r2, [r3, #12]
    b7f8:	e7ec      	b.n	b7d4 <zcbor_int32_decode+0xe>
		*result = (int32_t)result64;
    b7fa:	602b      	str	r3, [r5, #0]
		return true;
    b7fc:	e7eb      	b.n	b7d6 <zcbor_int32_decode+0x10>

0000b7fe <zcbor_bstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_BSTR);
    b7fe:	2202      	movs	r2, #2
    b800:	f7ff bf7d 	b.w	b6fe <str_decode>

0000b804 <zcbor_tstr_expect>:
	return str_expect(state, result, ZCBOR_MAJOR_TYPE_TSTR);
    b804:	2203      	movs	r2, #3
    b806:	f7ff bf93 	b.w	b730 <str_expect>

0000b80a <zcbor_map_start_decode>:
{
    b80a:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    b80c:	2105      	movs	r1, #5
{
    b80e:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    b810:	f7ff ff27 	bl	b662 <list_map_start_decode>
	if (ret && !state->indefinite_length_array) {
    b814:	b168      	cbz	r0, b832 <zcbor_map_start_decode+0x28>
    b816:	7c23      	ldrb	r3, [r4, #16]
    b818:	b963      	cbnz	r3, b834 <zcbor_map_start_decode+0x2a>
		if (state->elem_count >= (ZCBOR_MAX_ELEM_COUNT / 2)) {
    b81a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b81e:	68a3      	ldr	r3, [r4, #8]
    b820:	4293      	cmp	r3, r2
    b822:	d308      	bcc.n	b836 <zcbor_map_start_decode+0x2c>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    b824:	6862      	ldr	r2, [r4, #4]
    b826:	3301      	adds	r3, #1
    b828:	6022      	str	r2, [r4, #0]
    b82a:	2205      	movs	r2, #5
    b82c:	60a3      	str	r3, [r4, #8]
    b82e:	6963      	ldr	r3, [r4, #20]
    b830:	60da      	str	r2, [r3, #12]
    b832:	2000      	movs	r0, #0
}
    b834:	bd10      	pop	{r4, pc}
		state->elem_count *= 2;
    b836:	005b      	lsls	r3, r3, #1
    b838:	60a3      	str	r3, [r4, #8]
    b83a:	e7fb      	b.n	b834 <zcbor_map_start_decode+0x2a>

0000b83c <zcbor_map_end_decode>:
{
	return list_map_end_decode(state);
}


bool zcbor_map_end_decode(zcbor_state_t *state)
    b83c:	f7ff bf43 	b.w	b6c6 <list_map_end_decode>

0000b840 <zcbor_list_map_end_force_decode>:
}


bool zcbor_list_map_end_force_decode(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state,
    b840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b844:	2107      	movs	r1, #7
    b846:	f000 b8d4 	b.w	b9f2 <zcbor_process_backup>

0000b84a <zcbor_multi_decode>:
		uint_fast32_t *num_decode,
		zcbor_decoder_t decoder,
		zcbor_state_t *state,
		void *result,
		uint_fast32_t result_len)
{
    b84a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b84e:	4681      	mov	r9, r0
    b850:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
    b854:	4688      	mov	r8, r1
    b856:	4617      	mov	r7, r2
    b858:	469a      	mov	sl, r3
	ZCBOR_CHECK_ERROR();
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    b85a:	2400      	movs	r4, #0
    b85c:	4544      	cmp	r4, r8
    b85e:	d102      	bne.n	b866 <zcbor_multi_decode+0x1c>
			zcbor_print("Found %" PRIuFAST32 " elements.\r\n", i);
			return true;
		}
	}
	zcbor_print("Found %" PRIuFAST32 " elements.\r\n", max_decode);
	*num_decode = max_decode;
    b860:	603c      	str	r4, [r7, #0]
			return true;
    b862:	2001      	movs	r0, #1
    b864:	e013      	b.n	b88e <zcbor_multi_decode+0x44>
		uint8_t const *payload_bak = state->payload;
    b866:	682b      	ldr	r3, [r5, #0]
		if (!decoder(state,
    b868:	4631      	mov	r1, r6
    b86a:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    b86c:	9301      	str	r3, [sp, #4]
		uint_fast32_t elem_count_bak = state->elem_count;
    b86e:	f8d5 b008 	ldr.w	fp, [r5, #8]
		if (!decoder(state,
    b872:	47d0      	blx	sl
    b874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b876:	441e      	add	r6, r3
    b878:	9b01      	ldr	r3, [sp, #4]
    b87a:	b958      	cbnz	r0, b894 <zcbor_multi_decode+0x4a>
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    b87c:	454c      	cmp	r4, r9
			*num_decode = i;
    b87e:	603c      	str	r4, [r7, #0]
			state->payload = payload_bak;
    b880:	602b      	str	r3, [r5, #0]
			state->elem_count = elem_count_bak;
    b882:	f8c5 b008 	str.w	fp, [r5, #8]
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    b886:	d2ec      	bcs.n	b862 <zcbor_multi_decode+0x18>
    b888:	220d      	movs	r2, #13
    b88a:	696b      	ldr	r3, [r5, #20]
    b88c:	60da      	str	r2, [r3, #12]
	return true;
}
    b88e:	b003      	add	sp, #12
    b890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    b894:	3401      	adds	r4, #1
    b896:	e7e1      	b.n	b85c <zcbor_multi_decode+0x12>

0000b898 <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
    b898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (input->len > (state->payload_end - state->payload)) {
    b89c:	f8d0 900c 	ldr.w	r9, [r0, #12]
    b8a0:	6805      	ldr	r5, [r0, #0]
    b8a2:	f8d1 a004 	ldr.w	sl, [r1, #4]
    b8a6:	eba9 0305 	sub.w	r3, r9, r5
    b8aa:	459a      	cmp	sl, r3
{
    b8ac:	4604      	mov	r4, r0
    b8ae:	460e      	mov	r6, r1
    b8b0:	4690      	mov	r8, r2
	if (input->len > (state->payload_end - state->payload)) {
    b8b2:	d906      	bls.n	b8c2 <str_encode+0x2a>
    b8b4:	2208      	movs	r2, #8
    b8b6:	6963      	ldr	r3, [r4, #20]
    b8b8:	60da      	str	r2, [r3, #12]
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    b8ba:	2500      	movs	r5, #0
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    b8bc:	4628      	mov	r0, r5
    b8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    b8c2:	460f      	mov	r7, r1
    b8c4:	f857 3b04 	ldr.w	r3, [r7], #4
    b8c8:	b143      	cbz	r3, b8dc <str_encode+0x44>
    b8ca:	2104      	movs	r1, #4
    b8cc:	4638      	mov	r0, r7
    b8ce:	f7f8 f991 	bl	3bf4 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    b8d2:	4455      	add	r5, sl
    b8d4:	3501      	adds	r5, #1
    b8d6:	4405      	add	r5, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    b8d8:	45a9      	cmp	r9, r5
    b8da:	d3eb      	bcc.n	b8b4 <str_encode+0x1c>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
    b8dc:	2304      	movs	r3, #4
    b8de:	463a      	mov	r2, r7
    b8e0:	4641      	mov	r1, r8
    b8e2:	4620      	mov	r0, r4
    b8e4:	f7f8 f9a0 	bl	3c28 <value_encode>
    b8e8:	4605      	mov	r5, r0
    b8ea:	2800      	cmp	r0, #0
    b8ec:	d0e5      	beq.n	b8ba <str_encode+0x22>
	if (state->payload_mut != input->value) {
    b8ee:	6820      	ldr	r0, [r4, #0]
    b8f0:	6831      	ldr	r1, [r6, #0]
    b8f2:	4288      	cmp	r0, r1
    b8f4:	d002      	beq.n	b8fc <str_encode+0x64>
		memmove(state->payload_mut, input->value, input->len);
    b8f6:	6872      	ldr	r2, [r6, #4]
    b8f8:	f000 f92d 	bl	bb56 <memmove>
	state->payload += input->len;
    b8fc:	6823      	ldr	r3, [r4, #0]
    b8fe:	6872      	ldr	r2, [r6, #4]
    b900:	4413      	add	r3, r2
    b902:	6023      	str	r3, [r4, #0]
	return true;
    b904:	e7da      	b.n	b8bc <str_encode+0x24>

0000b906 <zcbor_int64_put>:
{
    b906:	b507      	push	{r0, r1, r2, lr}
    b908:	e9cd 2300 	strd	r2, r3, [sp]
	if (input < 0) {
    b90c:	2b00      	cmp	r3, #0
{
    b90e:	4611      	mov	r1, r2
		input = -1 - input;
    b910:	bfbb      	ittet	lt
    b912:	43db      	mvnlt	r3, r3
    b914:	43d1      	mvnlt	r1, r2
		major_type = ZCBOR_MAJOR_TYPE_PINT;
    b916:	2100      	movge	r1, #0
		input = -1 - input;
    b918:	e9cd 1300 	strdlt	r1, r3, [sp]
	if (!value_encode(state, major_type, &input, 8)) {
    b91c:	466a      	mov	r2, sp
		major_type = ZCBOR_MAJOR_TYPE_NINT;
    b91e:	bfb8      	it	lt
    b920:	2101      	movlt	r1, #1
	if (!value_encode(state, major_type, &input, 8)) {
    b922:	2308      	movs	r3, #8
    b924:	f7f8 f980 	bl	3c28 <value_encode>
}
    b928:	b003      	add	sp, #12
    b92a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b92e <zcbor_int32_put>:
{
    b92e:	460a      	mov	r2, r1
	return zcbor_int64_put(state, input);
    b930:	17cb      	asrs	r3, r1, #31
    b932:	f7ff bfe8 	b.w	b906 <zcbor_int64_put>

0000b936 <zcbor_uint32_put>:
{
    b936:	b507      	push	{r0, r1, r2, lr}
    b938:	460b      	mov	r3, r1
	return zcbor_uint64_put(state, input);
    b93a:	2100      	movs	r1, #0
	if (!value_encode(state, major_type, input, 8)) {
    b93c:	466a      	mov	r2, sp
	return zcbor_uint64_put(state, input);
    b93e:	e9cd 3100 	strd	r3, r1, [sp]
	if (!value_encode(state, major_type, input, 8)) {
    b942:	2308      	movs	r3, #8
    b944:	f7f8 f970 	bl	3c28 <value_encode>
}
    b948:	b003      	add	sp, #12
    b94a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b94e <zcbor_tstr_encode>:
}


bool zcbor_tstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_TSTR);
    b94e:	2203      	movs	r2, #3
    b950:	f7ff bfa2 	b.w	b898 <str_encode>

0000b954 <zcbor_list_start_encode>:
	ZCBOR_CHECK_PAYLOAD();
    b954:	6803      	ldr	r3, [r0, #0]
    b956:	68c2      	ldr	r2, [r0, #12]
    b958:	4293      	cmp	r3, r2
    b95a:	d304      	bcc.n	b966 <zcbor_list_start_encode+0x12>
    b95c:	2208      	movs	r2, #8
    b95e:	6943      	ldr	r3, [r0, #20]
    b960:	2000      	movs	r0, #0
    b962:	60da      	str	r2, [r3, #12]
    b964:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b966:	1c5a      	adds	r2, r3, #1
    b968:	6002      	str	r2, [r0, #0]
    b96a:	229f      	movs	r2, #159	; 0x9f
	return true;
    b96c:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b96e:	701a      	strb	r2, [r3, #0]


bool zcbor_list_start_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_start_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}
    b970:	4770      	bx	lr

0000b972 <zcbor_map_start_encode>:
	ZCBOR_CHECK_PAYLOAD();
    b972:	6803      	ldr	r3, [r0, #0]
    b974:	68c2      	ldr	r2, [r0, #12]
    b976:	4293      	cmp	r3, r2
    b978:	d304      	bcc.n	b984 <zcbor_map_start_encode+0x12>
    b97a:	2208      	movs	r2, #8
    b97c:	6943      	ldr	r3, [r0, #20]
    b97e:	2000      	movs	r0, #0
    b980:	60da      	str	r2, [r3, #12]
    b982:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b984:	1c5a      	adds	r2, r3, #1
    b986:	6002      	str	r2, [r0, #0]
    b988:	22bf      	movs	r2, #191	; 0xbf
	return true;
    b98a:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b98c:	701a      	strb	r2, [r3, #0]


bool zcbor_map_start_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_start_encode(state, max_num, ZCBOR_MAJOR_TYPE_MAP);
}
    b98e:	4770      	bx	lr

0000b990 <zcbor_list_end_encode>:
	ZCBOR_CHECK_PAYLOAD();
    b990:	6803      	ldr	r3, [r0, #0]
    b992:	68c2      	ldr	r2, [r0, #12]
    b994:	4293      	cmp	r3, r2
    b996:	d304      	bcc.n	b9a2 <zcbor_list_end_encode+0x12>
    b998:	2208      	movs	r2, #8
    b99a:	6943      	ldr	r3, [r0, #20]
    b99c:	2000      	movs	r0, #0
    b99e:	60da      	str	r2, [r3, #12]
    b9a0:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b9a2:	1c5a      	adds	r2, r3, #1
    b9a4:	6002      	str	r2, [r0, #0]
    b9a6:	22ff      	movs	r2, #255	; 0xff
	return true;
    b9a8:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b9aa:	701a      	strb	r2, [r3, #0]


bool zcbor_list_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}
    b9ac:	4770      	bx	lr

0000b9ae <zcbor_map_end_encode>:


bool zcbor_map_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
    b9ae:	f7ff bfef 	b.w	b990 <zcbor_list_end_encode>

0000b9b2 <zcbor_new_encode_state>:


bool zcbor_new_encode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	return zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
    b9b2:	f000 b85c 	b.w	ba6e <zcbor_new_state>

0000b9b6 <zcbor_new_backup>:

_Static_assert((sizeof(zcbor_state_t) >= sizeof(struct zcbor_state_constant)),
	"This code needs zcbor_state_t to be at least as large as zcbor_backups_t.");

bool zcbor_new_backup(zcbor_state_t *state, uint_fast32_t new_elem_count)
{
    b9b6:	b538      	push	{r3, r4, r5, lr}
	ZCBOR_CHECK_ERROR();

	if ((state->constant_state->current_backup)
    b9b8:	6943      	ldr	r3, [r0, #20]
{
    b9ba:	460d      	mov	r5, r1
	if ((state->constant_state->current_backup)
    b9bc:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
    b9c0:	4291      	cmp	r1, r2
{
    b9c2:	4604      	mov	r4, r0
    b9c4:	f04f 0000 	mov.w	r0, #0
	if ((state->constant_state->current_backup)
    b9c8:	d302      	bcc.n	b9d0 <zcbor_new_backup+0x1a>
    b9ca:	2201      	movs	r2, #1
    b9cc:	60da      	str	r2, [r3, #12]
		sizeof(zcbor_state_t));

	state->elem_count = new_elem_count;

	return true;
}
    b9ce:	bd38      	pop	{r3, r4, r5, pc}
	state->payload_moved = false;
    b9d0:	7460      	strb	r0, [r4, #17]
	(state->constant_state->current_backup)++;
    b9d2:	685a      	ldr	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    b9d4:	4621      	mov	r1, r4
	(state->constant_state->current_backup)++;
    b9d6:	3201      	adds	r2, #1
    b9d8:	605a      	str	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    b9da:	2218      	movs	r2, #24
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
    b9dc:	6963      	ldr	r3, [r4, #20]
    b9de:	6858      	ldr	r0, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    b9e0:	681b      	ldr	r3, [r3, #0]
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
    b9e2:	3801      	subs	r0, #1
	memcpy(&state->constant_state->backup_list[i], state,
    b9e4:	fb02 3000 	mla	r0, r2, r0, r3
    b9e8:	f000 f8cc 	bl	bb84 <memcpy>
	return true;
    b9ec:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    b9ee:	60a5      	str	r5, [r4, #8]
	return true;
    b9f0:	e7ed      	b.n	b9ce <zcbor_new_backup+0x18>

0000b9f2 <zcbor_process_backup>:


bool zcbor_process_backup(zcbor_state_t *state, uint32_t flags,
		uint_fast32_t max_elem_count)
{
    b9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9f6:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint_fast32_t elem_count = state->elem_count;

	ZCBOR_CHECK_ERROR();

	if (state->constant_state->current_backup == 0) {
    b9f8:	6942      	ldr	r2, [r0, #20]
{
    b9fa:	4604      	mov	r4, r0
	if (state->constant_state->current_backup == 0) {
    b9fc:	6853      	ldr	r3, [r2, #4]
{
    b9fe:	460d      	mov	r5, r1
	const uint8_t *payload = state->payload;
    ba00:	6807      	ldr	r7, [r0, #0]
	const uint_fast32_t elem_count = state->elem_count;
    ba02:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (state->constant_state->current_backup == 0) {
    ba06:	b923      	cbnz	r3, ba12 <zcbor_process_backup+0x20>
    ba08:	2302      	movs	r3, #2
    ba0a:	60d3      	str	r3, [r2, #12]
		zcbor_print("No backups available.\r\n");
		ZCBOR_ERR(ZCBOR_ERR_NO_BACKUP_ACTIVE);
    ba0c:	2000      	movs	r0, #0
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    ba0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & ZCBOR_FLAG_RESTORE) {
    ba12:	07e9      	lsls	r1, r5, #31
    ba14:	d50d      	bpl.n	ba32 <zcbor_process_backup+0x40>
			if (state->constant_state->backup_list[i].payload_moved) {
    ba16:	6811      	ldr	r1, [r2, #0]
    ba18:	2218      	movs	r2, #24
		uint_fast32_t i = state->constant_state->current_backup - 1;
    ba1a:	3b01      	subs	r3, #1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    ba1c:	0768      	lsls	r0, r5, #29
			if (state->constant_state->backup_list[i].payload_moved) {
    ba1e:	fb02 1103 	mla	r1, r2, r3, r1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    ba22:	d402      	bmi.n	ba2a <zcbor_process_backup+0x38>
			if (state->constant_state->backup_list[i].payload_moved) {
    ba24:	7c4b      	ldrb	r3, [r1, #17]
    ba26:	2b00      	cmp	r3, #0
    ba28:	d1f0      	bne.n	ba0c <zcbor_process_backup+0x1a>
		memcpy(state, &state->constant_state->backup_list[i],
    ba2a:	2218      	movs	r2, #24
    ba2c:	4620      	mov	r0, r4
    ba2e:	f000 f8a9 	bl	bb84 <memcpy>
	if (flags & ZCBOR_FLAG_CONSUME) {
    ba32:	07aa      	lsls	r2, r5, #30
		state->constant_state->current_backup--;
    ba34:	bf41      	itttt	mi
    ba36:	6962      	ldrmi	r2, [r4, #20]
    ba38:	6853      	ldrmi	r3, [r2, #4]
    ba3a:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
    ba3e:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    ba40:	45b0      	cmp	r8, r6
    ba42:	d903      	bls.n	ba4c <zcbor_process_backup+0x5a>
    ba44:	2204      	movs	r2, #4
    ba46:	6963      	ldr	r3, [r4, #20]
    ba48:	60da      	str	r2, [r3, #12]
		ZCBOR_ERR(ZCBOR_ERR_HIGH_ELEM_COUNT);
    ba4a:	e7df      	b.n	ba0c <zcbor_process_backup+0x1a>
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
    ba4c:	076b      	lsls	r3, r5, #29
    ba4e:	d401      	bmi.n	ba54 <zcbor_process_backup+0x62>
	return true;
    ba50:	2001      	movs	r0, #1
    ba52:	e7dc      	b.n	ba0e <zcbor_process_backup+0x1c>
		state->payload = payload;
    ba54:	6027      	str	r7, [r4, #0]
    ba56:	e7fb      	b.n	ba50 <zcbor_process_backup+0x5e>

0000ba58 <zcbor_union_start_code>:
}


bool zcbor_union_start_code(zcbor_state_t *state)
{
	if (!zcbor_new_backup(state, state->elem_count)) {
    ba58:	6881      	ldr	r1, [r0, #8]
    ba5a:	f7ff bfac 	b.w	b9b6 <zcbor_new_backup>

0000ba5e <zcbor_union_elem_code>:
}


bool zcbor_union_elem_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_RESTORE, state->elem_count)) {
    ba5e:	2101      	movs	r1, #1
    ba60:	6882      	ldr	r2, [r0, #8]
    ba62:	f7ff bfc6 	b.w	b9f2 <zcbor_process_backup>

0000ba66 <zcbor_union_end_code>:
	return true;
}

bool zcbor_union_end_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_CONSUME, state->elem_count)) {
    ba66:	2102      	movs	r1, #2
    ba68:	6882      	ldr	r2, [r0, #8]
    ba6a:	f7ff bfc2 	b.w	b9f2 <zcbor_process_backup>

0000ba6e <zcbor_new_state>:
	return true;
}

bool zcbor_new_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
    ba6e:	b510      	push	{r4, lr}
	state_array[0].payload = payload;
    ba70:	6002      	str	r2, [r0, #0]
	state_array[0].payload_end = payload + payload_len;
    ba72:	441a      	add	r2, r3
	state_array[0].elem_count = elem_count;
    ba74:	9b02      	ldr	r3, [sp, #8]
{
    ba76:	4604      	mov	r4, r0
	state_array[0].payload_end = payload + payload_len;
    ba78:	60c2      	str	r2, [r0, #12]
	state_array[0].elem_count = elem_count;
    ba7a:	6083      	str	r3, [r0, #8]
	state_array[0].indefinite_length_array = false;
    ba7c:	2000      	movs	r0, #0
	state_array[0].payload_moved = false;
	state_array[0].constant_state = NULL;

	if(n_states < 2) {
    ba7e:	2901      	cmp	r1, #1
	state_array[0].indefinite_length_array = false;
    ba80:	8220      	strh	r0, [r4, #16]
	if(n_states < 2) {
    ba82:	d801      	bhi.n	ba88 <zcbor_new_state+0x1a>
	state_array[0].constant_state = NULL;
    ba84:	6160      	str	r0, [r4, #20]
#endif
	if (n_states > 2) {
		state_array[0].constant_state->backup_list = &state_array[1];
	}
	return true;
}
    ba86:	bd10      	pop	{r4, pc}
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
    ba88:	2318      	movs	r3, #24
    ba8a:	434b      	muls	r3, r1
    ba8c:	3b18      	subs	r3, #24
    ba8e:	18e2      	adds	r2, r4, r3
    ba90:	6162      	str	r2, [r4, #20]
	state_array[0].constant_state->backup_list = NULL;
    ba92:	50e0      	str	r0, [r4, r3]
	state_array[0].constant_state->num_backups = n_states - 2;
    ba94:	6963      	ldr	r3, [r4, #20]
    ba96:	1e8a      	subs	r2, r1, #2
    ba98:	609a      	str	r2, [r3, #8]
	state_array[0].constant_state->current_backup = 0;
    ba9a:	6963      	ldr	r3, [r4, #20]
	if (n_states > 2) {
    ba9c:	2902      	cmp	r1, #2
	state_array[0].constant_state->current_backup = 0;
    ba9e:	6058      	str	r0, [r3, #4]
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
    baa0:	6963      	ldr	r3, [r4, #20]
    baa2:	60d8      	str	r0, [r3, #12]
	if (n_states > 2) {
    baa4:	d101      	bne.n	baaa <zcbor_new_state+0x3c>
	return true;
    baa6:	2001      	movs	r0, #1
    baa8:	e7ed      	b.n	ba86 <zcbor_new_state+0x18>
		state_array[0].constant_state->backup_list = &state_array[1];
    baaa:	6963      	ldr	r3, [r4, #20]
    baac:	3418      	adds	r4, #24
    baae:	601c      	str	r4, [r3, #0]
    bab0:	e7f9      	b.n	baa6 <zcbor_new_state+0x38>

0000bab2 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    bab2:	f002 ba05 	b.w	dec0 <z_fatal_error>

0000bab6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    bab6:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    bab8:	6800      	ldr	r0, [r0, #0]
    baba:	f002 ba01 	b.w	dec0 <z_fatal_error>

0000babe <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    babe:	2100      	movs	r1, #0
    bac0:	2001      	movs	r0, #1
    bac2:	f7ff bff6 	b.w	bab2 <z_arm_fatal_error>

0000bac6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    bac6:	b508      	push	{r3, lr}
	handler();
    bac8:	f7f8 f968 	bl	3d9c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    bacc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    bad0:	f7f8 ba1e 	b.w	3f10 <z_arm_exc_exit>

0000bad4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    bad4:	6e03      	ldr	r3, [r0, #96]	; 0x60
    bad6:	f383 880b 	msr	PSPLIM, r3
}
    bada:	4770      	bx	lr

0000badc <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    badc:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    bae0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    bae4:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    bae6:	bf08      	it	eq
    bae8:	f06f 0015 	mvneq.w	r0, #21
    baec:	4770      	bx	lr

0000baee <mpu_configure_region>:
{
    baee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    baf0:	890a      	ldrh	r2, [r1, #8]
    baf2:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    baf4:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    baf6:	684d      	ldr	r5, [r1, #4]
    baf8:	f002 021f 	and.w	r2, r2, #31
    bafc:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    bb00:	9300      	str	r3, [sp, #0]
    bb02:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    bb06:	f023 031f 	bic.w	r3, r3, #31
    bb0a:	1e6a      	subs	r2, r5, #1
    bb0c:	4413      	add	r3, r2
    bb0e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    bb12:	2807      	cmp	r0, #7
    bb14:	9303      	str	r3, [sp, #12]
    bb16:	d804      	bhi.n	bb22 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    bb18:	4669      	mov	r1, sp
    bb1a:	f7f8 fbbb 	bl	4294 <region_init>
}
    bb1e:	b004      	add	sp, #16
    bb20:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    bb22:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    bb26:	e7fa      	b.n	bb1e <mpu_configure_region+0x30>

0000bb28 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    bb28:	4603      	mov	r3, r0
	size_t n = 0;
    bb2a:	2000      	movs	r0, #0

	while (*s != '\0') {
    bb2c:	5c1a      	ldrb	r2, [r3, r0]
    bb2e:	b902      	cbnz	r2, bb32 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    bb30:	4770      	bx	lr
		n++;
    bb32:	3001      	adds	r0, #1
    bb34:	e7fa      	b.n	bb2c <strlen+0x4>

0000bb36 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    bb36:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    bb38:	b15a      	cbz	r2, bb52 <memcmp+0x1c>
    bb3a:	3901      	subs	r1, #1
    bb3c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    bb3e:	f810 2b01 	ldrb.w	r2, [r0], #1
    bb42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    bb46:	42a0      	cmp	r0, r4
    bb48:	d001      	beq.n	bb4e <memcmp+0x18>
    bb4a:	429a      	cmp	r2, r3
    bb4c:	d0f7      	beq.n	bb3e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    bb4e:	1ad0      	subs	r0, r2, r3
}
    bb50:	bd10      	pop	{r4, pc}
		return 0;
    bb52:	4610      	mov	r0, r2
    bb54:	e7fc      	b.n	bb50 <memcmp+0x1a>

0000bb56 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    bb56:	1a43      	subs	r3, r0, r1
    bb58:	4293      	cmp	r3, r2
{
    bb5a:	b510      	push	{r4, lr}
    bb5c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    bb60:	d308      	bcc.n	bb74 <memmove+0x1e>
	char *dest = d;
    bb62:	4602      	mov	r2, r0
    bb64:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    bb66:	429a      	cmp	r2, r3
    bb68:	d00b      	beq.n	bb82 <memmove+0x2c>
			*dest = *src;
    bb6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bb6e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    bb72:	e7f8      	b.n	bb66 <memmove+0x10>
    bb74:	440a      	add	r2, r1
			dest[n] = src[n];
    bb76:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    bb7a:	428a      	cmp	r2, r1
			dest[n] = src[n];
    bb7c:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    bb80:	d1f9      	bne.n	bb76 <memmove+0x20>
		}
	}

	return d;
}
    bb82:	bd10      	pop	{r4, pc}

0000bb84 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    bb84:	b510      	push	{r4, lr}
    bb86:	1e43      	subs	r3, r0, #1
    bb88:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    bb8a:	4291      	cmp	r1, r2
    bb8c:	d100      	bne.n	bb90 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    bb8e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    bb90:	f811 4b01 	ldrb.w	r4, [r1], #1
    bb94:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    bb98:	e7f7      	b.n	bb8a <memcpy+0x6>

0000bb9a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    bb9a:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    bb9c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    bb9e:	4402      	add	r2, r0
    bba0:	4293      	cmp	r3, r2
    bba2:	d100      	bne.n	bba6 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    bba4:	4770      	bx	lr
		*(d_byte++) = c_byte;
    bba6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    bbaa:	e7f9      	b.n	bba0 <memset+0x6>

0000bbac <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    bbac:	684b      	ldr	r3, [r1, #4]
    bbae:	2b01      	cmp	r3, #1
    bbb0:	dd07      	ble.n	bbc2 <sprintf_out+0x16>
		*(p->ptr) = c;
    bbb2:	680b      	ldr	r3, [r1, #0]
    bbb4:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    bbb6:	680b      	ldr	r3, [r1, #0]
    bbb8:	3301      	adds	r3, #1
    bbba:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    bbbc:	684b      	ldr	r3, [r1, #4]
    bbbe:	3b01      	subs	r3, #1
    bbc0:	604b      	str	r3, [r1, #4]
}
    bbc2:	2000      	movs	r0, #0
    bbc4:	4770      	bx	lr

0000bbc6 <setup>:
	if (IS_ENABLED(CONFIG_BOARD_ENABLE_CPUNET)) {
		enable_cpunet();
	}

	return 0;
}
    bbc6:	2000      	movs	r0, #0
    bbc8:	4770      	bx	lr

0000bbca <ep_ctx_reset>:
{
    bbca:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    bbcc:	6903      	ldr	r3, [r0, #16]
{
    bbce:	4604      	mov	r4, r0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    bbd0:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    bbd4:	2300      	movs	r3, #0
    bbd6:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    bbd8:	7f83      	ldrb	r3, [r0, #30]
    bbda:	b113      	cbz	r3, bbe2 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    bbdc:	7a40      	ldrb	r0, [r0, #9]
    bbde:	f002 f955 	bl	de8c <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    bbe2:	2301      	movs	r3, #1
    bbe4:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    bbe6:	2300      	movs	r3, #0
    bbe8:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    bbea:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    bbec:	77a3      	strb	r3, [r4, #30]
}
    bbee:	bd10      	pop	{r4, pc}

0000bbf0 <attached_evt_delay_handler>:
	submit_dc_power_event(USBD_ATTACHED);
    bbf0:	2001      	movs	r0, #1
    bbf2:	f7f8 bd41 	b.w	4678 <submit_dc_power_event>

0000bbf6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    bbf6:	f7fd bb4f 	b.w	9298 <z_impl_k_mutex_lock>

0000bbfa <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    bbfa:	f7fd bbc7 	b.w	938c <z_impl_k_mutex_unlock>

0000bbfe <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    bbfe:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    bc00:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    bc02:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    bc06:	b921      	cbnz	r1, bc12 <usb_dc_ep_check_cap+0x14>
    bc08:	3a00      	subs	r2, #0
    bc0a:	bf18      	it	ne
    bc0c:	2201      	movne	r2, #1
    bc0e:	4250      	negs	r0, r2
    bc10:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    bc12:	2a08      	cmp	r2, #8
    bc14:	d806      	bhi.n	bc24 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    bc16:	2901      	cmp	r1, #1
    bc18:	d107      	bne.n	bc2a <usb_dc_ep_check_cap+0x2c>
    bc1a:	f083 0008 	eor.w	r0, r3, #8
    bc1e:	f340 00c0 	sbfx	r0, r0, #3, #1
    bc22:	4770      	bx	lr
		return -1;
    bc24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bc28:	4770      	bx	lr
	return 0;
    bc2a:	2000      	movs	r0, #0
}
    bc2c:	4770      	bx	lr

0000bc2e <usb_dc_ep_disable>:
{
    bc2e:	b538      	push	{r3, r4, r5, lr}
    bc30:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    bc32:	f7f8 fcb9 	bl	45a8 <endpoint_ctx>
	if (!ep_ctx) {
    bc36:	4605      	mov	r5, r0
    bc38:	b160      	cbz	r0, bc54 <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    bc3a:	7a03      	ldrb	r3, [r0, #8]
    bc3c:	b16b      	cbz	r3, bc5a <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    bc3e:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    bc40:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    bc42:	f7fd f85b 	bl	8cfc <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    bc46:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    bc48:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    bc4a:	f7ff ffbe 	bl	bbca <ep_ctx_reset>
	return 0;
    bc4e:	4620      	mov	r0, r4
	ep_ctx->cfg.en = false;
    bc50:	722c      	strb	r4, [r5, #8]
}
    bc52:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bc54:	f06f 0015 	mvn.w	r0, #21
    bc58:	e7fb      	b.n	bc52 <usb_dc_ep_disable+0x24>
		return -EALREADY;
    bc5a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    bc5e:	e7f8      	b.n	bc52 <usb_dc_ep_disable+0x24>

0000bc60 <usb_dc_ep_read>:
{
    bc60:	b570      	push	{r4, r5, r6, lr}
    bc62:	4604      	mov	r4, r0
    bc64:	460e      	mov	r6, r1
    bc66:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    bc68:	f7f9 f9aa 	bl	4fc0 <usb_dc_ep_read_wait>
	if (ret) {
    bc6c:	b930      	cbnz	r0, bc7c <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    bc6e:	b906      	cbnz	r6, bc72 <usb_dc_ep_read+0x12>
    bc70:	b125      	cbz	r5, bc7c <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    bc72:	4620      	mov	r0, r4
}
    bc74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    bc78:	f7f9 b9ea 	b.w	5050 <usb_dc_ep_read_continue>
}
    bc7c:	bd70      	pop	{r4, r5, r6, pc}

0000bc7e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    bc7e:	220c      	movs	r2, #12
    bc80:	6903      	ldr	r3, [r0, #16]
    bc82:	b2c9      	uxtb	r1, r1
    bc84:	fb01 3302 	mla	r3, r1, r2, r3
    bc88:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    bc8a:	f000 0007 	and.w	r0, r0, #7
    bc8e:	4770      	bx	lr

0000bc90 <set_on_state>:
    bc90:	f04f 0320 	mov.w	r3, #32
    bc94:	f3ef 8211 	mrs	r2, BASEPRI
    bc98:	f383 8812 	msr	BASEPRI_MAX, r3
    bc9c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    bca0:	6803      	ldr	r3, [r0, #0]
    bca2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    bca6:	f043 0302 	orr.w	r3, r3, #2
    bcaa:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    bcac:	f382 8811 	msr	BASEPRI, r2
    bcb0:	f3bf 8f6f 	isb	sy
}
    bcb4:	4770      	bx	lr

0000bcb6 <stop>:
{
    bcb6:	b570      	push	{r4, r5, r6, lr}
    bcb8:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    bcba:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    bcbc:	f04f 0420 	mov.w	r4, #32
    bcc0:	f3ef 8511 	mrs	r5, BASEPRI
    bcc4:	f384 8812 	msr	BASEPRI_MAX, r4
    bcc8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    bccc:	260c      	movs	r6, #12
    bcce:	fb06 3401 	mla	r4, r6, r1, r3
    bcd2:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    bcd4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    bcd8:	d008      	beq.n	bcec <stop+0x36>
    bcda:	42a2      	cmp	r2, r4
    bcdc:	d006      	beq.n	bcec <stop+0x36>
	__asm__ volatile(
    bcde:	f385 8811 	msr	BASEPRI, r5
    bce2:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    bce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    bcea:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bcec:	2201      	movs	r2, #1
    bcee:	fb06 3301 	mla	r3, r6, r1, r3
    bcf2:	679a      	str	r2, [r3, #120]	; 0x78
    bcf4:	f385 8811 	msr	BASEPRI, r5
    bcf8:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    bcfc:	6843      	ldr	r3, [r0, #4]
    bcfe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    bd02:	685b      	ldr	r3, [r3, #4]
    bd04:	4798      	blx	r3
	return 0;
    bd06:	2000      	movs	r0, #0
    bd08:	e7ef      	b.n	bcea <stop+0x34>

0000bd0a <api_stop>:
	return stop(dev, subsys, CTX_API);
    bd0a:	2280      	movs	r2, #128	; 0x80
    bd0c:	f7ff bfd3 	b.w	bcb6 <stop>

0000bd10 <async_start>:
{
    bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd12:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    bd14:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    bd16:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    bd18:	f04f 0520 	mov.w	r5, #32
    bd1c:	f3ef 8611 	mrs	r6, BASEPRI
    bd20:	f385 8812 	msr	BASEPRI_MAX, r5
    bd24:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    bd28:	250c      	movs	r5, #12
    bd2a:	fb05 4401 	mla	r4, r5, r1, r4
    bd2e:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    bd30:	f005 0c07 	and.w	ip, r5, #7
    bd34:	f1bc 0f01 	cmp.w	ip, #1
    bd38:	d10c      	bne.n	bd54 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    bd3a:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    bd3c:	f386 8811 	msr	BASEPRI, r6
    bd40:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    bd44:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    bd48:	6843      	ldr	r3, [r0, #4]
    bd4a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    bd4e:	4798      	blx	r3
	return 0;
    bd50:	2000      	movs	r0, #0
}
    bd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    bd54:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    bd58:	42af      	cmp	r7, r5
    bd5a:	f386 8811 	msr	BASEPRI, r6
    bd5e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    bd62:	bf0c      	ite	eq
    bd64:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    bd68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    bd6c:	e7f1      	b.n	bd52 <async_start+0x42>

0000bd6e <api_start>:
{
    bd6e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    bd70:	2480      	movs	r4, #128	; 0x80
    bd72:	9400      	str	r4, [sp, #0]
    bd74:	f7ff ffcc 	bl	bd10 <async_start>
}
    bd78:	b002      	add	sp, #8
    bd7a:	bd10      	pop	{r4, pc}

0000bd7c <onoff_started_callback>:
{
    bd7c:	b410      	push	{r4}
	notify(mgr, 0);
    bd7e:	241c      	movs	r4, #28
	return &data->mgr[type];
    bd80:	6900      	ldr	r0, [r0, #16]
    bd82:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    bd84:	fb03 0004 	mla	r0, r3, r4, r0
    bd88:	2100      	movs	r1, #0
}
    bd8a:	bc10      	pop	{r4}
	notify(mgr, 0);
    bd8c:	4710      	bx	r2

0000bd8e <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    bd8e:	2003      	movs	r0, #3
    bd90:	f001 bf03 	b.w	db9a <nrfx_clock_start>

0000bd94 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    bd94:	2002      	movs	r0, #2
    bd96:	f001 bf00 	b.w	db9a <nrfx_clock_start>

0000bd9a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    bd9a:	2000      	movs	r0, #0
    bd9c:	f001 befd 	b.w	db9a <nrfx_clock_start>

0000bda0 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    bda0:	2003      	movs	r0, #3
    bda2:	f001 bf59 	b.w	dc58 <nrfx_clock_stop>

0000bda6 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    bda6:	2002      	movs	r0, #2
    bda8:	f001 bf56 	b.w	dc58 <nrfx_clock_stop>

0000bdac <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    bdac:	2000      	movs	r0, #0
    bdae:	f001 bf53 	b.w	dc58 <nrfx_clock_stop>

0000bdb2 <blocking_start_callback>:
{
    bdb2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    bdb4:	f7fd bb5a 	b.w	946c <z_impl_k_sem_give>

0000bdb8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bdb8:	6843      	ldr	r3, [r0, #4]
}
    bdba:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bdbc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    bdbe:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    bdc0:	600b      	str	r3, [r1, #0]
}
    bdc2:	4770      	bx	lr

0000bdc4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bdc4:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    bdc6:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bdca:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    bdcc:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    bdd0:	6098      	str	r0, [r3, #8]
}
    bdd2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    bdd4:	60d9      	str	r1, [r3, #12]
    bdd6:	4770      	bx	lr

0000bdd8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bdd8:	6843      	ldr	r3, [r0, #4]
}
    bdda:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bddc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    bdde:	6099      	str	r1, [r3, #8]
}
    bde0:	4770      	bx	lr

0000bde2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bde2:	6843      	ldr	r3, [r0, #4]
}
    bde4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bde6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    bde8:	60d9      	str	r1, [r3, #12]
}
    bdea:	4770      	bx	lr

0000bdec <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bdec:	6843      	ldr	r3, [r0, #4]
    bdee:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    bdf0:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    bdf2:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    bdf6:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    bdf8:	6090      	str	r0, [r2, #8]
}
    bdfa:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    bdfc:	60d3      	str	r3, [r2, #12]
    bdfe:	4770      	bx	lr

0000be00 <gpio_nrfx_manage_callback>:
{
    be00:	b510      	push	{r4, lr}
	return port->data;
    be02:	6903      	ldr	r3, [r0, #16]
	return list->head;
    be04:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    be06:	b1f8      	cbz	r0, be48 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    be08:	4288      	cmp	r0, r1
    be0a:	d119      	bne.n	be40 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    be0c:	689c      	ldr	r4, [r3, #8]
	return node->next;
    be0e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    be10:	42a1      	cmp	r1, r4
	list->head = node;
    be12:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    be14:	d100      	bne.n	be18 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    be16:	6098      	str	r0, [r3, #8]
	parent->next = child;
    be18:	2000      	movs	r0, #0
    be1a:	6008      	str	r0, [r1, #0]
	if (set) {
    be1c:	b12a      	cbz	r2, be2a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    be1e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    be20:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    be22:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    be24:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    be26:	b902      	cbnz	r2, be2a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    be28:	6099      	str	r1, [r3, #8]
	return 0;
    be2a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    be2c:	e010      	b.n	be50 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    be2e:	4281      	cmp	r1, r0
    be30:	d106      	bne.n	be40 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    be32:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    be34:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    be36:	6898      	ldr	r0, [r3, #8]
    be38:	4281      	cmp	r1, r0
    be3a:	d1ed      	bne.n	be18 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    be3c:	609c      	str	r4, [r3, #8]
}
    be3e:	e7eb      	b.n	be18 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    be40:	4604      	mov	r4, r0
    be42:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    be44:	2800      	cmp	r0, #0
    be46:	d1f2      	bne.n	be2e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    be48:	2a00      	cmp	r2, #0
    be4a:	d1e8      	bne.n	be1e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    be4c:	f06f 0015 	mvn.w	r0, #21
}
    be50:	bd10      	pop	{r4, pc}

0000be52 <z_impl_hwinfo_get_device_id>:
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    be52:	2908      	cmp	r1, #8
{
    be54:	b513      	push	{r0, r1, r4, lr}
	if (length > sizeof(dev_id.id)) {
    be56:	bf28      	it	cs
    be58:	2108      	movcs	r1, #8
}

NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
    be5a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    be5e:	460c      	mov	r4, r1
    be60:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
    be64:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    be68:	ba1b      	rev	r3, r3
    be6a:	ba12      	rev	r2, r2
    be6c:	9200      	str	r2, [sp, #0]
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    be6e:	460a      	mov	r2, r1
    be70:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    be72:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    be74:	f7ff fe86 	bl	bb84 <memcpy>

	return length;
}
    be78:	4620      	mov	r0, r4
    be7a:	b002      	add	sp, #8
    be7c:	bd10      	pop	{r4, pc}

0000be7e <regulator_common_data_init>:
 */

#include <zephyr/drivers/regulator.h>

void regulator_common_data_init(const struct device *dev)
{
    be7e:	b510      	push	{r4, lr}
	struct regulator_common_data *data =
    be80:	6904      	ldr	r4, [r0, #16]
	return z_impl_k_mutex_init(mutex);
    be82:	4620      	mov	r0, r4
    be84:	f002 f8a7 	bl	dfd6 <z_impl_k_mutex_init>
		(struct regulator_common_data *)dev->data;

	(void)k_mutex_init(&data->lock);
	data->refcnt = 0;
    be88:	2300      	movs	r3, #0
    be8a:	6163      	str	r3, [r4, #20]
}
    be8c:	bd10      	pop	{r4, pc}

0000be8e <gpio_pin_configure_dt>:
{
    be8e:	4603      	mov	r3, r0
    be90:	460a      	mov	r2, r1
    be92:	b4f0      	push	{r4, r5, r6, r7}
				  spec->pin,
    be94:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    be96:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
    be98:	6800      	ldr	r0, [r0, #0]
    be9a:	4313      	orrs	r3, r2
		data->invert |= (gpio_port_pins_t)BIT(pin);
    be9c:	2501      	movs	r5, #1
	struct gpio_driver_data *data =
    be9e:	6906      	ldr	r6, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    bea0:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bea2:	6834      	ldr	r4, [r6, #0]
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    bea4:	bf48      	it	mi
    bea6:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    beaa:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    beac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    beb0:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
    beb2:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    beb4:	bf4c      	ite	mi
    beb6:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    beb8:	43ac      	bicpl	r4, r5
    beba:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
    bebc:	683b      	ldr	r3, [r7, #0]
}
    bebe:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    bec0:	4718      	bx	r3

0000bec2 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    bec2:	2301      	movs	r3, #1
    bec4:	fa03 f101 	lsl.w	r1, r3, r1
    bec8:	6903      	ldr	r3, [r0, #16]
    beca:	681b      	ldr	r3, [r3, #0]
    becc:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    bece:	bf18      	it	ne
    bed0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    bed4:	b112      	cbz	r2, bedc <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
    bed6:	6883      	ldr	r3, [r0, #8]
    bed8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    beda:	4718      	bx	r3
    bedc:	6883      	ldr	r3, [r0, #8]
    bede:	691b      	ldr	r3, [r3, #16]
    bee0:	e7fb      	b.n	beda <gpio_pin_set+0x18>

0000bee2 <regulator_fixed_init>:
	.enable = regulator_fixed_enable,
	.disable = regulator_fixed_disable,
};

static int regulator_fixed_init(const struct device *dev)
{
    bee2:	b510      	push	{r4, lr}
	const struct regulator_fixed_config *cfg = dev->config;
    bee4:	6844      	ldr	r4, [r0, #4]
	int ret;

	regulator_common_data_init(dev);
    bee6:	f7ff ffca 	bl	be7e <regulator_common_data_init>

	if (!device_is_ready(cfg->enable.port)) {
    beea:	68a0      	ldr	r0, [r4, #8]
    beec:	f001 ffd1 	bl	de92 <z_device_is_ready>
    bef0:	b1b0      	cbz	r0, bf20 <regulator_fixed_init+0x3e>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
		return -ENODEV;
	}

	if ((cfg->options & (OPTION_ALWAYS_ON | OPTION_BOOT_ON)) != 0U) {
    bef2:	7c23      	ldrb	r3, [r4, #16]
		ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_ACTIVE);
    bef4:	f104 0008 	add.w	r0, r4, #8
	if ((cfg->options & (OPTION_ALWAYS_ON | OPTION_BOOT_ON)) != 0U) {
    bef8:	079b      	lsls	r3, r3, #30
    befa:	d00a      	beq.n	bf12 <regulator_fixed_init+0x30>
		ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_ACTIVE);
    befc:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
    bf00:	f7ff ffc5 	bl	be8e <gpio_pin_configure_dt>
		if (ret < 0) {
    bf04:	2800      	cmp	r0, #0
    bf06:	db03      	blt.n	bf10 <regulator_fixed_init+0x2e>
			return ret;
		}

		k_busy_wait(cfg->startup_delay_us);
    bf08:	6820      	ldr	r0, [r4, #0]
	z_impl_k_busy_wait(usec_to_wait);
    bf0a:	f002 fa58 	bl	e3be <z_impl_k_busy_wait>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    bf0e:	2000      	movs	r0, #0
}
    bf10:	bd10      	pop	{r4, pc}
		ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_INACTIVE);
    bf12:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    bf16:	f7ff ffba 	bl	be8e <gpio_pin_configure_dt>
		if (ret < 0) {
    bf1a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    bf1e:	e7f7      	b.n	bf10 <regulator_fixed_init+0x2e>
		return -ENODEV;
    bf20:	f06f 0012 	mvn.w	r0, #18
    bf24:	e7f4      	b.n	bf10 <regulator_fixed_init+0x2e>

0000bf26 <regulator_fixed_disable>:
	const struct regulator_fixed_config *cfg = dev->config;
    bf26:	6843      	ldr	r3, [r0, #4]
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    bf28:	7c1a      	ldrb	r2, [r3, #16]
    bf2a:	f012 0201 	ands.w	r2, r2, #1
    bf2e:	d103      	bne.n	bf38 <regulator_fixed_disable+0x12>
	return gpio_pin_set(spec->port, spec->pin, value);
    bf30:	7b19      	ldrb	r1, [r3, #12]
    bf32:	6898      	ldr	r0, [r3, #8]
    bf34:	f7ff bfc5 	b.w	bec2 <gpio_pin_set>
}
    bf38:	2000      	movs	r0, #0
    bf3a:	4770      	bx	lr

0000bf3c <k_sem_give>:
	z_impl_k_sem_give(sem);
    bf3c:	f7fd ba96 	b.w	946c <z_impl_k_sem_give>

0000bf40 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
    bf40:	b918      	cbnz	r0, bf4a <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
    bf42:	f101 0020 	add.w	r0, r1, #32
    bf46:	f7ff bff9 	b.w	bf3c <k_sem_give>
}
    bf4a:	4770      	bx	lr

0000bf4c <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    bf4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bf50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bf54:	3010      	adds	r0, #16
    bf56:	f7fd baa9 	b.w	94ac <z_impl_k_sem_take>

0000bf5a <qspi_trans_lock.isra.0>:
    bf5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bf5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bf62:	f7fd baa3 	b.w	94ac <z_impl_k_sem_take>

0000bf66 <qspi_send_cmd>:
{
    bf66:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (cmd->tx_buf) {
    bf68:	684c      	ldr	r4, [r1, #4]
{
    bf6a:	4605      	mov	r5, r0
	if (cmd->tx_buf) {
    bf6c:	b36c      	cbz	r4, bfca <qspi_send_cmd+0x64>
		tx_buf = cmd->tx_buf->buf;
    bf6e:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
    bf72:	6888      	ldr	r0, [r1, #8]
    bf74:	b358      	cbz	r0, bfce <qspi_send_cmd+0x68>
		rx_len = cmd->rx_buf->len;
    bf76:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
    bf7a:	b348      	cbz	r0, bfd0 <qspi_send_cmd+0x6a>
    bf7c:	b343      	cbz	r3, bfd0 <qspi_send_cmd+0x6a>
		if (rx_len != tx_len) {
    bf7e:	4298      	cmp	r0, r3
    bf80:	d129      	bne.n	bfd6 <qspi_send_cmd+0x70>
		xfer_len += tx_len;
    bf82:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    bf84:	2b09      	cmp	r3, #9
    bf86:	d826      	bhi.n	bfd6 <qspi_send_cmd+0x70>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    bf88:	f88d 3001 	strb.w	r3, [sp, #1]
    bf8c:	f240 1301 	movw	r3, #257	; 0x101
    bf90:	f8ad 3002 	strh.w	r3, [sp, #2]
    bf94:	2300      	movs	r3, #0
    bf96:	7809      	ldrb	r1, [r1, #0]
	qspi_lock(dev);
    bf98:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    bf9a:	f88d 3004 	strb.w	r3, [sp, #4]
    bf9e:	f88d 1000 	strb.w	r1, [sp]
    bfa2:	f88d 2005 	strb.w	r2, [sp, #5]
	qspi_lock(dev);
    bfa6:	f7ff ffd1 	bl	bf4c <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
    bfaa:	4621      	mov	r1, r4
    bfac:	4632      	mov	r2, r6
    bfae:	4668      	mov	r0, sp
    bfb0:	f7fb ff66 	bl	7e80 <nrfx_qspi_cinstr_xfer>
    bfb4:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
    bfb6:	6928      	ldr	r0, [r5, #16]
    bfb8:	3010      	adds	r0, #16
    bfba:	f7ff ffbf 	bl	bf3c <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
    bfbe:	4620      	mov	r0, r4
}
    bfc0:	b002      	add	sp, #8
    bfc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
    bfc6:	f7f9 bb9f 	b.w	5708 <qspi_get_zephyr_ret_code>
	size_t tx_len = 0;
    bfca:	4623      	mov	r3, r4
    bfcc:	e7d1      	b.n	bf72 <qspi_send_cmd+0xc>
	void *rx_buf = NULL;
    bfce:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
    bfd0:	3301      	adds	r3, #1
    bfd2:	4403      	add	r3, r0
    bfd4:	e7d6      	b.n	bf84 <qspi_send_cmd+0x1e>
}
    bfd6:	f06f 0015 	mvn.w	r0, #21
    bfda:	b002      	add	sp, #8
    bfdc:	bd70      	pop	{r4, r5, r6, pc}

0000bfde <qspi_nor_write_protection_set>:
{
    bfde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
    bfe0:	2200      	movs	r2, #0
    bfe2:	4291      	cmp	r1, r2
    bfe4:	bf0c      	ite	eq
    bfe6:	2306      	moveq	r3, #6
    bfe8:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    bfea:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
    bfec:	e9cd 2201 	strd	r2, r2, [sp, #4]
    bff0:	9203      	str	r2, [sp, #12]
    bff2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    bff6:	f7ff ffb6 	bl	bf66 <qspi_send_cmd>
		ret = -EIO;
    bffa:	2800      	cmp	r0, #0
}
    bffc:	bf18      	it	ne
    bffe:	f06f 0004 	mvnne.w	r0, #4
    c002:	b005      	add	sp, #20
    c004:	f85d fb04 	ldr.w	pc, [sp], #4

0000c008 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
    c008:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
    c00a:	23ff      	movs	r3, #255	; 0xff
    c00c:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
    c010:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
    c014:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
    c016:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
    c018:	2301      	movs	r3, #1
    c01a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c01e:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
    c020:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    c022:	f88d 300c 	strb.w	r3, [sp, #12]
    c026:	ab01      	add	r3, sp, #4
    c028:	9204      	str	r2, [sp, #16]
    c02a:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
    c02c:	f7ff ff9b 	bl	bf66 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
    c030:	2800      	cmp	r0, #0
    c032:	bfa8      	it	ge
    c034:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
    c038:	b007      	add	sp, #28
    c03a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c03e <is_regular_addr_valid>:
{
    c03e:	b538      	push	{r3, r4, r5, lr}
    c040:	4605      	mov	r5, r0
    c042:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    c044:	f001 fe75 	bl	dd32 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    c048:	2d00      	cmp	r5, #0
    c04a:	db07      	blt.n	c05c <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    c04c:	42a8      	cmp	r0, r5
    c04e:	d905      	bls.n	c05c <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    c050:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    c052:	4284      	cmp	r4, r0
    c054:	bf8c      	ite	hi
    c056:	2000      	movhi	r0, #0
    c058:	2001      	movls	r0, #1
}
    c05a:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    c05c:	2000      	movs	r0, #0
    c05e:	e7fc      	b.n	c05a <is_regular_addr_valid+0x1c>

0000c060 <flash_nrf_read>:
{
    c060:	b570      	push	{r4, r5, r6, lr}
    c062:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    c064:	4619      	mov	r1, r3
    c066:	4628      	mov	r0, r5
{
    c068:	4616      	mov	r6, r2
    c06a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    c06c:	f7ff ffe7 	bl	c03e <is_regular_addr_valid>
    c070:	b138      	cbz	r0, c082 <flash_nrf_read+0x22>
	if (!len) {
    c072:	b124      	cbz	r4, c07e <flash_nrf_read+0x1e>
	memcpy(data, (void *)addr, len);
    c074:	4622      	mov	r2, r4
    c076:	4629      	mov	r1, r5
    c078:	4630      	mov	r0, r6
    c07a:	f7ff fd83 	bl	bb84 <memcpy>
		return 0;
    c07e:	2000      	movs	r0, #0
}
    c080:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c082:	f06f 0015 	mvn.w	r0, #21
    c086:	e7fb      	b.n	c080 <flash_nrf_read+0x20>

0000c088 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    c088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c08a:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    c08c:	2300      	movs	r3, #0
{
    c08e:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
    c090:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
    c092:	6023      	str	r3, [r4, #0]
	info->index = 0U;
    c094:	60a3      	str	r3, [r4, #8]
{
    c096:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
    c098:	6913      	ldr	r3, [r2, #16]
    c09a:	4669      	mov	r1, sp
    c09c:	aa01      	add	r2, sp, #4
    c09e:	4798      	blx	r3

	while (layout_size--) {
    c0a0:	9b01      	ldr	r3, [sp, #4]
    c0a2:	1e5a      	subs	r2, r3, #1
    c0a4:	9201      	str	r2, [sp, #4]
    c0a6:	b91b      	cbnz	r3, c0b0 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    c0a8:	f06f 0015 	mvn.w	r0, #21
}
    c0ac:	b003      	add	sp, #12
    c0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
    c0b0:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
    c0b2:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
    c0b4:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
    c0b6:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
    c0b8:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
    c0ba:	b985      	cbnz	r5, c0de <flash_get_page_info+0x56>
			index_jmp = index - info->index;
    c0bc:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    c0be:	f8d0 c000 	ldr.w	ip, [r0]
    c0c2:	4563      	cmp	r3, ip
    c0c4:	bf28      	it	cs
    c0c6:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
    c0c8:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
    c0cc:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
    c0ce:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
    c0d0:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    c0d2:	6802      	ldr	r2, [r0, #0]
    c0d4:	429a      	cmp	r2, r3
    c0d6:	d806      	bhi.n	c0e6 <flash_get_page_info+0x5e>
		layout++;
    c0d8:	3008      	adds	r0, #8
    c0da:	9000      	str	r0, [sp, #0]
    c0dc:	e7e0      	b.n	c0a0 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
    c0de:	1a6b      	subs	r3, r5, r1
    c0e0:	fbb3 f3f7 	udiv	r3, r3, r7
    c0e4:	e7eb      	b.n	c0be <flash_get_page_info+0x36>
			return 0;
    c0e6:	2000      	movs	r0, #0
    c0e8:	e7e0      	b.n	c0ac <flash_get_page_info+0x24>

0000c0ea <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    c0ea:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    c0ec:	2200      	movs	r2, #0
    c0ee:	f7ff bfcb 	b.w	c088 <flash_get_page_info>

0000c0f2 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    c0f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    c0f6:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    c0f8:	6883      	ldr	r3, [r0, #8]
{
    c0fa:	b086      	sub	sp, #24
    c0fc:	4688      	mov	r8, r1
    c0fe:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    c100:	691b      	ldr	r3, [r3, #16]
    c102:	aa02      	add	r2, sp, #8
    c104:	a901      	add	r1, sp, #4
    c106:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    c108:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    c10a:	4625      	mov	r5, r4
    c10c:	9b02      	ldr	r3, [sp, #8]
    c10e:	42ab      	cmp	r3, r5
    c110:	d802      	bhi.n	c118 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    c112:	b006      	add	sp, #24
    c114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    c118:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    c11a:	9f01      	ldr	r7, [sp, #4]
    c11c:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    c120:	687b      	ldr	r3, [r7, #4]
    c122:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    c124:	683a      	ldr	r2, [r7, #0]
    c126:	eb0a 0306 	add.w	r3, sl, r6
    c12a:	42b2      	cmp	r2, r6
    c12c:	d802      	bhi.n	c134 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    c12e:	469a      	mov	sl, r3
    c130:	3501      	adds	r5, #1
    c132:	e7eb      	b.n	c10c <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    c134:	4649      	mov	r1, r9
			page_info.start_offset = off;
    c136:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    c138:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    c13a:	a803      	add	r0, sp, #12
    c13c:	47c0      	blx	r8
    c13e:	2800      	cmp	r0, #0
    c140:	d0e7      	beq.n	c112 <flash_page_foreach+0x20>
			off += page_info.size;
    c142:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    c144:	3601      	adds	r6, #1
			off += page_info.size;
    c146:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    c148:	e7ec      	b.n	c124 <flash_page_foreach+0x32>

0000c14a <event_clear>:
    c14a:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c14c:	f100 0350 	add.w	r3, r0, #80	; 0x50
    c150:	009b      	lsls	r3, r3, #2
    c152:	b29b      	uxth	r3, r3
    c154:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    c158:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c15c:	601a      	str	r2, [r3, #0]
    c15e:	681b      	ldr	r3, [r3, #0]
}
    c160:	4770      	bx	lr

0000c162 <sys_clock_cycle_get_32>:
{
    c162:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    c164:	f7f9 ff22 	bl	5fac <z_nrf_rtc_timer_read>
}
    c168:	bd08      	pop	{r3, pc}

0000c16a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    c16a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    c16c:	6843      	ldr	r3, [r0, #4]
    c16e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    c170:	7a05      	ldrb	r5, [r0, #8]
    c172:	6844      	ldr	r4, [r0, #4]
    c174:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    c178:	42a3      	cmp	r3, r4
    c17a:	d302      	bcc.n	c182 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    c17c:	f06f 0001 	mvn.w	r0, #1
}
    c180:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    c182:	795c      	ldrb	r4, [r3, #5]
    c184:	428c      	cmp	r4, r1
    c186:	d001      	beq.n	c18c <pinctrl_lookup_state+0x22>
		(*state)++;
    c188:	3308      	adds	r3, #8
    c18a:	e7f0      	b.n	c16e <pinctrl_lookup_state+0x4>
			return 0;
    c18c:	2000      	movs	r0, #0
    c18e:	e7f7      	b.n	c180 <pinctrl_lookup_state+0x16>

0000c190 <boot_perform_update_hook>:
}
    c190:	2001      	movs	r0, #1
    c192:	4770      	bx	lr

0000c194 <boot_read_swap_state_primary_slot_hook>:
	if (image_index == 1) {
    c194:	2801      	cmp	r0, #1
		state->magic = BOOT_MAGIC_UNSET;
    c196:	bf01      	itttt	eq
    c198:	2303      	moveq	r3, #3
		state->swap_type = BOOT_SWAP_TYPE_NONE;
    c19a:	7048      	strbeq	r0, [r1, #1]
		state->image_num = image_index;
    c19c:	7108      	strbeq	r0, [r1, #4]
		state->magic = BOOT_MAGIC_UNSET;
    c19e:	700b      	strbeq	r3, [r1, #0]
		return 0;
    c1a0:	bf05      	ittet	eq
    c1a2:	2000      	moveq	r0, #0
		state->copy_done = BOOT_FLAG_UNSET;
    c1a4:	708b      	strbeq	r3, [r1, #2]
	return BOOT_HOOK_REGULAR;
    c1a6:	2001      	movne	r0, #1
		state->image_ok = BOOT_FLAG_UNSET;
    c1a8:	70cb      	strbeq	r3, [r1, #3]
}
    c1aa:	4770      	bx	lr

0000c1ac <boot_copy_region_post_hook>:

int boot_copy_region_post_hook(int img_index, const struct flash_area *area,
		size_t size)
{
	if (img_index == NET_CORE_SECONDARY_SLOT) {
    c1ac:	2801      	cmp	r0, #1
    c1ae:	d101      	bne.n	c1b4 <boot_copy_region_post_hook+0x8>
		return network_core_update(true);
    c1b0:	f7fa ba12 	b.w	65d8 <network_core_update>
	}

	return 0;
}
    c1b4:	2000      	movs	r0, #0
    c1b6:	4770      	bx	lr

0000c1b8 <boot_serial_uploaded_hook>:

int boot_serial_uploaded_hook(int img_index, const struct flash_area *area,
		size_t size)
{
	if (img_index == NET_CORE_VIRTUAL_PRIMARY_SLOT) {
    c1b8:	2803      	cmp	r0, #3
		return network_core_update(false);
    c1ba:	f04f 0000 	mov.w	r0, #0
	if (img_index == NET_CORE_VIRTUAL_PRIMARY_SLOT) {
    c1be:	d101      	bne.n	c1c4 <boot_serial_uploaded_hook+0xc>
		return network_core_update(false);
    c1c0:	f7fa ba0a 	b.w	65d8 <network_core_update>
	}

	return 0;
}
    c1c4:	4770      	bx	lr

0000c1c6 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    c1c6:	f7fd bfad 	b.w	a124 <nrf_cc3xx_platform_init_no_rng>

0000c1ca <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    c1ca:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    c1cc:	f7f6 fee0 	bl	2f90 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    c1d0:	f7f6 ffc6 	bl	3160 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    c1d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    c1d8:	f7fd bfa4 	b.w	a124 <nrf_cc3xx_platform_init_no_rng>

0000c1dc <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    c1dc:	6880      	ldr	r0, [r0, #8]
    c1de:	3818      	subs	r0, #24
    c1e0:	f020 0007 	bic.w	r0, r0, #7
}
    c1e4:	3810      	subs	r0, #16
    c1e6:	4770      	bx	lr

0000c1e8 <boot_magic_compatible_check>:
    switch (tbl_val) {
    c1e8:	2804      	cmp	r0, #4
    c1ea:	d009      	beq.n	c200 <boot_magic_compatible_check+0x18>
    c1ec:	2805      	cmp	r0, #5
    c1ee:	d103      	bne.n	c1f8 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    c1f0:	1e48      	subs	r0, r1, #1
    c1f2:	bf18      	it	ne
    c1f4:	2001      	movne	r0, #1
    c1f6:	4770      	bx	lr
        return tbl_val == val;
    c1f8:	1a43      	subs	r3, r0, r1
    c1fa:	4258      	negs	r0, r3
    c1fc:	4158      	adcs	r0, r3
    c1fe:	4770      	bx	lr
    switch (tbl_val) {
    c200:	2001      	movs	r0, #1
}
    c202:	4770      	bx	lr

0000c204 <bootutil_buffer_is_erased>:
{
    c204:	b538      	push	{r3, r4, r5, lr}
    c206:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    c208:	460c      	mov	r4, r1
    c20a:	b161      	cbz	r1, c226 <bootutil_buffer_is_erased+0x22>
    c20c:	b15a      	cbz	r2, c226 <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    c20e:	f7ff f953 	bl	b4b8 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    c212:	4621      	mov	r1, r4
    c214:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    c216:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21a:	4283      	cmp	r3, r0
    c21c:	d103      	bne.n	c226 <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    c21e:	42a9      	cmp	r1, r5
    c220:	d1f9      	bne.n	c216 <bootutil_buffer_is_erased+0x12>
    return true;
    c222:	2001      	movs	r0, #1
}
    c224:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    c226:	2000      	movs	r0, #0
    c228:	e7fc      	b.n	c224 <bootutil_buffer_is_erased+0x20>

0000c22a <boot_read_flag>:
{
    c22a:	b538      	push	{r3, r4, r5, lr}
    c22c:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    c22e:	2301      	movs	r3, #1
{
    c230:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    c232:	4622      	mov	r2, r4
{
    c234:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    c236:	f7ff f8fa 	bl	b42e <flash_area_read>
    if (rc < 0) {
    c23a:	2800      	cmp	r0, #0
    c23c:	db0f      	blt.n	c25e <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    c23e:	2201      	movs	r2, #1
    c240:	4621      	mov	r1, r4
    c242:	4628      	mov	r0, r5
    c244:	f7ff ffde 	bl	c204 <bootutil_buffer_is_erased>
    c248:	b938      	cbnz	r0, c25a <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    c24a:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    c24c:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    c24e:	bf14      	ite	ne
    c250:	2302      	movne	r3, #2
    c252:	2301      	moveq	r3, #1
    c254:	2000      	movs	r0, #0
    c256:	7023      	strb	r3, [r4, #0]
}
    c258:	bd38      	pop	{r3, r4, r5, pc}
    c25a:	2303      	movs	r3, #3
    c25c:	e7fa      	b.n	c254 <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    c25e:	2001      	movs	r0, #1
    c260:	e7fa      	b.n	c258 <boot_read_flag+0x2e>

0000c262 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    c262:	6882      	ldr	r2, [r0, #8]
    c264:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    c266:	f022 0207 	bic.w	r2, r2, #7
    c26a:	f7ff bfde 	b.w	c22a <boot_read_flag>

0000c26e <boot_read_swap_state_by_id>:
{
    c26e:	b513      	push	{r0, r1, r4, lr}
    c270:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    c272:	b2c0      	uxtb	r0, r0
    c274:	a901      	add	r1, sp, #4
    c276:	f7f6 fe33 	bl	2ee0 <flash_area_open>
    if (rc != 0) {
    c27a:	b950      	cbnz	r0, c292 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    c27c:	4621      	mov	r1, r4
    c27e:	9801      	ldr	r0, [sp, #4]
    c280:	f7fa f9f2 	bl	6668 <boot_read_swap_state>
    c284:	4604      	mov	r4, r0
    flash_area_close(fap);
    c286:	9801      	ldr	r0, [sp, #4]
    c288:	f7ff f8d0 	bl	b42c <flash_area_close>
}
    c28c:	4620      	mov	r0, r4
    c28e:	b002      	add	sp, #8
    c290:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    c292:	2401      	movs	r4, #1
    c294:	e7fa      	b.n	c28c <boot_read_swap_state_by_id+0x1e>

0000c296 <_mbedtls_init>:
#if defined(CONFIG_MBEDTLS_DEBUG_LEVEL)
	mbedtls_debug_set_threshold(CONFIG_MBEDTLS_DEBUG_LEVEL);
#endif

	return 0;
}
    c296:	2000      	movs	r0, #0
    c298:	4770      	bx	lr

0000c29a <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    c29a:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    c29c:	6803      	ldr	r3, [r0, #0]
    c29e:	1acd      	subs	r5, r1, r3
    c2a0:	2d00      	cmp	r5, #0
    c2a2:	dc02      	bgt.n	c2aa <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    c2a4:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    c2a8:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    c2aa:	f993 6000 	ldrsb.w	r6, [r3]
    c2ae:	781c      	ldrb	r4, [r3, #0]
    c2b0:	2e00      	cmp	r6, #0
    c2b2:	db0a      	blt.n	c2ca <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    c2b4:	1c5c      	adds	r4, r3, #1
    c2b6:	6004      	str	r4, [r0, #0]
    c2b8:	781b      	ldrb	r3, [r3, #0]
    c2ba:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    c2bc:	6803      	ldr	r3, [r0, #0]
    c2be:	1ac9      	subs	r1, r1, r3
    c2c0:	6813      	ldr	r3, [r2, #0]
    c2c2:	428b      	cmp	r3, r1
    c2c4:	d8ee      	bhi.n	c2a4 <mbedtls_asn1_get_len+0xa>
    return( 0 );
    c2c6:	2000      	movs	r0, #0
    c2c8:	e7ee      	b.n	c2a8 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    c2ca:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    c2ce:	3c01      	subs	r4, #1
    c2d0:	2c03      	cmp	r4, #3
    c2d2:	d82b      	bhi.n	c32c <mbedtls_asn1_get_len+0x92>
    c2d4:	e8df f004 	tbb	[pc, r4]
    c2d8:	21140a02 	.word	0x21140a02
            if( ( end - *p ) < 2 )
    c2dc:	2d01      	cmp	r5, #1
    c2de:	d0e1      	beq.n	c2a4 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    c2e0:	785b      	ldrb	r3, [r3, #1]
    c2e2:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    c2e4:	6803      	ldr	r3, [r0, #0]
    c2e6:	3302      	adds	r3, #2
            (*p) += 5;
    c2e8:	6003      	str	r3, [r0, #0]
            break;
    c2ea:	e7e7      	b.n	c2bc <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    c2ec:	2d02      	cmp	r5, #2
    c2ee:	ddd9      	ble.n	c2a4 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    c2f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    c2f4:	ba5b      	rev16	r3, r3
    c2f6:	b29b      	uxth	r3, r3
    c2f8:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    c2fa:	6803      	ldr	r3, [r0, #0]
    c2fc:	3303      	adds	r3, #3
    c2fe:	e7f3      	b.n	c2e8 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    c300:	2d03      	cmp	r5, #3
    c302:	ddcf      	ble.n	c2a4 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    c304:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    c306:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    c308:	0224      	lsls	r4, r4, #8
    c30a:	78db      	ldrb	r3, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
    c30c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    c310:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    c312:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    c314:	6803      	ldr	r3, [r0, #0]
    c316:	3304      	adds	r3, #4
    c318:	e7e6      	b.n	c2e8 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    c31a:	2d04      	cmp	r5, #4
    c31c:	ddc2      	ble.n	c2a4 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    c31e:	f8d3 3001 	ldr.w	r3, [r3, #1]
    c322:	ba1b      	rev	r3, r3
    c324:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    c326:	6803      	ldr	r3, [r0, #0]
    c328:	3305      	adds	r3, #5
    c32a:	e7dd      	b.n	c2e8 <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    c32c:	f06f 0063 	mvn.w	r0, #99	; 0x63
    c330:	e7ba      	b.n	c2a8 <mbedtls_asn1_get_len+0xe>

0000c332 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    c332:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    c334:	6804      	ldr	r4, [r0, #0]
    c336:	1b0e      	subs	r6, r1, r4
    c338:	2e00      	cmp	r6, #0
    c33a:	dd07      	ble.n	c34c <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    c33c:	7826      	ldrb	r6, [r4, #0]
    c33e:	429e      	cmp	r6, r3
    c340:	d108      	bne.n	c354 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    c342:	3401      	adds	r4, #1
    c344:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    c346:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    c348:	f7ff bfa7 	b.w	c29a <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    c34c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    c350:	bc70      	pop	{r4, r5, r6}
    c352:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    c354:	f06f 0061 	mvn.w	r0, #97	; 0x61
    c358:	e7fa      	b.n	c350 <mbedtls_asn1_get_tag+0x1e>

0000c35a <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    c35a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    c35c:	2302      	movs	r3, #2
{
    c35e:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    c360:	aa01      	add	r2, sp, #4
{
    c362:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    c364:	f7ff ffe5 	bl	c332 <mbedtls_asn1_get_tag>
    c368:	b940      	cbnz	r0, c37c <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    c36a:	9e01      	ldr	r6, [sp, #4]
    c36c:	4628      	mov	r0, r5
    c36e:	4632      	mov	r2, r6
    c370:	6821      	ldr	r1, [r4, #0]
    c372:	f000 fb18 	bl	c9a6 <mbedtls_mpi_read_binary>

    *p += len;
    c376:	6823      	ldr	r3, [r4, #0]
    c378:	4433      	add	r3, r6
    c37a:	6023      	str	r3, [r4, #0]

    return( ret );
}
    c37c:	b002      	add	sp, #8
    c37e:	bd70      	pop	{r4, r5, r6, pc}

0000c380 <mpi_mul_hlp>:
#endif
void mpi_mul_hlp( size_t i,
                  const mbedtls_mpi_uint *s,
                  mbedtls_mpi_uint *d,
                  mbedtls_mpi_uint b )
{
    c380:	b5f0      	push	{r4, r5, r6, r7, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    c382:	4684      	mov	ip, r0
{
    c384:	4617      	mov	r7, r2
    c386:	460e      	mov	r6, r1
    c388:	4614      	mov	r4, r2
    mbedtls_mpi_uint c = 0, t = 0;
    c38a:	2500      	movs	r5, #0
    for( ; i >= 16; i -= 16 )
    c38c:	f1bc 0f0f 	cmp.w	ip, #15
    c390:	f106 0640 	add.w	r6, r6, #64	; 0x40
    c394:	f104 0440 	add.w	r4, r4, #64	; 0x40
    c398:	d877      	bhi.n	c48a <mpi_mul_hlp+0x10a>
    c39a:	f06f 020f 	mvn.w	r2, #15
    c39e:	0904      	lsrs	r4, r0, #4
    c3a0:	fb02 0004 	mla	r0, r2, r4, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    c3a4:	2807      	cmp	r0, #7
    c3a6:	ea4f 1c84 	mov.w	ip, r4, lsl #6
    c3aa:	eb01 1684 	add.w	r6, r1, r4, lsl #6
    c3ae:	eb07 1484 	add.w	r4, r7, r4, lsl #6
    c3b2:	d95d      	bls.n	c470 <mpi_mul_hlp+0xf0>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    c3b4:	f851 100c 	ldr.w	r1, [r1, ip]
    for( ; i >= 8; i -= 8 )
    c3b8:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    c3ba:	fba3 1201 	umull	r1, r2, r3, r1
    c3be:	1869      	adds	r1, r5, r1
    c3c0:	f857 500c 	ldr.w	r5, [r7, ip]
    c3c4:	f142 0200 	adc.w	r2, r2, #0
    c3c8:	1949      	adds	r1, r1, r5
    c3ca:	f847 100c 	str.w	r1, [r7, ip]
    c3ce:	6871      	ldr	r1, [r6, #4]
    c3d0:	f142 0200 	adc.w	r2, r2, #0
    c3d4:	fba3 5101 	umull	r5, r1, r3, r1
    c3d8:	1952      	adds	r2, r2, r5
    c3da:	6865      	ldr	r5, [r4, #4]
    c3dc:	f141 0100 	adc.w	r1, r1, #0
    c3e0:	1952      	adds	r2, r2, r5
    c3e2:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
    c3e4:	68b2      	ldr	r2, [r6, #8]
        MULADDC_CORE   MULADDC_CORE
    c3e6:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    c3ea:	fba3 5202 	umull	r5, r2, r3, r2
    c3ee:	1949      	adds	r1, r1, r5
    c3f0:	68a5      	ldr	r5, [r4, #8]
    c3f2:	f142 0200 	adc.w	r2, r2, #0
    c3f6:	1949      	adds	r1, r1, r5
    c3f8:	60a1      	str	r1, [r4, #8]
    c3fa:	68f1      	ldr	r1, [r6, #12]
    c3fc:	f142 0200 	adc.w	r2, r2, #0
    c400:	fba3 5101 	umull	r5, r1, r3, r1
    c404:	1952      	adds	r2, r2, r5
    c406:	68e5      	ldr	r5, [r4, #12]
    c408:	f141 0100 	adc.w	r1, r1, #0
    c40c:	1952      	adds	r2, r2, r5
    c40e:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
    c410:	6932      	ldr	r2, [r6, #16]
        MULADDC_CORE   MULADDC_CORE
    c412:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    c416:	fba3 5202 	umull	r5, r2, r3, r2
    c41a:	1949      	adds	r1, r1, r5
    c41c:	6925      	ldr	r5, [r4, #16]
    c41e:	f142 0200 	adc.w	r2, r2, #0
    c422:	1949      	adds	r1, r1, r5
    c424:	6121      	str	r1, [r4, #16]
    c426:	6971      	ldr	r1, [r6, #20]
    c428:	f142 0200 	adc.w	r2, r2, #0
    c42c:	fba3 5101 	umull	r5, r1, r3, r1
    c430:	1952      	adds	r2, r2, r5
    c432:	6965      	ldr	r5, [r4, #20]
    c434:	f141 0100 	adc.w	r1, r1, #0
    c438:	1952      	adds	r2, r2, r5
    c43a:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
    c43c:	69b2      	ldr	r2, [r6, #24]
        MULADDC_CORE   MULADDC_CORE
    c43e:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    c442:	fba3 5202 	umull	r5, r2, r3, r2
    c446:	1949      	adds	r1, r1, r5
    c448:	69a5      	ldr	r5, [r4, #24]
    c44a:	f142 0200 	adc.w	r2, r2, #0
    c44e:	1949      	adds	r1, r1, r5
    c450:	61a1      	str	r1, [r4, #24]
    c452:	69f1      	ldr	r1, [r6, #28]
    c454:	f142 0200 	adc.w	r2, r2, #0
    c458:	fba3 1501 	umull	r1, r5, r3, r1
    c45c:	1852      	adds	r2, r2, r1
    c45e:	69e1      	ldr	r1, [r4, #28]
    c460:	f145 0500 	adc.w	r5, r5, #0
    c464:	1852      	adds	r2, r2, r1
    c466:	61e2      	str	r2, [r4, #28]
    c468:	f145 0500 	adc.w	r5, r5, #0
    c46c:	3420      	adds	r4, #32
    c46e:	3620      	adds	r6, #32
    c470:	4627      	mov	r7, r4
    c472:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    c476:	eb06 0080 	add.w	r0, r6, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    c47a:	42b0      	cmp	r0, r6
    c47c:	f040 8106 	bne.w	c68c <mpi_mul_hlp+0x30c>
    c480:	4464      	add	r4, ip
    }
#endif /* MULADDC_HUIT */

    t++;

    while( c != 0 )
    c482:	2d00      	cmp	r5, #0
    c484:	f040 8110 	bne.w	c6a8 <mpi_mul_hlp+0x328>
    {
        *d += c; c = ( *d < c ); d++;
    }
}
    c488:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MULADDC_CORE   MULADDC_CORE
    c48a:	f856 2c40 	ldr.w	r2, [r6, #-64]
    for( ; i >= 16; i -= 16 )
    c48e:	f1ac 0c10 	sub.w	ip, ip, #16
        MULADDC_CORE   MULADDC_CORE
    c492:	fba3 e202 	umull	lr, r2, r3, r2
    c496:	eb15 0e0e 	adds.w	lr, r5, lr
    c49a:	f854 5c40 	ldr.w	r5, [r4, #-64]
    c49e:	f142 0200 	adc.w	r2, r2, #0
    c4a2:	eb15 050e 	adds.w	r5, r5, lr
    c4a6:	f844 5c40 	str.w	r5, [r4, #-64]
    c4aa:	f856 5c3c 	ldr.w	r5, [r6, #-60]
    c4ae:	f142 0200 	adc.w	r2, r2, #0
    c4b2:	fba3 e505 	umull	lr, r5, r3, r5
    c4b6:	eb12 0e0e 	adds.w	lr, r2, lr
    c4ba:	f854 2c3c 	ldr.w	r2, [r4, #-60]
    c4be:	f145 0500 	adc.w	r5, r5, #0
    c4c2:	eb12 020e 	adds.w	r2, r2, lr
    c4c6:	f844 2c3c 	str.w	r2, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
    c4ca:	f856 2c38 	ldr.w	r2, [r6, #-56]
        MULADDC_CORE   MULADDC_CORE
    c4ce:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c4d2:	fba3 e202 	umull	lr, r2, r3, r2
    c4d6:	eb15 0e0e 	adds.w	lr, r5, lr
    c4da:	f854 5c38 	ldr.w	r5, [r4, #-56]
    c4de:	f142 0200 	adc.w	r2, r2, #0
    c4e2:	eb15 050e 	adds.w	r5, r5, lr
    c4e6:	f844 5c38 	str.w	r5, [r4, #-56]
    c4ea:	f856 5c34 	ldr.w	r5, [r6, #-52]
    c4ee:	f142 0200 	adc.w	r2, r2, #0
    c4f2:	fba3 e505 	umull	lr, r5, r3, r5
    c4f6:	eb12 0e0e 	adds.w	lr, r2, lr
    c4fa:	f854 2c34 	ldr.w	r2, [r4, #-52]
    c4fe:	f145 0500 	adc.w	r5, r5, #0
    c502:	eb12 020e 	adds.w	r2, r2, lr
    c506:	f844 2c34 	str.w	r2, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
    c50a:	f856 2c30 	ldr.w	r2, [r6, #-48]
        MULADDC_CORE   MULADDC_CORE
    c50e:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c512:	fba3 e202 	umull	lr, r2, r3, r2
    c516:	eb15 0e0e 	adds.w	lr, r5, lr
    c51a:	f854 5c30 	ldr.w	r5, [r4, #-48]
    c51e:	f142 0200 	adc.w	r2, r2, #0
    c522:	eb15 050e 	adds.w	r5, r5, lr
    c526:	f844 5c30 	str.w	r5, [r4, #-48]
    c52a:	f856 5c2c 	ldr.w	r5, [r6, #-44]
    c52e:	f142 0200 	adc.w	r2, r2, #0
    c532:	fba3 e505 	umull	lr, r5, r3, r5
    c536:	eb12 0e0e 	adds.w	lr, r2, lr
    c53a:	f854 2c2c 	ldr.w	r2, [r4, #-44]
    c53e:	f145 0500 	adc.w	r5, r5, #0
    c542:	eb12 020e 	adds.w	r2, r2, lr
    c546:	f844 2c2c 	str.w	r2, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
    c54a:	f856 2c28 	ldr.w	r2, [r6, #-40]
        MULADDC_CORE   MULADDC_CORE
    c54e:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c552:	fba3 e202 	umull	lr, r2, r3, r2
    c556:	eb15 0e0e 	adds.w	lr, r5, lr
    c55a:	f854 5c28 	ldr.w	r5, [r4, #-40]
    c55e:	f142 0200 	adc.w	r2, r2, #0
    c562:	eb15 050e 	adds.w	r5, r5, lr
    c566:	f844 5c28 	str.w	r5, [r4, #-40]
    c56a:	f856 5c24 	ldr.w	r5, [r6, #-36]
    c56e:	f142 0200 	adc.w	r2, r2, #0
    c572:	fba3 e505 	umull	lr, r5, r3, r5
    c576:	eb12 0e0e 	adds.w	lr, r2, lr
    c57a:	f854 2c24 	ldr.w	r2, [r4, #-36]
    c57e:	f145 0500 	adc.w	r5, r5, #0
    c582:	eb12 020e 	adds.w	r2, r2, lr
    c586:	f844 2c24 	str.w	r2, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
    c58a:	f856 2c20 	ldr.w	r2, [r6, #-32]
        MULADDC_CORE   MULADDC_CORE
    c58e:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c592:	fba3 e202 	umull	lr, r2, r3, r2
    c596:	eb15 0e0e 	adds.w	lr, r5, lr
    c59a:	f854 5c20 	ldr.w	r5, [r4, #-32]
    c59e:	f142 0200 	adc.w	r2, r2, #0
    c5a2:	eb15 050e 	adds.w	r5, r5, lr
    c5a6:	f844 5c20 	str.w	r5, [r4, #-32]
    c5aa:	f856 5c1c 	ldr.w	r5, [r6, #-28]
    c5ae:	f142 0200 	adc.w	r2, r2, #0
    c5b2:	fba3 e505 	umull	lr, r5, r3, r5
    c5b6:	eb12 0e0e 	adds.w	lr, r2, lr
    c5ba:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    c5be:	f145 0500 	adc.w	r5, r5, #0
    c5c2:	eb12 020e 	adds.w	r2, r2, lr
    c5c6:	f844 2c1c 	str.w	r2, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
    c5ca:	f856 2c18 	ldr.w	r2, [r6, #-24]
        MULADDC_CORE   MULADDC_CORE
    c5ce:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c5d2:	fba3 e202 	umull	lr, r2, r3, r2
    c5d6:	eb15 0e0e 	adds.w	lr, r5, lr
    c5da:	f854 5c18 	ldr.w	r5, [r4, #-24]
    c5de:	f142 0200 	adc.w	r2, r2, #0
    c5e2:	eb15 050e 	adds.w	r5, r5, lr
    c5e6:	f844 5c18 	str.w	r5, [r4, #-24]
    c5ea:	f856 5c14 	ldr.w	r5, [r6, #-20]
    c5ee:	f142 0200 	adc.w	r2, r2, #0
    c5f2:	fba3 e505 	umull	lr, r5, r3, r5
    c5f6:	eb12 0e0e 	adds.w	lr, r2, lr
    c5fa:	f854 2c14 	ldr.w	r2, [r4, #-20]
    c5fe:	f145 0500 	adc.w	r5, r5, #0
    c602:	eb12 020e 	adds.w	r2, r2, lr
    c606:	f844 2c14 	str.w	r2, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    c60a:	f856 2c10 	ldr.w	r2, [r6, #-16]
        MULADDC_CORE   MULADDC_CORE
    c60e:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c612:	fba3 e202 	umull	lr, r2, r3, r2
    c616:	eb15 0e0e 	adds.w	lr, r5, lr
    c61a:	f854 5c10 	ldr.w	r5, [r4, #-16]
    c61e:	f142 0200 	adc.w	r2, r2, #0
    c622:	eb15 050e 	adds.w	r5, r5, lr
    c626:	f844 5c10 	str.w	r5, [r4, #-16]
    c62a:	f856 5c0c 	ldr.w	r5, [r6, #-12]
    c62e:	f142 0200 	adc.w	r2, r2, #0
    c632:	fba3 e505 	umull	lr, r5, r3, r5
    c636:	eb12 0e0e 	adds.w	lr, r2, lr
    c63a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    c63e:	f145 0500 	adc.w	r5, r5, #0
    c642:	eb12 020e 	adds.w	r2, r2, lr
    c646:	f844 2c0c 	str.w	r2, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    c64a:	f856 2c08 	ldr.w	r2, [r6, #-8]
        MULADDC_CORE   MULADDC_CORE
    c64e:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c652:	fba3 e202 	umull	lr, r2, r3, r2
    c656:	eb15 0e0e 	adds.w	lr, r5, lr
    c65a:	f854 5c08 	ldr.w	r5, [r4, #-8]
    c65e:	f142 0200 	adc.w	r2, r2, #0
    c662:	eb15 050e 	adds.w	r5, r5, lr
    c666:	f844 5c08 	str.w	r5, [r4, #-8]
    c66a:	f856 5c04 	ldr.w	r5, [r6, #-4]
    c66e:	f142 0200 	adc.w	r2, r2, #0
    c672:	fba3 5e05 	umull	r5, lr, r3, r5
    c676:	1952      	adds	r2, r2, r5
    c678:	f854 5c04 	ldr.w	r5, [r4, #-4]
    c67c:	f14e 0e00 	adc.w	lr, lr, #0
    c680:	18aa      	adds	r2, r5, r2
    c682:	f14e 0500 	adc.w	r5, lr, #0
    c686:	f844 2c04 	str.w	r2, [r4, #-4]
    for( ; i >= 16; i -= 16 )
    c68a:	e67f      	b.n	c38c <mpi_mul_hlp+0xc>
        MULADDC_CORE
    c68c:	f856 2b04 	ldr.w	r2, [r6], #4
    c690:	fba3 2102 	umull	r2, r1, r3, r2
    c694:	18aa      	adds	r2, r5, r2
    c696:	f141 0500 	adc.w	r5, r1, #0
    c69a:	6839      	ldr	r1, [r7, #0]
    c69c:	1889      	adds	r1, r1, r2
    c69e:	f145 0500 	adc.w	r5, r5, #0
    c6a2:	f847 1b04 	str.w	r1, [r7], #4
    for( ; i > 0; i-- )
    c6a6:	e6e8      	b.n	c47a <mpi_mul_hlp+0xfa>
        *d += c; c = ( *d < c ); d++;
    c6a8:	6823      	ldr	r3, [r4, #0]
    c6aa:	195b      	adds	r3, r3, r5
    c6ac:	bf2c      	ite	cs
    c6ae:	2501      	movcs	r5, #1
    c6b0:	2500      	movcc	r5, #0
    c6b2:	f844 3b04 	str.w	r3, [r4], #4
    c6b6:	e6e4      	b.n	c482 <mpi_mul_hlp+0x102>

0000c6b8 <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6bc:	468a      	mov	sl, r1
    c6be:	4617      	mov	r7, r2
    c6c0:	b085      	sub	sp, #20
    c6c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    c6c4:	9000      	str	r0, [sp, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    c6c6:	6862      	ldr	r2, [r4, #4]
    c6c8:	68a0      	ldr	r0, [r4, #8]
    c6ca:	2100      	movs	r1, #0
    c6cc:	0092      	lsls	r2, r2, #2
{
    c6ce:	9303      	str	r3, [sp, #12]
    memset( T->p, 0, T->n * ciL );
    c6d0:	f7ff fa63 	bl	bb9a <memset>

    d = T->p;
    n = N->n;
    c6d4:	687e      	ldr	r6, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    c6d6:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    c6da:	68a5      	ldr	r5, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    c6dc:	42b3      	cmp	r3, r6
    c6de:	bf28      	it	cs
    c6e0:	4633      	movcs	r3, r6
    d = T->p;
    c6e2:	46a9      	mov	r9, r5

    for( i = 0; i < n; i++ )
    c6e4:	f04f 0800 	mov.w	r8, #0
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    c6e8:	1c74      	adds	r4, r6, #1
    m = ( B->n < n ) ? B->n : n;
    c6ea:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    c6ec:	00a4      	lsls	r4, r4, #2
        u0 = A->p[i];
    c6ee:	9b00      	ldr	r3, [sp, #0]
    for( i = 0; i < n; i++ )
    c6f0:	45b0      	cmp	r8, r6
        u0 = A->p[i];
    c6f2:	6898      	ldr	r0, [r3, #8]
    for( i = 0; i < n; i++ )
    c6f4:	d11c      	bne.n	c730 <mpi_montmul+0x78>
    c6f6:	3c04      	subs	r4, #4
    c6f8:	4425      	add	r5, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    c6fa:	4622      	mov	r2, r4
    c6fc:	4629      	mov	r1, r5
    c6fe:	f7ff fa41 	bl	bb84 <memcpy>
    mbedtls_mpi_uint c = 0, t, z;
    c702:	2200      	movs	r2, #0
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    c704:	592b      	ldr	r3, [r5, r4]
    c706:	1f28      	subs	r0, r5, #4
    c708:	3301      	adds	r3, #1
    c70a:	512b      	str	r3, [r5, r4]
    for( i = 0; i < n; i++ )
    c70c:	4613      	mov	r3, r2
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    c70e:	f8d7 e008 	ldr.w	lr, [r7, #8]
    for( i = 0; i < n; i++ )
    c712:	429e      	cmp	r6, r3
    c714:	d12b      	bne.n	c76e <mpi_montmul+0xb6>
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    c716:	592b      	ldr	r3, [r5, r4]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    c718:	4630      	mov	r0, r6
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    c71a:	1a9b      	subs	r3, r3, r2
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    c71c:	462a      	mov	r2, r5
    c71e:	9900      	ldr	r1, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    c720:	512b      	str	r3, [r5, r4]
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    c722:	6889      	ldr	r1, [r1, #8]
    c724:	b2db      	uxtb	r3, r3
}
    c726:	b005      	add	sp, #20
    c728:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    c72c:	f000 bfe5 	b.w	d6fa <mbedtls_ct_mpi_uint_cond_assign>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    c730:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    c734:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    c738:	f8d9 3000 	ldr.w	r3, [r9]
    c73c:	6808      	ldr	r0, [r1, #0]
    c73e:	9a03      	ldr	r2, [sp, #12]
    c740:	fb00 330b 	mla	r3, r0, fp, r3
    c744:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    c746:	9801      	ldr	r0, [sp, #4]
    c748:	464a      	mov	r2, r9
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    c74a:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    c74c:	465b      	mov	r3, fp
    c74e:	f7ff fe17 	bl	c380 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    c752:	464a      	mov	r2, r9
    c754:	9b02      	ldr	r3, [sp, #8]
    c756:	4630      	mov	r0, r6
    c758:	68b9      	ldr	r1, [r7, #8]
    c75a:	f7ff fe11 	bl	c380 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    c75e:	2300      	movs	r3, #0
    c760:	f849 bb04 	str.w	fp, [r9], #4
    c764:	f849 3004 	str.w	r3, [r9, r4]
    for( i = 0; i < n; i++ )
    c768:	f108 0801 	add.w	r8, r8, #1
    c76c:	e7bf      	b.n	c6ee <mpi_montmul+0x36>
        z = ( l[i] <  c );    t = l[i] - c;
    c76e:	f850 cf04 	ldr.w	ip, [r0, #4]!
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    c772:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    c776:	ebac 0102 	sub.w	r1, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    c77a:	42b9      	cmp	r1, r7
    c77c:	bf2c      	ite	cs
    c77e:	f04f 0800 	movcs.w	r8, #0
    c782:	f04f 0801 	movcc.w	r8, #1
    c786:	1bc9      	subs	r1, r1, r7
    c788:	4594      	cmp	ip, r2
    c78a:	bf2c      	ite	cs
    c78c:	4642      	movcs	r2, r8
    c78e:	f108 0201 	addcc.w	r2, r8, #1
    c792:	6001      	str	r1, [r0, #0]
    for( i = 0; i < n; i++ )
    c794:	3301      	adds	r3, #1
    c796:	e7bc      	b.n	c712 <mpi_montmul+0x5a>

0000c798 <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    c798:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    c79a:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
    c79e:	3a01      	subs	r2, #1
    c7a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
         cur_limb_left <= cur_limb_right;
    c7a4:	4282      	cmp	r2, r0
    c7a6:	d201      	bcs.n	c7ac <mpi_bigendian_to_host.part.0+0x14>
}
    c7a8:	b002      	add	sp, #8
    c7aa:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    c7ac:	6803      	ldr	r3, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    c7ae:	2400      	movs	r4, #0
    c7b0:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    c7b2:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c7b4:	eb0d 0503 	add.w	r5, sp, r3
    c7b8:	4629      	mov	r1, r5
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    c7ba:	f815 6b01 	ldrb.w	r6, [r5], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c7be:	3b01      	subs	r3, #1
    c7c0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    c7c4:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c7c8:	d1f7      	bne.n	c7ba <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    c7ca:	6815      	ldr	r5, [r2, #0]
    c7cc:	9501      	str	r5, [sp, #4]
    mbedtls_mpi_uint tmp = 0;
    c7ce:	461d      	mov	r5, r3
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c7d0:	3301      	adds	r3, #1
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    c7d2:	f811 6b01 	ldrb.w	r6, [r1], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c7d6:	b2db      	uxtb	r3, r3
    c7d8:	2b04      	cmp	r3, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    c7da:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c7de:	d1f7      	bne.n	c7d0 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    c7e0:	f840 5b04 	str.w	r5, [r0], #4
        *cur_limb_right = tmp;
    c7e4:	f842 4904 	str.w	r4, [r2], #-4
         cur_limb_left++, cur_limb_right-- )
    c7e8:	e7dc      	b.n	c7a4 <mpi_bigendian_to_host.part.0+0xc>

0000c7ea <mbedtls_mpi_init>:
    X->n = 0;
    c7ea:	2300      	movs	r3, #0
    c7ec:	2201      	movs	r2, #1
    X->p = NULL;
    c7ee:	6083      	str	r3, [r0, #8]
    X->n = 0;
    c7f0:	e9c0 2300 	strd	r2, r3, [r0]
}
    c7f4:	4770      	bx	lr

0000c7f6 <mbedtls_mpi_free>:
{
    c7f6:	b510      	push	{r4, lr}
    if( X == NULL )
    c7f8:	4604      	mov	r4, r0
    c7fa:	b168      	cbz	r0, c818 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    c7fc:	6880      	ldr	r0, [r0, #8]
    c7fe:	b130      	cbz	r0, c80e <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    c800:	6861      	ldr	r1, [r4, #4]
    c802:	0089      	lsls	r1, r1, #2
    c804:	f7fd fd8c 	bl	a320 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    c808:	68a0      	ldr	r0, [r4, #8]
    c80a:	f7fa f97d 	bl	6b08 <mbedtls_free>
    X->n = 0;
    c80e:	2300      	movs	r3, #0
    c810:	2201      	movs	r2, #1
    c812:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    c816:	60a3      	str	r3, [r4, #8]
}
    c818:	bd10      	pop	{r4, pc}

0000c81a <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    c81a:	f242 7310 	movw	r3, #10000	; 0x2710
    c81e:	4299      	cmp	r1, r3
{
    c820:	b570      	push	{r4, r5, r6, lr}
    c822:	4604      	mov	r4, r0
    c824:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    c826:	d902      	bls.n	c82e <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    c828:	f06f 000f 	mvn.w	r0, #15
}
    c82c:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    c82e:	6843      	ldr	r3, [r0, #4]
    c830:	428b      	cmp	r3, r1
    c832:	d301      	bcc.n	c838 <mbedtls_mpi_grow+0x1e>
    return( 0 );
    c834:	2000      	movs	r0, #0
    c836:	e7f9      	b.n	c82c <mbedtls_mpi_grow+0x12>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    c838:	2104      	movs	r1, #4
    c83a:	4628      	mov	r0, r5
    c83c:	f7fa f95e 	bl	6afc <mbedtls_calloc>
    c840:	4606      	mov	r6, r0
    c842:	2800      	cmp	r0, #0
    c844:	d0f0      	beq.n	c828 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    c846:	68a1      	ldr	r1, [r4, #8]
    c848:	b159      	cbz	r1, c862 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
    c84a:	6862      	ldr	r2, [r4, #4]
    c84c:	0092      	lsls	r2, r2, #2
    c84e:	f7ff f999 	bl	bb84 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    c852:	6861      	ldr	r1, [r4, #4]
    c854:	68a0      	ldr	r0, [r4, #8]
    c856:	0089      	lsls	r1, r1, #2
    c858:	f7fd fd62 	bl	a320 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    c85c:	68a0      	ldr	r0, [r4, #8]
    c85e:	f7fa f953 	bl	6b08 <mbedtls_free>
        X->p = p;
    c862:	e9c4 5601 	strd	r5, r6, [r4, #4]
    c866:	e7e5      	b.n	c834 <mbedtls_mpi_grow+0x1a>

0000c868 <mbedtls_mpi_resize_clear>:
{
    c868:	b538      	push	{r3, r4, r5, lr}
    c86a:	4604      	mov	r4, r0
    if( limbs == 0 )
    c86c:	460d      	mov	r5, r1
    c86e:	b919      	cbnz	r1, c878 <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    c870:	f7ff ffc1 	bl	c7f6 <mbedtls_mpi_free>
}
    c874:	2000      	movs	r0, #0
    c876:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    c878:	6842      	ldr	r2, [r0, #4]
    c87a:	428a      	cmp	r2, r1
    c87c:	d107      	bne.n	c88e <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    c87e:	2100      	movs	r1, #0
    c880:	6880      	ldr	r0, [r0, #8]
    c882:	0092      	lsls	r2, r2, #2
    c884:	f7ff f989 	bl	bb9a <memset>
        X->s = 1;
    c888:	2301      	movs	r3, #1
    c88a:	6023      	str	r3, [r4, #0]
        return( 0 );
    c88c:	e7f2      	b.n	c874 <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    c88e:	f7ff ffb2 	bl	c7f6 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    c892:	4629      	mov	r1, r5
    c894:	4620      	mov	r0, r4
}
    c896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    c89a:	f7ff bfbe 	b.w	c81a <mbedtls_mpi_grow>

0000c89e <mbedtls_mpi_copy>:
    if( X == Y )
    c89e:	4288      	cmp	r0, r1
{
    c8a0:	b570      	push	{r4, r5, r6, lr}
    c8a2:	4605      	mov	r5, r0
    c8a4:	460e      	mov	r6, r1
    if( X == Y )
    c8a6:	d009      	beq.n	c8bc <mbedtls_mpi_copy+0x1e>
    if( Y->n == 0 )
    c8a8:	6849      	ldr	r1, [r1, #4]
        if( X->n != 0 )
    c8aa:	6842      	ldr	r2, [r0, #4]
    if( Y->n == 0 )
    c8ac:	b941      	cbnz	r1, c8c0 <mbedtls_mpi_copy+0x22>
        if( X->n != 0 )
    c8ae:	b12a      	cbz	r2, c8bc <mbedtls_mpi_copy+0x1e>
            X->s = 1;
    c8b0:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    c8b2:	0092      	lsls	r2, r2, #2
            X->s = 1;
    c8b4:	6003      	str	r3, [r0, #0]
            memset( X->p, 0, X->n * ciL );
    c8b6:	6880      	ldr	r0, [r0, #8]
    c8b8:	f7ff f96f 	bl	bb9a <memset>
        return( 0 );
    c8bc:	2000      	movs	r0, #0
}
    c8be:	bd70      	pop	{r4, r5, r6, pc}
    for( i = Y->n - 1; i > 0; i-- )
    c8c0:	1e4c      	subs	r4, r1, #1
    c8c2:	b984      	cbnz	r4, c8e6 <mbedtls_mpi_copy+0x48>
    X->s = Y->s;
    c8c4:	6833      	ldr	r3, [r6, #0]
    i++;
    c8c6:	3401      	adds	r4, #1
    if( X->n < i )
    c8c8:	4294      	cmp	r4, r2
    X->s = Y->s;
    c8ca:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    c8cc:	d912      	bls.n	c8f4 <mbedtls_mpi_copy+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    c8ce:	4621      	mov	r1, r4
    c8d0:	4628      	mov	r0, r5
    c8d2:	f7ff ffa2 	bl	c81a <mbedtls_mpi_grow>
    c8d6:	2800      	cmp	r0, #0
    c8d8:	d1f1      	bne.n	c8be <mbedtls_mpi_copy+0x20>
    memcpy( X->p, Y->p, i * ciL );
    c8da:	68b1      	ldr	r1, [r6, #8]
    c8dc:	68a8      	ldr	r0, [r5, #8]
    c8de:	00a2      	lsls	r2, r4, #2
    c8e0:	f7ff f950 	bl	bb84 <memcpy>
    c8e4:	e7ea      	b.n	c8bc <mbedtls_mpi_copy+0x1e>
        if( Y->p[i] != 0 )
    c8e6:	68b3      	ldr	r3, [r6, #8]
    c8e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c8ec:	2b00      	cmp	r3, #0
    c8ee:	d1e9      	bne.n	c8c4 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    c8f0:	3c01      	subs	r4, #1
    c8f2:	e7e6      	b.n	c8c2 <mbedtls_mpi_copy+0x24>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    c8f4:	68a8      	ldr	r0, [r5, #8]
    c8f6:	1b12      	subs	r2, r2, r4
    c8f8:	2100      	movs	r1, #0
    c8fa:	0092      	lsls	r2, r2, #2
    c8fc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    c900:	f7ff f94b 	bl	bb9a <memset>
    c904:	e7e9      	b.n	c8da <mbedtls_mpi_copy+0x3c>

0000c906 <mbedtls_mpi_lset>:
{
    c906:	b570      	push	{r4, r5, r6, lr}
    c908:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    c90a:	2101      	movs	r1, #1
{
    c90c:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    c90e:	f7ff ff84 	bl	c81a <mbedtls_mpi_grow>
    c912:	4605      	mov	r5, r0
    c914:	b988      	cbnz	r0, c93a <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    c916:	6862      	ldr	r2, [r4, #4]
    c918:	4601      	mov	r1, r0
    c91a:	0092      	lsls	r2, r2, #2
    c91c:	68a0      	ldr	r0, [r4, #8]
    c91e:	f7ff f93c 	bl	bb9a <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    c922:	68a3      	ldr	r3, [r4, #8]
    c924:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    c928:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    c92a:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    c92e:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    c930:	bfac      	ite	ge
    c932:	2301      	movge	r3, #1
    c934:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    c938:	6023      	str	r3, [r4, #0]
}
    c93a:	4628      	mov	r0, r5
    c93c:	bd70      	pop	{r4, r5, r6, pc}

0000c93e <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    c93e:	6843      	ldr	r3, [r0, #4]
    c940:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    c944:	bf3f      	itttt	cc
    c946:	6883      	ldrcc	r3, [r0, #8]
    c948:	094a      	lsrcc	r2, r1, #5
    c94a:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    c94e:	f001 011f 	andcc.w	r1, r1, #31
    c952:	bf3a      	itte	cc
    c954:	40c8      	lsrcc	r0, r1
    c956:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
    c95a:	2000      	movcs	r0, #0
}
    c95c:	4770      	bx	lr

0000c95e <mbedtls_mpi_bitlen>:
{
    c95e:	4602      	mov	r2, r0
    if( X->n == 0 )
    c960:	6840      	ldr	r0, [r0, #4]
    c962:	b198      	cbz	r0, c98c <mbedtls_mpi_bitlen+0x2e>
        if( X->p[i] != 0 )
    c964:	6892      	ldr	r2, [r2, #8]
    for( i = X->n - 1; i > 0; i-- )
    c966:	1e43      	subs	r3, r0, #1
    c968:	b98b      	cbnz	r3, c98e <mbedtls_mpi_bitlen+0x30>
    j = biL - mbedtls_clz( X->p[i] );
    c96a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    c96e:	2000      	movs	r0, #0
        if( x & mask ) break;
    c970:	2900      	cmp	r1, #0
    c972:	db08      	blt.n	c986 <mbedtls_mpi_bitlen+0x28>
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    c974:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    for( j = 0; j < biL; j++ )
    c978:	3001      	adds	r0, #1
    c97a:	2820      	cmp	r0, #32
        mask >>= 1;
    c97c:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    c980:	d001      	beq.n	c986 <mbedtls_mpi_bitlen+0x28>
        if( x & mask ) break;
    c982:	4211      	tst	r1, r2
    c984:	d0f8      	beq.n	c978 <mbedtls_mpi_bitlen+0x1a>
    return( ( i * biL ) + j );
    c986:	3301      	adds	r3, #1
    c988:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    c98c:	4770      	bx	lr
        if( X->p[i] != 0 )
    c98e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c992:	2900      	cmp	r1, #0
    c994:	d1e9      	bne.n	c96a <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    c996:	3b01      	subs	r3, #1
    c998:	e7e6      	b.n	c968 <mbedtls_mpi_bitlen+0xa>

0000c99a <mbedtls_mpi_size>:
{
    c99a:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    c99c:	f7ff ffdf 	bl	c95e <mbedtls_mpi_bitlen>
    c9a0:	3007      	adds	r0, #7
}
    c9a2:	08c0      	lsrs	r0, r0, #3
    c9a4:	bd08      	pop	{r3, pc}

0000c9a6 <mbedtls_mpi_read_binary>:
{
    c9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    c9aa:	f012 0403 	ands.w	r4, r2, #3
    c9ae:	bf18      	it	ne
    c9b0:	2401      	movne	r4, #1
    c9b2:	eb04 0492 	add.w	r4, r4, r2, lsr #2
{
    c9b6:	4688      	mov	r8, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    c9b8:	4621      	mov	r1, r4
{
    c9ba:	4607      	mov	r7, r0
    c9bc:	4615      	mov	r5, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    c9be:	f7ff ff53 	bl	c868 <mbedtls_mpi_resize_clear>
    c9c2:	4606      	mov	r6, r0
    c9c4:	b968      	cbnz	r0, c9e2 <mbedtls_mpi_read_binary+0x3c>
    if( buflen != 0 )
    c9c6:	b165      	cbz	r5, c9e2 <mbedtls_mpi_read_binary+0x3c>
        memcpy( Xp + overhead, buf, buflen );
    c9c8:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    c9ca:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    c9ce:	462a      	mov	r2, r5
    c9d0:	4641      	mov	r1, r8
    c9d2:	4418      	add	r0, r3
    c9d4:	f7ff f8d6 	bl	bb84 <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    c9d8:	68b8      	ldr	r0, [r7, #8]
    if( limbs == 0 )
    c9da:	b114      	cbz	r4, c9e2 <mbedtls_mpi_read_binary+0x3c>
    c9dc:	4621      	mov	r1, r4
    c9de:	f7ff fedb 	bl	c798 <mpi_bigendian_to_host.part.0>
}
    c9e2:	4630      	mov	r0, r6
    c9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c9e8 <mbedtls_mpi_write_binary>:
{
    c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9ea:	4604      	mov	r4, r0
    stored_bytes = X->n * ciL;
    c9ec:	6863      	ldr	r3, [r4, #4]
{
    c9ee:	4608      	mov	r0, r1
    if( stored_bytes < buflen )
    c9f0:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    c9f4:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    c9f8:	d91a      	bls.n	ca30 <mbedtls_mpi_write_binary+0x48>
        p = buf + buflen - stored_bytes;
    c9fa:	1b52      	subs	r2, r2, r5
    c9fc:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    c9fe:	2100      	movs	r1, #0
    ca00:	f7ff f8cb 	bl	bb9a <memset>
        p = buf + buflen - stored_bytes;
    ca04:	4630      	mov	r0, r6
    ca06:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    ca08:	2100      	movs	r1, #0
    ca0a:	1883      	adds	r3, r0, r2
    ca0c:	428a      	cmp	r2, r1
    ca0e:	d111      	bne.n	ca34 <mbedtls_mpi_write_binary+0x4c>
    return( 0 );
    ca10:	2000      	movs	r0, #0
}
    ca12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    ca14:	68a1      	ldr	r1, [r4, #8]
    ca16:	f023 0703 	bic.w	r7, r3, #3
    ca1a:	59c9      	ldr	r1, [r1, r7]
    ca1c:	f003 0603 	and.w	r6, r3, #3
    ca20:	00f6      	lsls	r6, r6, #3
    ca22:	40f1      	lsrs	r1, r6
    ca24:	b2c9      	uxtb	r1, r1
    ca26:	b989      	cbnz	r1, ca4c <mbedtls_mpi_write_binary+0x64>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    ca28:	3301      	adds	r3, #1
    ca2a:	42ab      	cmp	r3, r5
    ca2c:	d1f2      	bne.n	ca14 <mbedtls_mpi_write_binary+0x2c>
    ca2e:	e7eb      	b.n	ca08 <mbedtls_mpi_write_binary+0x20>
    ca30:	4613      	mov	r3, r2
    ca32:	e7fa      	b.n	ca2a <mbedtls_mpi_write_binary+0x42>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    ca34:	68a6      	ldr	r6, [r4, #8]
    ca36:	f021 0003 	bic.w	r0, r1, #3
    ca3a:	5830      	ldr	r0, [r6, r0]
    ca3c:	f001 0503 	and.w	r5, r1, #3
    ca40:	00ed      	lsls	r5, r5, #3
    ca42:	40e8      	lsrs	r0, r5
    ca44:	f803 0d01 	strb.w	r0, [r3, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    ca48:	3101      	adds	r1, #1
    ca4a:	e7df      	b.n	ca0c <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    ca4c:	f06f 0007 	mvn.w	r0, #7
    ca50:	e7df      	b.n	ca12 <mbedtls_mpi_write_binary+0x2a>

0000ca52 <mbedtls_mpi_shift_l>:
{
    ca52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca54:	4605      	mov	r5, r0
    ca56:	460e      	mov	r6, r1
    v0 = count / (biL    );
    ca58:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    ca5a:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    ca5e:	f7ff ff7e 	bl	c95e <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    ca62:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    ca64:	4430      	add	r0, r6
    if( X->n * biL < i )
    ca66:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    ca6a:	d805      	bhi.n	ca78 <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    ca6c:	2e1f      	cmp	r6, #31
    ca6e:	d80f      	bhi.n	ca90 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    ca70:	2f00      	cmp	r7, #0
    ca72:	d141      	bne.n	caf8 <mbedtls_mpi_shift_l+0xa6>
    ret = 0;
    ca74:	2000      	movs	r0, #0
    ca76:	e00a      	b.n	ca8e <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    ca78:	f010 011f 	ands.w	r1, r0, #31
    ca7c:	bf18      	it	ne
    ca7e:	2101      	movne	r1, #1
    ca80:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    ca84:	4628      	mov	r0, r5
    ca86:	f7ff fec8 	bl	c81a <mbedtls_mpi_grow>
    ca8a:	2800      	cmp	r0, #0
    ca8c:	d0ee      	beq.n	ca6c <mbedtls_mpi_shift_l+0x1a>
}
    ca8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    ca90:	f06f 0003 	mvn.w	r0, #3
    ca94:	686b      	ldr	r3, [r5, #4]
    ca96:	4360      	muls	r0, r4
    ca98:	4619      	mov	r1, r3
    ca9a:	009a      	lsls	r2, r3, #2
    ca9c:	42a1      	cmp	r1, r4
    ca9e:	f1a2 0204 	sub.w	r2, r2, #4
    caa2:	d80c      	bhi.n	cabe <mbedtls_mpi_shift_l+0x6c>
    caa4:	1ae2      	subs	r2, r4, r3
    caa6:	429c      	cmp	r4, r3
    caa8:	bf88      	it	hi
    caaa:	2200      	movhi	r2, #0
    caac:	4413      	add	r3, r2
            X->p[i - 1] = 0;
    caae:	2200      	movs	r2, #0
    cab0:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    cab2:	3b04      	subs	r3, #4
    cab4:	1d19      	adds	r1, r3, #4
    cab6:	d0db      	beq.n	ca70 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    cab8:	68a9      	ldr	r1, [r5, #8]
    caba:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    cabc:	e7f9      	b.n	cab2 <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    cabe:	68ae      	ldr	r6, [r5, #8]
        for( i = X->n; i > v0; i-- )
    cac0:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    cac2:	eb06 0c02 	add.w	ip, r6, r2
    cac6:	f85c c000 	ldr.w	ip, [ip, r0]
    caca:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    cace:	e7e5      	b.n	ca9c <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    cad0:	68ab      	ldr	r3, [r5, #8]
    cad2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            X->p[i] <<= t1;
    cad6:	fa01 f007 	lsl.w	r0, r1, r7
    cada:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            X->p[i] |= r0;
    cade:	68a8      	ldr	r0, [r5, #8]
    cae0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    cae4:	4313      	orrs	r3, r2
    cae6:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    caea:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    caee:	3401      	adds	r4, #1
    caf0:	686b      	ldr	r3, [r5, #4]
    caf2:	42a3      	cmp	r3, r4
    caf4:	d8ec      	bhi.n	cad0 <mbedtls_mpi_shift_l+0x7e>
    caf6:	e7bd      	b.n	ca74 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    caf8:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    cafa:	f1c7 0620 	rsb	r6, r7, #32
    cafe:	e7f7      	b.n	caf0 <mbedtls_mpi_shift_l+0x9e>

0000cb00 <mbedtls_mpi_shift_r>:
{
    cb00:	b4f0      	push	{r4, r5, r6, r7}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    cb02:	6843      	ldr	r3, [r0, #4]
    v0 = count /  biL;
    cb04:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    cb06:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    cb08:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    cb0c:	d301      	bcc.n	cb12 <mbedtls_mpi_shift_r+0x12>
    cb0e:	d109      	bne.n	cb24 <mbedtls_mpi_shift_r+0x24>
    cb10:	b11a      	cbz	r2, cb1a <mbedtls_mpi_shift_r+0x1a>
}
    cb12:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    cb14:	2100      	movs	r1, #0
    cb16:	f7ff bef6 	b.w	c906 <mbedtls_mpi_lset>
    if( v0 > 0 )
    cb1a:	291f      	cmp	r1, #31
    cb1c:	d804      	bhi.n	cb28 <mbedtls_mpi_shift_r+0x28>
}
    cb1e:	bcf0      	pop	{r4, r5, r6, r7}
    cb20:	2000      	movs	r0, #0
    cb22:	4770      	bx	lr
    if( v0 > 0 )
    cb24:	291f      	cmp	r1, #31
    cb26:	d909      	bls.n	cb3c <mbedtls_mpi_shift_r+0x3c>
{
    cb28:	2300      	movs	r3, #0
    cb2a:	00a5      	lsls	r5, r4, #2
        for( i = 0; i < X->n - v0; i++ )
    cb2c:	6841      	ldr	r1, [r0, #4]
    cb2e:	1b09      	subs	r1, r1, r4
    cb30:	4299      	cmp	r1, r3
    cb32:	d81b      	bhi.n	cb6c <mbedtls_mpi_shift_r+0x6c>
            X->p[i] = 0;
    cb34:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    cb36:	6841      	ldr	r1, [r0, #4]
    cb38:	4299      	cmp	r1, r3
    cb3a:	d81e      	bhi.n	cb7a <mbedtls_mpi_shift_r+0x7a>
    if( v1 > 0 )
    cb3c:	2a00      	cmp	r2, #0
    cb3e:	d0ee      	beq.n	cb1e <mbedtls_mpi_shift_r+0x1e>
    mbedtls_mpi_uint r0 = 0, r1;
    cb40:	2400      	movs	r4, #0
        for( i = X->n; i > 0; i-- )
    cb42:	6843      	ldr	r3, [r0, #4]
            r1 = X->p[i - 1] << (biL - v1);
    cb44:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    cb48:	3b01      	subs	r3, #1
    cb4a:	d3e8      	bcc.n	cb1e <mbedtls_mpi_shift_r+0x1e>
            r1 = X->p[i - 1] << (biL - v1);
    cb4c:	6881      	ldr	r1, [r0, #8]
    cb4e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
            X->p[i - 1] >>= v1;
    cb52:	fa25 f602 	lsr.w	r6, r5, r2
    cb56:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
            X->p[i - 1] |= r0;
    cb5a:	6886      	ldr	r6, [r0, #8]
    cb5c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    cb60:	4321      	orrs	r1, r4
    cb62:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    cb66:	fa05 f407 	lsl.w	r4, r5, r7
    cb6a:	e7ed      	b.n	cb48 <mbedtls_mpi_shift_r+0x48>
            X->p[i] = X->p[i + v0];
    cb6c:	6881      	ldr	r1, [r0, #8]
    cb6e:	594e      	ldr	r6, [r1, r5]
    cb70:	3504      	adds	r5, #4
    cb72:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    cb76:	3301      	adds	r3, #1
    cb78:	e7d8      	b.n	cb2c <mbedtls_mpi_shift_r+0x2c>
            X->p[i] = 0;
    cb7a:	6881      	ldr	r1, [r0, #8]
    cb7c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    cb80:	3301      	adds	r3, #1
    cb82:	e7d8      	b.n	cb36 <mbedtls_mpi_shift_r+0x36>

0000cb84 <mbedtls_mpi_cmp_abs>:
{
    cb84:	b510      	push	{r4, lr}
    for( i = X->n; i > 0; i-- )
    cb86:	6842      	ldr	r2, [r0, #4]
    cb88:	b93a      	cbnz	r2, cb9a <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
    cb8a:	684b      	ldr	r3, [r1, #4]
    cb8c:	b973      	cbnz	r3, cbac <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
    cb8e:	b9b2      	cbnz	r2, cbbe <mbedtls_mpi_cmp_abs+0x3a>
    cb90:	1e18      	subs	r0, r3, #0
    cb92:	bf18      	it	ne
    cb94:	2001      	movne	r0, #1
    cb96:	4240      	negs	r0, r0
}
    cb98:	bd10      	pop	{r4, pc}
        if( X->p[i - 1] != 0 )
    cb9a:	6883      	ldr	r3, [r0, #8]
    cb9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    cba0:	f853 3c04 	ldr.w	r3, [r3, #-4]
    cba4:	2b00      	cmp	r3, #0
    cba6:	d1f0      	bne.n	cb8a <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    cba8:	3a01      	subs	r2, #1
    cbaa:	e7ed      	b.n	cb88 <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    cbac:	688c      	ldr	r4, [r1, #8]
    cbae:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    cbb2:	f854 4c04 	ldr.w	r4, [r4, #-4]
    cbb6:	2c00      	cmp	r4, #0
    cbb8:	d1e9      	bne.n	cb8e <mbedtls_mpi_cmp_abs+0xa>
    for( j = Y->n; j > 0; j-- )
    cbba:	3b01      	subs	r3, #1
    cbbc:	e7e6      	b.n	cb8c <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    cbbe:	429a      	cmp	r2, r3
    cbc0:	d810      	bhi.n	cbe4 <mbedtls_mpi_cmp_abs+0x60>
    if( j > i ) return( -1 );
    cbc2:	d311      	bcc.n	cbe8 <mbedtls_mpi_cmp_abs+0x64>
    cbc4:	3a01      	subs	r2, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    cbc6:	6883      	ldr	r3, [r0, #8]
    cbc8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    cbcc:	688b      	ldr	r3, [r1, #8]
    cbce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cbd2:	429c      	cmp	r4, r3
    cbd4:	d806      	bhi.n	cbe4 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    cbd6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    cbda:	d305      	bcc.n	cbe8 <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    cbdc:	1c53      	adds	r3, r2, #1
    cbde:	d1f2      	bne.n	cbc6 <mbedtls_mpi_cmp_abs+0x42>
        return( 0 );
    cbe0:	2000      	movs	r0, #0
    cbe2:	e7d9      	b.n	cb98 <mbedtls_mpi_cmp_abs+0x14>
    if( i > j ) return(  1 );
    cbe4:	2001      	movs	r0, #1
    cbe6:	e7d7      	b.n	cb98 <mbedtls_mpi_cmp_abs+0x14>
    if( j > i ) return( -1 );
    cbe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cbec:	e7d4      	b.n	cb98 <mbedtls_mpi_cmp_abs+0x14>

0000cbee <mbedtls_mpi_cmp_mpi>:
{
    cbee:	4602      	mov	r2, r0
    cbf0:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    cbf2:	6843      	ldr	r3, [r0, #4]
    cbf4:	b923      	cbnz	r3, cc00 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    cbf6:	6848      	ldr	r0, [r1, #4]
    cbf8:	b958      	cbnz	r0, cc12 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    cbfa:	2b00      	cmp	r3, #0
    cbfc:	d136      	bne.n	cc6c <mbedtls_mpi_cmp_mpi+0x7e>
    cbfe:	e02f      	b.n	cc60 <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    cc00:	6890      	ldr	r0, [r2, #8]
    cc02:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cc06:	f850 0c04 	ldr.w	r0, [r0, #-4]
    cc0a:	2800      	cmp	r0, #0
    cc0c:	d1f3      	bne.n	cbf6 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    cc0e:	3b01      	subs	r3, #1
    cc10:	e7f0      	b.n	cbf4 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    cc12:	688c      	ldr	r4, [r1, #8]
    cc14:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    cc18:	f855 5c04 	ldr.w	r5, [r5, #-4]
    cc1c:	bb15      	cbnz	r5, cc64 <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    cc1e:	3801      	subs	r0, #1
    cc20:	e7ea      	b.n	cbf8 <mbedtls_mpi_cmp_mpi+0xa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    cc22:	680d      	ldr	r5, [r1, #0]
    if( j > i ) return( -Y->s );
    cc24:	d202      	bcs.n	cc2c <mbedtls_mpi_cmp_mpi+0x3e>
    cc26:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    cc28:	4240      	negs	r0, r0
    cc2a:	e020      	b.n	cc6e <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    cc2c:	6810      	ldr	r0, [r2, #0]
    cc2e:	2800      	cmp	r0, #0
    cc30:	dd03      	ble.n	cc3a <mbedtls_mpi_cmp_mpi+0x4c>
    cc32:	2d00      	cmp	r5, #0
    cc34:	da07      	bge.n	cc46 <mbedtls_mpi_cmp_mpi+0x58>
    cc36:	2001      	movs	r0, #1
    cc38:	e019      	b.n	cc6e <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    cc3a:	2d00      	cmp	r5, #0
    cc3c:	dd03      	ble.n	cc46 <mbedtls_mpi_cmp_mpi+0x58>
    cc3e:	b110      	cbz	r0, cc46 <mbedtls_mpi_cmp_mpi+0x58>
    cc40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cc44:	e013      	b.n	cc6e <mbedtls_mpi_cmp_mpi+0x80>
    cc46:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    cc48:	6891      	ldr	r1, [r2, #8]
    cc4a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    cc4e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    cc52:	428d      	cmp	r5, r1
    cc54:	d80b      	bhi.n	cc6e <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    cc56:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    cc5a:	d3e5      	bcc.n	cc28 <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
    cc5c:	1c59      	adds	r1, r3, #1
    cc5e:	d1f3      	bne.n	cc48 <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    cc60:	2000      	movs	r0, #0
    cc62:	e004      	b.n	cc6e <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    cc64:	2b00      	cmp	r3, #0
    cc66:	d0de      	beq.n	cc26 <mbedtls_mpi_cmp_mpi+0x38>
    if( i > j ) return(  X->s );
    cc68:	4283      	cmp	r3, r0
    cc6a:	d9da      	bls.n	cc22 <mbedtls_mpi_cmp_mpi+0x34>
    cc6c:	6810      	ldr	r0, [r2, #0]
}
    cc6e:	bd30      	pop	{r4, r5, pc}

0000cc70 <mbedtls_mpi_cmp_int>:
{
    cc70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    cc72:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    cc76:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    cc7a:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    cc7c:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    cc7e:	bfac      	ite	ge
    cc80:	2301      	movge	r3, #1
    cc82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    cc86:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    cc88:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    cc8a:	a901      	add	r1, sp, #4
    Y.n = 1;
    cc8c:	9302      	str	r3, [sp, #8]
    Y.p = p;
    cc8e:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    cc92:	f7ff ffac 	bl	cbee <mbedtls_mpi_cmp_mpi>
}
    cc96:	b005      	add	sp, #20
    cc98:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc9c <mbedtls_mpi_add_abs>:
    if( X == B )
    cc9c:	4290      	cmp	r0, r2
{
    cc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cca2:	4606      	mov	r6, r0
    cca4:	460f      	mov	r7, r1
    cca6:	4615      	mov	r5, r2
    if( X == B )
    cca8:	d002      	beq.n	ccb0 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    ccaa:	4288      	cmp	r0, r1
    ccac:	d129      	bne.n	cd02 <mbedtls_mpi_add_abs+0x66>
{
    ccae:	462f      	mov	r7, r5
    X->s = 1;
    ccb0:	2301      	movs	r3, #1
    ccb2:	6033      	str	r3, [r6, #0]
    for( j = B->n; j > 0; j-- )
    ccb4:	687d      	ldr	r5, [r7, #4]
    ccb6:	bb65      	cbnz	r5, cd12 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    ccb8:	4629      	mov	r1, r5
    ccba:	4630      	mov	r0, r6
    ccbc:	f7ff fdad 	bl	c81a <mbedtls_mpi_grow>
    ccc0:	4604      	mov	r4, r0
    ccc2:	bb18      	cbnz	r0, cd0c <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    ccc4:	68b3      	ldr	r3, [r6, #8]
    ccc6:	68b9      	ldr	r1, [r7, #8]
    ccc8:	469c      	mov	ip, r3
    ccca:	4607      	mov	r7, r0
    for( i = 0; i < j; i++, o++, p++ )
    cccc:	4285      	cmp	r5, r0
    ccce:	d129      	bne.n	cd24 <mbedtls_mpi_add_abs+0x88>
    ccd0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
    ccd4:	b1d7      	cbz	r7, cd0c <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    ccd6:	6872      	ldr	r2, [r6, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    ccd8:	f105 0801 	add.w	r8, r5, #1
        if( i >= X->n )
    ccdc:	42aa      	cmp	r2, r5
    ccde:	d807      	bhi.n	ccf0 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    cce0:	4641      	mov	r1, r8
    cce2:	4630      	mov	r0, r6
    cce4:	f7ff fd99 	bl	c81a <mbedtls_mpi_grow>
    cce8:	bb68      	cbnz	r0, cd46 <mbedtls_mpi_add_abs+0xaa>
            p = X->p + i;
    ccea:	68b3      	ldr	r3, [r6, #8]
    ccec:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    ccf0:	681a      	ldr	r2, [r3, #0]
    ccf2:	4645      	mov	r5, r8
    ccf4:	19d2      	adds	r2, r2, r7
    ccf6:	bf2c      	ite	cs
    ccf8:	2701      	movcs	r7, #1
    ccfa:	2700      	movcc	r7, #0
    ccfc:	f843 2b04 	str.w	r2, [r3], #4
    cd00:	e7e8      	b.n	ccd4 <mbedtls_mpi_add_abs+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    cd02:	f7ff fdcc 	bl	c89e <mbedtls_mpi_copy>
    cd06:	4604      	mov	r4, r0
    cd08:	2800      	cmp	r0, #0
    cd0a:	d0d0      	beq.n	ccae <mbedtls_mpi_add_abs+0x12>
}
    cd0c:	4620      	mov	r0, r4
    cd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    cd12:	68bb      	ldr	r3, [r7, #8]
    cd14:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    cd18:	f853 3c04 	ldr.w	r3, [r3, #-4]
    cd1c:	2b00      	cmp	r3, #0
    cd1e:	d1cb      	bne.n	ccb8 <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    cd20:	3d01      	subs	r5, #1
    cd22:	e7c8      	b.n	ccb6 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    cd24:	f8dc 2000 	ldr.w	r2, [ip]
    cd28:	19d2      	adds	r2, r2, r7
    cd2a:	bf2c      	ite	cs
    cd2c:	f04f 0e01 	movcs.w	lr, #1
    cd30:	f04f 0e00 	movcc.w	lr, #0
        *p += tmp; c += ( *p < tmp );
    cd34:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
    for( i = 0; i < j; i++, o++, p++ )
    cd38:	3001      	adds	r0, #1
    cd3a:	19d2      	adds	r2, r2, r7
        *p += tmp; c += ( *p < tmp );
    cd3c:	f84c 2b04 	str.w	r2, [ip], #4
    cd40:	f14e 0700 	adc.w	r7, lr, #0
    for( i = 0; i < j; i++, o++, p++ )
    cd44:	e7c2      	b.n	cccc <mbedtls_mpi_add_abs+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    cd46:	4604      	mov	r4, r0
    return( ret );
    cd48:	e7e0      	b.n	cd0c <mbedtls_mpi_add_abs+0x70>

0000cd4a <mbedtls_mpi_sub_abs>:
{
    cd4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd4e:	4605      	mov	r5, r0
    cd50:	460e      	mov	r6, r1
    cd52:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    cd54:	6854      	ldr	r4, [r2, #4]
    cd56:	b93c      	cbnz	r4, cd68 <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    cd58:	6871      	ldr	r1, [r6, #4]
    cd5a:	42a1      	cmp	r1, r4
    cd5c:	d20e      	bcs.n	cd7c <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    cd5e:	f06f 0709 	mvn.w	r7, #9
}
    cd62:	4638      	mov	r0, r7
    cd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( B->p[n - 1] != 0 )
    cd68:	f8d8 3008 	ldr.w	r3, [r8, #8]
    cd6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    cd70:	f853 3c04 	ldr.w	r3, [r3, #-4]
    cd74:	2b00      	cmp	r3, #0
    cd76:	d1ef      	bne.n	cd58 <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    cd78:	3c01      	subs	r4, #1
    cd7a:	e7ec      	b.n	cd56 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    cd7c:	4628      	mov	r0, r5
    cd7e:	f7ff fd4c 	bl	c81a <mbedtls_mpi_grow>
    cd82:	4607      	mov	r7, r0
    cd84:	2800      	cmp	r0, #0
    cd86:	d1ec      	bne.n	cd62 <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    cd88:	6872      	ldr	r2, [r6, #4]
    cd8a:	42a2      	cmp	r2, r4
    cd8c:	d909      	bls.n	cda2 <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    cd8e:	68b1      	ldr	r1, [r6, #8]
    cd90:	68a8      	ldr	r0, [r5, #8]
    cd92:	1b12      	subs	r2, r2, r4
    cd94:	0092      	lsls	r2, r2, #2
    cd96:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    cd9a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    cd9e:	f7fe fef1 	bl	bb84 <memcpy>
    if( X->n > A->n )
    cda2:	686a      	ldr	r2, [r5, #4]
    cda4:	6870      	ldr	r0, [r6, #4]
    cda6:	4282      	cmp	r2, r0
    cda8:	d907      	bls.n	cdba <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    cdaa:	68ab      	ldr	r3, [r5, #8]
    cdac:	1a12      	subs	r2, r2, r0
    cdae:	2100      	movs	r1, #0
    cdb0:	0092      	lsls	r2, r2, #2
    cdb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    cdb6:	f7fe fef0 	bl	bb9a <memset>
    mbedtls_mpi_uint c = 0, t, z;
    cdba:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
    cdbc:	4613      	mov	r3, r2
    carry = mpi_sub_hlp( n, X->p, A->p, B->p );
    cdbe:	f8d5 c008 	ldr.w	ip, [r5, #8]
    cdc2:	f8d6 e008 	ldr.w	lr, [r6, #8]
    cdc6:	f8d8 8008 	ldr.w	r8, [r8, #8]
    for( i = 0; i < n; i++ )
    cdca:	429c      	cmp	r4, r3
    cdcc:	d112      	bne.n	cdf4 <mbedtls_mpi_sub_abs+0xaa>
    if( carry != 0 )
    cdce:	b172      	cbz	r2, cdee <mbedtls_mpi_sub_abs+0xa4>
            --X->p[n];
    cdd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        for( ; n < X->n && X->p[n] == 0; n++ )
    cdd4:	686b      	ldr	r3, [r5, #4]
    cdd6:	42a3      	cmp	r3, r4
    cdd8:	d925      	bls.n	ce26 <mbedtls_mpi_sub_abs+0xdc>
    cdda:	68ab      	ldr	r3, [r5, #8]
    cddc:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    cde0:	b1ea      	cbz	r2, ce1e <mbedtls_mpi_sub_abs+0xd4>
        --X->p[n];
    cde2:	68aa      	ldr	r2, [r5, #8]
    cde4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cde8:	3b01      	subs	r3, #1
    cdea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    X->s = 1;
    cdee:	2301      	movs	r3, #1
    cdf0:	602b      	str	r3, [r5, #0]
    return( ret );
    cdf2:	e7b6      	b.n	cd62 <mbedtls_mpi_sub_abs+0x18>
        z = ( l[i] <  c );    t = l[i] - c;
    cdf4:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    cdf8:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    cdfc:	1ab1      	subs	r1, r6, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    cdfe:	4281      	cmp	r1, r0
    ce00:	bf2c      	ite	cs
    ce02:	f04f 0900 	movcs.w	r9, #0
    ce06:	f04f 0901 	movcc.w	r9, #1
    ce0a:	1a09      	subs	r1, r1, r0
    ce0c:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
    ce10:	4296      	cmp	r6, r2
    ce12:	bf2c      	ite	cs
    ce14:	464a      	movcs	r2, r9
    ce16:	f109 0201 	addcc.w	r2, r9, #1
    for( i = 0; i < n; i++ )
    ce1a:	3301      	adds	r3, #1
    ce1c:	e7d5      	b.n	cdca <mbedtls_mpi_sub_abs+0x80>
            --X->p[n];
    ce1e:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    ce22:	3401      	adds	r4, #1
    ce24:	e7d6      	b.n	cdd4 <mbedtls_mpi_sub_abs+0x8a>
        if( n == X->n )
    ce26:	d1dc      	bne.n	cde2 <mbedtls_mpi_sub_abs+0x98>
    ce28:	e799      	b.n	cd5e <mbedtls_mpi_sub_abs+0x14>

0000ce2a <mbedtls_mpi_add_mpi>:
{
    ce2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    ce2c:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s < 0 )
    ce2e:	6813      	ldr	r3, [r2, #0]
{
    ce30:	4605      	mov	r5, r0
    if( A->s * B->s < 0 )
    ce32:	437b      	muls	r3, r7
{
    ce34:	460c      	mov	r4, r1
    ce36:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    ce38:	d516      	bpl.n	ce68 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    ce3a:	4611      	mov	r1, r2
    ce3c:	4620      	mov	r0, r4
    ce3e:	f7ff fea1 	bl	cb84 <mbedtls_mpi_cmp_abs>
    ce42:	2800      	cmp	r0, #0
    ce44:	db06      	blt.n	ce54 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    ce46:	4632      	mov	r2, r6
    ce48:	4621      	mov	r1, r4
    ce4a:	4628      	mov	r0, r5
    ce4c:	f7ff ff7d 	bl	cd4a <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    ce50:	b138      	cbz	r0, ce62 <mbedtls_mpi_add_mpi+0x38>
}
    ce52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    ce54:	4622      	mov	r2, r4
    ce56:	4628      	mov	r0, r5
    ce58:	f7ff ff77 	bl	cd4a <mbedtls_mpi_sub_abs>
    ce5c:	2800      	cmp	r0, #0
    ce5e:	d1f8      	bne.n	ce52 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    ce60:	427f      	negs	r7, r7
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    ce62:	2000      	movs	r0, #0
        X->s = s;
    ce64:	602f      	str	r7, [r5, #0]
    return( ret );
    ce66:	e7f4      	b.n	ce52 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    ce68:	f7ff ff18 	bl	cc9c <mbedtls_mpi_add_abs>
    ce6c:	e7f0      	b.n	ce50 <mbedtls_mpi_add_mpi+0x26>

0000ce6e <mbedtls_mpi_sub_mpi>:
{
    ce6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    ce70:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s > 0 )
    ce72:	6813      	ldr	r3, [r2, #0]
{
    ce74:	4605      	mov	r5, r0
    if( A->s * B->s > 0 )
    ce76:	437b      	muls	r3, r7
    ce78:	2b00      	cmp	r3, #0
{
    ce7a:	460c      	mov	r4, r1
    ce7c:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    ce7e:	dd16      	ble.n	ceae <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    ce80:	4611      	mov	r1, r2
    ce82:	4620      	mov	r0, r4
    ce84:	f7ff fe7e 	bl	cb84 <mbedtls_mpi_cmp_abs>
    ce88:	2800      	cmp	r0, #0
    ce8a:	db06      	blt.n	ce9a <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    ce8c:	4632      	mov	r2, r6
    ce8e:	4621      	mov	r1, r4
    ce90:	4628      	mov	r0, r5
    ce92:	f7ff ff5a 	bl	cd4a <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    ce96:	b138      	cbz	r0, cea8 <mbedtls_mpi_sub_mpi+0x3a>
}
    ce98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    ce9a:	4622      	mov	r2, r4
    ce9c:	4628      	mov	r0, r5
    ce9e:	f7ff ff54 	bl	cd4a <mbedtls_mpi_sub_abs>
    cea2:	2800      	cmp	r0, #0
    cea4:	d1f8      	bne.n	ce98 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    cea6:	427f      	negs	r7, r7
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    cea8:	2000      	movs	r0, #0
        X->s = s;
    ceaa:	602f      	str	r7, [r5, #0]
    return( ret );
    ceac:	e7f4      	b.n	ce98 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    ceae:	f7ff fef5 	bl	cc9c <mbedtls_mpi_add_abs>
    ceb2:	e7f0      	b.n	ce96 <mbedtls_mpi_sub_mpi+0x28>

0000ceb4 <mbedtls_mpi_mul_int>:
{
    ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ceb8:	4605      	mov	r5, r0
    ceba:	460f      	mov	r7, r1
    cebc:	4690      	mov	r8, r2
    size_t n = A->n;
    cebe:	684e      	ldr	r6, [r1, #4]
    while( n > 0 && A->p[n - 1] == 0 )
    cec0:	b146      	cbz	r6, ced4 <mbedtls_mpi_mul_int+0x20>
    cec2:	68bb      	ldr	r3, [r7, #8]
    cec4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    cec8:	f853 3c04 	ldr.w	r3, [r3, #-4]
    cecc:	b143      	cbz	r3, cee0 <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    cece:	f1b8 0f00 	cmp.w	r8, #0
    ced2:	d107      	bne.n	cee4 <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    ced4:	4628      	mov	r0, r5
}
    ced6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    ceda:	2100      	movs	r1, #0
    cedc:	f7ff bd13 	b.w	c906 <mbedtls_mpi_lset>
        --n;
    cee0:	3e01      	subs	r6, #1
    cee2:	e7ed      	b.n	cec0 <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    cee4:	4628      	mov	r0, r5
    cee6:	1c71      	adds	r1, r6, #1
    cee8:	f7ff fc97 	bl	c81a <mbedtls_mpi_grow>
    ceec:	4604      	mov	r4, r0
    ceee:	b960      	cbnz	r0, cf0a <mbedtls_mpi_mul_int+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    cef0:	4639      	mov	r1, r7
    cef2:	4628      	mov	r0, r5
    cef4:	f7ff fcd3 	bl	c89e <mbedtls_mpi_copy>
    cef8:	4604      	mov	r4, r0
    cefa:	b930      	cbnz	r0, cf0a <mbedtls_mpi_mul_int+0x56>
    mpi_mul_hlp( n, A->p, X->p, b - 1 );
    cefc:	4630      	mov	r0, r6
    cefe:	68aa      	ldr	r2, [r5, #8]
    cf00:	68b9      	ldr	r1, [r7, #8]
    cf02:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    cf06:	f7ff fa3b 	bl	c380 <mpi_mul_hlp>
}
    cf0a:	4620      	mov	r0, r4
    cf0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cf10 <mbedtls_mpi_div_mpi>:
{
    cf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf14:	4683      	mov	fp, r0
    cf16:	b09d      	sub	sp, #116	; 0x74
    cf18:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    cf1a:	4618      	mov	r0, r3
    cf1c:	2100      	movs	r1, #0
{
    cf1e:	4616      	mov	r6, r2
    cf20:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    cf22:	f7ff fea5 	bl	cc70 <mbedtls_mpi_cmp_int>
    cf26:	2800      	cmp	r0, #0
    cf28:	f000 8187 	beq.w	d23a <mbedtls_mpi_div_mpi+0x32a>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    cf2c:	2303      	movs	r3, #3
    X->n = 0;
    cf2e:	2400      	movs	r4, #0
    cf30:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    cf32:	9317      	str	r3, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    cf34:	4630      	mov	r0, r6
    T2.p = TP2;
    cf36:	ab19      	add	r3, sp, #100	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    cf38:	9903      	ldr	r1, [sp, #12]
    X->n = 0;
    cf3a:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    X->s = 1;
    cf3e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    X->p = NULL;
    cf42:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    X->n = 0;
    cf46:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
    X->s = 1;
    cf4a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    X->p = NULL;
    cf4e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
    T2.s = 1;
    cf52:	9516      	str	r5, [sp, #88]	; 0x58
    T2.p = TP2;
    cf54:	9318      	str	r3, [sp, #96]	; 0x60
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    cf56:	f7ff fe15 	bl	cb84 <mbedtls_mpi_cmp_abs>
    cf5a:	42a0      	cmp	r0, r4
    cf5c:	da28      	bge.n	cfb0 <mbedtls_mpi_div_mpi+0xa0>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    cf5e:	f1bb 0f00 	cmp.w	fp, #0
    cf62:	d105      	bne.n	cf70 <mbedtls_mpi_div_mpi+0x60>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    cf64:	b9e7      	cbnz	r7, cfa0 <mbedtls_mpi_div_mpi+0x90>
        return( 0 );
    cf66:	2400      	movs	r4, #0
}
    cf68:	4620      	mov	r0, r4
    cf6a:	b01d      	add	sp, #116	; 0x74
    cf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    cf70:	4621      	mov	r1, r4
    cf72:	4658      	mov	r0, fp
    cf74:	f7ff fcc7 	bl	c906 <mbedtls_mpi_lset>
    cf78:	4604      	mov	r4, r0
    cf7a:	2800      	cmp	r0, #0
    cf7c:	d0f2      	beq.n	cf64 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    cf7e:	a80a      	add	r0, sp, #40	; 0x28
    cf80:	f7ff fc39 	bl	c7f6 <mbedtls_mpi_free>
    cf84:	a80d      	add	r0, sp, #52	; 0x34
    cf86:	f7ff fc36 	bl	c7f6 <mbedtls_mpi_free>
    cf8a:	a810      	add	r0, sp, #64	; 0x40
    cf8c:	f7ff fc33 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    cf90:	a813      	add	r0, sp, #76	; 0x4c
    cf92:	f7ff fc30 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    cf96:	210c      	movs	r1, #12
    cf98:	a819      	add	r0, sp, #100	; 0x64
    cf9a:	f7fd f9c1 	bl	a320 <mbedtls_platform_zeroize>
    return( ret );
    cf9e:	e7e3      	b.n	cf68 <mbedtls_mpi_div_mpi+0x58>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    cfa0:	4631      	mov	r1, r6
    cfa2:	4638      	mov	r0, r7
    cfa4:	f7ff fc7b 	bl	c89e <mbedtls_mpi_copy>
    cfa8:	4604      	mov	r4, r0
    cfaa:	2800      	cmp	r0, #0
    cfac:	d1e7      	bne.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
    cfae:	e7da      	b.n	cf66 <mbedtls_mpi_div_mpi+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    cfb0:	4631      	mov	r1, r6
    cfb2:	a80a      	add	r0, sp, #40	; 0x28
    cfb4:	f7ff fc73 	bl	c89e <mbedtls_mpi_copy>
    cfb8:	4604      	mov	r4, r0
    cfba:	2800      	cmp	r0, #0
    cfbc:	d1df      	bne.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    cfbe:	9903      	ldr	r1, [sp, #12]
    cfc0:	a80d      	add	r0, sp, #52	; 0x34
    cfc2:	f7ff fc6c 	bl	c89e <mbedtls_mpi_copy>
    cfc6:	4604      	mov	r4, r0
    cfc8:	2800      	cmp	r0, #0
    cfca:	d1d8      	bne.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    cfcc:	6871      	ldr	r1, [r6, #4]
    cfce:	a810      	add	r0, sp, #64	; 0x40
    cfd0:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    cfd2:	950d      	str	r5, [sp, #52]	; 0x34
    cfd4:	950a      	str	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    cfd6:	f7ff fc20 	bl	c81a <mbedtls_mpi_grow>
    cfda:	4604      	mov	r4, r0
    cfdc:	2800      	cmp	r0, #0
    cfde:	d1ce      	bne.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    cfe0:	4601      	mov	r1, r0
    cfe2:	a810      	add	r0, sp, #64	; 0x40
    cfe4:	f7ff fc8f 	bl	c906 <mbedtls_mpi_lset>
    cfe8:	4604      	mov	r4, r0
    cfea:	2800      	cmp	r0, #0
    cfec:	d1c7      	bne.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    cfee:	6871      	ldr	r1, [r6, #4]
    cff0:	a813      	add	r0, sp, #76	; 0x4c
    cff2:	3102      	adds	r1, #2
    cff4:	f7ff fc11 	bl	c81a <mbedtls_mpi_grow>
    cff8:	4604      	mov	r4, r0
    cffa:	2800      	cmp	r0, #0
    cffc:	d1bf      	bne.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    cffe:	a80d      	add	r0, sp, #52	; 0x34
    d000:	f7ff fcad 	bl	c95e <mbedtls_mpi_bitlen>
    d004:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    d008:	281f      	cmp	r0, #31
    d00a:	d070      	beq.n	d0ee <mbedtls_mpi_div_mpi+0x1de>
        k = biL - 1 - k;
    d00c:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    d010:	4619      	mov	r1, r3
    d012:	a80a      	add	r0, sp, #40	; 0x28
        k = biL - 1 - k;
    d014:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    d016:	f7ff fd1c 	bl	ca52 <mbedtls_mpi_shift_l>
    d01a:	4604      	mov	r4, r0
    d01c:	2800      	cmp	r0, #0
    d01e:	d1ae      	bne.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    d020:	9901      	ldr	r1, [sp, #4]
    d022:	a80d      	add	r0, sp, #52	; 0x34
    d024:	f7ff fd15 	bl	ca52 <mbedtls_mpi_shift_l>
    d028:	4604      	mov	r4, r0
    d02a:	2800      	cmp	r0, #0
    d02c:	d1a7      	bne.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
    n = X.n - 1;
    d02e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t = Y.n - 1;
    d030:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    d034:	a80d      	add	r0, sp, #52	; 0x34
    d036:	eba5 0a08 	sub.w	sl, r5, r8
    d03a:	ea4f 194a 	mov.w	r9, sl, lsl #5
    d03e:	4649      	mov	r1, r9
    d040:	f7ff fd07 	bl	ca52 <mbedtls_mpi_shift_l>
    d044:	4604      	mov	r4, r0
    d046:	2800      	cmp	r0, #0
    d048:	d199      	bne.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
        Z.p[n - t]++;
    d04a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    d04e:	a90d      	add	r1, sp, #52	; 0x34
    d050:	a80a      	add	r0, sp, #40	; 0x28
    d052:	f7ff fdcc 	bl	cbee <mbedtls_mpi_cmp_mpi>
    d056:	2800      	cmp	r0, #0
    d058:	da4b      	bge.n	d0f2 <mbedtls_mpi_div_mpi+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    d05a:	4649      	mov	r1, r9
    d05c:	a80d      	add	r0, sp, #52	; 0x34
    d05e:	f7ff fd4f 	bl	cb00 <mbedtls_mpi_shift_r>
    d062:	4604      	mov	r4, r0
    d064:	2800      	cmp	r0, #0
    d066:	d18a      	bne.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
    t = Y.n - 1;
    d068:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    d06c:	9305      	str	r3, [sp, #20]
        if( X.p[i] >= Y.p[t] )
    d06e:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    d070:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
        if( X.p[i] >= Y.p[t] )
    d074:	9306      	str	r3, [sp, #24]
    d076:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    d07a:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    d07e:	3b02      	subs	r3, #2
    d080:	3d01      	subs	r5, #1
    d082:	009b      	lsls	r3, r3, #2
    d084:	eba5 0508 	sub.w	r5, r5, r8
    d088:	9308      	str	r3, [sp, #32]
    d08a:	00ab      	lsls	r3, r5, #2
    d08c:	9302      	str	r3, [sp, #8]
    for( i = n; i > t ; i-- )
    d08e:	9b05      	ldr	r3, [sp, #20]
    d090:	459a      	cmp	sl, r3
    d092:	d83d      	bhi.n	d110 <mbedtls_mpi_div_mpi+0x200>
    if( Q != NULL )
    d094:	f1bb 0f00 	cmp.w	fp, #0
    d098:	d00c      	beq.n	d0b4 <mbedtls_mpi_div_mpi+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    d09a:	4658      	mov	r0, fp
    d09c:	a910      	add	r1, sp, #64	; 0x40
    d09e:	f7ff fbfe 	bl	c89e <mbedtls_mpi_copy>
    d0a2:	2800      	cmp	r0, #0
    d0a4:	f040 80c5 	bne.w	d232 <mbedtls_mpi_div_mpi+0x322>
        Q->s = A->s * B->s;
    d0a8:	9a03      	ldr	r2, [sp, #12]
    d0aa:	6833      	ldr	r3, [r6, #0]
    d0ac:	6812      	ldr	r2, [r2, #0]
    d0ae:	4353      	muls	r3, r2
    d0b0:	f8cb 3000 	str.w	r3, [fp]
    if( R != NULL )
    d0b4:	2f00      	cmp	r7, #0
    d0b6:	f43f af62 	beq.w	cf7e <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    d0ba:	9901      	ldr	r1, [sp, #4]
    d0bc:	a80a      	add	r0, sp, #40	; 0x28
    d0be:	f7ff fd1f 	bl	cb00 <mbedtls_mpi_shift_r>
    d0c2:	2800      	cmp	r0, #0
    d0c4:	f040 80b5 	bne.w	d232 <mbedtls_mpi_div_mpi+0x322>
        X.s = A->s;
    d0c8:	6833      	ldr	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    d0ca:	a90a      	add	r1, sp, #40	; 0x28
    d0cc:	4638      	mov	r0, r7
        X.s = A->s;
    d0ce:	930a      	str	r3, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    d0d0:	f7ff fbe5 	bl	c89e <mbedtls_mpi_copy>
    d0d4:	4601      	mov	r1, r0
    d0d6:	2800      	cmp	r0, #0
    d0d8:	f040 80ad 	bne.w	d236 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    d0dc:	4638      	mov	r0, r7
    d0de:	f7ff fdc7 	bl	cc70 <mbedtls_mpi_cmp_int>
    d0e2:	2800      	cmp	r0, #0
    d0e4:	f47f af4b 	bne.w	cf7e <mbedtls_mpi_div_mpi+0x6e>
            R->s = 1;
    d0e8:	2301      	movs	r3, #1
    d0ea:	603b      	str	r3, [r7, #0]
    d0ec:	e747      	b.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
    else k = 0;
    d0ee:	9401      	str	r4, [sp, #4]
    d0f0:	e79d      	b.n	d02e <mbedtls_mpi_div_mpi+0x11e>
        Z.p[n - t]++;
    d0f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    d0f4:	a90a      	add	r1, sp, #40	; 0x28
        Z.p[n - t]++;
    d0f6:	f852 300a 	ldr.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    d0fa:	4608      	mov	r0, r1
        Z.p[n - t]++;
    d0fc:	3301      	adds	r3, #1
    d0fe:	f842 300a 	str.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    d102:	aa0d      	add	r2, sp, #52	; 0x34
    d104:	f7ff feb3 	bl	ce6e <mbedtls_mpi_sub_mpi>
    d108:	4604      	mov	r4, r0
    d10a:	2800      	cmp	r0, #0
    d10c:	d09f      	beq.n	d04e <mbedtls_mpi_div_mpi+0x13e>
    d10e:	e736      	b.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
        if( X.p[i] >= Y.p[t] )
    d110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d112:	9a06      	ldr	r2, [sp, #24]
    d114:	9304      	str	r3, [sp, #16]
    d116:	4413      	add	r3, r2
    d118:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    d11c:	9307      	str	r3, [sp, #28]
    d11e:	9b04      	ldr	r3, [sp, #16]
    d120:	ea4f 088a 	mov.w	r8, sl, lsl #2
    d124:	589a      	ldr	r2, [r3, r2]
    d126:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    d12a:	f1a8 0304 	sub.w	r3, r8, #4
            Z.p[i - t - 1] = ~0;
    d12e:	9d12      	ldr	r5, [sp, #72]	; 0x48
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    d130:	9309      	str	r3, [sp, #36]	; 0x24
            Z.p[i - t - 1] = ~0;
    d132:	9b02      	ldr	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    d134:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    d136:	441d      	add	r5, r3
        if( X.p[i] >= Y.p[t] )
    d138:	d276      	bcs.n	d228 <mbedtls_mpi_div_mpi+0x318>
    quotient = dividend / d;
    d13a:	f1a8 0004 	sub.w	r0, r8, #4
    d13e:	2300      	movs	r3, #0
    d140:	f859 0000 	ldr.w	r0, [r9, r0]
    d144:	f7f3 f806 	bl	154 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    d148:	2900      	cmp	r1, #0
    d14a:	bf14      	ite	ne
    d14c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    d150:	4603      	moveq	r3, r0
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    d152:	f1ba 0f01 	cmp.w	sl, #1
            Z.p[i - t - 1] = ~0;
    d156:	602b      	str	r3, [r5, #0]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    d158:	bf0e      	itee	eq
    d15a:	2300      	moveq	r3, #0
    d15c:	eb09 0308 	addne.w	r3, r9, r8
    d160:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    d164:	9319      	str	r3, [sp, #100]	; 0x64
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    d166:	f1a8 0304 	sub.w	r3, r8, #4
    d16a:	f859 3003 	ldr.w	r3, [r9, r3]
    d16e:	931a      	str	r3, [sp, #104]	; 0x68
        T2.p[2] = X.p[i];
    d170:	f859 3008 	ldr.w	r3, [r9, r8]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    d174:	f8dd 8010 	ldr.w	r8, [sp, #16]
        T2.p[2] = X.p[i];
    d178:	931b      	str	r3, [sp, #108]	; 0x6c
        Z.p[i - t - 1]++;
    d17a:	682b      	ldr	r3, [r5, #0]
    d17c:	3301      	adds	r3, #1
    d17e:	602b      	str	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    d180:	9b08      	ldr	r3, [sp, #32]
    d182:	4498      	add	r8, r3
            Z.p[i - t - 1]--;
    d184:	682b      	ldr	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    d186:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    d188:	3b01      	subs	r3, #1
    d18a:	602b      	str	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    d18c:	a813      	add	r0, sp, #76	; 0x4c
    d18e:	f7ff fbba 	bl	c906 <mbedtls_mpi_lset>
    d192:	2800      	cmp	r0, #0
    d194:	d14d      	bne.n	d232 <mbedtls_mpi_div_mpi+0x322>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    d196:	9b05      	ldr	r3, [sp, #20]
    d198:	2b00      	cmp	r3, #0
    d19a:	d048      	beq.n	d22e <mbedtls_mpi_div_mpi+0x31e>
    d19c:	f8d8 2000 	ldr.w	r2, [r8]
    d1a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    d1a2:	a913      	add	r1, sp, #76	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    d1a4:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    d1a6:	9a07      	ldr	r2, [sp, #28]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    d1a8:	4608      	mov	r0, r1
            T1.p[1] = Y.p[t];
    d1aa:	6812      	ldr	r2, [r2, #0]
    d1ac:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    d1ae:	682a      	ldr	r2, [r5, #0]
    d1b0:	f7ff fe80 	bl	ceb4 <mbedtls_mpi_mul_int>
    d1b4:	2800      	cmp	r0, #0
    d1b6:	d13c      	bne.n	d232 <mbedtls_mpi_div_mpi+0x322>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    d1b8:	a916      	add	r1, sp, #88	; 0x58
    d1ba:	a813      	add	r0, sp, #76	; 0x4c
    d1bc:	f7ff fd17 	bl	cbee <mbedtls_mpi_cmp_mpi>
    d1c0:	2800      	cmp	r0, #0
    d1c2:	dcdf      	bgt.n	d184 <mbedtls_mpi_div_mpi+0x274>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    d1c4:	682a      	ldr	r2, [r5, #0]
    d1c6:	a90d      	add	r1, sp, #52	; 0x34
    d1c8:	a813      	add	r0, sp, #76	; 0x4c
    d1ca:	f7ff fe73 	bl	ceb4 <mbedtls_mpi_mul_int>
    d1ce:	bb80      	cbnz	r0, d232 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    d1d0:	9b02      	ldr	r3, [sp, #8]
    d1d2:	a813      	add	r0, sp, #76	; 0x4c
    d1d4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    d1d8:	4641      	mov	r1, r8
    d1da:	f7ff fc3a 	bl	ca52 <mbedtls_mpi_shift_l>
    d1de:	bb40      	cbnz	r0, d232 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    d1e0:	a90a      	add	r1, sp, #40	; 0x28
    d1e2:	4608      	mov	r0, r1
    d1e4:	aa13      	add	r2, sp, #76	; 0x4c
    d1e6:	f7ff fe42 	bl	ce6e <mbedtls_mpi_sub_mpi>
    d1ea:	4601      	mov	r1, r0
    d1ec:	bb18      	cbnz	r0, d236 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    d1ee:	a80a      	add	r0, sp, #40	; 0x28
    d1f0:	f7ff fd3e 	bl	cc70 <mbedtls_mpi_cmp_int>
    d1f4:	2800      	cmp	r0, #0
    d1f6:	da12      	bge.n	d21e <mbedtls_mpi_div_mpi+0x30e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    d1f8:	a90d      	add	r1, sp, #52	; 0x34
    d1fa:	a813      	add	r0, sp, #76	; 0x4c
    d1fc:	f7ff fb4f 	bl	c89e <mbedtls_mpi_copy>
    d200:	b9b8      	cbnz	r0, d232 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    d202:	4641      	mov	r1, r8
    d204:	a813      	add	r0, sp, #76	; 0x4c
    d206:	f7ff fc24 	bl	ca52 <mbedtls_mpi_shift_l>
    d20a:	b990      	cbnz	r0, d232 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    d20c:	a90a      	add	r1, sp, #40	; 0x28
    d20e:	4608      	mov	r0, r1
    d210:	aa13      	add	r2, sp, #76	; 0x4c
    d212:	f7ff fe0a 	bl	ce2a <mbedtls_mpi_add_mpi>
    d216:	b960      	cbnz	r0, d232 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1]--;
    d218:	682b      	ldr	r3, [r5, #0]
    d21a:	3b01      	subs	r3, #1
    d21c:	602b      	str	r3, [r5, #0]
    for( i = n; i > t ; i-- )
    d21e:	9b02      	ldr	r3, [sp, #8]
    d220:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    d224:	3b04      	subs	r3, #4
    d226:	e731      	b.n	d08c <mbedtls_mpi_div_mpi+0x17c>
    d228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d22c:	e791      	b.n	d152 <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    d22e:	9a05      	ldr	r2, [sp, #20]
    d230:	e7b6      	b.n	d1a0 <mbedtls_mpi_div_mpi+0x290>
    d232:	4604      	mov	r4, r0
    d234:	e6a3      	b.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
    d236:	460c      	mov	r4, r1
    d238:	e6a1      	b.n	cf7e <mbedtls_mpi_div_mpi+0x6e>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    d23a:	f06f 040b 	mvn.w	r4, #11
    d23e:	e693      	b.n	cf68 <mbedtls_mpi_div_mpi+0x58>

0000d240 <mbedtls_mpi_mod_mpi>:
{
    d240:	b570      	push	{r4, r5, r6, lr}
    d242:	4604      	mov	r4, r0
    d244:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    d246:	4610      	mov	r0, r2
    d248:	2100      	movs	r1, #0
{
    d24a:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    d24c:	f7ff fd10 	bl	cc70 <mbedtls_mpi_cmp_int>
    d250:	2800      	cmp	r0, #0
    d252:	db24      	blt.n	d29e <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    d254:	462a      	mov	r2, r5
    d256:	4633      	mov	r3, r6
    d258:	4621      	mov	r1, r4
    d25a:	2000      	movs	r0, #0
    d25c:	f7ff fe58 	bl	cf10 <mbedtls_mpi_div_mpi>
    d260:	4605      	mov	r5, r0
    d262:	b138      	cbz	r0, d274 <mbedtls_mpi_mod_mpi+0x34>
}
    d264:	4628      	mov	r0, r5
    d266:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    d268:	4632      	mov	r2, r6
    d26a:	4621      	mov	r1, r4
    d26c:	4620      	mov	r0, r4
    d26e:	f7ff fddc 	bl	ce2a <mbedtls_mpi_add_mpi>
    d272:	b990      	cbnz	r0, d29a <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    d274:	2100      	movs	r1, #0
    d276:	4620      	mov	r0, r4
    d278:	f7ff fcfa 	bl	cc70 <mbedtls_mpi_cmp_int>
    d27c:	2800      	cmp	r0, #0
    d27e:	dbf3      	blt.n	d268 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    d280:	4631      	mov	r1, r6
    d282:	4620      	mov	r0, r4
    d284:	f7ff fcb3 	bl	cbee <mbedtls_mpi_cmp_mpi>
    d288:	2800      	cmp	r0, #0
    d28a:	dbeb      	blt.n	d264 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    d28c:	4632      	mov	r2, r6
    d28e:	4621      	mov	r1, r4
    d290:	4620      	mov	r0, r4
    d292:	f7ff fdec 	bl	ce6e <mbedtls_mpi_sub_mpi>
    d296:	2800      	cmp	r0, #0
    d298:	d0f2      	beq.n	d280 <mbedtls_mpi_mod_mpi+0x40>
    d29a:	4605      	mov	r5, r0
    d29c:	e7e2      	b.n	d264 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    d29e:	f06f 0509 	mvn.w	r5, #9
    d2a2:	e7df      	b.n	d264 <mbedtls_mpi_mod_mpi+0x24>

0000d2a4 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *prec_RR )
{
    d2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2a8:	4606      	mov	r6, r0
    d2aa:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    d2ae:	4689      	mov	r9, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    d2b0:	4618      	mov	r0, r3
    d2b2:	2100      	movs	r1, #0
{
    d2b4:	461d      	mov	r5, r3
    d2b6:	9205      	str	r2, [sp, #20]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    d2b8:	f7ff fcda 	bl	cc70 <mbedtls_mpi_cmp_int>
    d2bc:	2800      	cmp	r0, #0
    d2be:	f340 8213 	ble.w	d6e8 <mbedtls_mpi_exp_mod+0x444>
    d2c2:	68ab      	ldr	r3, [r5, #8]
    d2c4:	681c      	ldr	r4, [r3, #0]
    d2c6:	f014 0301 	ands.w	r3, r4, #1
    d2ca:	9308      	str	r3, [sp, #32]
    d2cc:	f000 820c 	beq.w	d6e8 <mbedtls_mpi_exp_mod+0x444>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    d2d0:	2100      	movs	r1, #0
    d2d2:	9805      	ldr	r0, [sp, #20]
    d2d4:	f7ff fccc 	bl	cc70 <mbedtls_mpi_cmp_int>
    d2d8:	2800      	cmp	r0, #0
    d2da:	f2c0 8205 	blt.w	d6e8 <mbedtls_mpi_exp_mod+0x444>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    d2de:	9805      	ldr	r0, [sp, #20]
    d2e0:	f7ff fb3d 	bl	c95e <mbedtls_mpi_bitlen>
    d2e4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    d2e8:	f200 81fe 	bhi.w	d6e8 <mbedtls_mpi_exp_mod+0x444>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    d2ec:	4628      	mov	r0, r5
    d2ee:	f7ff fb36 	bl	c95e <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    d2f2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    d2f6:	f200 81f7 	bhi.w	d6e8 <mbedtls_mpi_exp_mod+0x444>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    d2fa:	2103      	movs	r1, #3
    d2fc:	f104 0802 	add.w	r8, r4, #2
    d300:	ea4f 0848 	mov.w	r8, r8, lsl #1
    d304:	f008 0808 	and.w	r8, r8, #8
    d308:	44a0      	add	r8, r4
        x *= ( 2 - ( m0 * x ) );
    d30a:	fb08 f304 	mul.w	r3, r8, r4
    for( i = biL; i >= 8; i /= 2 )
    d30e:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    d310:	f1c3 0302 	rsb	r3, r3, #2
    d314:	fb03 f808 	mul.w	r8, r3, r8
    for( i = biL; i >= 8; i /= 2 )
    d318:	d1f7      	bne.n	d30a <mbedtls_mpi_exp_mod+0x66>
    X->s = 1;
    d31a:	2301      	movs	r3, #1
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    mbedtls_mpi_init( &WW );
    memset( W, 0, sizeof( W ) );
    d31c:	f44f 7240 	mov.w	r2, #768	; 0x300
    d320:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    d322:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    d326:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    d32a:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    d32e:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    d332:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    d336:	9116      	str	r1, [sp, #88]	; 0x58
    d338:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    d33a:	f7fe fc2e 	bl	bb9a <memset>

    i = mbedtls_mpi_bitlen( E );
    d33e:	9805      	ldr	r0, [sp, #20]
    d340:	f7ff fb0d 	bl	c95e <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    d344:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    d348:	f080 80f5 	bcs.w	d536 <mbedtls_mpi_exp_mod+0x292>
    d34c:	28ef      	cmp	r0, #239	; 0xef
    d34e:	f200 80f4 	bhi.w	d53a <mbedtls_mpi_exp_mod+0x296>
    d352:	284f      	cmp	r0, #79	; 0x4f
    d354:	f200 80f3 	bhi.w	d53e <mbedtls_mpi_exp_mod+0x29a>
    d358:	9b08      	ldr	r3, [sp, #32]
    d35a:	2818      	cmp	r0, #24
    d35c:	bf34      	ite	cc
    d35e:	461f      	movcc	r7, r3
    d360:	2703      	movcs	r7, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    d362:	686b      	ldr	r3, [r5, #4]
    /* All W[i] and X must have at least N->n limbs for the mpi_montmul()
     * and mpi_montred() calls later. Here we ensure that W[1] and X are
     * large enough, and later we'll grow other W[i] to the same length.
     * They must not be shrunk midway through this function!
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    d364:	4630      	mov	r0, r6
    j = N->n + 1;
    d366:	f103 0a01 	add.w	sl, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    d36a:	4651      	mov	r1, sl
    d36c:	f7ff fa55 	bl	c81a <mbedtls_mpi_grow>
    d370:	4604      	mov	r4, r0
    d372:	2800      	cmp	r0, #0
    d374:	f040 80bd 	bne.w	d4f2 <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    d378:	4651      	mov	r1, sl
    d37a:	a81d      	add	r0, sp, #116	; 0x74
    d37c:	f7ff fa4d 	bl	c81a <mbedtls_mpi_grow>
    d380:	4604      	mov	r4, r0
    d382:	2800      	cmp	r0, #0
    d384:	f040 80b5 	bne.w	d4f2 <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    d388:	ea4f 014a 	mov.w	r1, sl, lsl #1
    d38c:	a80e      	add	r0, sp, #56	; 0x38
    d38e:	f7ff fa44 	bl	c81a <mbedtls_mpi_grow>
    d392:	4604      	mov	r4, r0
    d394:	2800      	cmp	r0, #0
    d396:	f040 80ac 	bne.w	d4f2 <mbedtls_mpi_exp_mod+0x24e>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    d39a:	f8d9 3000 	ldr.w	r3, [r9]
    d39e:	9306      	str	r3, [sp, #24]
    if( neg )
    d3a0:	3301      	adds	r3, #1
    d3a2:	d10b      	bne.n	d3bc <mbedtls_mpi_exp_mod+0x118>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    d3a4:	4649      	mov	r1, r9
    d3a6:	a814      	add	r0, sp, #80	; 0x50
    d3a8:	f7ff fa79 	bl	c89e <mbedtls_mpi_copy>
    d3ac:	4604      	mov	r4, r0
    d3ae:	2800      	cmp	r0, #0
    d3b0:	f040 809f 	bne.w	d4f2 <mbedtls_mpi_exp_mod+0x24e>
        Apos.s = 1;
    d3b4:	2301      	movs	r3, #1
        A = &Apos;
    d3b6:	f10d 0950 	add.w	r9, sp, #80	; 0x50
        Apos.s = 1;
    d3ba:	9314      	str	r3, [sp, #80]	; 0x50
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( prec_RR == NULL || prec_RR->p == NULL )
    d3bc:	9be4      	ldr	r3, [sp, #912]	; 0x390
    d3be:	b11b      	cbz	r3, d3c8 <mbedtls_mpi_exp_mod+0x124>
    d3c0:	689b      	ldr	r3, [r3, #8]
    d3c2:	2b00      	cmp	r3, #0
    d3c4:	f040 80bd 	bne.w	d542 <mbedtls_mpi_exp_mod+0x29e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    d3c8:	2101      	movs	r1, #1
    d3ca:	a80b      	add	r0, sp, #44	; 0x2c
    d3cc:	f7ff fa9b 	bl	c906 <mbedtls_mpi_lset>
    d3d0:	4604      	mov	r4, r0
    d3d2:	2800      	cmp	r0, #0
    d3d4:	f040 808d 	bne.w	d4f2 <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    d3d8:	6869      	ldr	r1, [r5, #4]
    d3da:	a80b      	add	r0, sp, #44	; 0x2c
    d3dc:	0189      	lsls	r1, r1, #6
    d3de:	f7ff fb38 	bl	ca52 <mbedtls_mpi_shift_l>
    d3e2:	4604      	mov	r4, r0
    d3e4:	2800      	cmp	r0, #0
    d3e6:	f040 8084 	bne.w	d4f2 <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    d3ea:	a90b      	add	r1, sp, #44	; 0x2c
    d3ec:	462a      	mov	r2, r5
    d3ee:	4608      	mov	r0, r1
    d3f0:	f7ff ff26 	bl	d240 <mbedtls_mpi_mod_mpi>
    d3f4:	4604      	mov	r4, r0
    d3f6:	2800      	cmp	r0, #0
    d3f8:	d17b      	bne.n	d4f2 <mbedtls_mpi_exp_mod+0x24e>

        if( prec_RR != NULL )
    d3fa:	9be4      	ldr	r3, [sp, #912]	; 0x390
    d3fc:	b123      	cbz	r3, d408 <mbedtls_mpi_exp_mod+0x164>
            memcpy( prec_RR, &RR, sizeof( mbedtls_mpi ) );
    d3fe:	220c      	movs	r2, #12
    d400:	4618      	mov	r0, r3
    d402:	a90b      	add	r1, sp, #44	; 0x2c
    }
    else
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    d404:	f7fe fbbe 	bl	bb84 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    d408:	4629      	mov	r1, r5
    d40a:	4648      	mov	r0, r9
    d40c:	f7ff fbef 	bl	cbee <mbedtls_mpi_cmp_mpi>
    d410:	2800      	cmp	r0, #0
    d412:	f2c0 809a 	blt.w	d54a <mbedtls_mpi_exp_mod+0x2a6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    d416:	462a      	mov	r2, r5
    d418:	4649      	mov	r1, r9
    d41a:	a81d      	add	r0, sp, #116	; 0x74
    d41c:	f7ff ff10 	bl	d240 <mbedtls_mpi_mod_mpi>
    d420:	4604      	mov	r4, r0
    d422:	2800      	cmp	r0, #0
    d424:	d165      	bne.n	d4f2 <mbedtls_mpi_exp_mod+0x24e>
        /* This should be a no-op because W[1] is already that large before
         * mbedtls_mpi_mod_mpi(), but it's necessary to avoid an overflow
         * in mpi_montmul() below, so let's make sure. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    d426:	6869      	ldr	r1, [r5, #4]
    d428:	a81d      	add	r0, sp, #116	; 0x74
    d42a:	3101      	adds	r1, #1
    d42c:	f7ff f9f5 	bl	c81a <mbedtls_mpi_grow>
    d430:	4604      	mov	r4, r0
    d432:	2800      	cmp	r0, #0
    d434:	d15d      	bne.n	d4f2 <mbedtls_mpi_exp_mod+0x24e>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    /* Note that this is safe because W[1] always has at least N->n limbs
     * (it grew above and was preserved by mbedtls_mpi_copy()). */
    mpi_montmul( &W[1], &RR, N, mm, &T );
    d436:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    *mm = ~x + 1;
    d43a:	f1c8 0300 	rsb	r3, r8, #0
    mpi_montmul( &W[1], &RR, N, mm, &T );
    d43e:	462a      	mov	r2, r5
    d440:	a90b      	add	r1, sp, #44	; 0x2c
    d442:	a81d      	add	r0, sp, #116	; 0x74
    d444:	f8cd b000 	str.w	fp, [sp]
    *mm = ~x + 1;
    d448:	9303      	str	r3, [sp, #12]
    mpi_montmul( &W[1], &RR, N, mm, &T );
    d44a:	f7ff f935 	bl	c6b8 <mpi_montmul>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    d44e:	4630      	mov	r0, r6
    d450:	a90b      	add	r1, sp, #44	; 0x2c
    d452:	f7ff fa24 	bl	c89e <mbedtls_mpi_copy>
    d456:	4604      	mov	r4, r0
    d458:	2800      	cmp	r0, #0
    d45a:	d14a      	bne.n	d4f2 <mbedtls_mpi_exp_mod+0x24e>
    mbedtls_mpi_uint z = 1;
    d45c:	2301      	movs	r3, #1
    d45e:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    d460:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    d464:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    d466:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    d468:	4630      	mov	r0, r6
    d46a:	462a      	mov	r2, r5
    d46c:	9b03      	ldr	r3, [sp, #12]
    d46e:	f8cd b000 	str.w	fp, [sp]
    d472:	a917      	add	r1, sp, #92	; 0x5c
    d474:	f7ff f920 	bl	c6b8 <mpi_montmul>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    d478:	2f01      	cmp	r7, #1
    d47a:	d16b      	bne.n	d554 <mbedtls_mpi_exp_mod+0x2b0>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    d47c:	f04f 0a00 	mov.w	sl, #0
    nbits   = 0;
    d480:	46d0      	mov	r8, sl
    bufsize = 0;
    d482:	46d3      	mov	fp, sl
    wbits   = 0;
    d484:	46d1      	mov	r9, sl
    nblimbs = E->n;
    d486:	9b05      	ldr	r3, [sp, #20]
    d488:	685b      	ldr	r3, [r3, #4]
    d48a:	9304      	str	r3, [sp, #16]

    while( 1 )
    {
        if( bufsize == 0 )
    d48c:	f1bb 0f00 	cmp.w	fp, #0
    d490:	f040 80af 	bne.w	d5f2 <mbedtls_mpi_exp_mod+0x34e>
        {
            if( nblimbs == 0 )
    d494:	9b04      	ldr	r3, [sp, #16]
    d496:	2b00      	cmp	r3, #0
    d498:	f040 80a6 	bne.w	d5e8 <mbedtls_mpi_exp_mod+0x344>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    d49c:	f04f 0b01 	mov.w	fp, #1
    d4a0:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
    d4a4:	fa0b fb07 	lsl.w	fp, fp, r7
    for( i = 0; i < nbits; i++ )
    d4a8:	9b04      	ldr	r3, [sp, #16]
    d4aa:	4543      	cmp	r3, r8
    d4ac:	f040 80fa 	bne.w	d6a4 <mbedtls_mpi_exp_mod+0x400>
    mbedtls_mpi_uint z = 1;
    d4b0:	2301      	movs	r3, #1
    d4b2:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    d4b4:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    d4b8:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    d4ba:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    d4bc:	9b03      	ldr	r3, [sp, #12]
    d4be:	462a      	mov	r2, r5
    d4c0:	4630      	mov	r0, r6
    d4c2:	f8cd a000 	str.w	sl, [sp]
    d4c6:	a917      	add	r1, sp, #92	; 0x5c
    d4c8:	f7ff f8f6 	bl	c6b8 <mpi_montmul>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    d4cc:	9b06      	ldr	r3, [sp, #24]
    d4ce:	3301      	adds	r3, #1
    d4d0:	d10f      	bne.n	d4f2 <mbedtls_mpi_exp_mod+0x24e>
    d4d2:	9b05      	ldr	r3, [sp, #20]
    d4d4:	685b      	ldr	r3, [r3, #4]
    d4d6:	b163      	cbz	r3, d4f2 <mbedtls_mpi_exp_mod+0x24e>
    d4d8:	9b05      	ldr	r3, [sp, #20]
    d4da:	689b      	ldr	r3, [r3, #8]
    d4dc:	681b      	ldr	r3, [r3, #0]
    d4de:	07db      	lsls	r3, r3, #31
    d4e0:	d507      	bpl.n	d4f2 <mbedtls_mpi_exp_mod+0x24e>
    {
        X->s = -1;
    d4e2:	9b06      	ldr	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    d4e4:	4632      	mov	r2, r6
    d4e6:	4629      	mov	r1, r5
    d4e8:	4630      	mov	r0, r6
        X->s = -1;
    d4ea:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    d4ec:	f7ff fc9d 	bl	ce2a <mbedtls_mpi_add_mpi>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    d4f0:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    d4f2:	2301      	movs	r3, #1
    d4f4:	1e7d      	subs	r5, r7, #1
    d4f6:	fa03 f607 	lsl.w	r6, r3, r7
        mbedtls_mpi_free( &W[i] );
    d4fa:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    d4fc:	fa03 f505 	lsl.w	r5, r3, r5
    d500:	42ae      	cmp	r6, r5
    d502:	f200 80ea 	bhi.w	d6da <mbedtls_mpi_exp_mod+0x436>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    d506:	a81d      	add	r0, sp, #116	; 0x74
    d508:	f7ff f975 	bl	c7f6 <mbedtls_mpi_free>
    d50c:	a80e      	add	r0, sp, #56	; 0x38
    d50e:	f7ff f972 	bl	c7f6 <mbedtls_mpi_free>
    d512:	a814      	add	r0, sp, #80	; 0x50
    d514:	f7ff f96f 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    d518:	a811      	add	r0, sp, #68	; 0x44
    d51a:	f7ff f96c 	bl	c7f6 <mbedtls_mpi_free>

    if( prec_RR == NULL || prec_RR->p == NULL )
    d51e:	9be4      	ldr	r3, [sp, #912]	; 0x390
    d520:	b10b      	cbz	r3, d526 <mbedtls_mpi_exp_mod+0x282>
    d522:	689b      	ldr	r3, [r3, #8]
    d524:	b913      	cbnz	r3, d52c <mbedtls_mpi_exp_mod+0x288>
        mbedtls_mpi_free( &RR );
    d526:	a80b      	add	r0, sp, #44	; 0x2c
    d528:	f7ff f965 	bl	c7f6 <mbedtls_mpi_free>

    return( ret );
}
    d52c:	4620      	mov	r0, r4
    d52e:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    d532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    d536:	2706      	movs	r7, #6
    d538:	e713      	b.n	d362 <mbedtls_mpi_exp_mod+0xbe>
    d53a:	2705      	movs	r7, #5
    d53c:	e711      	b.n	d362 <mbedtls_mpi_exp_mod+0xbe>
    d53e:	2704      	movs	r7, #4
    d540:	e70f      	b.n	d362 <mbedtls_mpi_exp_mod+0xbe>
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    d542:	220c      	movs	r2, #12
    d544:	99e4      	ldr	r1, [sp, #912]	; 0x390
    d546:	a80b      	add	r0, sp, #44	; 0x2c
    d548:	e75c      	b.n	d404 <mbedtls_mpi_exp_mod+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    d54a:	4649      	mov	r1, r9
    d54c:	a81d      	add	r0, sp, #116	; 0x74
    d54e:	f7ff f9a6 	bl	c89e <mbedtls_mpi_copy>
    d552:	e76d      	b.n	d430 <mbedtls_mpi_exp_mod+0x18c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    d554:	230c      	movs	r3, #12
        j =  one << ( wsize - 1 );
    d556:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    d55a:	6869      	ldr	r1, [r5, #4]
    d55c:	fa03 f309 	lsl.w	r3, r3, r9
    d560:	aa1a      	add	r2, sp, #104	; 0x68
    d562:	eb02 0803 	add.w	r8, r2, r3
    d566:	4640      	mov	r0, r8
    d568:	3101      	adds	r1, #1
    d56a:	f7ff f956 	bl	c81a <mbedtls_mpi_grow>
    d56e:	2800      	cmp	r0, #0
    d570:	d1be      	bne.n	d4f0 <mbedtls_mpi_exp_mod+0x24c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    d572:	4640      	mov	r0, r8
    d574:	a91d      	add	r1, sp, #116	; 0x74
    d576:	f7ff f992 	bl	c89e <mbedtls_mpi_copy>
    d57a:	2800      	cmp	r0, #0
    d57c:	d1b8      	bne.n	d4f0 <mbedtls_mpi_exp_mod+0x24c>
        for( i = 0; i < wsize - 1; i++ )
    d57e:	46a2      	mov	sl, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    d580:	462a      	mov	r2, r5
    d582:	4641      	mov	r1, r8
    d584:	4640      	mov	r0, r8
    d586:	9b03      	ldr	r3, [sp, #12]
    d588:	f8cd b000 	str.w	fp, [sp]
        for( i = 0; i < wsize - 1; i++ )
    d58c:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    d590:	f7ff f892 	bl	c6b8 <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    d594:	45ca      	cmp	sl, r9
    d596:	d3f3      	bcc.n	d580 <mbedtls_mpi_exp_mod+0x2dc>
        j =  one << ( wsize - 1 );
    d598:	f04f 0a01 	mov.w	sl, #1
    d59c:	fa0a f909 	lsl.w	r9, sl, r9
        for( i = j + 1; i < ( one << wsize ); i++ )
    d5a0:	44d1      	add	r9, sl
    d5a2:	fa0a fa07 	lsl.w	sl, sl, r7
    d5a6:	45ca      	cmp	sl, r9
    d5a8:	f67f af68 	bls.w	d47c <mbedtls_mpi_exp_mod+0x1d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    d5ac:	6869      	ldr	r1, [r5, #4]
    d5ae:	f108 0b0c 	add.w	fp, r8, #12
    d5b2:	4658      	mov	r0, fp
    d5b4:	3101      	adds	r1, #1
    d5b6:	f7ff f930 	bl	c81a <mbedtls_mpi_grow>
    d5ba:	2800      	cmp	r0, #0
    d5bc:	d198      	bne.n	d4f0 <mbedtls_mpi_exp_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    d5be:	4641      	mov	r1, r8
    d5c0:	4658      	mov	r0, fp
    d5c2:	f7ff f96c 	bl	c89e <mbedtls_mpi_copy>
    d5c6:	2800      	cmp	r0, #0
    d5c8:	d192      	bne.n	d4f0 <mbedtls_mpi_exp_mod+0x24c>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    d5ca:	ab0e      	add	r3, sp, #56	; 0x38
    d5cc:	9300      	str	r3, [sp, #0]
    d5ce:	462a      	mov	r2, r5
    d5d0:	4658      	mov	r0, fp
    d5d2:	9b03      	ldr	r3, [sp, #12]
    d5d4:	a91d      	add	r1, sp, #116	; 0x74
    d5d6:	f7ff f86f 	bl	c6b8 <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    d5da:	46d8      	mov	r8, fp
    d5dc:	f109 0901 	add.w	r9, r9, #1
    d5e0:	e7e1      	b.n	d5a6 <mbedtls_mpi_exp_mod+0x302>
        state = 2;
    d5e2:	f04f 0a02 	mov.w	sl, #2
    d5e6:	e751      	b.n	d48c <mbedtls_mpi_exp_mod+0x1e8>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    d5e8:	f04f 0b20 	mov.w	fp, #32
            nblimbs--;
    d5ec:	9b04      	ldr	r3, [sp, #16]
    d5ee:	3b01      	subs	r3, #1
    d5f0:	9304      	str	r3, [sp, #16]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    d5f2:	9b05      	ldr	r3, [sp, #20]
    d5f4:	9a04      	ldr	r2, [sp, #16]
    d5f6:	689b      	ldr	r3, [r3, #8]
        bufsize--;
    d5f8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        ei = (E->p[nblimbs] >> bufsize) & 1;
    d5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d600:	fa23 f30b 	lsr.w	r3, r3, fp
        if( ei == 0 && state == 0 )
    d604:	f013 0301 	ands.w	r3, r3, #1
    d608:	d10f      	bne.n	d62a <mbedtls_mpi_exp_mod+0x386>
    d60a:	f1ba 0f00 	cmp.w	sl, #0
    d60e:	f43f af3d 	beq.w	d48c <mbedtls_mpi_exp_mod+0x1e8>
        if( ei == 0 && state == 1 )
    d612:	f1ba 0f01 	cmp.w	sl, #1
    d616:	d108      	bne.n	d62a <mbedtls_mpi_exp_mod+0x386>
            mpi_montmul( X, X, N, mm, &T );
    d618:	ab0e      	add	r3, sp, #56	; 0x38
    d61a:	9300      	str	r3, [sp, #0]
    d61c:	462a      	mov	r2, r5
    d61e:	4631      	mov	r1, r6
    d620:	4630      	mov	r0, r6
    d622:	9b03      	ldr	r3, [sp, #12]
    d624:	f7ff f848 	bl	c6b8 <mpi_montmul>
            continue;
    d628:	e730      	b.n	d48c <mbedtls_mpi_exp_mod+0x1e8>
        nbits++;
    d62a:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
    d62e:	eba7 0208 	sub.w	r2, r7, r8
    d632:	4093      	lsls	r3, r2
        if( nbits == wsize )
    d634:	4547      	cmp	r7, r8
        wbits |= ( ei << ( wsize - nbits ) );
    d636:	ea49 0903 	orr.w	r9, r9, r3
        if( nbits == wsize )
    d63a:	d1d2      	bne.n	d5e2 <mbedtls_mpi_exp_mod+0x33e>
            for( i = 0; i < wsize; i++ )
    d63c:	f04f 0a00 	mov.w	sl, #0
                mpi_montmul( X, X, N, mm, &T );
    d640:	ab0e      	add	r3, sp, #56	; 0x38
    d642:	9300      	str	r3, [sp, #0]
    d644:	462a      	mov	r2, r5
    d646:	4631      	mov	r1, r6
    d648:	4630      	mov	r0, r6
    d64a:	9b03      	ldr	r3, [sp, #12]
            for( i = 0; i < wsize; i++ )
    d64c:	f10a 0a01 	add.w	sl, sl, #1
                mpi_montmul( X, X, N, mm, &T );
    d650:	f7ff f832 	bl	c6b8 <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    d654:	45d0      	cmp	r8, sl
    d656:	d8f3      	bhi.n	d640 <mbedtls_mpi_exp_mod+0x39c>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    d658:	2301      	movs	r3, #1
    for( size_t i = 0; i < T_size; i++ )
    d65a:	f04f 0a00 	mov.w	sl, #0
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    d65e:	fa03 f308 	lsl.w	r3, r3, r8
    for( size_t i = 0; i < T_size; i++ )
    d662:	f10d 0868 	add.w	r8, sp, #104	; 0x68
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    d666:	4649      	mov	r1, r9
    d668:	4650      	mov	r0, sl
    d66a:	9309      	str	r3, [sp, #36]	; 0x24
    d66c:	f000 f83f 	bl	d6ee <mbedtls_ct_size_bool_eq>
    d670:	4641      	mov	r1, r8
    d672:	b2c2      	uxtb	r2, r0
    d674:	a811      	add	r0, sp, #68	; 0x44
    d676:	f000 f852 	bl	d71e <mbedtls_mpi_safe_cond_assign>
    d67a:	9007      	str	r0, [sp, #28]
    d67c:	bb58      	cbnz	r0, d6d6 <mbedtls_mpi_exp_mod+0x432>
    for( size_t i = 0; i < T_size; i++ )
    d67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d680:	f10a 0a01 	add.w	sl, sl, #1
    d684:	4553      	cmp	r3, sl
    d686:	f108 080c 	add.w	r8, r8, #12
    d68a:	d1ec      	bne.n	d666 <mbedtls_mpi_exp_mod+0x3c2>
            mpi_montmul( X, &WW, N, mm, &T );
    d68c:	ab0e      	add	r3, sp, #56	; 0x38
    d68e:	9300      	str	r3, [sp, #0]
    d690:	462a      	mov	r2, r5
    d692:	4630      	mov	r0, r6
    d694:	9b03      	ldr	r3, [sp, #12]
    d696:	a911      	add	r1, sp, #68	; 0x44
    d698:	f7ff f80e 	bl	c6b8 <mpi_montmul>
            nbits = 0;
    d69c:	e9dd 9a07 	ldrd	r9, sl, [sp, #28]
            wbits = 0;
    d6a0:	46c8      	mov	r8, r9
    d6a2:	e6f3      	b.n	d48c <mbedtls_mpi_exp_mod+0x1e8>
        mpi_montmul( X, X, N, mm, &T );
    d6a4:	462a      	mov	r2, r5
    d6a6:	4631      	mov	r1, r6
    d6a8:	4630      	mov	r0, r6
    d6aa:	9b03      	ldr	r3, [sp, #12]
    d6ac:	f8cd a000 	str.w	sl, [sp]
        wbits <<= 1;
    d6b0:	ea4f 0949 	mov.w	r9, r9, lsl #1
        mpi_montmul( X, X, N, mm, &T );
    d6b4:	f7ff f800 	bl	c6b8 <mpi_montmul>
        if( ( wbits & ( one << wsize ) ) != 0 )
    d6b8:	ea1b 0f09 	tst.w	fp, r9
    d6bc:	d007      	beq.n	d6ce <mbedtls_mpi_exp_mod+0x42a>
            mpi_montmul( X, &W[1], N, mm, &T );
    d6be:	462a      	mov	r2, r5
    d6c0:	4630      	mov	r0, r6
    d6c2:	9b03      	ldr	r3, [sp, #12]
    d6c4:	f8cd a000 	str.w	sl, [sp]
    d6c8:	a91d      	add	r1, sp, #116	; 0x74
    d6ca:	f7fe fff5 	bl	c6b8 <mpi_montmul>
    for( i = 0; i < nbits; i++ )
    d6ce:	9b04      	ldr	r3, [sp, #16]
    d6d0:	3301      	adds	r3, #1
    d6d2:	9304      	str	r3, [sp, #16]
    d6d4:	e6e8      	b.n	d4a8 <mbedtls_mpi_exp_mod+0x204>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    d6d6:	9c07      	ldr	r4, [sp, #28]
    d6d8:	e70b      	b.n	d4f2 <mbedtls_mpi_exp_mod+0x24e>
        mbedtls_mpi_free( &W[i] );
    d6da:	ab1a      	add	r3, sp, #104	; 0x68
    d6dc:	fb07 3005 	mla	r0, r7, r5, r3
    d6e0:	f7ff f889 	bl	c7f6 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    d6e4:	3501      	adds	r5, #1
    d6e6:	e70b      	b.n	d500 <mbedtls_mpi_exp_mod+0x25c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    d6e8:	f06f 0403 	mvn.w	r4, #3
    d6ec:	e71e      	b.n	d52c <mbedtls_mpi_exp_mod+0x288>

0000d6ee <mbedtls_ct_size_bool_eq>:

unsigned mbedtls_ct_size_bool_eq( size_t x,
                                  size_t y )
{
    /* diff = 0 if x == y, non-zero otherwise */
    const size_t diff = x ^ y;
    d6ee:	4041      	eors	r1, r0
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* diff_msb's most significant bit is equal to x != y */
    const size_t diff_msb = ( diff | (size_t) -diff );
    d6f0:	4248      	negs	r0, r1
    d6f2:	4308      	orrs	r0, r1

    /* diff1 = (x != y) ? 1 : 0 */
    const unsigned diff1 = diff_msb >> ( sizeof( diff_msb ) * 8 - 1 );

    return( 1 ^ diff1 );
}
    d6f4:	43c0      	mvns	r0, r0
    d6f6:	0fc0      	lsrs	r0, r0, #31
    d6f8:	4770      	bx	lr

0000d6fa <mbedtls_ct_mpi_uint_cond_assign>:

void mbedtls_ct_mpi_uint_cond_assign( size_t n,
                                      mbedtls_mpi_uint *dest,
                                      const mbedtls_mpi_uint *src,
                                      unsigned char condition )
{
    d6fa:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    d6fc:	2500      	movs	r5, #0
    const mbedtls_mpi_uint mask = -condition;
    d6fe:	425f      	negs	r7, r3
    for( i = 0; i < n; i++ )
    d700:	3904      	subs	r1, #4
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    d702:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    d704:	4285      	cmp	r5, r0
    d706:	d100      	bne.n	d70a <mbedtls_ct_mpi_uint_cond_assign+0x10>
}
    d708:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    d70a:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    d70e:	f851 4f04 	ldr.w	r4, [r1, #4]!
    d712:	403e      	ands	r6, r7
    d714:	401c      	ands	r4, r3
    d716:	4334      	orrs	r4, r6
    d718:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    d71a:	3501      	adds	r5, #1
    d71c:	e7f2      	b.n	d704 <mbedtls_ct_mpi_uint_cond_assign+0xa>

0000d71e <mbedtls_mpi_safe_cond_assign>:
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X,
                                  const mbedtls_mpi *Y,
                                  unsigned char assign )
{
    d71e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d722:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    limb_mask = mbedtls_ct_mpi_uint_mask( assign );;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    d724:	6849      	ldr	r1, [r1, #4]
{
    d726:	4605      	mov	r5, r0
    d728:	4691      	mov	r9, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    d72a:	f7ff f876 	bl	c81a <mbedtls_mpi_grow>
    d72e:	4680      	mov	r8, r0
    d730:	b9c8      	cbnz	r0, d766 <mbedtls_mpi_safe_cond_assign+0x48>
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
    d732:	f1c9 0600 	rsb	r6, r9, #0
    d736:	ea46 0609 	orr.w	r6, r6, r9
    d73a:	17f6      	asrs	r6, r6, #31
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );

    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );

    for( i = Y->n; i < X->n; i++ )
        X->p[i] &= ~limb_mask;
    d73c:	43f6      	mvns	r6, r6
    unsigned uif0 = if0 + 1;
    d73e:	682b      	ldr	r3, [r5, #0]
    unsigned uif1 = if1 + 1;
    d740:	683c      	ldr	r4, [r7, #0]
    unsigned uif0 = if0 + 1;
    d742:	3301      	adds	r3, #1
    unsigned uif1 = if1 + 1;
    d744:	3401      	adds	r4, #1
    return( (int) ur - 1 );
    d746:	405c      	eors	r4, r3
    d748:	ea04 0449 	and.w	r4, r4, r9, lsl #1
    d74c:	405c      	eors	r4, r3
    d74e:	3c01      	subs	r4, #1
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );
    d750:	602c      	str	r4, [r5, #0]
    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );
    d752:	464b      	mov	r3, r9
    d754:	68ba      	ldr	r2, [r7, #8]
    d756:	68a9      	ldr	r1, [r5, #8]
    d758:	6878      	ldr	r0, [r7, #4]
    d75a:	f7ff ffce 	bl	d6fa <mbedtls_ct_mpi_uint_cond_assign>
    for( i = Y->n; i < X->n; i++ )
    d75e:	687b      	ldr	r3, [r7, #4]
    d760:	686a      	ldr	r2, [r5, #4]
    d762:	429a      	cmp	r2, r3
    d764:	d802      	bhi.n	d76c <mbedtls_mpi_safe_cond_assign+0x4e>

cleanup:
    return( ret );
}
    d766:	4640      	mov	r0, r8
    d768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        X->p[i] &= ~limb_mask;
    d76c:	68a9      	ldr	r1, [r5, #8]
    d76e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    d772:	4032      	ands	r2, r6
    d774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = Y->n; i < X->n; i++ )
    d778:	3301      	adds	r3, #1
    d77a:	e7f1      	b.n	d760 <mbedtls_mpi_safe_cond_assign+0x42>

0000d77c <platform_calloc_uninit>:
}
    d77c:	2000      	movs	r0, #0
    d77e:	4770      	bx	lr

0000d780 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    d780:	4770      	bx	lr

0000d782 <platform_free_uninit>:
static void platform_free_uninit( void *ptr )
    d782:	4770      	bx	lr

0000d784 <mbedtls_rsa_import>:
{
    d784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d788:	4604      	mov	r4, r0
    d78a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    d78e:	4691      	mov	r9, r2
    d790:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    d792:	460d      	mov	r5, r1
    d794:	b951      	cbnz	r1, d7ac <mbedtls_rsa_import+0x28>
    d796:	f1b9 0f00 	cmp.w	r9, #0
    d79a:	d110      	bne.n	d7be <mbedtls_rsa_import+0x3a>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    d79c:	f1b8 0f00 	cmp.w	r8, #0
    d7a0:	d115      	bne.n	d7ce <mbedtls_rsa_import+0x4a>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    d7a2:	b9e7      	cbnz	r7, d7de <mbedtls_rsa_import+0x5a>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    d7a4:	bb1e      	cbnz	r6, d7ee <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    d7a6:	bb55      	cbnz	r5, d7fe <mbedtls_rsa_import+0x7a>
    return( 0 );
    d7a8:	2000      	movs	r0, #0
    d7aa:	e006      	b.n	d7ba <mbedtls_rsa_import+0x36>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    d7ac:	3008      	adds	r0, #8
    d7ae:	f7ff f876 	bl	c89e <mbedtls_mpi_copy>
    d7b2:	2800      	cmp	r0, #0
    d7b4:	d0ef      	beq.n	d796 <mbedtls_rsa_import+0x12>
    d7b6:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    d7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    d7be:	4649      	mov	r1, r9
    d7c0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d7c4:	f7ff f86b 	bl	c89e <mbedtls_mpi_copy>
    d7c8:	2800      	cmp	r0, #0
    d7ca:	d0e7      	beq.n	d79c <mbedtls_rsa_import+0x18>
    d7cc:	e7f3      	b.n	d7b6 <mbedtls_rsa_import+0x32>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    d7ce:	4641      	mov	r1, r8
    d7d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
    d7d4:	f7ff f863 	bl	c89e <mbedtls_mpi_copy>
    d7d8:	2800      	cmp	r0, #0
    d7da:	d0e2      	beq.n	d7a2 <mbedtls_rsa_import+0x1e>
    d7dc:	e7eb      	b.n	d7b6 <mbedtls_rsa_import+0x32>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    d7de:	4639      	mov	r1, r7
    d7e0:	f104 0020 	add.w	r0, r4, #32
    d7e4:	f7ff f85b 	bl	c89e <mbedtls_mpi_copy>
    d7e8:	2800      	cmp	r0, #0
    d7ea:	d0db      	beq.n	d7a4 <mbedtls_rsa_import+0x20>
    d7ec:	e7e3      	b.n	d7b6 <mbedtls_rsa_import+0x32>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    d7ee:	4631      	mov	r1, r6
    d7f0:	f104 0014 	add.w	r0, r4, #20
    d7f4:	f7ff f853 	bl	c89e <mbedtls_mpi_copy>
    d7f8:	2800      	cmp	r0, #0
    d7fa:	d0d4      	beq.n	d7a6 <mbedtls_rsa_import+0x22>
    d7fc:	e7db      	b.n	d7b6 <mbedtls_rsa_import+0x32>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    d7fe:	f104 0008 	add.w	r0, r4, #8
    d802:	f7ff f8ca 	bl	c99a <mbedtls_mpi_size>
    d806:	6060      	str	r0, [r4, #4]
    d808:	e7ce      	b.n	d7a8 <mbedtls_rsa_import+0x24>

0000d80a <mbedtls_rsa_init>:
{
    d80a:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    d80c:	22ac      	movs	r2, #172	; 0xac
    d80e:	2100      	movs	r1, #0
{
    d810:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    d812:	f7fe f9c2 	bl	bb9a <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    d816:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    d818:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    d81c:	bd10      	pop	{r4, pc}

0000d81e <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    d81e:	b510      	push	{r4, lr}
    if( ctx == NULL )
    d820:	4604      	mov	r4, r0
    d822:	b3a0      	cbz	r0, d88e <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    d824:	308c      	adds	r0, #140	; 0x8c
    d826:	f7fe ffe6 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    d82a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    d82e:	f7fe ffe2 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    d832:	f104 0068 	add.w	r0, r4, #104	; 0x68
    d836:	f7fe ffde 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    d83a:	f104 0020 	add.w	r0, r4, #32
    d83e:	f7fe ffda 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    d842:	f104 0038 	add.w	r0, r4, #56	; 0x38
    d846:	f7fe ffd6 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    d84a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d84e:	f7fe ffd2 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    d852:	f104 0014 	add.w	r0, r4, #20
    d856:	f7fe ffce 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    d85a:	f104 0008 	add.w	r0, r4, #8
    d85e:	f7fe ffca 	bl	c7f6 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    d862:	f104 0080 	add.w	r0, r4, #128	; 0x80
    d866:	f7fe ffc6 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    d86a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    d86e:	f7fe ffc2 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    d872:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d876:	f7fe ffbe 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    d87a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    d87e:	f7fe ffba 	bl	c7f6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    d882:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    d886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    d88a:	f7fe bfb4 	b.w	c7f6 <mbedtls_mpi_free>
}
    d88e:	bd10      	pop	{r4, pc}

0000d890 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    d890:	226c      	movs	r2, #108	; 0x6c
    d892:	2100      	movs	r1, #0
    d894:	f7fe b981 	b.w	bb9a <memset>

0000d898 <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    d898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d89c:	4605      	mov	r5, r0
    d89e:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    d8a0:	4614      	mov	r4, r2
    d8a2:	b37a      	cbz	r2, d904 <mbedtls_sha256_update+0x6c>
        return( 0 );

    left = ctx->total[0] & 0x3F;
    d8a4:	6803      	ldr	r3, [r0, #0]
    d8a6:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
    d8aa:	189b      	adds	r3, r3, r2
    d8ac:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
    d8ae:	bf22      	ittt	cs
    d8b0:	6843      	ldrcs	r3, [r0, #4]
    d8b2:	3301      	addcs	r3, #1
    d8b4:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
    d8b6:	b19f      	cbz	r7, d8e0 <mbedtls_sha256_update+0x48>
    fill = 64 - left;
    d8b8:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    d8bc:	454a      	cmp	r2, r9
    d8be:	d30f      	bcc.n	d8e0 <mbedtls_sha256_update+0x48>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    d8c0:	f100 0828 	add.w	r8, r0, #40	; 0x28
    d8c4:	464a      	mov	r2, r9
    d8c6:	eb08 0007 	add.w	r0, r8, r7
    d8ca:	f7fe f95b 	bl	bb84 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d8ce:	4641      	mov	r1, r8
    d8d0:	4628      	mov	r0, r5
    d8d2:	f7f9 fa55 	bl	6d80 <mbedtls_internal_sha256_process>
    d8d6:	b9b0      	cbnz	r0, d906 <mbedtls_sha256_update+0x6e>
            return( ret );

        input += fill;
    d8d8:	443c      	add	r4, r7
        ilen  -= fill;
        left = 0;
    d8da:	4607      	mov	r7, r0
        input += fill;
    d8dc:	444e      	add	r6, r9
        ilen  -= fill;
    d8de:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    d8e0:	4426      	add	r6, r4
    d8e2:	e004      	b.n	d8ee <mbedtls_sha256_update+0x56>
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    d8e4:	4628      	mov	r0, r5
    d8e6:	f7f9 fa4b 	bl	6d80 <mbedtls_internal_sha256_process>
    d8ea:	b960      	cbnz	r0, d906 <mbedtls_sha256_update+0x6e>
            return( ret );

        input += 64;
        ilen  -= 64;
    d8ec:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    d8ee:	2c3f      	cmp	r4, #63	; 0x3f
    d8f0:	eba6 0104 	sub.w	r1, r6, r4
    d8f4:	d8f6      	bhi.n	d8e4 <mbedtls_sha256_update+0x4c>
    }

    if( ilen > 0 )
    d8f6:	b12c      	cbz	r4, d904 <mbedtls_sha256_update+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    d8f8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    d8fc:	4622      	mov	r2, r4
    d8fe:	4438      	add	r0, r7
    d900:	f7fe f940 	bl	bb84 <memcpy>
        return( 0 );
    d904:	2000      	movs	r0, #0

    return( 0 );
}
    d906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000d90a <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    d90a:	b570      	push	{r4, r5, r6, lr}
    d90c:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    d90e:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    d910:	6803      	ldr	r3, [r0, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    d912:	f100 0628 	add.w	r6, r0, #40	; 0x28
    used = ctx->total[0] & 0x3F;
    d916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    d91a:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
    d91c:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    d91e:	4403      	add	r3, r0
{
    d920:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    d922:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    d926:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    d92a:	d861      	bhi.n	d9f0 <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
    d92c:	2100      	movs	r1, #0
    d92e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    d932:	f7fe f932 	bl	bb9a <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    d936:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    d93a:	0f5a      	lsrs	r2, r3, #29
    d93c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    d940:	00db      	lsls	r3, r3, #3
    d942:	ba12      	rev	r2, r2
    d944:	ba1b      	rev	r3, r3

    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d946:	4631      	mov	r1, r6
    d948:	4620      	mov	r0, r4
    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    d94a:	6622      	str	r2, [r4, #96]	; 0x60
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );
    d94c:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d94e:	f7f9 fa17 	bl	6d80 <mbedtls_internal_sha256_process>
    d952:	2800      	cmp	r0, #0
    d954:	d14b      	bne.n	d9ee <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE( ctx->state[0], output,  0 );
    d956:	7ae3      	ldrb	r3, [r4, #11]
    d958:	702b      	strb	r3, [r5, #0]
    d95a:	8963      	ldrh	r3, [r4, #10]
    d95c:	706b      	strb	r3, [r5, #1]
    d95e:	68a3      	ldr	r3, [r4, #8]
    d960:	0a1b      	lsrs	r3, r3, #8
    d962:	70ab      	strb	r3, [r5, #2]
    d964:	68a3      	ldr	r3, [r4, #8]
    d966:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_BE( ctx->state[1], output,  4 );
    d968:	7be3      	ldrb	r3, [r4, #15]
    d96a:	712b      	strb	r3, [r5, #4]
    d96c:	89e3      	ldrh	r3, [r4, #14]
    d96e:	716b      	strb	r3, [r5, #5]
    d970:	68e3      	ldr	r3, [r4, #12]
    d972:	0a1b      	lsrs	r3, r3, #8
    d974:	71ab      	strb	r3, [r5, #6]
    d976:	68e3      	ldr	r3, [r4, #12]
    d978:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_BE( ctx->state[2], output,  8 );
    d97a:	7ce3      	ldrb	r3, [r4, #19]
    d97c:	722b      	strb	r3, [r5, #8]
    d97e:	8a63      	ldrh	r3, [r4, #18]
    d980:	726b      	strb	r3, [r5, #9]
    d982:	6923      	ldr	r3, [r4, #16]
    d984:	0a1b      	lsrs	r3, r3, #8
    d986:	72ab      	strb	r3, [r5, #10]
    d988:	6923      	ldr	r3, [r4, #16]
    d98a:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_BE( ctx->state[3], output, 12 );
    d98c:	7de3      	ldrb	r3, [r4, #23]
    d98e:	732b      	strb	r3, [r5, #12]
    d990:	8ae3      	ldrh	r3, [r4, #22]
    d992:	736b      	strb	r3, [r5, #13]
    d994:	6963      	ldr	r3, [r4, #20]
    d996:	0a1b      	lsrs	r3, r3, #8
    d998:	73ab      	strb	r3, [r5, #14]
    d99a:	6963      	ldr	r3, [r4, #20]
    d99c:	73eb      	strb	r3, [r5, #15]
    MBEDTLS_PUT_UINT32_BE( ctx->state[4], output, 16 );
    d99e:	7ee3      	ldrb	r3, [r4, #27]
    d9a0:	742b      	strb	r3, [r5, #16]
    d9a2:	8b63      	ldrh	r3, [r4, #26]
    d9a4:	746b      	strb	r3, [r5, #17]
    d9a6:	69a3      	ldr	r3, [r4, #24]
    d9a8:	0a1b      	lsrs	r3, r3, #8
    d9aa:	74ab      	strb	r3, [r5, #18]
    d9ac:	69a3      	ldr	r3, [r4, #24]
    d9ae:	74eb      	strb	r3, [r5, #19]
    MBEDTLS_PUT_UINT32_BE( ctx->state[5], output, 20 );
    d9b0:	7fe3      	ldrb	r3, [r4, #31]
    d9b2:	752b      	strb	r3, [r5, #20]
    d9b4:	8be3      	ldrh	r3, [r4, #30]
    d9b6:	756b      	strb	r3, [r5, #21]
    d9b8:	69e3      	ldr	r3, [r4, #28]
    d9ba:	0a1b      	lsrs	r3, r3, #8
    d9bc:	75ab      	strb	r3, [r5, #22]
    d9be:	69e3      	ldr	r3, [r4, #28]
    d9c0:	75eb      	strb	r3, [r5, #23]
    MBEDTLS_PUT_UINT32_BE( ctx->state[6], output, 24 );
    d9c2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    d9c6:	762b      	strb	r3, [r5, #24]
    d9c8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    d9ca:	766b      	strb	r3, [r5, #25]
    d9cc:	6a23      	ldr	r3, [r4, #32]
    d9ce:	0a1b      	lsrs	r3, r3, #8
    d9d0:	76ab      	strb	r3, [r5, #26]
    d9d2:	6a23      	ldr	r3, [r4, #32]
    d9d4:	76eb      	strb	r3, [r5, #27]

#if defined(MBEDTLS_SHA224_C)
    if( ctx->is224 == 0 )
    d9d6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d9d8:	b94b      	cbnz	r3, d9ee <mbedtls_sha256_finish+0xe4>
#endif
        MBEDTLS_PUT_UINT32_BE( ctx->state[7], output, 28 );
    d9da:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d9de:	772b      	strb	r3, [r5, #28]
    d9e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d9e2:	776b      	strb	r3, [r5, #29]
    d9e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d9e6:	0a1b      	lsrs	r3, r3, #8
    d9e8:	77ab      	strb	r3, [r5, #30]
    d9ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d9ec:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    d9ee:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    d9f0:	2100      	movs	r1, #0
    d9f2:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    d9f6:	f7fe f8d0 	bl	bb9a <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d9fa:	4631      	mov	r1, r6
    d9fc:	4620      	mov	r0, r4
    d9fe:	f7f9 f9bf 	bl	6d80 <mbedtls_internal_sha256_process>
    da02:	2800      	cmp	r0, #0
    da04:	d1f3      	bne.n	d9ee <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    da06:	4601      	mov	r1, r0
    da08:	2238      	movs	r2, #56	; 0x38
    da0a:	4630      	mov	r0, r6
    da0c:	e791      	b.n	d932 <mbedtls_sha256_finish+0x28>

0000da0e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    da0e:	4700      	bx	r0

0000da10 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    da10:	f000 bcd5 	b.w	e3be <z_impl_k_busy_wait>

0000da14 <clock_stop>:
{
    da14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    da16:	2803      	cmp	r0, #3
    da18:	f200 80a7 	bhi.w	db6a <clock_stop+0x156>
    da1c:	e8df f000 	tbb	[pc, r0]
    da20:	35271902 	.word	0x35271902
    da24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    da28:	2202      	movs	r2, #2
    da2a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    da2e:	2200      	movs	r2, #0
    da30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    da34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    da38:	2201      	movs	r2, #1
    da3a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    da3c:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    da3e:	2301      	movs	r3, #1
    da40:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    da44:	2803      	cmp	r0, #3
    da46:	f200 8090 	bhi.w	db6a <clock_stop+0x156>
    da4a:	e8df f000 	tbb	[pc, r0]
    da4e:	692c      	.short	0x692c
    da50:	9a78      	.short	0x9a78
    p_reg->INTENCLR = mask;
    da52:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    da56:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    da58:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    da5a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    da5e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    da62:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    da66:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    da6a:	605a      	str	r2, [r3, #4]
    da6c:	e7e7      	b.n	da3e <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    da6e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    da72:	f44f 7200 	mov.w	r2, #512	; 0x200
    da76:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    da7a:	2200      	movs	r2, #0
    da7c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    da80:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    da84:	2201      	movs	r2, #1
    da86:	625a      	str	r2, [r3, #36]	; 0x24
    da88:	e7d8      	b.n	da3c <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    da8a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    da8e:	f44f 7280 	mov.w	r2, #256	; 0x100
    da92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    da96:	2200      	movs	r2, #0
    da98:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    da9c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    daa0:	2201      	movs	r2, #1
    daa2:	61da      	str	r2, [r3, #28]
    daa4:	e7ca      	b.n	da3c <clock_stop+0x28>
    switch (domain)
    daa6:	f242 7510 	movw	r5, #10000	; 0x2710
    daaa:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    daae:	b36c      	cbz	r4, db0c <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    dab0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    dab4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    dab8:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    daba:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    dabe:	03d9      	lsls	r1, r3, #15
    dac0:	d553      	bpl.n	db6a <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    dac2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    dac6:	2801      	cmp	r0, #1
    dac8:	d14f      	bne.n	db6a <clock_stop+0x156>
    daca:	f7ff ffa1 	bl	da10 <nrfx_busy_wait>
    dace:	3d01      	subs	r5, #1
    dad0:	d1ed      	bne.n	daae <clock_stop+0x9a>
    dad2:	e04a      	b.n	db6a <clock_stop+0x156>
    dad4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    dad8:	2801      	cmp	r0, #1
    dada:	d146      	bne.n	db6a <clock_stop+0x156>
    dadc:	f7ff ff98 	bl	da10 <nrfx_busy_wait>
    dae0:	3d01      	subs	r5, #1
    dae2:	d152      	bne.n	db8a <clock_stop+0x176>
    dae4:	e041      	b.n	db6a <clock_stop+0x156>
    dae6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    daea:	2801      	cmp	r0, #1
    daec:	d13d      	bne.n	db6a <clock_stop+0x156>
    daee:	f7ff ff8f 	bl	da10 <nrfx_busy_wait>
    daf2:	3d01      	subs	r5, #1
    daf4:	d039      	beq.n	db6a <clock_stop+0x156>
            if (p_clk_src != NULL)
    daf6:	b1c4      	cbz	r4, db2a <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    daf8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    dafc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    db00:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    db02:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    db06:	03db      	lsls	r3, r3, #15
    db08:	d52f      	bpl.n	db6a <clock_stop+0x156>
    db0a:	e7ec      	b.n	dae6 <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    db0c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    db10:	03da      	lsls	r2, r3, #15
    db12:	d52a      	bpl.n	db6a <clock_stop+0x156>
    db14:	2001      	movs	r0, #1
    db16:	f7ff ff7b 	bl	da10 <nrfx_busy_wait>
    db1a:	3d01      	subs	r5, #1
    db1c:	d1f6      	bne.n	db0c <clock_stop+0xf8>
    db1e:	e024      	b.n	db6a <clock_stop+0x156>
    switch (domain)
    db20:	f242 7510 	movw	r5, #10000	; 0x2710
    db24:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    db28:	e7e5      	b.n	daf6 <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    db2a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    db2e:	03d8      	lsls	r0, r3, #15
    db30:	d51b      	bpl.n	db6a <clock_stop+0x156>
    db32:	2001      	movs	r0, #1
    db34:	f7ff ff6c 	bl	da10 <nrfx_busy_wait>
    db38:	3d01      	subs	r5, #1
    db3a:	d1f6      	bne.n	db2a <clock_stop+0x116>
    db3c:	e015      	b.n	db6a <clock_stop+0x156>
    switch (domain)
    db3e:	f242 7510 	movw	r5, #10000	; 0x2710
    db42:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    db46:	b194      	cbz	r4, db6e <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    db48:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    db4c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    db50:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    db52:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    db56:	03d9      	lsls	r1, r3, #15
    db58:	d507      	bpl.n	db6a <clock_stop+0x156>
    db5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    db5e:	2801      	cmp	r0, #1
    db60:	d103      	bne.n	db6a <clock_stop+0x156>
    db62:	f7ff ff55 	bl	da10 <nrfx_busy_wait>
    db66:	3d01      	subs	r5, #1
    db68:	d1ed      	bne.n	db46 <clock_stop+0x132>
}
    db6a:	b002      	add	sp, #8
    db6c:	bd70      	pop	{r4, r5, r6, pc}
    db6e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    db72:	03da      	lsls	r2, r3, #15
    db74:	d5f9      	bpl.n	db6a <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    db76:	2001      	movs	r0, #1
    db78:	f7ff ff4a 	bl	da10 <nrfx_busy_wait>
    db7c:	3d01      	subs	r5, #1
    db7e:	d1f6      	bne.n	db6e <clock_stop+0x15a>
    db80:	e7f3      	b.n	db6a <clock_stop+0x156>
    switch (domain)
    db82:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    db86:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    db8a:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    db8e:	03db      	lsls	r3, r3, #15
    db90:	d5eb      	bpl.n	db6a <clock_stop+0x156>
    db92:	2c00      	cmp	r4, #0
    db94:	d19e      	bne.n	dad4 <clock_stop+0xc0>
    db96:	2001      	movs	r0, #1
    db98:	e7a0      	b.n	dadc <clock_stop+0xc8>

0000db9a <nrfx_clock_start>:
{
    db9a:	b508      	push	{r3, lr}
    switch (domain)
    db9c:	2803      	cmp	r0, #3
    db9e:	d819      	bhi.n	dbd4 <nrfx_clock_start+0x3a>
    dba0:	e8df f000 	tbb	[pc, r0]
    dba4:	4c3e3202 	.word	0x4c3e3202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    dba8:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    dbac:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    dbb0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    dbb4:	03c9      	lsls	r1, r1, #15
    dbb6:	d40e      	bmi.n	dbd6 <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    dbb8:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    dbbc:	07db      	lsls	r3, r3, #31
    dbbe:	d513      	bpl.n	dbe8 <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    dbc0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    dbc4:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    dbc8:	3b01      	subs	r3, #1
    dbca:	2b01      	cmp	r3, #1
    dbcc:	d809      	bhi.n	dbe2 <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
    dbce:	2302      	movs	r3, #2
    dbd0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    dbd4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    dbd6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    dbda:	2b02      	cmp	r3, #2
    dbdc:	d005      	beq.n	dbea <nrfx_clock_start+0x50>
    dbde:	2b01      	cmp	r3, #1
    dbe0:	d002      	beq.n	dbe8 <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    dbe2:	2000      	movs	r0, #0
    dbe4:	f7ff ff16 	bl	da14 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    dbe8:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    dbea:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    dbee:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dbf2:	2300      	movs	r3, #0
    dbf4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    dbf8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    dbfc:	2302      	movs	r3, #2
    dbfe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc02:	2301      	movs	r3, #1
    dc04:	6093      	str	r3, [r2, #8]
}
    dc06:	e7e5      	b.n	dbd4 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc08:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dc0c:	2200      	movs	r2, #0
    dc0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    dc12:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    dc16:	2201      	movs	r2, #1
    dc18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc1c:	601a      	str	r2, [r3, #0]
}
    dc1e:	e7d9      	b.n	dbd4 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc20:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dc24:	2200      	movs	r2, #0
    dc26:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    dc2a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    dc2e:	f44f 7200 	mov.w	r2, #512	; 0x200
    dc32:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc36:	2201      	movs	r2, #1
    dc38:	621a      	str	r2, [r3, #32]
}
    dc3a:	e7cb      	b.n	dbd4 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc3c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dc40:	2200      	movs	r2, #0
    dc42:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    dc46:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    dc4a:	f44f 7280 	mov.w	r2, #256	; 0x100
    dc4e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc52:	2201      	movs	r2, #1
    dc54:	619a      	str	r2, [r3, #24]
}
    dc56:	e7bd      	b.n	dbd4 <nrfx_clock_start+0x3a>

0000dc58 <nrfx_clock_stop>:
    clock_stop(domain);
    dc58:	f7ff bedc 	b.w	da14 <clock_stop>

0000dc5c <nrf_gpio_reconfigure>:
{
    dc5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dc5e:	4616      	mov	r6, r2
    dc60:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    dc64:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dc66:	a801      	add	r0, sp, #4
{
    dc68:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dc6a:	f7f9 fab9 	bl	71e0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    dc6e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    dc70:	f1b6 0c00 	subs.w	ip, r6, #0
    dc74:	bf18      	it	ne
    dc76:	f04f 0c01 	movne.w	ip, #1
    dc7a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    dc7e:	1e0b      	subs	r3, r1, #0
    dc80:	bf18      	it	ne
    dc82:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    dc84:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    dc86:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    dc8a:	bf14      	ite	ne
    dc8c:	f04f 0c0c 	movne.w	ip, #12
    dc90:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    dc94:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    dc96:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    dc9a:	bf14      	ite	ne
    dc9c:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    dca0:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    dca4:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    dca6:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    dcaa:	bf14      	ite	ne
    dcac:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    dcb0:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    dcb4:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    dcb8:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    dcbc:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    dcc0:	b101      	cbz	r1, dcc4 <nrf_gpio_reconfigure+0x68>
    dcc2:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    dcc4:	b10e      	cbz	r6, dcca <nrf_gpio_reconfigure+0x6e>
    dcc6:	7836      	ldrb	r6, [r6, #0]
    dcc8:	0076      	lsls	r6, r6, #1
    dcca:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    dccc:	b10d      	cbz	r5, dcd2 <nrf_gpio_reconfigure+0x76>
    dcce:	782d      	ldrb	r5, [r5, #0]
    dcd0:	00ad      	lsls	r5, r5, #2
    dcd2:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    dcd4:	b10c      	cbz	r4, dcda <nrf_gpio_reconfigure+0x7e>
    dcd6:	7824      	ldrb	r4, [r4, #0]
    dcd8:	0224      	lsls	r4, r4, #8
    dcda:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    dcdc:	b10f      	cbz	r7, dce2 <nrf_gpio_reconfigure+0x86>
    dcde:	783f      	ldrb	r7, [r7, #0]
    dce0:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    dce2:	430c      	orrs	r4, r1
    dce4:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    dce6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    dcea:	b003      	add	sp, #12
    dcec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dcee <nrf_gpio_cfg_sense_set>:
{
    dcee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    dcf0:	f10d 030f 	add.w	r3, sp, #15
    dcf4:	9301      	str	r3, [sp, #4]
    dcf6:	2300      	movs	r3, #0
{
    dcf8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    dcfc:	461a      	mov	r2, r3
    dcfe:	4619      	mov	r1, r3
    dd00:	9300      	str	r3, [sp, #0]
    dd02:	f7ff ffab 	bl	dc5c <nrf_gpio_reconfigure>
}
    dd06:	b005      	add	sp, #20
    dd08:	f85d fb04 	ldr.w	pc, [sp], #4

0000dd0c <partial_word_create>:
    value32 = 0xFFFFFFFF;
    dd0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    dd10:	b082      	sub	sp, #8
    value32 = 0xFFFFFFFF;
    dd12:	9301      	str	r3, [sp, #4]
    byte_shift = addr % NVMC_BYTES_IN_WORD;
    dd14:	f000 0003 	and.w	r0, r0, #3
    dd18:	ab01      	add	r3, sp, #4
    dd1a:	4403      	add	r3, r0
    dd1c:	440a      	add	r2, r1
    for (uint32_t i = 0; i < bytes_count; i++)
    dd1e:	4291      	cmp	r1, r2
    dd20:	d102      	bne.n	dd28 <partial_word_create+0x1c>
}
    dd22:	9801      	ldr	r0, [sp, #4]
    dd24:	b002      	add	sp, #8
    dd26:	4770      	bx	lr
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
    dd28:	f811 0b01 	ldrb.w	r0, [r1], #1
    dd2c:	f803 0b01 	strb.w	r0, [r3], #1
    for (uint32_t i = 0; i < bytes_count; i++)
    dd30:	e7f5      	b.n	dd1e <partial_word_create+0x12>

0000dd32 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    dd32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    dd36:	4770      	bx	lr

0000dd38 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    dd38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    dd3c:	4770      	bx	lr

0000dd3e <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    dd3e:	f44f 7080 	mov.w	r0, #256	; 0x100
    dd42:	4770      	bx	lr

0000dd44 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    dd44:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    dd46:	f7f9 fe75 	bl	7a34 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    dd4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    dd4e:	f7f9 b9ef 	b.w	7130 <nrfx_clock_irq_handler>

0000dd52 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
    dd52:	2100      	movs	r1, #0
    dd54:	f7f9 bf4e 	b.w	7bf4 <nrf_gpio_cfg.constprop.0>

0000dd58 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
    dd58:	2302      	movs	r3, #2
    dd5a:	f7f9 bea3 	b.w	7aa4 <qspi_xfer>

0000dd5e <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
    dd5e:	2303      	movs	r3, #3
    dd60:	f7f9 bea0 	b.w	7aa4 <qspi_xfer>

0000dd64 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
    dd64:	2100      	movs	r1, #0
    dd66:	2002      	movs	r0, #2
    dd68:	f7fa b93a 	b.w	7fe0 <nrfx_qspi_erase>

0000dd6c <nrfx_usbd_consumer>:
{
    dd6c:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    dd6e:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    dd70:	429c      	cmp	r4, r3
    dd72:	d209      	bcs.n	dd88 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    dd74:	2500      	movs	r5, #0
    dd76:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    dd78:	6809      	ldr	r1, [r1, #0]
    dd7a:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    dd7c:	429a      	cmp	r2, r3
    dd7e:	d10c      	bne.n	dd9a <nrfx_usbd_consumer+0x2e>
    dd80:	1e20      	subs	r0, r4, #0
    dd82:	bf18      	it	ne
    dd84:	2001      	movne	r0, #1
}
    dd86:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    dd88:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    dd8a:	680d      	ldr	r5, [r1, #0]
        size -= data_size;
    dd8c:	1ae4      	subs	r4, r4, r3
        p_next->p_data = p_transfer->p_data;
    dd8e:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    dd90:	6808      	ldr	r0, [r1, #0]
        p_transfer->size = size;
    dd92:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    dd94:	4418      	add	r0, r3
    dd96:	6008      	str	r0, [r1, #0]
    dd98:	e7f0      	b.n	dd7c <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    dd9a:	2000      	movs	r0, #0
    dd9c:	e7f3      	b.n	dd86 <nrfx_usbd_consumer+0x1a>

0000dd9e <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    dd9e:	684b      	ldr	r3, [r1, #4]
    dda0:	429a      	cmp	r2, r3
    dda2:	bf28      	it	cs
    dda4:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    dda6:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    dda8:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    ddac:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    ddae:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    ddb0:	1a80      	subs	r0, r0, r2
    ddb2:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    ddb4:	4413      	add	r3, r2
}
    ddb6:	3800      	subs	r0, #0
    ddb8:	bf18      	it	ne
    ddba:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    ddbc:	600b      	str	r3, [r1, #0]
}
    ddbe:	4770      	bx	lr

0000ddc0 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    ddc0:	684b      	ldr	r3, [r1, #4]
    ddc2:	429a      	cmp	r2, r3
    ddc4:	bf28      	it	cs
    ddc6:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    ddc8:	b16a      	cbz	r2, dde6 <nrfx_usbd_feeder_ram_zlp+0x26>
    ddca:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    ddcc:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    ddd0:	684b      	ldr	r3, [r1, #4]
}
    ddd2:	1e10      	subs	r0, r2, #0
    p_transfer->size -= tx_size;
    ddd4:	eba3 0302 	sub.w	r3, r3, r2
    ddd8:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    ddda:	680b      	ldr	r3, [r1, #0]
}
    dddc:	bf18      	it	ne
    ddde:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    dde0:	4413      	add	r3, r2
    dde2:	600b      	str	r3, [r1, #0]
}
    dde4:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    dde6:	4613      	mov	r3, r2
    dde8:	e7f0      	b.n	ddcc <nrfx_usbd_feeder_ram_zlp+0xc>

0000ddea <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    ddea:	43c3      	mvns	r3, r0
    ddec:	f000 000f 	and.w	r0, r0, #15
    ddf0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
}
    ddf4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    ddf8:	4770      	bx	lr

0000ddfa <ev_started_handler>:
}
    ddfa:	4770      	bx	lr

0000ddfc <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    ddfc:	2087      	movs	r0, #135	; 0x87
    ddfe:	f7fa ba1d 	b.w	823c <nrf_usbd_epin_dma_handler>

0000de02 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    de02:	2086      	movs	r0, #134	; 0x86
    de04:	f7fa ba1a 	b.w	823c <nrf_usbd_epin_dma_handler>

0000de08 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    de08:	2085      	movs	r0, #133	; 0x85
    de0a:	f7fa ba17 	b.w	823c <nrf_usbd_epin_dma_handler>

0000de0e <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    de0e:	2084      	movs	r0, #132	; 0x84
    de10:	f7fa ba14 	b.w	823c <nrf_usbd_epin_dma_handler>

0000de14 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    de14:	2083      	movs	r0, #131	; 0x83
    de16:	f7fa ba11 	b.w	823c <nrf_usbd_epin_dma_handler>

0000de1a <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    de1a:	2082      	movs	r0, #130	; 0x82
    de1c:	f7fa ba0e 	b.w	823c <nrf_usbd_epin_dma_handler>

0000de20 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    de20:	2081      	movs	r0, #129	; 0x81
    de22:	f7fa ba0b 	b.w	823c <nrf_usbd_epin_dma_handler>

0000de26 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    de26:	f7fa ba25 	b.w	8274 <nrf_usbd_ep0in_dma_handler>

0000de2a <nrfx_usbd_ep_max_packet_size_set>:
{
    de2a:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    de2c:	f7fa f93e 	bl	80ac <ep_state_access>
    p_state->max_packet_size = size;
    de30:	8181      	strh	r1, [r0, #12]
}
    de32:	bd08      	pop	{r3, pc}

0000de34 <nrfx_usbd_ep_status_get>:
{
    de34:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    de36:	f7fa f939 	bl	80ac <ep_state_access>
	__asm__ volatile(
    de3a:	f04f 0220 	mov.w	r2, #32
    de3e:	f3ef 8311 	mrs	r3, BASEPRI
    de42:	f382 8812 	msr	BASEPRI_MAX, r2
    de46:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    de4a:	6882      	ldr	r2, [r0, #8]
    de4c:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    de4e:	6802      	ldr	r2, [r0, #0]
    de50:	b92a      	cbnz	r2, de5e <nrfx_usbd_ep_status_get+0x2a>
    de52:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    de54:	f383 8811 	msr	BASEPRI, r3
    de58:	f3bf 8f6f 	isb	sy
}
    de5c:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    de5e:	2004      	movs	r0, #4
    de60:	e7f8      	b.n	de54 <nrfx_usbd_ep_status_get+0x20>

0000de62 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    de62:	2007      	movs	r0, #7
    de64:	f7fa bcd4 	b.w	8810 <nrf_usbd_epout_dma_handler>

0000de68 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    de68:	2006      	movs	r0, #6
    de6a:	f7fa bcd1 	b.w	8810 <nrf_usbd_epout_dma_handler>

0000de6e <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    de6e:	2005      	movs	r0, #5
    de70:	f7fa bcce 	b.w	8810 <nrf_usbd_epout_dma_handler>

0000de74 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    de74:	2004      	movs	r0, #4
    de76:	f7fa bccb 	b.w	8810 <nrf_usbd_epout_dma_handler>

0000de7a <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    de7a:	2003      	movs	r0, #3
    de7c:	f7fa bcc8 	b.w	8810 <nrf_usbd_epout_dma_handler>

0000de80 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    de80:	2002      	movs	r0, #2
    de82:	f7fa bcc5 	b.w	8810 <nrf_usbd_epout_dma_handler>

0000de86 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    de86:	2001      	movs	r0, #1
    de88:	f7fa bcc2 	b.w	8810 <nrf_usbd_epout_dma_handler>

0000de8c <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    de8c:	f7fa bdbc 	b.w	8a08 <usbd_ep_abort>

0000de90 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    de90:	4770      	bx	lr

0000de92 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    de92:	b140      	cbz	r0, dea6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    de94:	68c3      	ldr	r3, [r0, #12]
    de96:	7858      	ldrb	r0, [r3, #1]
    de98:	f010 0001 	ands.w	r0, r0, #1
    de9c:	bf1e      	ittt	ne
    de9e:	7818      	ldrbne	r0, [r3, #0]
    dea0:	fab0 f080 	clzne	r0, r0
    dea4:	0940      	lsrne	r0, r0, #5
}
    dea6:	4770      	bx	lr

0000dea8 <arch_system_halt>:
	__asm__ volatile(
    dea8:	f04f 0220 	mov.w	r2, #32
    deac:	f3ef 8311 	mrs	r3, BASEPRI
    deb0:	f382 8812 	msr	BASEPRI_MAX, r2
    deb4:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    deb8:	e7fe      	b.n	deb8 <arch_system_halt+0x10>

0000deba <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    deba:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    debc:	f7ff fff4 	bl	dea8 <arch_system_halt>

0000dec0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dec2:	4605      	mov	r5, r0
    dec4:	460e      	mov	r6, r1
    dec6:	f04f 0320 	mov.w	r3, #32
    deca:	f3ef 8711 	mrs	r7, BASEPRI
    dece:	f383 8812 	msr	BASEPRI_MAX, r3
    ded2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    ded6:	f7fb fe5f 	bl	9b98 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    deda:	4631      	mov	r1, r6
    dedc:	4604      	mov	r4, r0
    dede:	4628      	mov	r0, r5
    dee0:	f7ff ffeb 	bl	deba <k_sys_fatal_error_handler>
	__asm__ volatile(
    dee4:	f387 8811 	msr	BASEPRI, r7
    dee8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    deec:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    deee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    def2:	f7f6 b99d 	b.w	4230 <z_impl_k_thread_abort>

0000def6 <z_early_memset>:
	(void) memset(dst, c, n);
    def6:	f7fd be50 	b.w	bb9a <memset>

0000defa <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    defa:	f7fd be43 	b.w	bb84 <memcpy>

0000defe <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    defe:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    df02:	4313      	orrs	r3, r2
    df04:	f013 0303 	ands.w	r3, r3, #3
    df08:	d10c      	bne.n	df24 <create_free_list+0x26>
	slab->free_list = NULL;
    df0a:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    df0c:	6881      	ldr	r1, [r0, #8]
    df0e:	4299      	cmp	r1, r3
    df10:	d801      	bhi.n	df16 <create_free_list+0x18>
	return 0;
    df12:	2000      	movs	r0, #0
    df14:	4770      	bx	lr
		*(char **)p = slab->free_list;
    df16:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    df18:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    df1a:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    df1c:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    df1e:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    df20:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    df22:	e7f3      	b.n	df0c <create_free_list+0xe>
		return -EINVAL;
    df24:	f06f 0015 	mvn.w	r0, #21
}
    df28:	4770      	bx	lr

0000df2a <k_mem_slab_init>:
{
    df2a:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    df2c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    df30:	2300      	movs	r3, #0
	slab->buffer = buffer;
    df32:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    df34:	6183      	str	r3, [r0, #24]
{
    df36:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    df38:	f7ff ffe1 	bl	defe <create_free_list>
	if (rc < 0) {
    df3c:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    df3e:	bfa8      	it	ge
    df40:	e9c4 4400 	strdge	r4, r4, [r4]
}
    df44:	bd10      	pop	{r4, pc}

0000df46 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    df46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df48:	4604      	mov	r4, r0
    df4a:	460d      	mov	r5, r1
	__asm__ volatile(
    df4c:	f04f 0320 	mov.w	r3, #32
    df50:	f3ef 8611 	mrs	r6, BASEPRI
    df54:	f383 8812 	msr	BASEPRI_MAX, r3
    df58:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    df5c:	6947      	ldr	r7, [r0, #20]
    df5e:	b977      	cbnz	r7, df7e <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    df60:	f000 f998 	bl	e294 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    df64:	b158      	cbz	r0, df7e <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    df66:	682a      	ldr	r2, [r5, #0]
    df68:	6747      	str	r7, [r0, #116]	; 0x74
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    df6a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    df6c:	f000 f95b 	bl	e226 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    df70:	4631      	mov	r1, r6
    df72:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    df76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    df7a:	f7fb bcc1 	b.w	9900 <z_reschedule>
	**(char ***) mem = slab->free_list;
    df7e:	682b      	ldr	r3, [r5, #0]
    df80:	6962      	ldr	r2, [r4, #20]
    df82:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    df84:	682b      	ldr	r3, [r5, #0]
    df86:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    df88:	69a3      	ldr	r3, [r4, #24]
    df8a:	3b01      	subs	r3, #1
    df8c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    df8e:	f386 8811 	msr	BASEPRI, r6
    df92:	f3bf 8f6f 	isb	sy
}
    df96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000df98 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    df98:	f3ef 8005 	mrs	r0, IPSR
}
    df9c:	3800      	subs	r0, #0
    df9e:	bf18      	it	ne
    dfa0:	2001      	movne	r0, #1
    dfa2:	4770      	bx	lr

0000dfa4 <z_impl_k_thread_name_set>:
}
    dfa4:	f06f 0057 	mvn.w	r0, #87	; 0x57
    dfa8:	4770      	bx	lr

0000dfaa <z_impl_k_thread_start>:
	z_sched_start(thread);
    dfaa:	f7fb bcbb 	b.w	9924 <z_sched_start>

0000dfae <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    dfae:	b508      	push	{r3, lr}
	__asm__ volatile(
    dfb0:	f04f 0220 	mov.w	r2, #32
    dfb4:	f3ef 8311 	mrs	r3, BASEPRI
    dfb8:	f382 8812 	msr	BASEPRI_MAX, r2
    dfbc:	f3bf 8f6f 	isb	sy
    dfc0:	f7f5 fe80 	bl	3cc4 <arch_cpu_idle>
    dfc4:	e7f4      	b.n	dfb0 <idle+0x2>

0000dfc6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    dfc6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    dfca:	428b      	cmp	r3, r1
    dfcc:	d001      	beq.n	dfd2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    dfce:	f7fb bc51 	b.w	9874 <z_set_prio>
}
    dfd2:	2000      	movs	r0, #0
    dfd4:	4770      	bx	lr

0000dfd6 <z_impl_k_mutex_init>:
{
    dfd6:	4603      	mov	r3, r0
	mutex->owner = NULL;
    dfd8:	2000      	movs	r0, #0
    dfda:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    dfde:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    dfe2:	4770      	bx	lr

0000dfe4 <queue_insert>:
{
    dfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dfe8:	4699      	mov	r9, r3
    dfea:	4604      	mov	r4, r0
    dfec:	460d      	mov	r5, r1
    dfee:	4690      	mov	r8, r2
    dff0:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    dff4:	f100 0608 	add.w	r6, r0, #8
    dff8:	f04f 0220 	mov.w	r2, #32
    dffc:	f3ef 8711 	mrs	r7, BASEPRI
    e000:	f382 8812 	msr	BASEPRI_MAX, r2
    e004:	f3bf 8f6f 	isb	sy
	if (is_append) {
    e008:	b103      	cbz	r3, e00c <queue_insert+0x28>
	return list->tail;
    e00a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    e00c:	4630      	mov	r0, r6
    e00e:	f000 f941 	bl	e294 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    e012:	b158      	cbz	r0, e02c <queue_insert+0x48>
    e014:	2300      	movs	r3, #0
    e016:	f8c0 8014 	str.w	r8, [r0, #20]
    e01a:	6743      	str	r3, [r0, #116]	; 0x74
	z_ready_thread(thread);
    e01c:	f000 f903 	bl	e226 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    e020:	4630      	mov	r0, r6
    e022:	4639      	mov	r1, r7
    e024:	f7fb fc6c 	bl	9900 <z_reschedule>
		return 0;
    e028:	2000      	movs	r0, #0
    e02a:	e00c      	b.n	e046 <queue_insert+0x62>
	if (alloc) {
    e02c:	f1b9 0f00 	cmp.w	r9, #0
    e030:	d01c      	beq.n	e06c <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    e032:	2108      	movs	r1, #8
    e034:	f7fc f82a 	bl	a08c <z_thread_aligned_alloc>
		if (anode == NULL) {
    e038:	b938      	cbnz	r0, e04a <queue_insert+0x66>
	__asm__ volatile(
    e03a:	f387 8811 	msr	BASEPRI, r7
    e03e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    e042:	f06f 000b 	mvn.w	r0, #11
}
    e046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    e04a:	2201      	movs	r2, #1
		anode->data = data;
    e04c:	f8c0 8004 	str.w	r8, [r0, #4]
    e050:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e052:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e054:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    e058:	b965      	cbnz	r5, e074 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e05a:	6822      	ldr	r2, [r4, #0]
    e05c:	430a      	orrs	r2, r1
    e05e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e060:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    e062:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e064:	2a00      	cmp	r2, #0
    e066:	d1db      	bne.n	e020 <queue_insert+0x3c>
	list->tail = node;
    e068:	6060      	str	r0, [r4, #4]
}
    e06a:	e7d9      	b.n	e020 <queue_insert+0x3c>
}
    e06c:	4640      	mov	r0, r8
	node->next_and_flags = flags;
    e06e:	f8c8 9000 	str.w	r9, [r8]
}
    e072:	e7ee      	b.n	e052 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e074:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    e076:	2a03      	cmp	r2, #3
    e078:	d80b      	bhi.n	e092 <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e07a:	6001      	str	r1, [r0, #0]
	return list->tail;
    e07c:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    e07e:	b911      	cbnz	r1, e086 <queue_insert+0xa2>
	list->head = node;
    e080:	e9c4 0000 	strd	r0, r0, [r4]
}
    e084:	e7cc      	b.n	e020 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e086:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e088:	f002 0203 	and.w	r2, r2, #3
    e08c:	4302      	orrs	r2, r0
    e08e:	600a      	str	r2, [r1, #0]
    e090:	e7ea      	b.n	e068 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e092:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e096:	430a      	orrs	r2, r1
    e098:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e09a:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e09c:	f002 0203 	and.w	r2, r2, #3
    e0a0:	ea40 0302 	orr.w	r3, r0, r2
    e0a4:	602b      	str	r3, [r5, #0]
}
    e0a6:	e7bb      	b.n	e020 <queue_insert+0x3c>

0000e0a8 <z_queue_node_peek>:
{
    e0a8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    e0aa:	4604      	mov	r4, r0
    e0ac:	b130      	cbz	r0, e0bc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e0ae:	6802      	ldr	r2, [r0, #0]
    e0b0:	0793      	lsls	r3, r2, #30
    e0b2:	d003      	beq.n	e0bc <z_queue_node_peek+0x14>
		ret = anode->data;
    e0b4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    e0b6:	b109      	cbz	r1, e0bc <z_queue_node_peek+0x14>
			k_free(anode);
    e0b8:	f000 f9c4 	bl	e444 <k_free>
}
    e0bc:	4620      	mov	r0, r4
    e0be:	bd10      	pop	{r4, pc}

0000e0c0 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
    e0c0:	2301      	movs	r3, #1
{
    e0c2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    e0c4:	9300      	str	r3, [sp, #0]
    e0c6:	2300      	movs	r3, #0
{
    e0c8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    e0ca:	4619      	mov	r1, r3
    e0cc:	f7ff ff8a 	bl	dfe4 <queue_insert>
}
    e0d0:	b003      	add	sp, #12
    e0d2:	f85d fb04 	ldr.w	pc, [sp], #4

0000e0d6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    e0d6:	b13a      	cbz	r2, e0e8 <z_impl_k_sem_init+0x12>
    e0d8:	428a      	cmp	r2, r1
    e0da:	d305      	bcc.n	e0e8 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    e0dc:	e9c0 1202 	strd	r1, r2, [r0, #8]
    e0e0:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    e0e4:	2000      	movs	r0, #0
    e0e6:	4770      	bx	lr
		return -EINVAL;
    e0e8:	f06f 0015 	mvn.w	r0, #21
}
    e0ec:	4770      	bx	lr

0000e0ee <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
    e0ee:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
    e0f0:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    e0f2:	408b      	lsls	r3, r1
    e0f4:	ea22 0303 	bic.w	r3, r2, r3
    e0f8:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    e0fa:	fa22 f001 	lsr.w	r0, r2, r1
}
    e0fe:	f000 0001 	and.w	r0, r0, #1
    e102:	4770      	bx	lr

0000e104 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    e104:	b120      	cbz	r0, e110 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    e106:	2200      	movs	r2, #0
    e108:	3080      	adds	r0, #128	; 0x80
    e10a:	4611      	mov	r1, r2
    e10c:	f000 b918 	b.w	e340 <z_sched_wake>
}
    e110:	4770      	bx	lr

0000e112 <k_work_init>:
{
    e112:	b538      	push	{r3, r4, r5, lr}
    e114:	4604      	mov	r4, r0
    e116:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e118:	2210      	movs	r2, #16
    e11a:	2100      	movs	r1, #0
    e11c:	f7fd fd3d 	bl	bb9a <memset>
    e120:	6065      	str	r5, [r4, #4]
}
    e122:	bd38      	pop	{r3, r4, r5, pc}

0000e124 <z_work_submit_to_queue>:
{
    e124:	b513      	push	{r0, r1, r4, lr}
    e126:	9001      	str	r0, [sp, #4]
    e128:	4608      	mov	r0, r1
	__asm__ volatile(
    e12a:	f04f 0320 	mov.w	r3, #32
    e12e:	f3ef 8411 	mrs	r4, BASEPRI
    e132:	f383 8812 	msr	BASEPRI_MAX, r3
    e136:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    e13a:	a901      	add	r1, sp, #4
    e13c:	f7fb fa76 	bl	962c <submit_to_queue_locked>
	__asm__ volatile(
    e140:	f384 8811 	msr	BASEPRI, r4
    e144:	f3bf 8f6f 	isb	sy
}
    e148:	b002      	add	sp, #8
    e14a:	bd10      	pop	{r4, pc}

0000e14c <k_work_submit_to_queue>:
{
    e14c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    e14e:	f7ff ffe9 	bl	e124 <z_work_submit_to_queue>
	if (ret > 0) {
    e152:	1e04      	subs	r4, r0, #0
    e154:	dd09      	ble.n	e16a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    e156:	f04f 0320 	mov.w	r3, #32
    e15a:	f3ef 8011 	mrs	r0, BASEPRI
    e15e:	f383 8812 	msr	BASEPRI_MAX, r3
    e162:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e166:	f000 f8c5 	bl	e2f4 <z_reschedule_irqlock>
}
    e16a:	4620      	mov	r0, r4
    e16c:	bd10      	pop	{r4, pc}

0000e16e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    e16e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    e172:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e174:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e176:	2300      	movs	r3, #0
	node->prev = NULL;
    e178:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    e17c:	4770      	bx	lr

0000e17e <unpend_thread_no_timeout>:
{
    e17e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    e180:	f7ff fff5 	bl	e16e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e184:	7b43      	ldrb	r3, [r0, #13]
    e186:	f023 0302 	bic.w	r3, r3, #2
    e18a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    e18c:	2300      	movs	r3, #0
    e18e:	6083      	str	r3, [r0, #8]
}
    e190:	bd08      	pop	{r3, pc}

0000e192 <add_to_waitq_locked>:
{
    e192:	b538      	push	{r3, r4, r5, lr}
    e194:	4604      	mov	r4, r0
    e196:	460d      	mov	r5, r1
	unready_thread(thread);
    e198:	f7fb faf0 	bl	977c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    e19c:	7b63      	ldrb	r3, [r4, #13]
    e19e:	f043 0302 	orr.w	r3, r3, #2
    e1a2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    e1a4:	b1e5      	cbz	r5, e1e0 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    e1a6:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    e1a8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e1aa:	429d      	cmp	r5, r3
    e1ac:	d109      	bne.n	e1c2 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    e1ae:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    e1b0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    e1b4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e1b6:	606c      	str	r4, [r5, #4]
}
    e1b8:	e012      	b.n	e1e0 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    e1ba:	686a      	ldr	r2, [r5, #4]
    e1bc:	429a      	cmp	r2, r3
    e1be:	d0f6      	beq.n	e1ae <add_to_waitq_locked+0x1c>
    e1c0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e1c2:	2b00      	cmp	r3, #0
    e1c4:	d0f3      	beq.n	e1ae <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    e1c6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    e1ca:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    e1ce:	428a      	cmp	r2, r1
    e1d0:	d0f3      	beq.n	e1ba <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e1d2:	4291      	cmp	r1, r2
    e1d4:	ddf1      	ble.n	e1ba <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    e1d6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    e1d8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    e1dc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    e1de:	605c      	str	r4, [r3, #4]
}
    e1e0:	bd38      	pop	{r3, r4, r5, pc}

0000e1e2 <z_thread_timeout>:
{
    e1e2:	4601      	mov	r1, r0
    e1e4:	b510      	push	{r4, lr}
    e1e6:	f04f 0320 	mov.w	r3, #32
    e1ea:	f3ef 8411 	mrs	r4, BASEPRI
    e1ee:	f383 8812 	msr	BASEPRI_MAX, r3
    e1f2:	f3bf 8f6f 	isb	sy
		if (!killed) {
    e1f6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    e1fa:	f013 0f28 	tst.w	r3, #40	; 0x28
    e1fe:	d10d      	bne.n	e21c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    e200:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    e204:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    e206:	b10b      	cbz	r3, e20c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    e208:	f7ff ffb9 	bl	e17e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    e20c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    e210:	f023 0314 	bic.w	r3, r3, #20
    e214:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    e218:	f7fb fae0 	bl	97dc <ready_thread>
	__asm__ volatile(
    e21c:	f384 8811 	msr	BASEPRI, r4
    e220:	f3bf 8f6f 	isb	sy
}
    e224:	bd10      	pop	{r4, pc}

0000e226 <z_ready_thread>:
{
    e226:	b510      	push	{r4, lr}
	__asm__ volatile(
    e228:	f04f 0320 	mov.w	r3, #32
    e22c:	f3ef 8411 	mrs	r4, BASEPRI
    e230:	f383 8812 	msr	BASEPRI_MAX, r3
    e234:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    e238:	f7fb fad0 	bl	97dc <ready_thread>
	__asm__ volatile(
    e23c:	f384 8811 	msr	BASEPRI, r4
    e240:	f3bf 8f6f 	isb	sy
}
    e244:	bd10      	pop	{r4, pc}

0000e246 <z_unpend_thread_no_timeout>:
{
    e246:	b508      	push	{r3, lr}
	__asm__ volatile(
    e248:	f04f 0320 	mov.w	r3, #32
    e24c:	f3ef 8111 	mrs	r1, BASEPRI
    e250:	f383 8812 	msr	BASEPRI_MAX, r3
    e254:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    e258:	f7ff ff91 	bl	e17e <unpend_thread_no_timeout>
	__asm__ volatile(
    e25c:	f381 8811 	msr	BASEPRI, r1
    e260:	f3bf 8f6f 	isb	sy
}
    e264:	bd08      	pop	{r3, pc}

0000e266 <z_unpend1_no_timeout>:
{
    e266:	b508      	push	{r3, lr}
    e268:	4603      	mov	r3, r0
	__asm__ volatile(
    e26a:	f04f 0220 	mov.w	r2, #32
    e26e:	f3ef 8111 	mrs	r1, BASEPRI
    e272:	f382 8812 	msr	BASEPRI_MAX, r2
    e276:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e27a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e27c:	4283      	cmp	r3, r0
    e27e:	d007      	beq.n	e290 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    e280:	b108      	cbz	r0, e286 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    e282:	f7ff ff7c 	bl	e17e <unpend_thread_no_timeout>
	__asm__ volatile(
    e286:	f381 8811 	msr	BASEPRI, r1
    e28a:	f3bf 8f6f 	isb	sy
}
    e28e:	bd08      	pop	{r3, pc}
    e290:	2000      	movs	r0, #0
    e292:	e7f8      	b.n	e286 <z_unpend1_no_timeout+0x20>

0000e294 <z_unpend_first_thread>:
{
    e294:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e296:	f04f 0320 	mov.w	r3, #32
    e29a:	f3ef 8511 	mrs	r5, BASEPRI
    e29e:	f383 8812 	msr	BASEPRI_MAX, r3
    e2a2:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e2a6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e2a8:	42a0      	cmp	r0, r4
    e2aa:	d00d      	beq.n	e2c8 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    e2ac:	b134      	cbz	r4, e2bc <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    e2ae:	4620      	mov	r0, r4
    e2b0:	f7ff ff65 	bl	e17e <unpend_thread_no_timeout>
    e2b4:	f104 0018 	add.w	r0, r4, #24
    e2b8:	f000 f865 	bl	e386 <z_abort_timeout>
	__asm__ volatile(
    e2bc:	f385 8811 	msr	BASEPRI, r5
    e2c0:	f3bf 8f6f 	isb	sy
}
    e2c4:	4620      	mov	r0, r4
    e2c6:	bd38      	pop	{r3, r4, r5, pc}
    e2c8:	2400      	movs	r4, #0
    e2ca:	e7f7      	b.n	e2bc <z_unpend_first_thread+0x28>

0000e2cc <z_unpend_thread>:
{
    e2cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    e2ce:	f04f 0320 	mov.w	r3, #32
    e2d2:	f3ef 8411 	mrs	r4, BASEPRI
    e2d6:	f383 8812 	msr	BASEPRI_MAX, r3
    e2da:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    e2de:	f7ff ff4e 	bl	e17e <unpend_thread_no_timeout>
	__asm__ volatile(
    e2e2:	f384 8811 	msr	BASEPRI, r4
    e2e6:	f3bf 8f6f 	isb	sy
}
    e2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2ee:	3018      	adds	r0, #24
    e2f0:	f000 b849 	b.w	e386 <z_abort_timeout>

0000e2f4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e2f4:	4603      	mov	r3, r0
    e2f6:	b920      	cbnz	r0, e302 <z_reschedule_irqlock+0xe>
    e2f8:	f3ef 8205 	mrs	r2, IPSR
    e2fc:	b90a      	cbnz	r2, e302 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    e2fe:	f7f5 bd6d 	b.w	3ddc <arch_swap>
    e302:	f383 8811 	msr	BASEPRI, r3
    e306:	f3bf 8f6f 	isb	sy
}
    e30a:	4770      	bx	lr

0000e30c <z_reschedule_unlocked>:
	__asm__ volatile(
    e30c:	f04f 0320 	mov.w	r3, #32
    e310:	f3ef 8011 	mrs	r0, BASEPRI
    e314:	f383 8812 	msr	BASEPRI_MAX, r3
    e318:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e31c:	f7ff bfea 	b.w	e2f4 <z_reschedule_irqlock>

0000e320 <z_unpend_all>:
{
    e320:	b538      	push	{r3, r4, r5, lr}
    e322:	4605      	mov	r5, r0
	int need_sched = 0;
    e324:	2000      	movs	r0, #0
	return list->head == list;
    e326:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e328:	42a5      	cmp	r5, r4
    e32a:	d000      	beq.n	e32e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e32c:	b904      	cbnz	r4, e330 <z_unpend_all+0x10>
}
    e32e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    e330:	4620      	mov	r0, r4
    e332:	f7ff ffcb 	bl	e2cc <z_unpend_thread>
		z_ready_thread(thread);
    e336:	4620      	mov	r0, r4
    e338:	f7ff ff75 	bl	e226 <z_ready_thread>
		need_sched = 1;
    e33c:	2001      	movs	r0, #1
    e33e:	e7f2      	b.n	e326 <z_unpend_all+0x6>

0000e340 <z_sched_wake>:
{
    e340:	b538      	push	{r3, r4, r5, lr}
    e342:	f04f 0320 	mov.w	r3, #32
    e346:	f3ef 8511 	mrs	r5, BASEPRI
    e34a:	f383 8812 	msr	BASEPRI_MAX, r3
    e34e:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e352:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e354:	42a0      	cmp	r0, r4
    e356:	d012      	beq.n	e37e <z_sched_wake+0x3e>
		if (thread != NULL) {
    e358:	b19c      	cbz	r4, e382 <z_sched_wake+0x42>
    e35a:	6761      	str	r1, [r4, #116]	; 0x74
	thread->base.swap_data = data;
    e35c:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    e35e:	4620      	mov	r0, r4
    e360:	f7ff ff0d 	bl	e17e <unpend_thread_no_timeout>
    e364:	f104 0018 	add.w	r0, r4, #24
    e368:	f000 f80d 	bl	e386 <z_abort_timeout>
			ready_thread(thread);
    e36c:	4620      	mov	r0, r4
    e36e:	f7fb fa35 	bl	97dc <ready_thread>
			ret = true;
    e372:	2001      	movs	r0, #1
	__asm__ volatile(
    e374:	f385 8811 	msr	BASEPRI, r5
    e378:	f3bf 8f6f 	isb	sy
}
    e37c:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    e37e:	2000      	movs	r0, #0
    e380:	e7f8      	b.n	e374 <z_sched_wake+0x34>
    e382:	4620      	mov	r0, r4
    e384:	e7f6      	b.n	e374 <z_sched_wake+0x34>

0000e386 <z_abort_timeout>:
{
    e386:	b510      	push	{r4, lr}
	__asm__ volatile(
    e388:	f04f 0220 	mov.w	r2, #32
    e38c:	f3ef 8411 	mrs	r4, BASEPRI
    e390:	f382 8812 	msr	BASEPRI_MAX, r2
    e394:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    e398:	6803      	ldr	r3, [r0, #0]
    e39a:	b13b      	cbz	r3, e3ac <z_abort_timeout+0x26>
			remove_timeout(to);
    e39c:	f7fb fcb8 	bl	9d10 <remove_timeout>
			ret = 0;
    e3a0:	2000      	movs	r0, #0
	__asm__ volatile(
    e3a2:	f384 8811 	msr	BASEPRI, r4
    e3a6:	f3bf 8f6f 	isb	sy
}
    e3aa:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    e3ac:	f06f 0015 	mvn.w	r0, #21
    e3b0:	e7f7      	b.n	e3a2 <z_abort_timeout+0x1c>

0000e3b2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    e3b2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    e3b4:	f7fb fd9a 	bl	9eec <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    e3b8:	bd08      	pop	{r3, pc}

0000e3ba <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    e3ba:	f7fb bd97 	b.w	9eec <sys_clock_tick_get>

0000e3be <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    e3be:	b108      	cbz	r0, e3c4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    e3c0:	f7f3 bc94 	b.w	1cec <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    e3c4:	4770      	bx	lr

0000e3c6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e3c6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    e3ca:	bf08      	it	eq
    e3cc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    e3d0:	b538      	push	{r3, r4, r5, lr}
    e3d2:	460c      	mov	r4, r1
    e3d4:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e3d6:	d014      	beq.n	e402 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e3d8:	4308      	orrs	r0, r1
    e3da:	d103      	bne.n	e3e4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    e3dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    e3e0:	f7fb bd84 	b.w	9eec <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    e3e4:	f06f 0001 	mvn.w	r0, #1
    e3e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e3ec:	1b40      	subs	r0, r0, r5
    e3ee:	eb63 0101 	sbc.w	r1, r3, r1
    e3f2:	2900      	cmp	r1, #0
    e3f4:	da04      	bge.n	e400 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    e3f6:	f7fb fd79 	bl	9eec <sys_clock_tick_get>
    e3fa:	1940      	adds	r0, r0, r5
    e3fc:	eb41 0104 	adc.w	r1, r1, r4
}
    e400:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    e402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e406:	4601      	mov	r1, r0
    e408:	e7fa      	b.n	e400 <sys_clock_timeout_end_calc+0x3a>

0000e40a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    e40a:	b510      	push	{r4, lr}
    e40c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    e40e:	f7ff ffba 	bl	e386 <z_abort_timeout>

	if (inactive) {
    e412:	b9b0      	cbnz	r0, e442 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    e414:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e416:	b10b      	cbz	r3, e41c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    e418:	4620      	mov	r0, r4
    e41a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    e41c:	f104 0018 	add.w	r0, r4, #24
    e420:	f7ff ff21 	bl	e266 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    e424:	b168      	cbz	r0, e442 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    e426:	f7ff fefe 	bl	e226 <z_ready_thread>
	__asm__ volatile(
    e42a:	f04f 0320 	mov.w	r3, #32
    e42e:	f3ef 8011 	mrs	r0, BASEPRI
    e432:	f383 8812 	msr	BASEPRI_MAX, r3
    e436:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    e43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e43e:	f7ff bf59 	b.w	e2f4 <z_reschedule_irqlock>
    e442:	bd10      	pop	{r4, pc}

0000e444 <k_free>:
	if (ptr != NULL) {
    e444:	b120      	cbz	r0, e450 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    e446:	1f01      	subs	r1, r0, #4
    e448:	f850 0c04 	ldr.w	r0, [r0, #-4]
    e44c:	f000 b857 	b.w	e4fe <k_heap_free>
}
    e450:	4770      	bx	lr

0000e452 <boot_banner>:
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
#endif /* CONFIG_BOOT_BANNER */
}
    e452:	4770      	bx	lr

0000e454 <k_heap_init>:
{
    e454:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    e456:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    e45a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    e45e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    e460:	f7fc bc2a 	b.w	acb8 <sys_heap_init>

0000e464 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    e464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e468:	b085      	sub	sp, #20
    e46a:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    e46e:	4607      	mov	r7, r0
    e470:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e472:	4650      	mov	r0, sl
    e474:	4621      	mov	r1, r4
{
    e476:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e478:	f7ff ffa5 	bl	e3c6 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e47c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e480:	bf08      	it	eq
    e482:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e486:	4605      	mov	r5, r0
    e488:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e48a:	bf04      	itt	eq
    e48c:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    e490:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e494:	f107 0a14 	add.w	sl, r7, #20
    e498:	f04f 0320 	mov.w	r3, #32
    e49c:	f3ef 8411 	mrs	r4, BASEPRI
    e4a0:	f383 8812 	msr	BASEPRI_MAX, r3
    e4a4:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e4a8:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    e4ac:	464a      	mov	r2, r9
    e4ae:	4641      	mov	r1, r8
    e4b0:	4638      	mov	r0, r7
    e4b2:	f7fc fb8e 	bl	abd2 <sys_heap_aligned_alloc>
    e4b6:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    e4b8:	f7fb fd18 	bl	9eec <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    e4bc:	9b03      	ldr	r3, [sp, #12]
    e4be:	b13b      	cbz	r3, e4d0 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    e4c0:	f384 8811 	msr	BASEPRI, r4
    e4c4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    e4c8:	4618      	mov	r0, r3
    e4ca:	b005      	add	sp, #20
    e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    e4d0:	1a28      	subs	r0, r5, r0
    e4d2:	eb66 0101 	sbc.w	r1, r6, r1
    e4d6:	2801      	cmp	r0, #1
    e4d8:	f171 0200 	sbcs.w	r2, r1, #0
    e4dc:	dbf0      	blt.n	e4c0 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e4de:	e9cd 0100 	strd	r0, r1, [sp]
    e4e2:	465a      	mov	r2, fp
    e4e4:	4621      	mov	r1, r4
    e4e6:	4650      	mov	r0, sl
    e4e8:	f7fb f9ac 	bl	9844 <z_pend_curr>
	__asm__ volatile(
    e4ec:	f04f 0320 	mov.w	r3, #32
    e4f0:	f3ef 8411 	mrs	r4, BASEPRI
    e4f4:	f383 8812 	msr	BASEPRI_MAX, r3
    e4f8:	f3bf 8f6f 	isb	sy
	return k;
    e4fc:	e7d6      	b.n	e4ac <k_heap_aligned_alloc+0x48>

0000e4fe <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    e4fe:	b538      	push	{r3, r4, r5, lr}
    e500:	4604      	mov	r4, r0
    e502:	f04f 0320 	mov.w	r3, #32
    e506:	f3ef 8511 	mrs	r5, BASEPRI
    e50a:	f383 8812 	msr	BASEPRI_MAX, r3
    e50e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    e512:	f7fc fb15 	bl	ab40 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    e516:	f104 000c 	add.w	r0, r4, #12
    e51a:	f7ff ff01 	bl	e320 <z_unpend_all>
    e51e:	b130      	cbz	r0, e52e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    e520:	4629      	mov	r1, r5
    e522:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    e526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    e52a:	f7fb b9e9 	b.w	9900 <z_reschedule>
	__asm__ volatile(
    e52e:	f385 8811 	msr	BASEPRI, r5
    e532:	f3bf 8f6f 	isb	sy
}
    e536:	bd38      	pop	{r3, r4, r5, pc}
