
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

01000000 <_vector_table>:
 1000000:	50 5e 00 21 59 6d 00 01 c7 28 01 01 2d 6d 00 01     P^.!Ym...(..-m..
 1000010:	2d 6d 00 01 2d 6d 00 01 2d 6d 00 01 00 00 00 00     -m..-m..-m......
	...
 100002c:	a1 6a 00 01 2d 6d 00 01 00 00 00 00 49 6a 00 01     .j..-m......Ij..
 100003c:	2d 6d 00 01                                         -m..

01000040 <_irq_vector_table>:
 1000040:	21 6b 00 01 21 6b 00 01 21 6b 00 01 21 6b 00 01     !k..!k..!k..!k..
 1000050:	21 6b 00 01 21 6b 00 01 21 6b 00 01 21 6b 00 01     !k..!k..!k..!k..
 1000060:	53 2d 01 01 21 6b 00 01 21 6b 00 01 21 6b 00 01     S-..!k..!k..!k..
 1000070:	09 2d 01 01 21 6b 00 01 21 6b 00 01 21 6b 00 01     .-..!k..!k..!k..
 1000080:	21 6b 00 01 3d 2d 01 01 21 6b 00 01 21 6b 00 01     !k..=-..!k..!k..
 1000090:	21 6b 00 01 21 6b 00 01 21 6b 00 01 21 6b 00 01     !k..!k..!k..!k..
 10000a0:	21 6b 00 01 21 6b 00 01 21 6b 00 01 21 6b 00 01     !k..!k..!k..!k..
 10000b0:	21 6b 00 01 21 6b 00 01                             !k..!k..

Disassembly of section text:

010000b8 <__aeabi_ldivmod>:
 10000b8:	b97b      	cbnz	r3, 10000da <__aeabi_ldivmod+0x22>
 10000ba:	b972      	cbnz	r2, 10000da <__aeabi_ldivmod+0x22>
 10000bc:	2900      	cmp	r1, #0
 10000be:	bfbe      	ittt	lt
 10000c0:	2000      	movlt	r0, #0
 10000c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 10000c6:	e006      	blt.n	10000d6 <__aeabi_ldivmod+0x1e>
 10000c8:	bf08      	it	eq
 10000ca:	2800      	cmpeq	r0, #0
 10000cc:	bf1c      	itt	ne
 10000ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 10000d2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 10000d6:	f000 b857 	b.w	1000188 <__aeabi_idiv0>
 10000da:	f1ad 0c08 	sub.w	ip, sp, #8
 10000de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 10000e2:	2900      	cmp	r1, #0
 10000e4:	db09      	blt.n	10000fa <__aeabi_ldivmod+0x42>
 10000e6:	2b00      	cmp	r3, #0
 10000e8:	db1a      	blt.n	1000120 <__aeabi_ldivmod+0x68>
 10000ea:	f005 f86b 	bl	10051c4 <__udivmoddi4>
 10000ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 10000f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 10000f6:	b004      	add	sp, #16
 10000f8:	4770      	bx	lr
 10000fa:	4240      	negs	r0, r0
 10000fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 1000100:	2b00      	cmp	r3, #0
 1000102:	db1b      	blt.n	100013c <__aeabi_ldivmod+0x84>
 1000104:	f005 f85e 	bl	10051c4 <__udivmoddi4>
 1000108:	f8dd e004 	ldr.w	lr, [sp, #4]
 100010c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1000110:	b004      	add	sp, #16
 1000112:	4240      	negs	r0, r0
 1000114:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 1000118:	4252      	negs	r2, r2
 100011a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 100011e:	4770      	bx	lr
 1000120:	4252      	negs	r2, r2
 1000122:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 1000126:	f005 f84d 	bl	10051c4 <__udivmoddi4>
 100012a:	f8dd e004 	ldr.w	lr, [sp, #4]
 100012e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1000132:	b004      	add	sp, #16
 1000134:	4240      	negs	r0, r0
 1000136:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 100013a:	4770      	bx	lr
 100013c:	4252      	negs	r2, r2
 100013e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 1000142:	f005 f83f 	bl	10051c4 <__udivmoddi4>
 1000146:	f8dd e004 	ldr.w	lr, [sp, #4]
 100014a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 100014e:	b004      	add	sp, #16
 1000150:	4252      	negs	r2, r2
 1000152:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 1000156:	4770      	bx	lr

01000158 <__aeabi_uldivmod>:
 1000158:	b953      	cbnz	r3, 1000170 <__aeabi_uldivmod+0x18>
 100015a:	b94a      	cbnz	r2, 1000170 <__aeabi_uldivmod+0x18>
 100015c:	2900      	cmp	r1, #0
 100015e:	bf08      	it	eq
 1000160:	2800      	cmpeq	r0, #0
 1000162:	bf1c      	itt	ne
 1000164:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 1000168:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 100016c:	f000 b80c 	b.w	1000188 <__aeabi_idiv0>
 1000170:	f1ad 0c08 	sub.w	ip, sp, #8
 1000174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 1000178:	f005 f824 	bl	10051c4 <__udivmoddi4>
 100017c:	f8dd e004 	ldr.w	lr, [sp, #4]
 1000180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1000184:	b004      	add	sp, #16
 1000186:	4770      	bx	lr

01000188 <__aeabi_idiv0>:
 1000188:	4770      	bx	lr
 100018a:	bf00      	nop

0100018c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
 100018c:	2804      	cmp	r0, #4
 100018e:	b510      	push	{r4, lr}
 1000190:	d811      	bhi.n	10001b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a>
 1000192:	b183      	cbz	r3, 10001b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a>
 1000194:	2804      	cmp	r0, #4
 1000196:	bf0c      	ite	eq
 1000198:	2410      	moveq	r4, #16
 100019a:	2428      	movne	r4, #40	; 0x28
 100019c:	42a1      	cmp	r1, r4
 100019e:	d20a      	bcs.n	10001b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a>
 10001a0:	4c06      	ldr	r4, [pc, #24]	; (10001bc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x30>)
 10001a2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 10001a6:	b118      	cbz	r0, 10001b0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
 10001a8:	5641      	ldrsb	r1, [r0, r1]
 10001aa:	428a      	cmp	r2, r1
 10001ac:	bfa8      	it	ge
 10001ae:	460a      	movge	r2, r1
 10001b0:	2000      	movs	r0, #0
 10001b2:	701a      	strb	r2, [r3, #0]
 10001b4:	bd10      	pop	{r4, pc}
 10001b6:	f06f 0015 	mvn.w	r0, #21
 10001ba:	e7fb      	b.n	10001b4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x28>
 10001bc:	21000260 	.word	0x21000260

010001c0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
 10001c0:	2802      	cmp	r0, #2
 10001c2:	4603      	mov	r3, r0
 10001c4:	dc10      	bgt.n	10001e8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x28>
 10001c6:	f110 0f27 	cmn.w	r0, #39	; 0x27
 10001ca:	db0f      	blt.n	10001ec <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x2c>
 10001cc:	3028      	adds	r0, #40	; 0x28
 10001ce:	4a08      	ldr	r2, [pc, #32]	; (10001f0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x30>)
 10001d0:	b240      	sxtb	r0, r0
 10001d2:	5c10      	ldrb	r0, [r2, r0]
 10001d4:	4402      	add	r2, r0
 10001d6:	f992 202c 	ldrsb.w	r2, [r2, #44]	; 0x2c
 10001da:	429a      	cmp	r2, r3
 10001dc:	d007      	beq.n	10001ee <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x2e>
 10001de:	2900      	cmp	r1, #0
 10001e0:	bf18      	it	ne
 10001e2:	3001      	addne	r0, #1
 10001e4:	b2c0      	uxtb	r0, r0
 10001e6:	4770      	bx	lr
 10001e8:	200f      	movs	r0, #15
 10001ea:	4770      	bx	lr
 10001ec:	2000      	movs	r0, #0
 10001ee:	4770      	bx	lr
 10001f0:	01015674 	.word	0x01015674

010001f4 <mpsl_tx_power_radio_supported_power_adjust>:
 10001f4:	2802      	cmp	r0, #2
 10001f6:	b508      	push	{r3, lr}
 10001f8:	dc06      	bgt.n	1000208 <mpsl_tx_power_radio_supported_power_adjust+0x14>
 10001fa:	f7ff ffe1 	bl	10001c0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
 10001fe:	4b03      	ldr	r3, [pc, #12]	; (100020c <mpsl_tx_power_radio_supported_power_adjust+0x18>)
 1000200:	4403      	add	r3, r0
 1000202:	f993 002c 	ldrsb.w	r0, [r3, #44]	; 0x2c
 1000206:	bd08      	pop	{r3, pc}
 1000208:	2003      	movs	r0, #3
 100020a:	e7fc      	b.n	1000206 <mpsl_tx_power_radio_supported_power_adjust+0x12>
 100020c:	01015674 	.word	0x01015674

01000210 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
 1000210:	4b01      	ldr	r3, [pc, #4]	; (1000218 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
 1000212:	7918      	ldrb	r0, [r3, #4]
 1000214:	4770      	bx	lr
 1000216:	bf00      	nop
 1000218:	2100027c 	.word	0x2100027c

0100021c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
 100021c:	4b04      	ldr	r3, [pc, #16]	; (1000230 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
 100021e:	791a      	ldrb	r2, [r3, #4]
 1000220:	4282      	cmp	r2, r0
 1000222:	bf83      	ittte	hi
 1000224:	681b      	ldrhi	r3, [r3, #0]
 1000226:	2230      	movhi	r2, #48	; 0x30
 1000228:	fb02 3000 	mlahi	r0, r2, r0, r3
 100022c:	2000      	movls	r0, #0
 100022e:	4770      	bx	lr
 1000230:	2100027c 	.word	0x2100027c

01000234 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA>:
 1000234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1000238:	4615      	mov	r5, r2
 100023a:	b082      	sub	sp, #8
 100023c:	4688      	mov	r8, r1
 100023e:	4607      	mov	r7, r0
 1000240:	f10d 0203 	add.w	r2, sp, #3
 1000244:	a901      	add	r1, sp, #4
 1000246:	4628      	mov	r0, r5
 1000248:	f001 ffea 	bl	1002220 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 100024c:	f002 fd60 	bl	1002d10 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
 1000250:	f002 f812 	bl	1002278 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 1000254:	4b1f      	ldr	r3, [pc, #124]	; (10002d4 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0xa0>)
 1000256:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 100025a:	2a20      	cmp	r2, #32
 100025c:	d006      	beq.n	100026c <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x38>
 100025e:	68d8      	ldr	r0, [r3, #12]
 1000260:	3007      	adds	r0, #7
 1000262:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1000266:	b002      	add	sp, #8
 1000268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100026c:	4606      	mov	r6, r0
 100026e:	f107 040b 	add.w	r4, r7, #11
 1000272:	b965      	cbnz	r5, 100028e <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x5a>
 1000274:	f1b8 0f00 	cmp.w	r8, #0
 1000278:	d104      	bne.n	1000284 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x50>
 100027a:	9801      	ldr	r0, [sp, #4]
 100027c:	42b0      	cmp	r0, r6
 100027e:	d201      	bcs.n	1000284 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x50>
 1000280:	1a30      	subs	r0, r6, r0
 1000282:	4404      	add	r4, r0
 1000284:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 1000288:	b002      	add	sp, #8
 100028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100028e:	f003 f90b 	bl	10034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1000292:	2800      	cmp	r0, #0
 1000294:	d1ee      	bne.n	1000274 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x40>
 1000296:	f002 fed1 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 100029a:	f240 3356 	movw	r3, #854	; 0x356
 100029e:	4298      	cmp	r0, r3
 10002a0:	d00c      	beq.n	10002bc <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x88>
 10002a2:	f240 53f5 	movw	r3, #1525	; 0x5f5
 10002a6:	4298      	cmp	r0, r3
 10002a8:	d00e      	beq.n	10002c8 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x94>
 10002aa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 10002ae:	d1e1      	bne.n	1000274 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x40>
 10002b0:	f107 0418 	add.w	r4, r7, #24
 10002b4:	f1b8 0f00 	cmp.w	r8, #0
 10002b8:	d1e4      	bne.n	1000284 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x50>
 10002ba:	e7de      	b.n	100027a <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x46>
 10002bc:	f107 0427 	add.w	r4, r7, #39	; 0x27
 10002c0:	f1b8 0f00 	cmp.w	r8, #0
 10002c4:	d1de      	bne.n	1000284 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x50>
 10002c6:	e7d8      	b.n	100027a <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x46>
 10002c8:	f107 043d 	add.w	r4, r7, #61	; 0x3d
 10002cc:	f1b8 0f00 	cmp.w	r8, #0
 10002d0:	d1d8      	bne.n	1000284 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x50>
 10002d2:	e7d2      	b.n	100027a <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA+0x46>
 10002d4:	21000284 	.word	0x21000284

010002d8 <sym_7ORZF5F73VXL7PAQNOEJ2ZQPOZ2FLWKCYDEOC3Y>:
 10002d8:	b510      	push	{r4, lr}
 10002da:	4c1d      	ldr	r4, [pc, #116]	; (1000350 <sym_7ORZF5F73VXL7PAQNOEJ2ZQPOZ2FLWKCYDEOC3Y+0x78>)
 10002dc:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 10002e0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 10002e4:	4421      	add	r1, r4
 10002e6:	f891 2020 	ldrb.w	r2, [r1, #32]
 10002ea:	2a20      	cmp	r2, #32
 10002ec:	d02b      	beq.n	1000346 <sym_7ORZF5F73VXL7PAQNOEJ2ZQPOZ2FLWKCYDEOC3Y+0x6e>
 10002ee:	b2db      	uxtb	r3, r3
 10002f0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 10002f4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 10002f8:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 10002fc:	f881 0020 	strb.w	r0, [r1, #32]
 1000300:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 1000304:	f04f 0cff 	mov.w	ip, #255	; 0xff
 1000308:	2000      	movs	r0, #0
 100030a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 100030e:	f884 c029 	strb.w	ip, [r4, #41]	; 0x29
 1000312:	f04f 0c02 	mov.w	ip, #2
 1000316:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
 100031a:	f891 20d0 	ldrb.w	r2, [r1, #208]	; 0xd0
 100031e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 1000322:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 1000326:	77a0      	strb	r0, [r4, #30]
 1000328:	b132      	cbz	r2, 1000338 <sym_7ORZF5F73VXL7PAQNOEJ2ZQPOZ2FLWKCYDEOC3Y+0x60>
 100032a:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
 100032e:	b14b      	cbz	r3, 1000344 <sym_7ORZF5F73VXL7PAQNOEJ2ZQPOZ2FLWKCYDEOC3Y+0x6c>
 1000330:	2000      	movs	r0, #0
 1000332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1000336:	4718      	bx	r3
 1000338:	f003 fcf8 	bl	1003d2c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
 100033c:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
 1000340:	2b00      	cmp	r3, #0
 1000342:	d1f5      	bne.n	1000330 <sym_7ORZF5F73VXL7PAQNOEJ2ZQPOZ2FLWKCYDEOC3Y+0x58>
 1000344:	bd10      	pop	{r4, pc}
 1000346:	f240 3132 	movw	r1, #818	; 0x332
 100034a:	2070      	movs	r0, #112	; 0x70
 100034c:	f003 f96a 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000350:	21000284 	.word	0x21000284

01000354 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA>:
 1000354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1000358:	4e3d      	ldr	r6, [pc, #244]	; (1000450 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xfc>)
 100035a:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
 100035e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 1000362:	4433      	add	r3, r6
 1000364:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 1000368:	2c20      	cmp	r4, #32
 100036a:	d058      	beq.n	100041e <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xca>
 100036c:	fa5f f58b 	uxtb.w	r5, fp
 1000370:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 1000454 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x100>
 1000374:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 1000378:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 1000458 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x104>
 100037c:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 1000380:	016f      	lsls	r7, r5, #5
 1000382:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 1000386:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 100038a:	3b01      	subs	r3, #1
 100038c:	2b05      	cmp	r3, #5
 100038e:	d859      	bhi.n	1000444 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xf0>
 1000390:	e8df f003 	tbb	[pc, r3]
 1000394:	4b585803 	.word	0x4b585803
 1000398:	034e      	.short	0x034e
 100039a:	f04f 0a07 	mov.w	sl, #7
 100039e:	f1b8 0f00 	cmp.w	r8, #0
 10003a2:	d001      	beq.n	10003a8 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x54>
 10003a4:	f3af 8000 	nop.w
 10003a8:	f3ef 8210 	mrs	r2, PRIMASK
 10003ac:	b672      	cpsid	i
 10003ae:	445d      	add	r5, fp
 10003b0:	193b      	adds	r3, r7, r4
 10003b2:	4435      	add	r5, r6
 10003b4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 10003b8:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
 10003bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 10003c0:	42a1      	cmp	r1, r4
 10003c2:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 10003c6:	d02c      	beq.n	1000422 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xce>
 10003c8:	b92a      	cbnz	r2, 10003d6 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x82>
 10003ca:	f1b9 0f00 	cmp.w	r9, #0
 10003ce:	d001      	beq.n	10003d4 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x80>
 10003d0:	f3af 8000 	nop.w
 10003d4:	b662      	cpsie	i
 10003d6:	193b      	adds	r3, r7, r4
 10003d8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 10003dc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 10003e0:	b34a      	cbz	r2, 1000436 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xe2>
 10003e2:	2a06      	cmp	r2, #6
 10003e4:	d027      	beq.n	1000436 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xe2>
 10003e6:	2a03      	cmp	r2, #3
 10003e8:	d025      	beq.n	1000436 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xe2>
 10003ea:	2a05      	cmp	r2, #5
 10003ec:	d023      	beq.n	1000436 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xe2>
 10003ee:	2201      	movs	r2, #1
 10003f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 10003f4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 10003f8:	4651      	mov	r1, sl
 10003fa:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 10003fe:	e9d4 302e 	ldrd	r3, r0, [r4, #184]	; 0xb8
 1000402:	4798      	blx	r3
 1000404:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
 1000408:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 100040c:	fa5f f58b 	uxtb.w	r5, fp
 1000410:	4433      	add	r3, r6
 1000412:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 1000416:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 100041a:	2c20      	cmp	r4, #32
 100041c:	d1ae      	bne.n	100037c <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x28>
 100041e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1000422:	2320      	movs	r3, #32
 1000424:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 1000428:	e7ce      	b.n	10003c8 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x74>
 100042a:	f04f 0a02 	mov.w	sl, #2
 100042e:	e7b6      	b.n	100039e <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x4a>
 1000430:	f04f 0a03 	mov.w	sl, #3
 1000434:	e7b3      	b.n	100039e <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0x4a>
 1000436:	4427      	add	r7, r4
 1000438:	2301      	movs	r3, #1
 100043a:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 100043e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 1000442:	e7d7      	b.n	10003f4 <sym_UTQHJYLRNSDKNFRC6462JAV7TLCCKTYFC52KLPA+0xa0>
 1000444:	f640 01dd 	movw	r1, #2269	; 0x8dd
 1000448:	2070      	movs	r0, #112	; 0x70
 100044a:	f003 f8eb 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100044e:	bf00      	nop
 1000450:	21000284 	.word	0x21000284
	...

0100045c <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ>:
 100045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1000460:	4691      	mov	r9, r2
 1000462:	b085      	sub	sp, #20
 1000464:	460e      	mov	r6, r1
 1000466:	469a      	mov	sl, r3
 1000468:	f001 ff06 	bl	1002278 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 100046c:	4481      	add	r9, r0
 100046e:	6831      	ldr	r1, [r6, #0]
 1000470:	f029 437f 	bic.w	r3, r9, #4278190080	; 0xff000000
 1000474:	1aca      	subs	r2, r1, r3
 1000476:	9302      	str	r3, [sp, #8]
 1000478:	0212      	lsls	r2, r2, #8
 100047a:	2aff      	cmp	r2, #255	; 0xff
 100047c:	f300 80da 	bgt.w	1000634 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x1d8>
 1000480:	4d72      	ldr	r5, [pc, #456]	; (100064c <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x1f0>)
 1000482:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 1000486:	f240 3856 	movw	r8, #854	; 0x356
 100048a:	18eb      	adds	r3, r5, r3
 100048c:	9303      	str	r3, [sp, #12]
 100048e:	9b03      	ldr	r3, [sp, #12]
 1000490:	f893 4020 	ldrb.w	r4, [r3, #32]
 1000494:	2c20      	cmp	r4, #32
 1000496:	d054      	beq.n	1000542 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0xe6>
 1000498:	f240 5bf5 	movw	fp, #1525	; 0x5f5
 100049c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 10004a0:	9101      	str	r1, [sp, #4]
 10004a2:	00e7      	lsls	r7, r4, #3
 10004a4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 10004a8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 10004ac:	1a8a      	subs	r2, r1, r2
 10004ae:	0212      	lsls	r2, r2, #8
 10004b0:	32ff      	adds	r2, #255	; 0xff
 10004b2:	db1c      	blt.n	10004ee <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x92>
 10004b4:	89f2      	ldrh	r2, [r6, #14]
 10004b6:	2a00      	cmp	r2, #0
 10004b8:	d059      	beq.n	100056e <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x112>
 10004ba:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
 10004be:	2a00      	cmp	r2, #0
 10004c0:	d155      	bne.n	100056e <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x112>
 10004c2:	f8d0 90c0 	ldr.w	r9, [r0, #192]	; 0xc0
 10004c6:	f002 fdb9 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 10004ca:	4540      	cmp	r0, r8
 10004cc:	9901      	ldr	r1, [sp, #4]
 10004ce:	d07b      	beq.n	10005c8 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x16c>
 10004d0:	4558      	cmp	r0, fp
 10004d2:	d075      	beq.n	10005c0 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x164>
 10004d4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 10004d8:	bf14      	ite	ne
 10004da:	2001      	movne	r0, #1
 10004dc:	200e      	moveq	r0, #14
 10004de:	eba1 0109 	sub.w	r1, r1, r9
 10004e2:	0209      	lsls	r1, r1, #8
 10004e4:	bf48      	it	mi
 10004e6:	31ff      	addmi	r1, #255	; 0xff
 10004e8:	ebb0 2f21 	cmp.w	r0, r1, asr #8
 10004ec:	dd3f      	ble.n	100056e <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x112>
 10004ee:	f240 59f5 	movw	r9, #1525	; 0x5f5
 10004f2:	1b38      	subs	r0, r7, r4
 10004f4:	6872      	ldr	r2, [r6, #4]
 10004f6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 10004fa:	f8d0 b0c0 	ldr.w	fp, [r0, #192]	; 0xc0
 10004fe:	ebab 0202 	sub.w	r2, fp, r2
 1000502:	0212      	lsls	r2, r2, #8
 1000504:	32ff      	adds	r2, #255	; 0xff
 1000506:	db20      	blt.n	100054a <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0xee>
 1000508:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
 100050c:	b1ca      	cbz	r2, 1000542 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0xe6>
 100050e:	89f2      	ldrh	r2, [r6, #14]
 1000510:	b9ba      	cbnz	r2, 1000542 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0xe6>
 1000512:	6832      	ldr	r2, [r6, #0]
 1000514:	9201      	str	r2, [sp, #4]
 1000516:	f002 fd91 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 100051a:	4540      	cmp	r0, r8
 100051c:	9a01      	ldr	r2, [sp, #4]
 100051e:	d051      	beq.n	10005c4 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x168>
 1000520:	4548      	cmp	r0, r9
 1000522:	d04b      	beq.n	10005bc <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x160>
 1000524:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 1000528:	bf14      	ite	ne
 100052a:	2001      	movne	r0, #1
 100052c:	200e      	moveq	r0, #14
 100052e:	ebab 0b02 	sub.w	fp, fp, r2
 1000532:	ea5f 2b0b 	movs.w	fp, fp, lsl #8
 1000536:	bf48      	it	mi
 1000538:	f10b 0bff 	addmi.w	fp, fp, #255	; 0xff
 100053c:	ebb0 2f2b 	cmp.w	r0, fp, asr #8
 1000540:	dc03      	bgt.n	100054a <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0xee>
 1000542:	2001      	movs	r0, #1
 1000544:	b005      	add	sp, #20
 1000546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100054a:	1b3a      	subs	r2, r7, r4
 100054c:	7c30      	ldrb	r0, [r6, #16]
 100054e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 1000552:	f892 c0d0 	ldrb.w	ip, [r2, #208]	; 0xd0
 1000556:	4584      	cmp	ip, r0
 1000558:	d913      	bls.n	1000582 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x126>
 100055a:	eb04 144a 	add.w	r4, r4, sl, lsl #5
 100055e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 1000562:	f894 4039 	ldrb.w	r4, [r4, #57]	; 0x39
 1000566:	2c20      	cmp	r4, #32
 1000568:	d0eb      	beq.n	1000542 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0xe6>
 100056a:	00e7      	lsls	r7, r4, #3
 100056c:	e7c1      	b.n	10004f2 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x96>
 100056e:	eb04 144a 	add.w	r4, r4, sl, lsl #5
 1000572:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 1000576:	f894 4039 	ldrb.w	r4, [r4, #57]	; 0x39
 100057a:	2c20      	cmp	r4, #32
 100057c:	d0e1      	beq.n	1000542 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0xe6>
 100057e:	6831      	ldr	r1, [r6, #0]
 1000580:	e78c      	b.n	100049c <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x40>
 1000582:	f8b2 10ce 	ldrh.w	r1, [r2, #206]	; 0xce
 1000586:	f8d2 b0c4 	ldr.w	fp, [r2, #196]	; 0xc4
 100058a:	b909      	cbnz	r1, 1000590 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x134>
 100058c:	89f1      	ldrh	r1, [r6, #14]
 100058e:	b9e9      	cbnz	r1, 10005cc <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x170>
 1000590:	9b02      	ldr	r3, [sp, #8]
 1000592:	ebab 0203 	sub.w	r2, fp, r3
 1000596:	0212      	lsls	r2, r2, #8
 1000598:	2aff      	cmp	r2, #255	; 0xff
 100059a:	dc4b      	bgt.n	1000634 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x1d8>
 100059c:	6830      	ldr	r0, [r6, #0]
 100059e:	4583      	cmp	fp, r0
 10005a0:	d202      	bcs.n	10005a8 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x14c>
 10005a2:	68b1      	ldr	r1, [r6, #8]
 10005a4:	3101      	adds	r1, #1
 10005a6:	60b1      	str	r1, [r6, #8]
 10005a8:	6872      	ldr	r2, [r6, #4]
 10005aa:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
 10005ae:	1a12      	subs	r2, r2, r0
 10005b0:	6031      	str	r1, [r6, #0]
 10005b2:	445a      	add	r2, fp
 10005b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 10005b8:	6072      	str	r2, [r6, #4]
 10005ba:	e768      	b.n	100048e <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x32>
 10005bc:	2033      	movs	r0, #51	; 0x33
 10005be:	e7b6      	b.n	100052e <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0xd2>
 10005c0:	2033      	movs	r0, #51	; 0x33
 10005c2:	e78c      	b.n	10004de <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x82>
 10005c4:	201d      	movs	r0, #29
 10005c6:	e7b2      	b.n	100052e <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0xd2>
 10005c8:	201d      	movs	r0, #29
 10005ca:	e788      	b.n	10004de <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x82>
 10005cc:	f8d2 90c0 	ldr.w	r9, [r2, #192]	; 0xc0
 10005d0:	f002 fd34 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 10005d4:	4540      	cmp	r0, r8
 10005d6:	d033      	beq.n	1000640 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x1e4>
 10005d8:	f240 51f5 	movw	r1, #1525	; 0x5f5
 10005dc:	4288      	cmp	r0, r1
 10005de:	d02d      	beq.n	100063c <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x1e0>
 10005e0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 10005e4:	bf14      	ite	ne
 10005e6:	2101      	movne	r1, #1
 10005e8:	210e      	moveq	r1, #14
 10005ea:	ebab 0209 	sub.w	r2, fp, r9
 10005ee:	0212      	lsls	r2, r2, #8
 10005f0:	bf48      	it	mi
 10005f2:	32ff      	addmi	r2, #255	; 0xff
 10005f4:	ebb1 2f22 	cmp.w	r1, r2, asr #8
 10005f8:	ddca      	ble.n	1000590 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x134>
 10005fa:	f002 fd1f 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 10005fe:	4540      	cmp	r0, r8
 1000600:	d022      	beq.n	1000648 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x1ec>
 1000602:	f240 52f5 	movw	r2, #1525	; 0x5f5
 1000606:	4290      	cmp	r0, r2
 1000608:	d01c      	beq.n	1000644 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x1e8>
 100060a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 100060e:	bf14      	ite	ne
 1000610:	2100      	movne	r1, #0
 1000612:	210d      	moveq	r1, #13
 1000614:	1b3a      	subs	r2, r7, r4
 1000616:	9b02      	ldr	r3, [sp, #8]
 1000618:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 100061c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 1000620:	f102 0b01 	add.w	fp, r2, #1
 1000624:	448b      	add	fp, r1
 1000626:	f02b 4b7f 	bic.w	fp, fp, #4278190080	; 0xff000000
 100062a:	ebab 0203 	sub.w	r2, fp, r3
 100062e:	0212      	lsls	r2, r2, #8
 1000630:	2aff      	cmp	r2, #255	; 0xff
 1000632:	ddb3      	ble.n	100059c <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x140>
 1000634:	2000      	movs	r0, #0
 1000636:	b005      	add	sp, #20
 1000638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100063c:	2133      	movs	r1, #51	; 0x33
 100063e:	e7d4      	b.n	10005ea <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x18e>
 1000640:	211d      	movs	r1, #29
 1000642:	e7d2      	b.n	10005ea <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x18e>
 1000644:	2132      	movs	r1, #50	; 0x32
 1000646:	e7e5      	b.n	1000614 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x1b8>
 1000648:	211c      	movs	r1, #28
 100064a:	e7e3      	b.n	1000614 <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ+0x1b8>
 100064c:	21000284 	.word	0x21000284

01000650 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ>:
 1000650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1000654:	4d39      	ldr	r5, [pc, #228]	; (100073c <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0xec>)
 1000656:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 100065a:	4606      	mov	r6, r0
 100065c:	ea4f 0840 	mov.w	r8, r0, lsl #1
 1000660:	7faa      	ldrb	r2, [r5, #30]
 1000662:	442b      	add	r3, r5
 1000664:	2a00      	cmp	r2, #0
 1000666:	f893 4020 	ldrb.w	r4, [r3, #32]
 100066a:	bf14      	ite	ne
 100066c:	2700      	movne	r7, #0
 100066e:	2702      	moveq	r7, #2
 1000670:	f002 f864 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1000674:	2220      	movs	r2, #32
 1000676:	0171      	lsls	r1, r6, #5
 1000678:	e005      	b.n	1000686 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x36>
 100067a:	f89e 3039 	ldrb.w	r3, [lr, #57]	; 0x39
 100067e:	4622      	mov	r2, r4
 1000680:	2b20      	cmp	r3, #32
 1000682:	461c      	mov	r4, r3
 1000684:	d055      	beq.n	1000732 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0xe2>
 1000686:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 100068a:	eb01 0e04 	add.w	lr, r1, r4
 100068e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 1000692:	eb05 0e4e 	add.w	lr, r5, lr, lsl #1
 1000696:	e9d3 3c30 	ldrd	r3, ip, [r3, #192]	; 0xc0
 100069a:	ebac 0c00 	sub.w	ip, ip, r0
 100069e:	1a1b      	subs	r3, r3, r0
 10006a0:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
 10006a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 10006a8:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
 10006ac:	d8e5      	bhi.n	100067a <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x2a>
 10006ae:	429f      	cmp	r7, r3
 10006b0:	bf98      	it	ls
 10006b2:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
 10006b6:	d8e0      	bhi.n	100067a <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x2a>
 10006b8:	2a20      	cmp	r2, #32
 10006ba:	d102      	bne.n	10006c2 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x72>
 10006bc:	4620      	mov	r0, r4
 10006be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10006c2:	eb08 0306 	add.w	r3, r8, r6
 10006c6:	eb02 1146 	add.w	r1, r2, r6, lsl #5
 10006ca:	0170      	lsls	r0, r6, #5
 10006cc:	f04f 0c04 	mov.w	ip, #4
 10006d0:	442b      	add	r3, r5
 10006d2:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 10006d6:	f893 e020 	ldrb.w	lr, [r3, #32]
 10006da:	f891 1039 	ldrb.w	r1, [r1, #57]	; 0x39
 10006de:	4674      	mov	r4, lr
 10006e0:	f883 1020 	strb.w	r1, [r3, #32]
 10006e4:	1903      	adds	r3, r0, r4
 10006e6:	4621      	mov	r1, r4
 10006e8:	4627      	mov	r7, r4
 10006ea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 10006ee:	428a      	cmp	r2, r1
 10006f0:	f893 4039 	ldrb.w	r4, [r3, #57]	; 0x39
 10006f4:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 10006f8:	d1f4      	bne.n	10006e4 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x94>
 10006fa:	eb08 0306 	add.w	r3, r8, r6
 10006fe:	442b      	add	r3, r5
 1000700:	f893 c022 	ldrb.w	ip, [r3, #34]	; 0x22
 1000704:	f1bc 0f20 	cmp.w	ip, #32
 1000708:	fa5f f28c 	uxtb.w	r2, ip
 100070c:	d013      	beq.n	1000736 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0xe6>
 100070e:	4402      	add	r2, r0
 1000710:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 1000714:	f882 e039 	strb.w	lr, [r2, #57]	; 0x39
 1000718:	4401      	add	r1, r0
 100071a:	4446      	add	r6, r8
 100071c:	2320      	movs	r3, #32
 100071e:	4620      	mov	r0, r4
 1000720:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 1000724:	4435      	add	r5, r6
 1000726:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 100072a:	f885 7022 	strb.w	r7, [r5, #34]	; 0x22
 100072e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1000732:	461c      	mov	r4, r3
 1000734:	e7c0      	b.n	10006b8 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0x68>
 1000736:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
 100073a:	e7ed      	b.n	1000718 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ+0xc8>
 100073c:	21000284 	.word	0x21000284

01000740 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ>:
 1000740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1000744:	6847      	ldr	r7, [r0, #4]
 1000746:	4614      	mov	r4, r2
 1000748:	460d      	mov	r5, r1
 100074a:	4606      	mov	r6, r0
 100074c:	4698      	mov	r8, r3
 100074e:	8948      	ldrh	r0, [r1, #10]
 1000750:	890b      	ldrh	r3, [r1, #8]
 1000752:	b083      	sub	sp, #12
 1000754:	7809      	ldrb	r1, [r1, #0]
 1000756:	6097      	str	r7, [r2, #8]
 1000758:	2200      	movs	r2, #0
 100075a:	6122      	str	r2, [r4, #16]
 100075c:	60e2      	str	r2, [r4, #12]
 100075e:	8220      	strh	r0, [r4, #16]
 1000760:	74a1      	strb	r1, [r4, #18]
 1000762:	81e3      	strh	r3, [r4, #14]
 1000764:	6830      	ldr	r0, [r6, #0]
 1000766:	e9c4 2200 	strd	r2, r2, [r4]
 100076a:	f001 fd4b 	bl	1002204 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 100076e:	782b      	ldrb	r3, [r5, #0]
 1000770:	b9fb      	cbnz	r3, 10007b2 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x72>
 1000772:	f8df c17c 	ldr.w	ip, [pc, #380]	; 10008f0 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x1b0>
 1000776:	4a5f      	ldr	r2, [pc, #380]	; (10008f4 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x1b4>)
 1000778:	fba7 710c 	umull	r7, r1, r7, ip
 100077c:	19c3      	adds	r3, r0, r7
 100077e:	e9d5 e804 	ldrd	lr, r8, [r5, #16]
 1000782:	f141 0100 	adc.w	r1, r1, #0
 1000786:	189a      	adds	r2, r3, r2
 1000788:	f141 0000 	adc.w	r0, r1, #0
 100078c:	4596      	cmp	lr, r2
 100078e:	eb78 0200 	sbcs.w	r2, r8, r0
 1000792:	d203      	bcs.n	100079c <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x5c>
 1000794:	459e      	cmp	lr, r3
 1000796:	eb78 0301 	sbcs.w	r3, r8, r1
 100079a:	d24c      	bcs.n	1000836 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0xf6>
 100079c:	6833      	ldr	r3, [r6, #0]
 100079e:	3b01      	subs	r3, #1
 10007a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 10007a4:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 10007a8:	e9c4 3200 	strd	r3, r2, [r4]
 10007ac:	b003      	add	sp, #12
 10007ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 10007b2:	89e3      	ldrh	r3, [r4, #14]
 10007b4:	f104 020c 	add.w	r2, r4, #12
 10007b8:	484f      	ldr	r0, [pc, #316]	; (10008f8 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x1b8>)
 10007ba:	4621      	mov	r1, r4
 10007bc:	686f      	ldr	r7, [r5, #4]
 10007be:	1ac0      	subs	r0, r0, r3
 10007c0:	f894 9011 	ldrb.w	r9, [r4, #17]
 10007c4:	f001 fd2c 	bl	1002220 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 10007c8:	6823      	ldr	r3, [r4, #0]
 10007ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 10007ce:	6023      	str	r3, [r4, #0]
 10007d0:	f1b9 0f00 	cmp.w	r9, #0
 10007d4:	d052      	beq.n	100087c <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x13c>
 10007d6:	f1b9 0f01 	cmp.w	r9, #1
 10007da:	d17e      	bne.n	10008da <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x19a>
 10007dc:	f107 005f 	add.w	r0, r7, #95	; 0x5f
 10007e0:	f001 fd4a 	bl	1002278 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 10007e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 10007e8:	89e2      	ldrh	r2, [r4, #14]
 10007ea:	2100      	movs	r1, #0
 10007ec:	6060      	str	r0, [r4, #4]
 10007ee:	6830      	ldr	r0, [r6, #0]
 10007f0:	f7ff fd20 	bl	1000234 <sym_QQKNUSARJD6ZRXAI4J3DF6GL6YEZQ6JU33UOTVA>
 10007f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 10007f8:	6020      	str	r0, [r4, #0]
 10007fa:	1a9b      	subs	r3, r3, r2
 10007fc:	6832      	ldr	r2, [r6, #0]
 10007fe:	4403      	add	r3, r0
 1000800:	4282      	cmp	r2, r0
 1000802:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1000806:	6063      	str	r3, [r4, #4]
 1000808:	d902      	bls.n	1000810 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0xd0>
 100080a:	68a3      	ldr	r3, [r4, #8]
 100080c:	3301      	adds	r3, #1
 100080e:	60a3      	str	r3, [r4, #8]
 1000810:	4643      	mov	r3, r8
 1000812:	6928      	ldr	r0, [r5, #16]
 1000814:	4621      	mov	r1, r4
 1000816:	f7ff fe21 	bl	100045c <sym_XO4PWRWFLOXENFANI7IBCJG7ODOZOWFG2Z6ZVKQ>
 100081a:	2800      	cmp	r0, #0
 100081c:	d1c6      	bne.n	10007ac <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x6c>
 100081e:	6833      	ldr	r3, [r6, #0]
 1000820:	e9d4 1200 	ldrd	r1, r2, [r4]
 1000824:	6023      	str	r3, [r4, #0]
 1000826:	1a52      	subs	r2, r2, r1
 1000828:	4413      	add	r3, r2
 100082a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 100082e:	6063      	str	r3, [r4, #4]
 1000830:	b003      	add	sp, #12
 1000832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1000836:	ebae 0707 	sub.w	r7, lr, r7
 100083a:	4b2f      	ldr	r3, [pc, #188]	; (10008f8 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x1b8>)
 100083c:	429f      	cmp	r7, r3
 100083e:	d825      	bhi.n	100088c <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x14c>
 1000840:	89e3      	ldrh	r3, [r4, #14]
 1000842:	46b8      	mov	r8, r7
 1000844:	3301      	adds	r3, #1
 1000846:	686d      	ldr	r5, [r5, #4]
 1000848:	7c66      	ldrb	r6, [r4, #17]
 100084a:	f104 020c 	add.w	r2, r4, #12
 100084e:	ebb8 0303 	subs.w	r3, r8, r3
 1000852:	d43f      	bmi.n	10008d4 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x194>
 1000854:	4618      	mov	r0, r3
 1000856:	4621      	mov	r1, r4
 1000858:	442f      	add	r7, r5
 100085a:	f001 fce1 	bl	1002220 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 100085e:	6823      	ldr	r3, [r4, #0]
 1000860:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1000864:	6023      	str	r3, [r4, #0]
 1000866:	b966      	cbnz	r6, 1000882 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x142>
 1000868:	f107 007b 	add.w	r0, r7, #123	; 0x7b
 100086c:	f001 fd04 	bl	1002278 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 1000870:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1000874:	6060      	str	r0, [r4, #4]
 1000876:	b003      	add	sp, #12
 1000878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 100087c:	f107 007b 	add.w	r0, r7, #123	; 0x7b
 1000880:	e7ae      	b.n	10007e0 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0xa0>
 1000882:	2e01      	cmp	r6, #1
 1000884:	d129      	bne.n	10008da <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x19a>
 1000886:	f107 005f 	add.w	r0, r7, #95	; 0x5f
 100088a:	e7ef      	b.n	100086c <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x12c>
 100088c:	eba7 060c 	sub.w	r6, r7, ip
 1000890:	89e0      	ldrh	r0, [r4, #14]
 1000892:	429e      	cmp	r6, r3
 1000894:	ea6f 0000 	mvn.w	r0, r0
 1000898:	46b0      	mov	r8, r6
 100089a:	4430      	add	r0, r6
 100089c:	d822      	bhi.n	10008e4 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x1a4>
 100089e:	4298      	cmp	r0, r3
 10008a0:	dc15      	bgt.n	10008ce <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x18e>
 10008a2:	2800      	cmp	r0, #0
 10008a4:	da00      	bge.n	10008a8 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x168>
 10008a6:	4460      	add	r0, ip
 10008a8:	f10d 0203 	add.w	r2, sp, #3
 10008ac:	a901      	add	r1, sp, #4
 10008ae:	f001 fcb7 	bl	1002220 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 10008b2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 10008b6:	89e3      	ldrh	r3, [r4, #14]
 10008b8:	43d2      	mvns	r2, r2
 10008ba:	1ad2      	subs	r2, r2, r3
 10008bc:	4417      	add	r7, r2
 10008be:	4a0e      	ldr	r2, [pc, #56]	; (10008f8 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x1b8>)
 10008c0:	4297      	cmp	r7, r2
 10008c2:	d902      	bls.n	10008ca <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x18a>
 10008c4:	68a2      	ldr	r2, [r4, #8]
 10008c6:	3201      	adds	r2, #1
 10008c8:	60a2      	str	r2, [r4, #8]
 10008ca:	4637      	mov	r7, r6
 10008cc:	e7ba      	b.n	1000844 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x104>
 10008ce:	eba0 000c 	sub.w	r0, r0, ip
 10008d2:	e7e9      	b.n	10008a8 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x168>
 10008d4:	4806      	ldr	r0, [pc, #24]	; (10008f0 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x1b0>)
 10008d6:	4418      	add	r0, r3
 10008d8:	e7bd      	b.n	1000856 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ+0x116>
 10008da:	f240 6139 	movw	r1, #1593	; 0x639
 10008de:	2070      	movs	r0, #112	; 0x70
 10008e0:	f002 fea0 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10008e4:	f240 519e 	movw	r1, #1438	; 0x59e
 10008e8:	2070      	movs	r0, #112	; 0x70
 10008ea:	f002 fe9b 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10008ee:	bf00      	nop
 10008f0:	1e848000 	.word	0x1e848000
 10008f4:	0f424000 	.word	0x0f424000
 10008f8:	1e847fff 	.word	0x1e847fff

010008fc <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y>:
 10008fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1000900:	4617      	mov	r7, r2
 1000902:	b097      	sub	sp, #92	; 0x5c
 1000904:	4cba      	ldr	r4, [pc, #744]	; (1000bf0 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2f4>)
 1000906:	4605      	mov	r5, r0
 1000908:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 100090c:	9106      	str	r1, [sp, #24]
 100090e:	f001 ff07 	bl	1002720 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
 1000912:	4682      	mov	sl, r0
 1000914:	f002 f9fc 	bl	1002d10 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
 1000918:	f8d4 243c 	ldr.w	r2, [r4, #1084]	; 0x43c
 100091c:	00bb      	lsls	r3, r7, #2
 100091e:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
 1000922:	4606      	mov	r6, r0
 1000924:	2001      	movs	r0, #1
 1000926:	3308      	adds	r3, #8
 1000928:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 100092c:	6010      	str	r0, [r2, #0]
 100092e:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 1000932:	18ca      	adds	r2, r1, r3
 1000934:	f851 9003 	ldr.w	r9, [r1, r3]
 1000938:	37c0      	adds	r7, #192	; 0xc0
 100093a:	9603      	str	r6, [sp, #12]
 100093c:	6853      	ldr	r3, [r2, #4]
 100093e:	f892 b00c 	ldrb.w	fp, [r2, #12]
 1000942:	f8b2 800e 	ldrh.w	r8, [r2, #14]
 1000946:	9308      	str	r3, [sp, #32]
 1000948:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 100094c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 100094e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 1000952:	683b      	ldr	r3, [r7, #0]
 1000954:	4648      	mov	r0, r9
 1000956:	f8cc 3000 	str.w	r3, [ip]
 100095a:	f001 fc53 	bl	1002204 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 100095e:	f108 0301 	add.w	r3, r8, #1
 1000962:	4aa4      	ldr	r2, [pc, #656]	; (1000bf4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2f8>)
 1000964:	445b      	add	r3, fp
 1000966:	4290      	cmp	r0, r2
 1000968:	4403      	add	r3, r0
 100096a:	f200 8262 	bhi.w	1000e32 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x536>
 100096e:	4293      	cmp	r3, r2
 1000970:	f300 812d 	bgt.w	1000bce <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2d2>
 1000974:	2b00      	cmp	r3, #0
 1000976:	f2c0 8100 	blt.w	1000b7a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x27e>
 100097a:	9305      	str	r3, [sp, #20]
 100097c:	7f23      	ldrb	r3, [r4, #28]
 100097e:	9301      	str	r3, [sp, #4]
 1000980:	7f63      	ldrb	r3, [r4, #29]
 1000982:	9307      	str	r3, [sp, #28]
 1000984:	f002 fd90 	bl	10034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1000988:	9004      	str	r0, [sp, #16]
 100098a:	f1b8 0f00 	cmp.w	r8, #0
 100098e:	f040 80b7 	bne.w	1000b00 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x204>
 1000992:	f8cd 8000 	str.w	r8, [sp]
 1000996:	f002 fb51 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 100099a:	f240 3356 	movw	r3, #854	; 0x356
 100099e:	4298      	cmp	r0, r3
 10009a0:	f000 80c0 	beq.w	1000b24 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x228>
 10009a4:	f240 53f5 	movw	r3, #1525	; 0x5f5
 10009a8:	4298      	cmp	r0, r3
 10009aa:	f000 811a 	beq.w	1000be2 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2e6>
 10009ae:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 10009b2:	f000 810f 	beq.w	1000bd4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2d8>
 10009b6:	2703      	movs	r7, #3
 10009b8:	f04f 0b00 	mov.w	fp, #0
 10009bc:	463b      	mov	r3, r7
 10009be:	f8cd b008 	str.w	fp, [sp, #8]
 10009c2:	4546      	cmp	r6, r8
 10009c4:	f200 80b7 	bhi.w	1000b36 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x23a>
 10009c8:	9900      	ldr	r1, [sp, #0]
 10009ca:	464a      	mov	r2, r9
 10009cc:	2000      	movs	r0, #0
 10009ce:	2900      	cmp	r1, #0
 10009d0:	f040 80d0 	bne.w	1000b74 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x278>
 10009d4:	9b01      	ldr	r3, [sp, #4]
 10009d6:	2b00      	cmp	r3, #0
 10009d8:	f000 8126 	beq.w	1000c28 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x32c>
 10009dc:	2602      	movs	r6, #2
 10009de:	2705      	movs	r7, #5
 10009e0:	46b4      	mov	ip, r6
 10009e2:	463b      	mov	r3, r7
 10009e4:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
 10009e8:	d013      	beq.n	1000a12 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x116>
 10009ea:	eba9 010a 	sub.w	r1, r9, sl
 10009ee:	0209      	lsls	r1, r1, #8
 10009f0:	29ff      	cmp	r1, #255	; 0xff
 10009f2:	dd0e      	ble.n	1000a12 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x116>
 10009f4:	9b00      	ldr	r3, [sp, #0]
 10009f6:	2b00      	cmp	r3, #0
 10009f8:	f000 80c3 	beq.w	1000b82 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x286>
 10009fc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 1000a00:	2b00      	cmp	r3, #0
 1000a02:	f000 80be 	beq.w	1000b82 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x286>
 1000a06:	9f01      	ldr	r7, [sp, #4]
 1000a08:	463b      	mov	r3, r7
 1000a0a:	2f00      	cmp	r7, #0
 1000a0c:	f040 819e 	bne.w	1000d4c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x450>
 1000a10:	4655      	mov	r5, sl
 1000a12:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
 1000a16:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 1000a1a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 1000a1e:	1b71      	subs	r1, r6, r5
 1000a20:	0209      	lsls	r1, r1, #8
 1000a22:	bf48      	it	mi
 1000a24:	31ff      	addmi	r1, #255	; 0xff
 1000a26:	ebb7 2f21 	cmp.w	r7, r1, asr #8
 1000a2a:	f300 80b6 	bgt.w	1000b9a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x29e>
 1000a2e:	2800      	cmp	r0, #0
 1000a30:	bf18      	it	ne
 1000a32:	46e1      	movne	r9, ip
 1000a34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1000a36:	1c5a      	adds	r2, r3, #1
 1000a38:	d00c      	beq.n	1000a54 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x158>
 1000a3a:	9a04      	ldr	r2, [sp, #16]
 1000a3c:	b952      	cbnz	r2, 1000a54 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x158>
 1000a3e:	ebac 0c03 	sub.w	ip, ip, r3
 1000a42:	ea5f 2c0c 	movs.w	ip, ip, lsl #8
 1000a46:	bf48      	it	mi
 1000a48:	f10c 0cff 	addmi.w	ip, ip, #255	; 0xff
 1000a4c:	ebbb 2f2c 	cmp.w	fp, ip, asr #8
 1000a50:	f300 809a 	bgt.w	1000b88 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x28c>
 1000a54:	f001 fe72 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1000a58:	1a30      	subs	r0, r6, r0
 1000a5a:	0200      	lsls	r0, r0, #8
 1000a5c:	bf48      	it	mi
 1000a5e:	30ff      	addmi	r0, #255	; 0xff
 1000a60:	1205      	asrs	r5, r0, #8
 1000a62:	f002 faeb 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 1000a66:	f240 3356 	movw	r3, #854	; 0x356
 1000a6a:	4298      	cmp	r0, r3
 1000a6c:	f000 80fa 	beq.w	1000c64 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x368>
 1000a70:	f240 53f5 	movw	r3, #1525	; 0x5f5
 1000a74:	4298      	cmp	r0, r3
 1000a76:	f000 80e6 	beq.w	1000c46 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x34a>
 1000a7a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 1000a7e:	bf14      	ite	ne
 1000a80:	230b      	movne	r3, #11
 1000a82:	2318      	moveq	r3, #24
 1000a84:	429d      	cmp	r5, r3
 1000a86:	f280 80e2 	bge.w	1000c4e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x352>
 1000a8a:	9b06      	ldr	r3, [sp, #24]
 1000a8c:	2b01      	cmp	r3, #1
 1000a8e:	f000 80d0 	beq.w	1000c32 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x336>
 1000a92:	9b00      	ldr	r3, [sp, #0]
 1000a94:	f003 0501 	and.w	r5, r3, #1
 1000a98:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
 1000a9c:	bf08      	it	eq
 1000a9e:	f045 0501 	orreq.w	r5, r5, #1
 1000aa2:	2d00      	cmp	r5, #0
 1000aa4:	f000 80e0 	beq.w	1000c68 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x36c>
 1000aa8:	2500      	movs	r5, #0
 1000aaa:	4630      	mov	r0, r6
 1000aac:	f001 fc68 	bl	1002380 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
 1000ab0:	eba9 0306 	sub.w	r3, r9, r6
 1000ab4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1000ab8:	3b01      	subs	r3, #1
 1000aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 1000abe:	d267      	bcs.n	1000b90 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x294>
 1000ac0:	9b08      	ldr	r3, [sp, #32]
 1000ac2:	1b9b      	subs	r3, r3, r6
 1000ac4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1000ac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 1000acc:	d860      	bhi.n	1000b90 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x294>
 1000ace:	4630      	mov	r0, r6
 1000ad0:	f001 fb98 	bl	1002204 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1000ad4:	9a05      	ldr	r2, [sp, #20]
 1000ad6:	4b48      	ldr	r3, [pc, #288]	; (1000bf8 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2fc>)
 1000ad8:	eba2 0a00 	sub.w	sl, r2, r0
 1000adc:	459a      	cmp	sl, r3
 1000ade:	f0c0 80d2 	bcc.w	1000c86 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x38a>
 1000ae2:	1a80      	subs	r0, r0, r2
 1000ae4:	4298      	cmp	r0, r3
 1000ae6:	f0c0 8177 	bcc.w	1000dd8 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4dc>
 1000aea:	4b42      	ldr	r3, [pc, #264]	; (1000bf4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2f8>)
 1000aec:	459a      	cmp	sl, r3
 1000aee:	f200 80c6 	bhi.w	1000c7e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x382>
 1000af2:	4298      	cmp	r0, r3
 1000af4:	f240 81a7 	bls.w	1000e46 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x54a>
 1000af8:	4f40      	ldr	r7, [pc, #256]	; (1000bfc <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x300>)
 1000afa:	1a3f      	subs	r7, r7, r0
 1000afc:	46ba      	mov	sl, r7
 1000afe:	e0c3      	b.n	1000c88 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x38c>
 1000b00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 1000b02:	4603      	mov	r3, r0
 1000b04:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 1000b08:	bf18      	it	ne
 1000b0a:	f043 0301 	orrne.w	r3, r3, #1
 1000b0e:	f083 0301 	eor.w	r3, r3, #1
 1000b12:	b2db      	uxtb	r3, r3
 1000b14:	9300      	str	r3, [sp, #0]
 1000b16:	f002 fa91 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 1000b1a:	f240 3356 	movw	r3, #854	; 0x356
 1000b1e:	4298      	cmp	r0, r3
 1000b20:	f47f af40 	bne.w	10009a4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xa8>
 1000b24:	271f      	movs	r7, #31
 1000b26:	f04f 0b1c 	mov.w	fp, #28
 1000b2a:	4546      	cmp	r6, r8
 1000b2c:	463b      	mov	r3, r7
 1000b2e:	f8cd b008 	str.w	fp, [sp, #8]
 1000b32:	f67f af49 	bls.w	10009c8 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xcc>
 1000b36:	9905      	ldr	r1, [sp, #20]
 1000b38:	3601      	adds	r6, #1
 1000b3a:	4a2e      	ldr	r2, [pc, #184]	; (1000bf4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2f8>)
 1000b3c:	1b8e      	subs	r6, r1, r6
 1000b3e:	4291      	cmp	r1, r2
 1000b40:	f200 8177 	bhi.w	1000e32 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x536>
 1000b44:	4296      	cmp	r6, r2
 1000b46:	f300 808a 	bgt.w	1000c5e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x362>
 1000b4a:	2e00      	cmp	r6, #0
 1000b4c:	db78      	blt.n	1000c40 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x344>
 1000b4e:	4630      	mov	r0, r6
 1000b50:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 1000b54:	a90d      	add	r1, sp, #52	; 0x34
 1000b56:	930a      	str	r3, [sp, #40]	; 0x28
 1000b58:	f001 fb62 	bl	1002220 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 1000b5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 1000b5e:	9900      	ldr	r1, [sp, #0]
 1000b60:	eba9 0000 	sub.w	r0, r9, r0
 1000b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 1000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1000b6a:	eba9 0200 	sub.w	r2, r9, r0
 1000b6e:	2900      	cmp	r1, #0
 1000b70:	f43f af30 	beq.w	10009d4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xd8>
 1000b74:	465e      	mov	r6, fp
 1000b76:	46dc      	mov	ip, fp
 1000b78:	e734      	b.n	10009e4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xe8>
 1000b7a:	4a21      	ldr	r2, [pc, #132]	; (1000c00 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x304>)
 1000b7c:	4413      	add	r3, r2
 1000b7e:	9305      	str	r3, [sp, #20]
 1000b80:	e6fc      	b.n	100097c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x80>
 1000b82:	4663      	mov	r3, ip
 1000b84:	4637      	mov	r7, r6
 1000b86:	e743      	b.n	1000a10 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x114>
 1000b88:	f1b8 0f00 	cmp.w	r8, #0
 1000b8c:	f43f af62 	beq.w	1000a54 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x158>
 1000b90:	2500      	movs	r5, #0
 1000b92:	4628      	mov	r0, r5
 1000b94:	b017      	add	sp, #92	; 0x5c
 1000b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1000b9a:	2800      	cmp	r0, #0
 1000b9c:	d03a      	beq.n	1000c14 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x318>
 1000b9e:	9907      	ldr	r1, [sp, #28]
 1000ba0:	b381      	cbz	r1, 1000c04 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x308>
 1000ba2:	9a00      	ldr	r2, [sp, #0]
 1000ba4:	b912      	cbnz	r2, 1000bac <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2b0>
 1000ba6:	9a01      	ldr	r2, [sp, #4]
 1000ba8:	b102      	cbz	r2, 1000bac <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2b0>
 1000baa:	1e9f      	subs	r7, r3, #2
 1000bac:	2300      	movs	r3, #0
 1000bae:	46cc      	mov	ip, r9
 1000bb0:	9301      	str	r3, [sp, #4]
 1000bb2:	9303      	str	r3, [sp, #12]
 1000bb4:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 1000bb8:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 1000bbc:	1b75      	subs	r5, r6, r5
 1000bbe:	022d      	lsls	r5, r5, #8
 1000bc0:	bf48      	it	mi
 1000bc2:	35ff      	addmi	r5, #255	; 0xff
 1000bc4:	ebb7 2f25 	cmp.w	r7, r5, asr #8
 1000bc8:	f77f af34 	ble.w	1000a34 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x138>
 1000bcc:	e7e0      	b.n	1000b90 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x294>
 1000bce:	4a0b      	ldr	r2, [pc, #44]	; (1000bfc <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x300>)
 1000bd0:	4413      	add	r3, r2
 1000bd2:	e6d2      	b.n	100097a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x7e>
 1000bd4:	2710      	movs	r7, #16
 1000bd6:	f04f 0b0d 	mov.w	fp, #13
 1000bda:	463b      	mov	r3, r7
 1000bdc:	f8cd b008 	str.w	fp, [sp, #8]
 1000be0:	e6ef      	b.n	10009c2 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xc6>
 1000be2:	2735      	movs	r7, #53	; 0x35
 1000be4:	f04f 0b32 	mov.w	fp, #50	; 0x32
 1000be8:	463b      	mov	r3, r7
 1000bea:	f8cd b008 	str.w	fp, [sp, #8]
 1000bee:	e6e8      	b.n	10009c2 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xc6>
 1000bf0:	21000284 	.word	0x21000284
 1000bf4:	1e847fff 	.word	0x1e847fff
 1000bf8:	0f424000 	.word	0x0f424000
 1000bfc:	e17b8000 	.word	0xe17b8000
 1000c00:	1e848000 	.word	0x1e848000
 1000c04:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 1000c08:	f002 f892 	bl	1002d30 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
 1000c0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 1000c10:	2800      	cmp	r0, #0
 1000c12:	d0c6      	beq.n	1000ba2 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2a6>
 1000c14:	9900      	ldr	r1, [sp, #0]
 1000c16:	b929      	cbnz	r1, 1000c24 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x328>
 1000c18:	9801      	ldr	r0, [sp, #4]
 1000c1a:	b118      	cbz	r0, 1000c24 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x328>
 1000c1c:	1e9f      	subs	r7, r3, #2
 1000c1e:	4694      	mov	ip, r2
 1000c20:	9101      	str	r1, [sp, #4]
 1000c22:	e7c7      	b.n	1000bb4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2b8>
 1000c24:	4694      	mov	ip, r2
 1000c26:	e7c5      	b.n	1000bb4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x2b8>
 1000c28:	2703      	movs	r7, #3
 1000c2a:	469c      	mov	ip, r3
 1000c2c:	461e      	mov	r6, r3
 1000c2e:	463b      	mov	r3, r7
 1000c30:	e6d8      	b.n	10009e4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0xe8>
 1000c32:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
 1000c36:	f000 8101 	beq.w	1000e3c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x540>
 1000c3a:	4656      	mov	r6, sl
 1000c3c:	2500      	movs	r5, #0
 1000c3e:	e737      	b.n	1000ab0 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1b4>
 1000c40:	488d      	ldr	r0, [pc, #564]	; (1000e78 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x57c>)
 1000c42:	4430      	add	r0, r6
 1000c44:	e784      	b.n	1000b50 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x254>
 1000c46:	233d      	movs	r3, #61	; 0x3d
 1000c48:	429d      	cmp	r5, r3
 1000c4a:	f6ff af1e 	blt.w	1000a8a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x18e>
 1000c4e:	f1b8 0500 	subs.w	r5, r8, #0
 1000c52:	4630      	mov	r0, r6
 1000c54:	bf18      	it	ne
 1000c56:	2501      	movne	r5, #1
 1000c58:	f001 fb92 	bl	1002380 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
 1000c5c:	e728      	b.n	1000ab0 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1b4>
 1000c5e:	4887      	ldr	r0, [pc, #540]	; (1000e7c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x580>)
 1000c60:	4430      	add	r0, r6
 1000c62:	e775      	b.n	1000b50 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x254>
 1000c64:	2327      	movs	r3, #39	; 0x27
 1000c66:	e70d      	b.n	1000a84 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x188>
 1000c68:	ebaa 0306 	sub.w	r3, sl, r6
 1000c6c:	021b      	lsls	r3, r3, #8
 1000c6e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 1000c72:	f280 80cc 	bge.w	1000e0e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x512>
 1000c76:	2bff      	cmp	r3, #255	; 0xff
 1000c78:	dc8a      	bgt.n	1000b90 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x294>
 1000c7a:	4656      	mov	r6, sl
 1000c7c:	e718      	b.n	1000ab0 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1b4>
 1000c7e:	f10a 5af4 	add.w	sl, sl, #511705088	; 0x1e800000
 1000c82:	f50a 2a90 	add.w	sl, sl, #294912	; 0x48000
 1000c86:	4657      	mov	r7, sl
 1000c88:	7fa3      	ldrb	r3, [r4, #30]
 1000c8a:	b93b      	cbnz	r3, 1000c9c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3a0>
 1000c8c:	9b03      	ldr	r3, [sp, #12]
 1000c8e:	4543      	cmp	r3, r8
 1000c90:	bf38      	it	cc
 1000c92:	4643      	movcc	r3, r8
 1000c94:	331e      	adds	r3, #30
 1000c96:	42bb      	cmp	r3, r7
 1000c98:	f280 80a4 	bge.w	1000de4 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4e8>
 1000c9c:	9b06      	ldr	r3, [sp, #24]
 1000c9e:	2b01      	cmp	r3, #1
 1000ca0:	d005      	beq.n	1000cae <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3b2>
 1000ca2:	2002      	movs	r0, #2
 1000ca4:	f001 fdfc 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000ca8:	2001      	movs	r0, #1
 1000caa:	f001 fdf9 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000cae:	9b03      	ldr	r3, [sp, #12]
 1000cb0:	4598      	cmp	r8, r3
 1000cb2:	d34f      	bcc.n	1000d54 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x458>
 1000cb4:	f200 809b 	bhi.w	1000dee <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4f2>
 1000cb8:	ea58 0003 	orrs.w	r0, r8, r3
 1000cbc:	f040 80d2 	bne.w	1000e64 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x568>
 1000cc0:	4651      	mov	r1, sl
 1000cc2:	f001 fd63 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000cc6:	2800      	cmp	r0, #0
 1000cc8:	d038      	beq.n	1000d3c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x440>
 1000cca:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 1000cce:	2b00      	cmp	r3, #0
 1000cd0:	d15a      	bne.n	1000d88 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x48c>
 1000cd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1000cd4:	3301      	adds	r3, #1
 1000cd6:	f040 809e 	bne.w	1000e16 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x51a>
 1000cda:	2d00      	cmp	r5, #0
 1000cdc:	d16b      	bne.n	1000db6 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4ba>
 1000cde:	eba7 0108 	sub.w	r1, r7, r8
 1000ce2:	3919      	subs	r1, #25
 1000ce4:	2900      	cmp	r1, #0
 1000ce6:	f340 80b3 	ble.w	1000e50 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x554>
 1000cea:	2003      	movs	r0, #3
 1000cec:	f001 fd4e 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000cf0:	4605      	mov	r5, r0
 1000cf2:	2800      	cmp	r0, #0
 1000cf4:	f000 80bb 	beq.w	1000e6e <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x572>
 1000cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1000cfa:	ae0e      	add	r6, sp, #56	; 0x38
 1000cfc:	f8d4 243c 	ldr.w	r2, [r4, #1084]	; 0x43c
 1000d00:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 1000d04:	9b01      	ldr	r3, [sp, #4]
 1000d06:	f8ad 804e 	strh.w	r8, [sp, #78]	; 0x4e
 1000d0a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 1000d0e:	9b07      	ldr	r3, [sp, #28]
 1000d10:	4c5b      	ldr	r4, [pc, #364]	; (1000e80 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x584>)
 1000d12:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
 1000d16:	9b08      	ldr	r3, [sp, #32]
 1000d18:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 1000d1c:	9311      	str	r3, [sp, #68]	; 0x44
 1000d1e:	2300      	movs	r3, #0
 1000d20:	6013      	str	r3, [r2, #0]
 1000d22:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 1000d26:	930e      	str	r3, [sp, #56]	; 0x38
 1000d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1000d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 1000d2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 1000d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 1000d32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 1000d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 1000d3a:	e72a      	b.n	1000b92 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x296>
 1000d3c:	2002      	movs	r0, #2
 1000d3e:	2500      	movs	r5, #0
 1000d40:	f001 fdae 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000d44:	2001      	movs	r0, #1
 1000d46:	f001 fdab 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000d4a:	e722      	b.n	1000b92 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x296>
 1000d4c:	2302      	movs	r3, #2
 1000d4e:	4655      	mov	r5, sl
 1000d50:	461f      	mov	r7, r3
 1000d52:	e65e      	b.n	1000a12 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x116>
 1000d54:	ebaa 0103 	sub.w	r1, sl, r3
 1000d58:	2002      	movs	r0, #2
 1000d5a:	f001 fd17 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000d5e:	f1b8 0f00 	cmp.w	r8, #0
 1000d62:	d006      	beq.n	1000d72 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x476>
 1000d64:	2800      	cmp	r0, #0
 1000d66:	d0e9      	beq.n	1000d3c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x440>
 1000d68:	ebaa 0108 	sub.w	r1, sl, r8
 1000d6c:	2001      	movs	r0, #1
 1000d6e:	f001 fd0d 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000d72:	2800      	cmp	r0, #0
 1000d74:	d0e2      	beq.n	1000d3c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x440>
 1000d76:	4651      	mov	r1, sl
 1000d78:	2000      	movs	r0, #0
 1000d7a:	f001 fd07 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000d7e:	2800      	cmp	r0, #0
 1000d80:	d0dc      	beq.n	1000d3c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x440>
 1000d82:	f1b8 0f00 	cmp.w	r8, #0
 1000d86:	d0a0      	beq.n	1000cca <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3ce>
 1000d88:	b96d      	cbnz	r5, 1000da6 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4aa>
 1000d8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1000d8c:	3301      	adds	r3, #1
 1000d8e:	d04a      	beq.n	1000e26 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x52a>
 1000d90:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 1000d94:	2b00      	cmp	r3, #0
 1000d96:	d0a2      	beq.n	1000cde <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3e2>
 1000d98:	2005      	movs	r0, #5
 1000d9a:	f001 fd81 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000d9e:	2300      	movs	r3, #0
 1000da0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 1000da4:	e79b      	b.n	1000cde <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3e2>
 1000da6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1000da8:	3301      	adds	r3, #1
 1000daa:	d004      	beq.n	1000db6 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4ba>
 1000dac:	f002 f9bc 	bl	1003128 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1000db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1000db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 1000db6:	9b02      	ldr	r3, [sp, #8]
 1000db8:	2005      	movs	r0, #5
 1000dba:	1af1      	subs	r1, r6, r3
 1000dbc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 1000dc0:	f001 fce4 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000dc4:	2800      	cmp	r0, #0
 1000dc6:	d048      	beq.n	1000e5a <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x55e>
 1000dc8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 1000dcc:	2b00      	cmp	r3, #0
 1000dce:	d186      	bne.n	1000cde <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3e2>
 1000dd0:	2301      	movs	r3, #1
 1000dd2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 1000dd6:	e782      	b.n	1000cde <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3e2>
 1000dd8:	4247      	negs	r7, r0
 1000dda:	7fa3      	ldrb	r3, [r4, #30]
 1000ddc:	46ba      	mov	sl, r7
 1000dde:	2b00      	cmp	r3, #0
 1000de0:	f47f af5c 	bne.w	1000c9c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x3a0>
 1000de4:	f640 2145 	movw	r1, #2629	; 0xa45
 1000de8:	2070      	movs	r0, #112	; 0x70
 1000dea:	f002 fc1b 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000dee:	ebaa 0108 	sub.w	r1, sl, r8
 1000df2:	2001      	movs	r0, #1
 1000df4:	f001 fcca 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000df8:	9b03      	ldr	r3, [sp, #12]
 1000dfa:	2b00      	cmp	r3, #0
 1000dfc:	d0b9      	beq.n	1000d72 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x476>
 1000dfe:	2800      	cmp	r0, #0
 1000e00:	d09c      	beq.n	1000d3c <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x440>
 1000e02:	ebaa 0103 	sub.w	r1, sl, r3
 1000e06:	2002      	movs	r0, #2
 1000e08:	f001 fcc0 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1000e0c:	e7b1      	b.n	1000d72 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x476>
 1000e0e:	4630      	mov	r0, r6
 1000e10:	f001 fab6 	bl	1002380 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
 1000e14:	e64c      	b.n	1000ab0 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x1b4>
 1000e16:	f002 f987 	bl	1003128 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1000e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1000e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 1000e20:	2d00      	cmp	r5, #0
 1000e22:	d0b5      	beq.n	1000d90 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x494>
 1000e24:	e7c7      	b.n	1000db6 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x4ba>
 1000e26:	f002 f90f 	bl	1003048 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1000e2a:	f001 fc87 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1000e2e:	62e0      	str	r0, [r4, #44]	; 0x2c
 1000e30:	e7ae      	b.n	1000d90 <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y+0x494>
 1000e32:	f240 519e 	movw	r1, #1438	; 0x59e
 1000e36:	2070      	movs	r0, #112	; 0x70
 1000e38:	f002 fbf4 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000e3c:	f640 1113 	movw	r1, #2323	; 0x913
 1000e40:	2070      	movs	r0, #112	; 0x70
 1000e42:	f002 fbef 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000e46:	f640 3105 	movw	r1, #2821	; 0xb05
 1000e4a:	2070      	movs	r0, #112	; 0x70
 1000e4c:	f002 fbea 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000e50:	f640 216e 	movw	r1, #2670	; 0xa6e
 1000e54:	2070      	movs	r0, #112	; 0x70
 1000e56:	f002 fbe5 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000e5a:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 1000e5e:	2070      	movs	r0, #112	; 0x70
 1000e60:	f002 fbe0 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000e64:	f640 1176 	movw	r1, #2422	; 0x976
 1000e68:	2070      	movs	r0, #112	; 0x70
 1000e6a:	f002 fbdb 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000e6e:	f640 2176 	movw	r1, #2678	; 0xa76
 1000e72:	2070      	movs	r0, #112	; 0x70
 1000e74:	f002 fbd6 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1000e78:	1e848000 	.word	0x1e848000
 1000e7c:	e17b8000 	.word	0xe17b8000
 1000e80:	21000284 	.word	0x21000284

01000e84 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI>:
 1000e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1000e88:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 1000e8c:	4d43      	ldr	r5, [pc, #268]	; (1000f9c <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x118>)
 1000e8e:	460c      	mov	r4, r1
 1000e90:	4680      	mov	r8, r0
 1000e92:	442b      	add	r3, r5
 1000e94:	004f      	lsls	r7, r1, #1
 1000e96:	f893 6020 	ldrb.w	r6, [r3, #32]
 1000e9a:	2e20      	cmp	r6, #32
 1000e9c:	d131      	bne.n	1000f02 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x7e>
 1000e9e:	4b40      	ldr	r3, [pc, #256]	; (1000fa0 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x11c>)
 1000ea0:	b10b      	cbz	r3, 1000ea6 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x22>
 1000ea2:	f3af 8000 	nop.w
 1000ea6:	f001 fc49 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1000eaa:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 1000eae:	2b20      	cmp	r3, #32
 1000eb0:	d006      	beq.n	1000ec0 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x3c>
 1000eb2:	68ab      	ldr	r3, [r5, #8]
 1000eb4:	f1c3 0302 	rsb	r3, r3, #2
 1000eb8:	4403      	add	r3, r0
 1000eba:	021b      	lsls	r3, r3, #8
 1000ebc:	2bff      	cmp	r3, #255	; 0xff
 1000ebe:	dc25      	bgt.n	1000f0c <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x88>
 1000ec0:	2e20      	cmp	r6, #32
 1000ec2:	d009      	beq.n	1000ed8 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x54>
 1000ec4:	4641      	mov	r1, r8
 1000ec6:	4632      	mov	r2, r6
 1000ec8:	f7ff fd18 	bl	10008fc <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y>
 1000ecc:	b388      	cbz	r0, 1000f32 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0xae>
 1000ece:	2002      	movs	r0, #2
 1000ed0:	f885 6033 	strb.w	r6, [r5, #51]	; 0x33
 1000ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1000ed8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 1000eda:	3301      	adds	r3, #1
 1000edc:	d119      	bne.n	1000f12 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x8e>
 1000ede:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 1000ee2:	b9fb      	cbnz	r3, 1000f24 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0xa0>
 1000ee4:	2004      	movs	r0, #4
 1000ee6:	f001 fcdb 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000eea:	f001 fd61 	bl	10029b0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
 1000eee:	2120      	movs	r1, #32
 1000ef0:	f8d5 343c 	ldr.w	r3, [r5, #1084]	; 0x43c
 1000ef4:	2200      	movs	r2, #0
 1000ef6:	f885 1033 	strb.w	r1, [r5, #51]	; 0x33
 1000efa:	2001      	movs	r0, #1
 1000efc:	601a      	str	r2, [r3, #0]
 1000efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1000f02:	4608      	mov	r0, r1
 1000f04:	f7ff fba4 	bl	1000650 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ>
 1000f08:	4286      	cmp	r6, r0
 1000f0a:	d0c8      	beq.n	1000e9e <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x1a>
 1000f0c:	2000      	movs	r0, #0
 1000f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1000f12:	f002 f909 	bl	1003128 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1000f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1000f1a:	62eb      	str	r3, [r5, #44]	; 0x2c
 1000f1c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 1000f20:	2b00      	cmp	r3, #0
 1000f22:	d0df      	beq.n	1000ee4 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x60>
 1000f24:	2005      	movs	r0, #5
 1000f26:	f001 fcbb 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1000f2a:	2300      	movs	r3, #0
 1000f2c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 1000f30:	e7d8      	b.n	1000ee4 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x60>
 1000f32:	193b      	adds	r3, r7, r4
 1000f34:	eb06 1244 	add.w	r2, r6, r4, lsl #5
 1000f38:	0161      	lsls	r1, r4, #5
 1000f3a:	2004      	movs	r0, #4
 1000f3c:	442b      	add	r3, r5
 1000f3e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 1000f42:	f893 c020 	ldrb.w	ip, [r3, #32]
 1000f46:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 1000f4a:	f883 2020 	strb.w	r2, [r3, #32]
 1000f4e:	4663      	mov	r3, ip
 1000f50:	461a      	mov	r2, r3
 1000f52:	18cb      	adds	r3, r1, r3
 1000f54:	4296      	cmp	r6, r2
 1000f56:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 1000f5a:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 1000f5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 1000f62:	d1f5      	bne.n	1000f50 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0xcc>
 1000f64:	193b      	adds	r3, r7, r4
 1000f66:	442b      	add	r3, r5
 1000f68:	f893 6022 	ldrb.w	r6, [r3, #34]	; 0x22
 1000f6c:	2e20      	cmp	r6, #32
 1000f6e:	b2f0      	uxtb	r0, r6
 1000f70:	d011      	beq.n	1000f96 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0x112>
 1000f72:	4408      	add	r0, r1
 1000f74:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 1000f78:	f880 c039 	strb.w	ip, [r0, #57]	; 0x39
 1000f7c:	443c      	add	r4, r7
 1000f7e:	4411      	add	r1, r2
 1000f80:	2320      	movs	r3, #32
 1000f82:	2000      	movs	r0, #0
 1000f84:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 1000f88:	4425      	add	r5, r4
 1000f8a:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 1000f8e:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 1000f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1000f96:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
 1000f9a:	e7ef      	b.n	1000f7c <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI+0xf8>
 1000f9c:	21000284 	.word	0x21000284
 1000fa0:	00000000 	.word	0x00000000

01000fa4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
 1000fa4:	2200      	movs	r2, #0
 1000fa6:	f242 0120 	movw	r1, #8224	; 0x2020
 1000faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1000fae:	b538      	push	{r3, r4, r5, lr}
 1000fb0:	4c19      	ldr	r4, [pc, #100]	; (1001018 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
 1000fb2:	2320      	movs	r3, #32
 1000fb4:	6022      	str	r2, [r4, #0]
 1000fb6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 1000fba:	8421      	strh	r1, [r4, #32]
 1000fbc:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
 1000fc0:	6060      	str	r0, [r4, #4]
 1000fc2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 1000fc6:	77a2      	strb	r2, [r4, #30]
 1000fc8:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
 1000fcc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 1000fd0:	f104 0138 	add.w	r1, r4, #56	; 0x38
 1000fd4:	4613      	mov	r3, r2
 1000fd6:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
 1000fda:	83a2      	strh	r2, [r4, #28]
 1000fdc:	62e0      	str	r0, [r4, #44]	; 0x2c
 1000fde:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 1000fe2:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
 1000fe6:	3301      	adds	r3, #1
 1000fe8:	2b20      	cmp	r3, #32
 1000fea:	d1fa      	bne.n	1000fe2 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x3e>
 1000fec:	f001 fe88 	bl	1002d00 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
 1000ff0:	2501      	movs	r5, #1
 1000ff2:	23ff      	movs	r3, #255	; 0xff
 1000ff4:	4809      	ldr	r0, [pc, #36]	; (100101c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
 1000ff6:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 1000ffa:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
 1000ffe:	f002 fb8f 	bl	1003720 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
 1001002:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
 1001006:	f002 fbeb 	bl	10037e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
 100100a:	f8c4 043c 	str.w	r0, [r4, #1084]	; 0x43c
 100100e:	f001 f94d 	bl	10022ac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
 1001012:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 1001016:	bd38      	pop	{r3, r4, r5, pc}
 1001018:	21000284 	.word	0x21000284
 100101c:	01000355 	.word	0x01000355

01001020 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
 1001020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1001024:	4ccb      	ldr	r4, [pc, #812]	; (1001354 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x334>)
 1001026:	b085      	sub	sp, #20
 1001028:	f001 fb88 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 100102c:	9001      	str	r0, [sp, #4]
 100102e:	f001 fcbf 	bl	10029b0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
 1001032:	6863      	ldr	r3, [r4, #4]
 1001034:	3301      	adds	r3, #1
 1001036:	d002      	beq.n	100103e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e>
 1001038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100103c:	6063      	str	r3, [r4, #4]
 100103e:	7fa3      	ldrb	r3, [r4, #30]
 1001040:	2b00      	cmp	r3, #0
 1001042:	f000 8117 	beq.w	1001274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x254>
 1001046:	7e63      	ldrb	r3, [r4, #25]
 1001048:	b123      	cbz	r3, 1001054 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x34>
 100104a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 100104e:	2b00      	cmp	r3, #0
 1001050:	f040 810a 	bne.w	1001268 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x248>
 1001054:	9b01      	ldr	r3, [sp, #4]
 1001056:	1cd8      	adds	r0, r3, #3
 1001058:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 100105c:	f001 f990 	bl	1002380 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
 1001060:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 1001064:	2b00      	cmp	r3, #0
 1001066:	f040 81a2 	bne.w	10013ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x38e>
 100106a:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 100106e:	2101      	movs	r1, #1
 1001070:	2a20      	cmp	r2, #32
 1001072:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 1001076:	f000 8195 	beq.w	10013a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x384>
 100107a:	f894 a032 	ldrb.w	sl, [r4, #50]	; 0x32
 100107e:	2220      	movs	r2, #32
 1001080:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 1001084:	fa5f fa8a 	uxtb.w	sl, sl
 1001088:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
 100108c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 1001090:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
 1001094:	6023      	str	r3, [r4, #0]
 1001096:	f001 fe41 	bl	1002d1c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
 100109a:	f894 7031 	ldrb.w	r7, [r4, #49]	; 0x31
 100109e:	7720      	strb	r0, [r4, #28]
 10010a0:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 10010a4:	fa5f f887 	uxtb.w	r8, r7
 10010a8:	4423      	add	r3, r4
 10010aa:	007f      	lsls	r7, r7, #1
 10010ac:	f893 b020 	ldrb.w	fp, [r3, #32]
 10010b0:	f1bb 0f20 	cmp.w	fp, #32
 10010b4:	d00a      	beq.n	10010cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xac>
 10010b6:	ebcb 02cb 	rsb	r2, fp, fp, lsl #3
 10010ba:	ea4f 05cb 	mov.w	r5, fp, lsl #3
 10010be:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 10010c2:	f892 10d2 	ldrb.w	r1, [r2, #210]	; 0xd2
 10010c6:	2901      	cmp	r1, #1
 10010c8:	f000 810a 	beq.w	10012e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2c0>
 10010cc:	eb07 0608 	add.w	r6, r7, r8
 10010d0:	f1bb 0f20 	cmp.w	fp, #32
 10010d4:	f8df 9280 	ldr.w	r9, [pc, #640]	; 1001358 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x338>
 10010d8:	ea4f 1548 	mov.w	r5, r8, lsl #5
 10010dc:	4426      	add	r6, r4
 10010de:	d009      	beq.n	10010f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xd4>
 10010e0:	4640      	mov	r0, r8
 10010e2:	f7ff fab5 	bl	1000650 <sym_WXZOTU7ZFLFLIPK5JYSJQC4RQBXDLZDAZABKQLQ>
 10010e6:	4583      	cmp	fp, r0
 10010e8:	d004      	beq.n	10010f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xd4>
 10010ea:	f896 b020 	ldrb.w	fp, [r6, #32]
 10010ee:	f1bb 0f20 	cmp.w	fp, #32
 10010f2:	d1f5      	bne.n	10010e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xc0>
 10010f4:	f1b9 0f00 	cmp.w	r9, #0
 10010f8:	d001      	beq.n	10010fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xde>
 10010fa:	f3af 8000 	nop.w
 10010fe:	f001 fb1d 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1001102:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 1001106:	2a20      	cmp	r2, #32
 1001108:	d006      	beq.n	1001118 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf8>
 100110a:	68a2      	ldr	r2, [r4, #8]
 100110c:	f1c2 0202 	rsb	r2, r2, #2
 1001110:	4402      	add	r2, r0
 1001112:	0212      	lsls	r2, r2, #8
 1001114:	2aff      	cmp	r2, #255	; 0xff
 1001116:	dce8      	bgt.n	10010ea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xca>
 1001118:	f1bb 0f20 	cmp.w	fp, #32
 100111c:	d037      	beq.n	100118e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x16e>
 100111e:	465a      	mov	r2, fp
 1001120:	2101      	movs	r1, #1
 1001122:	f7ff fbeb 	bl	10008fc <sym_QMYJDAIYWBYCVVPRRV3BCOXG6BAQYQPRQA7MC2Y>
 1001126:	2800      	cmp	r0, #0
 1001128:	d06e      	beq.n	1001208 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e8>
 100112a:	eb05 030a 	add.w	r3, r5, sl
 100112e:	2602      	movs	r6, #2
 1001130:	f884 b033 	strb.w	fp, [r4, #51]	; 0x33
 1001134:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001138:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 100113c:	2a02      	cmp	r2, #2
 100113e:	d047      	beq.n	10011d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>
 1001140:	4447      	add	r7, r8
 1001142:	22ff      	movs	r2, #255	; 0xff
 1001144:	4427      	add	r7, r4
 1001146:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
 100114a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 100114e:	2b20      	cmp	r3, #32
 1001150:	d003      	beq.n	100115a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13a>
 1001152:	f894 0441 	ldrb.w	r0, [r4, #1089]	; 0x441
 1001156:	f002 faff 	bl	1003758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 100115a:	7f23      	ldrb	r3, [r4, #28]
 100115c:	2b00      	cmp	r3, #0
 100115e:	f040 80b1 	bne.w	10012c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2a4>
 1001162:	2e02      	cmp	r6, #2
 1001164:	d10b      	bne.n	100117e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
 1001166:	9b01      	ldr	r3, [sp, #4]
 1001168:	68a0      	ldr	r0, [r4, #8]
 100116a:	1ac0      	subs	r0, r0, r3
 100116c:	f001 f84a 	bl	1002204 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1001170:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
 1001174:	b143      	cbz	r3, 1001188 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
 1001176:	b005      	add	sp, #20
 1001178:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100117c:	4718      	bx	r3
 100117e:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
 1001182:	2b00      	cmp	r3, #0
 1001184:	f040 80a3 	bne.w	10012ce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2ae>
 1001188:	b005      	add	sp, #20
 100118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100118e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1001190:	3301      	adds	r3, #1
 1001192:	d004      	beq.n	100119e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17e>
 1001194:	f001 ffc8 	bl	1003128 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1001198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100119c:	62e3      	str	r3, [r4, #44]	; 0x2c
 100119e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 10011a2:	2b00      	cmp	r3, #0
 10011a4:	d159      	bne.n	100125a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x23a>
 10011a6:	2004      	movs	r0, #4
 10011a8:	2601      	movs	r6, #1
 10011aa:	f001 fb79 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 10011ae:	f001 fbff 	bl	10029b0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
 10011b2:	2220      	movs	r2, #32
 10011b4:	f8d4 343c 	ldr.w	r3, [r4, #1084]	; 0x43c
 10011b8:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 10011bc:	2200      	movs	r2, #0
 10011be:	601a      	str	r2, [r3, #0]
 10011c0:	eb05 030a 	add.w	r3, r5, sl
 10011c4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 10011c8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 10011cc:	2a02      	cmp	r2, #2
 10011ce:	d1b7      	bne.n	1001140 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
 10011d0:	eb07 0208 	add.w	r2, r7, r8
 10011d4:	2106      	movs	r1, #6
 10011d6:	4422      	add	r2, r4
 10011d8:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 10011dc:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 10011e0:	2920      	cmp	r1, #32
 10011e2:	b2cb      	uxtb	r3, r1
 10011e4:	d079      	beq.n	10012da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2ba>
 10011e6:	442b      	add	r3, r5
 10011e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 10011ec:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
 10011f0:	eb07 0308 	add.w	r3, r7, r8
 10011f4:	4455      	add	r5, sl
 10011f6:	4423      	add	r3, r4
 10011f8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 10011fc:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
 1001200:	2320      	movs	r3, #32
 1001202:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 1001206:	e79b      	b.n	1001140 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
 1001208:	eb05 020b 	add.w	r2, r5, fp
 100120c:	f896 c020 	ldrb.w	ip, [r6, #32]
 1001210:	2004      	movs	r0, #4
 1001212:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 1001216:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 100121a:	f886 2020 	strb.w	r2, [r6, #32]
 100121e:	4662      	mov	r2, ip
 1001220:	4611      	mov	r1, r2
 1001222:	18aa      	adds	r2, r5, r2
 1001224:	458b      	cmp	fp, r1
 1001226:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 100122a:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 100122e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 1001232:	d1f5      	bne.n	1001220 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x200>
 1001234:	f896 2022 	ldrb.w	r2, [r6, #34]	; 0x22
 1001238:	2a20      	cmp	r2, #32
 100123a:	b2d3      	uxtb	r3, r2
 100123c:	d017      	beq.n	100126e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x24e>
 100123e:	442b      	add	r3, r5
 1001240:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1001244:	f883 c039 	strb.w	ip, [r3, #57]	; 0x39
 1001248:	f886 1022 	strb.w	r1, [r6, #34]	; 0x22
 100124c:	4429      	add	r1, r5
 100124e:	2320      	movs	r3, #32
 1001250:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 1001254:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 1001258:	e747      	b.n	10010ea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xca>
 100125a:	2005      	movs	r0, #5
 100125c:	f001 fb20 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1001260:	2300      	movs	r3, #0
 1001262:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 1001266:	e79e      	b.n	10011a6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x186>
 1001268:	f001 f9c4 	bl	10025f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
 100126c:	e6f8      	b.n	1001060 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x40>
 100126e:	f886 c021 	strb.w	ip, [r6, #33]	; 0x21
 1001272:	e7e9      	b.n	1001248 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
 1001274:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 1001278:	f44f 710c 	mov.w	r1, #560	; 0x230
 100127c:	1ac0      	subs	r0, r0, r3
 100127e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1001282:	f001 fec7 	bl	1003014 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
 1001286:	68e3      	ldr	r3, [r4, #12]
 1001288:	9a01      	ldr	r2, [sp, #4]
 100128a:	4403      	add	r3, r0
 100128c:	1ad3      	subs	r3, r2, r3
 100128e:	021b      	lsls	r3, r3, #8
 1001290:	33ff      	adds	r3, #255	; 0xff
 1001292:	f6ff aed8 	blt.w	1001046 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x26>
 1001296:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 100129a:	2108      	movs	r1, #8
 100129c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 10012a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 10012a4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 10012a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 10012ac:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 10012b0:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 10012b4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 10012b8:	4798      	blx	r3
 10012ba:	f240 31dd 	movw	r1, #989	; 0x3dd
 10012be:	2070      	movs	r0, #112	; 0x70
 10012c0:	f002 f9b0 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10012c4:	f001 fd08 	bl	1002cd8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
 10012c8:	2300      	movs	r3, #0
 10012ca:	83a3      	strh	r3, [r4, #28]
 10012cc:	e749      	b.n	1001162 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
 10012ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 10012d2:	b005      	add	sp, #20
 10012d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10012d8:	4718      	bx	r3
 10012da:	f882 a021 	strb.w	sl, [r2, #33]	; 0x21
 10012de:	e787      	b.n	10011f0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1d0>
 10012e0:	f8b2 60ce 	ldrh.w	r6, [r2, #206]	; 0xce
 10012e4:	a903      	add	r1, sp, #12
 10012e6:	f10d 020b 	add.w	r2, sp, #11
 10012ea:	4630      	mov	r0, r6
 10012ec:	f000 ff98 	bl	1002220 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 10012f0:	f001 fd0e 	bl	1002d10 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
 10012f4:	f000 ffc0 	bl	1002278 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
 10012f8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 10012fc:	2a20      	cmp	r2, #32
 10012fe:	d02d      	beq.n	100135c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x33c>
 1001300:	68e2      	ldr	r2, [r4, #12]
 1001302:	3207      	adds	r2, #7
 1001304:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 1001308:	eba5 010b 	sub.w	r1, r5, fp
 100130c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 1001310:	f8d1 60c0 	ldr.w	r6, [r1, #192]	; 0xc0
 1001314:	1b90      	subs	r0, r2, r6
 1001316:	0200      	lsls	r0, r0, #8
 1001318:	28ff      	cmp	r0, #255	; 0xff
 100131a:	dc0f      	bgt.n	100133c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x31c>
 100131c:	4296      	cmp	r6, r2
 100131e:	d313      	bcc.n	1001348 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x328>
 1001320:	eba5 030b 	sub.w	r3, r5, fp
 1001324:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 1001328:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 100132c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 1001330:	1b89      	subs	r1, r1, r6
 1001332:	440a      	add	r2, r1
 1001334:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 1001338:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 100133c:	eb07 0308 	add.w	r3, r7, r8
 1001340:	4423      	add	r3, r4
 1001342:	f893 b020 	ldrb.w	fp, [r3, #32]
 1001346:	e6c1      	b.n	10010cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xac>
 1001348:	f8d1 00c8 	ldr.w	r0, [r1, #200]	; 0xc8
 100134c:	3801      	subs	r0, #1
 100134e:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
 1001352:	e7e5      	b.n	1001320 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x300>
 1001354:	21000284 	.word	0x21000284
 1001358:	00000000 	.word	0x00000000
 100135c:	9b01      	ldr	r3, [sp, #4]
 100135e:	f103 090b 	add.w	r9, r3, #11
 1001362:	b916      	cbnz	r6, 100136a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x34a>
 1001364:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
 1001368:	e7ce      	b.n	1001308 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x2e8>
 100136a:	f002 f89d 	bl	10034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 100136e:	2800      	cmp	r0, #0
 1001370:	d1f8      	bne.n	1001364 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x344>
 1001372:	f001 fe63 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 1001376:	f240 3156 	movw	r1, #854	; 0x356
 100137a:	4288      	cmp	r0, r1
 100137c:	d00a      	beq.n	1001394 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x374>
 100137e:	f240 51f5 	movw	r1, #1525	; 0x5f5
 1001382:	4288      	cmp	r0, r1
 1001384:	d00a      	beq.n	100139c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x37c>
 1001386:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 100138a:	d1eb      	bne.n	1001364 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x344>
 100138c:	9b01      	ldr	r3, [sp, #4]
 100138e:	f103 0918 	add.w	r9, r3, #24
 1001392:	e7e7      	b.n	1001364 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x344>
 1001394:	9b01      	ldr	r3, [sp, #4]
 1001396:	f103 0927 	add.w	r9, r3, #39	; 0x27
 100139a:	e7e3      	b.n	1001364 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x344>
 100139c:	9b01      	ldr	r3, [sp, #4]
 100139e:	f103 093d 	add.w	r9, r3, #61	; 0x3d
 10013a2:	e7df      	b.n	1001364 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x344>
 10013a4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 10013a8:	2070      	movs	r0, #112	; 0x70
 10013aa:	f002 f93b 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10013ae:	f240 31f5 	movw	r1, #1013	; 0x3f5
 10013b2:	2070      	movs	r0, #112	; 0x70
 10013b4:	f002 f936 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

010013b8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
 10013b8:	b538      	push	{r3, r4, r5, lr}
 10013ba:	460c      	mov	r4, r1
 10013bc:	4605      	mov	r5, r0
 10013be:	f001 ff71 	bl	10032a4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
 10013c2:	4912      	ldr	r1, [pc, #72]	; (100140c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x54>)
 10013c4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 10013c8:	f101 0c38 	add.w	ip, r1, #56	; 0x38
 10013cc:	fa5f fe83 	uxtb.w	lr, r3
 10013d0:	eb0c 1c83 	add.w	ip, ip, r3, lsl #6
 10013d4:	2300      	movs	r3, #0
 10013d6:	e002      	b.n	10013de <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x26>
 10013d8:	3301      	adds	r3, #1
 10013da:	2b20      	cmp	r3, #32
 10013dc:	d014      	beq.n	1001408 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x50>
 10013de:	f81c 2013 	ldrb.w	r2, [ip, r3, lsl #1]
 10013e2:	b2d8      	uxtb	r0, r3
 10013e4:	2a00      	cmp	r2, #0
 10013e6:	d1f7      	bne.n	10013d8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x20>
 10013e8:	eb03 1e4e 	add.w	lr, r3, lr, lsl #5
 10013ec:	2201      	movs	r2, #1
 10013ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 10013f2:	eb01 0e4e 	add.w	lr, r1, lr, lsl #1
 10013f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 10013fa:	f88e 2038 	strb.w	r2, [lr, #56]	; 0x38
 10013fe:	f8c3 50b8 	str.w	r5, [r3, #184]	; 0xb8
 1001402:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
 1001406:	bd38      	pop	{r3, r4, r5, pc}
 1001408:	4618      	mov	r0, r3
 100140a:	bd38      	pop	{r3, r4, r5, pc}
 100140c:	21000284 	.word	0x21000284

01001410 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
 1001410:	4ab4      	ldr	r2, [pc, #720]	; (10016e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>)
 1001412:	6853      	ldr	r3, [r2, #4]
 1001414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1001418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 100141c:	b095      	sub	sp, #84	; 0x54
 100141e:	9002      	str	r0, [sp, #8]
 1001420:	9106      	str	r1, [sp, #24]
 1001422:	2b00      	cmp	r3, #0
 1001424:	f040 82a2 	bne.w	100196c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x55c>
 1001428:	2308      	movs	r3, #8
 100142a:	9305      	str	r3, [sp, #20]
 100142c:	9b06      	ldr	r3, [sp, #24]
 100142e:	781b      	ldrb	r3, [r3, #0]
 1001430:	2b01      	cmp	r3, #1
 1001432:	f200 8396 	bhi.w	1001b62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x752>
 1001436:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 10016e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
 100143a:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 10016ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2dc>
 100143e:	f1ba 0f00 	cmp.w	sl, #0
 1001442:	d004      	beq.n	100144e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e>
 1001444:	2100      	movs	r1, #0
 1001446:	f240 703e 	movw	r0, #1854	; 0x73e
 100144a:	f3af 8000 	nop.w
 100144e:	9b02      	ldr	r3, [sp, #8]
 1001450:	2500      	movs	r5, #0
 1001452:	2601      	movs	r6, #1
 1001454:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 1001458:	009b      	lsls	r3, r3, #2
 100145a:	9309      	str	r3, [sp, #36]	; 0x24
 100145c:	f1ba 0f00 	cmp.w	sl, #0
 1001460:	d004      	beq.n	100146c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5c>
 1001462:	2100      	movs	r1, #0
 1001464:	f240 7049 	movw	r0, #1865	; 0x749
 1001468:	f3af 8000 	nop.w
 100146c:	b926      	cbnz	r6, 1001478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x68>
 100146e:	4ba0      	ldr	r3, [pc, #640]	; (10016f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>)
 1001470:	b10b      	cbz	r3, 1001476 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
 1001472:	f3af 8000 	nop.w
 1001476:	b662      	cpsie	i
 1001478:	f89b 3031 	ldrb.w	r3, [fp, #49]	; 0x31
 100147c:	fa5f f883 	uxtb.w	r8, r3
 1001480:	f04f 0e00 	mov.w	lr, #0
 1001484:	9b05      	ldr	r3, [sp, #20]
 1001486:	f88b e029 	strb.w	lr, [fp, #41]	; 0x29
 100148a:	2b00      	cmp	r3, #0
 100148c:	f040 821f 	bne.w	10018ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4be>
 1001490:	f8cd 800c 	str.w	r8, [sp, #12]
 1001494:	f1ba 0f00 	cmp.w	sl, #0
 1001498:	d004      	beq.n	10014a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
 100149a:	2100      	movs	r1, #0
 100149c:	f240 705d 	movw	r0, #1885	; 0x75d
 10014a0:	f3af 8000 	nop.w
 10014a4:	a80a      	add	r0, sp, #40	; 0x28
 10014a6:	ac0d      	add	r4, sp, #52	; 0x34
 10014a8:	f001 f94e 	bl	1002748 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
 10014ac:	a90a      	add	r1, sp, #40	; 0x28
 10014ae:	4643      	mov	r3, r8
 10014b0:	aa0f      	add	r2, sp, #60	; 0x3c
 10014b2:	c903      	ldmia	r1, {r0, r1}
 10014b4:	e884 0003 	stmia.w	r4, {r0, r1}
 10014b8:	9906      	ldr	r1, [sp, #24]
 10014ba:	4620      	mov	r0, r4
 10014bc:	f7ff f940 	bl	1000740 <sym_5BFZYXG2IJSERGYR7MINRNGC6L3L66U7PFQBYTQ>
 10014c0:	f1ba 0f00 	cmp.w	sl, #0
 10014c4:	d004      	beq.n	10014d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
 10014c6:	2100      	movs	r1, #0
 10014c8:	f240 7064 	movw	r0, #1892	; 0x764
 10014cc:	f3af 8000 	nop.w
 10014d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 10014d4:	eb02 1143 	add.w	r1, r2, r3, lsl #5
 10014d8:	015e      	lsls	r6, r3, #5
 10014da:	eb0b 0141 	add.w	r1, fp, r1, lsl #1
 10014de:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 10014e2:	3b01      	subs	r3, #1
 10014e4:	2b01      	cmp	r3, #1
 10014e6:	f200 80f9 	bhi.w	10016dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
 10014ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 10014ec:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 10014f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 10014f2:	4880      	ldr	r0, [pc, #512]	; (10016f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e4>)
 10014f4:	1ad2      	subs	r2, r2, r3
 10014f6:	eba9 0303 	sub.w	r3, r9, r3
 10014fa:	4018      	ands	r0, r3
 10014fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1001500:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 1001504:	3800      	subs	r0, #0
 1001506:	bf18      	it	ne
 1001508:	2001      	movne	r0, #1
 100150a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 100150e:	bf88      	it	hi
 1001510:	2000      	movhi	r0, #0
 1001512:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 1001516:	bf8c      	ite	hi
 1001518:	2000      	movhi	r0, #0
 100151a:	f000 0001 	andls.w	r0, r0, #1
 100151e:	9004      	str	r0, [sp, #16]
 1001520:	2800      	cmp	r0, #0
 1001522:	f040 80eb 	bne.w	10016fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
 1001526:	9803      	ldr	r0, [sp, #12]
 1001528:	2204      	movs	r2, #4
 100152a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 100152e:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
 1001532:	0042      	lsls	r2, r0, #1
 1001534:	445b      	add	r3, fp
 1001536:	9208      	str	r2, [sp, #32]
 1001538:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 100153c:	2920      	cmp	r1, #32
 100153e:	b2ca      	uxtb	r2, r1
 1001540:	f000 826b 	beq.w	1001a1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x60a>
 1001544:	4432      	add	r2, r6
 1001546:	9b02      	ldr	r3, [sp, #8]
 1001548:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 100154c:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
 1001550:	4602      	mov	r2, r0
 1001552:	9b08      	ldr	r3, [sp, #32]
 1001554:	2500      	movs	r5, #0
 1001556:	4413      	add	r3, r2
 1001558:	9a02      	ldr	r2, [sp, #8]
 100155a:	445b      	add	r3, fp
 100155c:	4416      	add	r6, r2
 100155e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 1001562:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
 1001566:	2320      	movs	r3, #32
 1001568:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
 100156c:	2301      	movs	r3, #1
 100156e:	9304      	str	r3, [sp, #16]
 1001570:	f1ba 0f00 	cmp.w	sl, #0
 1001574:	d004      	beq.n	1001580 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x170>
 1001576:	2100      	movs	r1, #0
 1001578:	f240 7069 	movw	r0, #1897	; 0x769
 100157c:	f3af 8000 	nop.w
 1001580:	4b5d      	ldr	r3, [pc, #372]	; (10016f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e8>)
 1001582:	b10b      	cbz	r3, 1001588 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x178>
 1001584:	f3af 8000 	nop.w
 1001588:	f3ef 8710 	mrs	r7, PRIMASK
 100158c:	463e      	mov	r6, r7
 100158e:	b672      	cpsid	i
 1001590:	f1ba 0f00 	cmp.w	sl, #0
 1001594:	d004      	beq.n	10015a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x190>
 1001596:	2100      	movs	r1, #0
 1001598:	f240 706f 	movw	r0, #1903	; 0x76f
 100159c:	f3af 8000 	nop.w
 10015a0:	f89b 4029 	ldrb.w	r4, [fp, #41]	; 0x29
 10015a4:	2c00      	cmp	r4, #0
 10015a6:	f47f af59 	bne.w	100145c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
 10015aa:	f1ba 0f00 	cmp.w	sl, #0
 10015ae:	d004      	beq.n	10015ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1aa>
 10015b0:	4621      	mov	r1, r4
 10015b2:	f240 7077 	movw	r0, #1911	; 0x777
 10015b6:	f3af 8000 	nop.w
 10015ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 10015bc:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 10015c0:	eb0b 0c03 	add.w	ip, fp, r3
 10015c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 10015c8:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
 10015cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 10015d0:	f8de 3000 	ldr.w	r3, [lr]
 10015d4:	f8cc 3000 	str.w	r3, [ip]
 10015d8:	9b04      	ldr	r3, [sp, #16]
 10015da:	2b00      	cmp	r3, #0
 10015dc:	f000 8292 	beq.w	1001b04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6f4>
 10015e0:	f1ba 0f00 	cmp.w	sl, #0
 10015e4:	d004      	beq.n	10015f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
 10015e6:	2100      	movs	r1, #0
 10015e8:	f240 7084 	movw	r0, #1924	; 0x784
 10015ec:	f3af 8000 	nop.w
 10015f0:	9b05      	ldr	r3, [sp, #20]
 10015f2:	2b00      	cmp	r3, #0
 10015f4:	f000 8290 	beq.w	1001b18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x708>
 10015f8:	b1d5      	cbz	r5, 1001630 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x220>
 10015fa:	f89b 3032 	ldrb.w	r3, [fp, #50]	; 0x32
 10015fe:	2b20      	cmp	r3, #32
 1001600:	d116      	bne.n	1001630 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x220>
 1001602:	f1ba 0f00 	cmp.w	sl, #0
 1001606:	d004      	beq.n	1001612 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x202>
 1001608:	2100      	movs	r1, #0
 100160a:	f240 7089 	movw	r0, #1929	; 0x789
 100160e:	f3af 8000 	nop.w
 1001612:	4641      	mov	r1, r8
 1001614:	2002      	movs	r0, #2
 1001616:	f7ff fc35 	bl	1000e84 <sym_6DRBMA4AALINNQCYSTCRAAZC6TGEB2PK5DM2KDI>
 100161a:	2800      	cmp	r0, #0
 100161c:	f040 828e 	bne.w	1001b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x72c>
 1001620:	9b06      	ldr	r3, [sp, #24]
 1001622:	7819      	ldrb	r1, [r3, #0]
 1001624:	2900      	cmp	r1, #0
 1001626:	f000 823e 	beq.w	1001aa6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x696>
 100162a:	2901      	cmp	r1, #1
 100162c:	f000 8194 	beq.w	1001958 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x548>
 1001630:	f1ba 0f00 	cmp.w	sl, #0
 1001634:	d004      	beq.n	1001640 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x230>
 1001636:	2100      	movs	r1, #0
 1001638:	f240 70a6 	movw	r0, #1958	; 0x7a6
 100163c:	f3af 8000 	nop.w
 1001640:	f89b 3031 	ldrb.w	r3, [fp, #49]	; 0x31
 1001644:	43db      	mvns	r3, r3
 1001646:	f003 0301 	and.w	r3, r3, #1
 100164a:	f88b 3031 	strb.w	r3, [fp, #49]	; 0x31
 100164e:	23ff      	movs	r3, #255	; 0xff
 1001650:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
 1001654:	f1ba 0f00 	cmp.w	sl, #0
 1001658:	d004      	beq.n	1001664 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
 100165a:	2100      	movs	r1, #0
 100165c:	f240 70b7 	movw	r0, #1975	; 0x7b7
 1001660:	f3af 8000 	nop.w
 1001664:	2c02      	cmp	r4, #2
 1001666:	f000 81cb 	beq.w	1001a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5f0>
 100166a:	2c01      	cmp	r4, #1
 100166c:	d105      	bne.n	100167a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26a>
 100166e:	f8db 3438 	ldr.w	r3, [fp, #1080]	; 0x438
 1001672:	b113      	cbz	r3, 100167a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26a>
 1001674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1001678:	4798      	blx	r3
 100167a:	b927      	cbnz	r7, 1001686 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x276>
 100167c:	4b1c      	ldr	r3, [pc, #112]	; (10016f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>)
 100167e:	b10b      	cbz	r3, 1001684 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x274>
 1001680:	f3af 8000 	nop.w
 1001684:	b662      	cpsie	i
 1001686:	f1ba 0f00 	cmp.w	sl, #0
 100168a:	d004      	beq.n	1001696 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x286>
 100168c:	2100      	movs	r1, #0
 100168e:	f240 70c7 	movw	r0, #1991	; 0x7c7
 1001692:	f3af 8000 	nop.w
 1001696:	9b04      	ldr	r3, [sp, #16]
 1001698:	b1a3      	cbz	r3, 10016c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
 100169a:	f89b 3031 	ldrb.w	r3, [fp, #49]	; 0x31
 100169e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 10016a2:	445b      	add	r3, fp
 10016a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 10016a8:	2b20      	cmp	r3, #32
 10016aa:	d00b      	beq.n	10016c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
 10016ac:	f1ba 0f00 	cmp.w	sl, #0
 10016b0:	d004      	beq.n	10016bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ac>
 10016b2:	2100      	movs	r1, #0
 10016b4:	f240 70ce 	movw	r0, #1998	; 0x7ce
 10016b8:	f3af 8000 	nop.w
 10016bc:	f89b 0441 	ldrb.w	r0, [fp, #1089]	; 0x441
 10016c0:	f002 f84a 	bl	1003758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 10016c4:	f1ba 0f00 	cmp.w	sl, #0
 10016c8:	d004      	beq.n	10016d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
 10016ca:	2100      	movs	r1, #0
 10016cc:	f240 70d3 	movw	r0, #2003	; 0x7d3
 10016d0:	f3af 8000 	nop.w
 10016d4:	9804      	ldr	r0, [sp, #16]
 10016d6:	b015      	add	sp, #84	; 0x54
 10016d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10016dc:	2300      	movs	r3, #0
 10016de:	9304      	str	r3, [sp, #16]
 10016e0:	e746      	b.n	1001570 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x160>
 10016e2:	bf00      	nop
 10016e4:	e000ed00 	.word	0xe000ed00
 10016e8:	21000284 	.word	0x21000284
	...
 10016f4:	00fffffe 	.word	0x00fffffe
 10016f8:	00000000 	.word	0x00000000
 10016fc:	9a03      	ldr	r2, [sp, #12]
 10016fe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 1001702:	445b      	add	r3, fp
 1001704:	f893 4020 	ldrb.w	r4, [r3, #32]
 1001708:	0053      	lsls	r3, r2, #1
 100170a:	2c20      	cmp	r4, #32
 100170c:	9308      	str	r3, [sp, #32]
 100170e:	f000 81aa 	beq.w	1001a66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x656>
 1001712:	2320      	movs	r3, #32
 1001714:	464f      	mov	r7, r9
 1001716:	9301      	str	r3, [sp, #4]
 1001718:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 100171c:	00e5      	lsls	r5, r4, #3
 100171e:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 1001722:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 1001726:	1afb      	subs	r3, r7, r3
 1001728:	021b      	lsls	r3, r3, #8
 100172a:	33ff      	adds	r3, #255	; 0xff
 100172c:	db25      	blt.n	100177a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
 100172e:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 1001732:	2b00      	cmp	r3, #0
 1001734:	f000 80bf 	beq.w	10018b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4a6>
 1001738:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
 100173c:	2b00      	cmp	r3, #0
 100173e:	f040 80ba 	bne.w	10018b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4a6>
 1001742:	f8d2 90c0 	ldr.w	r9, [r2, #192]	; 0xc0
 1001746:	f001 fc79 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 100174a:	f240 3356 	movw	r3, #854	; 0x356
 100174e:	4298      	cmp	r0, r3
 1001750:	f000 812f 	beq.w	10019b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5a2>
 1001754:	f240 53f5 	movw	r3, #1525	; 0x5f5
 1001758:	4298      	cmp	r0, r3
 100175a:	f000 8126 	beq.w	10019aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x59a>
 100175e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 1001762:	bf14      	ite	ne
 1001764:	2201      	movne	r2, #1
 1001766:	220e      	moveq	r2, #14
 1001768:	eba7 0709 	sub.w	r7, r7, r9
 100176c:	023f      	lsls	r7, r7, #8
 100176e:	bf48      	it	mi
 1001770:	37ff      	addmi	r7, #255	; 0xff
 1001772:	ebb2 2f27 	cmp.w	r2, r7, asr #8
 1001776:	f340 809e 	ble.w	10018b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4a6>
 100177a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 100177e:	1b28      	subs	r0, r5, r4
 1001780:	9910      	ldr	r1, [sp, #64]	; 0x40
 1001782:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
 1001786:	f8d0 70c0 	ldr.w	r7, [r0, #192]	; 0xc0
 100178a:	1a79      	subs	r1, r7, r1
 100178c:	0209      	lsls	r1, r1, #8
 100178e:	31ff      	adds	r1, #255	; 0xff
 1001790:	db7c      	blt.n	100188c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47c>
 1001792:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
 1001796:	b119      	cbz	r1, 10017a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>
 1001798:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 100179c:	2900      	cmp	r1, #0
 100179e:	d05a      	beq.n	1001856 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x446>
 10017a0:	9b01      	ldr	r3, [sp, #4]
 10017a2:	4599      	cmp	r9, r3
 10017a4:	f000 8157 	beq.w	1001a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x646>
 10017a8:	f1b9 0f20 	cmp.w	r9, #32
 10017ac:	f000 81d4 	beq.w	1001b58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x748>
 10017b0:	9b01      	ldr	r3, [sp, #4]
 10017b2:	2b20      	cmp	r3, #32
 10017b4:	eb06 0309 	add.w	r3, r6, r9
 10017b8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 10017bc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 10017c0:	f000 8134 	beq.w	1001a2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x61c>
 10017c4:	9b01      	ldr	r3, [sp, #4]
 10017c6:	18f3      	adds	r3, r6, r3
 10017c8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 10017cc:	f893 5039 	ldrb.w	r5, [r3, #57]	; 0x39
 10017d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 10017d4:	4629      	mov	r1, r5
 10017d6:	2405      	movs	r4, #5
 10017d8:	1873      	adds	r3, r6, r1
 10017da:	460a      	mov	r2, r1
 10017dc:	4608      	mov	r0, r1
 10017de:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 10017e2:	4591      	cmp	r9, r2
 10017e4:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 10017e8:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
 10017ec:	d1f4      	bne.n	10017d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
 10017ee:	9c03      	ldr	r4, [sp, #12]
 10017f0:	9b08      	ldr	r3, [sp, #32]
 10017f2:	4423      	add	r3, r4
 10017f4:	445b      	add	r3, fp
 10017f6:	f893 7022 	ldrb.w	r7, [r3, #34]	; 0x22
 10017fa:	2f20      	cmp	r7, #32
 10017fc:	b2fc      	uxtb	r4, r7
 10017fe:	f000 814f 	beq.w	1001aa0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x690>
 1001802:	4434      	add	r4, r6
 1001804:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 1001808:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 100180c:	9b08      	ldr	r3, [sp, #32]
 100180e:	4432      	add	r2, r6
 1001810:	9c03      	ldr	r4, [sp, #12]
 1001812:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 1001816:	4423      	add	r3, r4
 1001818:	445b      	add	r3, fp
 100181a:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 100181e:	2020      	movs	r0, #32
 1001820:	9b02      	ldr	r3, [sp, #8]
 1001822:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
 1001826:	18f3      	adds	r3, r6, r3
 1001828:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 100182c:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 1001830:	9b01      	ldr	r3, [sp, #4]
 1001832:	4283      	cmp	r3, r0
 1001834:	f000 811d 	beq.w	1001a72 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x662>
 1001838:	461c      	mov	r4, r3
 100183a:	4434      	add	r4, r6
 100183c:	9b02      	ldr	r3, [sp, #8]
 100183e:	2500      	movs	r5, #0
 1001840:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 1001844:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 1001848:	441e      	add	r6, r3
 100184a:	2303      	movs	r3, #3
 100184c:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
 1001850:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
 1001854:	e68c      	b.n	1001570 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x160>
 1001856:	990f      	ldr	r1, [sp, #60]	; 0x3c
 1001858:	9107      	str	r1, [sp, #28]
 100185a:	f001 fbef 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 100185e:	f240 3256 	movw	r2, #854	; 0x356
 1001862:	9907      	ldr	r1, [sp, #28]
 1001864:	f240 53f5 	movw	r3, #1525	; 0x5f5
 1001868:	4290      	cmp	r0, r2
 100186a:	f000 80a0 	beq.w	10019ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x59e>
 100186e:	4298      	cmp	r0, r3
 1001870:	f000 8099 	beq.w	10019a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x596>
 1001874:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 1001878:	bf14      	ite	ne
 100187a:	2001      	movne	r0, #1
 100187c:	200e      	moveq	r0, #14
 100187e:	1a7f      	subs	r7, r7, r1
 1001880:	023f      	lsls	r7, r7, #8
 1001882:	bf48      	it	mi
 1001884:	37ff      	addmi	r7, #255	; 0xff
 1001886:	ebb0 2f27 	cmp.w	r0, r7, asr #8
 100188a:	dd89      	ble.n	10017a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>
 100188c:	1b2d      	subs	r5, r5, r4
 100188e:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 1001892:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 1001896:	f895 00d0 	ldrb.w	r0, [r5, #208]	; 0xd0
 100189a:	4288      	cmp	r0, r1
 100189c:	f240 808b 	bls.w	10019b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5a6>
 10018a0:	1931      	adds	r1, r6, r4
 10018a2:	46a1      	mov	r9, r4
 10018a4:	eb0b 0141 	add.w	r1, fp, r1, lsl #1
 10018a8:	f891 4039 	ldrb.w	r4, [r1, #57]	; 0x39
 10018ac:	2c20      	cmp	r4, #32
 10018ae:	f000 80ce 	beq.w	1001a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x63e>
 10018b2:	00e5      	lsls	r5, r4, #3
 10018b4:	e763      	b.n	100177e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36e>
 10018b6:	1933      	adds	r3, r6, r4
 10018b8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 10018bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 10018c0:	2b20      	cmp	r3, #32
 10018c2:	f000 80e1 	beq.w	1001a88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x678>
 10018c6:	9401      	str	r4, [sp, #4]
 10018c8:	461c      	mov	r4, r3
 10018ca:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 10018cc:	e724      	b.n	1001718 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x308>
 10018ce:	4caa      	ldr	r4, [pc, #680]	; (1001b78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x768>)
 10018d0:	f108 0701 	add.w	r7, r8, #1
 10018d4:	eb04 1c88 	add.w	ip, r4, r8, lsl #6
 10018d8:	f007 0701 	and.w	r7, r7, #1
 10018dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 10018e0:	eb04 1487 	add.w	r4, r4, r7, lsl #6
 10018e4:	9703      	str	r7, [sp, #12]
 10018e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 10018e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 10018ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 10018ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 10018f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 10018f4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 10018f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 10018fc:	f1ba 0f00 	cmp.w	sl, #0
 1001900:	d004      	beq.n	100190c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4fc>
 1001902:	4671      	mov	r1, lr
 1001904:	f240 505e 	movw	r0, #1374	; 0x55e
 1001908:	f3af 8000 	nop.w
 100190c:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 1001910:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 1001914:	3220      	adds	r2, #32
 1001916:	3320      	adds	r3, #32
 1001918:	f83b 1002 	ldrh.w	r1, [fp, r2]
 100191c:	eb0b 0002 	add.w	r0, fp, r2
 1001920:	7882      	ldrb	r2, [r0, #2]
 1001922:	f82b 1003 	strh.w	r1, [fp, r3]
 1001926:	445b      	add	r3, fp
 1001928:	709a      	strb	r2, [r3, #2]
 100192a:	f1ba 0f00 	cmp.w	sl, #0
 100192e:	d00c      	beq.n	100194a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x53a>
 1001930:	2100      	movs	r1, #0
 1001932:	f240 5062 	movw	r0, #1378	; 0x562
 1001936:	f3af 8000 	nop.w
 100193a:	f1ba 0f00 	cmp.w	sl, #0
 100193e:	d004      	beq.n	100194a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x53a>
 1001940:	2100      	movs	r1, #0
 1001942:	f240 7053 	movw	r0, #1875	; 0x753
 1001946:	f3af 8000 	nop.w
 100194a:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
 100194e:	2b00      	cmp	r3, #0
 1001950:	f47f ad84 	bne.w	100145c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
 1001954:	46b8      	mov	r8, r7
 1001956:	e59d      	b.n	1001494 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
 1001958:	f1ba 0f00 	cmp.w	sl, #0
 100195c:	f43f ad86 	beq.w	100146c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5c>
 1001960:	4601      	mov	r1, r0
 1001962:	f240 709c 	movw	r0, #1948	; 0x79c
 1001966:	f3af 8000 	nop.w
 100196a:	e577      	b.n	100145c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
 100196c:	3b10      	subs	r3, #16
 100196e:	b259      	sxtb	r1, r3
 1001970:	2900      	cmp	r1, #0
 1001972:	db64      	blt.n	1001a3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x62e>
 1001974:	4b81      	ldr	r3, [pc, #516]	; (1001b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x76c>)
 1001976:	5c5b      	ldrb	r3, [r3, r1]
 1001978:	095b      	lsrs	r3, r3, #5
 100197a:	9305      	str	r3, [sp, #20]
 100197c:	2b00      	cmp	r3, #0
 100197e:	f47f ad55 	bne.w	100142c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c>
 1001982:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 1001b80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x770>
 1001986:	f89b 3032 	ldrb.w	r3, [fp, #50]	; 0x32
 100198a:	2b20      	cmp	r3, #32
 100198c:	f000 80ee 	beq.w	1001b6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x75c>
 1001990:	9b06      	ldr	r3, [sp, #24]
 1001992:	781b      	ldrb	r3, [r3, #0]
 1001994:	9305      	str	r3, [sp, #20]
 1001996:	2b00      	cmp	r3, #0
 1001998:	f43f ad4f 	beq.w	100143a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a>
 100199c:	f240 7137 	movw	r1, #1847	; 0x737
 10019a0:	2070      	movs	r0, #112	; 0x70
 10019a2:	f001 fe3f 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10019a6:	2033      	movs	r0, #51	; 0x33
 10019a8:	e769      	b.n	100187e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46e>
 10019aa:	2233      	movs	r2, #51	; 0x33
 10019ac:	e6dc      	b.n	1001768 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>
 10019ae:	201d      	movs	r0, #29
 10019b0:	e765      	b.n	100187e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46e>
 10019b2:	221d      	movs	r2, #29
 10019b4:	e6d8      	b.n	1001768 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>
 10019b6:	9a03      	ldr	r2, [sp, #12]
 10019b8:	2004      	movs	r0, #4
 10019ba:	9b08      	ldr	r3, [sp, #32]
 10019bc:	4413      	add	r3, r2
 10019be:	9a02      	ldr	r2, [sp, #8]
 10019c0:	445b      	add	r3, fp
 10019c2:	18b2      	adds	r2, r6, r2
 10019c4:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 10019c8:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 10019cc:	2920      	cmp	r1, #32
 10019ce:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 10019d2:	b2ca      	uxtb	r2, r1
 10019d4:	d026      	beq.n	1001a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x614>
 10019d6:	4432      	add	r2, r6
 10019d8:	9b02      	ldr	r3, [sp, #8]
 10019da:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 10019de:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
 10019e2:	9a03      	ldr	r2, [sp, #12]
 10019e4:	2500      	movs	r5, #0
 10019e6:	9b08      	ldr	r3, [sp, #32]
 10019e8:	4413      	add	r3, r2
 10019ea:	9a02      	ldr	r2, [sp, #8]
 10019ec:	445b      	add	r3, fp
 10019ee:	4416      	add	r6, r2
 10019f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 10019f4:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
 10019f8:	2320      	movs	r3, #32
 10019fa:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
 10019fe:	e5b7      	b.n	1001570 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x160>
 1001a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1001a02:	f8db 0008 	ldr.w	r0, [fp, #8]
 1001a06:	1ac0      	subs	r0, r0, r3
 1001a08:	f000 fbfc 	bl	1002204 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1001a0c:	f8db 3438 	ldr.w	r3, [fp, #1080]	; 0x438
 1001a10:	2b00      	cmp	r3, #0
 1001a12:	f43f ae32 	beq.w	100167a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26a>
 1001a16:	4798      	blx	r3
 1001a18:	e62f      	b.n	100167a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26a>
 1001a1a:	9a02      	ldr	r2, [sp, #8]
 1001a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 1001a20:	4602      	mov	r2, r0
 1001a22:	e596      	b.n	1001552 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x142>
 1001a24:	9a02      	ldr	r2, [sp, #8]
 1001a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 1001a2a:	e7da      	b.n	10019e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x5d2>
 1001a2c:	9b08      	ldr	r3, [sp, #32]
 1001a2e:	9903      	ldr	r1, [sp, #12]
 1001a30:	440b      	add	r3, r1
 1001a32:	445b      	add	r3, fp
 1001a34:	f893 5020 	ldrb.w	r5, [r3, #32]
 1001a38:	f883 2020 	strb.w	r2, [r3, #32]
 1001a3c:	e6ca      	b.n	10017d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>
 1001a3e:	f003 030f 	and.w	r3, r3, #15
 1001a42:	3b04      	subs	r3, #4
 1001a44:	4413      	add	r3, r2
 1001a46:	7e1b      	ldrb	r3, [r3, #24]
 1001a48:	095b      	lsrs	r3, r3, #5
 1001a4a:	9305      	str	r3, [sp, #20]
 1001a4c:	e796      	b.n	100197c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x56c>
 1001a4e:	9b01      	ldr	r3, [sp, #4]
 1001a50:	4599      	cmp	r9, r3
 1001a52:	f47f aead 	bne.w	10017b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
 1001a56:	2b20      	cmp	r3, #32
 1001a58:	d115      	bne.n	1001a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x676>
 1001a5a:	9b08      	ldr	r3, [sp, #32]
 1001a5c:	9a03      	ldr	r2, [sp, #12]
 1001a5e:	4413      	add	r3, r2
 1001a60:	445b      	add	r3, fp
 1001a62:	f893 4020 	ldrb.w	r4, [r3, #32]
 1001a66:	9b02      	ldr	r3, [sp, #8]
 1001a68:	18f3      	adds	r3, r6, r3
 1001a6a:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 1001a6e:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
 1001a72:	9a03      	ldr	r2, [sp, #12]
 1001a74:	9b08      	ldr	r3, [sp, #32]
 1001a76:	9d04      	ldr	r5, [sp, #16]
 1001a78:	4413      	add	r3, r2
 1001a7a:	9a02      	ldr	r2, [sp, #8]
 1001a7c:	445b      	add	r3, fp
 1001a7e:	f883 2020 	strb.w	r2, [r3, #32]
 1001a82:	4613      	mov	r3, r2
 1001a84:	e6e0      	b.n	1001848 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x438>
 1001a86:	461c      	mov	r4, r3
 1001a88:	9b02      	ldr	r3, [sp, #8]
 1001a8a:	1932      	adds	r2, r6, r4
 1001a8c:	18f3      	adds	r3, r6, r3
 1001a8e:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 1001a92:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 1001a96:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 1001a9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 1001a9e:	e6cc      	b.n	100183a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x42a>
 1001aa0:	f883 5021 	strb.w	r5, [r3, #33]	; 0x21
 1001aa4:	e6b2      	b.n	100180c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>
 1001aa6:	f1ba 0f00 	cmp.w	sl, #0
 1001aaa:	d003      	beq.n	1001ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a4>
 1001aac:	f240 7091 	movw	r0, #1937	; 0x791
 1001ab0:	f3af 8000 	nop.w
 1001ab4:	f89b 3031 	ldrb.w	r3, [fp, #49]	; 0x31
 1001ab8:	2004      	movs	r0, #4
 1001aba:	f8dd c008 	ldr.w	ip, [sp, #8]
 1001abe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 1001ac2:	eb0c 1243 	add.w	r2, ip, r3, lsl #5
 1001ac6:	4459      	add	r1, fp
 1001ac8:	b2de      	uxtb	r6, r3
 1001aca:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 1001ace:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 1001ad2:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 1001ad6:	015a      	lsls	r2, r3, #5
 1001ad8:	2c20      	cmp	r4, #32
 1001ada:	ea4f 0343 	mov.w	r3, r3, lsl #1
 1001ade:	b2e0      	uxtb	r0, r4
 1001ae0:	d036      	beq.n	1001b50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x740>
 1001ae2:	1811      	adds	r1, r2, r0
 1001ae4:	eb0b 0141 	add.w	r1, fp, r1, lsl #1
 1001ae8:	f881 c039 	strb.w	ip, [r1, #57]	; 0x39
 1001aec:	4661      	mov	r1, ip
 1001aee:	4433      	add	r3, r6
 1001af0:	440a      	add	r2, r1
 1001af2:	9504      	str	r5, [sp, #16]
 1001af4:	445b      	add	r3, fp
 1001af6:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 1001afa:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
 1001afe:	2320      	movs	r3, #32
 1001b00:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
 1001b04:	f1ba 0f00 	cmp.w	sl, #0
 1001b08:	f43f adb7 	beq.w	100167a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26a>
 1001b0c:	2100      	movs	r1, #0
 1001b0e:	f240 70b7 	movw	r0, #1975	; 0x7b7
 1001b12:	f3af 8000 	nop.w
 1001b16:	e5b0      	b.n	100167a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26a>
 1001b18:	f1ba 0f00 	cmp.w	sl, #0
 1001b1c:	d014      	beq.n	1001b48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x738>
 1001b1e:	4619      	mov	r1, r3
 1001b20:	f240 70a6 	movw	r0, #1958	; 0x7a6
 1001b24:	461c      	mov	r4, r3
 1001b26:	f3af 8000 	nop.w
 1001b2a:	23ff      	movs	r3, #255	; 0xff
 1001b2c:	4621      	mov	r1, r4
 1001b2e:	f240 70b7 	movw	r0, #1975	; 0x7b7
 1001b32:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
 1001b36:	f3af 8000 	nop.w
 1001b3a:	e59e      	b.n	100167a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26a>
 1001b3c:	4604      	mov	r4, r0
 1001b3e:	f1ba 0f00 	cmp.w	sl, #0
 1001b42:	f47f ad78 	bne.w	1001636 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x226>
 1001b46:	e57b      	b.n	1001640 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x230>
 1001b48:	23ff      	movs	r3, #255	; 0xff
 1001b4a:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
 1001b4e:	e594      	b.n	100167a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26a>
 1001b50:	f881 c021 	strb.w	ip, [r1, #33]	; 0x21
 1001b54:	4661      	mov	r1, ip
 1001b56:	e7ca      	b.n	1001aee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6de>
 1001b58:	f44f 7126 	mov.w	r1, #664	; 0x298
 1001b5c:	2070      	movs	r0, #112	; 0x70
 1001b5e:	f001 fd61 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001b62:	f240 713b 	movw	r1, #1851	; 0x73b
 1001b66:	2070      	movs	r0, #112	; 0x70
 1001b68:	f001 fd5c 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001b6c:	f240 7134 	movw	r1, #1844	; 0x734
 1001b70:	2070      	movs	r0, #112	; 0x70
 1001b72:	f001 fd57 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001b76:	bf00      	nop
 1001b78:	210002bc 	.word	0x210002bc
 1001b7c:	e000e400 	.word	0xe000e400
 1001b80:	21000284 	.word	0x21000284

01001b84 <sym_VJEK4XS7F73UVK3OKMWLYLJEHOD3EB5MY72V6OQ>:
 1001b84:	4b01      	ldr	r3, [pc, #4]	; (1001b8c <sym_VJEK4XS7F73UVK3OKMWLYLJEHOD3EB5MY72V6OQ+0x8>)
 1001b86:	f893 0440 	ldrb.w	r0, [r3, #1088]	; 0x440
 1001b8a:	4770      	bx	lr
 1001b8c:	21000284 	.word	0x21000284

01001b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
 1001b90:	b510      	push	{r4, lr}
 1001b92:	2807      	cmp	r0, #7
 1001b94:	f200 809d 	bhi.w	1001cd2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x142>
 1001b98:	e8df f000 	tbb	[pc, r0]
 1001b9c:	72634e1e 	.word	0x72634e1e
 1001ba0:	0483789b 	.word	0x0483789b
 1001ba4:	4c6e      	ldr	r4, [pc, #440]	; (1001d60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1d0>)
 1001ba6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 1001baa:	2b20      	cmp	r3, #32
 1001bac:	f000 80b8 	beq.w	1001d20 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x190>
 1001bb0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 1001bb4:	2105      	movs	r1, #5
 1001bb6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 1001bba:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 1001bbe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 1001bc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 1001bc6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 1001bca:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 1001bce:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 1001bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1001bd6:	4718      	bx	r3
 1001bd8:	4c61      	ldr	r4, [pc, #388]	; (1001d60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1d0>)
 1001bda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1001bdc:	3301      	adds	r3, #1
 1001bde:	f000 8099 	beq.w	1001d14 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x184>
 1001be2:	8ae3      	ldrh	r3, [r4, #22]
 1001be4:	2b00      	cmp	r3, #0
 1001be6:	d179      	bne.n	1001cdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x14c>
 1001be8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 1001bec:	2b20      	cmp	r3, #32
 1001bee:	f000 8087 	beq.w	1001d00 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x170>
 1001bf2:	23ff      	movs	r3, #255	; 0xff
 1001bf4:	6861      	ldr	r1, [r4, #4]
 1001bf6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
 1001bfa:	1c4b      	adds	r3, r1, #1
 1001bfc:	d005      	beq.n	1001c0a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
 1001bfe:	2005      	movs	r0, #5
 1001c00:	f000 fdc4 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1001c04:	2800      	cmp	r0, #0
 1001c06:	f000 80a6 	beq.w	1001d56 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c6>
 1001c0a:	7e63      	ldrb	r3, [r4, #25]
 1001c0c:	2b01      	cmp	r3, #1
 1001c0e:	d07a      	beq.n	1001d06 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
 1001c10:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 1001c14:	2101      	movs	r1, #1
 1001c16:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 1001c1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 1001c1e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 1001c22:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 1001c26:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 1001c2a:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 1001c2e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 1001c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1001c36:	4718      	bx	r3
 1001c38:	4c49      	ldr	r4, [pc, #292]	; (1001d60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1d0>)
 1001c3a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 1001c3e:	2b20      	cmp	r3, #32
 1001c40:	d05b      	beq.n	1001cfa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16a>
 1001c42:	2301      	movs	r3, #1
 1001c44:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 1001c48:	f001 fc2e 	bl	10034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1001c4c:	2800      	cmp	r0, #0
 1001c4e:	d073      	beq.n	1001d38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a8>
 1001c50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1001c52:	3301      	adds	r3, #1
 1001c54:	d04b      	beq.n	1001cee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15e>
 1001c56:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 1001c5a:	2100      	movs	r1, #0
 1001c5c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 1001c60:	e7db      	b.n	1001c1a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
 1001c62:	4c3f      	ldr	r4, [pc, #252]	; (1001d60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1d0>)
 1001c64:	f001 f838 	bl	1002cd8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
 1001c68:	8ae3      	ldrh	r3, [r4, #22]
 1001c6a:	b11b      	cbz	r3, 1001c74 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe4>
 1001c6c:	f001 fc1c 	bl	10034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1001c70:	2800      	cmp	r0, #0
 1001c72:	d066      	beq.n	1001d42 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b2>
 1001c74:	f001 f85c 	bl	1002d30 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
 1001c78:	b108      	cbz	r0, 1001c7e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
 1001c7a:	2301      	movs	r3, #1
 1001c7c:	7763      	strb	r3, [r4, #29]
 1001c7e:	bd10      	pop	{r4, pc}
 1001c80:	4b37      	ldr	r3, [pc, #220]	; (1001d60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1d0>)
 1001c82:	2201      	movs	r2, #1
 1001c84:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 1001c88:	601a      	str	r2, [r3, #0]
 1001c8a:	bd10      	pop	{r4, pc}
 1001c8c:	4c34      	ldr	r4, [pc, #208]	; (1001d60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1d0>)
 1001c8e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 1001c92:	b16b      	cbz	r3, 1001cb0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x120>
 1001c94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1001c96:	3301      	adds	r3, #1
 1001c98:	d048      	beq.n	1001d2c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x19c>
 1001c9a:	2300      	movs	r3, #0
 1001c9c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 1001ca0:	bd10      	pop	{r4, pc}
 1001ca2:	4b2f      	ldr	r3, [pc, #188]	; (1001d60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1d0>)
 1001ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1001ca8:	f893 0440 	ldrb.w	r0, [r3, #1088]	; 0x440
 1001cac:	f001 bd54 	b.w	1003758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1001cb0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 1001cb4:	2b20      	cmp	r3, #32
 1001cb6:	d036      	beq.n	1001d26 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x196>
 1001cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1001cbc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 1001cc0:	6062      	str	r2, [r4, #4]
 1001cc2:	2b00      	cmp	r3, #0
 1001cc4:	d042      	beq.n	1001d4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>
 1001cc6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 1001cca:	2106      	movs	r1, #6
 1001ccc:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 1001cd0:	e7a3      	b.n	1001c1a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
 1001cd2:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
 1001cd6:	2070      	movs	r0, #112	; 0x70
 1001cd8:	f001 fca4 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001cdc:	f001 fbe4 	bl	10034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1001ce0:	2800      	cmp	r0, #0
 1001ce2:	d181      	bne.n	1001be8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
 1001ce4:	f640 0169 	movw	r1, #2153	; 0x869
 1001ce8:	2070      	movs	r0, #112	; 0x70
 1001cea:	f001 fc9b 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001cee:	f001 f9ab 	bl	1003048 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1001cf2:	f000 fd23 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1001cf6:	62e0      	str	r0, [r4, #44]	; 0x2c
 1001cf8:	e7ad      	b.n	1001c56 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc6>
 1001cfa:	f7fe faed 	bl	10002d8 <sym_7ORZF5F73VXL7PAQNOEJ2ZQPOZ2FLWKCYDEOC3Y>
 1001cfe:	e7a0      	b.n	1001c42 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
 1001d00:	f7fe faea 	bl	10002d8 <sym_7ORZF5F73VXL7PAQNOEJ2ZQPOZ2FLWKCYDEOC3Y>
 1001d04:	e775      	b.n	1001bf2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
 1001d06:	68e0      	ldr	r0, [r4, #12]
 1001d08:	3801      	subs	r0, #1
 1001d0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1001d0e:	f000 fc0f 	bl	1002530 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
 1001d12:	e77d      	b.n	1001c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x80>
 1001d14:	f001 f998 	bl	1003048 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1001d18:	f000 fd10 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1001d1c:	62e0      	str	r0, [r4, #44]	; 0x2c
 1001d1e:	e760      	b.n	1001be2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
 1001d20:	f7fe fada 	bl	10002d8 <sym_7ORZF5F73VXL7PAQNOEJ2ZQPOZ2FLWKCYDEOC3Y>
 1001d24:	e744      	b.n	1001bb0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x20>
 1001d26:	f7fe fad7 	bl	10002d8 <sym_7ORZF5F73VXL7PAQNOEJ2ZQPOZ2FLWKCYDEOC3Y>
 1001d2a:	e7c5      	b.n	1001cb8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x128>
 1001d2c:	f001 f98c 	bl	1003048 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1001d30:	f000 fd04 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1001d34:	62e0      	str	r0, [r4, #44]	; 0x2c
 1001d36:	e7b0      	b.n	1001c9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
 1001d38:	f640 0193 	movw	r1, #2195	; 0x893
 1001d3c:	2070      	movs	r0, #112	; 0x70
 1001d3e:	f001 fc71 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001d42:	f640 019d 	movw	r1, #2205	; 0x89d
 1001d46:	2070      	movs	r0, #112	; 0x70
 1001d48:	f001 fc6c 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001d4c:	f640 0185 	movw	r1, #2181	; 0x885
 1001d50:	2070      	movs	r0, #112	; 0x70
 1001d52:	f001 fc67 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001d56:	f640 016e 	movw	r1, #2158	; 0x86e
 1001d5a:	2070      	movs	r0, #112	; 0x70
 1001d5c:	f001 fc62 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001d60:	21000284 	.word	0x21000284

01001d64 <MPSL_IRQ_RADIO_Handler>:
 1001d64:	4b0e      	ldr	r3, [pc, #56]	; (1001da0 <MPSL_IRQ_RADIO_Handler+0x3c>)
 1001d66:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 1001d6a:	2a20      	cmp	r2, #32
 1001d6c:	d011      	beq.n	1001d92 <MPSL_IRQ_RADIO_Handler+0x2e>
 1001d6e:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
 1001d72:	2104      	movs	r1, #4
 1001d74:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 1001d78:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 1001d7c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 1001d80:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 1001d84:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 1001d88:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 1001d8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 1001d90:	4718      	bx	r3
 1001d92:	f640 01bc 	movw	r1, #2236	; 0x8bc
 1001d96:	2070      	movs	r0, #112	; 0x70
 1001d98:	b510      	push	{r4, lr}
 1001d9a:	f001 fc43 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001d9e:	bf00      	nop
 1001da0:	21000284 	.word	0x21000284

01001da4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
 1001da4:	b570      	push	{r4, r5, r6, lr}
 1001da6:	4d3a      	ldr	r5, [pc, #232]	; (1001e90 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
 1001da8:	b082      	sub	sp, #8
 1001daa:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 1001dae:	2b20      	cmp	r3, #32
 1001db0:	d068      	beq.n	1001e84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>
 1001db2:	686b      	ldr	r3, [r5, #4]
 1001db4:	3301      	adds	r3, #1
 1001db6:	d156      	bne.n	1001e66 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
 1001db8:	f895 4032 	ldrb.w	r4, [r5, #50]	; 0x32
 1001dbc:	4606      	mov	r6, r0
 1001dbe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 1001dc2:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 1001dc6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 1001dca:	f000 fa1b 	bl	1002204 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1001dce:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 1001dd2:	f894 10cc 	ldrb.w	r1, [r4, #204]	; 0xcc
 1001dd6:	1c53      	adds	r3, r2, #1
 1001dd8:	4a2e      	ldr	r2, [pc, #184]	; (1001e94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
 1001dda:	440b      	add	r3, r1
 1001ddc:	4290      	cmp	r0, r2
 1001dde:	4403      	add	r3, r0
 1001de0:	d829      	bhi.n	1001e36 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x92>
 1001de2:	4293      	cmp	r3, r2
 1001de4:	dc2c      	bgt.n	1001e40 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9c>
 1001de6:	2b00      	cmp	r3, #0
 1001de8:	db1f      	blt.n	1001e2a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x86>
 1001dea:	4433      	add	r3, r6
 1001dec:	4a2a      	ldr	r2, [pc, #168]	; (1001e98 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf4>)
 1001dee:	4296      	cmp	r6, r2
 1001df0:	dc43      	bgt.n	1001e7a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd6>
 1001df2:	4a2a      	ldr	r2, [pc, #168]	; (1001e9c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf8>)
 1001df4:	4296      	cmp	r6, r2
 1001df6:	dd3b      	ble.n	1001e70 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>
 1001df8:	4a26      	ldr	r2, [pc, #152]	; (1001e94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
 1001dfa:	4293      	cmp	r3, r2
 1001dfc:	dc23      	bgt.n	1001e46 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa2>
 1001dfe:	2b00      	cmp	r3, #0
 1001e00:	db2e      	blt.n	1001e60 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xbc>
 1001e02:	4618      	mov	r0, r3
 1001e04:	f10d 0203 	add.w	r2, sp, #3
 1001e08:	a901      	add	r1, sp, #4
 1001e0a:	f000 fa09 	bl	1002220 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 1001e0e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 1001e12:	9901      	ldr	r1, [sp, #4]
 1001e14:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 1001e18:	2a0f      	cmp	r2, #15
 1001e1a:	bf88      	it	hi
 1001e1c:	3101      	addhi	r1, #1
 1001e1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 1001e22:	6069      	str	r1, [r5, #4]
 1001e24:	b993      	cbnz	r3, 1001e4c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
 1001e26:	b002      	add	sp, #8
 1001e28:	bd70      	pop	{r4, r5, r6, pc}
 1001e2a:	4a1d      	ldr	r2, [pc, #116]	; (1001ea0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xfc>)
 1001e2c:	441a      	add	r2, r3
 1001e2e:	4919      	ldr	r1, [pc, #100]	; (1001e94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
 1001e30:	1993      	adds	r3, r2, r6
 1001e32:	428a      	cmp	r2, r1
 1001e34:	d9da      	bls.n	1001dec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
 1001e36:	f240 519e 	movw	r1, #1438	; 0x59e
 1001e3a:	2070      	movs	r0, #112	; 0x70
 1001e3c:	f001 fbf2 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001e40:	4a18      	ldr	r2, [pc, #96]	; (1001ea4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x100>)
 1001e42:	441a      	add	r2, r3
 1001e44:	e7f3      	b.n	1001e2e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8a>
 1001e46:	4817      	ldr	r0, [pc, #92]	; (1001ea4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x100>)
 1001e48:	4418      	add	r0, r3
 1001e4a:	e7db      	b.n	1001e04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
 1001e4c:	2005      	movs	r0, #5
 1001e4e:	f000 fc9d 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1001e52:	2800      	cmp	r0, #0
 1001e54:	d1e7      	bne.n	1001e26 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
 1001e56:	f640 21eb 	movw	r1, #2795	; 0xaeb
 1001e5a:	2070      	movs	r0, #112	; 0x70
 1001e5c:	f001 fbe2 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001e60:	480f      	ldr	r0, [pc, #60]	; (1001ea0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xfc>)
 1001e62:	4418      	add	r0, r3
 1001e64:	e7ce      	b.n	1001e04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
 1001e66:	f640 21e4 	movw	r1, #2788	; 0xae4
 1001e6a:	2070      	movs	r0, #112	; 0x70
 1001e6c:	f001 fbda 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001e70:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 1001e74:	2070      	movs	r0, #112	; 0x70
 1001e76:	f001 fbd5 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001e7a:	f240 519f 	movw	r1, #1439	; 0x59f
 1001e7e:	2070      	movs	r0, #112	; 0x70
 1001e80:	f001 fbd0 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001e84:	f640 21e3 	movw	r1, #2787	; 0xae3
 1001e88:	2070      	movs	r0, #112	; 0x70
 1001e8a:	f001 fbcb 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001e8e:	bf00      	nop
 1001e90:	21000284 	.word	0x21000284
 1001e94:	1e847fff 	.word	0x1e847fff
 1001e98:	0f424000 	.word	0x0f424000
 1001e9c:	f0bdbfff 	.word	0xf0bdbfff
 1001ea0:	1e848000 	.word	0x1e848000
 1001ea4:	e17b8000 	.word	0xe17b8000

01001ea8 <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ>:
 1001ea8:	b510      	push	{r4, lr}
 1001eaa:	4c0a      	ldr	r4, [pc, #40]	; (1001ed4 <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ+0x2c>)
 1001eac:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 1001eb0:	b163      	cbz	r3, 1001ecc <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ+0x24>
 1001eb2:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 1001eb6:	2bff      	cmp	r3, #255	; 0xff
 1001eb8:	d001      	beq.n	1001ebe <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ+0x16>
 1001eba:	2000      	movs	r0, #0
 1001ebc:	bd10      	pop	{r4, pc}
 1001ebe:	f001 fc2f 	bl	1003720 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
 1001ec2:	4603      	mov	r3, r0
 1001ec4:	2000      	movs	r0, #0
 1001ec6:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
 1001eca:	bd10      	pop	{r4, pc}
 1001ecc:	f06f 0022 	mvn.w	r0, #34	; 0x22
 1001ed0:	bd10      	pop	{r4, pc}
 1001ed2:	bf00      	nop
 1001ed4:	21000284 	.word	0x21000284

01001ed8 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ>:
 1001ed8:	b538      	push	{r3, r4, r5, lr}
 1001eda:	4b0e      	ldr	r3, [pc, #56]	; (1001f14 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x3c>)
 1001edc:	4604      	mov	r4, r0
 1001ede:	b10b      	cbz	r3, 1001ee4 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0xc>
 1001ee0:	f3af 8000 	nop.w
 1001ee4:	f3ef 8510 	mrs	r5, PRIMASK
 1001ee8:	b672      	cpsid	i
 1001eea:	2006      	movs	r0, #6
 1001eec:	4621      	mov	r1, r4
 1001eee:	f000 fc4d 	bl	100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
 1001ef2:	4604      	mov	r4, r0
 1001ef4:	b925      	cbnz	r5, 1001f00 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x28>
 1001ef6:	4b08      	ldr	r3, [pc, #32]	; (1001f18 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x40>)
 1001ef8:	b10b      	cbz	r3, 1001efe <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x26>
 1001efa:	f3af 8000 	nop.w
 1001efe:	b662      	cpsie	i
 1001f00:	b104      	cbz	r4, 1001f04 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x2c>
 1001f02:	bd38      	pop	{r3, r4, r5, pc}
 1001f04:	4b05      	ldr	r3, [pc, #20]	; (1001f1c <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ+0x44>)
 1001f06:	f893 0440 	ldrb.w	r0, [r3, #1088]	; 0x440
 1001f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1001f0e:	f001 bc23 	b.w	1003758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1001f12:	bf00      	nop
	...
 1001f1c:	21000284 	.word	0x21000284

01001f20 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
 1001f20:	f000 bc0c 	b.w	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

01001f24 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
 1001f24:	4925      	ldr	r1, [pc, #148]	; (1001fbc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x98>)
 1001f26:	b510      	push	{r4, lr}
 1001f28:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 1001f2c:	2b20      	cmp	r3, #32
 1001f2e:	d040      	beq.n	1001fb2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8e>
 1001f30:	f891 4032 	ldrb.w	r4, [r1, #50]	; 0x32
 1001f34:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 1001f38:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
 1001f3c:	b2e4      	uxtb	r4, r4
 1001f3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 1001f42:	fa5f fe8e 	uxtb.w	lr, lr
 1001f46:	440b      	add	r3, r1
 1001f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 1001f4c:	2b20      	cmp	r3, #32
 1001f4e:	d020      	beq.n	1001f92 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x6e>
 1001f50:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 1001f54:	e006      	b.n	1001f64 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x40>
 1001f56:	4473      	add	r3, lr
 1001f58:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 1001f5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 1001f60:	2b20      	cmp	r3, #32
 1001f62:	d016      	beq.n	1001f92 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x6e>
 1001f64:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 1001f68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 1001f6c:	f892 c0d0 	ldrb.w	ip, [r2, #208]	; 0xd0
 1001f70:	4584      	cmp	ip, r0
 1001f72:	d8f0      	bhi.n	1001f56 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
 1001f74:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 1001f78:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 1001f7c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 1001f80:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 1001f84:	1ac0      	subs	r0, r0, r3
 1001f86:	0200      	lsls	r0, r0, #8
 1001f88:	f110 0fff 	cmn.w	r0, #255	; 0xff
 1001f8c:	da04      	bge.n	1001f98 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x74>
 1001f8e:	2000      	movs	r0, #0
 1001f90:	bd10      	pop	{r4, pc}
 1001f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1001f96:	bd10      	pop	{r4, pc}
 1001f98:	2800      	cmp	r0, #0
 1001f9a:	680c      	ldr	r4, [r1, #0]
 1001f9c:	bfb8      	it	lt
 1001f9e:	30ff      	addlt	r0, #255	; 0xff
 1001fa0:	1200      	asrs	r0, r0, #8
 1001fa2:	f000 f92f 	bl	1002204 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1001fa6:	f104 0374 	add.w	r3, r4, #116	; 0x74
 1001faa:	4283      	cmp	r3, r0
 1001fac:	d8ef      	bhi.n	1001f8e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x6a>
 1001fae:	1b00      	subs	r0, r0, r4
 1001fb0:	bd10      	pop	{r4, pc}
 1001fb2:	f640 3145 	movw	r1, #2885	; 0xb45
 1001fb6:	2070      	movs	r0, #112	; 0x70
 1001fb8:	f001 fb34 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1001fbc:	21000284 	.word	0x21000284

01001fc0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
 1001fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1001fc4:	4c8d      	ldr	r4, [pc, #564]	; (10021fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x23c>)
 1001fc6:	b085      	sub	sp, #20
 1001fc8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 1001fcc:	2a20      	cmp	r2, #32
 1001fce:	f000 810f 	beq.w	10021f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x230>
 1001fd2:	f894 6032 	ldrb.w	r6, [r4, #50]	; 0x32
 1001fd6:	4680      	mov	r8, r0
 1001fd8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 1001fdc:	4689      	mov	r9, r1
 1001fde:	6820      	ldr	r0, [r4, #0]
 1001fe0:	a903      	add	r1, sp, #12
 1001fe2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 1001fe6:	68e3      	ldr	r3, [r4, #12]
 1001fe8:	4440      	add	r0, r8
 1001fea:	b2f6      	uxtb	r6, r6
 1001fec:	4422      	add	r2, r4
 1001fee:	9301      	str	r3, [sp, #4]
 1001ff0:	f892 5020 	ldrb.w	r5, [r2, #32]
 1001ff4:	f10d 020b 	add.w	r2, sp, #11
 1001ff8:	f000 f912 	bl	1002220 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 1001ffc:	f1a8 0174 	sub.w	r1, r8, #116	; 0x74
 1002000:	4a7f      	ldr	r2, [pc, #508]	; (1002200 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x240>)
 1002002:	4291      	cmp	r1, r2
 1002004:	d85d      	bhi.n	10020c2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x102>
 1002006:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 100200a:	9a03      	ldr	r2, [sp, #12]
 100200c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 1002010:	f8d6 00c4 	ldr.w	r0, [r6, #196]	; 0xc4
 1002014:	4410      	add	r0, r2
 1002016:	68a2      	ldr	r2, [r4, #8]
 1002018:	1a82      	subs	r2, r0, r2
 100201a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 100201e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 1002022:	d84e      	bhi.n	10020c2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x102>
 1002024:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1002028:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 100202c:	2d20      	cmp	r5, #32
 100202e:	f884 9018 	strb.w	r9, [r4, #24]
 1002032:	fa5f fb82 	uxtb.w	fp, r2
 1002036:	60e0      	str	r0, [r4, #12]
 1002038:	f000 80d0 	beq.w	10021dc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x21c>
 100203c:	f04f 0a20 	mov.w	sl, #32
 1002040:	ebc5 0cc5 	rsb	ip, r5, r5, lsl #3
 1002044:	00ee      	lsls	r6, r5, #3
 1002046:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 100204a:	f8dc 70c0 	ldr.w	r7, [ip, #192]	; 0xc0
 100204e:	1a38      	subs	r0, r7, r0
 1002050:	0200      	lsls	r0, r0, #8
 1002052:	30ff      	adds	r0, #255	; 0xff
 1002054:	db54      	blt.n	1002100 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x140>
 1002056:	f8bc 30ce 	ldrh.w	r3, [ip, #206]	; 0xce
 100205a:	b10b      	cbz	r3, 1002060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa0>
 100205c:	8ae3      	ldrh	r3, [r4, #22]
 100205e:	b3a3      	cbz	r3, 10020ca <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
 1002060:	2005      	movs	r0, #5
 1002062:	f000 fc1d 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1002066:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 100206a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100206e:	f1ba 0f20 	cmp.w	sl, #32
 1002072:	b2c0      	uxtb	r0, r0
 1002074:	6063      	str	r3, [r4, #4]
 1002076:	f040 80af 	bne.w	10021d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x218>
 100207a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 100207e:	2520      	movs	r5, #32
 1002080:	4420      	add	r0, r4
 1002082:	f890 2020 	ldrb.w	r2, [r0, #32]
 1002086:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 100208a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 100208e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 1002092:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1002096:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 100209a:	6823      	ldr	r3, [r4, #0]
 100209c:	4443      	add	r3, r8
 100209e:	6023      	str	r3, [r4, #0]
 10020a0:	7e63      	ldrb	r3, [r4, #25]
 10020a2:	22ff      	movs	r2, #255	; 0xff
 10020a4:	2b01      	cmp	r3, #1
 10020a6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
 10020aa:	f000 808b 	beq.w	10021c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x204>
 10020ae:	2d20      	cmp	r5, #32
 10020b0:	d043      	beq.n	100213a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17a>
 10020b2:	f894 0441 	ldrb.w	r0, [r4, #1089]	; 0x441
 10020b6:	f001 fb4f 	bl	1003758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 10020ba:	2000      	movs	r0, #0
 10020bc:	b005      	add	sp, #20
 10020be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10020c2:	2001      	movs	r0, #1
 10020c4:	b005      	add	sp, #20
 10020c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10020ca:	f8d4 9008 	ldr.w	r9, [r4, #8]
 10020ce:	f000 ffb5 	bl	100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
 10020d2:	f240 3356 	movw	r3, #854	; 0x356
 10020d6:	4298      	cmp	r0, r3
 10020d8:	d027      	beq.n	100212a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16a>
 10020da:	f240 53f5 	movw	r3, #1525	; 0x5f5
 10020de:	4298      	cmp	r0, r3
 10020e0:	d021      	beq.n	1002126 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x166>
 10020e2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
 10020e6:	bf14      	ite	ne
 10020e8:	2001      	movne	r0, #1
 10020ea:	200e      	moveq	r0, #14
 10020ec:	eba7 0709 	sub.w	r7, r7, r9
 10020f0:	023f      	lsls	r7, r7, #8
 10020f2:	bf48      	it	mi
 10020f4:	37ff      	addmi	r7, #255	; 0xff
 10020f6:	ebb0 2f27 	cmp.w	r0, r7, asr #8
 10020fa:	ddb1      	ble.n	1002060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa0>
 10020fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 1002100:	1b76      	subs	r6, r6, r5
 1002102:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 1002106:	f896 10d0 	ldrb.w	r1, [r6, #208]	; 0xd0
 100210a:	4549      	cmp	r1, r9
 100210c:	d90f      	bls.n	100212e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
 100210e:	eb05 114b 	add.w	r1, r5, fp, lsl #5
 1002112:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 1002116:	f891 6039 	ldrb.w	r6, [r1, #57]	; 0x39
 100211a:	2e20      	cmp	r6, #32
 100211c:	d011      	beq.n	1002142 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x182>
 100211e:	46aa      	mov	sl, r5
 1002120:	68e0      	ldr	r0, [r4, #12]
 1002122:	4635      	mov	r5, r6
 1002124:	e78c      	b.n	1002040 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x80>
 1002126:	2033      	movs	r0, #51	; 0x33
 1002128:	e7e0      	b.n	10020ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12c>
 100212a:	201d      	movs	r0, #29
 100212c:	e7de      	b.n	10020ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12c>
 100212e:	2002      	movs	r0, #2
 1002130:	9b01      	ldr	r3, [sp, #4]
 1002132:	60e3      	str	r3, [r4, #12]
 1002134:	b005      	add	sp, #20
 1002136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100213a:	2000      	movs	r0, #0
 100213c:	b005      	add	sp, #20
 100213e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1002142:	2005      	movs	r0, #5
 1002144:	f000 fbac 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1002148:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 100214c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1002150:	b2c0      	uxtb	r0, r0
 1002152:	6063      	str	r3, [r4, #4]
 1002154:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 1002158:	f04f 0c05 	mov.w	ip, #5
 100215c:	eb05 1240 	add.w	r2, r5, r0, lsl #5
 1002160:	4423      	add	r3, r4
 1002162:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 1002166:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 100216a:	f893 9020 	ldrb.w	r9, [r3, #32]
 100216e:	0146      	lsls	r6, r0, #5
 1002170:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 1002174:	f883 2020 	strb.w	r2, [r3, #32]
 1002178:	464a      	mov	r2, r9
 100217a:	18b3      	adds	r3, r6, r2
 100217c:	4611      	mov	r1, r2
 100217e:	4617      	mov	r7, r2
 1002180:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 1002184:	428d      	cmp	r5, r1
 1002186:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 100218a:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 100218e:	d1f4      	bne.n	100217a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ba>
 1002190:	eb0e 0300 	add.w	r3, lr, r0
 1002194:	4423      	add	r3, r4
 1002196:	f893 a022 	ldrb.w	sl, [r3, #34]	; 0x22
 100219a:	f1ba 0f20 	cmp.w	sl, #32
 100219e:	fa5f fc8a 	uxtb.w	ip, sl
 10021a2:	d016      	beq.n	10021d2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x212>
 10021a4:	44b4      	add	ip, r6
 10021a6:	eb04 0c4c 	add.w	ip, r4, ip, lsl #1
 10021aa:	f88c 9039 	strb.w	r9, [ip, #57]	; 0x39
 10021ae:	4431      	add	r1, r6
 10021b0:	4470      	add	r0, lr
 10021b2:	2320      	movs	r3, #32
 10021b4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 10021b8:	4420      	add	r0, r4
 10021ba:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 10021be:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
 10021c2:	e760      	b.n	1002086 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc6>
 10021c4:	68e3      	ldr	r3, [r4, #12]
 10021c6:	3b01      	subs	r3, #1
 10021c8:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 10021cc:	f000 f9b0 	bl	1002530 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
 10021d0:	e76d      	b.n	10020ae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xee>
 10021d2:	f883 9021 	strb.w	r9, [r3, #33]	; 0x21
 10021d6:	e7ea      	b.n	10021ae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ee>
 10021d8:	4655      	mov	r5, sl
 10021da:	e7bb      	b.n	1002154 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
 10021dc:	2005      	movs	r0, #5
 10021de:	f000 fb5f 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 10021e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 10021e6:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 10021ea:	6063      	str	r3, [r4, #4]
 10021ec:	b2c0      	uxtb	r0, r0
 10021ee:	e744      	b.n	100207a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
 10021f0:	f640 3173 	movw	r1, #2931	; 0xb73
 10021f4:	2070      	movs	r0, #112	; 0x70
 10021f6:	f001 fa15 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10021fa:	bf00      	nop
 10021fc:	21000284 	.word	0x21000284
 1002200:	0f423f8c 	.word	0x0f423f8c

01002204 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
 1002204:	f643 5209 	movw	r2, #15625	; 0x3d09
 1002208:	f3c0 0308 	ubfx	r3, r0, #0, #9
 100220c:	0a40      	lsrs	r0, r0, #9
 100220e:	fb02 f303 	mul.w	r3, r2, r3
 1002212:	fb02 f000 	mul.w	r0, r2, r0
 1002216:	f503 7380 	add.w	r3, r3, #256	; 0x100
 100221a:	eb00 2053 	add.w	r0, r0, r3, lsr #9
 100221e:	4770      	bx	lr

01002220 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
 1002220:	f248 6c37 	movw	ip, #34359	; 0x8637
 1002224:	0b43      	lsrs	r3, r0, #13
 1002226:	fb0c f303 	mul.w	r3, ip, r3
 100222a:	b500      	push	{lr}
 100222c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 1002230:	f643 5e09 	movw	lr, #15625	; 0x3d09
 1002234:	4b0f      	ldr	r3, [pc, #60]	; (1002274 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>)
 1002236:	fb0e 001c 	mls	r0, lr, ip, r0
 100223a:	fb00 f303 	mul.w	r3, r0, r3
 100223e:	0d5b      	lsrs	r3, r3, #21
 1002240:	fb0e fe03 	mul.w	lr, lr, r3
 1002244:	eb03 234c 	add.w	r3, r3, ip, lsl #9
 1002248:	f643 5c08 	movw	ip, #15624	; 0x3d08
 100224c:	44f4      	add	ip, lr
 100224e:	ebb0 2f5c 	cmp.w	r0, ip, lsr #9
 1002252:	d808      	bhi.n	1002266 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x46>
 1002254:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 1002258:	600b      	str	r3, [r1, #0]
 100225a:	eba0 205e 	sub.w	r0, r0, lr, lsr #9
 100225e:	b2c0      	uxtb	r0, r0
 1002260:	7010      	strb	r0, [r2, #0]
 1002262:	f85d fb04 	ldr.w	pc, [sp], #4
 1002266:	3301      	adds	r3, #1
 1002268:	2000      	movs	r0, #0
 100226a:	600b      	str	r3, [r1, #0]
 100226c:	7010      	strb	r0, [r2, #0]
 100226e:	f85d fb04 	ldr.w	pc, [sp], #4
 1002272:	bf00      	nop
 1002274:	00010c6f 	.word	0x00010c6f

01002278 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
 1002278:	f248 6137 	movw	r1, #34359	; 0x8637
 100227c:	0b42      	lsrs	r2, r0, #13
 100227e:	f643 5c09 	movw	ip, #15625	; 0x3d09
 1002282:	4b09      	ldr	r3, [pc, #36]	; (10022a8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
 1002284:	fb01 f202 	mul.w	r2, r1, r2
 1002288:	0c12      	lsrs	r2, r2, #16
 100228a:	fb0c 0112 	mls	r1, ip, r2, r0
 100228e:	0250      	lsls	r0, r2, #9
 1002290:	fb01 3303 	mla	r3, r1, r3, r3
 1002294:	3b01      	subs	r3, #1
 1002296:	0d5b      	lsrs	r3, r3, #21
 1002298:	fb0c fc03 	mul.w	ip, ip, r3
 100229c:	ebb1 2f5c 	cmp.w	r1, ip, lsr #9
 10022a0:	bf88      	it	hi
 10022a2:	3001      	addhi	r0, #1
 10022a4:	4418      	add	r0, r3
 10022a6:	4770      	bx	lr
 10022a8:	00010c6f 	.word	0x00010c6f

010022ac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
 10022ac:	b430      	push	{r4, r5}
 10022ae:	4b30      	ldr	r3, [pc, #192]	; (1002370 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xc4>)
 10022b0:	2200      	movs	r2, #0
 10022b2:	2404      	movs	r4, #4
 10022b4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 10022b8:	482e      	ldr	r0, [pc, #184]	; (1002374 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xc8>)
 10022ba:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 10022be:	701a      	strb	r2, [r3, #0]
 10022c0:	709c      	strb	r4, [r3, #2]
 10022c2:	609a      	str	r2, [r3, #8]
 10022c4:	6059      	str	r1, [r3, #4]
 10022c6:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 10022ca:	f3bf 8f4f 	dsb	sy
 10022ce:	f3bf 8f6f 	isb	sy
 10022d2:	2101      	movs	r1, #1
 10022d4:	731a      	strb	r2, [r3, #12]
 10022d6:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 10022da:	f8c0 5180 	str.w	r5, [r0, #384]	; 0x180
 10022de:	4b26      	ldr	r3, [pc, #152]	; (1002378 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xcc>)
 10022e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 10022e4:	6059      	str	r1, [r3, #4]
 10022e6:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
 10022ea:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 10022ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 10022f2:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 10022f6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 10022fa:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 10022fe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 1002302:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
 1002306:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 100230a:	6119      	str	r1, [r3, #16]
 100230c:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 1002310:	f3bf 8f4f 	dsb	sy
 1002314:	f3bf 8f6f 	isb	sy
 1002318:	4a18      	ldr	r2, [pc, #96]	; (100237c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xd0>)
 100231a:	f8c0 4180 	str.w	r4, [r0, #384]	; 0x180
 100231e:	6051      	str	r1, [r2, #4]
 1002320:	6091      	str	r1, [r2, #8]
 1002322:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
 1002326:	2b00      	cmp	r3, #0
 1002328:	d1fb      	bne.n	1002322 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x76>
 100232a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 100232e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 1002332:	4810      	ldr	r0, [pc, #64]	; (1002374 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xc8>)
 1002334:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
 1002338:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
 100233c:	f44f 7182 	mov.w	r1, #260	; 0x104
 1002340:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
 1002344:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 1002348:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
 100234c:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 1002350:	f8c2 3548 	str.w	r3, [r2, #1352]	; 0x548
 1002354:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 1002358:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 100235c:	2301      	movs	r3, #1
 100235e:	6004      	str	r4, [r0, #0]
 1002360:	6013      	str	r3, [r2, #0]
 1002362:	2302      	movs	r3, #2
 1002364:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
 1002368:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 100236c:	bc30      	pop	{r4, r5}
 100236e:	4770      	bx	lr
 1002370:	210006c8 	.word	0x210006c8
 1002374:	e000e100 	.word	0xe000e100
 1002378:	4100c000 	.word	0x4100c000
 100237c:	41011000 	.word	0x41011000

01002380 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
 1002380:	4961      	ldr	r1, [pc, #388]	; (1002508 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x188>)
 1002382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1002384:	780d      	ldrb	r5, [r1, #0]
 1002386:	2d01      	cmp	r5, #1
 1002388:	f040 809c 	bne.w	10024c4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>
 100238c:	684b      	ldr	r3, [r1, #4]
 100238e:	4283      	cmp	r3, r0
 1002390:	f000 8097 	beq.w	10024c2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x142>
 1002394:	4b5d      	ldr	r3, [pc, #372]	; (100250c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x18c>)
 1002396:	2206      	movs	r2, #6
 1002398:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 100239c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 10023a0:	4a5b      	ldr	r2, [pc, #364]	; (1002510 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x190>)
 10023a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 10023a6:	4b5b      	ldr	r3, [pc, #364]	; (1002514 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x194>)
 10023a8:	4a5b      	ldr	r2, [pc, #364]	; (1002518 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x198>)
 10023aa:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 10023ae:	2200      	movs	r2, #0
 10023b0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 10023b4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 10023b8:	4b56      	ldr	r3, [pc, #344]	; (1002514 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x194>)
 10023ba:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 10023be:	b922      	cbnz	r2, 10023ca <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x4a>
 10023c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 10023c4:	2b00      	cmp	r3, #0
 10023c6:	f000 8094 	beq.w	10024f2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x172>
 10023ca:	4a52      	ldr	r2, [pc, #328]	; (1002514 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x194>)
 10023cc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 10023d0:	2300      	movs	r3, #0
 10023d2:	4c52      	ldr	r4, [pc, #328]	; (100251c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x19c>)
 10023d4:	f8c2 6308 	str.w	r6, [r2, #776]	; 0x308
 10023d8:	f8c2 6348 	str.w	r6, [r2, #840]	; 0x348
 10023dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 10023e0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
 10023e4:	1ac3      	subs	r3, r0, r3
 10023e6:	4223      	tst	r3, r4
 10023e8:	d004      	beq.n	10023f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x74>
 10023ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 10023ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 10023f2:	d908      	bls.n	1002406 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x86>
 10023f4:	4b47      	ldr	r3, [pc, #284]	; (1002514 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x194>)
 10023f6:	2200      	movs	r2, #0
 10023f8:	f44f 7127 	mov.w	r1, #668	; 0x29c
 10023fc:	206c      	movs	r0, #108	; 0x6c
 10023fe:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 1002402:	f001 f90f 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002406:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
 100240a:	f8c2 6344 	str.w	r6, [r2, #836]	; 0x344
 100240e:	b12d      	cbz	r5, 100241c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
 1002410:	684d      	ldr	r5, [r1, #4]
 1002412:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
 1002416:	1aeb      	subs	r3, r5, r3
 1002418:	4223      	tst	r3, r4
 100241a:	d0fa      	beq.n	1002412 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x92>
 100241c:	2401      	movs	r4, #1
 100241e:	2200      	movs	r2, #0
 1002420:	4d3f      	ldr	r5, [pc, #252]	; (1002520 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x1a0>)
 1002422:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 1002426:	708a      	strb	r2, [r1, #2]
 1002428:	610c      	str	r4, [r1, #16]
 100242a:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
 100242e:	f3bf 8f4f 	dsb	sy
 1002432:	f3bf 8f6f 	isb	sy
 1002436:	4b3b      	ldr	r3, [pc, #236]	; (1002524 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x1a4>)
 1002438:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 100243c:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
 1002440:	730a      	strb	r2, [r1, #12]
 1002442:	605c      	str	r4, [r3, #4]
 1002444:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
 1002448:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 100244c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 1002450:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1002454:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 1002458:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 100245c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 1002460:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
 1002464:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 1002468:	611c      	str	r4, [r3, #16]
 100246a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 100246e:	f022 0203 	bic.w	r2, r2, #3
 1002472:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
 1002476:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 100247a:	f022 0203 	bic.w	r2, r2, #3
 100247e:	f042 0202 	orr.w	r2, r2, #2
 1002482:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 1002486:	2210      	movs	r2, #16
 1002488:	fa92 f2a2 	rbit	r2, r2
 100248c:	fab2 f282 	clz	r2, r2
 1002490:	2a09      	cmp	r2, #9
 1002492:	dc34      	bgt.n	10024fe <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x17e>
 1002494:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
 1002498:	6048      	str	r0, [r1, #4]
 100249a:	60dc      	str	r4, [r3, #12]
 100249c:	690a      	ldr	r2, [r1, #16]
 100249e:	4c1d      	ldr	r4, [pc, #116]	; (1002514 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x194>)
 10024a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 10024a4:	4a20      	ldr	r2, [pc, #128]	; (1002528 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x1a8>)
 10024a6:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
 10024aa:	4818      	ldr	r0, [pc, #96]	; (100250c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x18c>)
 10024ac:	602e      	str	r6, [r5, #0]
 10024ae:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
 10024b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 10024b6:	2204      	movs	r2, #4
 10024b8:	f240 4301 	movw	r3, #1025	; 0x401
 10024bc:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
 10024c0:	800b      	strh	r3, [r1, #0]
 10024c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10024c4:	4b11      	ldr	r3, [pc, #68]	; (100250c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x18c>)
 10024c6:	2206      	movs	r2, #6
 10024c8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 10024cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 10024d0:	4a0f      	ldr	r2, [pc, #60]	; (1002510 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x190>)
 10024d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 10024d6:	2d00      	cmp	r5, #0
 10024d8:	f47f af65 	bne.w	10023a6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x26>
 10024dc:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 10024e0:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
 10024e4:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
 10024e8:	f8c3 5544 	str.w	r5, [r3, #1348]	; 0x544
 10024ec:	f8c3 5144 	str.w	r5, [r3, #324]	; 0x144
 10024f0:	e762      	b.n	10023b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x38>
 10024f2:	4b0b      	ldr	r3, [pc, #44]	; (1002520 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x1a0>)
 10024f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 10024f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 10024fc:	e765      	b.n	10023ca <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x4a>
 10024fe:	f240 3155 	movw	r1, #853	; 0x355
 1002502:	480a      	ldr	r0, [pc, #40]	; (100252c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x1ac>)
 1002504:	f001 f884 	bl	1003610 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
 1002508:	210006c8 	.word	0x210006c8
 100250c:	4100f000 	.word	0x4100f000
 1002510:	fffbfffd 	.word	0xfffbfffd
 1002514:	41011000 	.word	0x41011000
 1002518:	fffafffd 	.word	0xfffafffd
 100251c:	00fffffe 	.word	0x00fffffe
 1002520:	e000e100 	.word	0xe000e100
 1002524:	4100c000 	.word	0x4100c000
 1002528:	80000002 	.word	0x80000002
 100252c:	010159fc 	.word	0x010159fc

01002530 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
 1002530:	492a      	ldr	r1, [pc, #168]	; (10025dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
 1002532:	b570      	push	{r4, r5, r6, lr}
 1002534:	780e      	ldrb	r6, [r1, #0]
 1002536:	684b      	ldr	r3, [r1, #4]
 1002538:	2e02      	cmp	r6, #2
 100253a:	d041      	beq.n	10025c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
 100253c:	4283      	cmp	r3, r0
 100253e:	d047      	beq.n	10025d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa0>
 1002540:	7b0b      	ldrb	r3, [r1, #12]
 1002542:	2b00      	cmp	r3, #0
 1002544:	d03f      	beq.n	10025c6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x96>
 1002546:	4b26      	ldr	r3, [pc, #152]	; (10025e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>)
 1002548:	2202      	movs	r2, #2
 100254a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 100254e:	4c25      	ldr	r4, [pc, #148]	; (10025e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
 1002550:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 1002554:	2300      	movs	r3, #0
 1002556:	4a24      	ldr	r2, [pc, #144]	; (10025e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
 1002558:	f8c2 5308 	str.w	r5, [r2, #776]	; 0x308
 100255c:	f8c2 5348 	str.w	r5, [r2, #840]	; 0x348
 1002560:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 1002564:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
 1002568:	1ac3      	subs	r3, r0, r3
 100256a:	4223      	tst	r3, r4
 100256c:	d004      	beq.n	1002578 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x48>
 100256e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1002572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 1002576:	d908      	bls.n	100258a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x5a>
 1002578:	4b1b      	ldr	r3, [pc, #108]	; (10025e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
 100257a:	2200      	movs	r2, #0
 100257c:	f240 21ba 	movw	r1, #698	; 0x2ba
 1002580:	206c      	movs	r0, #108	; 0x6c
 1002582:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 1002586:	f001 f84d 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100258a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
 100258e:	f8c2 5344 	str.w	r5, [r2, #836]	; 0x344
 1002592:	b12e      	cbz	r6, 10025a0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x70>
 1002594:	684d      	ldr	r5, [r1, #4]
 1002596:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
 100259a:	1aeb      	subs	r3, r5, r3
 100259c:	4223      	tst	r3, r4
 100259e:	d0fa      	beq.n	1002596 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
 10025a0:	4b12      	ldr	r3, [pc, #72]	; (10025ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
 10025a2:	f240 4202 	movw	r2, #1026	; 0x402
 10025a6:	4d10      	ldr	r5, [pc, #64]	; (10025e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
 10025a8:	4c11      	ldr	r4, [pc, #68]	; (10025f0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
 10025aa:	6048      	str	r0, [r1, #4]
 10025ac:	2002      	movs	r0, #2
 10025ae:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
 10025b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 10025b6:	4b0a      	ldr	r3, [pc, #40]	; (10025e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>)
 10025b8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
 10025bc:	800a      	strh	r2, [r1, #0]
 10025be:	bd70      	pop	{r4, r5, r6, pc}
 10025c0:	4283      	cmp	r3, r0
 10025c2:	d1bd      	bne.n	1002540 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x10>
 10025c4:	bd70      	pop	{r4, r5, r6, pc}
 10025c6:	f240 21ae 	movw	r1, #686	; 0x2ae
 10025ca:	206c      	movs	r0, #108	; 0x6c
 10025cc:	f001 f82a 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10025d0:	f240 21aa 	movw	r1, #682	; 0x2aa
 10025d4:	206c      	movs	r0, #108	; 0x6c
 10025d6:	f001 f825 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10025da:	bf00      	nop
 10025dc:	210006c8 	.word	0x210006c8
 10025e0:	4100f000 	.word	0x4100f000
 10025e4:	00fffffe 	.word	0x00fffffe
 10025e8:	41011000 	.word	0x41011000
 10025ec:	80000001 	.word	0x80000001
 10025f0:	4100c000 	.word	0x4100c000

010025f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
 10025f4:	b570      	push	{r4, r5, r6, lr}
 10025f6:	4b40      	ldr	r3, [pc, #256]	; (10026f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
 10025f8:	4940      	ldr	r1, [pc, #256]	; (10026fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
 10025fa:	4c41      	ldr	r4, [pc, #260]	; (1002700 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
 10025fc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
 1002600:	7822      	ldrb	r2, [r4, #0]
 1002602:	2a00      	cmp	r2, #0
 1002604:	d144      	bne.n	1002690 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x9c>
 1002606:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
 100260a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 100260e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 1002612:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1002616:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 100261a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 100261e:	2b00      	cmp	r3, #0
 1002620:	d165      	bne.n	10026ee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfa>
 1002622:	4b35      	ldr	r3, [pc, #212]	; (10026f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
 1002624:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 1002628:	2b00      	cmp	r3, #0
 100262a:	d05a      	beq.n	10026e2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
 100262c:	2a02      	cmp	r2, #2
 100262e:	d15e      	bne.n	10026ee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfa>
 1002630:	4a31      	ldr	r2, [pc, #196]	; (10026f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
 1002632:	6863      	ldr	r3, [r4, #4]
 1002634:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
 1002638:	3003      	adds	r0, #3
 100263a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 100263e:	4283      	cmp	r3, r0
 1002640:	d011      	beq.n	1002666 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x72>
 1002642:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
 1002646:	1a9a      	subs	r2, r3, r2
 1002648:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 100264c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 1002650:	d809      	bhi.n	1002666 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x72>
 1002652:	492c      	ldr	r1, [pc, #176]	; (1002704 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
 1002654:	4011      	ands	r1, r2
 1002656:	b131      	cbz	r1, 1002666 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x72>
 1002658:	f7ff fe92 	bl	1002380 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
 100265c:	6923      	ldr	r3, [r4, #16]
 100265e:	4a2a      	ldr	r2, [pc, #168]	; (1002708 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x114>)
 1002660:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 1002664:	bd70      	pop	{r4, r5, r6, pc}
 1002666:	4924      	ldr	r1, [pc, #144]	; (10026f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
 1002668:	4a28      	ldr	r2, [pc, #160]	; (100270c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x118>)
 100266a:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
 100266e:	1a1b      	subs	r3, r3, r0
 1002670:	401a      	ands	r2, r3
 1002672:	b122      	cbz	r2, 100267e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x8a>
 1002674:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1002678:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 100267c:	d915      	bls.n	10026aa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xb6>
 100267e:	2201      	movs	r2, #1
 1002680:	2100      	movs	r1, #0
 1002682:	4613      	mov	r3, r2
 1002684:	6122      	str	r2, [r4, #16]
 1002686:	4a20      	ldr	r2, [pc, #128]	; (1002708 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x114>)
 1002688:	70a1      	strb	r1, [r4, #2]
 100268a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 100268e:	bd70      	pop	{r4, r5, r6, pc}
 1002690:	2100      	movs	r1, #0
 1002692:	481f      	ldr	r0, [pc, #124]	; (1002710 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x11c>)
 1002694:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
 1002698:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
 100269c:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
 10026a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 10026a4:	2b00      	cmp	r3, #0
 10026a6:	d1c1      	bne.n	100262c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x38>
 10026a8:	e7bb      	b.n	1002622 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2e>
 10026aa:	2301      	movs	r3, #1
 10026ac:	4a16      	ldr	r2, [pc, #88]	; (1002708 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x114>)
 10026ae:	4819      	ldr	r0, [pc, #100]	; (1002714 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x120>)
 10026b0:	2602      	movs	r6, #2
 10026b2:	4d19      	ldr	r5, [pc, #100]	; (1002718 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x124>)
 10026b4:	f04f 0c00 	mov.w	ip, #0
 10026b8:	6123      	str	r3, [r4, #16]
 10026ba:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
 10026be:	f884 c002 	strb.w	ip, [r4, #2]
 10026c2:	6053      	str	r3, [r2, #4]
 10026c4:	60d3      	str	r3, [r2, #12]
 10026c6:	f8c1 51c0 	str.w	r5, [r1, #448]	; 0x1c0
 10026ca:	2104      	movs	r1, #4
 10026cc:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
 10026d0:	f240 4201 	movw	r2, #1025	; 0x401
 10026d4:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
 10026d8:	8022      	strh	r2, [r4, #0]
 10026da:	4a0b      	ldr	r2, [pc, #44]	; (1002708 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x114>)
 10026dc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 10026e0:	bd70      	pop	{r4, r5, r6, pc}
 10026e2:	4b0e      	ldr	r3, [pc, #56]	; (100271c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x128>)
 10026e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 10026e8:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
 10026ec:	e79e      	b.n	100262c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x38>
 10026ee:	f240 21c6 	movw	r1, #710	; 0x2c6
 10026f2:	206c      	movs	r0, #108	; 0x6c
 10026f4:	f000 ff96 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10026f8:	41011000 	.word	0x41011000
 10026fc:	fffbfffd 	.word	0xfffbfffd
 1002700:	210006c8 	.word	0x210006c8
 1002704:	00fffffc 	.word	0x00fffffc
 1002708:	4100c000 	.word	0x4100c000
 100270c:	00fffffe 	.word	0x00fffffe
 1002710:	fffafffd 	.word	0xfffafffd
 1002714:	4100f000 	.word	0x4100f000
 1002718:	80000002 	.word	0x80000002
 100271c:	e000e100 	.word	0xe000e100

01002720 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
 1002720:	4b01      	ldr	r3, [pc, #4]	; (1002728 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
 1002722:	6858      	ldr	r0, [r3, #4]
 1002724:	4770      	bx	lr
 1002726:	bf00      	nop
 1002728:	210006c8 	.word	0x210006c8

0100272c <sym_FY657WZD5QKMAW2TUBIU3E4BZ5M7DEVBKNG65HA>:
 100272c:	4b02      	ldr	r3, [pc, #8]	; (1002738 <sym_FY657WZD5QKMAW2TUBIU3E4BZ5M7DEVBKNG65HA+0xc>)
 100272e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 1002732:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 1002736:	4770      	bx	lr
 1002738:	41011000 	.word	0x41011000

0100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
 100273c:	4b01      	ldr	r3, [pc, #4]	; (1002744 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
 100273e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 1002742:	4770      	bx	lr
 1002744:	41011000 	.word	0x41011000

01002748 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
 1002748:	b470      	push	{r4, r5, r6}
 100274a:	f3ef 8610 	mrs	r6, PRIMASK
 100274e:	b672      	cpsid	i
 1002750:	4a0c      	ldr	r2, [pc, #48]	; (1002784 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
 1002752:	490d      	ldr	r1, [pc, #52]	; (1002788 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x40>)
 1002754:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
 1002758:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 100275c:	b15b      	cbz	r3, 1002776 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x2e>
 100275e:	2500      	movs	r5, #0
 1002760:	688b      	ldr	r3, [r1, #8]
 1002762:	3301      	adds	r3, #1
 1002764:	608b      	str	r3, [r1, #8]
 1002766:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
 100276a:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
 100276e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 1002772:	2b00      	cmp	r3, #0
 1002774:	d1f4      	bne.n	1002760 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x18>
 1002776:	688b      	ldr	r3, [r1, #8]
 1002778:	b906      	cbnz	r6, 100277c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x34>
 100277a:	b662      	cpsie	i
 100277c:	e9c0 4300 	strd	r4, r3, [r0]
 1002780:	bc70      	pop	{r4, r5, r6}
 1002782:	4770      	bx	lr
 1002784:	41011000 	.word	0x41011000
 1002788:	210006c8 	.word	0x210006c8

0100278c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
 100278c:	2803      	cmp	r0, #3
 100278e:	b570      	push	{r4, r5, r6, lr}
 1002790:	d821      	bhi.n	10027d6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
 1002792:	4b3e      	ldr	r3, [pc, #248]	; (100288c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x100>)
 1002794:	685a      	ldr	r2, [r3, #4]
 1002796:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 100279a:	d052      	beq.n	1002842 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
 100279c:	781a      	ldrb	r2, [r3, #0]
 100279e:	2a02      	cmp	r2, #2
 10027a0:	d05d      	beq.n	100285e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xd2>
 10027a2:	4d3b      	ldr	r5, [pc, #236]	; (1002890 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x104>)
 10027a4:	0082      	lsls	r2, r0, #2
 10027a6:	2301      	movs	r3, #1
 10027a8:	3010      	adds	r0, #16
 10027aa:	fa03 f600 	lsl.w	r6, r3, r0
 10027ae:	f102 0040 	add.w	r0, r2, #64	; 0x40
 10027b2:	442a      	add	r2, r5
 10027b4:	f8c5 6308 	str.w	r6, [r5, #776]	; 0x308
 10027b8:	5143      	str	r3, [r0, r5]
 10027ba:	f8d2 4540 	ldr.w	r4, [r2, #1344]	; 0x540
 10027be:	eba1 0c04 	sub.w	ip, r1, r4
 10027c2:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
 10027c6:	f1bc 0f02 	cmp.w	ip, #2
 10027ca:	d842      	bhi.n	1002852 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xc6>
 10027cc:	2300      	movs	r3, #0
 10027ce:	4618      	mov	r0, r3
 10027d0:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
 10027d4:	bd70      	pop	{r4, r5, r6, pc}
 10027d6:	1f03      	subs	r3, r0, #4
 10027d8:	b2dc      	uxtb	r4, r3
 10027da:	2c02      	cmp	r4, #2
 10027dc:	d84c      	bhi.n	1002878 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xec>
 10027de:	4b2b      	ldr	r3, [pc, #172]	; (100288c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x100>)
 10027e0:	781a      	ldrb	r2, [r3, #0]
 10027e2:	b112      	cbz	r2, 10027ea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5e>
 10027e4:	785b      	ldrb	r3, [r3, #1]
 10027e6:	4283      	cmp	r3, r0
 10027e8:	d04b      	beq.n	1002882 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf6>
 10027ea:	300c      	adds	r0, #12
 10027ec:	2201      	movs	r2, #1
 10027ee:	00a3      	lsls	r3, r4, #2
 10027f0:	4d28      	ldr	r5, [pc, #160]	; (1002894 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>)
 10027f2:	b2c0      	uxtb	r0, r0
 10027f4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 10027f8:	4082      	lsls	r2, r0
 10027fa:	2000      	movs	r0, #0
 10027fc:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
 1002800:	f8c5 2348 	str.w	r2, [r5, #840]	; 0x348
 1002804:	5158      	str	r0, [r3, r5]
 1002806:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
 100280a:	4b23      	ldr	r3, [pc, #140]	; (1002898 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x10c>)
 100280c:	1a08      	subs	r0, r1, r0
 100280e:	4003      	ands	r3, r0
 1002810:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1002814:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 1002818:	bf8c      	ite	hi
 100281a:	2000      	movhi	r0, #0
 100281c:	2001      	movls	r0, #1
 100281e:	2b00      	cmp	r3, #0
 1002820:	bf08      	it	eq
 1002822:	2000      	moveq	r0, #0
 1002824:	b920      	cbnz	r0, 1002830 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa4>
 1002826:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 100282a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
 100282e:	bd70      	pop	{r4, r5, r6, pc}
 1002830:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 1002834:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
 1002838:	f8c5 2304 	str.w	r2, [r5, #772]	; 0x304
 100283c:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
 1002840:	bd70      	pop	{r4, r5, r6, pc}
 1002842:	7b1a      	ldrb	r2, [r3, #12]
 1002844:	2a00      	cmp	r2, #0
 1002846:	d1a9      	bne.n	100279c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x10>
 1002848:	f240 3156 	movw	r1, #854	; 0x356
 100284c:	206c      	movs	r0, #108	; 0x6c
 100284e:	f000 fee9 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002852:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
 1002856:	4618      	mov	r0, r3
 1002858:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
 100285c:	bd70      	pop	{r4, r5, r6, pc}
 100285e:	785c      	ldrb	r4, [r3, #1]
 1002860:	4a0e      	ldr	r2, [pc, #56]	; (100289c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x110>)
 1002862:	1f23      	subs	r3, r4, #4
 1002864:	2c03      	cmp	r4, #3
 1002866:	b2db      	uxtb	r3, r3
 1002868:	ea4f 0383 	mov.w	r3, r3, lsl #2
 100286c:	441a      	add	r2, r3
 100286e:	d998      	bls.n	10027a2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16>
 1002870:	6813      	ldr	r3, [r2, #0]
 1002872:	2b00      	cmp	r3, #0
 1002874:	d0fc      	beq.n	1002870 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe4>
 1002876:	e794      	b.n	10027a2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16>
 1002878:	f240 317a 	movw	r1, #890	; 0x37a
 100287c:	206c      	movs	r0, #108	; 0x6c
 100287e:	f000 fed1 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002882:	f240 3176 	movw	r1, #886	; 0x376
 1002886:	206c      	movs	r0, #108	; 0x6c
 1002888:	f000 fecc 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100288c:	210006c8 	.word	0x210006c8
 1002890:	4100c000 	.word	0x4100c000
 1002894:	41011000 	.word	0x41011000
 1002898:	00fffffe 	.word	0x00fffffe
 100289c:	41011140 	.word	0x41011140

010028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
 10028a0:	2803      	cmp	r0, #3
 10028a2:	b570      	push	{r4, r5, r6, lr}
 10028a4:	b082      	sub	sp, #8
 10028a6:	d814      	bhi.n	10028d2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x32>
 10028a8:	f100 0410 	add.w	r4, r0, #16
 10028ac:	0082      	lsls	r2, r0, #2
 10028ae:	2101      	movs	r1, #1
 10028b0:	4b38      	ldr	r3, [pc, #224]	; (1002994 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xf4>)
 10028b2:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 10028b6:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 10028ba:	40a1      	lsls	r1, r4
 10028bc:	2400      	movs	r4, #0
 10028be:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
 10028c2:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
 10028c6:	50d4      	str	r4, [r2, r3]
 10028c8:	58d3      	ldr	r3, [r2, r3]
 10028ca:	9300      	str	r3, [sp, #0]
 10028cc:	9b00      	ldr	r3, [sp, #0]
 10028ce:	b002      	add	sp, #8
 10028d0:	bd70      	pop	{r4, r5, r6, pc}
 10028d2:	1f03      	subs	r3, r0, #4
 10028d4:	b2db      	uxtb	r3, r3
 10028d6:	2b02      	cmp	r3, #2
 10028d8:	d857      	bhi.n	100298a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xea>
 10028da:	4a2f      	ldr	r2, [pc, #188]	; (1002998 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xf8>)
 10028dc:	7811      	ldrb	r1, [r2, #0]
 10028de:	bb01      	cbnz	r1, 1002922 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x82>
 10028e0:	300c      	adds	r0, #12
 10028e2:	2101      	movs	r1, #1
 10028e4:	4a2d      	ldr	r2, [pc, #180]	; (100299c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xfc>)
 10028e6:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 10028ea:	b2c0      	uxtb	r0, r0
 10028ec:	009b      	lsls	r3, r3, #2
 10028ee:	fa01 f000 	lsl.w	r0, r1, r0
 10028f2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
 10028f6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
 10028fa:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 10028fe:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
 1002902:	1a40      	subs	r0, r0, r1
 1002904:	4926      	ldr	r1, [pc, #152]	; (10029a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x100>)
 1002906:	4001      	ands	r1, r0
 1002908:	b129      	cbz	r1, 1002916 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x76>
 100290a:	2100      	movs	r1, #0
 100290c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 1002910:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 1002914:	5081      	str	r1, [r0, r2]
 1002916:	4a23      	ldr	r2, [pc, #140]	; (10029a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x104>)
 1002918:	589b      	ldr	r3, [r3, r2]
 100291a:	9301      	str	r3, [sp, #4]
 100291c:	9b01      	ldr	r3, [sp, #4]
 100291e:	b002      	add	sp, #8
 1002920:	bd70      	pop	{r4, r5, r6, pc}
 1002922:	7854      	ldrb	r4, [r2, #1]
 1002924:	4284      	cmp	r4, r0
 1002926:	d1db      	bne.n	10028e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x40>
 1002928:	4c1f      	ldr	r4, [pc, #124]	; (10029a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x108>)
 100292a:	2506      	movs	r5, #6
 100292c:	2901      	cmp	r1, #1
 100292e:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
 1002932:	d005      	beq.n	1002940 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa0>
 1002934:	2400      	movs	r4, #0
 1002936:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 100293a:	7014      	strb	r4, [r2, #0]
 100293c:	6051      	str	r1, [r2, #4]
 100293e:	e7cf      	b.n	10028e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x40>
 1002940:	4c1a      	ldr	r4, [pc, #104]	; (10029ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x10c>)
 1002942:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 1002946:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 100294a:	f3bf 8f4f 	dsb	sy
 100294e:	f3bf 8f6f 	isb	sy
 1002952:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 1002956:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
 100295a:	4c0e      	ldr	r4, [pc, #56]	; (1002994 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xf4>)
 100295c:	2500      	movs	r5, #0
 100295e:	6061      	str	r1, [r4, #4]
 1002960:	7315      	strb	r5, [r2, #12]
 1002962:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
 1002966:	f8c4 5540 	str.w	r5, [r4, #1344]	; 0x540
 100296a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
 100296e:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
 1002972:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 1002976:	f8c4 5548 	str.w	r5, [r4, #1352]	; 0x548
 100297a:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 100297e:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
 1002982:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 1002986:	6121      	str	r1, [r4, #16]
 1002988:	e7d4      	b.n	1002934 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x94>
 100298a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 100298e:	206c      	movs	r0, #108	; 0x6c
 1002990:	f000 fe48 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002994:	4100c000 	.word	0x4100c000
 1002998:	210006c8 	.word	0x210006c8
 100299c:	41011000 	.word	0x41011000
 10029a0:	00fffffe 	.word	0x00fffffe
 10029a4:	41011140 	.word	0x41011140
 10029a8:	4100f000 	.word	0x4100f000
 10029ac:	e000e100 	.word	0xe000e100

010029b0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
 10029b0:	4b1e      	ldr	r3, [pc, #120]	; (1002a2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
 10029b2:	491f      	ldr	r1, [pc, #124]	; (1002a30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
 10029b4:	4a1f      	ldr	r2, [pc, #124]	; (1002a34 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
 10029b6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
 10029ba:	7812      	ldrb	r2, [r2, #0]
 10029bc:	bb3a      	cbnz	r2, 1002a0e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5e>
 10029be:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
 10029c2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 10029c6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 10029ca:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 10029ce:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 10029d2:	4b16      	ldr	r3, [pc, #88]	; (1002a2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
 10029d4:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 10029d8:	b912      	cbnz	r2, 10029e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
 10029da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 10029de:	b1fb      	cbz	r3, 1002a20 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>
 10029e0:	4b15      	ldr	r3, [pc, #84]	; (1002a38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
 10029e2:	2200      	movs	r2, #0
 10029e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 10029e8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
 10029ec:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 10029f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 10029f4:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 10029f8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 10029fc:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 1002a00:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 1002a04:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
 1002a08:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 1002a0c:	4770      	bx	lr
 1002a0e:	2200      	movs	r2, #0
 1002a10:	490a      	ldr	r1, [pc, #40]	; (1002a3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
 1002a12:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
 1002a16:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1002a1a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 1002a1e:	e7d8      	b.n	10029d2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x22>
 1002a20:	4b07      	ldr	r3, [pc, #28]	; (1002a40 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
 1002a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 1002a26:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1002a2a:	e7d9      	b.n	10029e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
 1002a2c:	41011000 	.word	0x41011000
 1002a30:	fffbfffd 	.word	0xfffbfffd
 1002a34:	210006c8 	.word	0x210006c8
 1002a38:	4100c000 	.word	0x4100c000
 1002a3c:	fffafffd 	.word	0xfffafffd
 1002a40:	e000e100 	.word	0xe000e100

01002a44 <MPSL_IRQ_RTC0_Handler>:
 1002a44:	4b43      	ldr	r3, [pc, #268]	; (1002b54 <MPSL_IRQ_RTC0_Handler+0x110>)
 1002a46:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002a4a:	03d0      	lsls	r0, r2, #15
 1002a4c:	b510      	push	{r4, lr}
 1002a4e:	d503      	bpl.n	1002a58 <MPSL_IRQ_RTC0_Handler+0x14>
 1002a50:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 1002a54:	2a00      	cmp	r2, #0
 1002a56:	d140      	bne.n	1002ada <MPSL_IRQ_RTC0_Handler+0x96>
 1002a58:	4b3e      	ldr	r3, [pc, #248]	; (1002b54 <MPSL_IRQ_RTC0_Handler+0x110>)
 1002a5a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002a5e:	0391      	lsls	r1, r2, #14
 1002a60:	d503      	bpl.n	1002a6a <MPSL_IRQ_RTC0_Handler+0x26>
 1002a62:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 1002a66:	2a00      	cmp	r2, #0
 1002a68:	d155      	bne.n	1002b16 <MPSL_IRQ_RTC0_Handler+0xd2>
 1002a6a:	4b3a      	ldr	r3, [pc, #232]	; (1002b54 <MPSL_IRQ_RTC0_Handler+0x110>)
 1002a6c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002a70:	0352      	lsls	r2, r2, #13
 1002a72:	d502      	bpl.n	1002a7a <MPSL_IRQ_RTC0_Handler+0x36>
 1002a74:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 1002a78:	b98a      	cbnz	r2, 1002a9e <MPSL_IRQ_RTC0_Handler+0x5a>
 1002a7a:	4b36      	ldr	r3, [pc, #216]	; (1002b54 <MPSL_IRQ_RTC0_Handler+0x110>)
 1002a7c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 1002a80:	b902      	cbnz	r2, 1002a84 <MPSL_IRQ_RTC0_Handler+0x40>
 1002a82:	bd10      	pop	{r4, pc}
 1002a84:	4a34      	ldr	r2, [pc, #208]	; (1002b58 <MPSL_IRQ_RTC0_Handler+0x114>)
 1002a86:	2400      	movs	r4, #0
 1002a88:	4934      	ldr	r1, [pc, #208]	; (1002b5c <MPSL_IRQ_RTC0_Handler+0x118>)
 1002a8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 1002a8e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
 1002a92:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
 1002a96:	6893      	ldr	r3, [r2, #8]
 1002a98:	3301      	adds	r3, #1
 1002a9a:	6093      	str	r3, [r2, #8]
 1002a9c:	bd10      	pop	{r4, pc}
 1002a9e:	4a2f      	ldr	r2, [pc, #188]	; (1002b5c <MPSL_IRQ_RTC0_Handler+0x118>)
 1002aa0:	2400      	movs	r4, #0
 1002aa2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 1002aa6:	492e      	ldr	r1, [pc, #184]	; (1002b60 <MPSL_IRQ_RTC0_Handler+0x11c>)
 1002aa8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 1002aac:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
 1002ab0:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 1002ab4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 1002ab8:	1ad3      	subs	r3, r2, r3
 1002aba:	4019      	ands	r1, r3
 1002abc:	b121      	cbz	r1, 1002ac8 <MPSL_IRQ_RTC0_Handler+0x84>
 1002abe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1002ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 1002ac6:	d9d8      	bls.n	1002a7a <MPSL_IRQ_RTC0_Handler+0x36>
 1002ac8:	4b22      	ldr	r3, [pc, #136]	; (1002b54 <MPSL_IRQ_RTC0_Handler+0x110>)
 1002aca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 1002ace:	2006      	movs	r0, #6
 1002ad0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 1002ad4:	f7ff f85c 	bl	1001b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002ad8:	e7cf      	b.n	1002a7a <MPSL_IRQ_RTC0_Handler+0x36>
 1002ada:	4a20      	ldr	r2, [pc, #128]	; (1002b5c <MPSL_IRQ_RTC0_Handler+0x118>)
 1002adc:	2400      	movs	r4, #0
 1002ade:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 1002ae2:	491f      	ldr	r1, [pc, #124]	; (1002b60 <MPSL_IRQ_RTC0_Handler+0x11c>)
 1002ae4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
 1002ae8:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
 1002aec:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
 1002af0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 1002af4:	1ad3      	subs	r3, r2, r3
 1002af6:	4019      	ands	r1, r3
 1002af8:	b121      	cbz	r1, 1002b04 <MPSL_IRQ_RTC0_Handler+0xc0>
 1002afa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1002afe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 1002b02:	d9a9      	bls.n	1002a58 <MPSL_IRQ_RTC0_Handler+0x14>
 1002b04:	4b13      	ldr	r3, [pc, #76]	; (1002b54 <MPSL_IRQ_RTC0_Handler+0x110>)
 1002b06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 1002b0a:	2004      	movs	r0, #4
 1002b0c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 1002b10:	f7ff f83e 	bl	1001b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002b14:	e7a0      	b.n	1002a58 <MPSL_IRQ_RTC0_Handler+0x14>
 1002b16:	4a11      	ldr	r2, [pc, #68]	; (1002b5c <MPSL_IRQ_RTC0_Handler+0x118>)
 1002b18:	2000      	movs	r0, #0
 1002b1a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 1002b1e:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
 1002b22:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 1002b26:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
 1002b2a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 1002b2e:	1ad3      	subs	r3, r2, r3
 1002b30:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 1002b34:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 1002b38:	d803      	bhi.n	1002b42 <MPSL_IRQ_RTC0_Handler+0xfe>
 1002b3a:	4a09      	ldr	r2, [pc, #36]	; (1002b60 <MPSL_IRQ_RTC0_Handler+0x11c>)
 1002b3c:	401a      	ands	r2, r3
 1002b3e:	2a00      	cmp	r2, #0
 1002b40:	d193      	bne.n	1002a6a <MPSL_IRQ_RTC0_Handler+0x26>
 1002b42:	4b04      	ldr	r3, [pc, #16]	; (1002b54 <MPSL_IRQ_RTC0_Handler+0x110>)
 1002b44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 1002b48:	2005      	movs	r0, #5
 1002b4a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 1002b4e:	f7ff f81f 	bl	1001b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002b52:	e78a      	b.n	1002a6a <MPSL_IRQ_RTC0_Handler+0x26>
 1002b54:	41011000 	.word	0x41011000
 1002b58:	210006c8 	.word	0x210006c8
 1002b5c:	e000e100 	.word	0xe000e100
 1002b60:	00fffffe 	.word	0x00fffffe

01002b64 <MPSL_IRQ_TIMER0_Handler>:
 1002b64:	b530      	push	{r4, r5, lr}
 1002b66:	4c59      	ldr	r4, [pc, #356]	; (1002ccc <MPSL_IRQ_TIMER0_Handler+0x168>)
 1002b68:	b085      	sub	sp, #20
 1002b6a:	78a3      	ldrb	r3, [r4, #2]
 1002b6c:	2b04      	cmp	r3, #4
 1002b6e:	d032      	beq.n	1002bd6 <MPSL_IRQ_TIMER0_Handler+0x72>
 1002b70:	7823      	ldrb	r3, [r4, #0]
 1002b72:	b15b      	cbz	r3, 1002b8c <MPSL_IRQ_TIMER0_Handler+0x28>
 1002b74:	2b01      	cmp	r3, #1
 1002b76:	f000 80a1 	beq.w	1002cbc <MPSL_IRQ_TIMER0_Handler+0x158>
 1002b7a:	7b23      	ldrb	r3, [r4, #12]
 1002b7c:	2b00      	cmp	r3, #0
 1002b7e:	f000 809f 	beq.w	1002cc0 <MPSL_IRQ_TIMER0_Handler+0x15c>
 1002b82:	2302      	movs	r3, #2
 1002b84:	7860      	ldrb	r0, [r4, #1]
 1002b86:	7023      	strb	r3, [r4, #0]
 1002b88:	f7ff fe8a 	bl	10028a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
 1002b8c:	4b50      	ldr	r3, [pc, #320]	; (1002cd0 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002b8e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002b92:	0315      	lsls	r5, r2, #12
 1002b94:	d502      	bpl.n	1002b9c <MPSL_IRQ_TIMER0_Handler+0x38>
 1002b96:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 1002b9a:	bb12      	cbnz	r2, 1002be2 <MPSL_IRQ_TIMER0_Handler+0x7e>
 1002b9c:	4b4c      	ldr	r3, [pc, #304]	; (1002cd0 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002b9e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002ba2:	0350      	lsls	r0, r2, #13
 1002ba4:	d503      	bpl.n	1002bae <MPSL_IRQ_TIMER0_Handler+0x4a>
 1002ba6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 1002baa:	2a00      	cmp	r2, #0
 1002bac:	d134      	bne.n	1002c18 <MPSL_IRQ_TIMER0_Handler+0xb4>
 1002bae:	4b48      	ldr	r3, [pc, #288]	; (1002cd0 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002bb0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002bb4:	0391      	lsls	r1, r2, #14
 1002bb6:	d503      	bpl.n	1002bc0 <MPSL_IRQ_TIMER0_Handler+0x5c>
 1002bb8:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 1002bbc:	2a00      	cmp	r2, #0
 1002bbe:	d146      	bne.n	1002c4e <MPSL_IRQ_TIMER0_Handler+0xea>
 1002bc0:	4b43      	ldr	r3, [pc, #268]	; (1002cd0 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002bc2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002bc6:	03d2      	lsls	r2, r2, #15
 1002bc8:	d503      	bpl.n	1002bd2 <MPSL_IRQ_TIMER0_Handler+0x6e>
 1002bca:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 1002bce:	2a00      	cmp	r2, #0
 1002bd0:	d158      	bne.n	1002c84 <MPSL_IRQ_TIMER0_Handler+0x120>
 1002bd2:	b005      	add	sp, #20
 1002bd4:	bd30      	pop	{r4, r5, pc}
 1002bd6:	2007      	movs	r0, #7
 1002bd8:	b005      	add	sp, #20
 1002bda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 1002bde:	f7fe bfd7 	b.w	1001b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002be2:	2200      	movs	r2, #0
 1002be4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 1002be8:	493a      	ldr	r1, [pc, #232]	; (1002cd4 <MPSL_IRQ_TIMER0_Handler+0x170>)
 1002bea:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
 1002bee:	2003      	movs	r0, #3
 1002bf0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
 1002bf4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 1002bf8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 1002bfc:	9300      	str	r3, [sp, #0]
 1002bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 1002c02:	9a00      	ldr	r2, [sp, #0]
 1002c04:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
 1002c08:	f7fe ffc2 	bl	1001b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002c0c:	4b30      	ldr	r3, [pc, #192]	; (1002cd0 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002c0e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002c12:	0350      	lsls	r0, r2, #13
 1002c14:	d5cb      	bpl.n	1002bae <MPSL_IRQ_TIMER0_Handler+0x4a>
 1002c16:	e7c6      	b.n	1002ba6 <MPSL_IRQ_TIMER0_Handler+0x42>
 1002c18:	2200      	movs	r2, #0
 1002c1a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 1002c1e:	492d      	ldr	r1, [pc, #180]	; (1002cd4 <MPSL_IRQ_TIMER0_Handler+0x170>)
 1002c20:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
 1002c24:	2002      	movs	r0, #2
 1002c26:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 1002c2a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 1002c2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 1002c32:	9301      	str	r3, [sp, #4]
 1002c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 1002c38:	9a01      	ldr	r2, [sp, #4]
 1002c3a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
 1002c3e:	f7fe ffa7 	bl	1001b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002c42:	4b23      	ldr	r3, [pc, #140]	; (1002cd0 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002c44:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002c48:	0391      	lsls	r1, r2, #14
 1002c4a:	d5b9      	bpl.n	1002bc0 <MPSL_IRQ_TIMER0_Handler+0x5c>
 1002c4c:	e7b4      	b.n	1002bb8 <MPSL_IRQ_TIMER0_Handler+0x54>
 1002c4e:	2200      	movs	r2, #0
 1002c50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 1002c54:	491f      	ldr	r1, [pc, #124]	; (1002cd4 <MPSL_IRQ_TIMER0_Handler+0x170>)
 1002c56:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
 1002c5a:	2001      	movs	r0, #1
 1002c5c:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1002c60:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 1002c64:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 1002c68:	9302      	str	r3, [sp, #8]
 1002c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 1002c6e:	9a02      	ldr	r2, [sp, #8]
 1002c70:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
 1002c74:	f7fe ff8c 	bl	1001b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002c78:	4b15      	ldr	r3, [pc, #84]	; (1002cd0 <MPSL_IRQ_TIMER0_Handler+0x16c>)
 1002c7a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 1002c7e:	03d2      	lsls	r2, r2, #15
 1002c80:	d5a7      	bpl.n	1002bd2 <MPSL_IRQ_TIMER0_Handler+0x6e>
 1002c82:	e7a2      	b.n	1002bca <MPSL_IRQ_TIMER0_Handler+0x66>
 1002c84:	2000      	movs	r0, #0
 1002c86:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 1002c8a:	4a12      	ldr	r2, [pc, #72]	; (1002cd4 <MPSL_IRQ_TIMER0_Handler+0x170>)
 1002c8c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
 1002c90:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
 1002c94:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 1002c98:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
 1002c9c:	6120      	str	r0, [r4, #16]
 1002c9e:	9103      	str	r1, [sp, #12]
 1002ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 1002ca4:	9d03      	ldr	r5, [sp, #12]
 1002ca6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 1002caa:	2204      	movs	r2, #4
 1002cac:	70a2      	strb	r2, [r4, #2]
 1002cae:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
 1002cb2:	b005      	add	sp, #20
 1002cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 1002cb8:	f7fe bf6a 	b.w	1001b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
 1002cbc:	7323      	strb	r3, [r4, #12]
 1002cbe:	e760      	b.n	1002b82 <MPSL_IRQ_TIMER0_Handler+0x1e>
 1002cc0:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
 1002cc4:	206c      	movs	r0, #108	; 0x6c
 1002cc6:	f000 fcad 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1002cca:	bf00      	nop
 1002ccc:	210006c8 	.word	0x210006c8
 1002cd0:	4100c000 	.word	0x4100c000
 1002cd4:	e000e100 	.word	0xe000e100

01002cd8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
 1002cd8:	4b07      	ldr	r3, [pc, #28]	; (1002cf8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x20>)
 1002cda:	f993 3000 	ldrsb.w	r3, [r3]
 1002cde:	2b00      	cmp	r3, #0
 1002ce0:	db09      	blt.n	1002cf6 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x1e>
 1002ce2:	095a      	lsrs	r2, r3, #5
 1002ce4:	2101      	movs	r1, #1
 1002ce6:	f003 031f 	and.w	r3, r3, #31
 1002cea:	4804      	ldr	r0, [pc, #16]	; (1002cfc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
 1002cec:	3240      	adds	r2, #64	; 0x40
 1002cee:	fa01 f303 	lsl.w	r3, r1, r3
 1002cf2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 1002cf6:	4770      	bx	lr
 1002cf8:	210006dc 	.word	0x210006dc
 1002cfc:	e000e100 	.word	0xe000e100

01002d00 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
 1002d00:	4b02      	ldr	r3, [pc, #8]	; (1002d0c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
 1002d02:	2200      	movs	r2, #0
 1002d04:	701a      	strb	r2, [r3, #0]
 1002d06:	805a      	strh	r2, [r3, #2]
 1002d08:	4770      	bx	lr
 1002d0a:	bf00      	nop
 1002d0c:	210006e0 	.word	0x210006e0

01002d10 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
 1002d10:	4b01      	ldr	r3, [pc, #4]	; (1002d18 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
 1002d12:	8858      	ldrh	r0, [r3, #2]
 1002d14:	4770      	bx	lr
 1002d16:	bf00      	nop
 1002d18:	210006e0 	.word	0x210006e0

01002d1c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
 1002d1c:	4b03      	ldr	r3, [pc, #12]	; (1002d2c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
 1002d1e:	7818      	ldrb	r0, [r3, #0]
 1002d20:	3802      	subs	r0, #2
 1002d22:	2801      	cmp	r0, #1
 1002d24:	bf8c      	ite	hi
 1002d26:	2000      	movhi	r0, #0
 1002d28:	2001      	movls	r0, #1
 1002d2a:	4770      	bx	lr
 1002d2c:	210006e0 	.word	0x210006e0

01002d30 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
 1002d30:	4b03      	ldr	r3, [pc, #12]	; (1002d40 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
 1002d32:	7818      	ldrb	r0, [r3, #0]
 1002d34:	f1a0 0003 	sub.w	r0, r0, #3
 1002d38:	fab0 f080 	clz	r0, r0
 1002d3c:	0940      	lsrs	r0, r0, #5
 1002d3e:	4770      	bx	lr
 1002d40:	210006e0 	.word	0x210006e0

01002d44 <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>:
 1002d44:	f3bf 8f5f 	dmb	sy
 1002d48:	4a02      	ldr	r2, [pc, #8]	; (1002d54 <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY+0x10>)
 1002d4a:	7813      	ldrb	r3, [r2, #0]
 1002d4c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 1002d50:	7013      	strb	r3, [r2, #0]
 1002d52:	4770      	bx	lr
 1002d54:	210006e4 	.word	0x210006e4

01002d58 <sym_VLEC6JWYQZ6ERSU7PCGUKYVD2AMZHMIEWUK2MVA>:
 1002d58:	4b06      	ldr	r3, [pc, #24]	; (1002d74 <sym_VLEC6JWYQZ6ERSU7PCGUKYVD2AMZHMIEWUK2MVA+0x1c>)
 1002d5a:	781a      	ldrb	r2, [r3, #0]
 1002d5c:	07d2      	lsls	r2, r2, #31
 1002d5e:	d407      	bmi.n	1002d70 <sym_VLEC6JWYQZ6ERSU7PCGUKYVD2AMZHMIEWUK2MVA+0x18>
 1002d60:	781a      	ldrb	r2, [r3, #0]
 1002d62:	f042 0201 	orr.w	r2, r2, #1
 1002d66:	701a      	strb	r2, [r3, #0]
 1002d68:	f3bf 8f5f 	dmb	sy
 1002d6c:	2001      	movs	r0, #1
 1002d6e:	4770      	bx	lr
 1002d70:	2000      	movs	r0, #0
 1002d72:	4770      	bx	lr
 1002d74:	210006e4 	.word	0x210006e4

01002d78 <sym_A7VDRF5EXSJNVN5M7H5BZSZLHY4TJYOR6PXUBVI>:
 1002d78:	b508      	push	{r3, lr}
 1002d7a:	f7ff f8d1 	bl	1001f20 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
 1002d7e:	4a0a      	ldr	r2, [pc, #40]	; (1002da8 <sym_A7VDRF5EXSJNVN5M7H5BZSZLHY4TJYOR6PXUBVI+0x30>)
 1002d80:	4603      	mov	r3, r0
 1002d82:	6852      	ldr	r2, [r2, #4]
 1002d84:	6950      	ldr	r0, [r2, #20]
 1002d86:	1ac3      	subs	r3, r0, r3
 1002d88:	021b      	lsls	r3, r3, #8
 1002d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 1002d8e:	db03      	blt.n	1002d98 <sym_A7VDRF5EXSJNVN5M7H5BZSZLHY4TJYOR6PXUBVI+0x20>
 1002d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1002d94:	f7ff b8a0 	b.w	1001ed8 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ>
 1002d98:	f7ff ffd4 	bl	1002d44 <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 1002d9c:	f7fe fef2 	bl	1001b84 <sym_VJEK4XS7F73UVK3OKMWLYLJEHOD3EB5MY72V6OQ>
 1002da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1002da4:	f000 bcd8 	b.w	1003758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1002da8:	210006e4 	.word	0x210006e4

01002dac <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A>:
 1002dac:	b470      	push	{r4, r5, r6}
 1002dae:	4d0e      	ldr	r5, [pc, #56]	; (1002de8 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x3c>)
 1002db0:	686b      	ldr	r3, [r5, #4]
 1002db2:	b923      	cbnz	r3, 1002dbe <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x12>
 1002db4:	6068      	str	r0, [r5, #4]
 1002db6:	61c3      	str	r3, [r0, #28]
 1002db8:	bc70      	pop	{r4, r5, r6}
 1002dba:	f7ff bfdd 	b.w	1002d78 <sym_A7VDRF5EXSJNVN5M7H5BZSZLHY4TJYOR6PXUBVI>
 1002dbe:	6946      	ldr	r6, [r0, #20]
 1002dc0:	461a      	mov	r2, r3
 1002dc2:	2400      	movs	r4, #0
 1002dc4:	6951      	ldr	r1, [r2, #20]
 1002dc6:	1a71      	subs	r1, r6, r1
 1002dc8:	0209      	lsls	r1, r1, #8
 1002dca:	31ff      	adds	r1, #255	; 0xff
 1002dcc:	db09      	blt.n	1002de2 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x36>
 1002dce:	69d1      	ldr	r1, [r2, #28]
 1002dd0:	4614      	mov	r4, r2
 1002dd2:	b921      	cbnz	r1, 1002dde <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x32>
 1002dd4:	69e3      	ldr	r3, [r4, #28]
 1002dd6:	61c3      	str	r3, [r0, #28]
 1002dd8:	61e0      	str	r0, [r4, #28]
 1002dda:	bc70      	pop	{r4, r5, r6}
 1002ddc:	4770      	bx	lr
 1002dde:	460a      	mov	r2, r1
 1002de0:	e7f0      	b.n	1002dc4 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x18>
 1002de2:	4293      	cmp	r3, r2
 1002de4:	d1f6      	bne.n	1002dd4 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x28>
 1002de6:	e7e5      	b.n	1002db4 <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A+0x8>
 1002de8:	210006e4 	.word	0x210006e4

01002dec <sym_Y6CZBRVEXKPOVF4Y5Z6HD45S274MQIVJMPR4SKI>:
 1002dec:	4a07      	ldr	r2, [pc, #28]	; (1002e0c <sym_Y6CZBRVEXKPOVF4Y5Z6HD45S274MQIVJMPR4SKI+0x20>)
 1002dee:	6853      	ldr	r3, [r2, #4]
 1002df0:	4283      	cmp	r3, r0
 1002df2:	d103      	bne.n	1002dfc <sym_Y6CZBRVEXKPOVF4Y5Z6HD45S274MQIVJMPR4SKI+0x10>
 1002df4:	69db      	ldr	r3, [r3, #28]
 1002df6:	6053      	str	r3, [r2, #4]
 1002df8:	4770      	bx	lr
 1002dfa:	4613      	mov	r3, r2
 1002dfc:	b123      	cbz	r3, 1002e08 <sym_Y6CZBRVEXKPOVF4Y5Z6HD45S274MQIVJMPR4SKI+0x1c>
 1002dfe:	69da      	ldr	r2, [r3, #28]
 1002e00:	4290      	cmp	r0, r2
 1002e02:	d1fa      	bne.n	1002dfa <sym_Y6CZBRVEXKPOVF4Y5Z6HD45S274MQIVJMPR4SKI+0xe>
 1002e04:	69c2      	ldr	r2, [r0, #28]
 1002e06:	61da      	str	r2, [r3, #28]
 1002e08:	4770      	bx	lr
 1002e0a:	bf00      	nop
 1002e0c:	210006e4 	.word	0x210006e4

01002e10 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ>:
 1002e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1002e14:	4f3a      	ldr	r7, [pc, #232]	; (1002f00 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xf0>)
 1002e16:	f7ff f883 	bl	1001f20 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
 1002e1a:	4601      	mov	r1, r0
 1002e1c:	687c      	ldr	r4, [r7, #4]
 1002e1e:	2c00      	cmp	r4, #0
 1002e20:	d06b      	beq.n	1002efa <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xea>
 1002e22:	f7ff ff99 	bl	1002d58 <sym_VLEC6JWYQZ6ERSU7PCGUKYVD2AMZHMIEWUK2MVA>
 1002e26:	4680      	mov	r8, r0
 1002e28:	b930      	cbnz	r0, 1002e38 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x28>
 1002e2a:	1cc8      	adds	r0, r1, #3
 1002e2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1002e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1002e34:	f7ff b850 	b.w	1001ed8 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ>
 1002e38:	687b      	ldr	r3, [r7, #4]
 1002e3a:	6958      	ldr	r0, [r3, #20]
 1002e3c:	1a41      	subs	r1, r0, r1
 1002e3e:	0209      	lsls	r1, r1, #8
 1002e40:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 1002e44:	da21      	bge.n	1002e8a <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x7a>
 1002e46:	4e2f      	ldr	r6, [pc, #188]	; (1002f04 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xf4>)
 1002e48:	4620      	mov	r0, r4
 1002e4a:	f7ff ffcf 	bl	1002dec <sym_Y6CZBRVEXKPOVF4Y5Z6HD45S274MQIVJMPR4SKI>
 1002e4e:	7c25      	ldrb	r5, [r4, #16]
 1002e50:	b305      	cbz	r5, 1002e94 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x84>
 1002e52:	6963      	ldr	r3, [r4, #20]
 1002e54:	3d01      	subs	r5, #1
 1002e56:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 1002e5a:	7425      	strb	r5, [r4, #16]
 1002e5c:	2500      	movs	r5, #0
 1002e5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 1002e62:	6163      	str	r3, [r4, #20]
 1002e64:	f7ff ffa2 	bl	1002dac <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A>
 1002e68:	687c      	ldr	r4, [r7, #4]
 1002e6a:	b154      	cbz	r4, 1002e82 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x72>
 1002e6c:	f7ff f858 	bl	1001f20 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
 1002e70:	4603      	mov	r3, r0
 1002e72:	6960      	ldr	r0, [r4, #20]
 1002e74:	1ac3      	subs	r3, r0, r3
 1002e76:	021b      	lsls	r3, r3, #8
 1002e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 1002e7c:	db36      	blt.n	1002eec <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xdc>
 1002e7e:	f7ff f82b 	bl	1001ed8 <sym_KRIFY7ONBBSU6QHFDWYLN5WQPGGEBIZW5444PSQ>
 1002e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1002e86:	f7ff bf5d 	b.w	1002d44 <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 1002e8a:	f7ff ff5b 	bl	1002d44 <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 1002e8e:	687b      	ldr	r3, [r7, #4]
 1002e90:	6958      	ldr	r0, [r3, #20]
 1002e92:	e7cd      	b.n	1002e30 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x20>
 1002e94:	69a0      	ldr	r0, [r4, #24]
 1002e96:	b1c8      	cbz	r0, 1002ecc <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xbc>
 1002e98:	42b0      	cmp	r0, r6
 1002e9a:	7a21      	ldrb	r1, [r4, #8]
 1002e9c:	d91d      	bls.n	1002eda <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xca>
 1002e9e:	fbb0 f5f6 	udiv	r5, r0, r6
 1002ea2:	fb06 0515 	mls	r5, r6, r5, r0
 1002ea6:	2d00      	cmp	r5, #0
 1002ea8:	bf08      	it	eq
 1002eaa:	4635      	moveq	r5, r6
 1002eac:	4628      	mov	r0, r5
 1002eae:	f002 fae9 	bl	1005484 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>
 1002eb2:	6963      	ldr	r3, [r4, #20]
 1002eb4:	4418      	add	r0, r3
 1002eb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1002eba:	6160      	str	r0, [r4, #20]
 1002ebc:	69a0      	ldr	r0, [r4, #24]
 1002ebe:	1b40      	subs	r0, r0, r5
 1002ec0:	fbb0 f0f6 	udiv	r0, r0, r6
 1002ec4:	7420      	strb	r0, [r4, #16]
 1002ec6:	4620      	mov	r0, r4
 1002ec8:	f7ff ff70 	bl	1002dac <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A>
 1002ecc:	f7ff ff3a 	bl	1002d44 <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 1002ed0:	4620      	mov	r0, r4
 1002ed2:	68e3      	ldr	r3, [r4, #12]
 1002ed4:	4645      	mov	r5, r8
 1002ed6:	4798      	blx	r3
 1002ed8:	e7c6      	b.n	1002e68 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x58>
 1002eda:	f002 fad3 	bl	1005484 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>
 1002ede:	6963      	ldr	r3, [r4, #20]
 1002ee0:	7425      	strb	r5, [r4, #16]
 1002ee2:	4418      	add	r0, r3
 1002ee4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 1002ee8:	6160      	str	r0, [r4, #20]
 1002eea:	e7ec      	b.n	1002ec6 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0xb6>
 1002eec:	2d00      	cmp	r5, #0
 1002eee:	d0ab      	beq.n	1002e48 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x38>
 1002ef0:	f7fe fe48 	bl	1001b84 <sym_VJEK4XS7F73UVK3OKMWLYLJEHOD3EB5MY72V6OQ>
 1002ef4:	f000 fc30 	bl	1003758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1002ef8:	e7c3      	b.n	1002e82 <sym_SY3XASMCUQJ7TJTHCIL6CTD3QML3S6DDN5IZ4LQ+0x72>
 1002efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1002efe:	bf00      	nop
 1002f00:	210006e4 	.word	0x210006e4
 1002f04:	07a12000 	.word	0x07a12000

01002f08 <sym_JNBYD5ZJ5MPK62ZKHKS33GEXMN2T7JK3PFE544A>:
 1002f08:	4801      	ldr	r0, [pc, #4]	; (1002f10 <sym_JNBYD5ZJ5MPK62ZKHKS33GEXMN2T7JK3PFE544A+0x8>)
 1002f0a:	f7fe bfcd 	b.w	1001ea8 <sym_VEWW3RW4OAPPUFDQOJ7JRKBAAFEHR5NLTH3O5OQ>
 1002f0e:	bf00      	nop
 1002f10:	01002e11 	.word	0x01002e11

01002f14 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q>:
 1002f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1002f18:	4605      	mov	r5, r0
 1002f1a:	4688      	mov	r8, r1
 1002f1c:	f7ff ff1c 	bl	1002d58 <sym_VLEC6JWYQZ6ERSU7PCGUKYVD2AMZHMIEWUK2MVA>
 1002f20:	2800      	cmp	r0, #0
 1002f22:	d06e      	beq.n	1003002 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xee>
 1002f24:	b34d      	cbz	r5, 1002f7a <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x66>
 1002f26:	4b38      	ldr	r3, [pc, #224]	; (1003008 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xf4>)
 1002f28:	685e      	ldr	r6, [r3, #4]
 1002f2a:	bb16      	cbnz	r6, 1002f72 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x5e>
 1002f2c:	2210      	movs	r2, #16
 1002f2e:	4631      	mov	r1, r6
 1002f30:	18a8      	adds	r0, r5, r2
 1002f32:	f000 fc59 	bl	10037e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
 1002f36:	f7fe fff3 	bl	1001f20 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
 1002f3a:	f1b8 0f01 	cmp.w	r8, #1
 1002f3e:	4607      	mov	r7, r0
 1002f40:	d021      	beq.n	1002f86 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x72>
 1002f42:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 1002f46:	d157      	bne.n	1002ff8 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xe4>
 1002f48:	7a2b      	ldrb	r3, [r5, #8]
 1002f4a:	682c      	ldr	r4, [r5, #0]
 1002f4c:	2b00      	cmp	r3, #0
 1002f4e:	d04b      	beq.n	1002fe8 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xd4>
 1002f50:	2c3d      	cmp	r4, #61	; 0x3d
 1002f52:	d84c      	bhi.n	1002fee <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xda>
 1002f54:	f1b8 0f02 	cmp.w	r8, #2
 1002f58:	f04f 043f 	mov.w	r4, #63	; 0x3f
 1002f5c:	d100      	bne.n	1002f60 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x4c>
 1002f5e:	61ac      	str	r4, [r5, #24]
 1002f60:	7a29      	ldrb	r1, [r5, #8]
 1002f62:	4620      	mov	r0, r4
 1002f64:	f002 fa8e 	bl	1005484 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>
 1002f68:	4407      	add	r7, r0
 1002f6a:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
 1002f6e:	616f      	str	r7, [r5, #20]
 1002f70:	e033      	b.n	1002fda <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xc6>
 1002f72:	42b5      	cmp	r5, r6
 1002f74:	d001      	beq.n	1002f7a <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x66>
 1002f76:	69f6      	ldr	r6, [r6, #28]
 1002f78:	e7d7      	b.n	1002f2a <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x16>
 1002f7a:	f06f 0015 	mvn.w	r0, #21
 1002f7e:	f7ff fee1 	bl	1002d44 <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 1002f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1002f86:	6828      	ldr	r0, [r5, #0]
 1002f88:	f8df 8080 	ldr.w	r8, [pc, #128]	; 100300c <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xf8>
 1002f8c:	4540      	cmp	r0, r8
 1002f8e:	d8f4      	bhi.n	1002f7a <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x66>
 1002f90:	7a29      	ldrb	r1, [r5, #8]
 1002f92:	f002 fa77 	bl	1005484 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>
 1002f96:	1bc0      	subs	r0, r0, r7
 1002f98:	0203      	lsls	r3, r0, #8
 1002f9a:	d4e6      	bmi.n	1002f6a <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x56>
 1002f9c:	4638      	mov	r0, r7
 1002f9e:	f7ff f931 	bl	1002204 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
 1002fa2:	682c      	ldr	r4, [r5, #0]
 1002fa4:	4284      	cmp	r4, r0
 1002fa6:	bf38      	it	cc
 1002fa8:	4444      	addcc	r4, r8
 1002faa:	1a24      	subs	r4, r4, r0
 1002fac:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1003010 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0xfc>
 1002fb0:	4544      	cmp	r4, r8
 1002fb2:	d9d5      	bls.n	1002f60 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x4c>
 1002fb4:	7a29      	ldrb	r1, [r5, #8]
 1002fb6:	fbb4 f6f8 	udiv	r6, r4, r8
 1002fba:	fb08 4616 	mls	r6, r8, r6, r4
 1002fbe:	2e00      	cmp	r6, #0
 1002fc0:	bf08      	it	eq
 1002fc2:	4646      	moveq	r6, r8
 1002fc4:	4630      	mov	r0, r6
 1002fc6:	1ba6      	subs	r6, r4, r6
 1002fc8:	f002 fa5c 	bl	1005484 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>
 1002fcc:	4407      	add	r7, r0
 1002fce:	fbb6 f6f8 	udiv	r6, r6, r8
 1002fd2:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
 1002fd6:	742e      	strb	r6, [r5, #16]
 1002fd8:	616f      	str	r7, [r5, #20]
 1002fda:	4628      	mov	r0, r5
 1002fdc:	f7ff fee6 	bl	1002dac <sym_MOBAUYUHJW2AIMZTZKX2GZMDHECUQWST7TVDZ2A>
 1002fe0:	2000      	movs	r0, #0
 1002fe2:	f7ff feaf 	bl	1002d44 <sym_UWSZAO5ROQWRB2RHO7DTXENUSIBFXIPP3CZILIY>
 1002fe6:	e7cc      	b.n	1002f82 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x6e>
 1002fe8:	2c5d      	cmp	r4, #93	; 0x5d
 1002fea:	bf38      	it	cc
 1002fec:	245d      	movcc	r4, #93	; 0x5d
 1002fee:	f1b8 0f02 	cmp.w	r8, #2
 1002ff2:	d1db      	bne.n	1002fac <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x98>
 1002ff4:	61ac      	str	r4, [r5, #24]
 1002ff6:	e7d9      	b.n	1002fac <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x98>
 1002ff8:	f44f 71b2 	mov.w	r1, #356	; 0x164
 1002ffc:	206e      	movs	r0, #110	; 0x6e
 1002ffe:	f000 fb11 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003002:	f06f 0022 	mvn.w	r0, #34	; 0x22
 1003006:	e7bc      	b.n	1002f82 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q+0x6e>
 1003008:	210006e4 	.word	0x210006e4
 100300c:	1e847fe1 	.word	0x1e847fe1
 1003010:	07a12000 	.word	0x07a12000

01003014 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
 1003014:	b508      	push	{r3, lr}
 1003016:	460b      	mov	r3, r1
 1003018:	b159      	cbz	r1, 1003032 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x1e>
 100301a:	b148      	cbz	r0, 1003030 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x1c>
 100301c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 1003020:	4a05      	ldr	r2, [pc, #20]	; (1003038 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
 1003022:	468c      	mov	ip, r1
 1003024:	fbe0 c103 	umlal	ip, r1, r0, r3
 1003028:	4660      	mov	r0, ip
 100302a:	f002 fa3f 	bl	10054ac <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
 100302e:	3001      	adds	r0, #1
 1003030:	bd08      	pop	{r3, pc}
 1003032:	4608      	mov	r0, r1
 1003034:	e7fc      	b.n	1003030 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x1c>
 1003036:	bf00      	nop
 1003038:	000f4240 	.word	0x000f4240

0100303c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
 100303c:	4b01      	ldr	r3, [pc, #4]	; (1003044 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
 100303e:	8858      	ldrh	r0, [r3, #2]
 1003040:	4770      	bx	lr
 1003042:	bf00      	nop
 1003044:	210006ec 	.word	0x210006ec

01003048 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
 1003048:	b510      	push	{r4, lr}
 100304a:	f3ef 8410 	mrs	r4, PRIMASK
 100304e:	b672      	cpsid	i
 1003050:	4a06      	ldr	r2, [pc, #24]	; (100306c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
 1003052:	7993      	ldrb	r3, [r2, #6]
 1003054:	3301      	adds	r3, #1
 1003056:	b2db      	uxtb	r3, r3
 1003058:	7193      	strb	r3, [r2, #6]
 100305a:	7993      	ldrb	r3, [r2, #6]
 100305c:	2b01      	cmp	r3, #1
 100305e:	d101      	bne.n	1003064 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1c>
 1003060:	f000 fa08 	bl	1003474 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
 1003064:	b904      	cbnz	r4, 1003068 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
 1003066:	b662      	cpsie	i
 1003068:	bd10      	pop	{r4, pc}
 100306a:	bf00      	nop
 100306c:	210006ec 	.word	0x210006ec

01003070 <mpsl_clock_hfclk_request>:
 1003070:	b570      	push	{r4, r5, r6, lr}
 1003072:	4c0b      	ldr	r4, [pc, #44]	; (10030a0 <mpsl_clock_hfclk_request+0x30>)
 1003074:	7826      	ldrb	r6, [r4, #0]
 1003076:	b95e      	cbnz	r6, 1003090 <mpsl_clock_hfclk_request+0x20>
 1003078:	2501      	movs	r5, #1
 100307a:	60a0      	str	r0, [r4, #8]
 100307c:	7025      	strb	r5, [r4, #0]
 100307e:	f7ff ffe3 	bl	1003048 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 1003082:	f000 fa11 	bl	10034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 1003086:	b928      	cbnz	r0, 1003094 <mpsl_clock_hfclk_request+0x24>
 1003088:	4b06      	ldr	r3, [pc, #24]	; (10030a4 <mpsl_clock_hfclk_request+0x34>)
 100308a:	7325      	strb	r5, [r4, #12]
 100308c:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
 1003090:	2000      	movs	r0, #0
 1003092:	bd70      	pop	{r4, r5, r6, pc}
 1003094:	68a3      	ldr	r3, [r4, #8]
 1003096:	2b00      	cmp	r3, #0
 1003098:	d0fa      	beq.n	1003090 <mpsl_clock_hfclk_request+0x20>
 100309a:	4798      	blx	r3
 100309c:	60a6      	str	r6, [r4, #8]
 100309e:	e7f7      	b.n	1003090 <mpsl_clock_hfclk_request+0x20>
 10030a0:	210006ec 	.word	0x210006ec
 10030a4:	41005000 	.word	0x41005000

010030a8 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI>:
 10030a8:	b508      	push	{r3, lr}
 10030aa:	f7ff ffcd 	bl	1003048 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 10030ae:	f000 f9fb 	bl	10034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 10030b2:	4a08      	ldr	r2, [pc, #32]	; (10030d4 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI+0x2c>)
 10030b4:	4b08      	ldr	r3, [pc, #32]	; (10030d8 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI+0x30>)
 10030b6:	b130      	cbz	r0, 10030c6 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI+0x1e>
 10030b8:	2101      	movs	r1, #1
 10030ba:	6111      	str	r1, [r2, #16]
 10030bc:	2204      	movs	r2, #4
 10030be:	735a      	strb	r2, [r3, #13]
 10030c0:	2200      	movs	r2, #0
 10030c2:	739a      	strb	r2, [r3, #14]
 10030c4:	bd08      	pop	{r3, pc}
 10030c6:	2103      	movs	r1, #3
 10030c8:	7359      	strb	r1, [r3, #13]
 10030ca:	2101      	movs	r1, #1
 10030cc:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
 10030d0:	e7f6      	b.n	10030c0 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI+0x18>
 10030d2:	bf00      	nop
 10030d4:	41005000 	.word	0x41005000
 10030d8:	210006ec 	.word	0x210006ec

010030dc <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ>:
 10030dc:	b538      	push	{r3, r4, r5, lr}
 10030de:	4c11      	ldr	r4, [pc, #68]	; (1003124 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x48>)
 10030e0:	7be3      	ldrb	r3, [r4, #15]
 10030e2:	b1b3      	cbz	r3, 1003112 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x36>
 10030e4:	7ba2      	ldrb	r2, [r4, #14]
 10030e6:	3b01      	subs	r3, #1
 10030e8:	429a      	cmp	r2, r3
 10030ea:	da12      	bge.n	1003112 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x36>
 10030ec:	f000 f9dc 	bl	10034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 10030f0:	4605      	mov	r5, r0
 10030f2:	f000 fad7 	bl	10036a4 <mpsl_temperature_get>
 10030f6:	7be3      	ldrb	r3, [r4, #15]
 10030f8:	2b01      	cmp	r3, #1
 10030fa:	bf82      	ittt	hi
 10030fc:	7ba3      	ldrbhi	r3, [r4, #14]
 10030fe:	3301      	addhi	r3, #1
 1003100:	73a3      	strbhi	r3, [r4, #14]
 1003102:	b155      	cbz	r5, 100311a <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x3e>
 1003104:	6923      	ldr	r3, [r4, #16]
 1003106:	1ac3      	subs	r3, r0, r3
 1003108:	3301      	adds	r3, #1
 100310a:	2b02      	cmp	r3, #2
 100310c:	d909      	bls.n	1003122 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x46>
 100310e:	b135      	cbz	r5, 100311e <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x42>
 1003110:	6120      	str	r0, [r4, #16]
 1003112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1003116:	f7ff bfc7 	b.w	10030a8 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI>
 100311a:	6963      	ldr	r3, [r4, #20]
 100311c:	e7f3      	b.n	1003106 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x2a>
 100311e:	6160      	str	r0, [r4, #20]
 1003120:	e7f7      	b.n	1003112 <sym_D64SDMPYDBVEOOYVBDGSEUKRECA2ZH7ZL664WEQ+0x36>
 1003122:	bd38      	pop	{r3, r4, r5, pc}
 1003124:	210006ec 	.word	0x210006ec

01003128 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
 1003128:	b510      	push	{r4, lr}
 100312a:	f3ef 8410 	mrs	r4, PRIMASK
 100312e:	b672      	cpsid	i
 1003130:	4b0a      	ldr	r3, [pc, #40]	; (100315c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
 1003132:	799a      	ldrb	r2, [r3, #6]
 1003134:	b922      	cbnz	r2, 1003140 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x18>
 1003136:	f240 1119 	movw	r1, #281	; 0x119
 100313a:	206d      	movs	r0, #109	; 0x6d
 100313c:	f000 fa72 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003140:	799a      	ldrb	r2, [r3, #6]
 1003142:	3a01      	subs	r2, #1
 1003144:	b2d2      	uxtb	r2, r2
 1003146:	719a      	strb	r2, [r3, #6]
 1003148:	799a      	ldrb	r2, [r3, #6]
 100314a:	b91a      	cbnz	r2, 1003154 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
 100314c:	7e1b      	ldrb	r3, [r3, #24]
 100314e:	b90b      	cbnz	r3, 1003154 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
 1003150:	f000 f996 	bl	1003480 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
 1003154:	b904      	cbnz	r4, 1003158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x30>
 1003156:	b662      	cpsie	i
 1003158:	bd10      	pop	{r4, pc}
 100315a:	bf00      	nop
 100315c:	210006ec 	.word	0x210006ec

01003160 <mpsl_clock_hfclk_release>:
 1003160:	b508      	push	{r3, lr}
 1003162:	4b05      	ldr	r3, [pc, #20]	; (1003178 <mpsl_clock_hfclk_release+0x18>)
 1003164:	781a      	ldrb	r2, [r3, #0]
 1003166:	b122      	cbz	r2, 1003172 <mpsl_clock_hfclk_release+0x12>
 1003168:	2200      	movs	r2, #0
 100316a:	731a      	strb	r2, [r3, #12]
 100316c:	701a      	strb	r2, [r3, #0]
 100316e:	f7ff ffdb 	bl	1003128 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1003172:	2000      	movs	r0, #0
 1003174:	bd08      	pop	{r3, pc}
 1003176:	bf00      	nop
 1003178:	210006ec 	.word	0x210006ec

0100317c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
 100317c:	b570      	push	{r4, r5, r6, lr}
 100317e:	4c1b      	ldr	r4, [pc, #108]	; (10031ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x70>)
 1003180:	7e63      	ldrb	r3, [r4, #25]
 1003182:	b97b      	cbnz	r3, 10031a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x28>
 1003184:	69e0      	ldr	r0, [r4, #28]
 1003186:	f000 0003 	and.w	r0, r0, #3
 100318a:	f000 f9b5 	bl	10034f8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
 100318e:	b148      	cbz	r0, 10031a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x28>
 1003190:	f7ff feba 	bl	1002f08 <sym_JNBYD5ZJ5MPK62ZKHKS33GEXMN2T7JK3PFE544A>
 1003194:	b930      	cbnz	r0, 10031a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x28>
 1003196:	f3ef 8310 	mrs	r3, PRIMASK
 100319a:	b672      	cpsid	i
 100319c:	7b62      	ldrb	r2, [r4, #13]
 100319e:	b112      	cbz	r2, 10031a6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
 10031a0:	b903      	cbnz	r3, 10031a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x28>
 10031a2:	b662      	cpsie	i
 10031a4:	bd70      	pop	{r4, r5, r6, pc}
 10031a6:	2201      	movs	r2, #1
 10031a8:	7362      	strb	r2, [r4, #13]
 10031aa:	b903      	cbnz	r3, 10031ae <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x32>
 10031ac:	b662      	cpsie	i
 10031ae:	2300      	movs	r3, #0
 10031b0:	4d0f      	ldr	r5, [pc, #60]	; (10031f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x74>)
 10031b2:	2680      	movs	r6, #128	; 0x80
 10031b4:	f8c5 6308 	str.w	r6, [r5, #776]	; 0x308
 10031b8:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 10031bc:	f884 3020 	strb.w	r3, [r4, #32]
 10031c0:	f7ff ff72 	bl	10030a8 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI>
 10031c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 10031c8:	2102      	movs	r1, #2
 10031ca:	4a0a      	ldr	r2, [pc, #40]	; (10031f4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x78>)
 10031cc:	480a      	ldr	r0, [pc, #40]	; (10031f8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x7c>)
 10031ce:	4353      	muls	r3, r2
 10031d0:	6263      	str	r3, [r4, #36]	; 0x24
 10031d2:	4b0a      	ldr	r3, [pc, #40]	; (10031fc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
 10031d4:	6323      	str	r3, [r4, #48]	; 0x30
 10031d6:	f7ff fe9d 	bl	1002f14 <sym_SMM7FXAGNH5CGLSU6FKRBG24XS3XTMWJCOJFD6Q>
 10031da:	b120      	cbz	r0, 10031e6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x6a>
 10031dc:	f240 214b 	movw	r1, #587	; 0x24b
 10031e0:	206d      	movs	r0, #109	; 0x6d
 10031e2:	f000 fa1f 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10031e6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
 10031ea:	e7db      	b.n	10031a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x28>
 10031ec:	210006ec 	.word	0x210006ec
 10031f0:	41005000 	.word	0x41005000
 10031f4:	0003d090 	.word	0x0003d090
 10031f8:	21000710 	.word	0x21000710
 10031fc:	010030dd 	.word	0x010030dd

01003200 <MPSL_IRQ_CLOCK_Handler>:
 1003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1003202:	4c26      	ldr	r4, [pc, #152]	; (100329c <MPSL_IRQ_CLOCK_Handler+0x9c>)
 1003204:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 1003208:	2b00      	cmp	r3, #0
 100320a:	d045      	beq.n	1003298 <MPSL_IRQ_CLOCK_Handler+0x98>
 100320c:	4b24      	ldr	r3, [pc, #144]	; (10032a0 <MPSL_IRQ_CLOCK_Handler+0xa0>)
 100320e:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
 1003212:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
 1003216:	b157      	cbz	r7, 100322e <MPSL_IRQ_CLOCK_Handler+0x2e>
 1003218:	2201      	movs	r2, #1
 100321a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 100321e:	7b23      	ldrb	r3, [r4, #12]
 1003220:	b12b      	cbz	r3, 100322e <MPSL_IRQ_CLOCK_Handler+0x2e>
 1003222:	2500      	movs	r5, #0
 1003224:	68a3      	ldr	r3, [r4, #8]
 1003226:	7325      	strb	r5, [r4, #12]
 1003228:	b10b      	cbz	r3, 100322e <MPSL_IRQ_CLOCK_Handler+0x2e>
 100322a:	4798      	blx	r3
 100322c:	60a5      	str	r5, [r4, #8]
 100322e:	4d1c      	ldr	r5, [pc, #112]	; (10032a0 <MPSL_IRQ_CLOCK_Handler+0xa0>)
 1003230:	b13e      	cbz	r6, 1003242 <MPSL_IRQ_CLOCK_Handler+0x42>
 1003232:	2300      	movs	r3, #0
 1003234:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
 1003238:	2302      	movs	r3, #2
 100323a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
 100323e:	f7ff ff9d 	bl	100317c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
 1003242:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 1003246:	f894 6020 	ldrb.w	r6, [r4, #32]
 100324a:	b2f6      	uxtb	r6, r6
 100324c:	b137      	cbz	r7, 100325c <MPSL_IRQ_CLOCK_Handler+0x5c>
 100324e:	7b62      	ldrb	r2, [r4, #13]
 1003250:	2a03      	cmp	r2, #3
 1003252:	bf01      	itttt	eq
 1003254:	2204      	moveq	r2, #4
 1003256:	7362      	strbeq	r2, [r4, #13]
 1003258:	2201      	moveq	r2, #1
 100325a:	612a      	streq	r2, [r5, #16]
 100325c:	b17b      	cbz	r3, 100327e <MPSL_IRQ_CLOCK_Handler+0x7e>
 100325e:	4b10      	ldr	r3, [pc, #64]	; (10032a0 <MPSL_IRQ_CLOCK_Handler+0xa0>)
 1003260:	2200      	movs	r2, #0
 1003262:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 1003266:	7b63      	ldrb	r3, [r4, #13]
 1003268:	2b04      	cmp	r3, #4
 100326a:	d004      	beq.n	1003276 <MPSL_IRQ_CLOCK_Handler+0x76>
 100326c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 1003270:	206d      	movs	r0, #109	; 0x6d
 1003272:	f000 f9d7 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003276:	2302      	movs	r3, #2
 1003278:	7363      	strb	r3, [r4, #13]
 100327a:	f7ff ff55 	bl	1003128 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 100327e:	b15e      	cbz	r6, 1003298 <MPSL_IRQ_CLOCK_Handler+0x98>
 1003280:	2300      	movs	r3, #0
 1003282:	f884 3020 	strb.w	r3, [r4, #32]
 1003286:	7b63      	ldrb	r3, [r4, #13]
 1003288:	2b02      	cmp	r3, #2
 100328a:	d101      	bne.n	1003290 <MPSL_IRQ_CLOCK_Handler+0x90>
 100328c:	f7ff ff0c 	bl	10030a8 <sym_S5B3H6ERFXAKJQ6RXGIRZ5J7IWZHYVM4T2BKZJI>
 1003290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1003294:	f7ff bf48 	b.w	1003128 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
 1003298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100329a:	bf00      	nop
 100329c:	210006ec 	.word	0x210006ec
 10032a0:	41005000 	.word	0x41005000

010032a4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
 10032a4:	b510      	push	{r4, lr}
 10032a6:	4c04      	ldr	r4, [pc, #16]	; (10032b8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
 10032a8:	69e0      	ldr	r0, [r4, #28]
 10032aa:	f000 0003 	and.w	r0, r0, #3
 10032ae:	f000 f923 	bl	10034f8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
 10032b2:	2800      	cmp	r0, #0
 10032b4:	d0f8      	beq.n	10032a8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
 10032b6:	bd10      	pop	{r4, pc}
 10032b8:	210006ec 	.word	0x210006ec

010032bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
 10032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10032be:	4605      	mov	r5, r0
 10032c0:	b150      	cbz	r0, 10032d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1c>
 10032c2:	7802      	ldrb	r2, [r0, #0]
 10032c4:	2a02      	cmp	r2, #2
 10032c6:	d807      	bhi.n	10032d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1c>
 10032c8:	7843      	ldrb	r3, [r0, #1]
 10032ca:	b942      	cbnz	r2, 10032de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
 10032cc:	3b01      	subs	r3, #1
 10032ce:	2b1f      	cmp	r3, #31
 10032d0:	d802      	bhi.n	10032d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1c>
 10032d2:	7883      	ldrb	r3, [r0, #2]
 10032d4:	2b21      	cmp	r3, #33	; 0x21
 10032d6:	d907      	bls.n	10032e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x2c>
 10032d8:	f06f 0015 	mvn.w	r0, #21
 10032dc:	e06a      	b.n	10033b4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xf8>
 10032de:	2b00      	cmp	r3, #0
 10032e0:	d1fa      	bne.n	10032d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1c>
 10032e2:	7883      	ldrb	r3, [r0, #2]
 10032e4:	2b00      	cmp	r3, #0
 10032e6:	d1f7      	bne.n	10032d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1c>
 10032e8:	4b5e      	ldr	r3, [pc, #376]	; (1003464 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1a8>)
 10032ea:	2220      	movs	r2, #32
 10032ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 10032f0:	f3bf 8f4f 	dsb	sy
 10032f4:	f3bf 8f6f 	isb	sy
 10032f8:	4e5b      	ldr	r6, [pc, #364]	; (1003468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1ac>)
 10032fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 10032fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1003302:	4c5a      	ldr	r4, [pc, #360]	; (100346c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1b0>)
 1003304:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
 1003308:	2300      	movs	r3, #0
 100330a:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
 100330e:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
 1003312:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
 1003316:	71a3      	strb	r3, [r4, #6]
 1003318:	88ab      	ldrh	r3, [r5, #4]
 100331a:	80a3      	strh	r3, [r4, #4]
 100331c:	f000 f8d4 	bl	10034c8 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
 1003320:	b110      	cbz	r0, 1003328 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6c>
 1003322:	2301      	movs	r3, #1
 1003324:	7023      	strb	r3, [r4, #0]
 1003326:	71a3      	strb	r3, [r4, #6]
 1003328:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 100332c:	f8d6 240c 	ldr.w	r2, [r6, #1036]	; 0x40c
 1003330:	03d7      	lsls	r7, r2, #15
 1003332:	d503      	bpl.n	100333c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x80>
 1003334:	07de      	lsls	r6, r3, #31
 1003336:	d501      	bpl.n	100333c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x80>
 1003338:	f000 f8b0 	bl	100349c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
 100333c:	f240 53f5 	movw	r3, #1525	; 0x5f5
 1003340:	78aa      	ldrb	r2, [r5, #2]
 1003342:	7869      	ldrb	r1, [r5, #1]
 1003344:	8063      	strh	r3, [r4, #2]
 1003346:	2301      	movs	r3, #1
 1003348:	73e2      	strb	r2, [r4, #15]
 100334a:	2200      	movs	r2, #0
 100334c:	61e3      	str	r3, [r4, #28]
 100334e:	782b      	ldrb	r3, [r5, #0]
 1003350:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 1003354:	2b01      	cmp	r3, #1
 1003356:	7663      	strb	r3, [r4, #25]
 1003358:	73a2      	strb	r2, [r4, #14]
 100335a:	d02c      	beq.n	10033b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xfa>
 100335c:	2b02      	cmp	r3, #2
 100335e:	d02d      	beq.n	10033bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x100>
 1003360:	2b00      	cmp	r3, #0
 1003362:	d138      	bne.n	10033d6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x11a>
 1003364:	f000 f8b8 	bl	10034d8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
 1003368:	2800      	cmp	r0, #0
 100336a:	d03e      	beq.n	10033ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x12e>
 100336c:	f000 f8bc 	bl	10034e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
 1003370:	69e3      	ldr	r3, [r4, #28]
 1003372:	f003 0303 	and.w	r3, r3, #3
 1003376:	4298      	cmp	r0, r3
 1003378:	d137      	bne.n	10033ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x12e>
 100337a:	79ab      	ldrb	r3, [r5, #6]
 100337c:	bb83      	cbnz	r3, 10033e0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x124>
 100337e:	f7ff ff91 	bl	10032a4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
 1003382:	7be3      	ldrb	r3, [r4, #15]
 1003384:	b163      	cbz	r3, 10033a0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xe4>
 1003386:	782b      	ldrb	r3, [r5, #0]
 1003388:	b953      	cbnz	r3, 10033a0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xe4>
 100338a:	f000 f88d 	bl	10034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
 100338e:	4605      	mov	r5, r0
 1003390:	f000 f988 	bl	10036a4 <mpsl_temperature_get>
 1003394:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 1003398:	2d00      	cmp	r5, #0
 100339a:	d060      	beq.n	100345e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1a2>
 100339c:	e9c4 0304 	strd	r0, r3, [r4, #16]
 10033a0:	2301      	movs	r3, #1
 10033a2:	2220      	movs	r2, #32
 10033a4:	2000      	movs	r0, #0
 10033a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 10033aa:	4b2e      	ldr	r3, [pc, #184]	; (1003464 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1a8>)
 10033ac:	7360      	strb	r0, [r4, #13]
 10033ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 10033b2:	601a      	str	r2, [r3, #0]
 10033b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10033b6:	2302      	movs	r3, #2
 10033b8:	61e3      	str	r3, [r4, #28]
 10033ba:	e7d3      	b.n	1003364 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa8>
 10033bc:	f7ff fe44 	bl	1003048 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
 10033c0:	4b29      	ldr	r3, [pc, #164]	; (1003468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1ac>)
 10033c2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 10033c6:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 10033ca:	03c8      	lsls	r0, r1, #15
 10033cc:	d5f9      	bpl.n	10033c2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x106>
 10033ce:	07d1      	lsls	r1, r2, #31
 10033d0:	d5f7      	bpl.n	10033c2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x106>
 10033d2:	2303      	movs	r3, #3
 10033d4:	e7f0      	b.n	10033b8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xfc>
 10033d6:	f240 313d 	movw	r1, #829	; 0x33d
 10033da:	206d      	movs	r0, #109	; 0x6d
 10033dc:	f000 f922 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10033e0:	4b21      	ldr	r3, [pc, #132]	; (1003468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1ac>)
 10033e2:	2202      	movs	r2, #2
 10033e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 10033e8:	e7cb      	b.n	1003382 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xc6>
 10033ea:	4b1f      	ldr	r3, [pc, #124]	; (1003468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1ac>)
 10033ec:	2201      	movs	r2, #1
 10033ee:	2100      	movs	r1, #0
 10033f0:	60da      	str	r2, [r3, #12]
 10033f2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 10033f6:	7f21      	ldrb	r1, [r4, #28]
 10033f8:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
 10033fc:	609a      	str	r2, [r3, #8]
 10033fe:	2202      	movs	r2, #2
 1003400:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 1003404:	79aa      	ldrb	r2, [r5, #6]
 1003406:	2a00      	cmp	r2, #0
 1003408:	d1bb      	bne.n	1003382 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xc6>
 100340a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 100340e:	0792      	lsls	r2, r2, #30
 1003410:	d402      	bmi.n	1003418 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x15c>
 1003412:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 1003416:	e7e0      	b.n	10033da <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x11e>
 1003418:	4a15      	ldr	r2, [pc, #84]	; (1003470 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1b4>)
 100341a:	6917      	ldr	r7, [r2, #16]
 100341c:	6911      	ldr	r1, [r2, #16]
 100341e:	f007 0710 	and.w	r7, r7, #16
 1003422:	f041 0110 	orr.w	r1, r1, #16
 1003426:	6111      	str	r1, [r2, #16]
 1003428:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 100342c:	b90b      	cbnz	r3, 1003432 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x176>
 100342e:	f002 f83b 	bl	10054a8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
 1003432:	4e0d      	ldr	r6, [pc, #52]	; (1003468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1ac>)
 1003434:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 1003438:	b173      	cbz	r3, 1003458 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x19c>
 100343a:	f7ff ff33 	bl	10032a4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
 100343e:	b927      	cbnz	r7, 100344a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x18e>
 1003440:	4a0b      	ldr	r2, [pc, #44]	; (1003470 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x1b4>)
 1003442:	6913      	ldr	r3, [r2, #16]
 1003444:	f023 0310 	bic.w	r3, r3, #16
 1003448:	6113      	str	r3, [r2, #16]
 100344a:	2302      	movs	r3, #2
 100344c:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
 1003450:	2300      	movs	r3, #0
 1003452:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
 1003456:	e794      	b.n	1003382 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xc6>
 1003458:	f002 f825 	bl	10054a6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
 100345c:	e7ea      	b.n	1003434 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x178>
 100345e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 1003462:	e79d      	b.n	10033a0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xe4>
 1003464:	e000e100 	.word	0xe000e100
 1003468:	41005000 	.word	0x41005000
 100346c:	210006ec 	.word	0x210006ec
 1003470:	e000ed00 	.word	0xe000ed00

01003474 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
 1003474:	4b01      	ldr	r3, [pc, #4]	; (100347c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA+0x8>)
 1003476:	2201      	movs	r2, #1
 1003478:	601a      	str	r2, [r3, #0]
 100347a:	4770      	bx	lr
 100347c:	41005000 	.word	0x41005000

01003480 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
 1003480:	4a04      	ldr	r2, [pc, #16]	; (1003494 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
 1003482:	2301      	movs	r3, #1
 1003484:	6053      	str	r3, [r2, #4]
 1003486:	2300      	movs	r3, #0
 1003488:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 100348c:	4a02      	ldr	r2, [pc, #8]	; (1003498 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x18>)
 100348e:	7013      	strb	r3, [r2, #0]
 1003490:	4770      	bx	lr
 1003492:	bf00      	nop
 1003494:	41005000 	.word	0x41005000
 1003498:	21000733 	.word	0x21000733

0100349c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
 100349c:	4b01      	ldr	r3, [pc, #4]	; (10034a4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
 100349e:	2201      	movs	r2, #1
 10034a0:	701a      	strb	r2, [r3, #0]
 10034a2:	4770      	bx	lr
 10034a4:	21000733 	.word	0x21000733

010034a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
 10034a8:	4b05      	ldr	r3, [pc, #20]	; (10034c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
 10034aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 10034ae:	b923      	cbnz	r3, 10034ba <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
 10034b0:	4b04      	ldr	r3, [pc, #16]	; (10034c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x1c>)
 10034b2:	7818      	ldrb	r0, [r3, #0]
 10034b4:	f000 0001 	and.w	r0, r0, #1
 10034b8:	4770      	bx	lr
 10034ba:	2001      	movs	r0, #1
 10034bc:	e7fa      	b.n	10034b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0xc>
 10034be:	bf00      	nop
 10034c0:	41005000 	.word	0x41005000
 10034c4:	21000733 	.word	0x21000733

010034c8 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
 10034c8:	4b02      	ldr	r3, [pc, #8]	; (10034d4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0xc>)
 10034ca:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
 10034ce:	f000 0001 	and.w	r0, r0, #1
 10034d2:	4770      	bx	lr
 10034d4:	41005000 	.word	0x41005000

010034d8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
 10034d8:	4b02      	ldr	r3, [pc, #8]	; (10034e4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0xc>)
 10034da:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 10034de:	f000 0001 	and.w	r0, r0, #1
 10034e2:	4770      	bx	lr
 10034e4:	41005000 	.word	0x41005000

010034e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
 10034e8:	4b02      	ldr	r3, [pc, #8]	; (10034f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
 10034ea:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
 10034ee:	f000 0003 	and.w	r0, r0, #3
 10034f2:	4770      	bx	lr
 10034f4:	41005000 	.word	0x41005000

010034f8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
 10034f8:	4b07      	ldr	r3, [pc, #28]	; (1003518 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x20>)
 10034fa:	4602      	mov	r2, r0
 10034fc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 1003500:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 1003504:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 1003508:	d005      	beq.n	1003516 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1e>
 100350a:	b2d0      	uxtb	r0, r2
 100350c:	f001 0303 	and.w	r3, r1, #3
 1003510:	1a1b      	subs	r3, r3, r0
 1003512:	4258      	negs	r0, r3
 1003514:	4158      	adcs	r0, r3
 1003516:	4770      	bx	lr
 1003518:	41005000 	.word	0x41005000

0100351c <sym_4YN6SOPYGJADRASWV4U2FH7BYVA2UF7GCYQNP4A>:
 100351c:	f3bf 8f4f 	dsb	sy
 1003520:	4905      	ldr	r1, [pc, #20]	; (1003538 <sym_4YN6SOPYGJADRASWV4U2FH7BYVA2UF7GCYQNP4A+0x1c>)
 1003522:	4b06      	ldr	r3, [pc, #24]	; (100353c <sym_4YN6SOPYGJADRASWV4U2FH7BYVA2UF7GCYQNP4A+0x20>)
 1003524:	68ca      	ldr	r2, [r1, #12]
 1003526:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 100352a:	4313      	orrs	r3, r2
 100352c:	60cb      	str	r3, [r1, #12]
 100352e:	f3bf 8f4f 	dsb	sy
 1003532:	bf00      	nop
 1003534:	e7fd      	b.n	1003532 <sym_4YN6SOPYGJADRASWV4U2FH7BYVA2UF7GCYQNP4A+0x16>
 1003536:	bf00      	nop
 1003538:	e000ed00 	.word	0xe000ed00
 100353c:	05fa0004 	.word	0x05fa0004

01003540 <sym_5VQN43TPKN75RJC7KGLTAIPPXS3F5YCDBNIBTFQ>:
 1003540:	4b09      	ldr	r3, [pc, #36]	; (1003568 <sym_5VQN43TPKN75RJC7KGLTAIPPXS3F5YCDBNIBTFQ+0x28>)
 1003542:	2201      	movs	r2, #1
 1003544:	605a      	str	r2, [r3, #4]
 1003546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 100354a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 100354e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 1003552:	4b06      	ldr	r3, [pc, #24]	; (100356c <sym_5VQN43TPKN75RJC7KGLTAIPPXS3F5YCDBNIBTFQ+0x2c>)
 1003554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 1003558:	f3bf 8f4f 	dsb	sy
 100355c:	f3bf 8f6f 	isb	sy
 1003560:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1003564:	4770      	bx	lr
 1003566:	bf00      	nop
 1003568:	41010000 	.word	0x41010000
 100356c:	e000e100 	.word	0xe000e100

01003570 <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ>:
 1003570:	4b09      	ldr	r3, [pc, #36]	; (1003598 <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ+0x28>)
 1003572:	2200      	movs	r2, #0
 1003574:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
 1003578:	2201      	movs	r2, #1
 100357a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
 100357e:	f44f 7280 	mov.w	r2, #256	; 0x100
 1003582:	4b06      	ldr	r3, [pc, #24]	; (100359c <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ+0x2c>)
 1003584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 1003588:	f3bf 8f4f 	dsb	sy
 100358c:	f3bf 8f6f 	isb	sy
 1003590:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1003594:	4770      	bx	lr
 1003596:	bf00      	nop
 1003598:	41008000 	.word	0x41008000
 100359c:	e000e100 	.word	0xe000e100

010035a0 <mpsl_init>:
 10035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10035a2:	4e19      	ldr	r6, [pc, #100]	; (1003608 <mpsl_init+0x68>)
 10035a4:	4605      	mov	r5, r0
 10035a6:	460c      	mov	r4, r1
 10035a8:	4617      	mov	r7, r2
 10035aa:	7833      	ldrb	r3, [r6, #0]
 10035ac:	bb4b      	cbnz	r3, 1003602 <mpsl_init+0x62>
 10035ae:	f001 ff57 	bl	1005460 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
 10035b2:	4b16      	ldr	r3, [pc, #88]	; (100360c <mpsl_init+0x6c>)
 10035b4:	6077      	str	r7, [r6, #4]
 10035b6:	2d00      	cmp	r5, #0
 10035b8:	bf08      	it	eq
 10035ba:	461d      	moveq	r5, r3
 10035bc:	7234      	strb	r4, [r6, #8]
 10035be:	f7ff ffd7 	bl	1003570 <sym_O7UQXUIXLRR5E2N6VYLN55HQWDHFAXBMLEWJBAQ>
 10035c2:	4628      	mov	r0, r5
 10035c4:	f7ff ffbc 	bl	1003540 <sym_5VQN43TPKN75RJC7KGLTAIPPXS3F5YCDBNIBTFQ>
 10035c8:	f7ff fe78 	bl	10032bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
 10035cc:	4605      	mov	r5, r0
 10035ce:	b9b0      	cbnz	r0, 10035fe <mpsl_init+0x5e>
 10035d0:	f7fd fce8 	bl	1000fa4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
 10035d4:	f7ff fdd2 	bl	100317c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
 10035d8:	f001 ff43 	bl	1005462 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
 10035dc:	2c00      	cmp	r4, #0
 10035de:	db0c      	blt.n	10035fa <mpsl_init+0x5a>
 10035e0:	f004 021f 	and.w	r2, r4, #31
 10035e4:	0964      	lsrs	r4, r4, #5
 10035e6:	2301      	movs	r3, #1
 10035e8:	00a4      	lsls	r4, r4, #2
 10035ea:	4093      	lsls	r3, r2
 10035ec:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 10035f0:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 10035f4:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
 10035f8:	6023      	str	r3, [r4, #0]
 10035fa:	2301      	movs	r3, #1
 10035fc:	7033      	strb	r3, [r6, #0]
 10035fe:	4628      	mov	r0, r5
 1003600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1003602:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 1003606:	e7fa      	b.n	10035fe <mpsl_init+0x5e>
 1003608:	21000734 	.word	0x21000734
 100360c:	010156b0 	.word	0x010156b0

01003610 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
 1003610:	b508      	push	{r3, lr}
 1003612:	b672      	cpsid	i
 1003614:	4b02      	ldr	r3, [pc, #8]	; (1003620 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
 1003616:	685b      	ldr	r3, [r3, #4]
 1003618:	b103      	cbz	r3, 100361c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>
 100361a:	4798      	blx	r3
 100361c:	f7ff ff7e 	bl	100351c <sym_4YN6SOPYGJADRASWV4U2FH7BYVA2UF7GCYQNP4A>
 1003620:	21000734 	.word	0x21000734

01003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
 1003624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 1003626:	b672      	cpsid	i
 1003628:	4b13      	ldr	r3, [pc, #76]	; (1003678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x54>)
 100362a:	685d      	ldr	r5, [r3, #4]
 100362c:	b98d      	cbnz	r5, 1003652 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x2e>
 100362e:	f7ff ff75 	bl	100351c <sym_4YN6SOPYGJADRASWV4U2FH7BYVA2UF7GCYQNP4A>
 1003632:	fbb4 f4f6 	udiv	r4, r4, r6
 1003636:	b2d3      	uxtb	r3, r2
 1003638:	3201      	adds	r2, #1
 100363a:	2c00      	cmp	r4, #0
 100363c:	d1f9      	bne.n	1003632 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0xe>
 100363e:	f103 0210 	add.w	r2, r3, #16
 1003642:	446a      	add	r2, sp
 1003644:	f802 4c0c 	strb.w	r4, [r2, #-12]
 1003648:	220a      	movs	r2, #10
 100364a:	b933      	cbnz	r3, 100365a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x36>
 100364c:	a801      	add	r0, sp, #4
 100364e:	47a8      	blx	r5
 1003650:	e7ed      	b.n	100362e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0xa>
 1003652:	4604      	mov	r4, r0
 1003654:	2200      	movs	r2, #0
 1003656:	260a      	movs	r6, #10
 1003658:	e7ed      	b.n	1003636 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
 100365a:	3b01      	subs	r3, #1
 100365c:	b2db      	uxtb	r3, r3
 100365e:	f103 0410 	add.w	r4, r3, #16
 1003662:	eb0d 0604 	add.w	r6, sp, r4
 1003666:	fbb0 f4f2 	udiv	r4, r0, r2
 100366a:	fb02 0014 	mls	r0, r2, r4, r0
 100366e:	3030      	adds	r0, #48	; 0x30
 1003670:	f806 0c0c 	strb.w	r0, [r6, #-12]
 1003674:	4620      	mov	r0, r4
 1003676:	e7e8      	b.n	100364a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x26>
 1003678:	21000734 	.word	0x21000734

0100367c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
 100367c:	4b07      	ldr	r3, [pc, #28]	; (100369c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
 100367e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 1003682:	2b00      	cmp	r3, #0
 1003684:	db09      	blt.n	100369a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
 1003686:	095a      	lsrs	r2, r3, #5
 1003688:	2101      	movs	r1, #1
 100368a:	f003 031f 	and.w	r3, r3, #31
 100368e:	3240      	adds	r2, #64	; 0x40
 1003690:	fa01 f303 	lsl.w	r3, r1, r3
 1003694:	4902      	ldr	r1, [pc, #8]	; (10036a0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x24>)
 1003696:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 100369a:	4770      	bx	lr
 100369c:	21000734 	.word	0x21000734
 10036a0:	e000e100 	.word	0xe000e100

010036a4 <mpsl_temperature_get>:
 10036a4:	4b1b      	ldr	r3, [pc, #108]	; (1003714 <mpsl_temperature_get+0x70>)
 10036a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 10036aa:	b570      	push	{r4, r5, r6, lr}
 10036ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 10036b0:	f3bf 8f4f 	dsb	sy
 10036b4:	f3bf 8f6f 	isb	sy
 10036b8:	4d17      	ldr	r5, [pc, #92]	; (1003718 <mpsl_temperature_get+0x74>)
 10036ba:	2100      	movs	r1, #0
 10036bc:	4c17      	ldr	r4, [pc, #92]	; (100371c <mpsl_temperature_get+0x78>)
 10036be:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 10036c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 10036c6:	6926      	ldr	r6, [r4, #16]
 10036c8:	6923      	ldr	r3, [r4, #16]
 10036ca:	f006 0610 	and.w	r6, r6, #16
 10036ce:	f043 0310 	orr.w	r3, r3, #16
 10036d2:	6123      	str	r3, [r4, #16]
 10036d4:	2301      	movs	r3, #1
 10036d6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
 10036da:	602b      	str	r3, [r5, #0]
 10036dc:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 10036e0:	b1a3      	cbz	r3, 100370c <mpsl_temperature_get+0x68>
 10036e2:	b91e      	cbnz	r6, 10036ec <mpsl_temperature_get+0x48>
 10036e4:	6923      	ldr	r3, [r4, #16]
 10036e6:	f023 0310 	bic.w	r3, r3, #16
 10036ea:	6123      	str	r3, [r4, #16]
 10036ec:	4b0a      	ldr	r3, [pc, #40]	; (1003718 <mpsl_temperature_get+0x74>)
 10036ee:	2201      	movs	r2, #1
 10036f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 10036f4:	605a      	str	r2, [r3, #4]
 10036f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 10036fa:	2200      	movs	r2, #0
 10036fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 1003700:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 1003704:	4b03      	ldr	r3, [pc, #12]	; (1003714 <mpsl_temperature_get+0x70>)
 1003706:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 100370a:	bd70      	pop	{r4, r5, r6, pc}
 100370c:	f001 fecb 	bl	10054a6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
 1003710:	e7e4      	b.n	10036dc <mpsl_temperature_get+0x38>
 1003712:	bf00      	nop
 1003714:	e000e100 	.word	0xe000e100
 1003718:	41010000 	.word	0x41010000
 100371c:	e000ed00 	.word	0xe000ed00

01003720 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
 1003720:	4602      	mov	r2, r0
 1003722:	490c      	ldr	r1, [pc, #48]	; (1003754 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x34>)
 1003724:	2005      	movs	r0, #5
 1003726:	b538      	push	{r3, r4, r5, lr}
 1003728:	3801      	subs	r0, #1
 100372a:	b2c0      	uxtb	r0, r0
 100372c:	28ff      	cmp	r0, #255	; 0xff
 100372e:	d103      	bne.n	1003738 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x18>
 1003730:	2148      	movs	r1, #72	; 0x48
 1003732:	2069      	movs	r0, #105	; 0x69
 1003734:	f7ff ff76 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003738:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 100373c:	791d      	ldrb	r5, [r3, #4]
 100373e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 1003742:	2d00      	cmp	r5, #0
 1003744:	d1f0      	bne.n	1003728 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x8>
 1003746:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
 100374a:	2201      	movs	r2, #1
 100374c:	715c      	strb	r4, [r3, #5]
 100374e:	719c      	strb	r4, [r3, #6]
 1003750:	711a      	strb	r2, [r3, #4]
 1003752:	bd38      	pop	{r3, r4, r5, pc}
 1003754:	21000740 	.word	0x21000740

01003758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
 1003758:	2804      	cmp	r0, #4
 100375a:	b508      	push	{r3, lr}
 100375c:	d903      	bls.n	1003766 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xe>
 100375e:	2158      	movs	r1, #88	; 0x58
 1003760:	2069      	movs	r0, #105	; 0x69
 1003762:	f7ff ff5f 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003766:	4b09      	ldr	r3, [pc, #36]	; (100378c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
 1003768:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 100376c:	7903      	ldrb	r3, [r0, #4]
 100376e:	2b01      	cmp	r3, #1
 1003770:	d001      	beq.n	1003776 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
 1003772:	2159      	movs	r1, #89	; 0x59
 1003774:	e7f4      	b.n	1003760 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x8>
 1003776:	7943      	ldrb	r3, [r0, #5]
 1003778:	7982      	ldrb	r2, [r0, #6]
 100377a:	3301      	adds	r3, #1
 100377c:	b2db      	uxtb	r3, r3
 100377e:	429a      	cmp	r2, r3
 1003780:	bf18      	it	ne
 1003782:	7143      	strbne	r3, [r0, #5]
 1003784:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1003788:	f7ff bf78 	b.w	100367c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
 100378c:	21000740 	.word	0x21000740

01003790 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
 1003790:	b570      	push	{r4, r5, r6, lr}
 1003792:	2506      	movs	r5, #6
 1003794:	4c11      	ldr	r4, [pc, #68]	; (10037dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x4c>)
 1003796:	2600      	movs	r6, #0
 1003798:	3d01      	subs	r5, #1
 100379a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 100379e:	d100      	bne.n	10037a2 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x12>
 10037a0:	bd70      	pop	{r4, r5, r6, pc}
 10037a2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 10037a6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 10037aa:	791a      	ldrb	r2, [r3, #4]
 10037ac:	2a01      	cmp	r2, #1
 10037ae:	d109      	bne.n	10037c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x34>
 10037b0:	7958      	ldrb	r0, [r3, #5]
 10037b2:	799a      	ldrb	r2, [r3, #6]
 10037b4:	4290      	cmp	r0, r2
 10037b6:	d005      	beq.n	10037c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x34>
 10037b8:	795a      	ldrb	r2, [r3, #5]
 10037ba:	b2d2      	uxtb	r2, r2
 10037bc:	719a      	strb	r2, [r3, #6]
 10037be:	f854 3031 	ldr.w	r3, [r4, r1, lsl #3]
 10037c2:	4798      	blx	r3
 10037c4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 10037c8:	3301      	adds	r3, #1
 10037ca:	b2db      	uxtb	r3, r3
 10037cc:	2b04      	cmp	r3, #4
 10037ce:	bf94      	ite	ls
 10037d0:	f884 3028 	strbls.w	r3, [r4, #40]	; 0x28
 10037d4:	f884 6028 	strbhi.w	r6, [r4, #40]	; 0x28
 10037d8:	e7de      	b.n	1003798 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x8>
 10037da:	bf00      	nop
 10037dc:	21000740 	.word	0x21000740

010037e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
 10037e0:	4800      	ldr	r0, [pc, #0]	; (10037e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x4>)
 10037e2:	4770      	bx	lr
 10037e4:	41080700 	.word	0x41080700

010037e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
 10037e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 10037ec:	0784      	lsls	r4, r0, #30
 10037ee:	fa5f fe81 	uxtb.w	lr, r1
 10037f2:	d05f      	beq.n	10038b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xcc>
 10037f4:	2a00      	cmp	r2, #0
 10037f6:	d059      	beq.n	10038ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xc4>
 10037f8:	4603      	mov	r3, r0
 10037fa:	e001      	b.n	1003800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x18>
 10037fc:	2a00      	cmp	r2, #0
 10037fe:	d055      	beq.n	10038ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xc4>
 1003800:	f803 eb01 	strb.w	lr, [r3], #1
 1003804:	0799      	lsls	r1, r3, #30
 1003806:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 100380a:	d1f7      	bne.n	10037fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14>
 100380c:	ea4e 240e 	orr.w	r4, lr, lr, lsl #8
 1003810:	2a03      	cmp	r2, #3
 1003812:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
 1003816:	d93e      	bls.n	1003896 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xae>
 1003818:	1f15      	subs	r5, r2, #4
 100381a:	f3c3 0180 	ubfx	r1, r3, #2, #1
 100381e:	08ae      	lsrs	r6, r5, #2
 1003820:	2d17      	cmp	r5, #23
 1003822:	f106 0601 	add.w	r6, r6, #1
 1003826:	d947      	bls.n	10038b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xd0>
 1003828:	4698      	mov	r8, r3
 100382a:	2900      	cmp	r1, #0
 100382c:	d040      	beq.n	10038b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xc8>
 100382e:	f848 4b04 	str.w	r4, [r8], #4
 1003832:	1a77      	subs	r7, r6, r1
 1003834:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 1003838:	0879      	lsrs	r1, r7, #1
 100383a:	eb0c 01c1 	add.w	r1, ip, r1, lsl #3
 100383e:	e9cc 4400 	strd	r4, r4, [ip]
 1003842:	f10c 0c08 	add.w	ip, ip, #8
 1003846:	4561      	cmp	r1, ip
 1003848:	d1f9      	bne.n	100383e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
 100384a:	f027 0c01 	bic.w	ip, r7, #1
 100384e:	eb08 018c 	add.w	r1, r8, ip, lsl #2
 1003852:	4567      	cmp	r7, ip
 1003854:	ebcc 788c 	rsb	r8, ip, ip, lsl #30
 1003858:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 100385c:	d017      	beq.n	100388e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa6>
 100385e:	1f2f      	subs	r7, r5, #4
 1003860:	600c      	str	r4, [r1, #0]
 1003862:	2f03      	cmp	r7, #3
 1003864:	d913      	bls.n	100388e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa6>
 1003866:	f1a5 0708 	sub.w	r7, r5, #8
 100386a:	604c      	str	r4, [r1, #4]
 100386c:	2f03      	cmp	r7, #3
 100386e:	d90e      	bls.n	100388e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa6>
 1003870:	f1a5 070c 	sub.w	r7, r5, #12
 1003874:	608c      	str	r4, [r1, #8]
 1003876:	2f03      	cmp	r7, #3
 1003878:	d909      	bls.n	100388e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa6>
 100387a:	f1a5 0710 	sub.w	r7, r5, #16
 100387e:	60cc      	str	r4, [r1, #12]
 1003880:	2f03      	cmp	r7, #3
 1003882:	d904      	bls.n	100388e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa6>
 1003884:	3d14      	subs	r5, #20
 1003886:	610c      	str	r4, [r1, #16]
 1003888:	2d03      	cmp	r5, #3
 100388a:	bf88      	it	hi
 100388c:	614c      	strhi	r4, [r1, #20]
 100388e:	f002 0203 	and.w	r2, r2, #3
 1003892:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 1003896:	b14a      	cbz	r2, 10038ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xc4>
 1003898:	3a01      	subs	r2, #1
 100389a:	f883 e000 	strb.w	lr, [r3]
 100389e:	d005      	beq.n	10038ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xc4>
 10038a0:	2a01      	cmp	r2, #1
 10038a2:	f883 e001 	strb.w	lr, [r3, #1]
 10038a6:	bf18      	it	ne
 10038a8:	f883 e002 	strbne.w	lr, [r3, #2]
 10038ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10038b0:	4615      	mov	r5, r2
 10038b2:	e7be      	b.n	1003832 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x4a>
 10038b4:	4603      	mov	r3, r0
 10038b6:	e7a9      	b.n	100380c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x24>
 10038b8:	4619      	mov	r1, r3
 10038ba:	4615      	mov	r5, r2
 10038bc:	e7cf      	b.n	100385e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x76>
 10038be:	bf00      	nop

010038c0 <mpsl_cx_request>:
 10038c0:	4b01      	ldr	r3, [pc, #4]	; (10038c8 <mpsl_cx_request+0x8>)
 10038c2:	681b      	ldr	r3, [r3, #0]
 10038c4:	681b      	ldr	r3, [r3, #0]
 10038c6:	4718      	bx	r3
 10038c8:	21000000 	.word	0x21000000

010038cc <mpsl_cx_release>:
 10038cc:	4b01      	ldr	r3, [pc, #4]	; (10038d4 <mpsl_cx_release+0x8>)
 10038ce:	681b      	ldr	r3, [r3, #0]
 10038d0:	685b      	ldr	r3, [r3, #4]
 10038d2:	4718      	bx	r3
 10038d4:	21000000 	.word	0x21000000

010038d8 <mpsl_cx_granted_ops_get>:
 10038d8:	4b01      	ldr	r3, [pc, #4]	; (10038e0 <mpsl_cx_granted_ops_get+0x8>)
 10038da:	681b      	ldr	r3, [r3, #0]
 10038dc:	689b      	ldr	r3, [r3, #8]
 10038de:	4718      	bx	r3
 10038e0:	21000000 	.word	0x21000000

010038e4 <mpsl_cx_register_callback>:
 10038e4:	4b01      	ldr	r3, [pc, #4]	; (10038ec <mpsl_cx_register_callback+0x8>)
 10038e6:	681b      	ldr	r3, [r3, #0]
 10038e8:	691b      	ldr	r3, [r3, #16]
 10038ea:	4718      	bx	r3
 10038ec:	21000000 	.word	0x21000000

010038f0 <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ>:
 10038f0:	b538      	push	{r3, r4, r5, lr}
 10038f2:	4c17      	ldr	r4, [pc, #92]	; (1003950 <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ+0x60>)
 10038f4:	2003      	movs	r0, #3
 10038f6:	f7fe fb15 	bl	1001f24 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
 10038fa:	2103      	movs	r1, #3
 10038fc:	6825      	ldr	r5, [r4, #0]
 10038fe:	4285      	cmp	r5, r0
 1003900:	bf28      	it	cs
 1003902:	4605      	movcs	r5, r0
 1003904:	4628      	mov	r0, r5
 1003906:	f7fe fb5b 	bl	1001fc0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
 100390a:	b130      	cbz	r0, 100391a <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ+0x2a>
 100390c:	2801      	cmp	r0, #1
 100390e:	d019      	beq.n	1003944 <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ+0x54>
 1003910:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 1003914:	206b      	movs	r0, #107	; 0x6b
 1003916:	f7ff fe85 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100391a:	6823      	ldr	r3, [r4, #0]
 100391c:	68e0      	ldr	r0, [r4, #12]
 100391e:	42ab      	cmp	r3, r5
 1003920:	d106      	bne.n	1003930 <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ+0x40>
 1003922:	f7fe fa3f 	bl	1001da4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
 1003926:	68e2      	ldr	r2, [r4, #12]
 1003928:	6823      	ldr	r3, [r4, #0]
 100392a:	4413      	add	r3, r2
 100392c:	60e3      	str	r3, [r4, #12]
 100392e:	bd38      	pop	{r3, r4, r5, pc}
 1003930:	4405      	add	r5, r0
 1003932:	8960      	ldrh	r0, [r4, #10]
 1003934:	2301      	movs	r3, #1
 1003936:	1a28      	subs	r0, r5, r0
 1003938:	60e5      	str	r5, [r4, #12]
 100393a:	7423      	strb	r3, [r4, #16]
 100393c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1003940:	f7fe ba30 	b.w	1001da4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
 1003944:	8963      	ldrh	r3, [r4, #10]
 1003946:	7420      	strb	r0, [r4, #16]
 1003948:	68e0      	ldr	r0, [r4, #12]
 100394a:	1ac0      	subs	r0, r0, r3
 100394c:	e7f6      	b.n	100393c <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ+0x4c>
 100394e:	bf00      	nop
 1003950:	21000770 	.word	0x21000770

01003954 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI>:
 1003954:	b508      	push	{r3, lr}
 1003956:	4b0c      	ldr	r3, [pc, #48]	; (1003988 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x34>)
 1003958:	781a      	ldrb	r2, [r3, #0]
 100395a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 100395e:	b112      	cbz	r2, 1003966 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x12>
 1003960:	1e5a      	subs	r2, r3, #1
 1003962:	421a      	tst	r2, r3
 1003964:	d003      	beq.n	100396e <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x1a>
 1003966:	21e0      	movs	r1, #224	; 0xe0
 1003968:	206b      	movs	r0, #107	; 0x6b
 100396a:	f7ff fe5b 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100396e:	b119      	cbz	r1, 1003978 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x24>
 1003970:	4203      	tst	r3, r0
 1003972:	d107      	bne.n	1003984 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x30>
 1003974:	21e5      	movs	r1, #229	; 0xe5
 1003976:	e7f7      	b.n	1003968 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x14>
 1003978:	ea23 0300 	bic.w	r3, r3, r0
 100397c:	069b      	lsls	r3, r3, #26
 100397e:	d101      	bne.n	1003984 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x30>
 1003980:	21e9      	movs	r1, #233	; 0xe9
 1003982:	e7f1      	b.n	1003968 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI+0x14>
 1003984:	bd08      	pop	{r3, pc}
 1003986:	bf00      	nop
 1003988:	21000004 	.word	0x21000004

0100398c <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA>:
 100398c:	2218      	movs	r2, #24
 100398e:	2100      	movs	r1, #0
 1003990:	b510      	push	{r4, lr}
 1003992:	4c0e      	ldr	r4, [pc, #56]	; (10039cc <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA+0x40>)
 1003994:	18a0      	adds	r0, r4, r2
 1003996:	f7ff ff27 	bl	10037e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
 100399a:	2301      	movs	r3, #1
 100399c:	2202      	movs	r2, #2
 100399e:	f104 0118 	add.w	r1, r4, #24
 10039a2:	7623      	strb	r3, [r4, #24]
 10039a4:	2303      	movs	r3, #3
 10039a6:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 10039aa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 10039ae:	6823      	ldr	r3, [r4, #0]
 10039b0:	61e3      	str	r3, [r4, #28]
 10039b2:	6863      	ldr	r3, [r4, #4]
 10039b4:	62a3      	str	r3, [r4, #40]	; 0x28
 10039b6:	4b06      	ldr	r3, [pc, #24]	; (10039d0 <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA+0x44>)
 10039b8:	701a      	strb	r2, [r3, #0]
 10039ba:	f7fd fd29 	bl	1001410 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
 10039be:	b920      	cbnz	r0, 10039ca <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA+0x3e>
 10039c0:	f44f 7183 	mov.w	r1, #262	; 0x106
 10039c4:	206b      	movs	r0, #107	; 0x6b
 10039c6:	f7ff fe2d 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10039ca:	bd10      	pop	{r4, pc}
 10039cc:	21000770 	.word	0x21000770
 10039d0:	21000004 	.word	0x21000004

010039d4 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA>:
 10039d4:	b570      	push	{r4, r5, r6, lr}
 10039d6:	f3ef 8510 	mrs	r5, PRIMASK
 10039da:	b672      	cpsid	i
 10039dc:	4c26      	ldr	r4, [pc, #152]	; (1003a78 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0xa4>)
 10039de:	2300      	movs	r3, #0
 10039e0:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
 10039e4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 10039e8:	2e01      	cmp	r6, #1
 10039ea:	d006      	beq.n	10039fa <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x26>
 10039ec:	2e02      	cmp	r6, #2
 10039ee:	d01d      	beq.n	1003a2c <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x58>
 10039f0:	2e00      	cmp	r6, #0
 10039f2:	d13b      	bne.n	1003a6c <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x98>
 10039f4:	f385 8810 	msr	PRIMASK, r5
 10039f8:	bd70      	pop	{r4, r5, r6, pc}
 10039fa:	f385 8810 	msr	PRIMASK, r5
 10039fe:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 1003a02:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 1003a06:	b123      	cbz	r3, 1003a12 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x3e>
 1003a08:	f240 115b 	movw	r1, #347	; 0x15b
 1003a0c:	206b      	movs	r0, #107	; 0x6b
 1003a0e:	f7ff fe09 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003a12:	2014      	movs	r0, #20
 1003a14:	f7ff ff9e 	bl	1003954 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI>
 1003a18:	4b18      	ldr	r3, [pc, #96]	; (1003a7c <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0xa8>)
 1003a1a:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
 1003a1e:	781b      	ldrb	r3, [r3, #0]
 1003a20:	2b01      	cmp	r3, #1
 1003a22:	d1e9      	bne.n	10039f8 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x24>
 1003a24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 1003a28:	f7ff bfb0 	b.w	100398c <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA>
 1003a2c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 1003a30:	b912      	cbnz	r2, 1003a38 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x64>
 1003a32:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 1003a36:	e7e9      	b.n	1003a0c <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x38>
 1003a38:	4910      	ldr	r1, [pc, #64]	; (1003a7c <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0xa8>)
 1003a3a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 1003a3e:	780b      	ldrb	r3, [r1, #0]
 1003a40:	3b02      	subs	r3, #2
 1003a42:	b2db      	uxtb	r3, r3
 1003a44:	2b1e      	cmp	r3, #30
 1003a46:	d80e      	bhi.n	1003a66 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x92>
 1003a48:	2201      	movs	r2, #1
 1003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 1003a4e:	4a0c      	ldr	r2, [pc, #48]	; (1003a80 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0xac>)
 1003a50:	4213      	tst	r3, r2
 1003a52:	d1cf      	bne.n	10039f4 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x20>
 1003a54:	f244 0204 	movw	r2, #16388	; 0x4004
 1003a58:	4213      	tst	r3, r2
 1003a5a:	d004      	beq.n	1003a66 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x92>
 1003a5c:	2320      	movs	r3, #32
 1003a5e:	700b      	strb	r3, [r1, #0]
 1003a60:	f7fd fade 	bl	1001020 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
 1003a64:	e7c6      	b.n	10039f4 <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x20>
 1003a66:	f44f 71c4 	mov.w	r1, #392	; 0x188
 1003a6a:	e7cf      	b.n	1003a0c <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x38>
 1003a6c:	f385 8810 	msr	PRIMASK, r5
 1003a70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 1003a74:	e7ca      	b.n	1003a0c <sym_TDEN4HMDU44XK6VTILEMXSKEEH6E4IAUUP3BAHA+0x38>
 1003a76:	bf00      	nop
 1003a78:	21000770 	.word	0x21000770
 1003a7c:	21000004 	.word	0x21000004
 1003a80:	40000041 	.word	0x40000041

01003a84 <nrf_raal_init>:
 1003a84:	b570      	push	{r4, r5, r6, lr}
 1003a86:	4c14      	ldr	r4, [pc, #80]	; (1003ad8 <nrf_raal_init+0x54>)
 1003a88:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
 1003a8c:	b125      	cbz	r5, 1003a98 <nrf_raal_init+0x14>
 1003a8e:	f240 218d 	movw	r1, #653	; 0x28d
 1003a92:	206b      	movs	r0, #107	; 0x6b
 1003a94:	f7ff fdc6 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003a98:	4b10      	ldr	r3, [pc, #64]	; (1003adc <nrf_raal_init+0x58>)
 1003a9a:	2601      	movs	r6, #1
 1003a9c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 1003aa0:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 1003aa4:	701e      	strb	r6, [r3, #0]
 1003aa6:	4b0e      	ldr	r3, [pc, #56]	; (1003ae0 <nrf_raal_init+0x5c>)
 1003aa8:	480e      	ldr	r0, [pc, #56]	; (1003ae4 <nrf_raal_init+0x60>)
 1003aaa:	e9c4 2300 	strd	r2, r3, [r4]
 1003aae:	4b0e      	ldr	r3, [pc, #56]	; (1003ae8 <nrf_raal_init+0x64>)
 1003ab0:	60a3      	str	r3, [r4, #8]
 1003ab2:	f7ff fe35 	bl	1003720 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
 1003ab6:	4629      	mov	r1, r5
 1003ab8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 1003abc:	480b      	ldr	r0, [pc, #44]	; (1003aec <nrf_raal_init+0x68>)
 1003abe:	f7fd fc7b 	bl	10013b8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
 1003ac2:	2820      	cmp	r0, #32
 1003ac4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
 1003ac8:	d102      	bne.n	1003ad0 <nrf_raal_init+0x4c>
 1003aca:	f44f 7127 	mov.w	r1, #668	; 0x29c
 1003ace:	e7e0      	b.n	1003a92 <nrf_raal_init+0xe>
 1003ad0:	f884 6033 	strb.w	r6, [r4, #51]	; 0x33
 1003ad4:	bd70      	pop	{r4, r5, r6, pc}
 1003ad6:	bf00      	nop
 1003ad8:	21000770 	.word	0x21000770
 1003adc:	21000004 	.word	0x21000004
 1003ae0:	0f423fff 	.word	0x0f423fff
 1003ae4:	010039d5 	.word	0x010039d5
 1003ae8:	00b70005 	.word	0x00b70005
 1003aec:	01003c4d 	.word	0x01003c4d

01003af0 <nrf_raal_continuous_mode_exit>:
 1003af0:	b508      	push	{r3, lr}
 1003af2:	4b10      	ldr	r3, [pc, #64]	; (1003b34 <nrf_raal_continuous_mode_exit+0x44>)
 1003af4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 1003af8:	b922      	cbnz	r2, 1003b04 <nrf_raal_continuous_mode_exit+0x14>
 1003afa:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 1003afe:	206b      	movs	r0, #107	; 0x6b
 1003b00:	f7ff fd90 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003b04:	f3ef 8110 	mrs	r1, PRIMASK
 1003b08:	b672      	cpsid	i
 1003b0a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 1003b0e:	b122      	cbz	r2, 1003b1a <nrf_raal_continuous_mode_exit+0x2a>
 1003b10:	2a01      	cmp	r2, #1
 1003b12:	d00d      	beq.n	1003b30 <nrf_raal_continuous_mode_exit+0x40>
 1003b14:	f44f 7143 	mov.w	r1, #780	; 0x30c
 1003b18:	e7f1      	b.n	1003afe <nrf_raal_continuous_mode_exit+0xe>
 1003b1a:	2202      	movs	r2, #2
 1003b1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 1003b20:	b901      	cbnz	r1, 1003b24 <nrf_raal_continuous_mode_exit+0x34>
 1003b22:	b662      	cpsie	i
 1003b24:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
 1003b28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1003b2c:	f7ff be14 	b.w	1003758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1003b30:	2200      	movs	r2, #0
 1003b32:	e7f3      	b.n	1003b1c <nrf_raal_continuous_mode_exit+0x2c>
 1003b34:	21000770 	.word	0x21000770

01003b38 <nrf_raal_continuous_ended>:
 1003b38:	4b0b      	ldr	r3, [pc, #44]	; (1003b68 <nrf_raal_continuous_ended+0x30>)
 1003b3a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 1003b3e:	b510      	push	{r4, lr}
 1003b40:	b923      	cbnz	r3, 1003b4c <nrf_raal_continuous_ended+0x14>
 1003b42:	f240 311b 	movw	r1, #795	; 0x31b
 1003b46:	206b      	movs	r0, #107	; 0x6b
 1003b48:	f7ff fd6c 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003b4c:	f3ef 8410 	mrs	r4, PRIMASK
 1003b50:	b672      	cpsid	i
 1003b52:	4b06      	ldr	r3, [pc, #24]	; (1003b6c <nrf_raal_continuous_ended+0x34>)
 1003b54:	781a      	ldrb	r2, [r3, #0]
 1003b56:	2a10      	cmp	r2, #16
 1003b58:	d103      	bne.n	1003b62 <nrf_raal_continuous_ended+0x2a>
 1003b5a:	2208      	movs	r2, #8
 1003b5c:	701a      	strb	r2, [r3, #0]
 1003b5e:	f7fd fa5f 	bl	1001020 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
 1003b62:	b904      	cbnz	r4, 1003b66 <nrf_raal_continuous_ended+0x2e>
 1003b64:	b662      	cpsie	i
 1003b66:	bd10      	pop	{r4, pc}
 1003b68:	21000770 	.word	0x21000770
 1003b6c:	21000004 	.word	0x21000004

01003b70 <nrf_raal_timeslot_us_left_get>:
 1003b70:	4b11      	ldr	r3, [pc, #68]	; (1003bb8 <nrf_raal_timeslot_us_left_get+0x48>)
 1003b72:	b510      	push	{r4, lr}
 1003b74:	781b      	ldrb	r3, [r3, #0]
 1003b76:	2b04      	cmp	r3, #4
 1003b78:	d11b      	bne.n	1003bb2 <nrf_raal_timeslot_us_left_get+0x42>
 1003b7a:	4b10      	ldr	r3, [pc, #64]	; (1003bbc <nrf_raal_timeslot_us_left_get+0x4c>)
 1003b7c:	7c1a      	ldrb	r2, [r3, #16]
 1003b7e:	b91a      	cbnz	r2, 1003b88 <nrf_raal_timeslot_us_left_get+0x18>
 1003b80:	895a      	ldrh	r2, [r3, #10]
 1003b82:	6818      	ldr	r0, [r3, #0]
 1003b84:	1a80      	subs	r0, r0, r2
 1003b86:	bd10      	pop	{r4, pc}
 1003b88:	f7fe fdd8 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1003b8c:	4604      	mov	r4, r0
 1003b8e:	2001      	movs	r0, #1
 1003b90:	f7fe fdcc 	bl	100272c <sym_FY657WZD5QKMAW2TUBIU3E4BZ5M7DEVBKNG65HA>
 1003b94:	3801      	subs	r0, #1
 1003b96:	4b0a      	ldr	r3, [pc, #40]	; (1003bc0 <nrf_raal_timeslot_us_left_get+0x50>)
 1003b98:	1b00      	subs	r0, r0, r4
 1003b9a:	0200      	lsls	r0, r0, #8
 1003b9c:	bf48      	it	mi
 1003b9e:	30ff      	addmi	r0, #255	; 0xff
 1003ba0:	1200      	asrs	r0, r0, #8
 1003ba2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 1003ba6:	fb80 0303 	smull	r0, r3, r0, r3
 1003baa:	0bc0      	lsrs	r0, r0, #15
 1003bac:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 1003bb0:	e7e9      	b.n	1003b86 <nrf_raal_timeslot_us_left_get+0x16>
 1003bb2:	2000      	movs	r0, #0
 1003bb4:	e7e7      	b.n	1003b86 <nrf_raal_timeslot_us_left_get+0x16>
 1003bb6:	bf00      	nop
 1003bb8:	21000004 	.word	0x21000004
 1003bbc:	21000770 	.word	0x21000770
 1003bc0:	000f4240 	.word	0x000f4240

01003bc4 <nrf_raal_continuous_mode_enter>:
 1003bc4:	b538      	push	{r3, r4, r5, lr}
 1003bc6:	4c14      	ldr	r4, [pc, #80]	; (1003c18 <nrf_raal_continuous_mode_enter+0x54>)
 1003bc8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 1003bcc:	b923      	cbnz	r3, 1003bd8 <nrf_raal_continuous_mode_enter+0x14>
 1003bce:	f240 21d1 	movw	r1, #721	; 0x2d1
 1003bd2:	206b      	movs	r0, #107	; 0x6b
 1003bd4:	f7ff fd26 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003bd8:	f3ef 8510 	mrs	r5, PRIMASK
 1003bdc:	b672      	cpsid	i
 1003bde:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 1003be2:	b123      	cbz	r3, 1003bee <nrf_raal_continuous_mode_enter+0x2a>
 1003be4:	2b02      	cmp	r3, #2
 1003be6:	d00d      	beq.n	1003c04 <nrf_raal_continuous_mode_enter+0x40>
 1003be8:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 1003bec:	e7f1      	b.n	1003bd2 <nrf_raal_continuous_mode_enter+0xe>
 1003bee:	2301      	movs	r3, #1
 1003bf0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 1003bf4:	b905      	cbnz	r5, 1003bf8 <nrf_raal_continuous_mode_enter+0x34>
 1003bf6:	b662      	cpsie	i
 1003bf8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 1003bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1003c00:	f7ff bdaa 	b.w	1003758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
 1003c04:	4b05      	ldr	r3, [pc, #20]	; (1003c1c <nrf_raal_continuous_mode_enter+0x58>)
 1003c06:	2200      	movs	r2, #0
 1003c08:	781b      	ldrb	r3, [r3, #0]
 1003c0a:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
 1003c0e:	2b04      	cmp	r3, #4
 1003c10:	d1f0      	bne.n	1003bf4 <nrf_raal_continuous_mode_enter+0x30>
 1003c12:	f00d fdaf 	bl	1011774 <nrf_raal_timeslot_started>
 1003c16:	e7ed      	b.n	1003bf4 <nrf_raal_continuous_mode_enter+0x30>
 1003c18:	21000770 	.word	0x21000770
 1003c1c:	21000004 	.word	0x21000004

01003c20 <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y>:
 1003c20:	b508      	push	{r3, lr}
 1003c22:	4b09      	ldr	r3, [pc, #36]	; (1003c48 <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y+0x28>)
 1003c24:	7819      	ldrb	r1, [r3, #0]
 1003c26:	2910      	cmp	r1, #16
 1003c28:	b2ca      	uxtb	r2, r1
 1003c2a:	d007      	beq.n	1003c3c <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y+0x1c>
 1003c2c:	2a20      	cmp	r2, #32
 1003c2e:	d005      	beq.n	1003c3c <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y+0x1c>
 1003c30:	2a04      	cmp	r2, #4
 1003c32:	d104      	bne.n	1003c3e <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y+0x1e>
 1003c34:	2210      	movs	r2, #16
 1003c36:	701a      	strb	r2, [r3, #0]
 1003c38:	f00d fdac 	bl	1011794 <nrf_raal_timeslot_ended>
 1003c3c:	bd08      	pop	{r3, pc}
 1003c3e:	f240 11cd 	movw	r1, #461	; 0x1cd
 1003c42:	206b      	movs	r0, #107	; 0x6b
 1003c44:	f7ff fcee 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003c48:	21000004 	.word	0x21000004

01003c4c <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY>:
 1003c4c:	b510      	push	{r4, lr}
 1003c4e:	460c      	mov	r4, r1
 1003c50:	f7fe fd74 	bl	100273c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
 1003c54:	1e61      	subs	r1, r4, #1
 1003c56:	2906      	cmp	r1, #6
 1003c58:	d83a      	bhi.n	1003cd0 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x84>
 1003c5a:	e8df f001 	tbb	[pc, r1]
 1003c5e:	4404      	.short	0x4404
 1003c60:	57232844 	.word	0x57232844
 1003c64:	50          	.byte	0x50
 1003c65:	00          	.byte	0x00
 1003c66:	2101      	movs	r1, #1
 1003c68:	2002      	movs	r0, #2
 1003c6a:	f7ff fe73 	bl	1003954 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI>
 1003c6e:	4b2b      	ldr	r3, [pc, #172]	; (1003d1c <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd0>)
 1003c70:	4a2b      	ldr	r2, [pc, #172]	; (1003d20 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd4>)
 1003c72:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
 1003c76:	b179      	cbz	r1, 1003c98 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x4c>
 1003c78:	2104      	movs	r1, #4
 1003c7a:	7011      	strb	r1, [r2, #0]
 1003c7c:	681a      	ldr	r2, [r3, #0]
 1003c7e:	60da      	str	r2, [r3, #12]
 1003c80:	2200      	movs	r2, #0
 1003c82:	741a      	strb	r2, [r3, #16]
 1003c84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 1003c88:	2b02      	cmp	r3, #2
 1003c8a:	d001      	beq.n	1003c90 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x44>
 1003c8c:	f00d fd72 	bl	1011774 <nrf_raal_timeslot_started>
 1003c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1003c94:	f7ff be2c 	b.w	10038f0 <sym_XE4FQNOY3R3THCRMJKGQ2WPMSORV7DY76HFQLVQ>
 1003c98:	2320      	movs	r3, #32
 1003c9a:	7013      	strb	r3, [r2, #0]
 1003c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1003ca0:	f7fd b9be 	b.w	1001020 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
 1003ca4:	f240 2115 	movw	r1, #533	; 0x215
 1003ca8:	206b      	movs	r0, #107	; 0x6b
 1003caa:	f7ff fcbb 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1003cae:	4b1b      	ldr	r3, [pc, #108]	; (1003d1c <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd0>)
 1003cb0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 1003cb4:	b162      	cbz	r2, 1003cd0 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x84>
 1003cb6:	4a1a      	ldr	r2, [pc, #104]	; (1003d20 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd4>)
 1003cb8:	7812      	ldrb	r2, [r2, #0]
 1003cba:	2a04      	cmp	r2, #4
 1003cbc:	d109      	bne.n	1003cd2 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x86>
 1003cbe:	7c1b      	ldrb	r3, [r3, #16]
 1003cc0:	2b01      	cmp	r3, #1
 1003cc2:	d103      	bne.n	1003ccc <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x80>
 1003cc4:	4b17      	ldr	r3, [pc, #92]	; (1003d24 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd8>)
 1003cc6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 1003cca:	bb1b      	cbnz	r3, 1003d14 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xc8>
 1003ccc:	f007 f9d8 	bl	100b080 <nrf_802154_radio_irq_handler>
 1003cd0:	bd10      	pop	{r4, pc}
 1003cd2:	4b15      	ldr	r3, [pc, #84]	; (1003d28 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xdc>)
 1003cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 1003cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 1003cdc:	f3bf 8f4f 	dsb	sy
 1003ce0:	f3bf 8f6f 	isb	sy
 1003ce4:	e7f4      	b.n	1003cd0 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x84>
 1003ce6:	2101      	movs	r1, #1
 1003ce8:	2002      	movs	r0, #2
 1003cea:	f7ff fe33 	bl	1003954 <sym_IRIZOSASIC3JLBLISZATWMSSNZ5X6HYN3UJ3JPI>
 1003cee:	4b0b      	ldr	r3, [pc, #44]	; (1003d1c <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd0>)
 1003cf0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 1003cf4:	b133      	cbz	r3, 1003d04 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xb8>
 1003cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1003cfa:	f7ff be47 	b.w	100398c <sym_RCMMPSTF2EML32JQ6R3HKP4RKIKXPCMPS23XHTA>
 1003cfe:	2101      	movs	r1, #1
 1003d00:	2028      	movs	r0, #40	; 0x28
 1003d02:	e7f2      	b.n	1003cea <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x9e>
 1003d04:	4b06      	ldr	r3, [pc, #24]	; (1003d20 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd4>)
 1003d06:	2201      	movs	r2, #1
 1003d08:	701a      	strb	r2, [r3, #0]
 1003d0a:	e7e1      	b.n	1003cd0 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x84>
 1003d0c:	4b03      	ldr	r3, [pc, #12]	; (1003d1c <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0xd0>)
 1003d0e:	7c1b      	ldrb	r3, [r3, #16]
 1003d10:	2b01      	cmp	r3, #1
 1003d12:	d1bd      	bne.n	1003c90 <sym_ZBUIBXOSEBMIAHQ7YXGUSIEXNXW4Z4EFEIO7IRY+0x44>
 1003d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1003d18:	f7ff bf82 	b.w	1003c20 <sym_PRG6RA5XWHJMYRZOXHSILQQG6HJBUPZIEY7776Y>
 1003d1c:	21000770 	.word	0x21000770
 1003d20:	21000004 	.word	0x21000004
 1003d24:	41011000 	.word	0x41011000
 1003d28:	e000e100 	.word	0xe000e100

01003d2c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
 1003d2c:	4b01      	ldr	r3, [pc, #4]	; (1003d34 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
 1003d2e:	2201      	movs	r2, #1
 1003d30:	779a      	strb	r2, [r3, #30]
 1003d32:	4770      	bx	lr
 1003d34:	210007a8 	.word	0x210007a8

01003d38 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA>:
 1003d38:	2000      	movs	r0, #0
 1003d3a:	4770      	bx	lr

01003d3c <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA>:
 1003d3c:	4b07      	ldr	r3, [pc, #28]	; (1003d5c <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x20>)
 1003d3e:	681a      	ldr	r2, [r3, #0]
 1003d40:	b94a      	cbnz	r2, 1003d56 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x1a>
 1003d42:	685a      	ldr	r2, [r3, #4]
 1003d44:	b93a      	cbnz	r2, 1003d56 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x1a>
 1003d46:	689a      	ldr	r2, [r3, #8]
 1003d48:	b92a      	cbnz	r2, 1003d56 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x1a>
 1003d4a:	68d8      	ldr	r0, [r3, #12]
 1003d4c:	3800      	subs	r0, #0
 1003d4e:	bf18      	it	ne
 1003d50:	2001      	movne	r0, #1
 1003d52:	4240      	negs	r0, r0
 1003d54:	4770      	bx	lr
 1003d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1003d5a:	4770      	bx	lr
 1003d5c:	21000a10 	.word	0x21000a10

01003d60 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA>:
 1003d60:	4b10      	ldr	r3, [pc, #64]	; (1003da4 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x44>)
 1003d62:	681a      	ldr	r2, [r3, #0]
 1003d64:	b510      	push	{r4, lr}
 1003d66:	b9ca      	cbnz	r2, 1003d9c <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x3c>
 1003d68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 1003d6a:	b9ba      	cbnz	r2, 1003d9c <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x3c>
 1003d6c:	685a      	ldr	r2, [r3, #4]
 1003d6e:	b9aa      	cbnz	r2, 1003d9c <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x3c>
 1003d70:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 1003d72:	b99c      	cbnz	r4, 1003d9c <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x3c>
 1003d74:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 1003d78:	b90a      	cbnz	r2, 1003d7e <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x1e>
 1003d7a:	2000      	movs	r0, #0
 1003d7c:	bd10      	pop	{r4, pc}
 1003d7e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 1003d82:	2101      	movs	r1, #1
 1003d84:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 1003d88:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
 1003d8c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
 1003d90:	6011      	str	r1, [r2, #0]
 1003d92:	2b00      	cmp	r3, #0
 1003d94:	d0f1      	beq.n	1003d7a <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x1a>
 1003d96:	f001 f87b 	bl	1004e90 <sym_DINXTNKCSHYWKSOGFJLECC2P6Y7VHT5UJUX7RSQ>
 1003d9a:	e7ee      	b.n	1003d7a <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x1a>
 1003d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1003da0:	e7ec      	b.n	1003d7c <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x1c>
 1003da2:	bf00      	nop
 1003da4:	21000a5c 	.word	0x21000a5c

01003da8 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA>:
 1003da8:	b538      	push	{r3, r4, r5, lr}
 1003daa:	4c11      	ldr	r4, [pc, #68]	; (1003df0 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x48>)
 1003dac:	6823      	ldr	r3, [r4, #0]
 1003dae:	b9e3      	cbnz	r3, 1003dea <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x42>
 1003db0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 1003db4:	b9cb      	cbnz	r3, 1003dea <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x42>
 1003db6:	6863      	ldr	r3, [r4, #4]
 1003db8:	b9bb      	cbnz	r3, 1003dea <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x42>
 1003dba:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 1003dbe:	b9a5      	cbnz	r5, 1003dea <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x42>
 1003dc0:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 1003dc4:	b123      	cbz	r3, 1003dd0 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x28>
 1003dc6:	f001 f881 	bl	1004ecc <sym_CMW5Y2V4ZAQWO6OLYO7TFQKQPIHLUEEKEX6J7BY>
 1003dca:	4628      	mov	r0, r5
 1003dcc:	f001 f96e 	bl	10050ac <sym_67HOWE745NQD34KTUUWSRFXD4DO3FU3W2QV4K7Q>
 1003dd0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 1003dd4:	b140      	cbz	r0, 1003de8 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x40>
 1003dd6:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 1003dda:	2201      	movs	r2, #1
 1003ddc:	2000      	movs	r0, #0
 1003dde:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1003de2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 1003de6:	601a      	str	r2, [r3, #0]
 1003de8:	bd38      	pop	{r3, r4, r5, pc}
 1003dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1003dee:	e7fb      	b.n	1003de8 <sym_PFBP66SOH33NX25DTYRGB2MOGSYRPS2RW24VEWA+0x40>
 1003df0:	21000ae4 	.word	0x21000ae4

01003df4 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY>:
 1003df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1003df8:	4770      	bx	lr
	...

01003dfc <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY>:
 1003dfc:	b570      	push	{r4, r5, r6, lr}
 1003dfe:	460c      	mov	r4, r1
 1003e00:	4605      	mov	r5, r0
 1003e02:	b188      	cbz	r0, 1003e28 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x2c>
 1003e04:	7803      	ldrb	r3, [r0, #0]
 1003e06:	b123      	cbz	r3, 1003e12 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x16>
 1003e08:	2b01      	cmp	r3, #1
 1003e0a:	d01c      	beq.n	1003e46 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x4a>
 1003e0c:	f06f 0015 	mvn.w	r0, #21
 1003e10:	e018      	b.n	1003e44 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003e12:	491f      	ldr	r1, [pc, #124]	; (1003e90 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003e14:	690b      	ldr	r3, [r1, #16]
 1003e16:	f891 2047 	ldrb.w	r2, [r1, #71]	; 0x47
 1003e1a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 1003e1e:	f000 fe53 	bl	1004ac8 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ>
 1003e22:	b978      	cbnz	r0, 1003e44 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003e24:	4b1a      	ldr	r3, [pc, #104]	; (1003e90 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003e26:	601d      	str	r5, [r3, #0]
 1003e28:	b37c      	cbz	r4, 1003e8a <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x8e>
 1003e2a:	7823      	ldrb	r3, [r4, #0]
 1003e2c:	2b01      	cmp	r3, #1
 1003e2e:	d1ed      	bne.n	1003e0c <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x10>
 1003e30:	4d17      	ldr	r5, [pc, #92]	; (1003e90 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003e32:	4620      	mov	r0, r4
 1003e34:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
 1003e38:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 1003e3c:	f000 fdae 	bl	100499c <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI>
 1003e40:	b900      	cbnz	r0, 1003e44 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003e42:	606c      	str	r4, [r5, #4]
 1003e44:	bd70      	pop	{r4, r5, r6, pc}
 1003e46:	4a12      	ldr	r2, [pc, #72]	; (1003e90 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003e48:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 1003e4c:	b1d1      	cbz	r1, 1003e84 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x88>
 1003e4e:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
 1003e52:	4810      	ldr	r0, [pc, #64]	; (1003e94 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x98>)
 1003e54:	0089      	lsls	r1, r1, #2
 1003e56:	b2ce      	uxtb	r6, r1
 1003e58:	4430      	add	r0, r6
 1003e5a:	792e      	ldrb	r6, [r5, #4]
 1003e5c:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 1003e60:	6006      	str	r6, [r0, #0]
 1003e62:	480d      	ldr	r0, [pc, #52]	; (1003e98 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x9c>)
 1003e64:	f892 603e 	ldrb.w	r6, [r2, #62]	; 0x3e
 1003e68:	4408      	add	r0, r1
 1003e6a:	f046 4100 	orr.w	r1, r6, #2147483648	; 0x80000000
 1003e6e:	40b3      	lsls	r3, r6
 1003e70:	6001      	str	r1, [r0, #0]
 1003e72:	f892 0047 	ldrb.w	r0, [r2, #71]	; 0x47
 1003e76:	4a09      	ldr	r2, [pc, #36]	; (1003e9c <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xa0>)
 1003e78:	5011      	str	r1, [r2, r0]
 1003e7a:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 1003e7e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
 1003e82:	e7cf      	b.n	1003e24 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x28>
 1003e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1003e88:	e7dc      	b.n	1003e44 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003e8a:	4620      	mov	r0, r4
 1003e8c:	e7da      	b.n	1003e44 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003e8e:	bf00      	nop
 1003e90:	21000a10 	.word	0x21000a10
 1003e94:	41014080 	.word	0x41014080
 1003e98:	41014180 	.word	0x41014180
 1003e9c:	4100a080 	.word	0x4100a080

01003ea0 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY>:
 1003ea0:	b570      	push	{r4, r5, r6, lr}
 1003ea2:	460c      	mov	r4, r1
 1003ea4:	4605      	mov	r5, r0
 1003ea6:	b188      	cbz	r0, 1003ecc <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x2c>
 1003ea8:	7803      	ldrb	r3, [r0, #0]
 1003eaa:	b123      	cbz	r3, 1003eb6 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x16>
 1003eac:	2b01      	cmp	r3, #1
 1003eae:	d01f      	beq.n	1003ef0 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x50>
 1003eb0:	f06f 0015 	mvn.w	r0, #21
 1003eb4:	e01b      	b.n	1003eee <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x4e>
 1003eb6:	491f      	ldr	r1, [pc, #124]	; (1003f34 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003eb8:	688b      	ldr	r3, [r1, #8]
 1003eba:	f891 2067 	ldrb.w	r2, [r1, #103]	; 0x67
 1003ebe:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 1003ec2:	f000 fe2f 	bl	1004b24 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ>
 1003ec6:	b990      	cbnz	r0, 1003eee <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x4e>
 1003ec8:	4b1a      	ldr	r3, [pc, #104]	; (1003f34 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003eca:	601d      	str	r5, [r3, #0]
 1003ecc:	b164      	cbz	r4, 1003ee8 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003ece:	7823      	ldrb	r3, [r4, #0]
 1003ed0:	2b01      	cmp	r3, #1
 1003ed2:	d1ed      	bne.n	1003eb0 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x10>
 1003ed4:	4d17      	ldr	r5, [pc, #92]	; (1003f34 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003ed6:	4620      	mov	r0, r4
 1003ed8:	f895 2066 	ldrb.w	r2, [r5, #102]	; 0x66
 1003edc:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 1003ee0:	f000 fd8e 	bl	1004a00 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI>
 1003ee4:	b918      	cbnz	r0, 1003eee <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x4e>
 1003ee6:	66ec      	str	r4, [r5, #108]	; 0x6c
 1003ee8:	f000 ffbc 	bl	1004e64 <sym_O5XDVUVJVGI67OXYHXFZUGAXHD4DKFKVMS2P3NA>
 1003eec:	2000      	movs	r0, #0
 1003eee:	bd70      	pop	{r4, r5, r6, pc}
 1003ef0:	4a10      	ldr	r2, [pc, #64]	; (1003f34 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003ef2:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 1003ef6:	b1d1      	cbz	r1, 1003f2e <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x8e>
 1003ef8:	f892 1063 	ldrb.w	r1, [r2, #99]	; 0x63
 1003efc:	480e      	ldr	r0, [pc, #56]	; (1003f38 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x98>)
 1003efe:	0089      	lsls	r1, r1, #2
 1003f00:	b2ce      	uxtb	r6, r1
 1003f02:	4430      	add	r0, r6
 1003f04:	792e      	ldrb	r6, [r5, #4]
 1003f06:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 1003f0a:	6006      	str	r6, [r0, #0]
 1003f0c:	480b      	ldr	r0, [pc, #44]	; (1003f3c <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x9c>)
 1003f0e:	f892 605f 	ldrb.w	r6, [r2, #95]	; 0x5f
 1003f12:	4408      	add	r0, r1
 1003f14:	f046 4100 	orr.w	r1, r6, #2147483648	; 0x80000000
 1003f18:	40b3      	lsls	r3, r6
 1003f1a:	6001      	str	r1, [r0, #0]
 1003f1c:	f892 0067 	ldrb.w	r0, [r2, #103]	; 0x67
 1003f20:	4a07      	ldr	r2, [pc, #28]	; (1003f40 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xa0>)
 1003f22:	5011      	str	r1, [r2, r0]
 1003f24:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 1003f28:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
 1003f2c:	e7cc      	b.n	1003ec8 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x28>
 1003f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1003f32:	e7dc      	b.n	1003eee <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x4e>
 1003f34:	21000a5c 	.word	0x21000a5c
 1003f38:	41014080 	.word	0x41014080
 1003f3c:	41014180 	.word	0x41014180
 1003f40:	4100a080 	.word	0x4100a080

01003f44 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY>:
 1003f44:	b570      	push	{r4, r5, r6, lr}
 1003f46:	460c      	mov	r4, r1
 1003f48:	4605      	mov	r5, r0
 1003f4a:	b180      	cbz	r0, 1003f6e <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x2a>
 1003f4c:	7803      	ldrb	r3, [r0, #0]
 1003f4e:	b123      	cbz	r3, 1003f5a <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x16>
 1003f50:	2b01      	cmp	r3, #1
 1003f52:	d01c      	beq.n	1003f8e <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x4a>
 1003f54:	f06f 0015 	mvn.w	r0, #21
 1003f58:	e018      	b.n	1003f8c <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003f5a:	491f      	ldr	r1, [pc, #124]	; (1003fd8 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003f5c:	688b      	ldr	r3, [r1, #8]
 1003f5e:	311c      	adds	r1, #28
 1003f60:	f891 207f 	ldrb.w	r2, [r1, #127]	; 0x7f
 1003f64:	f000 ffdc 	bl	1004f20 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A>
 1003f68:	b980      	cbnz	r0, 1003f8c <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003f6a:	4b1b      	ldr	r3, [pc, #108]	; (1003fd8 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003f6c:	601d      	str	r5, [r3, #0]
 1003f6e:	b384      	cbz	r4, 1003fd2 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x8e>
 1003f70:	7823      	ldrb	r3, [r4, #0]
 1003f72:	2b01      	cmp	r3, #1
 1003f74:	d1ee      	bne.n	1003f54 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x10>
 1003f76:	4d18      	ldr	r5, [pc, #96]	; (1003fd8 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003f78:	4620      	mov	r0, r4
 1003f7a:	f895 209a 	ldrb.w	r2, [r5, #154]	; 0x9a
 1003f7e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 1003f82:	f000 fd6f 	bl	1004a64 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI>
 1003f86:	b908      	cbnz	r0, 1003f8c <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003f88:	f8c5 40a4 	str.w	r4, [r5, #164]	; 0xa4
 1003f8c:	bd70      	pop	{r4, r5, r6, pc}
 1003f8e:	4a12      	ldr	r2, [pc, #72]	; (1003fd8 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x94>)
 1003f90:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 1003f94:	b1d1      	cbz	r1, 1003fcc <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x88>
 1003f96:	f892 1091 	ldrb.w	r1, [r2, #145]	; 0x91
 1003f9a:	4810      	ldr	r0, [pc, #64]	; (1003fdc <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x98>)
 1003f9c:	0089      	lsls	r1, r1, #2
 1003f9e:	b2ce      	uxtb	r6, r1
 1003fa0:	4430      	add	r0, r6
 1003fa2:	792e      	ldrb	r6, [r5, #4]
 1003fa4:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 1003fa8:	6006      	str	r6, [r0, #0]
 1003faa:	480d      	ldr	r0, [pc, #52]	; (1003fe0 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x9c>)
 1003fac:	f892 608b 	ldrb.w	r6, [r2, #139]	; 0x8b
 1003fb0:	4408      	add	r0, r1
 1003fb2:	f046 4100 	orr.w	r1, r6, #2147483648	; 0x80000000
 1003fb6:	40b3      	lsls	r3, r6
 1003fb8:	6001      	str	r1, [r0, #0]
 1003fba:	f892 009b 	ldrb.w	r0, [r2, #155]	; 0x9b
 1003fbe:	4a09      	ldr	r2, [pc, #36]	; (1003fe4 <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0xa0>)
 1003fc0:	5011      	str	r1, [r2, r0]
 1003fc2:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 1003fc6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
 1003fca:	e7ce      	b.n	1003f6a <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x26>
 1003fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1003fd0:	e7dc      	b.n	1003f8c <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003fd2:	4620      	mov	r0, r4
 1003fd4:	e7da      	b.n	1003f8c <sym_YJZ53CFQ64LMZYYKKRAGRSELPB3HMMAO7BGK6AY+0x48>
 1003fd6:	bf00      	nop
 1003fd8:	21000ae4 	.word	0x21000ae4
 1003fdc:	41014080 	.word	0x41014080
 1003fe0:	41014180 	.word	0x41014180
 1003fe4:	4100a080 	.word	0x4100a080

01003fe8 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI>:
 1003fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1003fec:	4770      	bx	lr
	...

01003ff0 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI>:
 1003ff0:	b510      	push	{r4, lr}
 1003ff2:	4c20      	ldr	r4, [pc, #128]	; (1004074 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x84>)
 1003ff4:	6820      	ldr	r0, [r4, #0]
 1003ff6:	b188      	cbz	r0, 100401c <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x2c>
 1003ff8:	7803      	ldrb	r3, [r0, #0]
 1003ffa:	b133      	cbz	r3, 100400a <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x1a>
 1003ffc:	2b01      	cmp	r3, #1
 1003ffe:	d01c      	beq.n	100403a <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x4a>
 1004000:	f240 214d 	movw	r1, #589	; 0x24d
 1004004:	2072      	movs	r0, #114	; 0x72
 1004006:	f7ff fb0d 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100400a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 100400e:	b11b      	cbz	r3, 1004018 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x28>
 1004010:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 1004014:	f000 fc48 	bl	10048a8 <sym_XFGFOLFQFKO7HHVOFRL5ZXJ6QCBLP5B2PABYEQI>
 1004018:	2300      	movs	r3, #0
 100401a:	6023      	str	r3, [r4, #0]
 100401c:	6863      	ldr	r3, [r4, #4]
 100401e:	b153      	cbz	r3, 1004036 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x46>
 1004020:	781b      	ldrb	r3, [r3, #0]
 1004022:	2b01      	cmp	r3, #1
 1004024:	d122      	bne.n	100406c <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x7c>
 1004026:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 100402a:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 100402e:	f000 fc5b 	bl	10048e8 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A>
 1004032:	2300      	movs	r3, #0
 1004034:	6063      	str	r3, [r4, #4]
 1004036:	2000      	movs	r0, #0
 1004038:	bd10      	pop	{r4, pc}
 100403a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 100403e:	2a00      	cmp	r2, #0
 1004040:	d0ea      	beq.n	1004018 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x28>
 1004042:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 1004046:	2100      	movs	r1, #0
 1004048:	4093      	lsls	r3, r2
 100404a:	4a0b      	ldr	r2, [pc, #44]	; (1004078 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x88>)
 100404c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 1004050:	4b0a      	ldr	r3, [pc, #40]	; (100407c <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x8c>)
 1004052:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 1004056:	5099      	str	r1, [r3, r2]
 1004058:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 100405c:	4a08      	ldr	r2, [pc, #32]	; (1004080 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x90>)
 100405e:	009b      	lsls	r3, r3, #2
 1004060:	50d1      	str	r1, [r2, r3]
 1004062:	b2db      	uxtb	r3, r3
 1004064:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 1004068:	50d1      	str	r1, [r2, r3]
 100406a:	e7d5      	b.n	1004018 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x28>
 100406c:	f44f 7117 	mov.w	r1, #604	; 0x25c
 1004070:	e7c8      	b.n	1004004 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x14>
 1004072:	bf00      	nop
 1004074:	21000a10 	.word	0x21000a10
 1004078:	4100f000 	.word	0x4100f000
 100407c:	4100a080 	.word	0x4100a080
 1004080:	41014180 	.word	0x41014180

01004084 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI>:
 1004084:	b510      	push	{r4, lr}
 1004086:	4c1f      	ldr	r4, [pc, #124]	; (1004104 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x80>)
 1004088:	6820      	ldr	r0, [r4, #0]
 100408a:	b180      	cbz	r0, 10040ae <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x2a>
 100408c:	7803      	ldrb	r3, [r0, #0]
 100408e:	b133      	cbz	r3, 100409e <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x1a>
 1004090:	2b01      	cmp	r3, #1
 1004092:	d01b      	beq.n	10040cc <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x48>
 1004094:	f240 2181 	movw	r1, #641	; 0x281
 1004098:	2071      	movs	r0, #113	; 0x71
 100409a:	f7ff fac3 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100409e:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
 10040a2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 10040a6:	f000 fd97 	bl	1004bd8 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA>
 10040aa:	2300      	movs	r3, #0
 10040ac:	6023      	str	r3, [r4, #0]
 10040ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 10040b0:	b153      	cbz	r3, 10040c8 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x44>
 10040b2:	781b      	ldrb	r3, [r3, #0]
 10040b4:	2b01      	cmp	r3, #1
 10040b6:	d122      	bne.n	10040fe <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x7a>
 10040b8:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
 10040bc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 10040c0:	f000 fc30 	bl	1004924 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A>
 10040c4:	2300      	movs	r3, #0
 10040c6:	66e3      	str	r3, [r4, #108]	; 0x6c
 10040c8:	2000      	movs	r0, #0
 10040ca:	bd10      	pop	{r4, pc}
 10040cc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 10040d0:	2a00      	cmp	r2, #0
 10040d2:	d0ea      	beq.n	10040aa <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x26>
 10040d4:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 10040d8:	2100      	movs	r1, #0
 10040da:	4093      	lsls	r3, r2
 10040dc:	4a0a      	ldr	r2, [pc, #40]	; (1004108 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x84>)
 10040de:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 10040e2:	4b0a      	ldr	r3, [pc, #40]	; (100410c <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x88>)
 10040e4:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
 10040e8:	5099      	str	r1, [r3, r2]
 10040ea:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
 10040ee:	4a08      	ldr	r2, [pc, #32]	; (1004110 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x8c>)
 10040f0:	009b      	lsls	r3, r3, #2
 10040f2:	50d1      	str	r1, [r2, r3]
 10040f4:	b2db      	uxtb	r3, r3
 10040f6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 10040fa:	50d1      	str	r1, [r2, r3]
 10040fc:	e7d5      	b.n	10040aa <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x26>
 10040fe:	f44f 7124 	mov.w	r1, #656	; 0x290
 1004102:	e7c9      	b.n	1004098 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x14>
 1004104:	21000a5c 	.word	0x21000a5c
 1004108:	4100f000 	.word	0x4100f000
 100410c:	4100a080 	.word	0x4100a080
 1004110:	41014180 	.word	0x41014180

01004114 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI>:
 1004114:	b510      	push	{r4, lr}
 1004116:	4c20      	ldr	r4, [pc, #128]	; (1004198 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x84>)
 1004118:	6820      	ldr	r0, [r4, #0]
 100411a:	b180      	cbz	r0, 100413e <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x2a>
 100411c:	7803      	ldrb	r3, [r0, #0]
 100411e:	b133      	cbz	r3, 100412e <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x1a>
 1004120:	2b01      	cmp	r3, #1
 1004122:	d01d      	beq.n	1004160 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x4c>
 1004124:	f240 311f 	movw	r1, #799	; 0x31f
 1004128:	2076      	movs	r0, #118	; 0x76
 100412a:	f7ff fa7b 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100412e:	f894 209b 	ldrb.w	r2, [r4, #155]	; 0x9b
 1004132:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 1004136:	f000 fd8d 	bl	1004c54 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA>
 100413a:	2300      	movs	r3, #0
 100413c:	6023      	str	r3, [r4, #0]
 100413e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 1004142:	b15b      	cbz	r3, 100415c <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x48>
 1004144:	781b      	ldrb	r3, [r3, #0]
 1004146:	2b01      	cmp	r3, #1
 1004148:	d123      	bne.n	1004192 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x7e>
 100414a:	f894 109a 	ldrb.w	r1, [r4, #154]	; 0x9a
 100414e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 1004152:	f000 fc05 	bl	1004960 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A>
 1004156:	2300      	movs	r3, #0
 1004158:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 100415c:	2000      	movs	r0, #0
 100415e:	bd10      	pop	{r4, pc}
 1004160:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 1004164:	2a00      	cmp	r2, #0
 1004166:	d0e8      	beq.n	100413a <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x26>
 1004168:	f894 208b 	ldrb.w	r2, [r4, #139]	; 0x8b
 100416c:	2100      	movs	r1, #0
 100416e:	4093      	lsls	r3, r2
 1004170:	4a0a      	ldr	r2, [pc, #40]	; (100419c <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x88>)
 1004172:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 1004176:	4b0a      	ldr	r3, [pc, #40]	; (10041a0 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x8c>)
 1004178:	f894 209b 	ldrb.w	r2, [r4, #155]	; 0x9b
 100417c:	5099      	str	r1, [r3, r2]
 100417e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 1004182:	4a08      	ldr	r2, [pc, #32]	; (10041a4 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x90>)
 1004184:	009b      	lsls	r3, r3, #2
 1004186:	50d1      	str	r1, [r2, r3]
 1004188:	b2db      	uxtb	r3, r3
 100418a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 100418e:	50d1      	str	r1, [r2, r3]
 1004190:	e7d3      	b.n	100413a <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x26>
 1004192:	f240 312e 	movw	r1, #814	; 0x32e
 1004196:	e7c7      	b.n	1004128 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI+0x14>
 1004198:	21000ae4 	.word	0x21000ae4
 100419c:	4100f000 	.word	0x4100f000
 10041a0:	4100a080 	.word	0x4100a080
 10041a4:	41014180 	.word	0x41014180

010041a8 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y>:
 10041a8:	4770      	bx	lr
	...

010041ac <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y>:
 10041ac:	4a0d      	ldr	r2, [pc, #52]	; (10041e4 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x38>)
 10041ae:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 10041b2:	b14b      	cbz	r3, 10041c8 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x1c>
 10041b4:	07c1      	lsls	r1, r0, #31
 10041b6:	d507      	bpl.n	10041c8 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x1c>
 10041b8:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 10041bc:	2101      	movs	r1, #1
 10041be:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 10041c2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 10041c6:	6019      	str	r1, [r3, #0]
 10041c8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 10041cc:	b14b      	cbz	r3, 10041e2 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x36>
 10041ce:	0783      	lsls	r3, r0, #30
 10041d0:	d507      	bpl.n	10041e2 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x36>
 10041d2:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
 10041d6:	2201      	movs	r2, #1
 10041d8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 10041dc:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 10041e0:	601a      	str	r2, [r3, #0]
 10041e2:	4770      	bx	lr
 10041e4:	21000a10 	.word	0x21000a10

010041e8 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y>:
 10041e8:	4a0d      	ldr	r2, [pc, #52]	; (1004220 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x38>)
 10041ea:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 10041ee:	b14b      	cbz	r3, 1004204 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x1c>
 10041f0:	07c1      	lsls	r1, r0, #31
 10041f2:	d507      	bpl.n	1004204 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x1c>
 10041f4:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 10041f8:	2101      	movs	r1, #1
 10041fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 10041fe:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 1004202:	6019      	str	r1, [r3, #0]
 1004204:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 1004208:	b14b      	cbz	r3, 100421e <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x36>
 100420a:	0783      	lsls	r3, r0, #30
 100420c:	d507      	bpl.n	100421e <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x36>
 100420e:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 1004212:	2201      	movs	r2, #1
 1004214:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1004218:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 100421c:	601a      	str	r2, [r3, #0]
 100421e:	4770      	bx	lr
 1004220:	21000a5c 	.word	0x21000a5c

01004224 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y>:
 1004224:	4a0d      	ldr	r2, [pc, #52]	; (100425c <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x38>)
 1004226:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 100422a:	b14b      	cbz	r3, 1004240 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x1c>
 100422c:	07c1      	lsls	r1, r0, #31
 100422e:	d507      	bpl.n	1004240 <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x1c>
 1004230:	f892 309a 	ldrb.w	r3, [r2, #154]	; 0x9a
 1004234:	2101      	movs	r1, #1
 1004236:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 100423a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 100423e:	6019      	str	r1, [r3, #0]
 1004240:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 1004244:	b14b      	cbz	r3, 100425a <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x36>
 1004246:	0783      	lsls	r3, r0, #30
 1004248:	d507      	bpl.n	100425a <sym_2JD2SSRR6FXTTNV2W4NZRHZDSP7D2SDABDZTI6Y+0x36>
 100424a:	f892 3098 	ldrb.w	r3, [r2, #152]	; 0x98
 100424e:	2201      	movs	r2, #1
 1004250:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1004254:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 1004258:	601a      	str	r2, [r3, #0]
 100425a:	4770      	bx	lr
 100425c:	21000ae4 	.word	0x21000ae4

01004260 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI>:
 1004260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004264:	4770      	bx	lr
	...

01004268 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI>:
 1004268:	4b19      	ldr	r3, [pc, #100]	; (10042d0 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x68>)
 100426a:	681a      	ldr	r2, [r3, #0]
 100426c:	b530      	push	{r4, r5, lr}
 100426e:	bb62      	cbnz	r2, 10042ca <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x62>
 1004270:	689a      	ldr	r2, [r3, #8]
 1004272:	bb52      	cbnz	r2, 10042ca <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x62>
 1004274:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 1004278:	b1ca      	cbz	r2, 10042ae <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x46>
 100427a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 100427e:	4915      	ldr	r1, [pc, #84]	; (10042d4 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x6c>)
 1004280:	0092      	lsls	r2, r2, #2
 1004282:	f893 5044 	ldrb.w	r5, [r3, #68]	; 0x44
 1004286:	b2d4      	uxtb	r4, r2
 1004288:	4421      	add	r1, r4
 100428a:	f040 4400 	orr.w	r4, r0, #2147483648	; 0x80000000
 100428e:	600c      	str	r4, [r1, #0]
 1004290:	4911      	ldr	r1, [pc, #68]	; (10042d8 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x70>)
 1004292:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 1004296:	4411      	add	r1, r2
 1004298:	f044 4200 	orr.w	r2, r4, #2147483648	; 0x80000000
 100429c:	600a      	str	r2, [r1, #0]
 100429e:	490f      	ldr	r1, [pc, #60]	; (10042dc <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x74>)
 10042a0:	514a      	str	r2, [r1, r5]
 10042a2:	2201      	movs	r2, #1
 10042a4:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 10042a8:	40a2      	lsls	r2, r4
 10042aa:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
 10042ae:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 10042b2:	b12a      	cbz	r2, 10042c0 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x58>
 10042b4:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 10042b8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 10042bc:	4a07      	ldr	r2, [pc, #28]	; (10042dc <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x74>)
 10042be:	5050      	str	r0, [r2, r1]
 10042c0:	2201      	movs	r2, #1
 10042c2:	2000      	movs	r0, #0
 10042c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 10042c8:	bd30      	pop	{r4, r5, pc}
 10042ca:	f06f 0015 	mvn.w	r0, #21
 10042ce:	e7fb      	b.n	10042c8 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x60>
 10042d0:	21000a10 	.word	0x21000a10
 10042d4:	41014080 	.word	0x41014080
 10042d8:	41014180 	.word	0x41014180
 10042dc:	4100a080 	.word	0x4100a080

010042e0 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI>:
 10042e0:	4b19      	ldr	r3, [pc, #100]	; (1004348 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x68>)
 10042e2:	681a      	ldr	r2, [r3, #0]
 10042e4:	b530      	push	{r4, r5, lr}
 10042e6:	bb62      	cbnz	r2, 1004342 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x62>
 10042e8:	685a      	ldr	r2, [r3, #4]
 10042ea:	bb52      	cbnz	r2, 1004342 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x62>
 10042ec:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 10042f0:	b1ca      	cbz	r2, 1004326 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x46>
 10042f2:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 10042f6:	4915      	ldr	r1, [pc, #84]	; (100434c <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x6c>)
 10042f8:	0092      	lsls	r2, r2, #2
 10042fa:	f893 5064 	ldrb.w	r5, [r3, #100]	; 0x64
 10042fe:	b2d4      	uxtb	r4, r2
 1004300:	4421      	add	r1, r4
 1004302:	f040 4400 	orr.w	r4, r0, #2147483648	; 0x80000000
 1004306:	600c      	str	r4, [r1, #0]
 1004308:	4911      	ldr	r1, [pc, #68]	; (1004350 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x70>)
 100430a:	f893 405e 	ldrb.w	r4, [r3, #94]	; 0x5e
 100430e:	4411      	add	r1, r2
 1004310:	f044 4200 	orr.w	r2, r4, #2147483648	; 0x80000000
 1004314:	600a      	str	r2, [r1, #0]
 1004316:	490f      	ldr	r1, [pc, #60]	; (1004354 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x74>)
 1004318:	514a      	str	r2, [r1, r5]
 100431a:	2201      	movs	r2, #1
 100431c:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 1004320:	40a2      	lsls	r2, r4
 1004322:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
 1004326:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 100432a:	b12a      	cbz	r2, 1004338 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x58>
 100432c:	f893 1066 	ldrb.w	r1, [r3, #102]	; 0x66
 1004330:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 1004334:	4a07      	ldr	r2, [pc, #28]	; (1004354 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x74>)
 1004336:	5050      	str	r0, [r2, r1]
 1004338:	2201      	movs	r2, #1
 100433a:	2000      	movs	r0, #0
 100433c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 1004340:	bd30      	pop	{r4, r5, pc}
 1004342:	f06f 0015 	mvn.w	r0, #21
 1004346:	e7fb      	b.n	1004340 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x60>
 1004348:	21000a5c 	.word	0x21000a5c
 100434c:	41014080 	.word	0x41014080
 1004350:	41014180 	.word	0x41014180
 1004354:	4100a080 	.word	0x4100a080

01004358 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI>:
 1004358:	4b19      	ldr	r3, [pc, #100]	; (10043c0 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x68>)
 100435a:	681a      	ldr	r2, [r3, #0]
 100435c:	b530      	push	{r4, r5, lr}
 100435e:	bb62      	cbnz	r2, 10043ba <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x62>
 1004360:	685a      	ldr	r2, [r3, #4]
 1004362:	bb52      	cbnz	r2, 10043ba <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x62>
 1004364:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 1004368:	b1ca      	cbz	r2, 100439e <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x46>
 100436a:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 100436e:	4915      	ldr	r1, [pc, #84]	; (10043c4 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x6c>)
 1004370:	0092      	lsls	r2, r2, #2
 1004372:	f893 5098 	ldrb.w	r5, [r3, #152]	; 0x98
 1004376:	b2d4      	uxtb	r4, r2
 1004378:	4421      	add	r1, r4
 100437a:	f040 4400 	orr.w	r4, r0, #2147483648	; 0x80000000
 100437e:	600c      	str	r4, [r1, #0]
 1004380:	4911      	ldr	r1, [pc, #68]	; (10043c8 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x70>)
 1004382:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
 1004386:	4411      	add	r1, r2
 1004388:	f044 4200 	orr.w	r2, r4, #2147483648	; 0x80000000
 100438c:	600a      	str	r2, [r1, #0]
 100438e:	490f      	ldr	r1, [pc, #60]	; (10043cc <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x74>)
 1004390:	514a      	str	r2, [r1, r5]
 1004392:	2201      	movs	r2, #1
 1004394:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 1004398:	40a2      	lsls	r2, r4
 100439a:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
 100439e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 10043a2:	b12a      	cbz	r2, 10043b0 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x58>
 10043a4:	f893 109a 	ldrb.w	r1, [r3, #154]	; 0x9a
 10043a8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 10043ac:	4a07      	ldr	r2, [pc, #28]	; (10043cc <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x74>)
 10043ae:	5050      	str	r0, [r2, r1]
 10043b0:	2201      	movs	r2, #1
 10043b2:	2000      	movs	r0, #0
 10043b4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 10043b8:	bd30      	pop	{r4, r5, pc}
 10043ba:	f06f 0015 	mvn.w	r0, #21
 10043be:	e7fb      	b.n	10043b8 <sym_XBHWI3EC4W5ANYLZDZGKLDJ4542XFWQ2DFVR4VI+0x60>
 10043c0:	21000ae4 	.word	0x21000ae4
 10043c4:	41014080 	.word	0x41014080
 10043c8:	41014180 	.word	0x41014180
 10043cc:	4100a080 	.word	0x4100a080

010043d0 <sym_MGBAVMTFUXGOXBASNOCH5N22OLEMURQBXUGDK2Y>:
 10043d0:	f990 3000 	ldrsb.w	r3, [r0]
 10043d4:	2b00      	cmp	r3, #0
 10043d6:	bf14      	ite	ne
 10043d8:	f06f 0015 	mvnne.w	r0, #21
 10043dc:	2000      	moveq	r0, #0
 10043de:	4770      	bx	lr

010043e0 <sym_MGBAVMTFUXGOXBASNOCH5N22OLEMURQBXUGDK2Y>:
 10043e0:	4601      	mov	r1, r0
 10043e2:	4801      	ldr	r0, [pc, #4]	; (10043e8 <sym_MGBAVMTFUXGOXBASNOCH5N22OLEMURQBXUGDK2Y+0x8>)
 10043e4:	f001 b9a4 	b.w	1005730 <sym_R3CY5O5PWFOP6PPHA2W2A2Q2GG2C3KWHG5ABJVI>
 10043e8:	21000a20 	.word	0x21000a20

010043ec <sym_MCY6KSZDKIODKRDGT3TNBF3YUVAZZIY3PNW33QI>:
 10043ec:	2300      	movs	r3, #0
 10043ee:	7003      	strb	r3, [r0, #0]
 10043f0:	4770      	bx	lr
	...

010043f4 <sym_MCY6KSZDKIODKRDGT3TNBF3YUVAZZIY3PNW33QI>:
 10043f4:	4601      	mov	r1, r0
 10043f6:	4801      	ldr	r0, [pc, #4]	; (10043fc <sym_MCY6KSZDKIODKRDGT3TNBF3YUVAZZIY3PNW33QI+0x8>)
 10043f8:	f001 b994 	b.w	1005724 <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY>
 10043fc:	21000a20 	.word	0x21000a20

01004400 <sym_MK6GI3KMUL2J372X7O4WNBUQVRDY34OZVASFG7Q>:
 1004400:	2200      	movs	r2, #0
 1004402:	f001 b935 	b.w	1005670 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>
	...

01004408 <sym_MK6GI3KMUL2J372X7O4WNBUQVRDY34OZVASFG7Q>:
 1004408:	b507      	push	{r0, r1, r2, lr}
 100440a:	9300      	str	r3, [sp, #0]
 100440c:	4613      	mov	r3, r2
 100440e:	460a      	mov	r2, r1
 1004410:	4601      	mov	r1, r0
 1004412:	4803      	ldr	r0, [pc, #12]	; (1004420 <sym_MK6GI3KMUL2J372X7O4WNBUQVRDY34OZVASFG7Q+0x18>)
 1004414:	f001 f9a5 	bl	1005762 <sym_NSB5Z4D72O5VWEUXZVDQIBPNQ5UV64KEO7NVTOQ>
 1004418:	b003      	add	sp, #12
 100441a:	f85d fb04 	ldr.w	pc, [sp], #4
 100441e:	bf00      	nop
 1004420:	21000a20 	.word	0x21000a20

01004424 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA>:
 1004424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004428:	4770      	bx	lr
	...

0100442c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA>:
 100442c:	b570      	push	{r4, r5, r6, lr}
 100442e:	460c      	mov	r4, r1
 1004430:	4605      	mov	r5, r0
 1004432:	b178      	cbz	r0, 1004454 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x28>
 1004434:	7803      	ldrb	r3, [r0, #0]
 1004436:	b113      	cbz	r3, 100443e <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x12>
 1004438:	f06f 0015 	mvn.w	r0, #21
 100443c:	bd70      	pop	{r4, r5, r6, pc}
 100443e:	4e0e      	ldr	r6, [pc, #56]	; (1004478 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x4c>)
 1004440:	6973      	ldr	r3, [r6, #20]
 1004442:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
 1004446:	f896 1038 	ldrb.w	r1, [r6, #56]	; 0x38
 100444a:	f000 fb3d 	bl	1004ac8 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ>
 100444e:	2800      	cmp	r0, #0
 1004450:	d1f4      	bne.n	100443c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 1004452:	60b5      	str	r5, [r6, #8]
 1004454:	b174      	cbz	r4, 1004474 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x48>
 1004456:	7823      	ldrb	r3, [r4, #0]
 1004458:	2b01      	cmp	r3, #1
 100445a:	d1ed      	bne.n	1004438 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0xc>
 100445c:	4d06      	ldr	r5, [pc, #24]	; (1004478 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x4c>)
 100445e:	4620      	mov	r0, r4
 1004460:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 1004464:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
 1004468:	f000 fa98 	bl	100499c <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI>
 100446c:	2800      	cmp	r0, #0
 100446e:	d1e5      	bne.n	100443c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 1004470:	60ec      	str	r4, [r5, #12]
 1004472:	e7e3      	b.n	100443c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 1004474:	4620      	mov	r0, r4
 1004476:	e7e1      	b.n	100443c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 1004478:	21000a10 	.word	0x21000a10

0100447c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA>:
 100447c:	b570      	push	{r4, r5, r6, lr}
 100447e:	460c      	mov	r4, r1
 1004480:	4605      	mov	r5, r0
 1004482:	b178      	cbz	r0, 10044a4 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x28>
 1004484:	7803      	ldrb	r3, [r0, #0]
 1004486:	b113      	cbz	r3, 100448e <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x12>
 1004488:	f06f 0015 	mvn.w	r0, #21
 100448c:	bd70      	pop	{r4, r5, r6, pc}
 100448e:	4e0e      	ldr	r6, [pc, #56]	; (10044c8 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x4c>)
 1004490:	68f3      	ldr	r3, [r6, #12]
 1004492:	f896 2065 	ldrb.w	r2, [r6, #101]	; 0x65
 1004496:	f896 1038 	ldrb.w	r1, [r6, #56]	; 0x38
 100449a:	f000 fb43 	bl	1004b24 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ>
 100449e:	2800      	cmp	r0, #0
 10044a0:	d1f4      	bne.n	100448c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 10044a2:	6075      	str	r5, [r6, #4]
 10044a4:	b174      	cbz	r4, 10044c4 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x48>
 10044a6:	7823      	ldrb	r3, [r4, #0]
 10044a8:	2b01      	cmp	r3, #1
 10044aa:	d1ed      	bne.n	1004488 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0xc>
 10044ac:	4d06      	ldr	r5, [pc, #24]	; (10044c8 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x4c>)
 10044ae:	4620      	mov	r0, r4
 10044b0:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
 10044b4:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
 10044b8:	f000 faa2 	bl	1004a00 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI>
 10044bc:	2800      	cmp	r0, #0
 10044be:	d1e5      	bne.n	100448c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 10044c0:	672c      	str	r4, [r5, #112]	; 0x70
 10044c2:	e7e3      	b.n	100448c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 10044c4:	4620      	mov	r0, r4
 10044c6:	e7e1      	b.n	100448c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 10044c8:	21000a5c 	.word	0x21000a5c

010044cc <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA>:
 10044cc:	b570      	push	{r4, r5, r6, lr}
 10044ce:	460c      	mov	r4, r1
 10044d0:	4605      	mov	r5, r0
 10044d2:	b178      	cbz	r0, 10044f4 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x28>
 10044d4:	7803      	ldrb	r3, [r0, #0]
 10044d6:	b113      	cbz	r3, 10044de <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x12>
 10044d8:	f06f 0015 	mvn.w	r0, #21
 10044dc:	bd70      	pop	{r4, r5, r6, pc}
 10044de:	4e0f      	ldr	r6, [pc, #60]	; (100451c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x50>)
 10044e0:	68f3      	ldr	r3, [r6, #12]
 10044e2:	f106 012c 	add.w	r1, r6, #44	; 0x2c
 10044e6:	f896 2099 	ldrb.w	r2, [r6, #153]	; 0x99
 10044ea:	f000 fd19 	bl	1004f20 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A>
 10044ee:	2800      	cmp	r0, #0
 10044f0:	d1f4      	bne.n	10044dc <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 10044f2:	6075      	str	r5, [r6, #4]
 10044f4:	b17c      	cbz	r4, 1004516 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x4a>
 10044f6:	7823      	ldrb	r3, [r4, #0]
 10044f8:	2b01      	cmp	r3, #1
 10044fa:	d1ed      	bne.n	10044d8 <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0xc>
 10044fc:	4d07      	ldr	r5, [pc, #28]	; (100451c <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x50>)
 10044fe:	4620      	mov	r0, r4
 1004500:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
 1004504:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
 1004508:	f000 faac 	bl	1004a64 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI>
 100450c:	2800      	cmp	r0, #0
 100450e:	d1e5      	bne.n	10044dc <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 1004510:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
 1004514:	e7e2      	b.n	10044dc <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 1004516:	4620      	mov	r0, r4
 1004518:	e7e0      	b.n	10044dc <sym_2WYYMPXQVXWJHL26FNRSKU4VWWWCO4V257QPKAA+0x10>
 100451a:	bf00      	nop
 100451c:	21000ae4 	.word	0x21000ae4

01004520 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ>:
 1004520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004524:	4770      	bx	lr
	...

01004528 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ>:
 1004528:	b510      	push	{r4, lr}
 100452a:	4c12      	ldr	r4, [pc, #72]	; (1004574 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x4c>)
 100452c:	68a0      	ldr	r0, [r4, #8]
 100452e:	b150      	cbz	r0, 1004546 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x1e>
 1004530:	7803      	ldrb	r3, [r0, #0]
 1004532:	b9bb      	cbnz	r3, 1004564 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x3c>
 1004534:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 1004538:	b11b      	cbz	r3, 1004542 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x1a>
 100453a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 100453e:	f000 f9b3 	bl	10048a8 <sym_XFGFOLFQFKO7HHVOFRL5ZXJ6QCBLP5B2PABYEQI>
 1004542:	2300      	movs	r3, #0
 1004544:	60a3      	str	r3, [r4, #8]
 1004546:	68e3      	ldr	r3, [r4, #12]
 1004548:	b153      	cbz	r3, 1004560 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x38>
 100454a:	781b      	ldrb	r3, [r3, #0]
 100454c:	2b01      	cmp	r3, #1
 100454e:	d10e      	bne.n	100456e <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x46>
 1004550:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 1004554:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 1004558:	f000 f9c6 	bl	10048e8 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A>
 100455c:	2300      	movs	r3, #0
 100455e:	60e3      	str	r3, [r4, #12]
 1004560:	2000      	movs	r0, #0
 1004562:	bd10      	pop	{r4, pc}
 1004564:	f240 2176 	movw	r1, #630	; 0x276
 1004568:	2072      	movs	r0, #114	; 0x72
 100456a:	f7ff f85b 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100456e:	f240 2185 	movw	r1, #645	; 0x285
 1004572:	e7f9      	b.n	1004568 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x40>
 1004574:	21000a10 	.word	0x21000a10

01004578 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ>:
 1004578:	b538      	push	{r3, r4, r5, lr}
 100457a:	4c11      	ldr	r4, [pc, #68]	; (10045c0 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x48>)
 100457c:	6860      	ldr	r0, [r4, #4]
 100457e:	b140      	cbz	r0, 1004592 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x1a>
 1004580:	7805      	ldrb	r5, [r0, #0]
 1004582:	b9ad      	cbnz	r5, 10045b0 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x38>
 1004584:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 1004588:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 100458c:	f000 fb24 	bl	1004bd8 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA>
 1004590:	6065      	str	r5, [r4, #4]
 1004592:	6f23      	ldr	r3, [r4, #112]	; 0x70
 1004594:	b153      	cbz	r3, 10045ac <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x34>
 1004596:	781b      	ldrb	r3, [r3, #0]
 1004598:	2b01      	cmp	r3, #1
 100459a:	d10e      	bne.n	10045ba <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x42>
 100459c:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 10045a0:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 10045a4:	f000 f9be 	bl	1004924 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A>
 10045a8:	2300      	movs	r3, #0
 10045aa:	6723      	str	r3, [r4, #112]	; 0x70
 10045ac:	2000      	movs	r0, #0
 10045ae:	bd38      	pop	{r3, r4, r5, pc}
 10045b0:	f240 21aa 	movw	r1, #682	; 0x2aa
 10045b4:	2071      	movs	r0, #113	; 0x71
 10045b6:	f7ff f835 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10045ba:	f240 21b9 	movw	r1, #697	; 0x2b9
 10045be:	e7f9      	b.n	10045b4 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x3c>
 10045c0:	21000a5c 	.word	0x21000a5c

010045c4 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ>:
 10045c4:	b538      	push	{r3, r4, r5, lr}
 10045c6:	4c12      	ldr	r4, [pc, #72]	; (1004610 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x4c>)
 10045c8:	6860      	ldr	r0, [r4, #4]
 10045ca:	b140      	cbz	r0, 10045de <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x1a>
 10045cc:	7805      	ldrb	r5, [r0, #0]
 10045ce:	b9bd      	cbnz	r5, 1004600 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x3c>
 10045d0:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 10045d4:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 10045d8:	f000 fb3c 	bl	1004c54 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA>
 10045dc:	6065      	str	r5, [r4, #4]
 10045de:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 10045e2:	b15b      	cbz	r3, 10045fc <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x38>
 10045e4:	781b      	ldrb	r3, [r3, #0]
 10045e6:	2b01      	cmp	r3, #1
 10045e8:	d10f      	bne.n	100460a <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x46>
 10045ea:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
 10045ee:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 10045f2:	f000 f9b5 	bl	1004960 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A>
 10045f6:	2300      	movs	r3, #0
 10045f8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 10045fc:	2000      	movs	r0, #0
 10045fe:	bd38      	pop	{r3, r4, r5, pc}
 1004600:	f44f 7152 	mov.w	r1, #840	; 0x348
 1004604:	2076      	movs	r0, #118	; 0x76
 1004606:	f7ff f80d 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 100460a:	f240 3157 	movw	r1, #855	; 0x357
 100460e:	e7f9      	b.n	1004604 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ+0x40>
 1004610:	21000ae4 	.word	0x21000ae4

01004614 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI>:
 1004614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004618:	4770      	bx	lr
	...

0100461c <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI>:
 100461c:	4b15      	ldr	r3, [pc, #84]	; (1004674 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x58>)
 100461e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 1004622:	b322      	cbz	r2, 100466e <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x52>
 1004624:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 1004628:	b1a2      	cbz	r2, 1004654 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x38>
 100462a:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 100462e:	2201      	movs	r2, #1
 1004630:	2000      	movs	r0, #0
 1004632:	408a      	lsls	r2, r1
 1004634:	4910      	ldr	r1, [pc, #64]	; (1004678 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x5c>)
 1004636:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
 100463a:	4a10      	ldr	r2, [pc, #64]	; (100467c <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x60>)
 100463c:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 1004640:	5050      	str	r0, [r2, r1]
 1004642:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 1004646:	490e      	ldr	r1, [pc, #56]	; (1004680 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x64>)
 1004648:	0092      	lsls	r2, r2, #2
 100464a:	5088      	str	r0, [r1, r2]
 100464c:	b2d2      	uxtb	r2, r2
 100464e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 1004652:	5088      	str	r0, [r1, r2]
 1004654:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 1004658:	b12a      	cbz	r2, 1004666 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x4a>
 100465a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 100465e:	4a07      	ldr	r2, [pc, #28]	; (100467c <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x60>)
 1004660:	440a      	add	r2, r1
 1004662:	2100      	movs	r1, #0
 1004664:	6011      	str	r1, [r2, #0]
 1004666:	2000      	movs	r0, #0
 1004668:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
 100466c:	4770      	bx	lr
 100466e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004672:	4770      	bx	lr
 1004674:	21000a10 	.word	0x21000a10
 1004678:	4100f000 	.word	0x4100f000
 100467c:	4100a080 	.word	0x4100a080
 1004680:	41014180 	.word	0x41014180

01004684 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI>:
 1004684:	4b15      	ldr	r3, [pc, #84]	; (10046dc <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x58>)
 1004686:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 100468a:	b322      	cbz	r2, 10046d6 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x52>
 100468c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 1004690:	b1a2      	cbz	r2, 10046bc <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x38>
 1004692:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 1004696:	2201      	movs	r2, #1
 1004698:	2000      	movs	r0, #0
 100469a:	408a      	lsls	r2, r1
 100469c:	4910      	ldr	r1, [pc, #64]	; (10046e0 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x5c>)
 100469e:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
 10046a2:	4a10      	ldr	r2, [pc, #64]	; (10046e4 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x60>)
 10046a4:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 10046a8:	5050      	str	r0, [r2, r1]
 10046aa:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 10046ae:	490e      	ldr	r1, [pc, #56]	; (10046e8 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x64>)
 10046b0:	0092      	lsls	r2, r2, #2
 10046b2:	5088      	str	r0, [r1, r2]
 10046b4:	b2d2      	uxtb	r2, r2
 10046b6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 10046ba:	5088      	str	r0, [r1, r2]
 10046bc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 10046c0:	b12a      	cbz	r2, 10046ce <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x4a>
 10046c2:	f893 1066 	ldrb.w	r1, [r3, #102]	; 0x66
 10046c6:	4a07      	ldr	r2, [pc, #28]	; (10046e4 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x60>)
 10046c8:	440a      	add	r2, r1
 10046ca:	2100      	movs	r1, #0
 10046cc:	6011      	str	r1, [r2, #0]
 10046ce:	2000      	movs	r0, #0
 10046d0:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
 10046d4:	4770      	bx	lr
 10046d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 10046da:	4770      	bx	lr
 10046dc:	21000a5c 	.word	0x21000a5c
 10046e0:	4100f000 	.word	0x4100f000
 10046e4:	4100a080 	.word	0x4100a080
 10046e8:	41014180 	.word	0x41014180

010046ec <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI>:
 10046ec:	4b15      	ldr	r3, [pc, #84]	; (1004744 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x58>)
 10046ee:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 10046f2:	b322      	cbz	r2, 100473e <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x52>
 10046f4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 10046f8:	b1a2      	cbz	r2, 1004724 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x38>
 10046fa:	f893 108a 	ldrb.w	r1, [r3, #138]	; 0x8a
 10046fe:	2201      	movs	r2, #1
 1004700:	2000      	movs	r0, #0
 1004702:	408a      	lsls	r2, r1
 1004704:	4910      	ldr	r1, [pc, #64]	; (1004748 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x5c>)
 1004706:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
 100470a:	4a10      	ldr	r2, [pc, #64]	; (100474c <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x60>)
 100470c:	f893 1098 	ldrb.w	r1, [r3, #152]	; 0x98
 1004710:	5050      	str	r0, [r2, r1]
 1004712:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 1004716:	490e      	ldr	r1, [pc, #56]	; (1004750 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x64>)
 1004718:	0092      	lsls	r2, r2, #2
 100471a:	5088      	str	r0, [r1, r2]
 100471c:	b2d2      	uxtb	r2, r2
 100471e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 1004722:	5088      	str	r0, [r1, r2]
 1004724:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 1004728:	b12a      	cbz	r2, 1004736 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x4a>
 100472a:	f893 109a 	ldrb.w	r1, [r3, #154]	; 0x9a
 100472e:	4a07      	ldr	r2, [pc, #28]	; (100474c <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI+0x60>)
 1004730:	440a      	add	r2, r1
 1004732:	2100      	movs	r1, #0
 1004734:	6011      	str	r1, [r2, #0]
 1004736:	2000      	movs	r0, #0
 1004738:	f883 009c 	strb.w	r0, [r3, #156]	; 0x9c
 100473c:	4770      	bx	lr
 100473e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004742:	4770      	bx	lr
 1004744:	21000ae4 	.word	0x21000ae4
 1004748:	4100f000 	.word	0x4100f000
 100474c:	4100a080 	.word	0x4100a080
 1004750:	41014180 	.word	0x41014180

01004754 <sym_3FJRHOZABUZYV5MDTVYFX6BTU7BZJO4PWS35JVA>:
 1004754:	2300      	movs	r3, #0
 1004756:	7003      	strb	r3, [r0, #0]
 1004758:	4770      	bx	lr
	...

0100475c <sym_3FJRHOZABUZYV5MDTVYFX6BTU7BZJO4PWS35JVA>:
 100475c:	4601      	mov	r1, r0
 100475e:	4801      	ldr	r0, [pc, #4]	; (1004764 <sym_3FJRHOZABUZYV5MDTVYFX6BTU7BZJO4PWS35JVA+0x8>)
 1004760:	f000 bff8 	b.w	1005754 <sym_K27LNRXEE7HXLOB6ANRAZAL5UKZYP4WXS7EA7XI>
 1004764:	21000a20 	.word	0x21000a20

01004768 <mpsl_fem_disable>:
 1004768:	4b01      	ldr	r3, [pc, #4]	; (1004770 <mpsl_fem_disable+0x8>)
 100476a:	681b      	ldr	r3, [r3, #0]
 100476c:	681b      	ldr	r3, [r3, #0]
 100476e:	4718      	bx	r3
 1004770:	21000008 	.word	0x21000008

01004774 <mpsl_fem_pa_configuration_set>:
 1004774:	4b01      	ldr	r3, [pc, #4]	; (100477c <mpsl_fem_pa_configuration_set+0x8>)
 1004776:	681b      	ldr	r3, [r3, #0]
 1004778:	689b      	ldr	r3, [r3, #8]
 100477a:	4718      	bx	r3
 100477c:	21000008 	.word	0x21000008

01004780 <mpsl_fem_lna_configuration_set>:
 1004780:	4b01      	ldr	r3, [pc, #4]	; (1004788 <mpsl_fem_lna_configuration_set+0x8>)
 1004782:	681b      	ldr	r3, [r3, #0]
 1004784:	68db      	ldr	r3, [r3, #12]
 1004786:	4718      	bx	r3
 1004788:	21000008 	.word	0x21000008

0100478c <mpsl_fem_pa_configuration_clear>:
 100478c:	4b01      	ldr	r3, [pc, #4]	; (1004794 <mpsl_fem_pa_configuration_clear+0x8>)
 100478e:	681b      	ldr	r3, [r3, #0]
 1004790:	691b      	ldr	r3, [r3, #16]
 1004792:	4718      	bx	r3
 1004794:	21000008 	.word	0x21000008

01004798 <mpsl_fem_lna_configuration_clear>:
 1004798:	4b01      	ldr	r3, [pc, #4]	; (10047a0 <mpsl_fem_lna_configuration_clear+0x8>)
 100479a:	681b      	ldr	r3, [r3, #0]
 100479c:	695b      	ldr	r3, [r3, #20]
 100479e:	4718      	bx	r3
 10047a0:	21000008 	.word	0x21000008

010047a4 <mpsl_fem_deactivate_now>:
 10047a4:	4b01      	ldr	r3, [pc, #4]	; (10047ac <mpsl_fem_deactivate_now+0x8>)
 10047a6:	681b      	ldr	r3, [r3, #0]
 10047a8:	699b      	ldr	r3, [r3, #24]
 10047aa:	4718      	bx	r3
 10047ac:	21000008 	.word	0x21000008

010047b0 <mpsl_fem_pa_gain_set>:
 10047b0:	4b01      	ldr	r3, [pc, #4]	; (10047b8 <mpsl_fem_pa_gain_set+0x8>)
 10047b2:	681b      	ldr	r3, [r3, #0]
 10047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 10047b6:	4718      	bx	r3
 10047b8:	21000008 	.word	0x21000008

010047bc <mpsl_fem_abort_set>:
 10047bc:	4b01      	ldr	r3, [pc, #4]	; (10047c4 <mpsl_fem_abort_set+0x8>)
 10047be:	681b      	ldr	r3, [r3, #0]
 10047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10047c2:	4718      	bx	r3
 10047c4:	21000008 	.word	0x21000008

010047c8 <mpsl_fem_abort_clear>:
 10047c8:	4b01      	ldr	r3, [pc, #4]	; (10047d0 <mpsl_fem_abort_clear+0x8>)
 10047ca:	681b      	ldr	r3, [r3, #0]
 10047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 10047ce:	4718      	bx	r3
 10047d0:	21000008 	.word	0x21000008

010047d4 <mpsl_fem_tx_power_split>:
 10047d4:	b410      	push	{r4}
 10047d6:	4c03      	ldr	r4, [pc, #12]	; (10047e4 <mpsl_fem_tx_power_split+0x10>)
 10047d8:	6824      	ldr	r4, [r4, #0]
 10047da:	6864      	ldr	r4, [r4, #4]
 10047dc:	46a4      	mov	ip, r4
 10047de:	bc10      	pop	{r4}
 10047e0:	4760      	bx	ip
 10047e2:	bf00      	nop
 10047e4:	21000008 	.word	0x21000008

010047e8 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY>:
 10047e8:	4b02      	ldr	r3, [pc, #8]	; (10047f4 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xc>)
 10047ea:	6818      	ldr	r0, [r3, #0]
 10047ec:	3800      	subs	r0, #0
 10047ee:	bf18      	it	ne
 10047f0:	2001      	movne	r0, #1
 10047f2:	4770      	bx	lr
 10047f4:	21000804 	.word	0x21000804

010047f8 <sym_UZUI4YQAV7IWWBS4QSQS6JUSLV3JFA6COL6SGJQ>:
 10047f8:	b410      	push	{r4}
 10047fa:	4c02      	ldr	r4, [pc, #8]	; (1004804 <sym_UZUI4YQAV7IWWBS4QSQS6JUSLV3JFA6COL6SGJQ+0xc>)
 10047fc:	6824      	ldr	r4, [r4, #0]
 10047fe:	46a4      	mov	ip, r4
 1004800:	bc10      	pop	{r4}
 1004802:	4760      	bx	ip
 1004804:	21000804 	.word	0x21000804

01004808 <sym_MZDN5BZB66BXXWRSICFTZEHXQKFNOJPXWVAQX5I>:
 1004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100480a:	4e1e      	ldr	r6, [pc, #120]	; (1004884 <sym_MZDN5BZB66BXXWRSICFTZEHXQKFNOJPXWVAQX5I+0x7c>)
 100480c:	4615      	mov	r5, r2
 100480e:	b25f      	sxtb	r7, r3
 1004810:	460c      	mov	r4, r1
 1004812:	f996 2000 	ldrsb.w	r2, [r6]
 1004816:	4639      	mov	r1, r7
 1004818:	1a82      	subs	r2, r0, r2
 100481a:	2a00      	cmp	r2, #0
 100481c:	bfd4      	ite	le
 100481e:	8832      	ldrhle	r2, [r6, #0]
 1004820:	8872      	ldrhgt	r2, [r6, #2]
 1004822:	f8a5 2001 	strh.w	r2, [r5, #1]
 1004826:	f995 3001 	ldrsb.w	r3, [r5, #1]
 100482a:	1ac0      	subs	r0, r0, r3
 100482c:	f300 0007 	ssat	r0, #8, r0
 1004830:	b240      	sxtb	r0, r0
 1004832:	f7fb fcdf 	bl	10001f4 <mpsl_tx_power_radio_supported_power_adjust>
 1004836:	786b      	ldrb	r3, [r5, #1]
 1004838:	f5b4 6f1b 	cmp.w	r4, #2480	; 0x9b0
 100483c:	7028      	strb	r0, [r5, #0]
 100483e:	4403      	add	r3, r0
 1004840:	70eb      	strb	r3, [r5, #3]
 1004842:	d81a      	bhi.n	100487a <sym_MZDN5BZB66BXXWRSICFTZEHXQKFNOJPXWVAQX5I+0x72>
 1004844:	f640 1365 	movw	r3, #2405	; 0x965
 1004848:	429c      	cmp	r4, r3
 100484a:	d918      	bls.n	100487e <sym_MZDN5BZB66BXXWRSICFTZEHXQKFNOJPXWVAQX5I+0x76>
 100484c:	f6a4 1465 	subw	r4, r4, #2405	; 0x965
 1004850:	2105      	movs	r1, #5
 1004852:	fbb4 f4f1 	udiv	r4, r4, r1
 1004856:	b2e4      	uxtb	r4, r4
 1004858:	0124      	lsls	r4, r4, #4
 100485a:	4639      	mov	r1, r7
 100485c:	f7fb fcb0 	bl	10001c0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
 1004860:	f996 3000 	ldrsb.w	r3, [r6]
 1004864:	f995 2001 	ldrsb.w	r2, [r5, #1]
 1004868:	4434      	add	r4, r6
 100486a:	429a      	cmp	r2, r3
 100486c:	4404      	add	r4, r0
 100486e:	bf0c      	ite	eq
 1004870:	7923      	ldrbeq	r3, [r4, #4]
 1004872:	f894 3104 	ldrbne.w	r3, [r4, #260]	; 0x104
 1004876:	70ab      	strb	r3, [r5, #2]
 1004878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100487a:	240f      	movs	r4, #15
 100487c:	e7ec      	b.n	1004858 <sym_MZDN5BZB66BXXWRSICFTZEHXQKFNOJPXWVAQX5I+0x50>
 100487e:	2400      	movs	r4, #0
 1004880:	e7ea      	b.n	1004858 <sym_MZDN5BZB66BXXWRSICFTZEHXQKFNOJPXWVAQX5I+0x50>
 1004882:	bf00      	nop
 1004884:	2100080c 	.word	0x2100080c

01004888 <sym_7YA3IENTIQLV4ONUWU7CA6S6RYHZL5RY7NVLDDI>:
 1004888:	f990 2000 	ldrsb.w	r2, [r0]
 100488c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 1004890:	8841      	ldrh	r1, [r0, #2]
 1004892:	429a      	cmp	r2, r3
 1004894:	4b03      	ldr	r3, [pc, #12]	; (10048a4 <sym_7YA3IENTIQLV4ONUWU7CA6S6RYHZL5RY7NVLDDI+0x1c>)
 1004896:	8802      	ldrh	r2, [r0, #0]
 1004898:	bfc7      	ittee	gt
 100489a:	8019      	strhgt	r1, [r3, #0]
 100489c:	805a      	strhgt	r2, [r3, #2]
 100489e:	8059      	strhle	r1, [r3, #2]
 10048a0:	801a      	strhle	r2, [r3, #0]
 10048a2:	4770      	bx	lr
 10048a4:	2100080c 	.word	0x2100080c

010048a8 <sym_XFGFOLFQFKO7HHVOFRL5ZXJ6QCBLP5B2PABYEQI>:
 10048a8:	b538      	push	{r3, r4, r5, lr}
 10048aa:	4b0c      	ldr	r3, [pc, #48]	; (10048dc <sym_XFGFOLFQFKO7HHVOFRL5ZXJ6QCBLP5B2PABYEQI+0x34>)
 10048ac:	4604      	mov	r4, r0
 10048ae:	460d      	mov	r5, r1
 10048b0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 10048b4:	2301      	movs	r3, #1
 10048b6:	4093      	lsls	r3, r2
 10048b8:	4a09      	ldr	r2, [pc, #36]	; (10048e0 <sym_XFGFOLFQFKO7HHVOFRL5ZXJ6QCBLP5B2PABYEQI+0x38>)
 10048ba:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 10048be:	7c00      	ldrb	r0, [r0, #16]
 10048c0:	f000 ff05 	bl	10056ce <sym_MMQVX4NQEXGJAV6DVHL7YM6KR5WCHDCVACPTN3I>
 10048c4:	4b07      	ldr	r3, [pc, #28]	; (10048e4 <sym_XFGFOLFQFKO7HHVOFRL5ZXJ6QCBLP5B2PABYEQI+0x3c>)
 10048c6:	2200      	movs	r2, #0
 10048c8:	515a      	str	r2, [r3, r5]
 10048ca:	0083      	lsls	r3, r0, #2
 10048cc:	6861      	ldr	r1, [r4, #4]
 10048ce:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 10048d2:	b29b      	uxth	r3, r3
 10048d4:	3380      	adds	r3, #128	; 0x80
 10048d6:	50ca      	str	r2, [r1, r3]
 10048d8:	bd38      	pop	{r3, r4, r5, pc}
 10048da:	bf00      	nop
 10048dc:	21000a10 	.word	0x21000a10
 10048e0:	4100f000 	.word	0x4100f000
 10048e4:	4100a080 	.word	0x4100a080

010048e8 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A>:
 10048e8:	b1a0      	cbz	r0, 1004914 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x2c>
 10048ea:	4b0b      	ldr	r3, [pc, #44]	; (1004918 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x30>)
 10048ec:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 10048f0:	b172      	cbz	r2, 1004910 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x28>
 10048f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 10048f6:	428a      	cmp	r2, r1
 10048f8:	d10c      	bne.n	1004914 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x2c>
 10048fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 10048fe:	2100      	movs	r1, #0
 1004900:	4a06      	ldr	r2, [pc, #24]	; (100491c <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x34>)
 1004902:	009b      	lsls	r3, r3, #2
 1004904:	50d1      	str	r1, [r2, r3]
 1004906:	b2db      	uxtb	r3, r3
 1004908:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 100490c:	50d1      	str	r1, [r2, r3]
 100490e:	4770      	bx	lr
 1004910:	4b03      	ldr	r3, [pc, #12]	; (1004920 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x38>)
 1004912:	505a      	str	r2, [r3, r1]
 1004914:	4770      	bx	lr
 1004916:	bf00      	nop
 1004918:	21000a10 	.word	0x21000a10
 100491c:	41014180 	.word	0x41014180
 1004920:	4100a080 	.word	0x4100a080

01004924 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A>:
 1004924:	b1a0      	cbz	r0, 1004950 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x2c>
 1004926:	4b0b      	ldr	r3, [pc, #44]	; (1004954 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x30>)
 1004928:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 100492c:	b172      	cbz	r2, 100494c <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x28>
 100492e:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 1004932:	428a      	cmp	r2, r1
 1004934:	d10c      	bne.n	1004950 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x2c>
 1004936:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 100493a:	2100      	movs	r1, #0
 100493c:	4a06      	ldr	r2, [pc, #24]	; (1004958 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x34>)
 100493e:	009b      	lsls	r3, r3, #2
 1004940:	50d1      	str	r1, [r2, r3]
 1004942:	b2db      	uxtb	r3, r3
 1004944:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 1004948:	50d1      	str	r1, [r2, r3]
 100494a:	4770      	bx	lr
 100494c:	4b03      	ldr	r3, [pc, #12]	; (100495c <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x38>)
 100494e:	505a      	str	r2, [r3, r1]
 1004950:	4770      	bx	lr
 1004952:	bf00      	nop
 1004954:	21000a5c 	.word	0x21000a5c
 1004958:	41014180 	.word	0x41014180
 100495c:	4100a080 	.word	0x4100a080

01004960 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A>:
 1004960:	b1a0      	cbz	r0, 100498c <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x2c>
 1004962:	4b0b      	ldr	r3, [pc, #44]	; (1004990 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x30>)
 1004964:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 1004968:	b172      	cbz	r2, 1004988 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x28>
 100496a:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 100496e:	428a      	cmp	r2, r1
 1004970:	d10c      	bne.n	100498c <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x2c>
 1004972:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 1004976:	2100      	movs	r1, #0
 1004978:	4a06      	ldr	r2, [pc, #24]	; (1004994 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x34>)
 100497a:	009b      	lsls	r3, r3, #2
 100497c:	50d1      	str	r1, [r2, r3]
 100497e:	b2db      	uxtb	r3, r3
 1004980:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 1004984:	50d1      	str	r1, [r2, r3]
 1004986:	4770      	bx	lr
 1004988:	4b03      	ldr	r3, [pc, #12]	; (1004998 <sym_AH55PCS7VLWZQWY6DLR3CVX7W2IWBK5QU33YV2A+0x38>)
 100498a:	505a      	str	r2, [r3, r1]
 100498c:	4770      	bx	lr
 100498e:	bf00      	nop
 1004990:	21000ae4 	.word	0x21000ae4
 1004994:	41014180 	.word	0x41014180
 1004998:	4100a080 	.word	0x4100a080

0100499c <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI>:
 100499c:	4603      	mov	r3, r0
 100499e:	b510      	push	{r4, lr}
 10049a0:	b1f9      	cbz	r1, 10049e2 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x46>
 10049a2:	4913      	ldr	r1, [pc, #76]	; (10049f0 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x54>)
 10049a4:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 10049a8:	b1a8      	cbz	r0, 10049d6 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x3a>
 10049aa:	f891 0044 	ldrb.w	r0, [r1, #68]	; 0x44
 10049ae:	4290      	cmp	r0, r2
 10049b0:	d11a      	bne.n	10049e8 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x4c>
 10049b2:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
 10049b6:	791b      	ldrb	r3, [r3, #4]
 10049b8:	0092      	lsls	r2, r2, #2
 10049ba:	480e      	ldr	r0, [pc, #56]	; (10049f4 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x58>)
 10049bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 10049c0:	b2d4      	uxtb	r4, r2
 10049c2:	5103      	str	r3, [r0, r4]
 10049c4:	2000      	movs	r0, #0
 10049c6:	4b0c      	ldr	r3, [pc, #48]	; (10049f8 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x5c>)
 10049c8:	4413      	add	r3, r2
 10049ca:	f891 203d 	ldrb.w	r2, [r1, #61]	; 0x3d
 10049ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 10049d2:	601a      	str	r2, [r3, #0]
 10049d4:	bd10      	pop	{r4, pc}
 10049d6:	791b      	ldrb	r3, [r3, #4]
 10049d8:	4908      	ldr	r1, [pc, #32]	; (10049fc <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x60>)
 10049da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 10049de:	508b      	str	r3, [r1, r2]
 10049e0:	e7f8      	b.n	10049d4 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x38>
 10049e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 10049e6:	e7f5      	b.n	10049d4 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x38>
 10049e8:	f06f 0015 	mvn.w	r0, #21
 10049ec:	e7f2      	b.n	10049d4 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x38>
 10049ee:	bf00      	nop
 10049f0:	21000a10 	.word	0x21000a10
 10049f4:	41014080 	.word	0x41014080
 10049f8:	41014180 	.word	0x41014180
 10049fc:	4100a080 	.word	0x4100a080

01004a00 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI>:
 1004a00:	4603      	mov	r3, r0
 1004a02:	b510      	push	{r4, lr}
 1004a04:	b1f9      	cbz	r1, 1004a46 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x46>
 1004a06:	4913      	ldr	r1, [pc, #76]	; (1004a54 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x54>)
 1004a08:	f891 0068 	ldrb.w	r0, [r1, #104]	; 0x68
 1004a0c:	b1a8      	cbz	r0, 1004a3a <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x3a>
 1004a0e:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
 1004a12:	4290      	cmp	r0, r2
 1004a14:	d11a      	bne.n	1004a4c <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x4c>
 1004a16:	f891 2061 	ldrb.w	r2, [r1, #97]	; 0x61
 1004a1a:	791b      	ldrb	r3, [r3, #4]
 1004a1c:	0092      	lsls	r2, r2, #2
 1004a1e:	480e      	ldr	r0, [pc, #56]	; (1004a58 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x58>)
 1004a20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 1004a24:	b2d4      	uxtb	r4, r2
 1004a26:	5103      	str	r3, [r0, r4]
 1004a28:	2000      	movs	r0, #0
 1004a2a:	4b0c      	ldr	r3, [pc, #48]	; (1004a5c <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x5c>)
 1004a2c:	4413      	add	r3, r2
 1004a2e:	f891 205e 	ldrb.w	r2, [r1, #94]	; 0x5e
 1004a32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 1004a36:	601a      	str	r2, [r3, #0]
 1004a38:	bd10      	pop	{r4, pc}
 1004a3a:	791b      	ldrb	r3, [r3, #4]
 1004a3c:	4908      	ldr	r1, [pc, #32]	; (1004a60 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x60>)
 1004a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 1004a42:	508b      	str	r3, [r1, r2]
 1004a44:	e7f8      	b.n	1004a38 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x38>
 1004a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004a4a:	e7f5      	b.n	1004a38 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x38>
 1004a4c:	f06f 0015 	mvn.w	r0, #21
 1004a50:	e7f2      	b.n	1004a38 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x38>
 1004a52:	bf00      	nop
 1004a54:	21000a5c 	.word	0x21000a5c
 1004a58:	41014080 	.word	0x41014080
 1004a5c:	41014180 	.word	0x41014180
 1004a60:	4100a080 	.word	0x4100a080

01004a64 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI>:
 1004a64:	4603      	mov	r3, r0
 1004a66:	b510      	push	{r4, lr}
 1004a68:	b1f9      	cbz	r1, 1004aaa <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x46>
 1004a6a:	4913      	ldr	r1, [pc, #76]	; (1004ab8 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x54>)
 1004a6c:	f891 009c 	ldrb.w	r0, [r1, #156]	; 0x9c
 1004a70:	b1a8      	cbz	r0, 1004a9e <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x3a>
 1004a72:	f891 0098 	ldrb.w	r0, [r1, #152]	; 0x98
 1004a76:	4290      	cmp	r0, r2
 1004a78:	d11a      	bne.n	1004ab0 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x4c>
 1004a7a:	f891 208f 	ldrb.w	r2, [r1, #143]	; 0x8f
 1004a7e:	791b      	ldrb	r3, [r3, #4]
 1004a80:	0092      	lsls	r2, r2, #2
 1004a82:	480e      	ldr	r0, [pc, #56]	; (1004abc <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x58>)
 1004a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 1004a88:	b2d4      	uxtb	r4, r2
 1004a8a:	5103      	str	r3, [r0, r4]
 1004a8c:	2000      	movs	r0, #0
 1004a8e:	4b0c      	ldr	r3, [pc, #48]	; (1004ac0 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x5c>)
 1004a90:	4413      	add	r3, r2
 1004a92:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
 1004a96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 1004a9a:	601a      	str	r2, [r3, #0]
 1004a9c:	bd10      	pop	{r4, pc}
 1004a9e:	791b      	ldrb	r3, [r3, #4]
 1004aa0:	4908      	ldr	r1, [pc, #32]	; (1004ac4 <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x60>)
 1004aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 1004aa6:	508b      	str	r3, [r1, r2]
 1004aa8:	e7f8      	b.n	1004a9c <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x38>
 1004aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004aae:	e7f5      	b.n	1004a9c <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x38>
 1004ab0:	f06f 0015 	mvn.w	r0, #21
 1004ab4:	e7f2      	b.n	1004a9c <sym_MTVUYYBQY47IA7P253IOQDK3A464WEVVRBLZXAI+0x38>
 1004ab6:	bf00      	nop
 1004ab8:	21000ae4 	.word	0x21000ae4
 1004abc:	41014080 	.word	0x41014080
 1004ac0:	41014180 	.word	0x41014180
 1004ac4:	4100a080 	.word	0x4100a080

01004ac8 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ>:
 1004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1004aca:	4604      	mov	r4, r0
 1004acc:	4617      	mov	r7, r2
 1004ace:	461d      	mov	r5, r3
 1004ad0:	b1f9      	cbz	r1, 1004b12 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0x4a>
 1004ad2:	7c00      	ldrb	r0, [r0, #16]
 1004ad4:	f000 fdfb 	bl	10056ce <sym_MMQVX4NQEXGJAV6DVHL7YM6KR5WCHDCVACPTN3I>
 1004ad8:	4b0f      	ldr	r3, [pc, #60]	; (1004b18 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0x50>)
 1004ada:	0081      	lsls	r1, r0, #2
 1004adc:	6862      	ldr	r2, [r4, #4]
 1004ade:	f893 603c 	ldrb.w	r6, [r3, #60]	; 0x3c
 1004ae2:	b2c0      	uxtb	r0, r0
 1004ae4:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 1004ae8:	f046 4300 	orr.w	r3, r6, #2147483648	; 0x80000000
 1004aec:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 1004af0:	b289      	uxth	r1, r1
 1004af2:	3180      	adds	r1, #128	; 0x80
 1004af4:	5053      	str	r3, [r2, r1]
 1004af6:	4909      	ldr	r1, [pc, #36]	; (1004b1c <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0x54>)
 1004af8:	51cb      	str	r3, [r1, r7]
 1004afa:	68e2      	ldr	r2, [r4, #12]
 1004afc:	6863      	ldr	r3, [r4, #4]
 1004afe:	1b52      	subs	r2, r2, r5
 1004b00:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 1004b04:	2301      	movs	r3, #1
 1004b06:	4a06      	ldr	r2, [pc, #24]	; (1004b20 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0x58>)
 1004b08:	2000      	movs	r0, #0
 1004b0a:	40b3      	lsls	r3, r6
 1004b0c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
 1004b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1004b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004b16:	e7fb      	b.n	1004b10 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0x48>
 1004b18:	21000a10 	.word	0x21000a10
 1004b1c:	4100a080 	.word	0x4100a080
 1004b20:	4100f000 	.word	0x4100f000

01004b24 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ>:
 1004b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1004b28:	4605      	mov	r5, r0
 1004b2a:	4690      	mov	r8, r2
 1004b2c:	461e      	mov	r6, r3
 1004b2e:	460c      	mov	r4, r1
 1004b30:	4f26      	ldr	r7, [pc, #152]	; (1004bcc <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0xa8>)
 1004b32:	b1e1      	cbz	r1, 1004b6e <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0x4a>
 1004b34:	7c00      	ldrb	r0, [r0, #16]
 1004b36:	2100      	movs	r1, #0
 1004b38:	f000 fe36 	bl	10057a8 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 1004b3c:	f897 405d 	ldrb.w	r4, [r7, #93]	; 0x5d
 1004b40:	0083      	lsls	r3, r0, #2
 1004b42:	686a      	ldr	r2, [r5, #4]
 1004b44:	f044 4100 	orr.w	r1, r4, #2147483648	; 0x80000000
 1004b48:	b2c0      	uxtb	r0, r0
 1004b4a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 1004b4e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 1004b52:	b29b      	uxth	r3, r3
 1004b54:	3380      	adds	r3, #128	; 0x80
 1004b56:	50d1      	str	r1, [r2, r3]
 1004b58:	4b1d      	ldr	r3, [pc, #116]	; (1004bd0 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0xac>)
 1004b5a:	f843 1008 	str.w	r1, [r3, r8]
 1004b5e:	2101      	movs	r1, #1
 1004b60:	68ea      	ldr	r2, [r5, #12]
 1004b62:	686b      	ldr	r3, [r5, #4]
 1004b64:	fa01 f404 	lsl.w	r4, r1, r4
 1004b68:	1b92      	subs	r2, r2, r6
 1004b6a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 1004b6e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 1004b72:	b333      	cbz	r3, 1004bc2 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0x9e>
 1004b74:	7c28      	ldrb	r0, [r5, #16]
 1004b76:	f000 fe17 	bl	10057a8 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 1004b7a:	f897 105c 	ldrb.w	r1, [r7, #92]	; 0x5c
 1004b7e:	0082      	lsls	r2, r0, #2
 1004b80:	686b      	ldr	r3, [r5, #4]
 1004b82:	f041 4c00 	orr.w	ip, r1, #2147483648	; 0x80000000
 1004b86:	b2c0      	uxtb	r0, r0
 1004b88:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 1004b8c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 1004b90:	b292      	uxth	r2, r2
 1004b92:	3280      	adds	r2, #128	; 0x80
 1004b94:	f843 c002 	str.w	ip, [r3, r2]
 1004b98:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 1004b9c:	4b0c      	ldr	r3, [pc, #48]	; (1004bd0 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0xac>)
 1004b9e:	f843 c002 	str.w	ip, [r3, r2]
 1004ba2:	693b      	ldr	r3, [r7, #16]
 1004ba4:	686a      	ldr	r2, [r5, #4]
 1004ba6:	441e      	add	r6, r3
 1004ba8:	68eb      	ldr	r3, [r5, #12]
 1004baa:	1b9e      	subs	r6, r3, r6
 1004bac:	2301      	movs	r3, #1
 1004bae:	408b      	lsls	r3, r1
 1004bb0:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 1004bb4:	431c      	orrs	r4, r3
 1004bb6:	4b07      	ldr	r3, [pc, #28]	; (1004bd4 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0xb0>)
 1004bb8:	2000      	movs	r0, #0
 1004bba:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
 1004bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1004bc2:	2900      	cmp	r1, #0
 1004bc4:	d1f7      	bne.n	1004bb6 <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0x92>
 1004bc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1004bca:	e7f8      	b.n	1004bbe <sym_5EI3FMFG24ZR2Q43AWJ4KAJKPASSJHJWPTQNDIQ+0x9a>
 1004bcc:	21000a5c 	.word	0x21000a5c
 1004bd0:	4100a080 	.word	0x4100a080
 1004bd4:	4100f000 	.word	0x4100f000

01004bd8 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA>:
 1004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1004bda:	4605      	mov	r5, r0
 1004bdc:	4617      	mov	r7, r2
 1004bde:	4e1a      	ldr	r6, [pc, #104]	; (1004c48 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x70>)
 1004be0:	b1b1      	cbz	r1, 1004c10 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x38>
 1004be2:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 1004be6:	2401      	movs	r4, #1
 1004be8:	4a18      	ldr	r2, [pc, #96]	; (1004c4c <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x74>)
 1004bea:	2100      	movs	r1, #0
 1004bec:	fa04 f303 	lsl.w	r3, r4, r3
 1004bf0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 1004bf4:	7c00      	ldrb	r0, [r0, #16]
 1004bf6:	f000 fdd7 	bl	10057a8 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 1004bfa:	4b15      	ldr	r3, [pc, #84]	; (1004c50 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x78>)
 1004bfc:	2200      	movs	r2, #0
 1004bfe:	51da      	str	r2, [r3, r7]
 1004c00:	0083      	lsls	r3, r0, #2
 1004c02:	6869      	ldr	r1, [r5, #4]
 1004c04:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 1004c08:	b29b      	uxth	r3, r3
 1004c0a:	3380      	adds	r3, #128	; 0x80
 1004c0c:	50ca      	str	r2, [r1, r3]
 1004c0e:	4621      	mov	r1, r4
 1004c10:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 1004c14:	b1b3      	cbz	r3, 1004c44 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x6c>
 1004c16:	f896 205c 	ldrb.w	r2, [r6, #92]	; 0x5c
 1004c1a:	2301      	movs	r3, #1
 1004c1c:	4093      	lsls	r3, r2
 1004c1e:	4a0b      	ldr	r2, [pc, #44]	; (1004c4c <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x74>)
 1004c20:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 1004c24:	7c28      	ldrb	r0, [r5, #16]
 1004c26:	f000 fdbf 	bl	10057a8 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 1004c2a:	f896 2075 	ldrb.w	r2, [r6, #117]	; 0x75
 1004c2e:	4b08      	ldr	r3, [pc, #32]	; (1004c50 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x78>)
 1004c30:	4413      	add	r3, r2
 1004c32:	2200      	movs	r2, #0
 1004c34:	601a      	str	r2, [r3, #0]
 1004c36:	0083      	lsls	r3, r0, #2
 1004c38:	6869      	ldr	r1, [r5, #4]
 1004c3a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 1004c3e:	b29b      	uxth	r3, r3
 1004c40:	3380      	adds	r3, #128	; 0x80
 1004c42:	50ca      	str	r2, [r1, r3]
 1004c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1004c46:	bf00      	nop
 1004c48:	21000a5c 	.word	0x21000a5c
 1004c4c:	4100f000 	.word	0x4100f000
 1004c50:	4100a080 	.word	0x4100a080

01004c54 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA>:
 1004c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1004c58:	4605      	mov	r5, r0
 1004c5a:	4617      	mov	r7, r2
 1004c5c:	4c41      	ldr	r4, [pc, #260]	; (1004d64 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x110>)
 1004c5e:	2900      	cmp	r1, #0
 1004c60:	d045      	beq.n	1004cee <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x9a>
 1004c62:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
 1004c66:	2601      	movs	r6, #1
 1004c68:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
 1004c6c:	2100      	movs	r1, #0
 1004c6e:	fa06 f303 	lsl.w	r3, r6, r3
 1004c72:	fa06 f202 	lsl.w	r2, r6, r2
 1004c76:	4313      	orrs	r3, r2
 1004c78:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
 1004c7c:	fa06 f202 	lsl.w	r2, r6, r2
 1004c80:	4313      	orrs	r3, r2
 1004c82:	4a39      	ldr	r2, [pc, #228]	; (1004d68 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x114>)
 1004c84:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 1004c88:	7c00      	ldrb	r0, [r0, #16]
 1004c8a:	f000 fda5 	bl	10057d8 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 1004c8e:	4603      	mov	r3, r0
 1004c90:	f894 8085 	ldrb.w	r8, [r4, #133]	; 0x85
 1004c94:	2200      	movs	r2, #0
 1004c96:	009b      	lsls	r3, r3, #2
 1004c98:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
 1004c9c:	4640      	mov	r0, r8
 1004c9e:	4691      	mov	r9, r2
 1004ca0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 1004ca4:	f000 fd37 	bl	1005716 <sym_CH74X7BFY3BCP6GTJTM32KEQ4GABIESQRZ7BQKA>
 1004ca8:	6869      	ldr	r1, [r5, #4]
 1004caa:	b29b      	uxth	r3, r3
 1004cac:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
 1004cb0:	3380      	adds	r3, #128	; 0x80
 1004cb2:	50ca      	str	r2, [r1, r3]
 1004cb4:	4b2d      	ldr	r3, [pc, #180]	; (1004d6c <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x118>)
 1004cb6:	f8ca 2090 	str.w	r2, [sl, #144]	; 0x90
 1004cba:	501a      	str	r2, [r3, r0]
 1004cbc:	4632      	mov	r2, r6
 1004cbe:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
 1004cc2:	4640      	mov	r0, r8
 1004cc4:	f000 fd27 	bl	1005716 <sym_CH74X7BFY3BCP6GTJTM32KEQ4GABIESQRZ7BQKA>
 1004cc8:	f8ca 9198 	str.w	r9, [sl, #408]	; 0x198
 1004ccc:	f843 9007 	str.w	r9, [r3, r7]
 1004cd0:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 1004cd4:	4926      	ldr	r1, [pc, #152]	; (1004d70 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x11c>)
 1004cd6:	009b      	lsls	r3, r3, #2
 1004cd8:	b2de      	uxtb	r6, r3
 1004cda:	f841 9006 	str.w	r9, [r1, r6]
 1004cde:	f501 7180 	add.w	r1, r1, #256	; 0x100
 1004ce2:	f841 9003 	str.w	r9, [r1, r3]
 1004ce6:	4611      	mov	r1, r2
 1004ce8:	4b20      	ldr	r3, [pc, #128]	; (1004d6c <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x118>)
 1004cea:	f843 9000 	str.w	r9, [r3, r0]
 1004cee:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 1004cf2:	b34b      	cbz	r3, 1004d48 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0xf4>
 1004cf4:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 1004cf8:	2601      	movs	r6, #1
 1004cfa:	4a1b      	ldr	r2, [pc, #108]	; (1004d68 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x114>)
 1004cfc:	fa06 f303 	lsl.w	r3, r6, r3
 1004d00:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 1004d04:	7c28      	ldrb	r0, [r5, #16]
 1004d06:	f000 fd67 	bl	10057d8 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 1004d0a:	4603      	mov	r3, r0
 1004d0c:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
 1004d10:	4632      	mov	r2, r6
 1004d12:	009b      	lsls	r3, r3, #2
 1004d14:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
 1004d18:	f000 fcfd 	bl	1005716 <sym_CH74X7BFY3BCP6GTJTM32KEQ4GABIESQRZ7BQKA>
 1004d1c:	6869      	ldr	r1, [r5, #4]
 1004d1e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 1004d22:	2200      	movs	r2, #0
 1004d24:	b29b      	uxth	r3, r3
 1004d26:	3380      	adds	r3, #128	; 0x80
 1004d28:	50ca      	str	r2, [r1, r3]
 1004d2a:	f894 109e 	ldrb.w	r1, [r4, #158]	; 0x9e
 1004d2e:	4b0f      	ldr	r3, [pc, #60]	; (1004d6c <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x118>)
 1004d30:	505a      	str	r2, [r3, r1]
 1004d32:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 1004d36:	490e      	ldr	r1, [pc, #56]	; (1004d70 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x11c>)
 1004d38:	009b      	lsls	r3, r3, #2
 1004d3a:	b2dd      	uxtb	r5, r3
 1004d3c:	514a      	str	r2, [r1, r5]
 1004d3e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 1004d42:	50ca      	str	r2, [r1, r3]
 1004d44:	4b09      	ldr	r3, [pc, #36]	; (1004d6c <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x118>)
 1004d46:	501a      	str	r2, [r3, r0]
 1004d48:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 1004d4c:	b143      	cbz	r3, 1004d60 <sym_5G3RC46BUO4Q6IIGNIS7NDCX72Q4H7YJEBPQCBA+0x10c>
 1004d4e:	f000 f8df 	bl	1004f10 <sym_7Y7KR3HN6VAJOI24WXYPIIIP72KGQRHDY43HZQA>
 1004d52:	f000 fd59 	bl	1005808 <sym_CYPFJQT7BJKE7MOREHIKZCNLQC7DT5MGP65YPPA>
 1004d56:	2001      	movs	r0, #1
 1004d58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1004d5c:	f000 b9a6 	b.w	10050ac <sym_67HOWE745NQD34KTUUWSRFXD4DO3FU3W2QV4K7Q>
 1004d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1004d64:	21000ae4 	.word	0x21000ae4
 1004d68:	4100f000 	.word	0x4100f000
 1004d6c:	4100a080 	.word	0x4100a080
 1004d70:	41014080 	.word	0x41014080

01004d74 <sym_NYGF67KROVIGLFRXDTVZT5RA7QYXLOOU6FNR66A>:
 1004d74:	4b06      	ldr	r3, [pc, #24]	; (1004d90 <sym_NYGF67KROVIGLFRXDTVZT5RA7QYXLOOU6FNR66A+0x1c>)
 1004d76:	681b      	ldr	r3, [r3, #0]
 1004d78:	f993 2011 	ldrsb.w	r2, [r3, #17]
 1004d7c:	4282      	cmp	r2, r0
 1004d7e:	d005      	beq.n	1004d8c <sym_NYGF67KROVIGLFRXDTVZT5RA7QYXLOOU6FNR66A+0x18>
 1004d80:	f993 3012 	ldrsb.w	r3, [r3, #18]
 1004d84:	1a1b      	subs	r3, r3, r0
 1004d86:	4258      	negs	r0, r3
 1004d88:	4158      	adcs	r0, r3
 1004d8a:	4770      	bx	lr
 1004d8c:	2000      	movs	r0, #0
 1004d8e:	4770      	bx	lr
 1004d90:	21000ad4 	.word	0x21000ad4

01004d94 <sym_TSARTEM45GNSJMTTW7TY35JZUCGO4XDSOGO4ZZQ>:
 1004d94:	4b08      	ldr	r3, [pc, #32]	; (1004db8 <sym_TSARTEM45GNSJMTTW7TY35JZUCGO4XDSOGO4ZZQ+0x24>)
 1004d96:	f990 2000 	ldrsb.w	r2, [r0]
 1004d9a:	f993 1004 	ldrsb.w	r1, [r3, #4]
 1004d9e:	4291      	cmp	r1, r2
 1004da0:	d003      	beq.n	1004daa <sym_TSARTEM45GNSJMTTW7TY35JZUCGO4XDSOGO4ZZQ+0x16>
 1004da2:	f993 1005 	ldrsb.w	r1, [r3, #5]
 1004da6:	4291      	cmp	r1, r2
 1004da8:	d103      	bne.n	1004db2 <sym_TSARTEM45GNSJMTTW7TY35JZUCGO4XDSOGO4ZZQ+0x1e>
 1004daa:	8802      	ldrh	r2, [r0, #0]
 1004dac:	2000      	movs	r0, #0
 1004dae:	80da      	strh	r2, [r3, #6]
 1004db0:	4770      	bx	lr
 1004db2:	f06f 0015 	mvn.w	r0, #21
 1004db6:	4770      	bx	lr
 1004db8:	21000ad4 	.word	0x21000ad4

01004dbc <sym_SBSKADDCM455I5M7MUVGKVPKN7TISR42EIXKOLI>:
 1004dbc:	4a04      	ldr	r2, [pc, #16]	; (1004dd0 <sym_SBSKADDCM455I5M7MUVGKVPKN7TISR42EIXKOLI+0x14>)
 1004dbe:	6813      	ldr	r3, [r2, #0]
 1004dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 1004dc4:	b10b      	cbz	r3, 1004dca <sym_SBSKADDCM455I5M7MUVGKVPKN7TISR42EIXKOLI+0xe>
 1004dc6:	f992 3006 	ldrsb.w	r3, [r2, #6]
 1004dca:	7003      	strb	r3, [r0, #0]
 1004dcc:	4770      	bx	lr
 1004dce:	bf00      	nop
 1004dd0:	21000ad4 	.word	0x21000ad4

01004dd4 <sym_QRW3N66LO43KLPLBWVBHC2SBLZP4F6HGLD77ICA>:
 1004dd4:	4b04      	ldr	r3, [pc, #16]	; (1004de8 <sym_QRW3N66LO43KLPLBWVBHC2SBLZP4F6HGLD77ICA+0x14>)
 1004dd6:	681a      	ldr	r2, [r3, #0]
 1004dd8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 1004ddc:	b10b      	cbz	r3, 1004de2 <sym_QRW3N66LO43KLPLBWVBHC2SBLZP4F6HGLD77ICA+0xe>
 1004dde:	f992 3013 	ldrsb.w	r3, [r2, #19]
 1004de2:	7003      	strb	r3, [r0, #0]
 1004de4:	4770      	bx	lr
 1004de6:	bf00      	nop
 1004de8:	21000ad4 	.word	0x21000ad4

01004dec <sym_EIMCOZR7MKLMYB62EEWREERTUNHHQDK6ITFS5HQ>:
 1004dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 1004dee:	b085      	sub	sp, #20
 1004df0:	4605      	mov	r5, r0
 1004df2:	460c      	mov	r4, r1
 1004df4:	4617      	mov	r7, r2
 1004df6:	461e      	mov	r6, r3
 1004df8:	f7ff fcf6 	bl	10047e8 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY>
 1004dfc:	b140      	cbz	r0, 1004e10 <sym_EIMCOZR7MKLMYB62EEWREERTUNHHQDK6ITFS5HQ+0x24>
 1004dfe:	4633      	mov	r3, r6
 1004e00:	463a      	mov	r2, r7
 1004e02:	4621      	mov	r1, r4
 1004e04:	4628      	mov	r0, r5
 1004e06:	b005      	add	sp, #20
 1004e08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 1004e0c:	f000 bc4e 	b.w	10056ac <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY>
 1004e10:	4b13      	ldr	r3, [pc, #76]	; (1004e60 <sym_EIMCOZR7MKLMYB62EEWREERTUNHHQDK6ITFS5HQ+0x74>)
 1004e12:	681a      	ldr	r2, [r3, #0]
 1004e14:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
 1004e18:	b111      	cbz	r1, 1004e20 <sym_EIMCOZR7MKLMYB62EEWREERTUNHHQDK6ITFS5HQ+0x34>
 1004e1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 1004e1e:	b99a      	cbnz	r2, 1004e48 <sym_EIMCOZR7MKLMYB62EEWREERTUNHHQDK6ITFS5HQ+0x5c>
 1004e20:	f10d 000f 	add.w	r0, sp, #15
 1004e24:	4621      	mov	r1, r4
 1004e26:	f7ff ffc9 	bl	1004dbc <sym_SBSKADDCM455I5M7MUVGKVPKN7TISR42EIXKOLI>
 1004e2a:	4633      	mov	r3, r6
 1004e2c:	f99d 200f 	ldrsb.w	r2, [sp, #15]
 1004e30:	4628      	mov	r0, r5
 1004e32:	f000 fc1d 	bl	1005670 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>
 1004e36:	4601      	mov	r1, r0
 1004e38:	f994 0001 	ldrsb.w	r0, [r4, #1]
 1004e3c:	f7ff ff9a 	bl	1004d74 <sym_NYGF67KROVIGLFRXDTVZT5RA7QYXLOOU6FNR66A>
 1004e40:	70a0      	strb	r0, [r4, #2]
 1004e42:	4608      	mov	r0, r1
 1004e44:	b005      	add	sp, #20
 1004e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1004e48:	f993 2005 	ldrsb.w	r2, [r3, #5]
 1004e4c:	4621      	mov	r1, r4
 1004e4e:	4628      	mov	r0, r5
 1004e50:	9200      	str	r2, [sp, #0]
 1004e52:	4632      	mov	r2, r6
 1004e54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 1004e58:	f000 fc1b 	bl	1005692 <sym_4YHBVCYM7WDWUSNNCR55L4ELYTPDQHTPXNWX7AA>
 1004e5c:	e7eb      	b.n	1004e36 <sym_EIMCOZR7MKLMYB62EEWREERTUNHHQDK6ITFS5HQ+0x4a>
 1004e5e:	bf00      	nop
 1004e60:	21000ad4 	.word	0x21000ad4

01004e64 <sym_O5XDVUVJVGI67OXYHXFZUGAXHD4DKFKVMS2P3NA>:
 1004e64:	4909      	ldr	r1, [pc, #36]	; (1004e8c <sym_O5XDVUVJVGI67OXYHXFZUGAXHD4DKFKVMS2P3NA+0x28>)
 1004e66:	680b      	ldr	r3, [r1, #0]
 1004e68:	f893 2020 	ldrb.w	r2, [r3, #32]
 1004e6c:	b162      	cbz	r2, 1004e88 <sym_O5XDVUVJVGI67OXYHXFZUGAXHD4DKFKVMS2P3NA+0x24>
 1004e6e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 1004e72:	b14a      	cbz	r2, 1004e88 <sym_O5XDVUVJVGI67OXYHXFZUGAXHD4DKFKVMS2P3NA+0x24>
 1004e74:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 1004e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 1004e7a:	2301      	movs	r3, #1
 1004e7c:	79c9      	ldrb	r1, [r1, #7]
 1004e7e:	4083      	lsls	r3, r0
 1004e80:	b109      	cbz	r1, 1004e86 <sym_O5XDVUVJVGI67OXYHXFZUGAXHD4DKFKVMS2P3NA+0x22>
 1004e82:	6093      	str	r3, [r2, #8]
 1004e84:	4770      	bx	lr
 1004e86:	60d3      	str	r3, [r2, #12]
 1004e88:	4770      	bx	lr
 1004e8a:	bf00      	nop
 1004e8c:	21000ad4 	.word	0x21000ad4

01004e90 <sym_DINXTNKCSHYWKSOGFJLECC2P6Y7VHT5UJUX7RSQ>:
 1004e90:	4b04      	ldr	r3, [pc, #16]	; (1004ea4 <sym_DINXTNKCSHYWKSOGFJLECC2P6Y7VHT5UJUX7RSQ+0x14>)
 1004e92:	681b      	ldr	r3, [r3, #0]
 1004e94:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 1004e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 1004e9a:	2301      	movs	r3, #1
 1004e9c:	408b      	lsls	r3, r1
 1004e9e:	60d3      	str	r3, [r2, #12]
 1004ea0:	4770      	bx	lr
 1004ea2:	bf00      	nop
 1004ea4:	21000ad4 	.word	0x21000ad4

01004ea8 <sym_HYJVDKKJQTKLMNG7YVST4N7OHEC7S2J72M7FN3Q>:
 1004ea8:	4b07      	ldr	r3, [pc, #28]	; (1004ec8 <sym_HYJVDKKJQTKLMNG7YVST4N7OHEC7S2J72M7FN3Q+0x20>)
 1004eaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 1004eae:	681b      	ldr	r3, [r3, #0]
 1004eb0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
 1004eb4:	2200      	movs	r2, #0
 1004eb6:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
 1004eba:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
 1004ebe:	2207      	movs	r2, #7
 1004ec0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 1004ec4:	4770      	bx	lr
 1004ec6:	bf00      	nop
 1004ec8:	21000adc 	.word	0x21000adc

01004ecc <sym_CMW5Y2V4ZAQWO6OLYO7TFQKQPIHLUEEKEX6J7BY>:
 1004ecc:	4b02      	ldr	r3, [pc, #8]	; (1004ed8 <sym_CMW5Y2V4ZAQWO6OLYO7TFQKQPIHLUEEKEX6J7BY+0xc>)
 1004ece:	2200      	movs	r2, #0
 1004ed0:	681b      	ldr	r3, [r3, #0]
 1004ed2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 1004ed6:	4770      	bx	lr
 1004ed8:	21000adc 	.word	0x21000adc

01004edc <sym_I3Z2GQRGKQWA5EQS23LZRSTLKW6RHV35I6AIDQY>:
 1004edc:	4a0b      	ldr	r2, [pc, #44]	; (1004f0c <sym_I3Z2GQRGKQWA5EQS23LZRSTLKW6RHV35I6AIDQY+0x30>)
 1004ede:	f060 003f 	orn	r0, r0, #63	; 0x3f
 1004ee2:	7151      	strb	r1, [r2, #5]
 1004ee4:	2100      	movs	r1, #0
 1004ee6:	7110      	strb	r0, [r2, #4]
 1004ee8:	f852 3b04 	ldr.w	r3, [r2], #4
 1004eec:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
 1004ef0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
 1004ef4:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 1004ef8:	2202      	movs	r2, #2
 1004efa:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 1004efe:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
 1004f02:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
 1004f06:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
 1004f0a:	4770      	bx	lr
 1004f0c:	21000adc 	.word	0x21000adc

01004f10 <sym_7Y7KR3HN6VAJOI24WXYPIIIP72KGQRHDY43HZQA>:
 1004f10:	4b02      	ldr	r3, [pc, #8]	; (1004f1c <sym_7Y7KR3HN6VAJOI24WXYPIIIP72KGQRHDY43HZQA+0xc>)
 1004f12:	2201      	movs	r2, #1
 1004f14:	681b      	ldr	r3, [r3, #0]
 1004f16:	615a      	str	r2, [r3, #20]
 1004f18:	4770      	bx	lr
 1004f1a:	bf00      	nop
 1004f1c:	21000adc 	.word	0x21000adc

01004f20 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A>:
 1004f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1004f24:	460c      	mov	r4, r1
 1004f26:	68c7      	ldr	r7, [r0, #12]
 1004f28:	4606      	mov	r6, r0
 1004f2a:	4692      	mov	sl, r2
 1004f2c:	1aff      	subs	r7, r7, r3
 1004f2e:	f000 fc6c 	bl	100580a <sym_ZVPG4TIQ5MT5FAAK2XBB72FQGWEAY4OLYK2YDKY>
 1004f32:	7b25      	ldrb	r5, [r4, #12]
 1004f34:	1a3f      	subs	r7, r7, r0
 1004f36:	4c59      	ldr	r4, [pc, #356]	; (100509c <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x17c>)
 1004f38:	2d00      	cmp	r5, #0
 1004f3a:	f000 80a8 	beq.w	100508e <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x16e>
 1004f3e:	f000 f8eb 	bl	1005118 <sym_WX6UB7ZVT4L7KZVG3JEYCY7OOPKVKNWPNDVIYJY>
 1004f42:	2100      	movs	r1, #0
 1004f44:	4680      	mov	r8, r0
 1004f46:	7c30      	ldrb	r0, [r6, #16]
 1004f48:	f000 fc46 	bl	10057d8 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 1004f4c:	f894 b085 	ldrb.w	fp, [r4, #133]	; 0x85
 1004f50:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
 1004f54:	4605      	mov	r5, r0
 1004f56:	2201      	movs	r2, #1
 1004f58:	4658      	mov	r0, fp
 1004f5a:	f000 fbdc 	bl	1005716 <sym_CH74X7BFY3BCP6GTJTM32KEQ4GABIESQRZ7BQKA>
 1004f5e:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
 1004f62:	f8d4 905c 	ldr.w	r9, [r4, #92]	; 0x5c
 1004f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 1004f6a:	4a4d      	ldr	r2, [pc, #308]	; (10050a0 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x180>)
 1004f6c:	494d      	ldr	r1, [pc, #308]	; (10050a4 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x184>)
 1004f6e:	f8c9 3198 	str.w	r3, [r9, #408]	; 0x198
 1004f72:	f842 300a 	str.w	r3, [r2, sl]
 1004f76:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
 1004f7a:	0092      	lsls	r2, r2, #2
 1004f7c:	fa5f fc82 	uxtb.w	ip, r2
 1004f80:	f841 300c 	str.w	r3, [r1, ip]
 1004f84:	f501 7180 	add.w	r1, r1, #256	; 0x100
 1004f88:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
 1004f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 1004f90:	508b      	str	r3, [r1, r2]
 1004f92:	4a43      	ldr	r2, [pc, #268]	; (10050a0 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x180>)
 1004f94:	5013      	str	r3, [r2, r0]
 1004f96:	00ab      	lsls	r3, r5, #2
 1004f98:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
 1004f9c:	2200      	movs	r2, #0
 1004f9e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 1004fa2:	4658      	mov	r0, fp
 1004fa4:	f000 fbb7 	bl	1005716 <sym_CH74X7BFY3BCP6GTJTM32KEQ4GABIESQRZ7BQKA>
 1004fa8:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
 1004fac:	b29b      	uxth	r3, r3
 1004fae:	6871      	ldr	r1, [r6, #4]
 1004fb0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 1004fb4:	b2ed      	uxtb	r5, r5
 1004fb6:	3380      	adds	r3, #128	; 0x80
 1004fb8:	f505 75a8 	add.w	r5, r5, #336	; 0x150
 1004fbc:	50ca      	str	r2, [r1, r3]
 1004fbe:	4b38      	ldr	r3, [pc, #224]	; (10050a0 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x180>)
 1004fc0:	f8c9 2090 	str.w	r2, [r9, #144]	; 0x90
 1004fc4:	501a      	str	r2, [r3, r0]
 1004fc6:	f7ff ff6f 	bl	1004ea8 <sym_HYJVDKKJQTKLMNG7YVST4N7OHEC7S2J72M7FN3Q>
 1004fca:	2000      	movs	r0, #0
 1004fcc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 1004fd0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 1004fd4:	f7ff ff82 	bl	1004edc <sym_I3Z2GQRGKQWA5EQS23LZRSTLKW6RHV35I6AIDQY>
 1004fd8:	6873      	ldr	r3, [r6, #4]
 1004fda:	2101      	movs	r1, #1
 1004fdc:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 1004fe0:	f894 5089 	ldrb.w	r5, [r4, #137]	; 0x89
 1004fe4:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 1004fe8:	fa01 f505 	lsl.w	r5, r1, r5
 1004fec:	fa01 f303 	lsl.w	r3, r1, r3
 1004ff0:	431d      	orrs	r5, r3
 1004ff2:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
 1004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 1004ffa:	431d      	orrs	r5, r3
 1004ffc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 1005000:	2b00      	cmp	r3, #0
 1005002:	d046      	beq.n	1005092 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x172>
 1005004:	7c30      	ldrb	r0, [r6, #16]
 1005006:	f000 fbe7 	bl	10057d8 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>
 100500a:	4603      	mov	r3, r0
 100500c:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
 1005010:	2201      	movs	r2, #1
 1005012:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
 1005016:	f000 fb7e 	bl	1005716 <sym_CH74X7BFY3BCP6GTJTM32KEQ4GABIESQRZ7BQKA>
 100501a:	f894 c088 	ldrb.w	ip, [r4, #136]	; 0x88
 100501e:	0099      	lsls	r1, r3, #2
 1005020:	f8d6 e004 	ldr.w	lr, [r6, #4]
 1005024:	f04c 4800 	orr.w	r8, ip, #2147483648	; 0x80000000
 1005028:	b2db      	uxtb	r3, r3
 100502a:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 100502e:	fa02 fc0c 	lsl.w	ip, r2, ip
 1005032:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 1005036:	b289      	uxth	r1, r1
 1005038:	ea45 050c 	orr.w	r5, r5, ip
 100503c:	3180      	adds	r1, #128	; 0x80
 100503e:	f84e 8001 	str.w	r8, [lr, r1]
 1005042:	f894 e09e 	ldrb.w	lr, [r4, #158]	; 0x9e
 1005046:	4916      	ldr	r1, [pc, #88]	; (10050a0 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x180>)
 1005048:	f841 800e 	str.w	r8, [r1, lr]
 100504c:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
 1005050:	f8df e050 	ldr.w	lr, [pc, #80]	; 10050a4 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x184>
 1005054:	0089      	lsls	r1, r1, #2
 1005056:	fa5f f981 	uxtb.w	r9, r1
 100505a:	f84e 8009 	str.w	r8, [lr, r9]
 100505e:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 1005062:	448e      	add	lr, r1
 1005064:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
 1005068:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 100506c:	f8ce 1000 	str.w	r1, [lr]
 1005070:	f8df e02c 	ldr.w	lr, [pc, #44]	; 10050a0 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x180>
 1005074:	f84e 1000 	str.w	r1, [lr, r0]
 1005078:	6920      	ldr	r0, [r4, #16]
 100507a:	6871      	ldr	r1, [r6, #4]
 100507c:	1a3f      	subs	r7, r7, r0
 100507e:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 1005082:	4b09      	ldr	r3, [pc, #36]	; (10050a8 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x188>)
 1005084:	2000      	movs	r0, #0
 1005086:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
 100508a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100508e:	4629      	mov	r1, r5
 1005090:	e7b4      	b.n	1004ffc <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0xdc>
 1005092:	2900      	cmp	r1, #0
 1005094:	d1f5      	bne.n	1005082 <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x162>
 1005096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100509a:	e7f6      	b.n	100508a <sym_WUIUWIBGW5OMTDXHSV74AAKWYK2XOZTFU6UWX2A+0x16a>
 100509c:	21000ae4 	.word	0x21000ae4
 10050a0:	4100a080 	.word	0x4100a080
 10050a4:	41014080 	.word	0x41014080
 10050a8:	4100f000 	.word	0x4100f000

010050ac <sym_67HOWE745NQD34KTUUWSRFXD4DO3FU3W2QV4K7Q>:
 10050ac:	4a0a      	ldr	r2, [pc, #40]	; (10050d8 <sym_67HOWE745NQD34KTUUWSRFXD4DO3FU3W2QV4K7Q+0x2c>)
 10050ae:	f892 3086 	ldrb.w	r3, [r2, #134]	; 0x86
 10050b2:	f892 2085 	ldrb.w	r2, [r2, #133]	; 0x85
 10050b6:	009b      	lsls	r3, r3, #2
 10050b8:	4282      	cmp	r2, r0
 10050ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 10050be:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 10050c2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 10050c6:	bf14      	ite	ne
 10050c8:	f422 1280 	bicne.w	r2, r2, #1048576	; 0x100000
 10050cc:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 10050d0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
 10050d4:	4770      	bx	lr
 10050d6:	bf00      	nop
 10050d8:	21000ae4 	.word	0x21000ae4

010050dc <sym_T2RVLHSDSLG555X6VHAAC5QIC4D33RWMSUBWBUI>:
 10050dc:	4b09      	ldr	r3, [pc, #36]	; (1005104 <sym_T2RVLHSDSLG555X6VHAAC5QIC4D33RWMSUBWBUI+0x28>)
 10050de:	f990 2001 	ldrsb.w	r2, [r0, #1]
 10050e2:	6819      	ldr	r1, [r3, #0]
 10050e4:	b510      	push	{r4, lr}
 10050e6:	f991 4000 	ldrsb.w	r4, [r1]
 10050ea:	4294      	cmp	r4, r2
 10050ec:	d102      	bne.n	10050f4 <sym_T2RVLHSDSLG555X6VHAAC5QIC4D33RWMSUBWBUI+0x18>
 10050ee:	784b      	ldrb	r3, [r1, #1]
 10050f0:	7083      	strb	r3, [r0, #2]
 10050f2:	bd10      	pop	{r4, pc}
 10050f4:	685b      	ldr	r3, [r3, #4]
 10050f6:	f993 1000 	ldrsb.w	r1, [r3]
 10050fa:	4291      	cmp	r1, r2
 10050fc:	d1f9      	bne.n	10050f2 <sym_T2RVLHSDSLG555X6VHAAC5QIC4D33RWMSUBWBUI+0x16>
 10050fe:	785b      	ldrb	r3, [r3, #1]
 1005100:	e7f6      	b.n	10050f0 <sym_T2RVLHSDSLG555X6VHAAC5QIC4D33RWMSUBWBUI+0x14>
 1005102:	bf00      	nop
 1005104:	21000b8c 	.word	0x21000b8c

01005108 <sym_OZOSHR7RCVVSJSN34AHXEIGGITMYLPWJSOGU2GI>:
 1005108:	8802      	ldrh	r2, [r0, #0]
 100510a:	2000      	movs	r0, #0
 100510c:	4b01      	ldr	r3, [pc, #4]	; (1005114 <sym_OZOSHR7RCVVSJSN34AHXEIGGITMYLPWJSOGU2GI+0xc>)
 100510e:	819a      	strh	r2, [r3, #12]
 1005110:	4770      	bx	lr
 1005112:	bf00      	nop
 1005114:	21000b8c 	.word	0x21000b8c

01005118 <sym_WX6UB7ZVT4L7KZVG3JEYCY7OOPKVKNWPNDVIYJY>:
 1005118:	4b01      	ldr	r3, [pc, #4]	; (1005120 <sym_WX6UB7ZVT4L7KZVG3JEYCY7OOPKVKNWPNDVIYJY+0x8>)
 100511a:	7b58      	ldrb	r0, [r3, #13]
 100511c:	4770      	bx	lr
 100511e:	bf00      	nop
 1005120:	21000b8c 	.word	0x21000b8c

01005124 <sym_RXHDTMLLJFMOINTLQMBK6H6PC4W3R5DQSF6BYRQ>:
 1005124:	4a04      	ldr	r2, [pc, #16]	; (1005138 <sym_RXHDTMLLJFMOINTLQMBK6H6PC4W3R5DQSF6BYRQ+0x14>)
 1005126:	6893      	ldr	r3, [r2, #8]
 1005128:	f893 3020 	ldrb.w	r3, [r3, #32]
 100512c:	b10b      	cbz	r3, 1005132 <sym_RXHDTMLLJFMOINTLQMBK6H6PC4W3R5DQSF6BYRQ+0xe>
 100512e:	f992 300c 	ldrsb.w	r3, [r2, #12]
 1005132:	7003      	strb	r3, [r0, #0]
 1005134:	4770      	bx	lr
 1005136:	bf00      	nop
 1005138:	21000b8c 	.word	0x21000b8c

0100513c <sym_GFUMJNAE3BTH7FM3YLWM75IMGHGJTI3RB3O6Z3A>:
 100513c:	4b04      	ldr	r3, [pc, #16]	; (1005150 <sym_GFUMJNAE3BTH7FM3YLWM75IMGHGJTI3RB3O6Z3A+0x14>)
 100513e:	689a      	ldr	r2, [r3, #8]
 1005140:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 1005144:	b10b      	cbz	r3, 100514a <sym_GFUMJNAE3BTH7FM3YLWM75IMGHGJTI3RB3O6Z3A+0xe>
 1005146:	f992 3013 	ldrsb.w	r3, [r2, #19]
 100514a:	7003      	strb	r3, [r0, #0]
 100514c:	4770      	bx	lr
 100514e:	bf00      	nop
 1005150:	21000b8c 	.word	0x21000b8c

01005154 <sym_GNB7OCDUC5LXA5JH4GYV2XTFLXVO4KPQSALHSZI>:
 1005154:	b5f0      	push	{r4, r5, r6, r7, lr}
 1005156:	b085      	sub	sp, #20
 1005158:	4605      	mov	r5, r0
 100515a:	460c      	mov	r4, r1
 100515c:	4617      	mov	r7, r2
 100515e:	461e      	mov	r6, r3
 1005160:	f7ff fb42 	bl	10047e8 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY>
 1005164:	b140      	cbz	r0, 1005178 <sym_GNB7OCDUC5LXA5JH4GYV2XTFLXVO4KPQSALHSZI+0x24>
 1005166:	4633      	mov	r3, r6
 1005168:	463a      	mov	r2, r7
 100516a:	4621      	mov	r1, r4
 100516c:	4628      	mov	r0, r5
 100516e:	b005      	add	sp, #20
 1005170:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 1005174:	f000 ba9a 	b.w	10056ac <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY>
 1005178:	4a11      	ldr	r2, [pc, #68]	; (10051c0 <sym_GNB7OCDUC5LXA5JH4GYV2XTFLXVO4KPQSALHSZI+0x6c>)
 100517a:	6893      	ldr	r3, [r2, #8]
 100517c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 1005180:	b98b      	cbnz	r3, 10051a6 <sym_GNB7OCDUC5LXA5JH4GYV2XTFLXVO4KPQSALHSZI+0x52>
 1005182:	f10d 000f 	add.w	r0, sp, #15
 1005186:	4621      	mov	r1, r4
 1005188:	f7ff ffcc 	bl	1005124 <sym_RXHDTMLLJFMOINTLQMBK6H6PC4W3R5DQSF6BYRQ>
 100518c:	4633      	mov	r3, r6
 100518e:	f99d 200f 	ldrsb.w	r2, [sp, #15]
 1005192:	4628      	mov	r0, r5
 1005194:	f000 fa6c 	bl	1005670 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>
 1005198:	4605      	mov	r5, r0
 100519a:	4620      	mov	r0, r4
 100519c:	f7ff ff9e 	bl	10050dc <sym_T2RVLHSDSLG555X6VHAAC5QIC4D33RWMSUBWBUI>
 10051a0:	4628      	mov	r0, r5
 10051a2:	b005      	add	sp, #20
 10051a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10051a6:	6813      	ldr	r3, [r2, #0]
 10051a8:	4621      	mov	r1, r4
 10051aa:	6852      	ldr	r2, [r2, #4]
 10051ac:	4628      	mov	r0, r5
 10051ae:	f993 3000 	ldrsb.w	r3, [r3]
 10051b2:	f992 2000 	ldrsb.w	r2, [r2]
 10051b6:	9200      	str	r2, [sp, #0]
 10051b8:	4632      	mov	r2, r6
 10051ba:	f000 fa6a 	bl	1005692 <sym_4YHBVCYM7WDWUSNNCR55L4ELYTPDQHTPXNWX7AA>
 10051be:	e7eb      	b.n	1005198 <sym_GNB7OCDUC5LXA5JH4GYV2XTFLXVO4KPQSALHSZI+0x44>
 10051c0:	21000b8c 	.word	0x21000b8c

010051c4 <__udivmoddi4>:
 10051c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10051c8:	4686      	mov	lr, r0
 10051ca:	468c      	mov	ip, r1
 10051cc:	4608      	mov	r0, r1
 10051ce:	9e08      	ldr	r6, [sp, #32]
 10051d0:	4615      	mov	r5, r2
 10051d2:	4674      	mov	r4, lr
 10051d4:	4619      	mov	r1, r3
 10051d6:	2b00      	cmp	r3, #0
 10051d8:	f040 80c1 	bne.w	100535e <__udivmoddi4+0x19a>
 10051dc:	4285      	cmp	r5, r0
 10051de:	fab2 f282 	clz	r2, r2
 10051e2:	d945      	bls.n	1005270 <__udivmoddi4+0xac>
 10051e4:	b14a      	cbz	r2, 10051fa <__udivmoddi4+0x36>
 10051e6:	f1c2 0320 	rsb	r3, r2, #32
 10051ea:	fa00 fc02 	lsl.w	ip, r0, r2
 10051ee:	4095      	lsls	r5, r2
 10051f0:	4094      	lsls	r4, r2
 10051f2:	fa2e f303 	lsr.w	r3, lr, r3
 10051f6:	ea43 0c0c 	orr.w	ip, r3, ip
 10051fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 10051fe:	b2a8      	uxth	r0, r5
 1005200:	0c23      	lsrs	r3, r4, #16
 1005202:	fbbc f8fe 	udiv	r8, ip, lr
 1005206:	fb0e cc18 	mls	ip, lr, r8, ip
 100520a:	fb08 f900 	mul.w	r9, r8, r0
 100520e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 1005212:	4599      	cmp	r9, r3
 1005214:	d928      	bls.n	1005268 <__udivmoddi4+0xa4>
 1005216:	18eb      	adds	r3, r5, r3
 1005218:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 100521c:	d204      	bcs.n	1005228 <__udivmoddi4+0x64>
 100521e:	4599      	cmp	r9, r3
 1005220:	d902      	bls.n	1005228 <__udivmoddi4+0x64>
 1005222:	f1a8 0702 	sub.w	r7, r8, #2
 1005226:	442b      	add	r3, r5
 1005228:	eba3 0309 	sub.w	r3, r3, r9
 100522c:	b2a4      	uxth	r4, r4
 100522e:	fbb3 fcfe 	udiv	ip, r3, lr
 1005232:	fb0e 331c 	mls	r3, lr, ip, r3
 1005236:	fb0c f000 	mul.w	r0, ip, r0
 100523a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 100523e:	42a0      	cmp	r0, r4
 1005240:	d914      	bls.n	100526c <__udivmoddi4+0xa8>
 1005242:	192c      	adds	r4, r5, r4
 1005244:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 1005248:	d204      	bcs.n	1005254 <__udivmoddi4+0x90>
 100524a:	42a0      	cmp	r0, r4
 100524c:	d902      	bls.n	1005254 <__udivmoddi4+0x90>
 100524e:	f1ac 0302 	sub.w	r3, ip, #2
 1005252:	442c      	add	r4, r5
 1005254:	1a24      	subs	r4, r4, r0
 1005256:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 100525a:	b11e      	cbz	r6, 1005264 <__udivmoddi4+0xa0>
 100525c:	40d4      	lsrs	r4, r2
 100525e:	2300      	movs	r3, #0
 1005260:	6034      	str	r4, [r6, #0]
 1005262:	6073      	str	r3, [r6, #4]
 1005264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1005268:	4647      	mov	r7, r8
 100526a:	e7dd      	b.n	1005228 <__udivmoddi4+0x64>
 100526c:	4663      	mov	r3, ip
 100526e:	e7f1      	b.n	1005254 <__udivmoddi4+0x90>
 1005270:	bb92      	cbnz	r2, 10052d8 <__udivmoddi4+0x114>
 1005272:	1b43      	subs	r3, r0, r5
 1005274:	2101      	movs	r1, #1
 1005276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 100527a:	b2af      	uxth	r7, r5
 100527c:	0c20      	lsrs	r0, r4, #16
 100527e:	fbb3 fcfe 	udiv	ip, r3, lr
 1005282:	fb0e 331c 	mls	r3, lr, ip, r3
 1005286:	fb0c f807 	mul.w	r8, ip, r7
 100528a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 100528e:	4598      	cmp	r8, r3
 1005290:	d961      	bls.n	1005356 <__udivmoddi4+0x192>
 1005292:	18eb      	adds	r3, r5, r3
 1005294:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 1005298:	d204      	bcs.n	10052a4 <__udivmoddi4+0xe0>
 100529a:	4598      	cmp	r8, r3
 100529c:	d902      	bls.n	10052a4 <__udivmoddi4+0xe0>
 100529e:	f1ac 0002 	sub.w	r0, ip, #2
 10052a2:	442b      	add	r3, r5
 10052a4:	eba3 0308 	sub.w	r3, r3, r8
 10052a8:	b2a4      	uxth	r4, r4
 10052aa:	fbb3 fcfe 	udiv	ip, r3, lr
 10052ae:	fb0e 331c 	mls	r3, lr, ip, r3
 10052b2:	fb0c f707 	mul.w	r7, ip, r7
 10052b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 10052ba:	42a7      	cmp	r7, r4
 10052bc:	d94d      	bls.n	100535a <__udivmoddi4+0x196>
 10052be:	192c      	adds	r4, r5, r4
 10052c0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 10052c4:	d204      	bcs.n	10052d0 <__udivmoddi4+0x10c>
 10052c6:	42a7      	cmp	r7, r4
 10052c8:	d902      	bls.n	10052d0 <__udivmoddi4+0x10c>
 10052ca:	f1ac 0302 	sub.w	r3, ip, #2
 10052ce:	442c      	add	r4, r5
 10052d0:	1be4      	subs	r4, r4, r7
 10052d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 10052d6:	e7c0      	b.n	100525a <__udivmoddi4+0x96>
 10052d8:	f1c2 0320 	rsb	r3, r2, #32
 10052dc:	4095      	lsls	r5, r2
 10052de:	4094      	lsls	r4, r2
 10052e0:	fa20 f103 	lsr.w	r1, r0, r3
 10052e4:	fa2e f303 	lsr.w	r3, lr, r3
 10052e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 10052ec:	4090      	lsls	r0, r2
 10052ee:	b2af      	uxth	r7, r5
 10052f0:	4303      	orrs	r3, r0
 10052f2:	fbb1 fcfe 	udiv	ip, r1, lr
 10052f6:	fb0e 101c 	mls	r0, lr, ip, r1
 10052fa:	0c19      	lsrs	r1, r3, #16
 10052fc:	fb0c f807 	mul.w	r8, ip, r7
 1005300:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 1005304:	4588      	cmp	r8, r1
 1005306:	d922      	bls.n	100534e <__udivmoddi4+0x18a>
 1005308:	1869      	adds	r1, r5, r1
 100530a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 100530e:	d204      	bcs.n	100531a <__udivmoddi4+0x156>
 1005310:	4588      	cmp	r8, r1
 1005312:	d902      	bls.n	100531a <__udivmoddi4+0x156>
 1005314:	f1ac 0002 	sub.w	r0, ip, #2
 1005318:	4429      	add	r1, r5
 100531a:	eba1 0108 	sub.w	r1, r1, r8
 100531e:	b29b      	uxth	r3, r3
 1005320:	fbb1 fcfe 	udiv	ip, r1, lr
 1005324:	fb0e 111c 	mls	r1, lr, ip, r1
 1005328:	fb0c f707 	mul.w	r7, ip, r7
 100532c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 1005330:	429f      	cmp	r7, r3
 1005332:	d90e      	bls.n	1005352 <__udivmoddi4+0x18e>
 1005334:	18eb      	adds	r3, r5, r3
 1005336:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 100533a:	d204      	bcs.n	1005346 <__udivmoddi4+0x182>
 100533c:	429f      	cmp	r7, r3
 100533e:	d902      	bls.n	1005346 <__udivmoddi4+0x182>
 1005340:	f1ac 0102 	sub.w	r1, ip, #2
 1005344:	442b      	add	r3, r5
 1005346:	1bdb      	subs	r3, r3, r7
 1005348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 100534c:	e793      	b.n	1005276 <__udivmoddi4+0xb2>
 100534e:	4660      	mov	r0, ip
 1005350:	e7e3      	b.n	100531a <__udivmoddi4+0x156>
 1005352:	4661      	mov	r1, ip
 1005354:	e7f7      	b.n	1005346 <__udivmoddi4+0x182>
 1005356:	4660      	mov	r0, ip
 1005358:	e7a4      	b.n	10052a4 <__udivmoddi4+0xe0>
 100535a:	4663      	mov	r3, ip
 100535c:	e7b8      	b.n	10052d0 <__udivmoddi4+0x10c>
 100535e:	4283      	cmp	r3, r0
 1005360:	d906      	bls.n	1005370 <__udivmoddi4+0x1ac>
 1005362:	b916      	cbnz	r6, 100536a <__udivmoddi4+0x1a6>
 1005364:	2100      	movs	r1, #0
 1005366:	4608      	mov	r0, r1
 1005368:	e77c      	b.n	1005264 <__udivmoddi4+0xa0>
 100536a:	e9c6 e000 	strd	lr, r0, [r6]
 100536e:	e7f9      	b.n	1005364 <__udivmoddi4+0x1a0>
 1005370:	fab3 f783 	clz	r7, r3
 1005374:	b98f      	cbnz	r7, 100539a <__udivmoddi4+0x1d6>
 1005376:	4283      	cmp	r3, r0
 1005378:	d301      	bcc.n	100537e <__udivmoddi4+0x1ba>
 100537a:	4572      	cmp	r2, lr
 100537c:	d808      	bhi.n	1005390 <__udivmoddi4+0x1cc>
 100537e:	ebbe 0402 	subs.w	r4, lr, r2
 1005382:	eb60 0303 	sbc.w	r3, r0, r3
 1005386:	2001      	movs	r0, #1
 1005388:	469c      	mov	ip, r3
 100538a:	b91e      	cbnz	r6, 1005394 <__udivmoddi4+0x1d0>
 100538c:	2100      	movs	r1, #0
 100538e:	e769      	b.n	1005264 <__udivmoddi4+0xa0>
 1005390:	4638      	mov	r0, r7
 1005392:	e7fa      	b.n	100538a <__udivmoddi4+0x1c6>
 1005394:	e9c6 4c00 	strd	r4, ip, [r6]
 1005398:	e7f8      	b.n	100538c <__udivmoddi4+0x1c8>
 100539a:	f1c7 0c20 	rsb	ip, r7, #32
 100539e:	40bb      	lsls	r3, r7
 10053a0:	fa0e f507 	lsl.w	r5, lr, r7
 10053a4:	fa22 f40c 	lsr.w	r4, r2, ip
 10053a8:	fa2e f10c 	lsr.w	r1, lr, ip
 10053ac:	40ba      	lsls	r2, r7
 10053ae:	431c      	orrs	r4, r3
 10053b0:	fa20 f30c 	lsr.w	r3, r0, ip
 10053b4:	40b8      	lsls	r0, r7
 10053b6:	ea4f 4914 	mov.w	r9, r4, lsr #16
 10053ba:	4301      	orrs	r1, r0
 10053bc:	fa1f fe84 	uxth.w	lr, r4
 10053c0:	fbb3 f8f9 	udiv	r8, r3, r9
 10053c4:	fb09 3018 	mls	r0, r9, r8, r3
 10053c8:	0c0b      	lsrs	r3, r1, #16
 10053ca:	fb08 fa0e 	mul.w	sl, r8, lr
 10053ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 10053d2:	459a      	cmp	sl, r3
 10053d4:	d940      	bls.n	1005458 <__udivmoddi4+0x294>
 10053d6:	18e3      	adds	r3, r4, r3
 10053d8:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 10053dc:	d204      	bcs.n	10053e8 <__udivmoddi4+0x224>
 10053de:	459a      	cmp	sl, r3
 10053e0:	d902      	bls.n	10053e8 <__udivmoddi4+0x224>
 10053e2:	f1a8 0002 	sub.w	r0, r8, #2
 10053e6:	4423      	add	r3, r4
 10053e8:	eba3 030a 	sub.w	r3, r3, sl
 10053ec:	b289      	uxth	r1, r1
 10053ee:	fbb3 f8f9 	udiv	r8, r3, r9
 10053f2:	fb09 3318 	mls	r3, r9, r8, r3
 10053f6:	fb08 fe0e 	mul.w	lr, r8, lr
 10053fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 10053fe:	458e      	cmp	lr, r1
 1005400:	d92c      	bls.n	100545c <__udivmoddi4+0x298>
 1005402:	1861      	adds	r1, r4, r1
 1005404:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 1005408:	d204      	bcs.n	1005414 <__udivmoddi4+0x250>
 100540a:	458e      	cmp	lr, r1
 100540c:	d902      	bls.n	1005414 <__udivmoddi4+0x250>
 100540e:	f1a8 0302 	sub.w	r3, r8, #2
 1005412:	4421      	add	r1, r4
 1005414:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 1005418:	eba1 010e 	sub.w	r1, r1, lr
 100541c:	fba0 9802 	umull	r9, r8, r0, r2
 1005420:	4541      	cmp	r1, r8
 1005422:	46ce      	mov	lr, r9
 1005424:	4643      	mov	r3, r8
 1005426:	d302      	bcc.n	100542e <__udivmoddi4+0x26a>
 1005428:	d106      	bne.n	1005438 <__udivmoddi4+0x274>
 100542a:	454d      	cmp	r5, r9
 100542c:	d204      	bcs.n	1005438 <__udivmoddi4+0x274>
 100542e:	3801      	subs	r0, #1
 1005430:	ebb9 0e02 	subs.w	lr, r9, r2
 1005434:	eb68 0304 	sbc.w	r3, r8, r4
 1005438:	2e00      	cmp	r6, #0
 100543a:	d0a7      	beq.n	100538c <__udivmoddi4+0x1c8>
 100543c:	ebb5 020e 	subs.w	r2, r5, lr
 1005440:	eb61 0103 	sbc.w	r1, r1, r3
 1005444:	fa01 fc0c 	lsl.w	ip, r1, ip
 1005448:	fa22 f307 	lsr.w	r3, r2, r7
 100544c:	40f9      	lsrs	r1, r7
 100544e:	ea4c 0303 	orr.w	r3, ip, r3
 1005452:	e9c6 3100 	strd	r3, r1, [r6]
 1005456:	e799      	b.n	100538c <__udivmoddi4+0x1c8>
 1005458:	4640      	mov	r0, r8
 100545a:	e7c5      	b.n	10053e8 <__udivmoddi4+0x224>
 100545c:	4643      	mov	r3, r8
 100545e:	e7d9      	b.n	1005414 <__udivmoddi4+0x250>

01005460 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
 1005460:	4770      	bx	lr

01005462 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
 1005462:	b570      	push	{r4, r5, r6, lr}
 1005464:	2400      	movs	r4, #0
 1005466:	f7fa fed3 	bl	1000210 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
 100546a:	4605      	mov	r5, r0
 100546c:	4626      	mov	r6, r4
 100546e:	b2e0      	uxtb	r0, r4
 1005470:	4285      	cmp	r5, r0
 1005472:	d800      	bhi.n	1005476 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x14>
 1005474:	bd70      	pop	{r4, r5, r6, pc}
 1005476:	f7fa fed1 	bl	100021c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
 100547a:	3401      	adds	r4, #1
 100547c:	8486      	strh	r6, [r0, #36]	; 0x24
 100547e:	f880 6026 	strb.w	r6, [r0, #38]	; 0x26
 1005482:	e7f4      	b.n	100546e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>

01005484 <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ>:
 1005484:	b513      	push	{r0, r1, r4, lr}
 1005486:	460c      	mov	r4, r1
 1005488:	f10d 0203 	add.w	r2, sp, #3
 100548c:	a901      	add	r1, sp, #4
 100548e:	f7fc fec7 	bl	1002220 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
 1005492:	f89d 3003 	ldrb.w	r3, [sp, #3]
 1005496:	9801      	ldr	r0, [sp, #4]
 1005498:	b10b      	cbz	r3, 100549e <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ+0x1a>
 100549a:	b104      	cbz	r4, 100549e <sym_IMCMW453ZJ66QFUMKYAHCIUALRWKAF5DZAM5VCQ+0x1a>
 100549c:	3001      	adds	r0, #1
 100549e:	b002      	add	sp, #8
 10054a0:	bd10      	pop	{r4, pc}

010054a2 <mpsl_low_priority_process>:
 10054a2:	f7fe b975 	b.w	1003790 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

010054a6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
 10054a6:	4770      	bx	lr

010054a8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
 10054a8:	bf20      	wfe
 10054aa:	4770      	bx	lr

010054ac <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
 10054ac:	4291      	cmp	r1, r2
 10054ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10054b0:	d303      	bcc.n	10054ba <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0xe>
 10054b2:	2179      	movs	r1, #121	; 0x79
 10054b4:	2096      	movs	r0, #150	; 0x96
 10054b6:	f7fe f8b5 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10054ba:	fab2 f382 	clz	r3, r2
 10054be:	b13b      	cbz	r3, 10054d0 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x24>
 10054c0:	f1c3 0420 	rsb	r4, r3, #32
 10054c4:	4099      	lsls	r1, r3
 10054c6:	409a      	lsls	r2, r3
 10054c8:	fa20 f404 	lsr.w	r4, r0, r4
 10054cc:	4098      	lsls	r0, r3
 10054ce:	4321      	orrs	r1, r4
 10054d0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 10054d4:	b293      	uxth	r3, r2
 10054d6:	0c04      	lsrs	r4, r0, #16
 10054d8:	b287      	uxth	r7, r0
 10054da:	fbb1 f5fc 	udiv	r5, r1, ip
 10054de:	fb0c 1e15 	mls	lr, ip, r5, r1
 10054e2:	fb05 f603 	mul.w	r6, r5, r3
 10054e6:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 10054ea:	eb0e 4010 	add.w	r0, lr, r0, lsr #16
 10054ee:	4286      	cmp	r6, r0
 10054f0:	d905      	bls.n	10054fe <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
 10054f2:	1a36      	subs	r6, r6, r0
 10054f4:	4296      	cmp	r6, r2
 10054f6:	bf8c      	ite	hi
 10054f8:	2602      	movhi	r6, #2
 10054fa:	2601      	movls	r6, #1
 10054fc:	1bad      	subs	r5, r5, r6
 10054fe:	eb04 4101 	add.w	r1, r4, r1, lsl #16
 1005502:	0428      	lsls	r0, r5, #16
 1005504:	fb05 1112 	mls	r1, r5, r2, r1
 1005508:	fbb1 f4fc 	udiv	r4, r1, ip
 100550c:	fb0c 1114 	mls	r1, ip, r4, r1
 1005510:	4363      	muls	r3, r4
 1005512:	eb07 4101 	add.w	r1, r7, r1, lsl #16
 1005516:	428b      	cmp	r3, r1
 1005518:	d905      	bls.n	1005526 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x7a>
 100551a:	1a5b      	subs	r3, r3, r1
 100551c:	4293      	cmp	r3, r2
 100551e:	bf8c      	ite	hi
 1005520:	2202      	movhi	r2, #2
 1005522:	2201      	movls	r2, #1
 1005524:	1aa4      	subs	r4, r4, r2
 1005526:	4320      	orrs	r0, r4
 1005528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0100552a <sym_4Y4ARSTRVIPQLTXGLUWZWYDTCBQDIAZM7OSJMFA>:
 100552a:	2800      	cmp	r0, #0
 100552c:	bf0c      	ite	eq
 100552e:	f06f 0015 	mvneq.w	r0, #21
 1005532:	2000      	movne	r0, #0
 1005534:	4770      	bx	lr

01005536 <sym_IL3ZRHWPWLB2SOTTTEFWZ7GJ4VRAXNG6Q2VLU6Y>:
 1005536:	2000      	movs	r0, #0
 1005538:	4770      	bx	lr

0100553a <sym_A27TYSKW72QFVPJ2RRTVD5S66CFA75MDALH2D5Q>:
 100553a:	2307      	movs	r3, #7
 100553c:	7003      	strb	r3, [r0, #0]
 100553e:	2000      	movs	r0, #0
 1005540:	4770      	bx	lr

01005542 <sym_BMAMBVU5HJG5FJPIVHJ4F73FU53DKV7LWOFHS6A>:
 1005542:	2000      	movs	r0, #0
 1005544:	4770      	bx	lr

01005546 <sym_TGL42OWATLCE6MB5Q4GTEKRMEAJGST6R4PBJWCY>:
 1005546:	2000      	movs	r0, #0
 1005548:	4770      	bx	lr

0100554a <nrf_raal_timeslot_request>:
 100554a:	b510      	push	{r4, lr}
 100554c:	4604      	mov	r4, r0
 100554e:	f7fe fb0f 	bl	1003b70 <nrf_raal_timeslot_us_left_get>
 1005552:	42a0      	cmp	r0, r4
 1005554:	bf94      	ite	ls
 1005556:	2000      	movls	r0, #0
 1005558:	2001      	movhi	r0, #1
 100555a:	bd10      	pop	{r4, pc}

0100555c <nrf_802154_fal_tx_power_split>:
 100555c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 100555e:	f1a0 040b 	sub.w	r4, r0, #11
 1005562:	460e      	mov	r6, r1
 1005564:	4615      	mov	r5, r2
 1005566:	b2e1      	uxtb	r1, r4
 1005568:	290f      	cmp	r1, #15
 100556a:	d903      	bls.n	1005574 <nrf_802154_fal_tx_power_split+0x18>
 100556c:	214f      	movs	r1, #79	; 0x4f
 100556e:	2064      	movs	r0, #100	; 0x64
 1005570:	f7fe f858 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 1005574:	f10d 0303 	add.w	r3, sp, #3
 1005578:	4632      	mov	r2, r6
 100557a:	2004      	movs	r0, #4
 100557c:	f7fa fe06 	bl	100018c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
 1005580:	4603      	mov	r3, r0
 1005582:	b108      	cbz	r0, 1005588 <nrf_802154_fal_tx_power_split+0x2c>
 1005584:	2158      	movs	r1, #88	; 0x58
 1005586:	e7f2      	b.n	100556e <nrf_802154_fal_tx_power_split+0x12>
 1005588:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 100558c:	a901      	add	r1, sp, #4
 100558e:	f99d 0003 	ldrsb.w	r0, [sp, #3]
 1005592:	f604 1465 	addw	r4, r4, #2405	; 0x965
 1005596:	b2a2      	uxth	r2, r4
 1005598:	f7ff f91c 	bl	10047d4 <mpsl_fem_tx_power_split>
 100559c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 10055a0:	702b      	strb	r3, [r5, #0]
 10055a2:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 10055a6:	f8a5 3001 	strh.w	r3, [r5, #1]
 10055aa:	b002      	add	sp, #8
 10055ac:	bd70      	pop	{r4, r5, r6, pc}

010055ae <sym_RF2QJNHUN2S5V3B6FA5DOJGMGXMDILBVJFVWYLQ>:
 10055ae:	4770      	bx	lr

010055b0 <sym_RF2QJNHUN2S5V3B6FA5DOJGMGXMDILBVJFVWYLQ>:
 10055b0:	b508      	push	{r3, lr}
 10055b2:	f7fe fd1d 	bl	1003ff0 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI>
 10055b6:	f7fe ffb7 	bl	1004528 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ>
 10055ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 10055be:	f7ff b82d 	b.w	100461c <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI>

010055c2 <sym_RF2QJNHUN2S5V3B6FA5DOJGMGXMDILBVJFVWYLQ>:
 10055c2:	b508      	push	{r3, lr}
 10055c4:	f7fe fd5e 	bl	1004084 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI>
 10055c8:	f7fe ffd6 	bl	1004578 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ>
 10055cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 10055d0:	f7ff b858 	b.w	1004684 <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI>

010055d4 <sym_RF2QJNHUN2S5V3B6FA5DOJGMGXMDILBVJFVWYLQ>:
 10055d4:	b508      	push	{r3, lr}
 10055d6:	f7fe fd9d 	bl	1004114 <sym_XQQC7DI52UHG7BIURBV252X7SZWL3JPD3LKBYJI>
 10055da:	f7fe fff3 	bl	10045c4 <sym_7JGJEXVFEWQEZL3MCSDVZEG5KMWHR5ENDSCZJWQ>
 10055de:	f7ff f885 	bl	10046ec <sym_2XRKTTTVDATS5VDOA4KWVUSMCUSZP3UOIFOXDGI>
 10055e2:	f7ff fc95 	bl	1004f10 <sym_7Y7KR3HN6VAJOI24WXYPIIIP72KGQRHDY43HZQA>
 10055e6:	f000 f90f 	bl	1005808 <sym_CYPFJQT7BJKE7MOREHIKZCNLQC7DT5MGP65YPPA>
 10055ea:	2001      	movs	r0, #1
 10055ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 10055f0:	f7ff bd5c 	b.w	10050ac <sym_67HOWE745NQD34KTUUWSRFXD4DO3FU3W2QV4K7Q>

010055f4 <sym_CWYJP5AO65P7XHBMWQXAFTTGY24CJNIDSF2YHIY>:
 10055f4:	2000      	movs	r0, #0
 10055f6:	4770      	bx	lr

010055f8 <sym_CWYJP5AO65P7XHBMWQXAFTTGY24CJNIDSF2YHIY>:
 10055f8:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 10055fc:	2072      	movs	r0, #114	; 0x72
 10055fe:	b508      	push	{r3, lr}
 1005600:	f7fe f810 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

01005604 <sym_CWYJP5AO65P7XHBMWQXAFTTGY24CJNIDSF2YHIY>:
 1005604:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 1005608:	2071      	movs	r0, #113	; 0x71
 100560a:	b508      	push	{r3, lr}
 100560c:	f7fe f80a 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

01005610 <sym_CWYJP5AO65P7XHBMWQXAFTTGY24CJNIDSF2YHIY>:
 1005610:	f240 317e 	movw	r1, #894	; 0x37e
 1005614:	2076      	movs	r0, #118	; 0x76
 1005616:	b508      	push	{r3, lr}
 1005618:	f7fe f804 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0100561c <sym_XNMRKZF5CEPUCNC7H3MCZ4RJGAAXCHYWMXKPUBY>:
 100561c:	2000      	movs	r0, #0
 100561e:	4770      	bx	lr

01005620 <sym_XNMRKZF5CEPUCNC7H3MCZ4RJGAAXCHYWMXKPUBY>:
 1005620:	f240 21d1 	movw	r1, #721	; 0x2d1
 1005624:	2072      	movs	r0, #114	; 0x72
 1005626:	b508      	push	{r3, lr}
 1005628:	f7fd fffc 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0100562c <sym_XNMRKZF5CEPUCNC7H3MCZ4RJGAAXCHYWMXKPUBY>:
 100562c:	f240 3105 	movw	r1, #773	; 0x305
 1005630:	2071      	movs	r0, #113	; 0x71
 1005632:	b508      	push	{r3, lr}
 1005634:	f7fd fff6 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

01005638 <sym_XNMRKZF5CEPUCNC7H3MCZ4RJGAAXCHYWMXKPUBY>:
 1005638:	f240 31a3 	movw	r1, #931	; 0x3a3
 100563c:	2076      	movs	r0, #118	; 0x76
 100563e:	b508      	push	{r3, lr}
 1005640:	f7fd fff0 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

01005644 <sym_WXLIXJ6QOU4T4ABECUR3IYLVM53BXB3D7HBIPGA>:
 1005644:	2000      	movs	r0, #0
 1005646:	4770      	bx	lr

01005648 <sym_WXLIXJ6QOU4T4ABECUR3IYLVM53BXB3D7HBIPGA>:
 1005648:	f240 21d9 	movw	r1, #729	; 0x2d9
 100564c:	2072      	movs	r0, #114	; 0x72
 100564e:	b508      	push	{r3, lr}
 1005650:	f7fd ffe8 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

01005654 <sym_WXLIXJ6QOU4T4ABECUR3IYLVM53BXB3D7HBIPGA>:
 1005654:	f240 310d 	movw	r1, #781	; 0x30d
 1005658:	2071      	movs	r0, #113	; 0x71
 100565a:	b508      	push	{r3, lr}
 100565c:	f7fd ffe2 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

01005660 <sym_WXLIXJ6QOU4T4ABECUR3IYLVM53BXB3D7HBIPGA>:
 1005660:	f240 31ab 	movw	r1, #939	; 0x3ab
 1005664:	2076      	movs	r0, #118	; 0x76
 1005666:	b508      	push	{r3, lr}
 1005668:	f7fd ffdc 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0100566c <mpsl_fem_init>:
 100566c:	f7ff bef8 	b.w	1005460 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

01005670 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
 1005670:	1a80      	subs	r0, r0, r2
 1005672:	f300 0007 	ssat	r0, #8, r0
 1005676:	b538      	push	{r3, r4, r5, lr}
 1005678:	460d      	mov	r5, r1
 100567a:	4614      	mov	r4, r2
 100567c:	b259      	sxtb	r1, r3
 100567e:	b240      	sxtb	r0, r0
 1005680:	f7fa fdb8 	bl	10001f4 <mpsl_tx_power_radio_supported_power_adjust>
 1005684:	2300      	movs	r3, #0
 1005686:	7028      	strb	r0, [r5, #0]
 1005688:	4420      	add	r0, r4
 100568a:	706c      	strb	r4, [r5, #1]
 100568c:	b240      	sxtb	r0, r0
 100568e:	70ab      	strb	r3, [r5, #2]
 1005690:	bd38      	pop	{r3, r4, r5, pc}

01005692 <sym_4YHBVCYM7WDWUSNNCR55L4ELYTPDQHTPXNWX7AA>:
 1005692:	b470      	push	{r4, r5, r6}
 1005694:	f99d 500c 	ldrsb.w	r5, [sp, #12]
 1005698:	461e      	mov	r6, r3
 100569a:	4613      	mov	r3, r2
 100569c:	1b44      	subs	r4, r0, r5
 100569e:	2c00      	cmp	r4, #0
 10056a0:	bfd4      	ite	le
 10056a2:	462a      	movle	r2, r5
 10056a4:	4632      	movgt	r2, r6
 10056a6:	bc70      	pop	{r4, r5, r6}
 10056a8:	f7ff bfe2 	b.w	1005670 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

010056ac <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY>:
 10056ac:	b513      	push	{r0, r1, r4, lr}
 10056ae:	460c      	mov	r4, r1
 10056b0:	4611      	mov	r1, r2
 10056b2:	aa01      	add	r2, sp, #4
 10056b4:	f7ff f8a0 	bl	10047f8 <sym_UZUI4YQAV7IWWBS4QSQS6JUSLV3JFA6COL6SGJQ>
 10056b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 10056bc:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 10056c0:	7023      	strb	r3, [r4, #0]
 10056c2:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 10056c6:	f8a4 3001 	strh.w	r3, [r4, #1]
 10056ca:	b002      	add	sp, #8
 10056cc:	bd10      	pop	{r4, pc}

010056ce <sym_MMQVX4NQEXGJAV6DVHL7YM6KR5WCHDCVACPTN3I>:
 10056ce:	b508      	push	{r3, lr}
 10056d0:	4603      	mov	r3, r0
 10056d2:	2000      	movs	r0, #0
 10056d4:	fa43 f200 	asr.w	r2, r3, r0
 10056d8:	07d2      	lsls	r2, r2, #31
 10056da:	d407      	bmi.n	10056ec <sym_MMQVX4NQEXGJAV6DVHL7YM6KR5WCHDCVACPTN3I+0x1e>
 10056dc:	3001      	adds	r0, #1
 10056de:	2804      	cmp	r0, #4
 10056e0:	d1f8      	bne.n	10056d4 <sym_MMQVX4NQEXGJAV6DVHL7YM6KR5WCHDCVACPTN3I+0x6>
 10056e2:	f44f 7181 	mov.w	r1, #258	; 0x102
 10056e6:	2072      	movs	r0, #114	; 0x72
 10056e8:	f7fd ff9c 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10056ec:	b120      	cbz	r0, 10056f8 <sym_MMQVX4NQEXGJAV6DVHL7YM6KR5WCHDCVACPTN3I+0x2a>
 10056ee:	2801      	cmp	r0, #1
 10056f0:	d002      	beq.n	10056f8 <sym_MMQVX4NQEXGJAV6DVHL7YM6KR5WCHDCVACPTN3I+0x2a>
 10056f2:	2802      	cmp	r0, #2
 10056f4:	bf18      	it	ne
 10056f6:	2003      	movne	r0, #3
 10056f8:	bd08      	pop	{r3, pc}

010056fa <sym_CH74X7BFY3BCP6GTJTM32KEQ4GABIESQRZ7BQKA>:
 10056fa:	0089      	lsls	r1, r1, #2
 10056fc:	4282      	cmp	r2, r0
 10056fe:	bf14      	ite	ne
 1005700:	3160      	addne	r1, #96	; 0x60
 1005702:	3130      	addeq	r1, #48	; 0x30
 1005704:	b2c8      	uxtb	r0, r1
 1005706:	4770      	bx	lr

01005708 <sym_CH74X7BFY3BCP6GTJTM32KEQ4GABIESQRZ7BQKA>:
 1005708:	0089      	lsls	r1, r1, #2
 100570a:	4282      	cmp	r2, r0
 100570c:	bf14      	ite	ne
 100570e:	3160      	addne	r1, #96	; 0x60
 1005710:	3130      	addeq	r1, #48	; 0x30
 1005712:	b2c8      	uxtb	r0, r1
 1005714:	4770      	bx	lr

01005716 <sym_CH74X7BFY3BCP6GTJTM32KEQ4GABIESQRZ7BQKA>:
 1005716:	0089      	lsls	r1, r1, #2
 1005718:	4282      	cmp	r2, r0
 100571a:	bf14      	ite	ne
 100571c:	3160      	addne	r1, #96	; 0x60
 100571e:	3130      	addeq	r1, #48	; 0x30
 1005720:	b2c8      	uxtb	r0, r1
 1005722:	4770      	bx	lr

01005724 <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY>:
 1005724:	7e03      	ldrb	r3, [r0, #24]
 1005726:	b10b      	cbz	r3, 100572c <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY+0x8>
 1005728:	f990 3008 	ldrsb.w	r3, [r0, #8]
 100572c:	700b      	strb	r3, [r1, #0]
 100572e:	4770      	bx	lr

01005730 <sym_R3CY5O5PWFOP6PPHA2W2A2Q2GG2C3KWHG5ABJVI>:
 1005730:	b507      	push	{r0, r1, r2, lr}
 1005732:	460a      	mov	r2, r1
 1005734:	f10d 0107 	add.w	r1, sp, #7
 1005738:	f7ff fff4 	bl	1005724 <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY>
 100573c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 1005740:	f992 2000 	ldrsb.w	r2, [r2]
 1005744:	429a      	cmp	r2, r3
 1005746:	bf14      	ite	ne
 1005748:	f06f 0015 	mvnne.w	r0, #21
 100574c:	2000      	moveq	r0, #0
 100574e:	b003      	add	sp, #12
 1005750:	f85d fb04 	ldr.w	pc, [sp], #4

01005754 <sym_K27LNRXEE7HXLOB6ANRAZAL5UKZYP4WXS7EA7XI>:
 1005754:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 1005758:	b10b      	cbz	r3, 100575e <sym_K27LNRXEE7HXLOB6ANRAZAL5UKZYP4WXS7EA7XI+0xa>
 100575a:	f990 3009 	ldrsb.w	r3, [r0, #9]
 100575e:	700b      	strb	r3, [r1, #0]
 1005760:	4770      	bx	lr

01005762 <sym_NSB5Z4D72O5VWEUXZVDQIBPNQ5UV64KEO7NVTOQ>:
 1005762:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 1005766:	4606      	mov	r6, r0
 1005768:	460c      	mov	r4, r1
 100576a:	4615      	mov	r5, r2
 100576c:	461f      	mov	r7, r3
 100576e:	f89d 8020 	ldrb.w	r8, [sp, #32]
 1005772:	f7ff f839 	bl	10047e8 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY>
 1005776:	b140      	cbz	r0, 100578a <sym_NSB5Z4D72O5VWEUXZVDQIBPNQ5UV64KEO7NVTOQ+0x28>
 1005778:	4643      	mov	r3, r8
 100577a:	463a      	mov	r2, r7
 100577c:	4629      	mov	r1, r5
 100577e:	4620      	mov	r0, r4
 1005780:	b002      	add	sp, #8
 1005782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1005786:	f7ff bf91 	b.w	10056ac <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY>
 100578a:	f10d 0107 	add.w	r1, sp, #7
 100578e:	4630      	mov	r0, r6
 1005790:	f7ff ffc8 	bl	1005724 <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY>
 1005794:	4643      	mov	r3, r8
 1005796:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 100579a:	4629      	mov	r1, r5
 100579c:	4620      	mov	r0, r4
 100579e:	f7ff ff67 	bl	1005670 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>
 10057a2:	b002      	add	sp, #8
 10057a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

010057a8 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>:
 10057a8:	b508      	push	{r3, lr}
 10057aa:	4603      	mov	r3, r0
 10057ac:	2000      	movs	r0, #0
 10057ae:	fa43 f200 	asr.w	r2, r3, r0
 10057b2:	07d2      	lsls	r2, r2, #31
 10057b4:	d501      	bpl.n	10057ba <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x12>
 10057b6:	b141      	cbz	r1, 10057ca <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x22>
 10057b8:	2100      	movs	r1, #0
 10057ba:	3001      	adds	r0, #1
 10057bc:	2804      	cmp	r0, #4
 10057be:	d1f6      	bne.n	10057ae <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x6>
 10057c0:	f240 1109 	movw	r1, #265	; 0x109
 10057c4:	2071      	movs	r0, #113	; 0x71
 10057c6:	f7fd ff2d 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10057ca:	b120      	cbz	r0, 10057d6 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x2e>
 10057cc:	2801      	cmp	r0, #1
 10057ce:	d002      	beq.n	10057d6 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x2e>
 10057d0:	2802      	cmp	r0, #2
 10057d2:	bf18      	it	ne
 10057d4:	2003      	movne	r0, #3
 10057d6:	bd08      	pop	{r3, pc}

010057d8 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y>:
 10057d8:	b508      	push	{r3, lr}
 10057da:	4603      	mov	r3, r0
 10057dc:	2000      	movs	r0, #0
 10057de:	fa43 f200 	asr.w	r2, r3, r0
 10057e2:	07d2      	lsls	r2, r2, #31
 10057e4:	d501      	bpl.n	10057ea <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x12>
 10057e6:	b141      	cbz	r1, 10057fa <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x22>
 10057e8:	2100      	movs	r1, #0
 10057ea:	3001      	adds	r0, #1
 10057ec:	2804      	cmp	r0, #4
 10057ee:	d1f6      	bne.n	10057de <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x6>
 10057f0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 10057f4:	2076      	movs	r0, #118	; 0x76
 10057f6:	f7fd ff15 	bl	1003624 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
 10057fa:	b120      	cbz	r0, 1005806 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x2e>
 10057fc:	2801      	cmp	r0, #1
 10057fe:	d002      	beq.n	1005806 <sym_Q3PCREQWJ647GAN7AY4G5RRZLSXWCOCP6Q7R62Y+0x2e>
 1005800:	2802      	cmp	r0, #2
 1005802:	bf18      	it	ne
 1005804:	2003      	movne	r0, #3
 1005806:	bd08      	pop	{r3, pc}

01005808 <sym_CYPFJQT7BJKE7MOREHIKZCNLQC7DT5MGP65YPPA>:
 1005808:	4770      	bx	lr

0100580a <sym_ZVPG4TIQ5MT5FAAK2XBB72FQGWEAY4OLYK2YDKY>:
 100580a:	2003      	movs	r0, #3
 100580c:	4770      	bx	lr
	...

01005810 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 1005810:	4b01      	ldr	r3, [pc, #4]	; (1005818 <char_out+0x8>)
 1005812:	681b      	ldr	r3, [r3, #0]
 1005814:	4718      	bx	r3
 1005816:	bf00      	nop
 1005818:	2100000c 	.word	0x2100000c

0100581c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 100581c:	b507      	push	{r0, r1, r2, lr}
 100581e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 1005820:	2100      	movs	r1, #0
 1005822:	4602      	mov	r2, r0
 1005824:	9100      	str	r1, [sp, #0]
 1005826:	4803      	ldr	r0, [pc, #12]	; (1005834 <vprintk+0x18>)
 1005828:	f000 f914 	bl	1005a54 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 100582c:	b003      	add	sp, #12
 100582e:	f85d fb04 	ldr.w	pc, [sp], #4
 1005832:	bf00      	nop
 1005834:	01005811 	.word	0x01005811

01005838 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
 1005838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100583c:	8b05      	ldrh	r5, [r0, #24]
{
 100583e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
 1005840:	0728      	lsls	r0, r5, #28
{
 1005842:	4690      	mov	r8, r2
	if (processing) {
 1005844:	d411      	bmi.n	100586a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
 1005846:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1005848:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
 100584c:	f040 80cd 	bne.w	10059ea <process_event+0x1b2>
			evt = process_recheck(mgr);
 1005850:	4620      	mov	r0, r4
 1005852:	f00c fcce 	bl	10121f2 <process_recheck>
		}

		if (evt == EVT_NOP) {
 1005856:	b178      	cbz	r0, 1005878 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
 1005858:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 100585a:	8b21      	ldrh	r1, [r4, #24]
 100585c:	2804      	cmp	r0, #4
 100585e:	d811      	bhi.n	1005884 <process_event+0x4c>
 1005860:	e8df f000 	tbb	[pc, r0]
 1005864:	856d10c3 	.word	0x856d10c3
 1005868:	95          	.byte	0x95
 1005869:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
 100586a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
 100586c:	bf0c      	ite	eq
 100586e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1005872:	f045 0520 	orrne.w	r5, r5, #32
 1005876:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 1005878:	f388 8811 	msr	BASEPRI, r8
 100587c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
 1005880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1005884:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 1005888:	45aa      	cmp	sl, r5
 100588a:	f000 80a6 	beq.w	10059da <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 100588e:	2700      	movs	r7, #0
 1005890:	46b9      	mov	r9, r7
 1005892:	463e      	mov	r6, r7
 1005894:	68a3      	ldr	r3, [r4, #8]
 1005896:	2b00      	cmp	r3, #0
 1005898:	f000 80bd 	beq.w	1005a16 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 100589c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
 10058a0:	8321      	strh	r1, [r4, #24]
 10058a2:	f388 8811 	msr	BASEPRI, r8
 10058a6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 10058aa:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 10058ac:	2900      	cmp	r1, #0
 10058ae:	f000 80bb 	beq.w	1005a28 <process_event+0x1f0>
	return node->next;
 10058b2:	680d      	ldr	r5, [r1, #0]
 10058b4:	2900      	cmp	r1, #0
 10058b6:	f000 80b7 	beq.w	1005a28 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
 10058ba:	4633      	mov	r3, r6
 10058bc:	4652      	mov	r2, sl
 10058be:	4620      	mov	r0, r4
 10058c0:	f8d1 8004 	ldr.w	r8, [r1, #4]
 10058c4:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 10058c6:	2d00      	cmp	r5, #0
 10058c8:	d076      	beq.n	10059b8 <process_event+0x180>
 10058ca:	682b      	ldr	r3, [r5, #0]
 10058cc:	4629      	mov	r1, r5
 10058ce:	461d      	mov	r5, r3
 10058d0:	e7f0      	b.n	10058b4 <process_event+0x7c>
 10058d2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
 10058d6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
 10058d8:	2a01      	cmp	r2, #1
 10058da:	d81b      	bhi.n	1005914 <process_event+0xdc>
	list->head = NULL;
 10058dc:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10058de:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
 10058e2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
 10058e4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10058e6:	b289      	uxth	r1, r1
	list->tail = NULL;
 10058e8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
 10058ec:	d109      	bne.n	1005902 <process_event+0xca>
 10058ee:	463b      	mov	r3, r7
 10058f0:	e003      	b.n	10058fa <process_event+0xc2>
				mgr->refs += 1U;
 10058f2:	8b62      	ldrh	r2, [r4, #26]
 10058f4:	3201      	adds	r2, #1
 10058f6:	8362      	strh	r2, [r4, #26]
	return node->next;
 10058f8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
 10058fa:	2b00      	cmp	r3, #0
 10058fc:	d1f9      	bne.n	10058f2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10058fe:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
 1005902:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 1005904:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
 1005906:	f00c fc74 	bl	10121f2 <process_recheck>
 100590a:	2800      	cmp	r0, #0
 100590c:	d07b      	beq.n	1005a06 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 100590e:	f041 0120 	orr.w	r1, r1, #32
 1005912:	e077      	b.n	1005a04 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
 1005914:	2b04      	cmp	r3, #4
 1005916:	d10a      	bne.n	100592e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1005918:	f021 0107 	bic.w	r1, r1, #7
 100591c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
 100591e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 1005920:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
 1005922:	f00c fc66 	bl	10121f2 <process_recheck>
 1005926:	b110      	cbz	r0, 100592e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1005928:	f041 0120 	orr.w	r1, r1, #32
 100592c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 100592e:	8b21      	ldrh	r1, [r4, #24]
 1005930:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 1005934:	45aa      	cmp	sl, r5
 1005936:	d050      	beq.n	10059da <process_event+0x1a2>
 1005938:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
 100593a:	46b9      	mov	r9, r7
 100593c:	e7aa      	b.n	1005894 <process_event+0x5c>
			transit = mgr->transitions->start;
 100593e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1005940:	f021 0107 	bic.w	r1, r1, #7
 1005944:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
 1005948:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
 100594a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
 100594e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
 1005950:	d12d      	bne.n	10059ae <process_event+0x176>
		    || (transit != NULL)) {
 1005952:	f1b9 0f00 	cmp.w	r9, #0
 1005956:	d040      	beq.n	10059da <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 1005958:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
 100595c:	8321      	strh	r1, [r4, #24]
 100595e:	f388 8811 	msr	BASEPRI, r8
 1005962:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
 1005966:	4620      	mov	r0, r4
 1005968:	4939      	ldr	r1, [pc, #228]	; (1005a50 <process_event+0x218>)
 100596a:	47c8      	blx	r9
 100596c:	e029      	b.n	10059c2 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 100596e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
 1005972:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1005974:	f041 0104 	orr.w	r1, r1, #4
 1005978:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
 100597a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
 100597c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
 1005980:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
 1005982:	d0e6      	beq.n	1005952 <process_event+0x11a>
 1005984:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1005986:	f04f 0a04 	mov.w	sl, #4
		res = 0;
 100598a:	463e      	mov	r6, r7
 100598c:	e782      	b.n	1005894 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 100598e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
 1005992:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1005994:	f041 0105 	orr.w	r1, r1, #5
 1005998:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
 100599a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
 100599c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
 10059a0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
 10059a2:	d0d6      	beq.n	1005952 <process_event+0x11a>
 10059a4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 10059a6:	f04f 0a05 	mov.w	sl, #5
		res = 0;
 10059aa:	463e      	mov	r6, r7
 10059ac:	e772      	b.n	1005894 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
 10059ae:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 10059b0:	f04f 0a06 	mov.w	sl, #6
		res = 0;
 10059b4:	463e      	mov	r6, r7
 10059b6:	e76d      	b.n	1005894 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 10059b8:	462b      	mov	r3, r5
 10059ba:	e787      	b.n	10058cc <process_event+0x94>
			if (transit != NULL) {
 10059bc:	f1b9 0f00 	cmp.w	r9, #0
 10059c0:	d1d1      	bne.n	1005966 <process_event+0x12e>
	__asm__ volatile(
 10059c2:	f04f 0340 	mov.w	r3, #64	; 0x40
 10059c6:	f3ef 8811 	mrs	r8, BASEPRI
 10059ca:	f383 8812 	msr	BASEPRI_MAX, r3
 10059ce:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
 10059d2:	8b23      	ldrh	r3, [r4, #24]
 10059d4:	f023 0308 	bic.w	r3, r3, #8
 10059d8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
 10059da:	8b25      	ldrh	r5, [r4, #24]
 10059dc:	06ea      	lsls	r2, r5, #27
 10059de:	d52e      	bpl.n	1005a3e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
 10059e0:	f025 0310 	bic.w	r3, r5, #16
 10059e4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
 10059e6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
 10059ea:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 10059ec:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
 10059ee:	2e00      	cmp	r6, #0
 10059f0:	f6bf af6f 	bge.w	10058d2 <process_event+0x9a>
	list->head = NULL;
 10059f4:	2300      	movs	r3, #0
		*clients = mgr->clients;
 10059f6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
 10059f8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10059fc:	f021 0107 	bic.w	r1, r1, #7
 1005a00:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1005a04:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1005a06:	8b21      	ldrh	r1, [r4, #24]
 1005a08:	f04f 0900 	mov.w	r9, #0
 1005a0c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 1005a10:	45aa      	cmp	sl, r5
 1005a12:	f47f af3f 	bne.w	1005894 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
 1005a16:	2f00      	cmp	r7, #0
 1005a18:	d09b      	beq.n	1005952 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 1005a1a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
 1005a1e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
 1005a20:	f388 8811 	msr	BASEPRI, r8
 1005a24:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
 1005a28:	2f00      	cmp	r7, #0
 1005a2a:	d0c7      	beq.n	10059bc <process_event+0x184>
	return node->next;
 1005a2c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
 1005a2e:	4639      	mov	r1, r7
 1005a30:	4633      	mov	r3, r6
 1005a32:	4652      	mov	r2, sl
 1005a34:	4620      	mov	r0, r4
 1005a36:	f00c fc08 	bl	101224a <notify_one>
	list->head = node;
 1005a3a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
 1005a3c:	e7f4      	b.n	1005a28 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
 1005a3e:	06ab      	lsls	r3, r5, #26
 1005a40:	f57f af1a 	bpl.w	1005878 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
 1005a44:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
 1005a48:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
 1005a4a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
 1005a4e:	e6ff      	b.n	1005850 <process_event+0x18>
 1005a50:	01012277 	.word	0x01012277

01005a54 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 1005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1005a58:	4681      	mov	r9, r0
 1005a5a:	468b      	mov	fp, r1
 1005a5c:	4617      	mov	r7, r2
 1005a5e:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 1005a60:	2500      	movs	r5, #0
{
 1005a62:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 1005a64:	7838      	ldrb	r0, [r7, #0]
 1005a66:	b908      	cbnz	r0, 1005a6c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 1005a68:	4628      	mov	r0, r5
 1005a6a:	e357      	b.n	100611c <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
 1005a6c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 1005a6e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 1005a70:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 1005a72:	d006      	beq.n	1005a82 <z_cbvprintf_impl+0x2e>
			OUTC('%');
 1005a74:	4659      	mov	r1, fp
 1005a76:	47c8      	blx	r9
 1005a78:	2800      	cmp	r0, #0
 1005a7a:	f2c0 834f 	blt.w	100611c <z_cbvprintf_impl+0x6c8>
 1005a7e:	3501      	adds	r5, #1
		if (bps == NULL) {
 1005a80:	e1fb      	b.n	1005e7a <z_cbvprintf_impl+0x426>
		} state = {
 1005a82:	2218      	movs	r2, #24
 1005a84:	2100      	movs	r1, #0
 1005a86:	a80e      	add	r0, sp, #56	; 0x38
 1005a88:	f00c ffc3 	bl	1012a12 <memset>
	if (*sp == '%') {
 1005a8c:	787b      	ldrb	r3, [r7, #1]
 1005a8e:	2b25      	cmp	r3, #37	; 0x25
 1005a90:	d07d      	beq.n	1005b8e <z_cbvprintf_impl+0x13a>
 1005a92:	2300      	movs	r3, #0
 1005a94:	4698      	mov	r8, r3
 1005a96:	469e      	mov	lr, r3
 1005a98:	469c      	mov	ip, r3
 1005a9a:	461e      	mov	r6, r3
 1005a9c:	1c78      	adds	r0, r7, #1
 1005a9e:	4601      	mov	r1, r0
		switch (*sp) {
 1005aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 1005aa4:	2a2b      	cmp	r2, #43	; 0x2b
 1005aa6:	f000 80a1 	beq.w	1005bec <z_cbvprintf_impl+0x198>
 1005aaa:	f200 8098 	bhi.w	1005bde <z_cbvprintf_impl+0x18a>
 1005aae:	2a20      	cmp	r2, #32
 1005ab0:	f000 809f 	beq.w	1005bf2 <z_cbvprintf_impl+0x19e>
 1005ab4:	2a23      	cmp	r2, #35	; 0x23
 1005ab6:	f000 809f 	beq.w	1005bf8 <z_cbvprintf_impl+0x1a4>
 1005aba:	b12b      	cbz	r3, 1005ac8 <z_cbvprintf_impl+0x74>
 1005abc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1005ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1005ac4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1005ac8:	f1b8 0f00 	cmp.w	r8, #0
 1005acc:	d005      	beq.n	1005ada <z_cbvprintf_impl+0x86>
 1005ace:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1005ad2:	f043 0320 	orr.w	r3, r3, #32
 1005ad6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1005ada:	f1be 0f00 	cmp.w	lr, #0
 1005ade:	d005      	beq.n	1005aec <z_cbvprintf_impl+0x98>
 1005ae0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1005ae4:	f043 0310 	orr.w	r3, r3, #16
 1005ae8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1005aec:	f1bc 0f00 	cmp.w	ip, #0
 1005af0:	d005      	beq.n	1005afe <z_cbvprintf_impl+0xaa>
 1005af2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1005af6:	f043 0308 	orr.w	r3, r3, #8
 1005afa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1005afe:	b12e      	cbz	r6, 1005b0c <z_cbvprintf_impl+0xb8>
 1005b00:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1005b04:	f043 0304 	orr.w	r3, r3, #4
 1005b08:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 1005b0c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1005b10:	f003 0044 	and.w	r0, r3, #68	; 0x44
 1005b14:	2844      	cmp	r0, #68	; 0x44
 1005b16:	d103      	bne.n	1005b20 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 1005b18:	f36f 1386 	bfc	r3, #6, #1
 1005b1c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 1005b20:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 1005b24:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 1005b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 1005b2a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 1005b2e:	d17f      	bne.n	1005c30 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 1005b30:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 1005b34:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 1005b36:	f042 0201 	orr.w	r2, r2, #1
 1005b3a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 1005b3e:	781a      	ldrb	r2, [r3, #0]
 1005b40:	2a2e      	cmp	r2, #46	; 0x2e
 1005b42:	bf0c      	ite	eq
 1005b44:	2101      	moveq	r1, #1
 1005b46:	2100      	movne	r1, #0
 1005b48:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1005b4c:	f361 0241 	bfi	r2, r1, #1, #1
 1005b50:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 1005b54:	d178      	bne.n	1005c48 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 1005b56:	785a      	ldrb	r2, [r3, #1]
 1005b58:	2a2a      	cmp	r2, #42	; 0x2a
 1005b5a:	d06e      	beq.n	1005c3a <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
 1005b5c:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 1005b5e:	f04f 0c0a 	mov.w	ip, #10
	++sp;
 1005b62:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 1005b64:	4619      	mov	r1, r3
 1005b66:	f811 0b01 	ldrb.w	r0, [r1], #1
 1005b6a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 1005b6e:	2e09      	cmp	r6, #9
 1005b70:	f240 8095 	bls.w	1005c9e <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 1005b74:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 1005b78:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 1005b7a:	f3c1 0040 	ubfx	r0, r1, #1, #1
 1005b7e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 1005b82:	460a      	mov	r2, r1
 1005b84:	f360 0241 	bfi	r2, r0, #1, #1
 1005b88:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 1005b8c:	e05c      	b.n	1005c48 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 1005b8e:	1cba      	adds	r2, r7, #2
 1005b90:	9203      	str	r2, [sp, #12]
 1005b92:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 1005b96:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 1005b9a:	07da      	lsls	r2, r3, #31
 1005b9c:	f140 812e 	bpl.w	1005dfc <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 1005ba0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 1005ba4:	f1b8 0f00 	cmp.w	r8, #0
 1005ba8:	da07      	bge.n	1005bba <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 1005baa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
 1005bae:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
 1005bb2:	f042 0204 	orr.w	r2, r2, #4
 1005bb6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
 1005bba:	075e      	lsls	r6, r3, #29
 1005bbc:	f140 8127 	bpl.w	1005e0e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 1005bc0:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 1005bc4:	f1ba 0f00 	cmp.w	sl, #0
 1005bc8:	f280 8126 	bge.w	1005e18 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 1005bcc:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 1005bd0:	f36f 0341 	bfc	r3, #1, #1
 1005bd4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 1005bd8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 1005bdc:	e11c      	b.n	1005e18 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 1005bde:	2a2d      	cmp	r2, #45	; 0x2d
 1005be0:	d00d      	beq.n	1005bfe <z_cbvprintf_impl+0x1aa>
 1005be2:	2a30      	cmp	r2, #48	; 0x30
 1005be4:	f47f af69 	bne.w	1005aba <z_cbvprintf_impl+0x66>
 1005be8:	2301      	movs	r3, #1
	} while (loop);
 1005bea:	e758      	b.n	1005a9e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 1005bec:	f04f 0c01 	mov.w	ip, #1
 1005bf0:	e755      	b.n	1005a9e <z_cbvprintf_impl+0x4a>
 1005bf2:	f04f 0e01 	mov.w	lr, #1
 1005bf6:	e752      	b.n	1005a9e <z_cbvprintf_impl+0x4a>
 1005bf8:	f04f 0801 	mov.w	r8, #1
 1005bfc:	e74f      	b.n	1005a9e <z_cbvprintf_impl+0x4a>
 1005bfe:	2601      	movs	r6, #1
 1005c00:	e74d      	b.n	1005a9e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 1005c02:	4603      	mov	r3, r0
 1005c04:	fb0e 6202 	mla	r2, lr, r2, r6
 1005c08:	3a30      	subs	r2, #48	; 0x30
 1005c0a:	4618      	mov	r0, r3
 1005c0c:	f810 6b01 	ldrb.w	r6, [r0], #1
 1005c10:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 1005c14:	f1bc 0f09 	cmp.w	ip, #9
 1005c18:	d9f3      	bls.n	1005c02 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 1005c1a:	4299      	cmp	r1, r3
 1005c1c:	d08f      	beq.n	1005b3e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 1005c1e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 1005c22:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 1005c24:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 1005c26:	f362 0141 	bfi	r1, r2, #1, #1
 1005c2a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 1005c2e:	e786      	b.n	1005b3e <z_cbvprintf_impl+0xea>
 1005c30:	460b      	mov	r3, r1
	size_t val = 0;
 1005c32:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 1005c34:	f04f 0e0a 	mov.w	lr, #10
 1005c38:	e7e7      	b.n	1005c0a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 1005c3a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 1005c3e:	3302      	adds	r3, #2
		conv->prec_star = true;
 1005c40:	f042 0204 	orr.w	r2, r2, #4
 1005c44:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
 1005c48:	781a      	ldrb	r2, [r3, #0]
 1005c4a:	2a6c      	cmp	r2, #108	; 0x6c
 1005c4c:	d047      	beq.n	1005cde <z_cbvprintf_impl+0x28a>
 1005c4e:	d82b      	bhi.n	1005ca8 <z_cbvprintf_impl+0x254>
 1005c50:	2a68      	cmp	r2, #104	; 0x68
 1005c52:	d031      	beq.n	1005cb8 <z_cbvprintf_impl+0x264>
 1005c54:	2a6a      	cmp	r2, #106	; 0x6a
 1005c56:	d04b      	beq.n	1005cf0 <z_cbvprintf_impl+0x29c>
 1005c58:	2a4c      	cmp	r2, #76	; 0x4c
 1005c5a:	d051      	beq.n	1005d00 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 1005c5c:	461a      	mov	r2, r3
 1005c5e:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
 1005c62:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
 1005c64:	9203      	str	r2, [sp, #12]
 1005c66:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
 1005c6a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
 1005c6e:	f200 80be 	bhi.w	1005dee <z_cbvprintf_impl+0x39a>
 1005c72:	2b6d      	cmp	r3, #109	; 0x6d
 1005c74:	d851      	bhi.n	1005d1a <z_cbvprintf_impl+0x2c6>
 1005c76:	2b69      	cmp	r3, #105	; 0x69
 1005c78:	f200 80b9 	bhi.w	1005dee <z_cbvprintf_impl+0x39a>
 1005c7c:	2b57      	cmp	r3, #87	; 0x57
 1005c7e:	d867      	bhi.n	1005d50 <z_cbvprintf_impl+0x2fc>
 1005c80:	2b41      	cmp	r3, #65	; 0x41
 1005c82:	d003      	beq.n	1005c8c <z_cbvprintf_impl+0x238>
 1005c84:	3b45      	subs	r3, #69	; 0x45
 1005c86:	2b02      	cmp	r3, #2
 1005c88:	f200 80b1 	bhi.w	1005dee <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 1005c8c:	2204      	movs	r2, #4
 1005c8e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 1005c92:	f362 0302 	bfi	r3, r2, #0, #3
 1005c96:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 1005c9a:	2301      	movs	r3, #1
			break;
 1005c9c:	e073      	b.n	1005d86 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 1005c9e:	fb0c 0202 	mla	r2, ip, r2, r0
 1005ca2:	460b      	mov	r3, r1
 1005ca4:	3a30      	subs	r2, #48	; 0x30
 1005ca6:	e75d      	b.n	1005b64 <z_cbvprintf_impl+0x110>
	switch (*sp) {
 1005ca8:	2a74      	cmp	r2, #116	; 0x74
 1005caa:	d025      	beq.n	1005cf8 <z_cbvprintf_impl+0x2a4>
 1005cac:	2a7a      	cmp	r2, #122	; 0x7a
 1005cae:	d1d5      	bne.n	1005c5c <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 1005cb0:	2106      	movs	r1, #6
 1005cb2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1005cb6:	e00c      	b.n	1005cd2 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 1005cb8:	785a      	ldrb	r2, [r3, #1]
 1005cba:	2a68      	cmp	r2, #104	; 0x68
 1005cbc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1005cc0:	d106      	bne.n	1005cd0 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 1005cc2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 1005cc4:	f361 02c6 	bfi	r2, r1, #3, #4
 1005cc8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 1005ccc:	3302      	adds	r3, #2
 1005cce:	e7c5      	b.n	1005c5c <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 1005cd0:	2102      	movs	r1, #2
 1005cd2:	f361 02c6 	bfi	r2, r1, #3, #4
 1005cd6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 1005cda:	3301      	adds	r3, #1
 1005cdc:	e7be      	b.n	1005c5c <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 1005cde:	785a      	ldrb	r2, [r3, #1]
 1005ce0:	2a6c      	cmp	r2, #108	; 0x6c
 1005ce2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1005ce6:	d101      	bne.n	1005cec <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 1005ce8:	2104      	movs	r1, #4
 1005cea:	e7eb      	b.n	1005cc4 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 1005cec:	2103      	movs	r1, #3
 1005cee:	e7f0      	b.n	1005cd2 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 1005cf0:	2105      	movs	r1, #5
 1005cf2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1005cf6:	e7ec      	b.n	1005cd2 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 1005cf8:	2107      	movs	r1, #7
 1005cfa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1005cfe:	e7e8      	b.n	1005cd2 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 1005d00:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 1005d04:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 1005d08:	f022 0202 	bic.w	r2, r2, #2
 1005d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 1005d10:	f042 0202 	orr.w	r2, r2, #2
 1005d14:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 1005d18:	e7df      	b.n	1005cda <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 1005d1a:	3b6e      	subs	r3, #110	; 0x6e
 1005d1c:	b2d9      	uxtb	r1, r3
 1005d1e:	2301      	movs	r3, #1
 1005d20:	408b      	lsls	r3, r1
 1005d22:	f240 4182 	movw	r1, #1154	; 0x482
 1005d26:	420b      	tst	r3, r1
 1005d28:	d137      	bne.n	1005d9a <z_cbvprintf_impl+0x346>
 1005d2a:	f013 0f24 	tst.w	r3, #36	; 0x24
 1005d2e:	d151      	bne.n	1005dd4 <z_cbvprintf_impl+0x380>
 1005d30:	07d8      	lsls	r0, r3, #31
 1005d32:	d55c      	bpl.n	1005dee <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 1005d34:	2103      	movs	r1, #3
 1005d36:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 1005d3a:	f361 0302 	bfi	r3, r1, #0, #3
 1005d3e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 1005d42:	f002 0378 	and.w	r3, r2, #120	; 0x78
 1005d46:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 1005d4a:	424b      	negs	r3, r1
 1005d4c:	414b      	adcs	r3, r1
 1005d4e:	e01a      	b.n	1005d86 <z_cbvprintf_impl+0x332>
 1005d50:	2001      	movs	r0, #1
	switch (conv->specifier) {
 1005d52:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 1005d56:	b2c9      	uxtb	r1, r1
 1005d58:	fa00 f101 	lsl.w	r1, r0, r1
 1005d5c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 1005d60:	d194      	bne.n	1005c8c <z_cbvprintf_impl+0x238>
 1005d62:	f640 0601 	movw	r6, #2049	; 0x801
 1005d66:	4231      	tst	r1, r6
 1005d68:	d11d      	bne.n	1005da6 <z_cbvprintf_impl+0x352>
 1005d6a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 1005d6e:	d03e      	beq.n	1005dee <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 1005d70:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 1005d74:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 1005d78:	f002 0278 	and.w	r2, r2, #120	; 0x78
 1005d7c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 1005d7e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 1005d82:	d034      	beq.n	1005dee <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 1005d84:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 1005d86:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 1005d8a:	f3c2 0140 	ubfx	r1, r2, #1, #1
 1005d8e:	430b      	orrs	r3, r1
 1005d90:	f363 0241 	bfi	r2, r3, #1, #1
 1005d94:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 1005d98:	e6fd      	b.n	1005b96 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 1005d9a:	2102      	movs	r1, #2
 1005d9c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 1005da0:	f361 0302 	bfi	r3, r1, #0, #3
 1005da4:	e7e8      	b.n	1005d78 <z_cbvprintf_impl+0x324>
 1005da6:	2002      	movs	r0, #2
 1005da8:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 1005dac:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 1005db0:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 1005db4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 1005db6:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 1005dba:	bf02      	ittt	eq
 1005dbc:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 1005dc0:	f041 0101 	orreq.w	r1, r1, #1
 1005dc4:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 1005dc8:	2b63      	cmp	r3, #99	; 0x63
 1005dca:	d1db      	bne.n	1005d84 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 1005dcc:	1e13      	subs	r3, r2, #0
 1005dce:	bf18      	it	ne
 1005dd0:	2301      	movne	r3, #1
 1005dd2:	e7d8      	b.n	1005d86 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 1005dd4:	2103      	movs	r1, #3
 1005dd6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 1005dda:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 1005dde:	f361 0302 	bfi	r3, r1, #0, #3
 1005de2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 1005de6:	bf14      	ite	ne
 1005de8:	2301      	movne	r3, #1
 1005dea:	2300      	moveq	r3, #0
 1005dec:	e7cb      	b.n	1005d86 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 1005dee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1005df2:	f043 0301 	orr.w	r3, r3, #1
 1005df6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 1005dfa:	e7c3      	b.n	1005d84 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 1005dfc:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 1005e00:	2a00      	cmp	r2, #0
		int width = -1;
 1005e02:	bfac      	ite	ge
 1005e04:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
 1005e08:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
 1005e0c:	e6d5      	b.n	1005bba <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 1005e0e:	0798      	lsls	r0, r3, #30
 1005e10:	f57f aee2 	bpl.w	1005bd8 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 1005e14:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
 1005e18:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 1005e1a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 1005e1e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
 1005e22:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
 1005e26:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 1005e2a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 1005e2c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 1005e30:	d133      	bne.n	1005e9a <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 1005e32:	1ecb      	subs	r3, r1, #3
 1005e34:	2b04      	cmp	r3, #4
 1005e36:	d804      	bhi.n	1005e42 <z_cbvprintf_impl+0x3ee>
 1005e38:	e8df f003 	tbb	[pc, r3]
 1005e3c:	21464621 	.word	0x21464621
 1005e40:	21          	.byte	0x21
 1005e41:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 1005e42:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 1005e44:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 1005e46:	ea4f 72e3 	mov.w	r2, r3, asr #31
 1005e4a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 1005e4e:	d11c      	bne.n	1005e8a <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 1005e50:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 1005e54:	17da      	asrs	r2, r3, #31
 1005e56:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 1005e5a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 1005e5c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1005e60:	f013 0603 	ands.w	r6, r3, #3
 1005e64:	d050      	beq.n	1005f08 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 1005e66:	463a      	mov	r2, r7
 1005e68:	4659      	mov	r1, fp
 1005e6a:	4648      	mov	r0, r9
 1005e6c:	9b03      	ldr	r3, [sp, #12]
 1005e6e:	f00c fb20 	bl	10124b2 <outs>
 1005e72:	2800      	cmp	r0, #0
 1005e74:	f2c0 8152 	blt.w	100611c <z_cbvprintf_impl+0x6c8>
 1005e78:	4405      	add	r5, r0
			continue;
 1005e7a:	9f03      	ldr	r7, [sp, #12]
 1005e7c:	e5f2      	b.n	1005a64 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 1005e7e:	f854 3b04 	ldr.w	r3, [r4], #4
 1005e82:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 1005e84:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 1005e88:	e7e8      	b.n	1005e5c <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 1005e8a:	2902      	cmp	r1, #2
 1005e8c:	d1e5      	bne.n	1005e5a <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 1005e8e:	b21a      	sxth	r2, r3
 1005e90:	f343 33c0 	sbfx	r3, r3, #15, #1
 1005e94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 1005e98:	e7df      	b.n	1005e5a <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 1005e9a:	2b02      	cmp	r3, #2
 1005e9c:	d124      	bne.n	1005ee8 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 1005e9e:	1ecb      	subs	r3, r1, #3
 1005ea0:	2b04      	cmp	r3, #4
 1005ea2:	d804      	bhi.n	1005eae <z_cbvprintf_impl+0x45a>
 1005ea4:	e8df f003 	tbb	[pc, r3]
 1005ea8:	18101018 	.word	0x18101018
 1005eac:	18          	.byte	0x18
 1005ead:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 1005eae:	2901      	cmp	r1, #1
 1005eb0:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
 1005eb4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 1005eb8:	d014      	beq.n	1005ee4 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 1005eba:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 1005ebc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 1005ec0:	d1cc      	bne.n	1005e5c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 1005ec2:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 1005ec4:	930e      	str	r3, [sp, #56]	; 0x38
 1005ec6:	e7c9      	b.n	1005e5c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 1005ec8:	3407      	adds	r4, #7
 1005eca:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 1005ece:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 1005ed2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 1005ed6:	e7c1      	b.n	1005e5c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 1005ed8:	f854 3b04 	ldr.w	r3, [r4], #4
 1005edc:	930e      	str	r3, [sp, #56]	; 0x38
 1005ede:	2300      	movs	r3, #0
 1005ee0:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 1005ee2:	e7bb      	b.n	1005e5c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 1005ee4:	b2db      	uxtb	r3, r3
 1005ee6:	e7cd      	b.n	1005e84 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 1005ee8:	2b04      	cmp	r3, #4
 1005eea:	d108      	bne.n	1005efe <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 1005eec:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 1005eee:	f024 0407 	bic.w	r4, r4, #7
 1005ef2:	e9d4 2300 	ldrd	r2, r3, [r4]
 1005ef6:	3408      	adds	r4, #8
 1005ef8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 1005efc:	e7ae      	b.n	1005e5c <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 1005efe:	2b03      	cmp	r3, #3
 1005f00:	d1ac      	bne.n	1005e5c <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 1005f02:	f854 3b04 	ldr.w	r3, [r4], #4
 1005f06:	e7dd      	b.n	1005ec4 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 1005f08:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 1005f0c:	2878      	cmp	r0, #120	; 0x78
 1005f0e:	d8b4      	bhi.n	1005e7a <z_cbvprintf_impl+0x426>
 1005f10:	2862      	cmp	r0, #98	; 0x62
 1005f12:	d81c      	bhi.n	1005f4e <z_cbvprintf_impl+0x4fa>
 1005f14:	2825      	cmp	r0, #37	; 0x25
 1005f16:	f43f adad 	beq.w	1005a74 <z_cbvprintf_impl+0x20>
 1005f1a:	2858      	cmp	r0, #88	; 0x58
 1005f1c:	d1ad      	bne.n	1005e7a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 1005f1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 1005f22:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 1005f26:	9300      	str	r3, [sp, #0]
 1005f28:	aa10      	add	r2, sp, #64	; 0x40
 1005f2a:	ab08      	add	r3, sp, #32
 1005f2c:	f00c fa7b 	bl	1012426 <encode_uint>
			if (precision >= 0) {
 1005f30:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 1005f34:	4607      	mov	r7, r0
			if (precision >= 0) {
 1005f36:	f280 8099 	bge.w	100606c <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 1005f3a:	2f00      	cmp	r7, #0
 1005f3c:	d09d      	beq.n	1005e7a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 1005f3e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 1005f42:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 1005f44:	2e00      	cmp	r6, #0
 1005f46:	f000 80c0 	beq.w	10060ca <z_cbvprintf_impl+0x676>
			nj_len += 1U;
 1005f4a:	3001      	adds	r0, #1
 1005f4c:	e0bd      	b.n	10060ca <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
 1005f4e:	3863      	subs	r0, #99	; 0x63
 1005f50:	2815      	cmp	r0, #21
 1005f52:	d892      	bhi.n	1005e7a <z_cbvprintf_impl+0x426>
 1005f54:	a201      	add	r2, pc, #4	; (adr r2, 1005f5c <z_cbvprintf_impl+0x508>)
 1005f56:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 1005f5a:	bf00      	nop
 1005f5c:	01006031 	.word	0x01006031
 1005f60:	01006043 	.word	0x01006043
 1005f64:	01005e7b 	.word	0x01005e7b
 1005f68:	01005e7b 	.word	0x01005e7b
 1005f6c:	01005e7b 	.word	0x01005e7b
 1005f70:	01005e7b 	.word	0x01005e7b
 1005f74:	01006043 	.word	0x01006043
 1005f78:	01005e7b 	.word	0x01005e7b
 1005f7c:	01005e7b 	.word	0x01005e7b
 1005f80:	01005e7b 	.word	0x01005e7b
 1005f84:	01005e7b 	.word	0x01005e7b
 1005f88:	010060cf 	.word	0x010060cf
 1005f8c:	01006067 	.word	0x01006067
 1005f90:	0100608d 	.word	0x0100608d
 1005f94:	01005e7b 	.word	0x01005e7b
 1005f98:	01005e7b 	.word	0x01005e7b
 1005f9c:	01005fb5 	.word	0x01005fb5
 1005fa0:	01005e7b 	.word	0x01005e7b
 1005fa4:	01006067 	.word	0x01006067
 1005fa8:	01005e7b 	.word	0x01005e7b
 1005fac:	01005e7b 	.word	0x01005e7b
 1005fb0:	01006067 	.word	0x01006067
			if (precision >= 0) {
 1005fb4:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 1005fb8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 1005fba:	db35      	blt.n	1006028 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 1005fbc:	4651      	mov	r1, sl
 1005fbe:	4638      	mov	r0, r7
 1005fc0:	f00c fccd 	bl	101295e <strnlen>
			bpe = bps + len;
 1005fc4:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 1005fc8:	2f00      	cmp	r7, #0
 1005fca:	f43f af56 	beq.w	1005e7a <z_cbvprintf_impl+0x426>
		char sign = 0;
 1005fce:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 1005fd0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 1005fd4:	f013 0210 	ands.w	r2, r3, #16
 1005fd8:	9205      	str	r2, [sp, #20]
 1005fda:	f000 8092 	beq.w	1006102 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
 1005fde:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 1005fe0:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 1005fe2:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 1005fe4:	bf48      	it	mi
 1005fe6:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 1005fe8:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 1005fea:	bf48      	it	mi
 1005fec:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 1005fee:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
 1005ff2:	9204      	str	r2, [sp, #16]
		if (width > 0) {
 1005ff4:	f340 809f 	ble.w	1006136 <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
 1005ff8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 1005ffc:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 1006000:	f3c2 0380 	ubfx	r3, r2, #2, #1
 1006004:	0750      	lsls	r0, r2, #29
 1006006:	9306      	str	r3, [sp, #24]
 1006008:	f100 8095 	bmi.w	1006136 <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
 100600c:	0651      	lsls	r1, r2, #25
 100600e:	f140 8088 	bpl.w	1006122 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
 1006012:	b13e      	cbz	r6, 1006024 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 1006014:	4659      	mov	r1, fp
 1006016:	4630      	mov	r0, r6
 1006018:	47c8      	blx	r9
 100601a:	2800      	cmp	r0, #0
 100601c:	db7e      	blt.n	100611c <z_cbvprintf_impl+0x6c8>
 100601e:	9b06      	ldr	r3, [sp, #24]
 1006020:	3501      	adds	r5, #1
 1006022:	461e      	mov	r6, r3
					pad = '0';
 1006024:	2230      	movs	r2, #48	; 0x30
 1006026:	e07d      	b.n	1006124 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
 1006028:	4638      	mov	r0, r7
 100602a:	f00c fc91 	bl	1012950 <strlen>
 100602e:	e7c9      	b.n	1005fc4 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 1006030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
 1006032:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 1006034:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 1006036:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
 100603a:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 100603c:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
 1006040:	e7c6      	b.n	1005fd0 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 1006042:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 1006044:	bf5a      	itte	pl
 1006046:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 100604a:	015e      	lslpl	r6, r3, #5
				sign = '+';
 100604c:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
 100604e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
 1006052:	2b00      	cmp	r3, #0
 1006054:	f6bf af63 	bge.w	1005f1e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 1006058:	4252      	negs	r2, r2
 100605a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
 100605e:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 1006060:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 1006064:	e75b      	b.n	1005f1e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 1006066:	2600      	movs	r6, #0
 1006068:	e759      	b.n	1005f1e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 100606a:	2600      	movs	r6, #0
				conv->flag_zero = false;
 100606c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 1006070:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 1006074:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 1006076:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 100607a:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 100607c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 1006080:	f67f af5b 	bls.w	1005f3a <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 1006084:	ebaa 0303 	sub.w	r3, sl, r3
 1006088:	9311      	str	r3, [sp, #68]	; 0x44
 100608a:	e756      	b.n	1005f3a <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 100608c:	980e      	ldr	r0, [sp, #56]	; 0x38
 100608e:	b390      	cbz	r0, 10060f6 <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 1006090:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 1006094:	9300      	str	r3, [sp, #0]
 1006096:	2100      	movs	r1, #0
 1006098:	ab08      	add	r3, sp, #32
 100609a:	aa10      	add	r2, sp, #64	; 0x40
 100609c:	f00c f9c3 	bl	1012426 <encode_uint>
				conv->altform_0c = true;
 10060a0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 10060a4:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
 10060a8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 10060ac:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 10060b0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 10060b4:	4607      	mov	r7, r0
				conv->altform_0c = true;
 10060b6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 10060ba:	dad6      	bge.n	100606a <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
 10060bc:	2800      	cmp	r0, #0
 10060be:	f43f aedc 	beq.w	1005e7a <z_cbvprintf_impl+0x426>
		char sign = 0;
 10060c2:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 10060c4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 10060c8:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
 10060ca:	469a      	mov	sl, r3
 10060cc:	e780      	b.n	1005fd0 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 10060ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 10060d0:	2907      	cmp	r1, #7
 10060d2:	f63f aed2 	bhi.w	1005e7a <z_cbvprintf_impl+0x426>
 10060d6:	e8df f001 	tbb	[pc, r1]
 10060da:	040c      	.short	0x040c
 10060dc:	08080c06 	.word	0x08080c06
 10060e0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 10060e2:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 10060e4:	e6c9      	b.n	1005e7a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 10060e6:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 10060e8:	e6c7      	b.n	1005e7a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 10060ea:	17ea      	asrs	r2, r5, #31
 10060ec:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 10060f0:	e6c3      	b.n	1005e7a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 10060f2:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 10060f4:	e6c1      	b.n	1005e7a <z_cbvprintf_impl+0x426>
 10060f6:	4f2f      	ldr	r7, [pc, #188]	; (10061b4 <z_cbvprintf_impl+0x760>)
		char sign = 0;
 10060f8:	4606      	mov	r6, r0
			bpe = bps + 5;
 10060fa:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 10060fe:	2005      	movs	r0, #5
 1006100:	e766      	b.n	1005fd0 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 1006102:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 1006104:	bf48      	it	mi
 1006106:	3001      	addmi	r0, #1
 1006108:	e76a      	b.n	1005fe0 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
 100610a:	4610      	mov	r0, r2
 100610c:	9307      	str	r3, [sp, #28]
 100610e:	9206      	str	r2, [sp, #24]
 1006110:	4659      	mov	r1, fp
 1006112:	47c8      	blx	r9
 1006114:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 1006118:	2800      	cmp	r0, #0
 100611a:	da04      	bge.n	1006126 <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
 100611c:	b015      	add	sp, #84	; 0x54
 100611e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 1006122:	2220      	movs	r2, #32
					pad = '0';
 1006124:	4643      	mov	r3, r8
				while (width-- > 0) {
 1006126:	4619      	mov	r1, r3
 1006128:	2900      	cmp	r1, #0
 100612a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 100612e:	dcec      	bgt.n	100610a <z_cbvprintf_impl+0x6b6>
 1006130:	4445      	add	r5, r8
 1006132:	4698      	mov	r8, r3
 1006134:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
 1006136:	b12e      	cbz	r6, 1006144 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
 1006138:	4659      	mov	r1, fp
 100613a:	4630      	mov	r0, r6
 100613c:	47c8      	blx	r9
 100613e:	2800      	cmp	r0, #0
 1006140:	dbec      	blt.n	100611c <z_cbvprintf_impl+0x6c8>
 1006142:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 1006144:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 1006148:	06da      	lsls	r2, r3, #27
 100614a:	d401      	bmi.n	1006150 <z_cbvprintf_impl+0x6fc>
 100614c:	071b      	lsls	r3, r3, #28
 100614e:	d505      	bpl.n	100615c <z_cbvprintf_impl+0x708>
				OUTC('0');
 1006150:	4659      	mov	r1, fp
 1006152:	2030      	movs	r0, #48	; 0x30
 1006154:	47c8      	blx	r9
 1006156:	2800      	cmp	r0, #0
 1006158:	dbe0      	blt.n	100611c <z_cbvprintf_impl+0x6c8>
 100615a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 100615c:	9b05      	ldr	r3, [sp, #20]
 100615e:	b133      	cbz	r3, 100616e <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
 1006160:	4659      	mov	r1, fp
 1006162:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 1006166:	47c8      	blx	r9
 1006168:	2800      	cmp	r0, #0
 100616a:	dbd7      	blt.n	100611c <z_cbvprintf_impl+0x6c8>
 100616c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 100616e:	9e04      	ldr	r6, [sp, #16]
 1006170:	442e      	add	r6, r5
 1006172:	e005      	b.n	1006180 <z_cbvprintf_impl+0x72c>
				OUTC('0');
 1006174:	4659      	mov	r1, fp
 1006176:	2030      	movs	r0, #48	; 0x30
 1006178:	47c8      	blx	r9
 100617a:	2800      	cmp	r0, #0
 100617c:	dbce      	blt.n	100611c <z_cbvprintf_impl+0x6c8>
 100617e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 1006180:	1b73      	subs	r3, r6, r5
 1006182:	2b00      	cmp	r3, #0
 1006184:	dcf6      	bgt.n	1006174 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
 1006186:	4653      	mov	r3, sl
 1006188:	463a      	mov	r2, r7
 100618a:	4659      	mov	r1, fp
 100618c:	4648      	mov	r0, r9
 100618e:	f00c f990 	bl	10124b2 <outs>
 1006192:	2800      	cmp	r0, #0
 1006194:	dbc2      	blt.n	100611c <z_cbvprintf_impl+0x6c8>
 1006196:	4405      	add	r5, r0
		while (width > 0) {
 1006198:	44a8      	add	r8, r5
 100619a:	eba8 0305 	sub.w	r3, r8, r5
 100619e:	2b00      	cmp	r3, #0
 10061a0:	f77f ae6b 	ble.w	1005e7a <z_cbvprintf_impl+0x426>
			OUTC(' ');
 10061a4:	4659      	mov	r1, fp
 10061a6:	2020      	movs	r0, #32
 10061a8:	47c8      	blx	r9
 10061aa:	2800      	cmp	r0, #0
 10061ac:	dbb6      	blt.n	100611c <z_cbvprintf_impl+0x6c8>
 10061ae:	3501      	adds	r5, #1
			--width;
 10061b0:	e7f3      	b.n	100619a <z_cbvprintf_impl+0x746>
 10061b2:	bf00      	nop
 10061b4:	01015a6c 	.word	0x01015a6c

010061b8 <nordicsemi_nrf53_init>:
	__asm__ volatile(
 10061b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 10061bc:	f3ef 8111 	mrs	r1, BASEPRI
 10061c0:	f383 8812 	msr	BASEPRI_MAX, r3
 10061c4:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
    }
    else
#endif
    {
        p_reg->ICACHECNF = (uint32_t)config;
 10061c8:	2301      	movs	r3, #1
	*((volatile uint32_t *)0x50101110) = 0x0ul;
	*((volatile uint32_t *)0x50002124) = 0x0ul;
	*((volatile uint32_t *)0x5000212C) = 0x0ul;
	*((volatile uint32_t *)0x502012A0) = 0x0ul;
#elif defined(CONFIG_SOC_NRF5340_CPUNET)
	*((volatile uint32_t *)0x41002118) = 0x7Ful;
 10061ca:	207f      	movs	r0, #127	; 0x7f
 10061cc:	4a0b      	ldr	r2, [pc, #44]	; (10061fc <nordicsemi_nrf53_init+0x44>)
 10061ce:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
 10061d2:	4b0b      	ldr	r3, [pc, #44]	; (1006200 <nordicsemi_nrf53_init+0x48>)
 10061d4:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	*((volatile uint32_t *)0x41080E04) = 0x0ul;
 10061d8:	2000      	movs	r0, #0
 10061da:	f8c2 0e04 	str.w	r0, [r2, #3588]	; 0xe04
	*((volatile uint32_t *)0x41080E08) = 0x0ul;
 10061de:	f8c2 0e08 	str.w	r0, [r2, #3592]	; 0xe08
	*((volatile uint32_t *)0x41002124) = 0x0ul;
 10061e2:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
	*((volatile uint32_t *)0x4100212C) = 0x0ul;
 10061e6:	f8c3 012c 	str.w	r0, [r3, #300]	; 0x12c
	*((volatile uint32_t *)0x41101110) = 0x0ul;
 10061ea:	f503 237f 	add.w	r3, r3, #1044480	; 0xff000
 10061ee:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
	__asm__ volatile(
 10061f2:	f381 8811 	msr	BASEPRI, r1
 10061f6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
 10061fa:	4770      	bx	lr
 10061fc:	41080000 	.word	0x41080000
 1006200:	41002000 	.word	0x41002000

01006204 <z_arm_on_enter_cpu_idle>:
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
 1006204:	2305      	movs	r3, #5
{
 1006206:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
 1006208:	4d17      	ldr	r5, [pc, #92]	; (1006268 <z_arm_on_enter_cpu_idle+0x64>)
 100620a:	4e18      	ldr	r6, [pc, #96]	; (100626c <z_arm_on_enter_cpu_idle+0x68>)
 100620c:	782c      	ldrb	r4, [r5, #0]
 100620e:	3401      	adds	r4, #1
 1006210:	fbb4 f3f3 	udiv	r3, r4, r3
 1006214:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 1006218:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 100621a:	f00c fcf3 	bl	1012c04 <sys_clock_cycle_get_32>
	if (timestamps_filled &&
 100621e:	4a14      	ldr	r2, [pc, #80]	; (1006270 <z_arm_on_enter_cpu_idle+0x6c>)
 1006220:	4b14      	ldr	r3, [pc, #80]	; (1006274 <z_arm_on_enter_cpu_idle+0x70>)
 1006222:	7811      	ldrb	r1, [r2, #0]
 1006224:	b151      	cbz	r1, 100623c <z_arm_on_enter_cpu_idle+0x38>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
 1006226:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 100622a:	1a40      	subs	r0, r0, r1
	if (timestamps_filled &&
 100622c:	2807      	cmp	r0, #7
 100622e:	d805      	bhi.n	100623c <z_arm_on_enter_cpu_idle+0x38>
		if (!suppress_warning) {
 1006230:	781a      	ldrb	r2, [r3, #0]
 1006232:	b90a      	cbnz	r2, 1006238 <z_arm_on_enter_cpu_idle+0x34>
			suppress_warning = true;
 1006234:	2201      	movs	r2, #1
 1006236:	701a      	strb	r2, [r3, #0]
		return false;
 1006238:	2000      	movs	r0, #0
}
 100623a:	bd70      	pop	{r4, r5, r6, pc}
	suppress_warning = false;
 100623c:	2100      	movs	r1, #0
 100623e:	7019      	strb	r1, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1006240:	4b0d      	ldr	r3, [pc, #52]	; (1006278 <z_arm_on_enter_cpu_idle+0x74>)
 1006242:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
 1006246:	b138      	cbz	r0, 1006258 <z_arm_on_enter_cpu_idle+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1006248:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
 100624c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
 1006250:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
 1006252:	b90c      	cbnz	r4, 1006258 <z_arm_on_enter_cpu_idle+0x54>
			timestamps_filled = true;
 1006254:	2301      	movs	r3, #1
 1006256:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
 1006258:	782c      	ldrb	r4, [r5, #0]
 100625a:	f00c fcd3 	bl	1012c04 <sys_clock_cycle_get_32>
 100625e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
 1006262:	2001      	movs	r0, #1
 1006264:	e7e9      	b.n	100623a <z_arm_on_enter_cpu_idle+0x36>
 1006266:	bf00      	nop
 1006268:	21003ad2 	.word	0x21003ad2
 100626c:	21001a08 	.word	0x21001a08
 1006270:	21003ad1 	.word	0x21003ad1
 1006274:	21003ad0 	.word	0x21003ad0
 1006278:	41005000 	.word	0x41005000

0100627c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
 100627c:	f008 bef6 	b.w	100f06c <SystemInit>

01006280 <advertise_ept>:
	return false;
}

static void advertise_ept(struct ipc_rpmsg_instance *rpmsg_inst, struct ipc_rpmsg_ept *rpmsg_ept,
			  const char *name, uint32_t dest)
{
 1006280:	b530      	push	{r4, r5, lr}
 1006282:	460c      	mov	r4, r1
	struct rpmsg_device *rdev;
	int err;

	rdev = rpmsg_virtio_get_rpmsg_device(&rpmsg_inst->rvdev);

	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
 1006284:	490e      	ldr	r1, [pc, #56]	; (10062c0 <advertise_ept+0x40>)
{
 1006286:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
 1006288:	9102      	str	r1, [sp, #8]
 100628a:	f8d0 11a4 	ldr.w	r1, [r0, #420]	; 0x1a4
{
 100628e:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
 1006290:	e9cd 3100 	strd	r3, r1, [sp]
 1006294:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 1006298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100629c:	4620      	mov	r0, r4
 100629e:	f009 fd1b 	bl	100fcd8 <rpmsg_create_ept>
			       dest, rpmsg_inst->cb, rpmsg_service_unbind);
	if (err != 0) {
 10062a2:	b950      	cbnz	r0, 10062ba <advertise_ept+0x3a>
		return;
	}

	rpmsg_ept->bound = true;
 10062a4:	2301      	movs	r3, #1
 10062a6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
 10062aa:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 10062ae:	b123      	cbz	r3, 10062ba <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
 10062b0:	4620      	mov	r0, r4
	}
}
 10062b2:	b005      	add	sp, #20
 10062b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
 10062b8:	4718      	bx	r3
}
 10062ba:	b005      	add	sp, #20
 10062bc:	bd30      	pop	{r4, r5, pc}
 10062be:	bf00      	nop
 10062c0:	01012649 	.word	0x01012649

010062c4 <get_ept>:
{
 10062c4:	b538      	push	{r3, r4, r5, lr}
 10062c6:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
 10062c8:	4611      	mov	r1, r2
{
 10062ca:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
 10062cc:	f00c f9be 	bl	101264c <get_ept_slot_with_name>
	if (ept != NULL) {
 10062d0:	4603      	mov	r3, r0
 10062d2:	b938      	cbnz	r0, 10062e4 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
 10062d4:	4628      	mov	r0, r5
 10062d6:	4904      	ldr	r1, [pc, #16]	; (10062e8 <get_ept+0x24>)
 10062d8:	f00c f9b8 	bl	101264c <get_ept_slot_with_name>
 10062dc:	4603      	mov	r3, r0
	if (ept != NULL) {
 10062de:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
 10062e0:	6023      	str	r3, [r4, #0]
}
 10062e2:	bd38      	pop	{r3, r4, r5, pc}
		return true;
 10062e4:	2001      	movs	r0, #1
 10062e6:	e7fb      	b.n	10062e0 <get_ept+0x1c>
 10062e8:	01015d75 	.word	0x01015d75

010062ec <open>:

	return rpmsg_send_nocopy(&rpmsg_ept->ep, msg, len);
}

static int open(const struct device *instance)
{
 10062ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 10062f0:	2301      	movs	r3, #1
 10062f2:	4681      	mov	r9, r0
	const struct backend_config_t *conf = instance->config;
	struct backend_data_t *data = instance->data;
 10062f4:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
 10062f6:	6846      	ldr	r6, [r0, #4]
{
 10062f8:	b085      	sub	sp, #20
	struct ipc_rpmsg_instance *rpmsg_inst;
	struct rpmsg_device *rdev;
	int err;

	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
 10062fa:	f505 7757 	add.w	r7, r5, #860	; 0x35c
 10062fe:	e8d7 2fef 	ldaex	r2, [r7]
 1006302:	2a00      	cmp	r2, #0
 1006304:	d103      	bne.n	100630e <open+0x22>
 1006306:	e8c7 3fe1 	stlex	r1, r3, [r7]
 100630a:	2900      	cmp	r1, #0
 100630c:	d1f7      	bne.n	10062fe <open+0x12>
 100630e:	f040 80b8 	bne.w	1006482 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
 1006312:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
 1006314:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
 1006316:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
 1006318:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
 100631a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 100631e:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
 1006322:	bf26      	itte	cs
 1006324:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
 1006328:	fab3 f383 	clzcs	r3, r3
		return 0;
 100632c:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
 100632e:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
 1006332:	bf28      	it	cs
 1006334:	f1c3 0320 	rsbcs	r3, r3, #32
 1006338:	3b01      	subs	r3, #1
	if (num_desc == 0) {
 100633a:	409c      	lsls	r4, r3
		return -EALREADY;
	}

	err = vr_shm_configure(&data->vr, conf);
 100633c:	f505 78e0 	add.w	r8, r5, #448	; 0x1c0
	if (num_desc == 0) {
 1006340:	f000 8099 	beq.w	1006476 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
 1006344:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 1006346:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
 1006348:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
 100634a:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 100634c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 1006350:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 1006352:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
 1006354:	3209      	adds	r2, #9
 1006356:	f8c5 0258 	str.w	r0, [r5, #600]	; 0x258
	size += sizeof(struct vring_used) +
 100635a:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
 100635c:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
 1006360:	440a      	add	r2, r1
	return (buf_size * num);
 1006362:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 1006364:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
 1006368:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
 100636a:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 100636e:	f8c5 125c 	str.w	r1, [r5, #604]	; 0x25c
	return (buf_size * num);
 1006372:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 1006374:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
 1006376:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 100637a:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
 100637e:	3303      	adds	r3, #3
 1006380:	4413      	add	r3, r2
 1006382:	f023 0303 	bic.w	r3, r3, #3
 1006386:	f8c5 324c 	str.w	r3, [r5, #588]	; 0x24c
	vr->status_reg_addr = conf->shm_addr;
 100638a:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
 100638c:	f8c5 4254 	str.w	r4, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
 1006390:	f8c5 3248 	str.w	r3, [r5, #584]	; 0x248
	if (err != 0) {
		goto error;
	}

	data->vr.notify_cb = virtio_notify_cb;
 1006394:	4b3c      	ldr	r3, [pc, #240]	; (1006488 <open+0x19c>)
	data->vr.priv = (void *) conf;

	err = ipc_static_vrings_init(&data->vr, conf->role);
 1006396:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
 1006398:	e9c5 63a7 	strd	r6, r3, [r5, #668]	; 0x29c
	err = ipc_static_vrings_init(&data->vr, conf->role);
 100639c:	6831      	ldr	r1, [r6, #0]
 100639e:	f000 fa1d 	bl	10067dc <ipc_static_vrings_init>
	if (err != 0) {
 10063a2:	4604      	mov	r4, r0
 10063a4:	bb30      	cbnz	r0, 10063f4 <open+0x108>
	const struct backend_config_t *conf = instance->config;
 10063a6:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
 10063aa:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
 10063ae:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
 10063b2:	f509 7b2e 	add.w	fp, r9, #696	; 0x2b8
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
 10063b6:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
 10063b8:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
 10063ba:	bf08      	it	eq
 10063bc:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
 10063be:	f00e fcd5 	bl	1014d6c <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
 10063c2:	2300      	movs	r3, #0
 10063c4:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 10063c8:	4930      	ldr	r1, [pc, #192]	; (100648c <open+0x1a0>)
 10063ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 10063ce:	eb01 2180 	add.w	r1, r1, r0, lsl #10
 10063d2:	9300      	str	r3, [sp, #0]
 10063d4:	4658      	mov	r0, fp
 10063d6:	4623      	mov	r3, r4
 10063d8:	f00a fa2e 	bl	1010838 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
 10063dc:	f509 702a 	add.w	r0, r9, #680	; 0x2a8
 10063e0:	492b      	ldr	r1, [pc, #172]	; (1006490 <open+0x1a4>)
 10063e2:	f00e fc95 	bl	1014d10 <k_work_init>
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
 10063e6:	f8da 0014 	ldr.w	r0, [sl, #20]

	if (api->register_callback == NULL) {
 10063ea:	6883      	ldr	r3, [r0, #8]
 10063ec:	685c      	ldr	r4, [r3, #4]
 10063ee:	b91c      	cbnz	r4, 10063f8 <open+0x10c>
		return -ENOSYS;
 10063f0:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
	return 0;

error:
	/* Back to the ready state */
	atomic_set(&data->state, STATE_READY);
 10063f4:	2100      	movs	r1, #0
 10063f6:	e037      	b.n	1006468 <open+0x17c>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
 10063f8:	464b      	mov	r3, r9
 10063fa:	4a26      	ldr	r2, [pc, #152]	; (1006494 <open+0x1a8>)
 10063fc:	f8da 1018 	ldr.w	r1, [sl, #24]
 1006400:	47a0      	blx	r4
	if (err != 0) {
 1006402:	4604      	mov	r4, r0
 1006404:	2800      	cmp	r0, #0
 1006406:	d1f5      	bne.n	10063f4 <open+0x108>
__syscall int mbox_set_enabled(const struct mbox_channel *channel, bool enable);

static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
 1006408:	f8da 0014 	ldr.w	r0, [sl, #20]

	if (api->set_enabled == NULL) {
 100640c:	6883      	ldr	r3, [r0, #8]
 100640e:	691b      	ldr	r3, [r3, #16]
 1006410:	2b00      	cmp	r3, #0
 1006412:	d0ed      	beq.n	10063f0 <open+0x104>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
 1006414:	2201      	movs	r2, #1
 1006416:	f8da 1018 	ldr.w	r1, [sl, #24]
 100641a:	4798      	blx	r3
	if (err != 0) {
 100641c:	4604      	mov	r4, r0
 100641e:	2800      	cmp	r0, #0
 1006420:	d1e8      	bne.n	10063f4 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
 1006422:	4b1d      	ldr	r3, [pc, #116]	; (1006498 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
 1006424:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
 1006426:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
	rpmsg_inst->cb = ept_cb;
 100642a:	4b1c      	ldr	r3, [pc, #112]	; (100649c <open+0x1b0>)
 100642c:	f8c5 31a4 	str.w	r3, [r5, #420]	; 0x1a4
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
 1006430:	4b1b      	ldr	r3, [pc, #108]	; (10064a0 <open+0x1b4>)
 1006432:	9303      	str	r3, [sp, #12]
 1006434:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 1006438:	9302      	str	r3, [sp, #8]
 100643a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 100643e:	e9cd 8300 	strd	r8, r3, [sp]
 1006442:	f8d5 3260 	ldr.w	r3, [r5, #608]	; 0x260
 1006446:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 1006448:	f8d5 1358 	ldr.w	r1, [r5, #856]	; 0x358
 100644c:	f000 f98e 	bl	100676c <ipc_rpmsg_init>
	if (err != 0) {
 1006450:	4604      	mov	r4, r0
 1006452:	2800      	cmp	r0, #0
 1006454:	d1ce      	bne.n	10063f4 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
 1006456:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
 100645a:	f009 fceb 	bl	100fe34 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
 100645e:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
 1006460:	f8c5 0360 	str.w	r0, [r5, #864]	; 0x360
	if (data->tx_buffer_size < 0) {
 1006464:	db0a      	blt.n	100647c <open+0x190>
	atomic_set(&data->state, STATE_INITED);
 1006466:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
 1006468:	4638      	mov	r0, r7
 100646a:	f00c f924 	bl	10126b6 <atomic_set.isra.0>
	return err;

}
 100646e:	4620      	mov	r0, r4
 1006470:	b005      	add	sp, #20
 1006472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
 1006476:	f06f 040b 	mvn.w	r4, #11
 100647a:	e7bb      	b.n	10063f4 <open+0x108>
		err = -EINVAL;
 100647c:	f06f 0415 	mvn.w	r4, #21
 1006480:	e7b8      	b.n	10063f4 <open+0x108>
		return -EALREADY;
 1006482:	f06f 0477 	mvn.w	r4, #119	; 0x77
 1006486:	e7f2      	b.n	100646e <open+0x182>
 1006488:	0101269f 	.word	0x0101269f
 100648c:	21004550 	.word	0x21004550
 1006490:	01012685 	.word	0x01012685
 1006494:	01012679 	.word	0x01012679
 1006498:	01006569 	.word	0x01006569
 100649c:	01012757 	.word	0x01012757
 10064a0:	010126e7 	.word	0x010126e7

010064a4 <close>:

static int close(const struct device *instance)
{
 10064a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 10064a8:	4606      	mov	r6, r0
 10064aa:	f04f 0901 	mov.w	r9, #1
	const struct backend_config_t *conf = instance->config;
	struct backend_data_t *data = instance->data;
 10064ae:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
 10064b0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct ipc_rpmsg_instance *rpmsg_inst;
	int err;

	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
 10064b4:	f505 7757 	add.w	r7, r5, #860	; 0x35c
 10064b8:	e8d7 3fef 	ldaex	r3, [r7]
 10064bc:	2b02      	cmp	r3, #2
 10064be:	d103      	bne.n	10064c8 <close+0x24>
 10064c0:	e8c7 9fe2 	stlex	r2, r9, [r7]
 10064c4:	2a00      	cmp	r2, #0
 10064c6:	d1f7      	bne.n	10064b8 <close+0x14>
 10064c8:	d149      	bne.n	100655e <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
 10064ca:	4826      	ldr	r0, [pc, #152]	; (1006564 <close+0xc0>)
 10064cc:	f105 0140 	add.w	r1, r5, #64	; 0x40
 10064d0:	f00c fa4e 	bl	1012970 <strcmp>
 10064d4:	b120      	cbz	r0, 10064e0 <close+0x3c>
	}

	rpmsg_inst = &data->rpmsg_inst;

	if (!check_endpoints_freed(rpmsg_inst)) {
		return -EBUSY;
 10064d6:	f06f 040f 	mvn.w	r4, #15

error:
	/* Back to the inited state */
	atomic_set(&data->state, STATE_INITED);
	return err;
}
 10064da:	4620      	mov	r0, r4
 10064dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
 10064e0:	4820      	ldr	r0, [pc, #128]	; (1006564 <close+0xc0>)
 10064e2:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
 10064e6:	f00c fa43 	bl	1012970 <strcmp>
 10064ea:	2800      	cmp	r0, #0
 10064ec:	d1f3      	bne.n	10064d6 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
 10064ee:	4628      	mov	r0, r5
 10064f0:	f8d5 1358 	ldr.w	r1, [r5, #856]	; 0x358
 10064f4:	f00c f962 	bl	10127bc <ipc_rpmsg_deinit>
	if (err != 0) {
 10064f8:	4604      	mov	r4, r0
 10064fa:	bb70      	cbnz	r0, 100655a <close+0xb6>
	const struct backend_config_t *conf = instance->config;
 10064fc:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
 10064fe:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
 1006500:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
 1006502:	6883      	ldr	r3, [r0, #8]
 1006504:	691b      	ldr	r3, [r3, #16]
 1006506:	b333      	cbz	r3, 1006556 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
 1006508:	4622      	mov	r2, r4
 100650a:	6989      	ldr	r1, [r1, #24]
 100650c:	4798      	blx	r3
	if (err != 0) {
 100650e:	4604      	mov	r4, r0
 1006510:	bb18      	cbnz	r0, 100655a <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
 1006512:	f506 762e 	add.w	r6, r6, #696	; 0x2b8
 1006516:	4649      	mov	r1, r9
 1006518:	4630      	mov	r0, r6
 100651a:	f00a f9c5 	bl	10108a8 <k_work_queue_drain>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
 100651e:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
 1006520:	f505 76e0 	add.w	r6, r5, #448	; 0x1c0
 1006524:	f000 fc92 	bl	1006e4c <z_impl_k_thread_abort>
 1006528:	4630      	mov	r0, r6
 100652a:	f8d8 1000 	ldr.w	r1, [r8]
 100652e:	f00c f982 	bl	1012836 <ipc_static_vrings_deinit>
	if (err != 0) {
 1006532:	4604      	mov	r4, r0
 1006534:	b988      	cbnz	r0, 100655a <close+0xb6>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
 1006536:	4601      	mov	r1, r0
 1006538:	22e8      	movs	r2, #232	; 0xe8
 100653a:	4630      	mov	r0, r6
 100653c:	f00c fa69 	bl	1012a12 <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
 1006540:	4621      	mov	r1, r4
 1006542:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 1006546:	4628      	mov	r0, r5
 1006548:	f00c fa63 	bl	1012a12 <memset>
	atomic_set(&data->state, STATE_READY);
 100654c:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
 100654e:	4638      	mov	r0, r7
 1006550:	f00c f8b1 	bl	10126b6 <atomic_set.isra.0>
	return err;
 1006554:	e7c1      	b.n	10064da <close+0x36>
		return -ENOSYS;
 1006556:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
 100655a:	2102      	movs	r1, #2
 100655c:	e7f7      	b.n	100654e <close+0xaa>
		return -EALREADY;
 100655e:	f06f 0477 	mvn.w	r4, #119	; 0x77
 1006562:	e7ba      	b.n	10064da <close+0x36>
 1006564:	01015d75 	.word	0x01015d75

01006568 <bound_cb>:
{
 1006568:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
 100656a:	4604      	mov	r4, r0
 100656c:	b140      	cbz	r0, 1006580 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 100656e:	2300      	movs	r3, #0
 1006570:	2201      	movs	r2, #1
 1006572:	e9cd 3200 	strd	r3, r2, [sp]
 1006576:	4b07      	ldr	r3, [pc, #28]	; (1006594 <bound_cb+0x2c>)
 1006578:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 100657c:	f009 fb60 	bl	100fc40 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
 1006580:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 1006582:	681b      	ldr	r3, [r3, #0]
 1006584:	b123      	cbz	r3, 1006590 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
 1006586:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 1006588:	b002      	add	sp, #8
 100658a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
 100658e:	4718      	bx	r3
}
 1006590:	b002      	add	sp, #8
 1006592:	bd10      	pop	{r4, pc}
 1006594:	01015d75 	.word	0x01015d75

01006598 <send>:
{
 1006598:	b513      	push	{r0, r1, r4, lr}
 100659a:	4604      	mov	r4, r0
 100659c:	4608      	mov	r0, r1
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 100659e:	6921      	ldr	r1, [r4, #16]
 10065a0:	f501 7157 	add.w	r1, r1, #860	; 0x35c
 10065a4:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
 10065a8:	2902      	cmp	r1, #2
 10065aa:	d110      	bne.n	10065ce <send+0x36>
	if (len == 0) {
 10065ac:	b193      	cbz	r3, 10065d4 <send+0x3c>
	if (!rpmsg_ept) {
 10065ae:	b1a0      	cbz	r0, 10065da <send+0x42>
 10065b0:	2101      	movs	r1, #1
 10065b2:	e9cd 3100 	strd	r3, r1, [sp]
 10065b6:	4613      	mov	r3, r2
 10065b8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 10065bc:	f009 fb40 	bl	100fc40 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
 10065c0:	4b07      	ldr	r3, [pc, #28]	; (10065e0 <send+0x48>)
		return -ENOMEM;
 10065c2:	4298      	cmp	r0, r3
 10065c4:	bf08      	it	eq
 10065c6:	f06f 000b 	mvneq.w	r0, #11
}
 10065ca:	b002      	add	sp, #8
 10065cc:	bd10      	pop	{r4, pc}
		return -EBUSY;
 10065ce:	f06f 000f 	mvn.w	r0, #15
 10065d2:	e7fa      	b.n	10065ca <send+0x32>
		return -EBADMSG;
 10065d4:	f06f 004c 	mvn.w	r0, #76	; 0x4c
 10065d8:	e7f7      	b.n	10065ca <send+0x32>
		return -ENOENT;
 10065da:	f06f 0001 	mvn.w	r0, #1
 10065de:	e7f4      	b.n	10065ca <send+0x32>
 10065e0:	fffff82e 	.word	0xfffff82e

010065e4 <register_ept>:
{
 10065e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 10065e8:	4688      	mov	r8, r1
 10065ea:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
 10065ec:	6906      	ldr	r6, [r0, #16]
 10065ee:	f506 7357 	add.w	r3, r6, #860	; 0x35c
 10065f2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
 10065f6:	2b02      	cmp	r3, #2
 10065f8:	d15f      	bne.n	10066ba <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
 10065fa:	6813      	ldr	r3, [r2, #0]
 10065fc:	b923      	cbnz	r3, 1006608 <register_ept+0x24>
		return -EINVAL;
 10065fe:	f06f 0015 	mvn.w	r0, #21
}
 1006602:	b003      	add	sp, #12
 1006604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
 1006608:	781b      	ldrb	r3, [r3, #0]
 100660a:	2b00      	cmp	r3, #0
 100660c:	d0f7      	beq.n	10065fe <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
 100660e:	f8d6 9358 	ldr.w	r9, [r6, #856]	; 0x358
 1006612:	f1b9 0f00 	cmp.w	r9, #0
 1006616:	d133      	bne.n	1006680 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
 1006618:	f506 77d4 	add.w	r7, r6, #424	; 0x1a8
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
 100661c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1006620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1006624:	4638      	mov	r0, r7
 1006626:	f009 ff13 	bl	1010450 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
 100662a:	4630      	mov	r0, r6
 100662c:	682a      	ldr	r2, [r5, #0]
 100662e:	a901      	add	r1, sp, #4
 1006630:	f7ff fe48 	bl	10062c4 <get_ept>
	if (rpmsg_ept == NULL) {
 1006634:	9c01      	ldr	r4, [sp, #4]
 1006636:	b91c      	cbnz	r4, 1006640 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
 1006638:	4638      	mov	r0, r7
 100663a:	f00c f83a 	bl	10126b2 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
 100663e:	e7de      	b.n	10065fe <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
 1006640:	f105 0308 	add.w	r3, r5, #8
 1006644:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
 1006646:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
 1006648:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
 100664c:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
 100664e:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
 1006650:	b160      	cbz	r0, 100666c <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
 1006652:	4638      	mov	r0, r7
 1006654:	f00c f82d 	bl	10126b2 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
 1006658:	4621      	mov	r1, r4
 100665a:	4630      	mov	r0, r6
 100665c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 100665e:	682a      	ldr	r2, [r5, #0]
 1006660:	f7ff fe0e 	bl	1006280 <advertise_ept>
	return 0;
 1006664:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
 1006666:	f8c8 4000 	str.w	r4, [r8]
	return 0;
 100666a:	e7ca      	b.n	1006602 <register_ept+0x1e>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
 100666c:	2220      	movs	r2, #32
 100666e:	6829      	ldr	r1, [r5, #0]
 1006670:	f104 0040 	add.w	r0, r4, #64	; 0x40
 1006674:	f00c f958 	bl	1012928 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
 1006678:	4638      	mov	r0, r7
 100667a:	f00c f81a 	bl	10126b2 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
 100667e:	e7f1      	b.n	1006664 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
 1006680:	4630      	mov	r0, r6
 1006682:	490f      	ldr	r1, [pc, #60]	; (10066c0 <register_ept+0xdc>)
 1006684:	f00b ffe2 	bl	101264c <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
 1006688:	4604      	mov	r4, r0
 100668a:	2800      	cmp	r0, #0
 100668c:	d0b7      	beq.n	10065fe <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
 100668e:	f105 0308 	add.w	r3, r5, #8
 1006692:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
 1006694:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
 1006696:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
 1006698:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
 100669a:	2300      	movs	r3, #0
 100669c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
 10066a0:	2220      	movs	r2, #32
 10066a2:	6829      	ldr	r1, [r5, #0]
 10066a4:	3040      	adds	r0, #64	; 0x40
 10066a6:	f00c f93f 	bl	1012928 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
 10066aa:	4622      	mov	r2, r4
 10066ac:	2101      	movs	r1, #1
 10066ae:	4630      	mov	r0, r6
 10066b0:	f000 f83e 	bl	1006730 <ipc_rpmsg_register_ept>
	if (err != 0) {
 10066b4:	2800      	cmp	r0, #0
 10066b6:	d0d5      	beq.n	1006664 <register_ept+0x80>
 10066b8:	e7a1      	b.n	10065fe <register_ept+0x1a>
		return -EBUSY;
 10066ba:	f06f 000f 	mvn.w	r0, #15
 10066be:	e7a0      	b.n	1006602 <register_ept+0x1e>
 10066c0:	01015d75 	.word	0x01015d75

010066c4 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 10066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10066c8:	4605      	mov	r5, r0
 10066ca:	460e      	mov	r6, r1
 10066cc:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
 10066ce:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
 10066d0:	f8d0 a0a8 	ldr.w	sl, [r0, #168]	; 0xa8
{
 10066d4:	b085      	sub	sp, #20
 10066d6:	f5aa 74aa 	sub.w	r4, sl, #340	; 0x154
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
 10066da:	4621      	mov	r1, r4
 10066dc:	4630      	mov	r0, r6
 10066de:	f00c f947 	bl	1012970 <strcmp>
 10066e2:	b9e0      	cbnz	r0, 100671e <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
 10066e4:	4b11      	ldr	r3, [pc, #68]	; (100672c <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
 10066e6:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
 10066ea:	9302      	str	r3, [sp, #8]
 10066ec:	f8da 3010 	ldr.w	r3, [sl, #16]
 10066f0:	4632      	mov	r2, r6
 10066f2:	e9cd 8300 	strd	r8, r3, [sp]
 10066f6:	4629      	mov	r1, r5
 10066f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 10066fc:	4658      	mov	r0, fp
 10066fe:	f5aa 79ca 	sub.w	r9, sl, #404	; 0x194
 1006702:	f009 fae9 	bl	100fcd8 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
 1006706:	b960      	cbnz	r0, 1006722 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
 1006708:	2370      	movs	r3, #112	; 0x70
 100670a:	2201      	movs	r2, #1
 100670c:	fb03 9307 	mla	r3, r3, r7, r9
 1006710:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
 1006714:	f8da 300c 	ldr.w	r3, [sl, #12]
 1006718:	b10b      	cbz	r3, 100671e <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
 100671a:	4658      	mov	r0, fp
 100671c:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
 100671e:	3470      	adds	r4, #112	; 0x70
 1006720:	b117      	cbz	r7, 1006728 <ns_bind_cb+0x64>
			}
		}
	}
}
 1006722:	b005      	add	sp, #20
 1006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
 1006728:	2701      	movs	r7, #1
 100672a:	e7d6      	b.n	10066da <ns_bind_cb+0x16>
 100672c:	010127b9 	.word	0x010127b9

01006730 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
 1006730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 1006732:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
 1006734:	b190      	cbz	r0, 100675c <ipc_rpmsg_register_ept+0x2c>
 1006736:	b18a      	cbz	r2, 100675c <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
 1006738:	2901      	cmp	r1, #1
 100673a:	d112      	bne.n	1006762 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
 100673c:	4b0a      	ldr	r3, [pc, #40]	; (1006768 <ipc_rpmsg_register_ept+0x38>)
 100673e:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 1006742:	9302      	str	r3, [sp, #8]
 1006744:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 1006748:	3240      	adds	r2, #64	; 0x40
 100674a:	9301      	str	r3, [sp, #4]
 100674c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1006750:	4620      	mov	r0, r4
 1006752:	9300      	str	r3, [sp, #0]
 1006754:	f009 fac0 	bl	100fcd8 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
 1006758:	b004      	add	sp, #16
 100675a:	bd10      	pop	{r4, pc}
		return -EINVAL;
 100675c:	f06f 0015 	mvn.w	r0, #21
 1006760:	e7fa      	b.n	1006758 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
 1006762:	2000      	movs	r0, #0
 1006764:	e7f8      	b.n	1006758 <ipc_rpmsg_register_ept+0x28>
 1006766:	bf00      	nop
 1006768:	010127b9 	.word	0x010127b9

0100676c <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
 100676c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1006770:	b087      	sub	sp, #28
 1006772:	460e      	mov	r6, r1
 1006774:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
 1006778:	4614      	mov	r4, r2
 100677a:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
 100677e:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
 1006780:	b330      	cbz	r0, 10067d0 <ipc_rpmsg_init+0x64>
 1006782:	b329      	cbz	r1, 10067d0 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
 1006784:	f8df c050 	ldr.w	ip, [pc, #80]	; 10067d8 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
 1006788:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
 100678c:	2d00      	cmp	r5, #0
 100678e:	bf08      	it	eq
 1006790:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
 1006792:	b99e      	cbnz	r6, 10067bc <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
 1006794:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
 1006798:	f500 74ca 	add.w	r4, r0, #404	; 0x194
 100679c:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
 100679e:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
 10067a0:	f00e fa11 	bl	1014bc6 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
 10067a4:	ab03      	add	r3, sp, #12
 10067a6:	e9cd 4300 	strd	r4, r3, [sp]
 10067aa:	462a      	mov	r2, r5
 10067ac:	463b      	mov	r3, r7
 10067ae:	4641      	mov	r1, r8
 10067b0:	4648      	mov	r0, r9
 10067b2:	f009 fb65 	bl	100fe80 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
 10067b6:	b007      	add	sp, #28
 10067b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
 10067bc:	2200      	movs	r2, #0
 10067be:	4641      	mov	r1, r8
 10067c0:	920e      	str	r2, [sp, #56]	; 0x38
 10067c2:	4648      	mov	r0, r9
 10067c4:	462a      	mov	r2, r5
}
 10067c6:	b007      	add	sp, #28
 10067c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
 10067cc:	f009 bc80 	b.w	10100d0 <rpmsg_init_vdev>
		return -EINVAL;
 10067d0:	f06f 0015 	mvn.w	r0, #21
 10067d4:	e7ef      	b.n	10067b6 <ipc_rpmsg_init+0x4a>
 10067d6:	bf00      	nop
 10067d8:	010066c5 	.word	0x010066c5

010067dc <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
 10067dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 10067de:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
 10067e0:	4604      	mov	r4, r0
{
 10067e2:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
 10067e4:	2800      	cmp	r0, #0
 10067e6:	d06f      	beq.n	10068c8 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
 10067e8:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
 10067ea:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
 10067ec:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
 10067ee:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
 10067f0:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
 10067f4:	4f36      	ldr	r7, [pc, #216]	; (10068d0 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
 10067f6:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
 10067f8:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
 10067fc:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
 1006800:	e9cd 3301 	strd	r3, r3, [sp, #4]
 1006804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1006808:	9300      	str	r3, [sp, #0]
 100680a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 100680c:	f00d fc9b 	bl	1014146 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 1006810:	4a30      	ldr	r2, [pc, #192]	; (10068d4 <ipc_static_vrings_init+0xf8>)
 1006812:	ab06      	add	r3, sp, #24
 1006814:	e892 0003 	ldmia.w	r2, {r0, r1}
 1006818:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
 100681c:	4618      	mov	r0, r3
 100681e:	f009 f92f 	bl	100fa80 <metal_init>
	if (err != 0) {
 1006822:	4605      	mov	r5, r0
 1006824:	b9d8      	cbnz	r0, 100685e <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
 1006826:	f104 0034 	add.w	r0, r4, #52	; 0x34
 100682a:	f009 f909 	bl	100fa40 <metal_register_generic_device>
	if (err != 0) {
 100682e:	4605      	mov	r5, r0
 1006830:	b9a8      	cbnz	r0, 100685e <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 1006832:	4639      	mov	r1, r7
 1006834:	4828      	ldr	r0, [pc, #160]	; (10068d8 <ipc_static_vrings_init+0xfc>)
 1006836:	aa05      	add	r2, sp, #20
 1006838:	f00d fc57 	bl	10140ea <metal_device_open>
	if (err != 0) {
 100683c:	4605      	mov	r5, r0
 100683e:	b970      	cbnz	r0, 100685e <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
 1006840:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
 1006842:	689a      	ldr	r2, [r3, #8]
 1006844:	b172      	cbz	r2, 1006864 <ipc_static_vrings_init+0x88>
 1006846:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
 1006848:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
 100684c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
 1006850:	f00b ffe3 	bl	101281a <virtqueue_allocate>
 1006854:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
 1006858:	b930      	cbnz	r0, 1006868 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
 100685a:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
 100685e:	4628      	mov	r0, r5
 1006860:	b009      	add	sp, #36	; 0x24
 1006862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1006864:	4603      	mov	r3, r0
 1006866:	e7ef      	b.n	1006848 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
 1006868:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 100686c:	f00b ffd5 	bl	101281a <virtqueue_allocate>
 1006870:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
 1006874:	2800      	cmp	r0, #0
 1006876:	d0f0      	beq.n	100685a <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
 1006878:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
 100687c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
 1006880:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
 1006884:	2304      	movs	r3, #4
 1006886:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
 100688a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
 100688e:	2302      	movs	r3, #2
 1006890:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
 1006892:	4b12      	ldr	r3, [pc, #72]	; (10068dc <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
 1006894:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
 1006898:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
 100689c:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
 10068a0:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
 10068a4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
 10068a8:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
 10068aa:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
 10068ae:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
 10068b2:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
 10068b6:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
 10068ba:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
 10068be:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
 10068c2:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
 10068c4:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
 10068c6:	e7ca      	b.n	100685e <ipc_static_vrings_init+0x82>
		return -EINVAL;
 10068c8:	f06f 0515 	mvn.w	r5, #21
 10068cc:	e7c7      	b.n	100685e <ipc_static_vrings_init+0x82>
 10068ce:	bf00      	nop
 10068d0:	01015a87 	.word	0x01015a87
 10068d4:	01015660 	.word	0x01015660
 10068d8:	01015a91 	.word	0x01015a91
 10068dc:	01015814 	.word	0x01015814

010068e0 <z_isr_install>:
#endif /* CONFIG_MULTI_LEVEL_INTERRUPTS */

	/* If dynamic IRQs are enabled, then the _sw_isr_table is in RAM and
	 * can be modified
	 */
	_sw_isr_table[table_idx].arg = param;
 10068e0:	4b03      	ldr	r3, [pc, #12]	; (10068f0 <z_isr_install+0x10>)
 10068e2:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	_sw_isr_table[table_idx].isr = routine;
 10068e6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 10068ea:	6059      	str	r1, [r3, #4]
}
 10068ec:	4770      	bx	lr
 10068ee:	bf00      	nop
 10068f0:	21000118 	.word	0x21000118

010068f4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 10068f4:	4901      	ldr	r1, [pc, #4]	; (10068fc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 10068f6:	2210      	movs	r2, #16
	str	r2, [r1]
 10068f8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 10068fa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 10068fc:	e000ed10 	.word	0xe000ed10

01006900 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 1006900:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 1006902:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 1006904:	f380 8811 	msr	BASEPRI, r0
	isb
 1006908:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 100690c:	b501      	push	{r0, lr}
 100690e:	f7ff fc79 	bl	1006204 <z_arm_on_enter_cpu_idle>
 1006912:	2800      	cmp	r0, #0
 1006914:	d002      	beq.n	100691c <_skip_0>
 1006916:	f3bf 8f4f 	dsb	sy
 100691a:	bf30      	wfi

0100691c <_skip_0>:
 100691c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 1006920:	b662      	cpsie	i
	isb
 1006922:	f3bf 8f6f 	isb	sy

	bx	lr
 1006926:	4770      	bx	lr

01006928 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
 1006928:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
 100692a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
 100692c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
 1006930:	b501      	push	{r0, lr}
 1006932:	f7ff fc67 	bl	1006204 <z_arm_on_enter_cpu_idle>
 1006936:	2800      	cmp	r0, #0
 1006938:	d002      	beq.n	1006940 <_skip_1>
 100693a:	f3bf 8f4f 	dsb	sy
 100693e:	bf20      	wfe

01006940 <_skip_1>:
 1006940:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
 1006944:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
 1006948:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
 100694a:	4770      	bx	lr

0100694c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 100694c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 100694e:	2800      	cmp	r0, #0
 1006950:	db07      	blt.n	1006962 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1006952:	2301      	movs	r3, #1
 1006954:	0941      	lsrs	r1, r0, #5
 1006956:	4a03      	ldr	r2, [pc, #12]	; (1006964 <arch_irq_enable+0x18>)
 1006958:	f000 001f 	and.w	r0, r0, #31
 100695c:	4083      	lsls	r3, r0
 100695e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 1006962:	4770      	bx	lr
 1006964:	e000e100 	.word	0xe000e100

01006968 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 1006968:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 100696a:	2800      	cmp	r0, #0
 100696c:	db0c      	blt.n	1006988 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 100696e:	2201      	movs	r2, #1
 1006970:	4906      	ldr	r1, [pc, #24]	; (100698c <arch_irq_disable+0x24>)
 1006972:	0943      	lsrs	r3, r0, #5
 1006974:	f000 001f 	and.w	r0, r0, #31
 1006978:	4082      	lsls	r2, r0
 100697a:	3320      	adds	r3, #32
 100697c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 1006980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1006984:	f3bf 8f6f 	isb	sy
}
 1006988:	4770      	bx	lr
 100698a:	bf00      	nop
 100698c:	e000e100 	.word	0xe000e100

01006990 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 1006990:	4b05      	ldr	r3, [pc, #20]	; (10069a8 <arch_irq_is_enabled+0x18>)
 1006992:	0942      	lsrs	r2, r0, #5
 1006994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 1006998:	2301      	movs	r3, #1
 100699a:	f000 001f 	and.w	r0, r0, #31
 100699e:	fa03 f000 	lsl.w	r0, r3, r0
}
 10069a2:	4010      	ands	r0, r2
 10069a4:	4770      	bx	lr
 10069a6:	bf00      	nop
 10069a8:	e000e100 	.word	0xe000e100

010069ac <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
 10069ac:	07d3      	lsls	r3, r2, #31
		if (ZERO_LATENCY_LEVELS == 1) {
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
 10069ae:	bf48      	it	mi
 10069b0:	2100      	movmi	r1, #0
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 10069b2:	b240      	sxtb	r0, r0
		prio += _IRQ_PRIO_OFFSET;
 10069b4:	bf58      	it	pl
 10069b6:	3102      	addpl	r1, #2
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 10069b8:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10069ba:	bfac      	ite	ge
 10069bc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10069c0:	4a06      	ldrlt	r2, [pc, #24]	; (10069dc <z_arm_irq_priority_set+0x30>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10069c2:	ea4f 1341 	mov.w	r3, r1, lsl #5
 10069c6:	b2db      	uxtb	r3, r3
 10069c8:	bfab      	itete	ge
 10069ca:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10069ce:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10069d2:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10069d6:	5413      	strblt	r3, [r2, r0]
}
 10069d8:	4770      	bx	lr
 10069da:	bf00      	nop
 10069dc:	e000ed14 	.word	0xe000ed14

010069e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 10069e0:	bf30      	wfi
    b z_SysNmiOnReset
 10069e2:	f7ff bffd 	b.w	10069e0 <z_SysNmiOnReset>
 10069e6:	bf00      	nop

010069e8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 10069e8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 10069ea:	4b08      	ldr	r3, [pc, #32]	; (1006a0c <z_arm_prep_c+0x24>)
 10069ec:	4a08      	ldr	r2, [pc, #32]	; (1006a10 <z_arm_prep_c+0x28>)
 10069ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 10069f2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 10069f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 10069f8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 10069fc:	f009 fbc0 	bl	1010180 <z_bss_zero>
	z_data_copy();
 1006a00:	f00a fb4e 	bl	10110a0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 1006a04:	f000 f99c 	bl	1006d40 <z_arm_interrupt_init>
	z_cstart();
 1006a08:	f009 fbfa 	bl	1010200 <z_cstart>
 1006a0c:	01000000 	.word	0x01000000
 1006a10:	e000ed00 	.word	0xe000ed00

01006a14 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 1006a14:	4a09      	ldr	r2, [pc, #36]	; (1006a3c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 1006a16:	490a      	ldr	r1, [pc, #40]	; (1006a40 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 1006a18:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 1006a1a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 1006a1c:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 1006a1e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 1006a20:	4908      	ldr	r1, [pc, #32]	; (1006a44 <arch_swap+0x30>)
 1006a22:	684b      	ldr	r3, [r1, #4]
 1006a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 1006a28:	604b      	str	r3, [r1, #4]
 1006a2a:	2300      	movs	r3, #0
 1006a2c:	f383 8811 	msr	BASEPRI, r3
 1006a30:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 1006a34:	6893      	ldr	r3, [r2, #8]
}
 1006a36:	6f98      	ldr	r0, [r3, #120]	; 0x78
 1006a38:	4770      	bx	lr
 1006a3a:	bf00      	nop
 1006a3c:	21003a3c 	.word	0x21003a3c
 1006a40:	010159e0 	.word	0x010159e0
 1006a44:	e000ed00 	.word	0xe000ed00

01006a48 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 1006a48:	4913      	ldr	r1, [pc, #76]	; (1006a98 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
 1006a4a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 1006a4c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 1006a50:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 1006a52:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 1006a56:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 1006a5a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
 1006a5c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 1006a60:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 1006a64:	4f0d      	ldr	r7, [pc, #52]	; (1006a9c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 1006a66:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 1006a6a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 1006a6c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 1006a6e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 1006a70:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 1006a72:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 1006a74:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 1006a76:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 1006a7a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 1006a7e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 1006a82:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
 1006a86:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
 1006a8a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
 1006a8c:	f00b ff22 	bl	10128d4 <configure_builtin_stack_guard>
    pop {r2, lr}
 1006a90:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 1006a94:	4770      	bx	lr
 1006a96:	0000      	.short	0x0000
    ldr r1, =_kernel
 1006a98:	21003a3c 	.word	0x21003a3c
    ldr v4, =_SCS_ICSR
 1006a9c:	e000ed04 	.word	0xe000ed04

01006aa0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 1006aa0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 1006aa4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 1006aa6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 1006aaa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 1006aae:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 1006ab0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 1006ab4:	2902      	cmp	r1, #2
    beq _oops
 1006ab6:	d0ff      	beq.n	1006ab8 <_oops>

01006ab8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 1006ab8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 1006aba:	f00b feee 	bl	101289a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 1006abe:	bd01      	pop	{r0, pc}

01006ac0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 1006ac0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 1006ac4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 1006ac6:	490b      	ldr	r1, [pc, #44]	; (1006af4 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
 1006ac8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 1006acc:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 1006ace:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 1006ad2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 1006ad6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 1006ad8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
 1006adc:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 1006ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 1006ae4:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 1006ae8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 1006aea:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 1006aec:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 1006aee:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 1006af0:	4770      	bx	lr
 1006af2:	bf00      	nop
 1006af4:	01011e1f 	.word	0x01011e1f

01006af8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 1006af8:	4b08      	ldr	r3, [pc, #32]	; (1006b1c <arch_switch_to_main_thread+0x24>)
 1006afa:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 1006afc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 1006afe:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 1006b02:	4610      	mov	r0, r2
 1006b04:	f381 8809 	msr	PSP, r1
 1006b08:	2100      	movs	r1, #0
 1006b0a:	b663      	cpsie	if
 1006b0c:	f381 8811 	msr	BASEPRI, r1
 1006b10:	f3bf 8f6f 	isb	sy
 1006b14:	2200      	movs	r2, #0
 1006b16:	2300      	movs	r3, #0
 1006b18:	f00b f981 	bl	1011e1e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 1006b1c:	21003a3c 	.word	0x21003a3c

01006b20 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 1006b20:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 1006b22:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 1006b26:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 1006b2a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 1006b2e:	4904      	ldr	r1, [pc, #16]	; (1006b40 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 1006b30:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 1006b32:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 1006b34:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 1006b36:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 1006b3a:	4902      	ldr	r1, [pc, #8]	; (1006b44 <_isr_wrapper+0x24>)
	bx r1
 1006b3c:	4708      	bx	r1
 1006b3e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 1006b40:	21000118 	.word	0x21000118
	ldr r1, =z_arm_int_exit
 1006b44:	01006b49 	.word	0x01006b49

01006b48 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 1006b48:	4b04      	ldr	r3, [pc, #16]	; (1006b5c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 1006b4a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 1006b4c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 1006b4e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 1006b50:	d003      	beq.n	1006b5a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 1006b52:	4903      	ldr	r1, [pc, #12]	; (1006b60 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 1006b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 1006b58:	600a      	str	r2, [r1, #0]

01006b5a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 1006b5a:	4770      	bx	lr
	ldr r3, =_kernel
 1006b5c:	21003a3c 	.word	0x21003a3c
	ldr r1, =_SCS_ICSR
 1006b60:	e000ed04 	.word	0xe000ed04

01006b64 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 1006b64:	4b08      	ldr	r3, [pc, #32]	; (1006b88 <usage_fault.constprop.0+0x24>)
 1006b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 1006b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
 1006b6a:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 1006b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 1006b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 1006b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 1006b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1006b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
 1006b76:	f3c0 5000 	ubfx	r0, r0, #20, #1
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1006b7a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 1006b7e:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
 1006b82:	0040      	lsls	r0, r0, #1
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1006b84:	629a      	str	r2, [r3, #40]	; 0x28
}
 1006b86:	4770      	bx	lr
 1006b88:	e000ed00 	.word	0xe000ed00

01006b8c <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 1006b8c:	4b0b      	ldr	r3, [pc, #44]	; (1006bbc <bus_fault.constprop.0+0x30>)
 1006b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 1006b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 1006b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1006b94:	0592      	lsls	r2, r2, #22
 1006b96:	d508      	bpl.n	1006baa <bus_fault.constprop.0+0x1e>
		STORE_xFAR(bfar, SCB->BFAR);
 1006b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 1006b9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1006b9c:	0412      	lsls	r2, r2, #16
 1006b9e:	d504      	bpl.n	1006baa <bus_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
 1006ba0:	b118      	cbz	r0, 1006baa <bus_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 1006ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1006ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 1006ba8:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1006baa:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 1006bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 1006bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 1006bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1006bb2:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 1006bb6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1006bb8:	7008      	strb	r0, [r1, #0]
}
 1006bba:	4770      	bx	lr
 1006bbc:	e000ed00 	.word	0xe000ed00

01006bc0 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 1006bc0:	4b0d      	ldr	r3, [pc, #52]	; (1006bf8 <mem_manage_fault.constprop.0+0x38>)
 1006bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 1006bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 1006bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1006bc8:	0792      	lsls	r2, r2, #30
 1006bca:	d508      	bpl.n	1006bde <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
 1006bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 1006bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1006bd0:	0612      	lsls	r2, r2, #24
 1006bd2:	d504      	bpl.n	1006bde <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
 1006bd4:	b118      	cbz	r0, 1006bde <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 1006bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1006bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 1006bdc:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1006bde:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 1006be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 1006be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1006be4:	06d2      	lsls	r2, r2, #27
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 1006be6:	4a04      	ldr	r2, [pc, #16]	; (1006bf8 <mem_manage_fault.constprop.0+0x38>)
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 1006be8:	bf58      	it	pl
 1006bea:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 1006bec:	6a93      	ldr	r3, [r2, #40]	; 0x28
 1006bee:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 1006bf2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1006bf4:	7008      	strb	r0, [r1, #0]
}
 1006bf6:	4770      	bx	lr
 1006bf8:	e000ed00 	.word	0xe000ed00

01006bfc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 1006bfc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1006bfe:	4b44      	ldr	r3, [pc, #272]	; (1006d10 <z_arm_fault+0x114>)
{
 1006c00:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1006c02:	685b      	ldr	r3, [r3, #4]
 1006c04:	2500      	movs	r5, #0
{
 1006c06:	b08a      	sub	sp, #40	; 0x28
 1006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 1006c0c:	f385 8811 	msr	BASEPRI, r5
 1006c10:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 1006c14:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 1006c18:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 1006c1c:	d111      	bne.n	1006c42 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 1006c1e:	f002 000c 	and.w	r0, r2, #12
 1006c22:	2808      	cmp	r0, #8
 1006c24:	d00d      	beq.n	1006c42 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 1006c26:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 1006c28:	bf4c      	ite	mi
 1006c2a:	460e      	movmi	r6, r1
			*nested_exc = true;
 1006c2c:	2501      	movpl	r5, #1
	*recoverable = false;
 1006c2e:	2200      	movs	r2, #0
	switch (fault) {
 1006c30:	3b03      	subs	r3, #3
	*recoverable = false;
 1006c32:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 1006c36:	2b03      	cmp	r3, #3
 1006c38:	d805      	bhi.n	1006c46 <z_arm_fault+0x4a>
 1006c3a:	e8df f003 	tbb	[pc, r3]
 1006c3e:	5c1e      	.short	0x5c1e
 1006c40:	5960      	.short	0x5960
		return NULL;
 1006c42:	462e      	mov	r6, r5
 1006c44:	e7f3      	b.n	1006c2e <z_arm_fault+0x32>
 1006c46:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 1006c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 1006c4c:	b99b      	cbnz	r3, 1006c76 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 1006c4e:	2220      	movs	r2, #32
 1006c50:	4631      	mov	r1, r6
 1006c52:	a802      	add	r0, sp, #8
 1006c54:	f00b fed2 	bl	10129fc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 1006c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1006c5a:	2d00      	cmp	r5, #0
 1006c5c:	d053      	beq.n	1006d06 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 1006c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 1006c62:	b922      	cbnz	r2, 1006c6e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 1006c64:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 1006c68:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 1006c6c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 1006c6e:	4620      	mov	r0, r4
 1006c70:	a902      	add	r1, sp, #8
 1006c72:	f00b fe10 	bl	1012896 <z_arm_fatal_error>
}
 1006c76:	b00a      	add	sp, #40	; 0x28
 1006c78:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 1006c7a:	4b25      	ldr	r3, [pc, #148]	; (1006d10 <z_arm_fault+0x114>)
 1006c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1006c7e:	0791      	lsls	r1, r2, #30
 1006c80:	d4e1      	bmi.n	1006c46 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 1006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1006c84:	2a00      	cmp	r2, #0
 1006c86:	dbde      	blt.n	1006c46 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 1006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1006c8a:	0052      	lsls	r2, r2, #1
 1006c8c:	d5db      	bpl.n	1006c46 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 1006c8e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 1006c90:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 1006c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 1006c96:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 1006c98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1006c9c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 1006ca0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 1006ca2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 1006ca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 1006caa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 1006cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1006cb0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 1006cb4:	f64d 7202 	movw	r2, #57090	; 0xdf02
 1006cb8:	4291      	cmp	r1, r2
 1006cba:	d009      	beq.n	1006cd0 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 1006cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1006cbe:	b2d2      	uxtb	r2, r2
 1006cc0:	b142      	cbz	r2, 1006cd4 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
 1006cc2:	2001      	movs	r0, #1
 1006cc4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
 1006cc8:	f7ff ff7a 	bl	1006bc0 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
 1006ccc:	4604      	mov	r4, r0
		break;
 1006cce:	e7bb      	b.n	1006c48 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
 1006cd0:	6834      	ldr	r4, [r6, #0]
 1006cd2:	e7b9      	b.n	1006c48 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 1006cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1006cd6:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 1006cda:	d005      	beq.n	1006ce8 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
 1006cdc:	2001      	movs	r0, #1
 1006cde:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
 1006ce2:	f7ff ff53 	bl	1006b8c <bus_fault.constprop.0>
 1006ce6:	e7f1      	b.n	1006ccc <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 1006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 1006cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 1006cee:	d3aa      	bcc.n	1006c46 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
 1006cf0:	f7ff ff38 	bl	1006b64 <usage_fault.constprop.0>
 1006cf4:	e7ea      	b.n	1006ccc <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
 1006cf6:	2000      	movs	r0, #0
 1006cf8:	f10d 0107 	add.w	r1, sp, #7
 1006cfc:	e7e4      	b.n	1006cc8 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
 1006cfe:	2000      	movs	r0, #0
 1006d00:	f10d 0107 	add.w	r1, sp, #7
 1006d04:	e7ed      	b.n	1006ce2 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 1006d06:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 1006d0a:	f023 0301 	bic.w	r3, r3, #1
 1006d0e:	e7ad      	b.n	1006c6c <z_arm_fault+0x70>
 1006d10:	e000ed00 	.word	0xe000ed00

01006d14 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 1006d14:	4b04      	ldr	r3, [pc, #16]	; (1006d28 <z_arm_fault_init+0x14>)
 1006d16:	695a      	ldr	r2, [r3, #20]
 1006d18:	f042 0210 	orr.w	r2, r2, #16
 1006d1c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
 1006d1e:	695a      	ldr	r2, [r3, #20]
 1006d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 1006d24:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 1006d26:	4770      	bx	lr
 1006d28:	e000ed00 	.word	0xe000ed00

01006d2c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 1006d2c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 1006d30:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 1006d34:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 1006d36:	4672      	mov	r2, lr
	bl z_arm_fault
 1006d38:	f7ff ff60 	bl	1006bfc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 1006d3c:	bd01      	pop	{r0, pc}
 1006d3e:	bf00      	nop

01006d40 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 1006d40:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1006d42:	2140      	movs	r1, #64	; 0x40
 1006d44:	4803      	ldr	r0, [pc, #12]	; (1006d54 <z_arm_interrupt_init+0x14>)
 1006d46:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 1006d48:	3301      	adds	r3, #1
 1006d4a:	2b1e      	cmp	r3, #30
 1006d4c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 1006d50:	d1f9      	bne.n	1006d46 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 1006d52:	4770      	bx	lr
 1006d54:	e000e100 	.word	0xe000e100

01006d58 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
 1006d58:	2000      	movs	r0, #0
    msr CONTROL, r0
 1006d5a:	f380 8814 	msr	CONTROL, r0
    isb
 1006d5e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
 1006d62:	2000      	movs	r0, #0
    msr MSPLIM, r0
 1006d64:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
 1006d68:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
 1006d6c:	f7ff fa86 	bl	100627c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
 1006d70:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
 1006d72:	490e      	ldr	r1, [pc, #56]	; (1006dac <__start+0x54>)
    str r0, [r1]
 1006d74:	6008      	str	r0, [r1, #0]
    dsb
 1006d76:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 1006d7a:	480d      	ldr	r0, [pc, #52]	; (1006db0 <__start+0x58>)
    msr msp, r0
 1006d7c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
 1006d80:	f000 f83e 	bl	1006e00 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 1006d84:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
 1006d86:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 1006d8a:	480a      	ldr	r0, [pc, #40]	; (1006db4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 1006d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 1006d90:	1840      	adds	r0, r0, r1
    msr PSP, r0
 1006d92:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 1006d96:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 1006d9a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 1006d9c:	4308      	orrs	r0, r1
    msr CONTROL, r0
 1006d9e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 1006da2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 1006da6:	f7ff fe1f 	bl	10069e8 <z_arm_prep_c>
 1006daa:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
 1006dac:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 1006db0:	21005e50 	.word	0x21005e50
    ldr r0, =z_interrupt_stacks
 1006db4:	21005150 	.word	0x21005150

01006db8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
 1006db8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 1006dbc:	4905      	ldr	r1, [pc, #20]	; (1006dd4 <sys_arch_reboot+0x1c>)
 1006dbe:	4b06      	ldr	r3, [pc, #24]	; (1006dd8 <sys_arch_reboot+0x20>)
 1006dc0:	68ca      	ldr	r2, [r1, #12]
 1006dc2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 1006dc6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 1006dc8:	60cb      	str	r3, [r1, #12]
 1006dca:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 1006dce:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 1006dd0:	e7fd      	b.n	1006dce <sys_arch_reboot+0x16>
 1006dd2:	bf00      	nop
 1006dd4:	e000ed00 	.word	0xe000ed00
 1006dd8:	05fa0004 	.word	0x05fa0004

01006ddc <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
 1006ddc:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
 1006dde:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
 1006de0:	4906      	ldr	r1, [pc, #24]	; (1006dfc <z_arm_clear_arm_mpu_config+0x20>)
 1006de2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
 1006de6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
 1006dea:	4293      	cmp	r3, r2
 1006dec:	db00      	blt.n	1006df0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
 1006dee:	4770      	bx	lr
  mpu->RNR = rnr;
 1006df0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
 1006df4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
 1006df8:	3301      	adds	r3, #1
 1006dfa:	e7f6      	b.n	1006dea <z_arm_clear_arm_mpu_config+0xe>
 1006dfc:	e000ed00 	.word	0xe000ed00

01006e00 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
 1006e00:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 1006e02:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 1006e04:	2400      	movs	r4, #0
 1006e06:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
 1006e0a:	f7ff ffe7 	bl	1006ddc <z_arm_clear_arm_mpu_config>
 1006e0e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
 1006e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1006e14:	4a0c      	ldr	r2, [pc, #48]	; (1006e48 <z_arm_init_arch_hw_at_boot+0x48>)
 1006e16:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1006e1a:	3301      	adds	r3, #1
 1006e1c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
 1006e1e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1006e22:	d1f8      	bne.n	1006e16 <z_arm_init_arch_hw_at_boot+0x16>
 1006e24:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1006e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1006e2a:	4a07      	ldr	r2, [pc, #28]	; (1006e48 <z_arm_init_arch_hw_at_boot+0x48>)
 1006e2c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1006e30:	3301      	adds	r3, #1
 1006e32:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1006e34:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1006e38:	d1f8      	bne.n	1006e2c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 1006e3a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 1006e3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1006e40:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
 1006e44:	bd10      	pop	{r4, pc}
 1006e46:	bf00      	nop
 1006e48:	e000e100 	.word	0xe000e100

01006e4c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 1006e4c:	4b08      	ldr	r3, [pc, #32]	; (1006e70 <z_impl_k_thread_abort+0x24>)
 1006e4e:	689b      	ldr	r3, [r3, #8]
 1006e50:	4283      	cmp	r3, r0
 1006e52:	d10b      	bne.n	1006e6c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 1006e54:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 1006e58:	b143      	cbz	r3, 1006e6c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 1006e5a:	4b06      	ldr	r3, [pc, #24]	; (1006e74 <z_impl_k_thread_abort+0x28>)
 1006e5c:	685a      	ldr	r2, [r3, #4]
 1006e5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 1006e62:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 1006e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 1006e66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 1006e6a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 1006e6c:	f00a b8a6 	b.w	1010fbc <z_thread_abort>
 1006e70:	21003a3c 	.word	0x21003a3c
 1006e74:	e000ed00 	.word	0xe000ed00

01006e78 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 1006e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 1006e7a:	4c09      	ldr	r4, [pc, #36]	; (1006ea0 <z_arm_configure_static_mpu_regions+0x28>)
 1006e7c:	4a09      	ldr	r2, [pc, #36]	; (1006ea4 <z_arm_configure_static_mpu_regions+0x2c>)
 1006e7e:	4623      	mov	r3, r4
 1006e80:	2101      	movs	r1, #1
 1006e82:	4809      	ldr	r0, [pc, #36]	; (1006ea8 <z_arm_configure_static_mpu_regions+0x30>)
 1006e84:	f000 f8ea 	bl	100705c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
 1006e88:	2300      	movs	r3, #0
 1006e8a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
 1006e8c:	4b07      	ldr	r3, [pc, #28]	; (1006eac <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1006e8e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
 1006e90:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1006e92:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
 1006e94:	9301      	str	r3, [sp, #4]
 1006e96:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1006e98:	f000 f8ea 	bl	1007070 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 1006e9c:	b004      	add	sp, #16
 1006e9e:	bd10      	pop	{r4, pc}
 1006ea0:	21010000 	.word	0x21010000
 1006ea4:	21000000 	.word	0x21000000
 1006ea8:	01015838 	.word	0x01015838
 1006eac:	21000260 	.word	0x21000260

01006eb0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
 1006eb0:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
 1006eb2:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
 1006eb4:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
 1006eb6:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
 1006eba:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
 1006ebe:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
 1006ec0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
 1006ec2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
 1006ec4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
 1006ec8:	4905      	ldr	r1, [pc, #20]	; (1006ee0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
 1006eca:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
 1006ece:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
 1006ed2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
 1006ed6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
 1006eda:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
 1006ede:	bd10      	pop	{r4, pc}
 1006ee0:	e000ed00 	.word	0xe000ed00

01006ee4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 1006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1006ee8:	460f      	mov	r7, r1
 1006eea:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 1006eec:	4606      	mov	r6, r0
 1006eee:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
 1006ef2:	4d4e      	ldr	r5, [pc, #312]	; (100702c <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 1006ef4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
 1006ef6:	45b8      	cmp	r8, r7
 1006ef8:	f280 8094 	bge.w	1007024 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
 1006efc:	f8d6 9004 	ldr.w	r9, [r6, #4]
 1006f00:	f1b9 0f00 	cmp.w	r9, #0
 1006f04:	d036      	beq.n	1006f74 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
 1006f06:	f1b9 0f1f 	cmp.w	r9, #31
 1006f0a:	f240 8089 	bls.w	1007020 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
 1006f0e:	f019 0f1f 	tst.w	r9, #31
 1006f12:	f040 8085 	bne.w	1007020 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
 1006f16:	f8d6 a000 	ldr.w	sl, [r6]
		&&
 1006f1a:	f01a 0f1f 	tst.w	sl, #31
 1006f1e:	d17f      	bne.n	1007020 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 1006f20:	4650      	mov	r0, sl
 1006f22:	f00b fcdb 	bl	10128dc <arm_cmse_mpu_region_get>
 1006f26:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 1006f28:	eb09 000a 	add.w	r0, r9, sl
 1006f2c:	3801      	subs	r0, #1
 1006f2e:	f00b fcd5 	bl	10128dc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
 1006f32:	4583      	cmp	fp, r0
 1006f34:	d174      	bne.n	1007020 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
 1006f36:	f11b 0f16 	cmn.w	fp, #22
 1006f3a:	d071      	beq.n	1007020 <mpu_configure_regions_and_partition.constprop.0+0x13c>
 1006f3c:	455c      	cmp	r4, fp
 1006f3e:	dd6f      	ble.n	1007020 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
 1006f40:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
 1006f44:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
 1006f48:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
 1006f4c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
 1006f50:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
 1006f54:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
 1006f58:	e9d6 3200 	ldrd	r3, r2, [r6]
 1006f5c:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
 1006f5e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
 1006f60:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
 1006f64:	d11e      	bne.n	1006fa4 <mpu_configure_regions_and_partition.constprop.0+0xc0>
 1006f66:	45ca      	cmp	sl, r9
 1006f68:	d108      	bne.n	1006f7c <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
 1006f6a:	4631      	mov	r1, r6
 1006f6c:	fa5f f08b 	uxtb.w	r0, fp
 1006f70:	f00b fcbd 	bl	10128ee <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
 1006f74:	f108 0801 	add.w	r8, r8, #1
 1006f78:	360c      	adds	r6, #12
 1006f7a:	e7bc      	b.n	1006ef6 <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
 1006f7c:	4631      	mov	r1, r6
	MPU->RNR = rnr;
 1006f7e:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
 1006f82:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
 1006f86:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
 1006f8a:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
 1006f8e:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
 1006f90:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
 1006f94:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
 1006f96:	f00b fcaa 	bl	10128ee <mpu_configure_region>

			if (reg_index == -EINVAL) {
 1006f9a:	f110 0f16 	cmn.w	r0, #22
 1006f9e:	d03f      	beq.n	1007020 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
 1006fa0:	1c44      	adds	r4, r0, #1
 1006fa2:	e7e7      	b.n	1006f74 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
 1006fa4:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
 1006fa8:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
 1006fac:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
 1006fae:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
 1006fb2:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
 1006fb6:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
 1006fb8:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
 1006fba:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
 1006fbc:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
 1006fbe:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
 1006fc2:	d0e8      	beq.n	1006f96 <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
 1006fc4:	f00b fc93 	bl	10128ee <mpu_configure_region>
			if (reg_index == -EINVAL) {
 1006fc8:	f110 0f16 	cmn.w	r0, #22
 1006fcc:	d028      	beq.n	1007020 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
 1006fce:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
 1006fd2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
 1006fd6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
 1006fda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
 1006fde:	f362 0304 	bfi	r3, r2, #0, #5
 1006fe2:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
 1006fe6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
 1006fea:	f89d 2008 	ldrb.w	r2, [sp, #8]
 1006fee:	085b      	lsrs	r3, r3, #1
 1006ff0:	f363 1247 	bfi	r2, r3, #5, #3
 1006ff4:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
 1006ff8:	e9d6 3200 	ldrd	r3, r2, [r6]
 1006ffc:	4413      	add	r3, r2
 1006ffe:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
 1007000:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
 1007004:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
 1007006:	4453      	add	r3, sl
 1007008:	eba3 0309 	sub.w	r3, r3, r9
 100700c:	b2c8      	uxtb	r0, r1
 100700e:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 1007012:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
 1007014:	9303      	str	r3, [sp, #12]
 1007016:	d803      	bhi.n	1007020 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 1007018:	4669      	mov	r1, sp
 100701a:	f7ff ff49 	bl	1006eb0 <region_init>
 100701e:	e7bf      	b.n	1006fa0 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
 1007020:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
 1007024:	4620      	mov	r0, r4
 1007026:	b005      	add	sp, #20
 1007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100702c:	e000ed00 	.word	0xe000ed00

01007030 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 1007030:	2205      	movs	r2, #5
 1007032:	4b04      	ldr	r3, [pc, #16]	; (1007044 <arm_core_mpu_enable+0x14>)
 1007034:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 1007038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 100703c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 1007040:	4770      	bx	lr
 1007042:	bf00      	nop
 1007044:	e000ed00 	.word	0xe000ed00

01007048 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 1007048:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 100704c:	2200      	movs	r2, #0
 100704e:	4b02      	ldr	r3, [pc, #8]	; (1007058 <arm_core_mpu_disable+0x10>)
 1007050:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 1007054:	4770      	bx	lr
 1007056:	bf00      	nop
 1007058:	e000ed00 	.word	0xe000ed00

0100705c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 100705c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 100705e:	4c03      	ldr	r4, [pc, #12]	; (100706c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
 1007060:	7822      	ldrb	r2, [r4, #0]
 1007062:	f7ff ff3f 	bl	1006ee4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 1007066:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 1007068:	bd10      	pop	{r4, pc}
 100706a:	bf00      	nop
 100706c:	21003ad3 	.word	0x21003ad3

01007070 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
 1007070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1007074:	4d29      	ldr	r5, [pc, #164]	; (100711c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
 1007076:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
 1007078:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
 100707a:	f04f 0800 	mov.w	r8, #0
 100707e:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
 1007080:	4f27      	ldr	r7, [pc, #156]	; (1007120 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
 1007082:	45d0      	cmp	r8, sl
 1007084:	da1b      	bge.n	10070be <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
 1007086:	f8d6 9004 	ldr.w	r9, [r6, #4]
 100708a:	f1b9 0f00 	cmp.w	r9, #0
 100708e:	d03f      	beq.n	1007110 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
 1007090:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 1007092:	4608      	mov	r0, r1
 1007094:	9101      	str	r1, [sp, #4]
 1007096:	f00b fc21 	bl	10128dc <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 100709a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 100709c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 100709e:	eb09 0001 	add.w	r0, r9, r1
 10070a2:	3801      	subs	r0, #1
 10070a4:	f00b fc1a 	bl	10128dc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
 10070a8:	4284      	cmp	r4, r0
 10070aa:	f04f 0214 	mov.w	r2, #20
 10070ae:	4b1d      	ldr	r3, [pc, #116]	; (1007124 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
 10070b0:	d008      	beq.n	10070c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
 10070b2:	fb02 f308 	mul.w	r3, r2, r8
 10070b6:	f06f 0215 	mvn.w	r2, #21
 10070ba:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
 10070be:	b003      	add	sp, #12
 10070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
 10070c4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
 10070c8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
 10070ca:	d0f8      	beq.n	10070be <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
 10070cc:	7819      	ldrb	r1, [r3, #0]
 10070ce:	42a1      	cmp	r1, r4
 10070d0:	ddf5      	ble.n	10070be <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
 10070d2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
 10070d6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 10070da:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
 10070de:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
 10070e2:	f100 0108 	add.w	r1, r0, #8
 10070e6:	7b00      	ldrb	r0, [r0, #12]
 10070e8:	f364 0004 	bfi	r0, r4, #0, #5
 10070ec:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
 10070ee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
 10070f2:	790c      	ldrb	r4, [r1, #4]
 10070f4:	0840      	lsrs	r0, r0, #1
 10070f6:	f360 1447 	bfi	r4, r0, #5, #3
 10070fa:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
 10070fc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
 1007100:	f021 011f 	bic.w	r1, r1, #31
 1007104:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
 1007106:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
 100710a:	f021 011f 	bic.w	r1, r1, #31
 100710e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
 1007110:	f108 0801 	add.w	r8, r8, #1
 1007114:	3514      	adds	r5, #20
 1007116:	360c      	adds	r6, #12
 1007118:	e7b3      	b.n	1007082 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
 100711a:	bf00      	nop
 100711c:	21001a1c 	.word	0x21001a1c
 1007120:	e000ed00 	.word	0xe000ed00
 1007124:	21003ad3 	.word	0x21003ad3

01007128 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 1007128:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 100712a:	4d0e      	ldr	r5, [pc, #56]	; (1007164 <z_arm_mpu_init+0x3c>)
 100712c:	682c      	ldr	r4, [r5, #0]
 100712e:	2c08      	cmp	r4, #8
 1007130:	d815      	bhi.n	100715e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 1007132:	2000      	movs	r0, #0
	arm_core_mpu_disable();
 1007134:	f7ff ff88 	bl	1007048 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
 1007138:	4b0b      	ldr	r3, [pc, #44]	; (1007168 <z_arm_mpu_init+0x40>)
 100713a:	4a0c      	ldr	r2, [pc, #48]	; (100716c <z_arm_mpu_init+0x44>)
 100713c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 1007140:	4284      	cmp	r4, r0
 1007142:	d105      	bne.n	1007150 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 1007144:	4b0a      	ldr	r3, [pc, #40]	; (1007170 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 1007146:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
 1007148:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
 100714a:	f7ff ff71 	bl	1007030 <arm_core_mpu_enable>
}
 100714e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 1007150:	6869      	ldr	r1, [r5, #4]
 1007152:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 1007156:	f7ff feab 	bl	1006eb0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 100715a:	3001      	adds	r0, #1
 100715c:	e7f0      	b.n	1007140 <z_arm_mpu_init+0x18>
		return -1;
 100715e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1007162:	e7f4      	b.n	100714e <z_arm_mpu_init+0x26>
 1007164:	01015844 	.word	0x01015844
 1007168:	e000ed00 	.word	0xe000ed00
 100716c:	0044ffaa 	.word	0x0044ffaa
 1007170:	21003ad3 	.word	0x21003ad3

01007174 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
 1007174:	4b08      	ldr	r3, [pc, #32]	; (1007198 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
 1007176:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
 1007178:	1ac3      	subs	r3, r0, r3
{
 100717a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 100717c:	4907      	ldr	r1, [pc, #28]	; (100719c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
 100717e:	109b      	asrs	r3, r3, #2
{
 1007180:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 1007182:	4359      	muls	r1, r3
 1007184:	2240      	movs	r2, #64	; 0x40
 1007186:	4806      	ldr	r0, [pc, #24]	; (10071a0 <onoff_stop+0x2c>)
 1007188:	f00b fc68 	bl	1012a5c <stop>
	notify(mgr, res);
 100718c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 100718e:	4601      	mov	r1, r0
	notify(mgr, res);
 1007190:	4620      	mov	r0, r4
}
 1007192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
 1007196:	4718      	bx	r3
 1007198:	21001a44 	.word	0x21001a44
 100719c:	b6db6db7 	.word	0xb6db6db7
 10071a0:	010154d8 	.word	0x010154d8

010071a4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10071a4:	2340      	movs	r3, #64	; 0x40
{
 10071a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
 10071a8:	4c0b      	ldr	r4, [pc, #44]	; (10071d8 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10071aa:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
 10071ac:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10071ae:	460b      	mov	r3, r1
{
 10071b0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10071b2:	490a      	ldr	r1, [pc, #40]	; (10071dc <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
 10071b4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10071b6:	4361      	muls	r1, r4
{
 10071b8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10071ba:	4a09      	ldr	r2, [pc, #36]	; (10071e0 <onoff_start+0x3c>)
 10071bc:	4809      	ldr	r0, [pc, #36]	; (10071e4 <onoff_start+0x40>)
 10071be:	f00b fc7a 	bl	1012ab6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
 10071c2:	1e01      	subs	r1, r0, #0
 10071c4:	da05      	bge.n	10071d2 <onoff_start+0x2e>
		notify(mgr, err);
 10071c6:	4630      	mov	r0, r6
 10071c8:	462b      	mov	r3, r5
	}
}
 10071ca:	b002      	add	sp, #8
 10071cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
 10071d0:	4718      	bx	r3
}
 10071d2:	b002      	add	sp, #8
 10071d4:	bd70      	pop	{r4, r5, r6, pc}
 10071d6:	bf00      	nop
 10071d8:	21001a44 	.word	0x21001a44
 10071dc:	b6db6db7 	.word	0xb6db6db7
 10071e0:	01012b23 	.word	0x01012b23
 10071e4:	010154d8 	.word	0x010154d8

010071e8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
 10071e8:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 10071ea:	2200      	movs	r2, #0
 10071ec:	2101      	movs	r1, #1
{
 10071ee:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 10071f0:	2005      	movs	r0, #5
 10071f2:	f7ff fbdb 	bl	10069ac <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
 10071f6:	480f      	ldr	r0, [pc, #60]	; (1007234 <clk_init+0x4c>)
 10071f8:	f000 feec 	bl	1007fd4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
 10071fc:	4b0e      	ldr	r3, [pc, #56]	; (1007238 <clk_init+0x50>)
 10071fe:	4298      	cmp	r0, r3
 1007200:	d115      	bne.n	100722e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
 1007202:	f00b fdcd 	bl	1012da0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
 1007206:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
 1007208:	490c      	ldr	r1, [pc, #48]	; (100723c <clk_init+0x54>)
 100720a:	4630      	mov	r0, r6
 100720c:	f00b f841 	bl	1012292 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
 1007210:	2800      	cmp	r0, #0
 1007212:	db0b      	blt.n	100722c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 1007214:	2501      	movs	r5, #1
 1007216:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
 1007218:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
 100721a:	4908      	ldr	r1, [pc, #32]	; (100723c <clk_init+0x54>)
 100721c:	f104 001c 	add.w	r0, r4, #28
 1007220:	f00b f837 	bl	1012292 <onoff_manager_init>
		if (err < 0) {
 1007224:	2800      	cmp	r0, #0
 1007226:	db01      	blt.n	100722c <clk_init+0x44>
	}

	return 0;
 1007228:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 100722a:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 100722c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 100722e:	f06f 0004 	mvn.w	r0, #4
 1007232:	e7fb      	b.n	100722c <clk_init+0x44>
 1007234:	01007275 	.word	0x01007275
 1007238:	0bad0000 	.word	0x0bad0000
 100723c:	0101586c 	.word	0x0101586c

01007240 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
 1007240:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
 1007242:	230c      	movs	r3, #12
	sub_data->cb = NULL;
 1007244:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
 1007246:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
 1007248:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
 100724a:	4808      	ldr	r0, [pc, #32]	; (100726c <clkstarted_handle.constprop.0+0x2c>)
 100724c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
 100724e:	3340      	adds	r3, #64	; 0x40
 1007250:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
 1007252:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
 1007256:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
 1007258:	f00b fbed 	bl	1012a36 <set_on_state>
	if (callback) {
 100725c:	b12d      	cbz	r5, 100726a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
 100725e:	4632      	mov	r2, r6
 1007260:	462b      	mov	r3, r5
}
 1007262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
 1007266:	4802      	ldr	r0, [pc, #8]	; (1007270 <clkstarted_handle.constprop.0+0x30>)
 1007268:	4718      	bx	r3
}
 100726a:	bd70      	pop	{r4, r5, r6, pc}
 100726c:	21001a44 	.word	0x21001a44
 1007270:	010154d8 	.word	0x010154d8

01007274 <clock_event_handler>:
	switch (event) {
 1007274:	b110      	cbz	r0, 100727c <clock_event_handler+0x8>
 1007276:	2801      	cmp	r0, #1
 1007278:	d004      	beq.n	1007284 <clock_event_handler+0x10>
 100727a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
 100727c:	4b03      	ldr	r3, [pc, #12]	; (100728c <clock_event_handler+0x18>)
 100727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1007280:	075b      	lsls	r3, r3, #29
 1007282:	d101      	bne.n	1007288 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
 1007284:	f7ff bfdc 	b.w	1007240 <clkstarted_handle.constprop.0>
}
 1007288:	4770      	bx	lr
 100728a:	bf00      	nop
 100728c:	21001a44 	.word	0x21001a44

01007290 <generic_hfclk_start>:
{
 1007290:	b508      	push	{r3, lr}
	__asm__ volatile(
 1007292:	f04f 0340 	mov.w	r3, #64	; 0x40
 1007296:	f3ef 8111 	mrs	r1, BASEPRI
 100729a:	f383 8812 	msr	BASEPRI_MAX, r3
 100729e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
 10072a2:	4a11      	ldr	r2, [pc, #68]	; (10072e8 <generic_hfclk_start+0x58>)
 10072a4:	6813      	ldr	r3, [r2, #0]
 10072a6:	f043 0002 	orr.w	r0, r3, #2
 10072aa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
 10072ac:	07da      	lsls	r2, r3, #31
 10072ae:	d408      	bmi.n	10072c2 <generic_hfclk_start+0x32>
	__asm__ volatile(
 10072b0:	f381 8811 	msr	BASEPRI, r1
 10072b4:	f3bf 8f6f 	isb	sy
}
 10072b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
 10072bc:	2001      	movs	r0, #1
 10072be:	f000 be79 	b.w	1007fb4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 10072c2:	4b0a      	ldr	r3, [pc, #40]	; (10072ec <generic_hfclk_start+0x5c>)
 10072c4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 10072c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
 10072cc:	07d3      	lsls	r3, r2, #31
 10072ce:	d5ef      	bpl.n	10072b0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
 10072d0:	4807      	ldr	r0, [pc, #28]	; (10072f0 <generic_hfclk_start+0x60>)
 10072d2:	f00b fbb0 	bl	1012a36 <set_on_state>
 10072d6:	f381 8811 	msr	BASEPRI, r1
 10072da:	f3bf 8f6f 	isb	sy
}
 10072de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
 10072e2:	2000      	movs	r0, #0
 10072e4:	f7ff bfac 	b.w	1007240 <clkstarted_handle.constprop.0>
 10072e8:	21001a94 	.word	0x21001a94
 10072ec:	41005000 	.word	0x41005000
 10072f0:	21001a84 	.word	0x21001a84

010072f4 <api_blocking_start>:
{
 10072f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
 10072f6:	2200      	movs	r2, #0
 10072f8:	2301      	movs	r3, #1
 10072fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
 10072fe:	466b      	mov	r3, sp
 1007300:	4a08      	ldr	r2, [pc, #32]	; (1007324 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
 1007302:	f8cd d000 	str.w	sp, [sp]
 1007306:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
 100730a:	f00b fc03 	bl	1012b14 <api_start>
	if (err < 0) {
 100730e:	2800      	cmp	r0, #0
 1007310:	db05      	blt.n	100731e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 1007312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 1007316:	2300      	movs	r3, #0
 1007318:	4668      	mov	r0, sp
 100731a:	f009 f96f 	bl	10105fc <z_impl_k_sem_take>
}
 100731e:	b005      	add	sp, #20
 1007320:	f85d fb04 	ldr.w	pc, [sp], #4
 1007324:	01012b41 	.word	0x01012b41

01007328 <generic_hfclk_stop>:
{
 1007328:	b510      	push	{r4, lr}
	__asm__ volatile(
 100732a:	f04f 0340 	mov.w	r3, #64	; 0x40
 100732e:	f3ef 8411 	mrs	r4, BASEPRI
 1007332:	f383 8812 	msr	BASEPRI_MAX, r3
 1007336:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
 100733a:	4a07      	ldr	r2, [pc, #28]	; (1007358 <generic_hfclk_stop+0x30>)
 100733c:	6813      	ldr	r3, [r2, #0]
 100733e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
 1007342:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
 1007344:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
 1007346:	d402      	bmi.n	100734e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
 1007348:	2001      	movs	r0, #1
 100734a:	f00b fd24 	bl	1012d96 <nrfx_clock_stop>
	__asm__ volatile(
 100734e:	f384 8811 	msr	BASEPRI, r4
 1007352:	f3bf 8f6f 	isb	sy
}
 1007356:	bd10      	pop	{r4, pc}
 1007358:	21001a94 	.word	0x21001a94

0100735c <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
 100735c:	b2c3      	uxtb	r3, r0
}
 100735e:	201c      	movs	r0, #28
 1007360:	4a01      	ldr	r2, [pc, #4]	; (1007368 <z_nrf_clock_control_get_onoff+0xc>)
 1007362:	fb03 2000 	mla	r0, r3, r0, r2
 1007366:	4770      	bx	lr
 1007368:	21001a44 	.word	0x21001a44

0100736c <z_nrf_clock_control_lf_on>:
{
 100736c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 1007370:	2201      	movs	r2, #1
 1007372:	4607      	mov	r7, r0
 1007374:	4935      	ldr	r1, [pc, #212]	; (100744c <z_nrf_clock_control_lf_on+0xe0>)
 1007376:	e8d1 3fef 	ldaex	r3, [r1]
 100737a:	e8c1 2fe0 	stlex	r0, r2, [r1]
 100737e:	2800      	cmp	r0, #0
 1007380:	d1f9      	bne.n	1007376 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
 1007382:	b933      	cbnz	r3, 1007392 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
 1007384:	4932      	ldr	r1, [pc, #200]	; (1007450 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
 1007386:	4833      	ldr	r0, [pc, #204]	; (1007454 <z_nrf_clock_control_lf_on+0xe8>)
 1007388:	604b      	str	r3, [r1, #4]
 100738a:	60cb      	str	r3, [r1, #12]
 100738c:	608a      	str	r2, [r1, #8]
 100738e:	f00a ff93 	bl	10122b8 <onoff_request>
	switch (start_mode) {
 1007392:	1e7b      	subs	r3, r7, #1
 1007394:	2b01      	cmp	r3, #1
 1007396:	d828      	bhi.n	10073ea <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
 1007398:	2f01      	cmp	r7, #1
 100739a:	d106      	bne.n	10073aa <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
 100739c:	4b2e      	ldr	r3, [pc, #184]	; (1007458 <z_nrf_clock_control_lf_on+0xec>)
 100739e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
 10073a2:	f003 0303 	and.w	r3, r3, #3
 10073a6:	2b02      	cmp	r3, #2
 10073a8:	d01f      	beq.n	10073ea <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 10073aa:	f00d fc40 	bl	1014c2e <k_is_in_isr>
 10073ae:	4605      	mov	r5, r0
 10073b0:	b9e8      	cbnz	r0, 10073ee <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
 10073b2:	4b2a      	ldr	r3, [pc, #168]	; (100745c <z_nrf_clock_control_lf_on+0xf0>)
 10073b4:	781b      	ldrb	r3, [r3, #0]
 10073b6:	b1d3      	cbz	r3, 10073ee <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
 10073b8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
 10073ba:	4606      	mov	r6, r0
 10073bc:	4b26      	ldr	r3, [pc, #152]	; (1007458 <z_nrf_clock_control_lf_on+0xec>)
 10073be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 10073c2:	4c25      	ldr	r4, [pc, #148]	; (1007458 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 10073c4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1007460 <z_nrf_clock_control_lf_on+0xf4>
 10073c8:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 10073cc:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
 10073d0:	03d2      	lsls	r2, r2, #15
 10073d2:	d516      	bpl.n	1007402 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
 10073d4:	f003 0303 	and.w	r3, r3, #3
 10073d8:	2b02      	cmp	r3, #2
 10073da:	d001      	beq.n	10073e0 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
 10073dc:	2f01      	cmp	r7, #1
 10073de:	d110      	bne.n	1007402 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
 10073e0:	b375      	cbz	r5, 1007440 <z_nrf_clock_control_lf_on+0xd4>
 10073e2:	f386 8811 	msr	BASEPRI, r6
 10073e6:	f3bf 8f6f 	isb	sy
}
 10073ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
 10073ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 10073f2:	f3ef 8611 	mrs	r6, BASEPRI
 10073f6:	f383 8812 	msr	BASEPRI_MAX, r3
 10073fa:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 10073fe:	2501      	movs	r5, #1
 1007400:	e7df      	b.n	10073c2 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
 1007402:	b1c5      	cbz	r5, 1007436 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
 1007404:	4630      	mov	r0, r6
 1007406:	f7ff fa8f 	bl	1006928 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
 100740a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
 100740e:	b2db      	uxtb	r3, r3
 1007410:	2b01      	cmp	r3, #1
 1007412:	d1d9      	bne.n	10073c8 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 1007414:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
 1007418:	2a00      	cmp	r2, #0
 100741a:	d0d5      	beq.n	10073c8 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100741c:	2200      	movs	r2, #0
 100741e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 1007422:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
 1007426:	2202      	movs	r2, #2
 1007428:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
 100742c:	2220      	movs	r2, #32
 100742e:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1007432:	60a3      	str	r3, [r4, #8]
}
 1007434:	e7c8      	b.n	10073c8 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
 1007436:	2100      	movs	r1, #0
 1007438:	2021      	movs	r0, #33	; 0x21
 100743a:	f009 fd9f 	bl	1010f7c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
 100743e:	e7e4      	b.n	100740a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
 1007440:	2202      	movs	r2, #2
 1007442:	4b05      	ldr	r3, [pc, #20]	; (1007458 <z_nrf_clock_control_lf_on+0xec>)
 1007444:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
 1007448:	e7cf      	b.n	10073ea <z_nrf_clock_control_lf_on+0x7e>
 100744a:	bf00      	nop
 100744c:	21001a40 	.word	0x21001a40
 1007450:	21001a30 	.word	0x21001a30
 1007454:	21001a60 	.word	0x21001a60
 1007458:	41005000 	.word	0x41005000
 100745c:	21004540 	.word	0x21004540
 1007460:	e000e100 	.word	0xe000e100

01007464 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
 1007464:	b530      	push	{r4, r5, lr}
	return port->config;
 1007466:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
 1007468:	f001 041f 	and.w	r4, r1, #31
 100746c:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
 100746e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
 1007472:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
 1007474:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
 1007478:	d105      	bne.n	1007486 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
 100747a:	4620      	mov	r0, r4
 100747c:	f008 f8bc 	bl	100f5f8 <nrfx_gpiote_trigger_disable>

		return 0;
 1007480:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
 1007482:	b005      	add	sp, #20
 1007484:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
 1007486:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
 1007488:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
 100748c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
 1007490:	d114      	bne.n	10074bc <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
 1007492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
 1007496:	bf0c      	ite	eq
 1007498:	2304      	moveq	r3, #4
 100749a:	2305      	movne	r3, #5
 100749c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 10074a0:	2300      	movs	r3, #0
 10074a2:	4620      	mov	r0, r4
 10074a4:	4619      	mov	r1, r3
 10074a6:	aa02      	add	r2, sp, #8
 10074a8:	f007 fee2 	bl	100f270 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
 10074ac:	4b1f      	ldr	r3, [pc, #124]	; (100752c <gpio_nrfx_pin_interrupt_configure+0xc8>)
 10074ae:	4298      	cmp	r0, r3
 10074b0:	d138      	bne.n	1007524 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
 10074b2:	2101      	movs	r1, #1
 10074b4:	4620      	mov	r0, r4
 10074b6:	f008 f859 	bl	100f56c <nrfx_gpiote_trigger_enable>
	return 0;
 10074ba:	e7e1      	b.n	1007480 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
 10074bc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 10074c0:	d025      	beq.n	100750e <gpio_nrfx_pin_interrupt_configure+0xaa>
 10074c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 10074c6:	bf14      	ite	ne
 10074c8:	2301      	movne	r3, #1
 10074ca:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
 10074cc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
 10074d0:	6883      	ldr	r3, [r0, #8]
 10074d2:	40cb      	lsrs	r3, r1
 10074d4:	07d9      	lsls	r1, r3, #31
 10074d6:	d4e3      	bmi.n	10074a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
 10074d8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
 10074dc:	d1e0      	bne.n	10074a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
 10074de:	4a14      	ldr	r2, [pc, #80]	; (1007530 <gpio_nrfx_pin_interrupt_configure+0xcc>)
 10074e0:	4814      	ldr	r0, [pc, #80]	; (1007534 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
 10074e2:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
 10074e4:	2901      	cmp	r1, #1
 10074e6:	bf08      	it	eq
 10074e8:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
 10074ea:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
 10074ee:	3380      	adds	r3, #128	; 0x80
 10074f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
 10074f4:	07db      	lsls	r3, r3, #31
 10074f6:	d4d3      	bmi.n	10074a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
 10074f8:	f10d 0507 	add.w	r5, sp, #7
 10074fc:	4629      	mov	r1, r5
 10074fe:	4620      	mov	r0, r4
 1007500:	f007 ffe0 	bl	100f4c4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
 1007504:	4b0c      	ldr	r3, [pc, #48]	; (1007538 <gpio_nrfx_pin_interrupt_configure+0xd4>)
 1007506:	4298      	cmp	r0, r3
 1007508:	d003      	beq.n	1007512 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
 100750a:	9503      	str	r5, [sp, #12]
 100750c:	e7c8      	b.n	10074a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
 100750e:	2303      	movs	r3, #3
 1007510:	e7dc      	b.n	10074cc <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
 1007512:	4628      	mov	r0, r5
 1007514:	f008 f824 	bl	100f560 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
 1007518:	4b04      	ldr	r3, [pc, #16]	; (100752c <gpio_nrfx_pin_interrupt_configure+0xc8>)
 100751a:	4298      	cmp	r0, r3
 100751c:	d0f5      	beq.n	100750a <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
 100751e:	f06f 000b 	mvn.w	r0, #11
 1007522:	e7ae      	b.n	1007482 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
 1007524:	f06f 0015 	mvn.w	r0, #21
 1007528:	e7ab      	b.n	1007482 <gpio_nrfx_pin_interrupt_configure+0x1e>
 100752a:	bf00      	nop
 100752c:	0bad0000 	.word	0x0bad0000
 1007530:	418c0500 	.word	0x418c0500
 1007534:	418c0800 	.word	0x418c0800
 1007538:	0bad0004 	.word	0x0bad0004

0100753c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
 100753c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
 100753e:	f007 ffff 	bl	100f540 <nrfx_gpiote_is_init>
 1007542:	4604      	mov	r4, r0
 1007544:	b968      	cbnz	r0, 1007562 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
 1007546:	f007 ffd3 	bl	100f4f0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
 100754a:	4b08      	ldr	r3, [pc, #32]	; (100756c <gpio_nrfx_init+0x30>)
 100754c:	4298      	cmp	r0, r3
 100754e:	d10a      	bne.n	1007566 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
 1007550:	4621      	mov	r1, r4
 1007552:	4807      	ldr	r0, [pc, #28]	; (1007570 <gpio_nrfx_init+0x34>)
 1007554:	f007 ffb0 	bl	100f4b8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
 1007558:	4622      	mov	r2, r4
 100755a:	2105      	movs	r1, #5
 100755c:	200a      	movs	r0, #10
 100755e:	f7ff fa25 	bl	10069ac <z_arm_irq_priority_set>
		return 0;
 1007562:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
 1007564:	bd10      	pop	{r4, pc}
		return -EIO;
 1007566:	f06f 0004 	mvn.w	r0, #4
 100756a:	e7fb      	b.n	1007564 <gpio_nrfx_init+0x28>
 100756c:	0bad0000 	.word	0x0bad0000
 1007570:	01007575 	.word	0x01007575

01007574 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 1007574:	0942      	lsrs	r2, r0, #5
{
 1007576:	4603      	mov	r3, r0
 1007578:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 100757a:	d002      	beq.n	1007582 <nrfx_gpio_handler+0xe>
 100757c:	2a01      	cmp	r2, #1
 100757e:	d017      	beq.n	10075b0 <nrfx_gpio_handler+0x3c>
}
 1007580:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 1007582:	4e0d      	ldr	r6, [pc, #52]	; (10075b8 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
 1007584:	6932      	ldr	r2, [r6, #16]
 1007586:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 1007588:	2900      	cmp	r1, #0
 100758a:	d0f9      	beq.n	1007580 <nrfx_gpio_handler+0xc>
 100758c:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
 100758e:	f003 031f 	and.w	r3, r3, #31
	return node->next;
 1007592:	680c      	ldr	r4, [r1, #0]
 1007594:	409d      	lsls	r5, r3
 1007596:	2900      	cmp	r1, #0
 1007598:	d0f2      	beq.n	1007580 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
 100759a:	688a      	ldr	r2, [r1, #8]
 100759c:	402a      	ands	r2, r5
 100759e:	d002      	beq.n	10075a6 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 10075a0:	4630      	mov	r0, r6
 10075a2:	684b      	ldr	r3, [r1, #4]
 10075a4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 10075a6:	b12c      	cbz	r4, 10075b4 <nrfx_gpio_handler+0x40>
 10075a8:	6823      	ldr	r3, [r4, #0]
 10075aa:	4621      	mov	r1, r4
 10075ac:	461c      	mov	r4, r3
 10075ae:	e7f2      	b.n	1007596 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 10075b0:	4e02      	ldr	r6, [pc, #8]	; (10075bc <nrfx_gpio_handler+0x48>)
 10075b2:	e7e7      	b.n	1007584 <nrfx_gpio_handler+0x10>
 10075b4:	4623      	mov	r3, r4
 10075b6:	e7f8      	b.n	10075aa <nrfx_gpio_handler+0x36>
 10075b8:	01015508 	.word	0x01015508
 10075bc:	010154f0 	.word	0x010154f0

010075c0 <gpio_nrfx_pin_configure>:
{
 10075c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
 10075c4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 10075c6:	f001 051f 	and.w	r5, r1, #31
 10075ca:	7b3b      	ldrb	r3, [r7, #12]
{
 10075cc:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 10075ce:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
 10075d2:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
 10075d4:	4628      	mov	r0, r5
 10075d6:	f10d 0103 	add.w	r1, sp, #3
 10075da:	f007 ff73 	bl	100f4c4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
 10075de:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
 10075e2:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
 10075e4:	d10b      	bne.n	10075fe <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
 10075e6:	4628      	mov	r0, r5
 10075e8:	f008 f82e 	bl	100f648 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
 10075ec:	4b3c      	ldr	r3, [pc, #240]	; (10076e0 <gpio_nrfx_pin_configure+0x120>)
 10075ee:	4598      	cmp	r8, r3
 10075f0:	d103      	bne.n	10075fa <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
 10075f2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 10075f6:	f007 ffad 	bl	100f554 <nrfx_gpiote_channel_free>
		return 0;
 10075fa:	2000      	movs	r0, #0
 10075fc:	e00c      	b.n	1007618 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
 10075fe:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 1007600:	4628      	mov	r0, r5
 1007602:	4619      	mov	r1, r3
 1007604:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
 1007606:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 100760a:	f007 fe31 	bl	100f270 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
 100760e:	4b34      	ldr	r3, [pc, #208]	; (10076e0 <gpio_nrfx_pin_configure+0x120>)
 1007610:	4298      	cmp	r0, r3
 1007612:	d004      	beq.n	100761e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
 1007614:	f06f 0015 	mvn.w	r0, #21
}
 1007618:	b004      	add	sp, #16
 100761a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
 100761e:	4580      	cmp	r8, r0
 1007620:	d103      	bne.n	100762a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
 1007622:	f89d 0003 	ldrb.w	r0, [sp, #3]
 1007626:	f007 ff95 	bl	100f554 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
 100762a:	03a3      	lsls	r3, r4, #14
 100762c:	d549      	bpl.n	10076c2 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 100762e:	f240 3306 	movw	r3, #774	; 0x306
 1007632:	4023      	ands	r3, r4
 1007634:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 1007638:	d019      	beq.n	100766e <gpio_nrfx_pin_configure+0xae>
 100763a:	d80c      	bhi.n	1007656 <gpio_nrfx_pin_configure+0x96>
 100763c:	2b06      	cmp	r3, #6
 100763e:	d017      	beq.n	1007670 <gpio_nrfx_pin_configure+0xb0>
 1007640:	d804      	bhi.n	100764c <gpio_nrfx_pin_configure+0x8c>
 1007642:	b1ab      	cbz	r3, 1007670 <gpio_nrfx_pin_configure+0xb0>
 1007644:	2b02      	cmp	r3, #2
 1007646:	d1e5      	bne.n	1007614 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
 1007648:	2304      	movs	r3, #4
 100764a:	e011      	b.n	1007670 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 100764c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 1007650:	d1e0      	bne.n	1007614 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
 1007652:	2301      	movs	r3, #1
 1007654:	e00c      	b.n	1007670 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 1007656:	f240 2202 	movw	r2, #514	; 0x202
 100765a:	4293      	cmp	r3, r2
 100765c:	d026      	beq.n	10076ac <gpio_nrfx_pin_configure+0xec>
 100765e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 1007662:	d025      	beq.n	10076b0 <gpio_nrfx_pin_configure+0xf0>
 1007664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1007668:	d1d4      	bne.n	1007614 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
 100766a:	2302      	movs	r3, #2
 100766c:	e000      	b.n	1007670 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
 100766e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
 1007670:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
 1007674:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
 1007678:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
 100767c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
 100767e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
 1007682:	bf4c      	ite	mi
 1007684:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
 1007686:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
 100768a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
 100768c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
 1007690:	d510      	bpl.n	10076b4 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
 1007692:	2301      	movs	r3, #1
 1007694:	687a      	ldr	r2, [r7, #4]
 1007696:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
 1007698:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
 100769a:	2200      	movs	r2, #0
 100769c:	4628      	mov	r0, r5
 100769e:	a901      	add	r1, sp, #4
 10076a0:	f007 fe96 	bl	100f3d0 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
 10076a4:	4b0e      	ldr	r3, [pc, #56]	; (10076e0 <gpio_nrfx_pin_configure+0x120>)
 10076a6:	4298      	cmp	r0, r3
 10076a8:	d0a7      	beq.n	10075fa <gpio_nrfx_pin_configure+0x3a>
 10076aa:	e7b3      	b.n	1007614 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
 10076ac:	2305      	movs	r3, #5
 10076ae:	e7df      	b.n	1007670 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 10076b0:	2303      	movs	r3, #3
 10076b2:	e7dd      	b.n	1007670 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
 10076b4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
 10076b6:	bf41      	itttt	mi
 10076b8:	2301      	movmi	r3, #1
 10076ba:	687a      	ldrmi	r2, [r7, #4]
 10076bc:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
 10076be:	60d3      	strmi	r3, [r2, #12]
}
 10076c0:	e7eb      	b.n	100769a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
 10076c2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 10076c4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
 10076c8:	bf4c      	ite	mi
 10076ca:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
 10076cc:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 10076d0:	461a      	mov	r2, r3
 10076d2:	4628      	mov	r0, r5
 10076d4:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
 10076d6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 10076da:	f007 fdc9 	bl	100f270 <nrfx_gpiote_input_configure>
 10076de:	e7e1      	b.n	10076a4 <gpio_nrfx_pin_configure+0xe4>
 10076e0:	0bad0000 	.word	0x0bad0000

010076e4 <random_byte_get>:
 10076e4:	f04f 0340 	mov.w	r3, #64	; 0x40
 10076e8:	f3ef 8211 	mrs	r2, BASEPRI
 10076ec:	f383 8812 	msr	BASEPRI_MAX, r3
 10076f0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
 10076f4:	4b09      	ldr	r3, [pc, #36]	; (100771c <random_byte_get+0x38>)
 10076f6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
 10076fa:	b161      	cbz	r1, 1007716 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
 10076fc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
 10076fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
 1007702:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 1007706:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
 100770a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
 100770c:	f382 8811 	msr	BASEPRI, r2
 1007710:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
 1007714:	4770      	bx	lr
	int retval = -EAGAIN;
 1007716:	f06f 000a 	mvn.w	r0, #10
 100771a:	e7f7      	b.n	100770c <random_byte_get+0x28>
 100771c:	41009000 	.word	0x41009000

01007720 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 1007720:	4603      	mov	r3, r0
 1007722:	b5f0      	push	{r4, r5, r6, r7, lr}
 1007724:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
 1007726:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
 1007728:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
 100772c:	f04f 0540 	mov.w	r5, #64	; 0x40
 1007730:	f3ef 8211 	mrs	r2, BASEPRI
 1007734:	f385 8812 	msr	BASEPRI_MAX, r5
 1007738:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 100773c:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 100773e:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
 1007742:	1be4      	subs	r4, r4, r7
 1007744:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
 1007748:	42a0      	cmp	r0, r4
		len = available;
 100774a:	bf88      	it	hi
 100774c:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 100774e:	183e      	adds	r6, r7, r0
 1007750:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
 1007754:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
 1007756:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
 1007758:	f382 8811 	msr	BASEPRI, r2
 100775c:	f3bf 8f6f 	isb	sy
 1007760:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
 1007762:	428a      	cmp	r2, r1
 1007764:	d117      	bne.n	1007796 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
 1007766:	4577      	cmp	r7, lr
 1007768:	d10d      	bne.n	1007786 <rng_pool_get+0x66>
	__asm__ volatile(
 100776a:	f04f 0140 	mov.w	r1, #64	; 0x40
 100776e:	f3ef 8211 	mrs	r2, BASEPRI
 1007772:	f381 8812 	msr	BASEPRI_MAX, r1
 1007776:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
 100777a:	7819      	ldrb	r1, [r3, #0]
 100777c:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
 100777e:	f382 8811 	msr	BASEPRI, r2
 1007782:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
 1007786:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
 1007788:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
 100778a:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
 100778c:	bf22      	ittt	cs
 100778e:	2201      	movcs	r2, #1
 1007790:	4b05      	ldrcs	r3, [pc, #20]	; (10077a8 <rng_pool_get+0x88>)
 1007792:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
 1007794:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
 1007796:	195e      	adds	r6, r3, r5
 1007798:	7976      	ldrb	r6, [r6, #5]
		first = (first + 1) & mask;
 100779a:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
 100779c:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
 10077a0:	ea05 050c 	and.w	r5, r5, ip
 10077a4:	e7dd      	b.n	1007762 <rng_pool_get+0x42>
 10077a6:	bf00      	nop
 10077a8:	41009000 	.word	0x41009000

010077ac <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 10077ac:	43db      	mvns	r3, r3
{
 10077ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 10077b2:	f013 0501 	ands.w	r5, r3, #1
{
 10077b6:	460e      	mov	r6, r1
 10077b8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 10077ba:	d004      	beq.n	10077c6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
 10077bc:	4823      	ldr	r0, [pc, #140]	; (100784c <entropy_nrf5_get_entropy_isr+0xa0>)
 10077be:	f7ff ffaf 	bl	1007720 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
 10077c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
 10077c6:	b3a2      	cbz	r2, 1007832 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
 10077c8:	f04f 0340 	mov.w	r3, #64	; 0x40
 10077cc:	f3ef 8811 	mrs	r8, BASEPRI
 10077d0:	f383 8812 	msr	BASEPRI_MAX, r3
 10077d4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 10077d8:	2009      	movs	r0, #9
 10077da:	f7ff f8d9 	bl	1006990 <arch_irq_is_enabled>
 10077de:	4607      	mov	r7, r0
		irq_disable(IRQN);
 10077e0:	2009      	movs	r0, #9
 10077e2:	f7ff f8c1 	bl	1006968 <arch_irq_disable>
	__asm__ volatile(
 10077e6:	f388 8811 	msr	BASEPRI, r8
 10077ea:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
 10077ee:	f8df a060 	ldr.w	sl, [pc, #96]	; 1007850 <entropy_nrf5_get_entropy_isr+0xa4>
 10077f2:	f44f 7900 	mov.w	r9, #512	; 0x200
 10077f6:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
 10077fa:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
 10077fe:	2301      	movs	r3, #1
 1007800:	4625      	mov	r5, r4
 1007802:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1007854 <entropy_nrf5_get_entropy_isr+0xa8>
 1007806:	f8ca 3000 	str.w	r3, [sl]
 100780a:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
 100780e:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
 1007812:	b183      	cbz	r3, 1007836 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
 1007814:	f7ff ff66 	bl	10076e4 <random_byte_get>
			if (byte < 0) {
 1007818:	1e03      	subs	r3, r0, #0
 100781a:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
 100781e:	dbf6      	blt.n	100780e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
 1007820:	3d01      	subs	r5, #1
 1007822:	b2ad      	uxth	r5, r5
 1007824:	5573      	strb	r3, [r6, r5]
		} while (len);
 1007826:	2d00      	cmp	r5, #0
 1007828:	d1f1      	bne.n	100780e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
 100782a:	b117      	cbz	r7, 1007832 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
 100782c:	2009      	movs	r0, #9
 100782e:	f7ff f88d 	bl	100694c <arch_irq_enable>
	return cnt;
 1007832:	4620      	mov	r0, r4
 1007834:	e7c5      	b.n	10077c2 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
 1007836:	f04f 0340 	mov.w	r3, #64	; 0x40
 100783a:	f3ef 8011 	mrs	r0, BASEPRI
 100783e:	f383 8812 	msr	BASEPRI_MAX, r3
 1007842:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
 1007846:	f7ff f86f 	bl	1006928 <arch_cpu_atomic_idle>
}
 100784a:	e7e0      	b.n	100780e <entropy_nrf5_get_entropy_isr+0x62>
 100784c:	21001ad0 	.word	0x21001ad0
 1007850:	41009000 	.word	0x41009000
 1007854:	e000e100 	.word	0xe000e100

01007858 <entropy_nrf5_get_entropy>:
{
 1007858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100785c:	460d      	mov	r5, r1
 100785e:	4614      	mov	r4, r2
	return z_impl_k_sem_take(sem, timeout);
 1007860:	4f11      	ldr	r7, [pc, #68]	; (10078a8 <entropy_nrf5_get_entropy+0x50>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
 1007862:	f107 0835 	add.w	r8, r7, #53	; 0x35
	while (len) {
 1007866:	b914      	cbnz	r4, 100786e <entropy_nrf5_get_entropy+0x16>
}
 1007868:	4620      	mov	r0, r4
 100786a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100786e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1007872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1007876:	4638      	mov	r0, r7
 1007878:	f008 fec0 	bl	10105fc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
 100787c:	4622      	mov	r2, r4
 100787e:	4629      	mov	r1, r5
 1007880:	4640      	mov	r0, r8
 1007882:	f7ff ff4d 	bl	1007720 <rng_pool_get>
 1007886:	4606      	mov	r6, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 1007888:	4638      	mov	r0, r7
 100788a:	f008 fe97 	bl	10105bc <z_impl_k_sem_give>
		if (bytes == 0U) {
 100788e:	b93e      	cbnz	r6, 10078a0 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
 1007890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1007894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1007898:	4804      	ldr	r0, [pc, #16]	; (10078ac <entropy_nrf5_get_entropy+0x54>)
 100789a:	f008 feaf 	bl	10105fc <z_impl_k_sem_take>
	while (len) {
 100789e:	e7e6      	b.n	100786e <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
 10078a0:	1ba4      	subs	r4, r4, r6
 10078a2:	b2a4      	uxth	r4, r4
		buf += bytes;
 10078a4:	4435      	add	r5, r6
 10078a6:	e7de      	b.n	1007866 <entropy_nrf5_get_entropy+0xe>
 10078a8:	21001ab0 	.word	0x21001ab0
 10078ac:	21001ac0 	.word	0x21001ac0

010078b0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
 10078b0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
 10078b2:	2201      	movs	r2, #1
 10078b4:	4c17      	ldr	r4, [pc, #92]	; (1007914 <entropy_nrf5_init+0x64>)
 10078b6:	4611      	mov	r1, r2
 10078b8:	4620      	mov	r0, r4
 10078ba:	f00d f9de 	bl	1014c7a <z_impl_k_sem_init>
 10078be:	2201      	movs	r2, #1
 10078c0:	2100      	movs	r1, #0
 10078c2:	f104 0010 	add.w	r0, r4, #16
 10078c6:	f00d f9d8 	bl	1014c7a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
 10078ca:	f240 4307 	movw	r3, #1031	; 0x407
 10078ce:	8723      	strh	r3, [r4, #56]	; 0x38
	rngp->first_alloc = 0U;
 10078d0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 10078d4:	6223      	str	r3, [r4, #32]
	rngp->threshold	  = threshold;
 10078d6:	230c      	movs	r3, #12
	rngp->first_alloc = 0U;
 10078d8:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
 10078da:	2101      	movs	r1, #1
	rngp->threshold	  = threshold;
 10078dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
 10078e0:	4b0d      	ldr	r3, [pc, #52]	; (1007918 <entropy_nrf5_init+0x68>)
	rngp->first_alloc = 0U;
 10078e2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
	rngp->first_read  = 0U;
 10078e6:	86e5      	strh	r5, [r4, #54]	; 0x36
 10078e8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
 10078ec:	2009      	movs	r0, #9
 10078ee:	f022 0201 	bic.w	r2, r2, #1
 10078f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
 10078f6:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 10078fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
 10078fe:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
 1007902:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
 1007904:	6019      	str	r1, [r3, #0]
 1007906:	f7ff f851 	bl	10069ac <z_arm_irq_priority_set>
	irq_enable(IRQN);
 100790a:	2009      	movs	r0, #9
 100790c:	f7ff f81e 	bl	100694c <arch_irq_enable>

	return 0;
}
 1007910:	4628      	mov	r0, r5
 1007912:	bd38      	pop	{r3, r4, r5, pc}
 1007914:	21001ab0 	.word	0x21001ab0
 1007918:	41009000 	.word	0x41009000

0100791c <isr>:
{
 100791c:	b510      	push	{r4, lr}
	byte = random_byte_get();
 100791e:	f7ff fee1 	bl	10076e4 <random_byte_get>
	if (byte < 0) {
 1007922:	2800      	cmp	r0, #0
 1007924:	db20      	blt.n	1007968 <isr+0x4c>
	uint8_t last  = rngp->last;
 1007926:	4b17      	ldr	r3, [pc, #92]	; (1007984 <isr+0x68>)
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
 1007928:	b2c0      	uxtb	r0, r0
	uint8_t last  = rngp->last;
 100792a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
	if (((last - first) & mask) == mask) {
 100792e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
	uint8_t mask  = rngp->mask;
 1007932:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
	if (((last - first) & mask) == mask) {
 1007936:	1b14      	subs	r4, r2, r4
 1007938:	ea31 0404 	bics.w	r4, r1, r4
 100793c:	d10d      	bne.n	100795a <isr+0x3e>
	uint8_t last  = rngp->last;
 100793e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	if (((last - first) & mask) == mask) {
 1007942:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
	uint8_t mask  = rngp->mask;
 1007946:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
	if (((last - first) & mask) == mask) {
 100794a:	1b14      	subs	r4, r2, r4
 100794c:	ea31 0404 	bics.w	r4, r1, r4
 1007950:	d10b      	bne.n	100796a <isr+0x4e>
 1007952:	2201      	movs	r2, #1
 1007954:	4b0c      	ldr	r3, [pc, #48]	; (1007988 <isr+0x6c>)
 1007956:	605a      	str	r2, [r3, #4]
}
 1007958:	e00e      	b.n	1007978 <isr+0x5c>
	rngp->buffer[last] = byte;
 100795a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
 100795c:	3201      	adds	r2, #1
 100795e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
 1007960:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
	rngp->last = (last + 1) & mask;
 1007964:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
}
 1007968:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
 100796a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
 100796c:	3201      	adds	r2, #1
 100796e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
 1007970:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
	rngp->last = (last + 1) & mask;
 1007974:	f883 1037 	strb.w	r1, [r3, #55]	; 0x37
	z_impl_k_sem_give(sem);
 1007978:	4804      	ldr	r0, [pc, #16]	; (100798c <isr+0x70>)
}
 100797a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100797e:	f008 be1d 	b.w	10105bc <z_impl_k_sem_give>
 1007982:	bf00      	nop
 1007984:	21001ab0 	.word	0x21001ab0
 1007988:	41009000 	.word	0x41009000
 100798c:	21001ac0 	.word	0x21001ac0

01007990 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 1007990:	2301      	movs	r3, #1
 1007992:	4083      	lsls	r3, r0
{
 1007994:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 1007996:	43dc      	mvns	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1007998:	4a0b      	ldr	r2, [pc, #44]	; (10079c8 <compare_int_lock+0x38>)
 100799a:	e8d2 1fef 	ldaex	r1, [r2]
 100799e:	ea01 0504 	and.w	r5, r1, r4
 10079a2:	e8c2 5fe6 	stlex	r6, r5, [r2]
 10079a6:	2e00      	cmp	r6, #0
 10079a8:	d1f7      	bne.n	100799a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
 10079aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 10079ae:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
 10079b0:	4806      	ldr	r0, [pc, #24]	; (10079cc <compare_int_lock+0x3c>)
 10079b2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
 10079b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 10079ba:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
 10079be:	420b      	tst	r3, r1
}
 10079c0:	bf14      	ite	ne
 10079c2:	2001      	movne	r0, #1
 10079c4:	2000      	moveq	r0, #0
 10079c6:	bd70      	pop	{r4, r5, r6, pc}
 10079c8:	21001afc 	.word	0x21001afc
 10079cc:	41016000 	.word	0x41016000

010079d0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
 10079d0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
 10079d2:	490e      	ldr	r1, [pc, #56]	; (1007a0c <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
 10079d4:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
 10079d8:	e9d1 3400 	ldrd	r3, r4, [r1]
 10079dc:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
 10079de:	18c3      	adds	r3, r0, r3
 10079e0:	f144 0400 	adc.w	r4, r4, #0
 10079e4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
 10079e8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
 10079ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 10079f0:	d209      	bcs.n	1007a06 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
 10079f2:	4b07      	ldr	r3, [pc, #28]	; (1007a10 <sys_clock_timeout_handler+0x40>)
 10079f4:	681b      	ldr	r3, [r3, #0]
 10079f6:	0a1a      	lsrs	r2, r3, #8
 10079f8:	061b      	lsls	r3, r3, #24
 10079fa:	199c      	adds	r4, r3, r6
 10079fc:	4b05      	ldr	r3, [pc, #20]	; (1007a14 <sys_clock_timeout_handler+0x44>)
 10079fe:	f142 0500 	adc.w	r5, r2, #0
 1007a02:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
 1007a06:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
 1007a08:	f009 bc30 	b.w	101126c <sys_clock_announce>
 1007a0c:	21000f48 	.word	0x21000f48
 1007a10:	21001b00 	.word	0x21001b00
 1007a14:	21000f50 	.word	0x21000f50

01007a18 <compare_int_unlock>:
	if (key) {
 1007a18:	b1d9      	cbz	r1, 1007a52 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
 1007a1a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 1007a1c:	4a0d      	ldr	r2, [pc, #52]	; (1007a54 <compare_int_unlock+0x3c>)
 1007a1e:	4083      	lsls	r3, r0
 1007a20:	e8d2 cfef 	ldaex	ip, [r2]
 1007a24:	ea4c 0c03 	orr.w	ip, ip, r3
 1007a28:	e8c2 cfe1 	stlex	r1, ip, [r2]
 1007a2c:	2900      	cmp	r1, #0
 1007a2e:	d1f7      	bne.n	1007a20 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1007a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
 1007a34:	4a08      	ldr	r2, [pc, #32]	; (1007a58 <compare_int_unlock+0x40>)
 1007a36:	4083      	lsls	r3, r0
 1007a38:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 1007a3c:	4b07      	ldr	r3, [pc, #28]	; (1007a5c <compare_int_unlock+0x44>)
 1007a3e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
 1007a42:	40c3      	lsrs	r3, r0
 1007a44:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1007a46:	bf42      	ittt	mi
 1007a48:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
 1007a4c:	4b04      	ldrmi	r3, [pc, #16]	; (1007a60 <compare_int_unlock+0x48>)
 1007a4e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
 1007a52:	4770      	bx	lr
 1007a54:	21001afc 	.word	0x21001afc
 1007a58:	41016000 	.word	0x41016000
 1007a5c:	21001af4 	.word	0x21001af4
 1007a60:	e000e100 	.word	0xe000e100

01007a64 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
 1007a64:	b2c3      	uxtb	r3, r0
}
 1007a66:	4802      	ldr	r0, [pc, #8]	; (1007a70 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
 1007a68:	009b      	lsls	r3, r3, #2
 1007a6a:	4418      	add	r0, r3
 1007a6c:	4770      	bx	lr
 1007a6e:	bf00      	nop
 1007a70:	41016140 	.word	0x41016140

01007a74 <z_nrf_rtc_timer_abort>:
{
 1007a74:	b5d0      	push	{r4, r6, r7, lr}
 1007a76:	4604      	mov	r4, r0
	bool key = compare_int_lock(chan);
 1007a78:	f7ff ff8a 	bl	1007990 <compare_int_lock>
	cc_data[chan].target_time = TARGET_TIME_INVALID;
 1007a7c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 1007a80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 1007a84:	4b0e      	ldr	r3, [pc, #56]	; (1007ac0 <z_nrf_rtc_timer_abort+0x4c>)
	bool key = compare_int_lock(chan);
 1007a86:	4601      	mov	r1, r0
	cc_data[chan].target_time = TARGET_TIME_INVALID;
 1007a88:	eb03 1304 	add.w	r3, r3, r4, lsl #4
	event_clear(chan);
 1007a8c:	4620      	mov	r0, r4
	cc_data[chan].target_time = TARGET_TIME_INVALID;
 1007a8e:	e9c3 6702 	strd	r6, r7, [r3, #8]
	event_clear(chan);
 1007a92:	f00b f8a5 	bl	1012be0 <event_clear>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1007a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
 1007a9a:	4a0a      	ldr	r2, [pc, #40]	; (1007ac4 <z_nrf_rtc_timer_abort+0x50>)
 1007a9c:	40a3      	lsls	r3, r4
 1007a9e:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
	(void)atomic_and(&force_isr_mask, ~BIT(chan));
 1007aa2:	2301      	movs	r3, #1
 1007aa4:	40a3      	lsls	r3, r4
 1007aa6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1007aa8:	4a07      	ldr	r2, [pc, #28]	; (1007ac8 <z_nrf_rtc_timer_abort+0x54>)
 1007aaa:	e8d2 6fef 	ldaex	r6, [r2]
 1007aae:	401e      	ands	r6, r3
 1007ab0:	e8c2 6fe4 	stlex	r4, r6, [r2]
 1007ab4:	2c00      	cmp	r4, #0
 1007ab6:	d1f8      	bne.n	1007aaa <z_nrf_rtc_timer_abort+0x36>
}
 1007ab8:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	compare_int_unlock(chan, key);
 1007abc:	f7ff bfac 	b.w	1007a18 <compare_int_unlock>
 1007ac0:	21000f08 	.word	0x21000f08
 1007ac4:	41016000 	.word	0x41016000
 1007ac8:	21001af4 	.word	0x21001af4

01007acc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
 1007acc:	4b0d      	ldr	r3, [pc, #52]	; (1007b04 <z_nrf_rtc_timer_read+0x38>)
 1007ace:	6818      	ldr	r0, [r3, #0]
 1007ad0:	0a01      	lsrs	r1, r0, #8
 1007ad2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
 1007ad4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
 1007ad8:	4b0b      	ldr	r3, [pc, #44]	; (1007b08 <z_nrf_rtc_timer_read+0x3c>)
 1007ada:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
 1007ade:	1818      	adds	r0, r3, r0
 1007ae0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
 1007ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 1007ae8:	d20a      	bcs.n	1007b00 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
 1007aea:	4b08      	ldr	r3, [pc, #32]	; (1007b0c <z_nrf_rtc_timer_read+0x40>)
 1007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 1007af0:	4290      	cmp	r0, r2
 1007af2:	eb71 0303 	sbcs.w	r3, r1, r3
 1007af6:	d203      	bcs.n	1007b00 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
 1007af8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
 1007afc:	f141 0100 	adc.w	r1, r1, #0
}
 1007b00:	4770      	bx	lr
 1007b02:	bf00      	nop
 1007b04:	21001b00 	.word	0x21001b00
 1007b08:	41016000 	.word	0x41016000
 1007b0c:	21000f50 	.word	0x21000f50

01007b10 <compare_set>:
{
 1007b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1007b14:	4616      	mov	r6, r2
 1007b16:	461f      	mov	r7, r3
 1007b18:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
 1007b1a:	f7ff ff39 	bl	1007990 <compare_int_lock>
 1007b1e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
 1007b20:	f7ff ffd4 	bl	1007acc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
 1007b24:	42b0      	cmp	r0, r6
 1007b26:	eb71 0307 	sbcs.w	r3, r1, r7
 1007b2a:	d250      	bcs.n	1007bce <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
 1007b2c:	4b38      	ldr	r3, [pc, #224]	; (1007c10 <compare_set+0x100>)
 1007b2e:	1a30      	subs	r0, r6, r0
 1007b30:	eb67 0101 	sbc.w	r1, r7, r1
 1007b34:	4298      	cmp	r0, r3
 1007b36:	f171 0100 	sbcs.w	r1, r1, #0
 1007b3a:	d265      	bcs.n	1007c08 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
 1007b3c:	4b35      	ldr	r3, [pc, #212]	; (1007c14 <compare_set+0x104>)
 1007b3e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 1007b42:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 1007b46:	429f      	cmp	r7, r3
 1007b48:	bf08      	it	eq
 1007b4a:	4296      	cmpeq	r6, r2
 1007b4c:	d049      	beq.n	1007be2 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1007b4e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
 1007b52:	4931      	ldr	r1, [pc, #196]	; (1007c18 <compare_set+0x108>)
 1007b54:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
 1007b58:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
 1007b5a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
 1007b5e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
 1007b62:	f00b f83d 	bl	1012be0 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
 1007b66:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
 1007b6a:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
 1007b6c:	f104 0550 	add.w	r5, r4, #80	; 0x50
 1007b70:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1007b72:	b2ad      	uxth	r5, r5
 1007b74:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    p_reg->CC[ch] = cc_val;
 1007b78:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
 1007b7c:	4a27      	ldr	r2, [pc, #156]	; (1007c1c <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1007b7e:	f505 35b0 	add.w	r5, r5, #90112	; 0x16000
    p_reg->CC[ch] = cc_val;
 1007b82:	9301      	str	r3, [sp, #4]
 1007b84:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
 1007b88:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
 1007b8c:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
 1007b90:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
 1007b94:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
 1007b98:	eba0 0008 	sub.w	r0, r0, r8
 1007b9c:	3803      	subs	r0, #3
 1007b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
 1007ba2:	4290      	cmp	r0, r2
 1007ba4:	d91d      	bls.n	1007be2 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1007ba6:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
 1007ba8:	b160      	cbz	r0, 1007bc4 <compare_set+0xb4>
     return p_reg->COUNTER;
 1007baa:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
 1007bae:	eba8 000b 	sub.w	r0, r8, fp
 1007bb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
 1007bb6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 1007bba:	d912      	bls.n	1007be2 <compare_set+0xd2>
					event_clear(chan);
 1007bbc:	4620      	mov	r0, r4
 1007bbe:	f00b f80f 	bl	1012be0 <event_clear>
 1007bc2:	4a16      	ldr	r2, [pc, #88]	; (1007c1c <compare_set+0x10c>)
			cc_val = now + cc_inc;
 1007bc4:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
 1007bc8:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
 1007bcc:	e7da      	b.n	1007b84 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
 1007bce:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 1007bd0:	4a13      	ldr	r2, [pc, #76]	; (1007c20 <compare_set+0x110>)
 1007bd2:	40a3      	lsls	r3, r4
 1007bd4:	e8d2 0fef 	ldaex	r0, [r2]
 1007bd8:	4318      	orrs	r0, r3
 1007bda:	e8c2 0fe1 	stlex	r1, r0, [r2]
 1007bde:	2900      	cmp	r1, #0
 1007be0:	d1f8      	bne.n	1007bd4 <compare_set+0xc4>
	return ret;
 1007be2:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
 1007be4:	490b      	ldr	r1, [pc, #44]	; (1007c14 <compare_set+0x104>)
	cc_data[chan].callback = handler;
 1007be6:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
 1007be8:	0123      	lsls	r3, r4, #4
 1007bea:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
 1007bee:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
 1007bf0:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
 1007bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1007bf6:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
 1007bf8:	4620      	mov	r0, r4
 1007bfa:	9900      	ldr	r1, [sp, #0]
 1007bfc:	f7ff ff0c 	bl	1007a18 <compare_int_unlock>
}
 1007c00:	4628      	mov	r0, r5
 1007c02:	b003      	add	sp, #12
 1007c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
 1007c08:	f06f 0515 	mvn.w	r5, #21
 1007c0c:	e7f4      	b.n	1007bf8 <compare_set+0xe8>
 1007c0e:	bf00      	nop
 1007c10:	00800001 	.word	0x00800001
 1007c14:	21000f08 	.word	0x21000f08
 1007c18:	41016000 	.word	0x41016000
 1007c1c:	007ffffd 	.word	0x007ffffd
 1007c20:	21001af4 	.word	0x21001af4

01007c24 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
 1007c24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
 1007c26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
 1007c2a:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
 1007c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1007c30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 1007c34:	4c20      	ldr	r4, [pc, #128]	; (1007cb8 <sys_clock_driver_init+0x94>)
 1007c36:	4b21      	ldr	r3, [pc, #132]	; (1007cbc <sys_clock_driver_init+0x98>)
 1007c38:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
 1007c3c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
 1007c40:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
 1007c44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 1007c48:	e9c3 0106 	strd	r0, r1, [r3, #24]
 1007c4c:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
 1007c50:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 1007c54:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 1007c58:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
 1007c5c:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
 1007c60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 1007c64:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1007c66:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 1007c6a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
 1007c6e:	4b14      	ldr	r3, [pc, #80]	; (1007cc0 <sys_clock_driver_init+0x9c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
 1007c70:	2101      	movs	r1, #1
 1007c72:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
 1007c76:	2016      	movs	r0, #22
 1007c78:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1007c7c:	462a      	mov	r2, r5
 1007c7e:	f7fe fe95 	bl	10069ac <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
 1007c82:	2016      	movs	r0, #22
 1007c84:	f7fe fe62 	bl	100694c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
 1007c88:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
 1007c8a:	220f      	movs	r2, #15
 1007c8c:	60a3      	str	r3, [r4, #8]
 1007c8e:	6023      	str	r3, [r4, #0]
 1007c90:	4b0c      	ldr	r3, [pc, #48]	; (1007cc4 <sys_clock_driver_init+0xa0>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
 1007c92:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
 1007c94:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
 1007c96:	220e      	movs	r2, #14
 1007c98:	4b0b      	ldr	r3, [pc, #44]	; (1007cc8 <sys_clock_driver_init+0xa4>)
 1007c9a:	601a      	str	r2, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
 1007c9c:	4b0b      	ldr	r3, [pc, #44]	; (1007ccc <sys_clock_driver_init+0xa8>)
 1007c9e:	4a0c      	ldr	r2, [pc, #48]	; (1007cd0 <sys_clock_driver_init+0xac>)
 1007ca0:	9300      	str	r3, [sp, #0]
 1007ca2:	9501      	str	r5, [sp, #4]
 1007ca4:	2300      	movs	r3, #0
 1007ca6:	f7ff ff33 	bl	1007b10 <compare_set>

	z_nrf_clock_control_lf_on(mode);
 1007caa:	4630      	mov	r0, r6
 1007cac:	f7ff fb5e 	bl	100736c <z_nrf_clock_control_lf_on>

	return 0;
}
 1007cb0:	4628      	mov	r0, r5
 1007cb2:	b002      	add	sp, #8
 1007cb4:	bd70      	pop	{r4, r5, r6, pc}
 1007cb6:	bf00      	nop
 1007cb8:	41016000 	.word	0x41016000
 1007cbc:	21000f08 	.word	0x21000f08
 1007cc0:	e000e100 	.word	0xe000e100
 1007cc4:	21001afc 	.word	0x21001afc
 1007cc8:	21001af8 	.word	0x21001af8
 1007ccc:	010079d1 	.word	0x010079d1
 1007cd0:	007fffff 	.word	0x007fffff

01007cd4 <rtc_nrf_isr>:
{
 1007cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
 1007cd8:	4b34      	ldr	r3, [pc, #208]	; (1007dac <rtc_nrf_isr+0xd8>)
 1007cda:	b087      	sub	sp, #28
 1007cdc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
 1007ce0:	0792      	lsls	r2, r2, #30
 1007ce2:	d50b      	bpl.n	1007cfc <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1007ce4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 1007ce8:	b142      	cbz	r2, 1007cfc <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1007cea:	2200      	movs	r2, #0
 1007cec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
 1007cf0:	4a2f      	ldr	r2, [pc, #188]	; (1007db0 <rtc_nrf_isr+0xdc>)
 1007cf2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 1007cf6:	6813      	ldr	r3, [r2, #0]
 1007cf8:	3301      	adds	r3, #1
 1007cfa:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
 1007cfc:	4d2d      	ldr	r5, [pc, #180]	; (1007db4 <rtc_nrf_isr+0xe0>)
{
 1007cfe:	2400      	movs	r4, #0
 1007d00:	46a9      	mov	r9, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1007d02:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1007db8 <rtc_nrf_isr+0xe4>
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
 1007d06:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    return p_reg->INTENSET & mask;
 1007d0a:	4b28      	ldr	r3, [pc, #160]	; (1007dac <rtc_nrf_isr+0xd8>)
 1007d0c:	40a6      	lsls	r6, r4
 1007d0e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 1007d12:	421e      	tst	r6, r3
 1007d14:	d027      	beq.n	1007d66 <rtc_nrf_isr+0x92>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
 1007d16:	2301      	movs	r3, #1
 1007d18:	40a3      	lsls	r3, r4
 1007d1a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1007d1c:	4f27      	ldr	r7, [pc, #156]	; (1007dbc <rtc_nrf_isr+0xe8>)
 1007d1e:	e8d7 2fef 	ldaex	r2, [r7]
 1007d22:	ea02 0103 	and.w	r1, r2, r3
 1007d26:	e8c7 1fe0 	stlex	r0, r1, [r7]
 1007d2a:	2800      	cmp	r0, #0
 1007d2c:	d1f7      	bne.n	1007d1e <rtc_nrf_isr+0x4a>
 1007d2e:	fa22 f304 	lsr.w	r3, r2, r4
 1007d32:	07db      	lsls	r3, r3, #31
 1007d34:	d402      	bmi.n	1007d3c <rtc_nrf_isr+0x68>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1007d36:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 1007d3a:	b1a3      	cbz	r3, 1007d66 <rtc_nrf_isr+0x92>
			event_clear(chan);
 1007d3c:	4620      	mov	r0, r4
 1007d3e:	f00a ff4f 	bl	1012be0 <event_clear>
		curr_time = z_nrf_rtc_timer_read();
 1007d42:	f7ff fec3 	bl	1007acc <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1007d46:	f3ef 8b10 	mrs	fp, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1007d4a:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
 1007d4c:	eb09 1204 	add.w	r2, r9, r4, lsl #4
 1007d50:	e9d2 7802 	ldrd	r7, r8, [r2, #8]
 1007d54:	e9cd 7802 	strd	r7, r8, [sp, #8]
		if (curr_time >= expire_time) {
 1007d58:	9b02      	ldr	r3, [sp, #8]
 1007d5a:	4298      	cmp	r0, r3
 1007d5c:	9b03      	ldr	r3, [sp, #12]
 1007d5e:	4199      	sbcs	r1, r3
 1007d60:	d209      	bcs.n	1007d76 <rtc_nrf_isr+0xa2>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1007d62:	f38b 8810 	msr	PRIMASK, fp
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
 1007d66:	3401      	adds	r4, #1
 1007d68:	2c04      	cmp	r4, #4
 1007d6a:	f105 0510 	add.w	r5, r5, #16
 1007d6e:	d1ca      	bne.n	1007d06 <rtc_nrf_isr+0x32>
}
 1007d70:	b007      	add	sp, #28
 1007d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cc_data[chan].callback = NULL;
 1007d76:	2000      	movs	r0, #0
			user_context = cc_data[chan].user_context;
 1007d78:	e9d5 1300 	ldrd	r1, r3, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 1007d7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 1007d80:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
 1007d84:	6028      	str	r0, [r5, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 1007d86:	e9c2 7802 	strd	r7, r8, [r2, #8]
    p_reg->EVTENCLR = mask;
 1007d8a:	4a08      	ldr	r2, [pc, #32]	; (1007dac <rtc_nrf_isr+0xd8>)
			user_context = cc_data[chan].user_context;
 1007d8c:	9305      	str	r3, [sp, #20]
			event_clear(chan);
 1007d8e:	4620      	mov	r0, r4
 1007d90:	f8c2 6348 	str.w	r6, [r2, #840]	; 0x348
 1007d94:	f00a ff24 	bl	1012be0 <event_clear>
 1007d98:	f38b 8810 	msr	PRIMASK, fp
		if (handler) {
 1007d9c:	2900      	cmp	r1, #0
 1007d9e:	d0e2      	beq.n	1007d66 <rtc_nrf_isr+0x92>
			handler(chan, expire_time, user_context);
 1007da0:	9b05      	ldr	r3, [sp, #20]
 1007da2:	9300      	str	r3, [sp, #0]
 1007da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1007da8:	4788      	blx	r1
 1007daa:	e7dc      	b.n	1007d66 <rtc_nrf_isr+0x92>
 1007dac:	41016000 	.word	0x41016000
 1007db0:	21001b00 	.word	0x21001b00
 1007db4:	21000f08 	.word	0x21000f08
 1007db8:	41016140 	.word	0x41016140
 1007dbc:	21001af4 	.word	0x21001af4

01007dc0 <z_nrf_rtc_timer_chan_alloc>:
{
 1007dc0:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
 1007dc2:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
 1007dc4:	4b0c      	ldr	r3, [pc, #48]	; (1007df8 <z_nrf_rtc_timer_chan_alloc+0x38>)
 1007dc6:	6818      	ldr	r0, [r3, #0]
 1007dc8:	b190      	cbz	r0, 1007df0 <z_nrf_rtc_timer_chan_alloc+0x30>
 1007dca:	fab0 f080 	clz	r0, r0
 1007dce:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
 1007dd2:	fa04 f100 	lsl.w	r1, r4, r0
 1007dd6:	43c9      	mvns	r1, r1
 1007dd8:	e8d3 2fef 	ldaex	r2, [r3]
 1007ddc:	ea02 0501 	and.w	r5, r2, r1
 1007de0:	e8c3 5fe6 	stlex	r6, r5, [r3]
 1007de4:	2e00      	cmp	r6, #0
 1007de6:	d1f7      	bne.n	1007dd8 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
 1007de8:	40c2      	lsrs	r2, r0
 1007dea:	07d2      	lsls	r2, r2, #31
 1007dec:	d5eb      	bpl.n	1007dc6 <z_nrf_rtc_timer_chan_alloc+0x6>
}
 1007dee:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
 1007df0:	f06f 000b 	mvn.w	r0, #11
 1007df4:	e7fb      	b.n	1007dee <z_nrf_rtc_timer_chan_alloc+0x2e>
 1007df6:	bf00      	nop
 1007df8:	21001af8 	.word	0x21001af8

01007dfc <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
 1007dfc:	1c43      	adds	r3, r0, #1
{
 1007dfe:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
 1007e00:	d021      	beq.n	1007e46 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
 1007e02:	2801      	cmp	r0, #1
 1007e04:	dd21      	ble.n	1007e4a <sys_clock_set_timeout+0x4e>
 1007e06:	4a12      	ldr	r2, [pc, #72]	; (1007e50 <sys_clock_set_timeout+0x54>)
 1007e08:	4b12      	ldr	r3, [pc, #72]	; (1007e54 <sys_clock_set_timeout+0x58>)
 1007e0a:	4290      	cmp	r0, r2
 1007e0c:	bfd4      	ite	le
 1007e0e:	4604      	movle	r4, r0
 1007e10:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
 1007e12:	f7ff fe5b 	bl	1007acc <z_nrf_rtc_timer_read>
 1007e16:	4b10      	ldr	r3, [pc, #64]	; (1007e58 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
 1007e18:	490e      	ldr	r1, [pc, #56]	; (1007e54 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
 1007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 1007e1e:	1a80      	subs	r0, r0, r2
		cyc = 0;
 1007e20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 1007e24:	bf28      	it	cs
 1007e26:	2400      	movcs	r4, #0
	cyc += unannounced;
 1007e28:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
 1007e2a:	428c      	cmp	r4, r1
 1007e2c:	bf28      	it	cs
 1007e2e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
 1007e30:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
 1007e32:	490a      	ldr	r1, [pc, #40]	; (1007e5c <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
 1007e34:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
 1007e36:	9001      	str	r0, [sp, #4]
 1007e38:	9100      	str	r1, [sp, #0]
 1007e3a:	f143 0300 	adc.w	r3, r3, #0
 1007e3e:	f7ff fe67 	bl	1007b10 <compare_set>
}
 1007e42:	b002      	add	sp, #8
 1007e44:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
 1007e46:	4c03      	ldr	r4, [pc, #12]	; (1007e54 <sys_clock_set_timeout+0x58>)
 1007e48:	e7e3      	b.n	1007e12 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
 1007e4a:	2401      	movs	r4, #1
 1007e4c:	e7e1      	b.n	1007e12 <sys_clock_set_timeout+0x16>
 1007e4e:	bf00      	nop
 1007e50:	007ffffe 	.word	0x007ffffe
 1007e54:	007fffff 	.word	0x007fffff
 1007e58:	21000f48 	.word	0x21000f48
 1007e5c:	010079d1 	.word	0x010079d1

01007e60 <sys_clock_elapsed>:
{
 1007e60:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
 1007e62:	f7ff fe33 	bl	1007acc <z_nrf_rtc_timer_read>
 1007e66:	4b02      	ldr	r3, [pc, #8]	; (1007e70 <sys_clock_elapsed+0x10>)
 1007e68:	681b      	ldr	r3, [r3, #0]
}
 1007e6a:	1ac0      	subs	r0, r0, r3
 1007e6c:	bd08      	pop	{r3, pc}
 1007e6e:	bf00      	nop
 1007e70:	21000f48 	.word	0x21000f48

01007e74 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
 1007e74:	b510      	push	{r4, lr}
 1007e76:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
 1007e78:	6902      	ldr	r2, [r0, #16]
{
 1007e7a:	b0a2      	sub	sp, #136	; 0x88

	data->dev = dev;
 1007e7c:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
 1007e80:	4916      	ldr	r1, [pc, #88]	; (1007edc <mbox_nrf_init+0x68>)
 1007e82:	2000      	movs	r0, #0
 1007e84:	f007 fce4 	bl	100f850 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 1007e88:	2200      	movs	r2, #0
 1007e8a:	2101      	movs	r1, #1
 1007e8c:	2012      	movs	r0, #18
 1007e8e:	f7fe fd8d 	bl	10069ac <z_arm_irq_priority_set>
	nrfx_ipc_config_t ch_config = { 0 };
 1007e92:	2284      	movs	r2, #132	; 0x84
 1007e94:	2100      	movs	r1, #0
 1007e96:	a801      	add	r0, sp, #4
 1007e98:	6864      	ldr	r4, [r4, #4]
 1007e9a:	f00a fdba 	bl	1012a12 <memset>
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
 1007e9e:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
 1007ea0:	2001      	movs	r0, #1
 1007ea2:	aa01      	add	r2, sp, #4
		if (conf->tx_mask & BIT(ch)) {
 1007ea4:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
 1007ea6:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
 1007ea8:	40d9      	lsrs	r1, r3
 1007eaa:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
 1007eac:	bf44      	itt	mi
 1007eae:	fa00 f103 	lslmi.w	r1, r0, r3
 1007eb2:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
 1007eb6:	6821      	ldr	r1, [r4, #0]
 1007eb8:	40d9      	lsrs	r1, r3
 1007eba:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
 1007ebc:	bf48      	it	mi
 1007ebe:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
 1007ec2:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
 1007ec6:	bf48      	it	mi
 1007ec8:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
 1007eca:	2b10      	cmp	r3, #16
 1007ecc:	d1ea      	bne.n	1007ea4 <mbox_nrf_init+0x30>
	nrfx_ipc_config_load(&ch_config);
 1007ece:	a801      	add	r0, sp, #4
 1007ed0:	f007 fcd6 	bl	100f880 <nrfx_ipc_config_load>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);

	return 0;
}
 1007ed4:	2000      	movs	r0, #0
 1007ed6:	b022      	add	sp, #136	; 0x88
 1007ed8:	bd10      	pop	{r4, pc}
 1007eda:	bf00      	nop
 1007edc:	01012c0d 	.word	0x01012c0d

01007ee0 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
 1007ee0:	4602      	mov	r2, r0
 1007ee2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 1007ee4:	4801      	ldr	r0, [pc, #4]	; (1007eec <multithreading_lock_acquire+0xc>)
 1007ee6:	f008 bab3 	b.w	1010450 <z_impl_k_mutex_lock>
 1007eea:	bf00      	nop
 1007eec:	2100022c 	.word	0x2100022c

01007ef0 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
 1007ef0:	4801      	ldr	r0, [pc, #4]	; (1007ef8 <multithreading_lock_release+0x8>)
 1007ef2:	f008 bb27 	b.w	1010544 <z_impl_k_mutex_unlock>
 1007ef6:	bf00      	nop
 1007ef8:	2100022c 	.word	0x2100022c

01007efc <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
 1007efc:	4901      	ldr	r1, [pc, #4]	; (1007f04 <mpsl_low_prio_irq_handler+0x8>)
 1007efe:	4802      	ldr	r0, [pc, #8]	; (1007f08 <mpsl_low_prio_irq_handler+0xc>)
 1007f00:	f00c bf23 	b.w	1014d4a <k_work_submit_to_queue>
 1007f04:	21001b8c 	.word	0x21001b8c
 1007f08:	21000f58 	.word	0x21000f58

01007f0c <mpsl_lib_init_sys>:
{
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
 1007f0c:	2332      	movs	r3, #50	; 0x32

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
 1007f0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.source = m_config_clock_source_get();
 1007f10:	2501      	movs	r5, #1
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
 1007f12:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
 1007f16:	2300      	movs	r3, #0
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
 1007f18:	211a      	movs	r1, #26
 1007f1a:	4668      	mov	r0, sp
 1007f1c:	4a0e      	ldr	r2, [pc, #56]	; (1007f58 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
 1007f1e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
 1007f22:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
 1007f26:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
 1007f2a:	f7fb fb39 	bl	10035a0 <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
 1007f2e:	4604      	mov	r4, r0
 1007f30:	b970      	cbnz	r0, 1007f50 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
 1007f32:	4601      	mov	r1, r0
 1007f34:	462a      	mov	r2, r5
 1007f36:	200c      	movs	r0, #12
 1007f38:	f7fe fd38 	bl	10069ac <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
 1007f3c:	462a      	mov	r2, r5
 1007f3e:	4621      	mov	r1, r4
 1007f40:	2011      	movs	r0, #17
 1007f42:	f7fe fd33 	bl	10069ac <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
 1007f46:	462a      	mov	r2, r5
 1007f48:	4621      	mov	r1, r4
 1007f4a:	2008      	movs	r0, #8
 1007f4c:	f7fe fd2e 	bl	10069ac <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
 1007f50:	4620      	mov	r0, r4
 1007f52:	b003      	add	sp, #12
 1007f54:	bd30      	pop	{r4, r5, pc}
 1007f56:	bf00      	nop
 1007f58:	01012cfb 	.word	0x01012cfb

01007f5c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
 1007f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
 1007f5e:	2400      	movs	r4, #0
 1007f60:	4d0c      	ldr	r5, [pc, #48]	; (1007f94 <mpsl_low_prio_init+0x38>)
 1007f62:	f06f 0307 	mvn.w	r3, #7
 1007f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 1007f6a:	4628      	mov	r0, r5
 1007f6c:	490a      	ldr	r1, [pc, #40]	; (1007f98 <mpsl_low_prio_init+0x3c>)
 1007f6e:	9400      	str	r4, [sp, #0]
 1007f70:	f008 fc62 	bl	1010838 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
 1007f74:	4909      	ldr	r1, [pc, #36]	; (1007f9c <mpsl_low_prio_init+0x40>)
 1007f76:	4628      	mov	r0, r5
 1007f78:	f00c fe5f 	bl	1014c3a <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
 1007f7c:	4908      	ldr	r1, [pc, #32]	; (1007fa0 <mpsl_low_prio_init+0x44>)
 1007f7e:	4809      	ldr	r0, [pc, #36]	; (1007fa4 <mpsl_low_prio_init+0x48>)
 1007f80:	f00c fec6 	bl	1014d10 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
 1007f84:	4622      	mov	r2, r4
 1007f86:	2104      	movs	r1, #4
 1007f88:	201a      	movs	r0, #26
 1007f8a:	f7fe fd0f 	bl	10069ac <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
 1007f8e:	4620      	mov	r0, r4
 1007f90:	b003      	add	sp, #12
 1007f92:	bd30      	pop	{r4, r5, pc}
 1007f94:	21000f58 	.word	0x21000f58
 1007f98:	21004950 	.word	0x21004950
 1007f9c:	01015b1d 	.word	0x01015b1d
 1007fa0:	01012d23 	.word	0x01012d23
 1007fa4:	21001b8c 	.word	0x21001b8c

01007fa8 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
 1007fa8:	4b01      	ldr	r3, [pc, #4]	; (1007fb0 <mpsl_hfclk_callback+0x8>)
 1007faa:	2000      	movs	r0, #0
 1007fac:	681b      	ldr	r3, [r3, #0]
 1007fae:	4718      	bx	r3
 1007fb0:	21001b9c 	.word	0x21001b9c

01007fb4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
 1007fb4:	b120      	cbz	r0, 1007fc0 <nrfx_clock_start+0xc>
 1007fb6:	2801      	cmp	r0, #1
 1007fb8:	d106      	bne.n	1007fc8 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
 1007fba:	4804      	ldr	r0, [pc, #16]	; (1007fcc <nrfx_clock_start+0x18>)
 1007fbc:	f7fb b858 	b.w	1003070 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
 1007fc0:	4b03      	ldr	r3, [pc, #12]	; (1007fd0 <nrfx_clock_start+0x1c>)
 1007fc2:	2001      	movs	r0, #1
 1007fc4:	681b      	ldr	r3, [r3, #0]
 1007fc6:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
 1007fc8:	4770      	bx	lr
 1007fca:	bf00      	nop
 1007fcc:	01007fa9 	.word	0x01007fa9
 1007fd0:	21001b9c 	.word	0x21001b9c

01007fd4 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
 1007fd4:	4b01      	ldr	r3, [pc, #4]	; (1007fdc <nrfx_clock_init+0x8>)
 1007fd6:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
 1007fd8:	4801      	ldr	r0, [pc, #4]	; (1007fe0 <nrfx_clock_init+0xc>)
 1007fda:	4770      	bx	lr
 1007fdc:	21001b9c 	.word	0x21001b9c
 1007fe0:	0bad0000 	.word	0x0bad0000

01007fe4 <temp_nrf5_mpsl_channel_get>:
}

static int temp_nrf5_mpsl_channel_get(const struct device *dev,
				      enum sensor_channel chan,
				      struct sensor_value *val)
{
 1007fe4:	b510      	push	{r4, lr}
	int32_t uval;
	uint32_t uval_abs;
	uint32_t val1_abs;
	uint32_t val2_abs;

	if (chan != SENSOR_CHAN_DIE_TEMP) {
 1007fe6:	290c      	cmp	r1, #12
	struct temp_nrf5_mpsl_data *data = dev->data;
 1007fe8:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
 1007fea:	d114      	bne.n	1008016 <temp_nrf5_mpsl_channel_get+0x32>
		return -ENOTSUP;
	}

	uval = data->sample;
 1007fec:	6818      	ldr	r0, [r3, #0]
	uval_abs = (uval < 0) ? (-uval) : uval;

	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
 1007fee:	4c0b      	ldr	r4, [pc, #44]	; (100801c <temp_nrf5_mpsl_channel_get+0x38>)
	uval_abs = (uval < 0) ? (-uval) : uval;
 1007ff0:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 1007ff4:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
		   TEMP_NRF5_MPSL_MILLIDEGREE_C_PER_INC;

	if (uval < 0) {
 1007ff8:	2800      	cmp	r0, #0
		val->val2 = (int32_t)val2_abs;
	}

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
 1007ffa:	f04f 0000 	mov.w	r0, #0
	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
 1007ffe:	ea4f 0193 	mov.w	r1, r3, lsr #2
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
 1008002:	f003 0303 	and.w	r3, r3, #3
 1008006:	fb04 f303 	mul.w	r3, r4, r3
		val->val1 = -(int32_t)val1_abs;
 100800a:	bfbc      	itt	lt
 100800c:	4249      	neglt	r1, r1
		val->val2 = -(int32_t)val2_abs;
 100800e:	425b      	neglt	r3, r3
		val->val2 = (int32_t)val2_abs;
 1008010:	e9c2 1300 	strd	r1, r3, [r2]
}
 1008014:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 1008016:	f06f 0085 	mvn.w	r0, #133	; 0x85
 100801a:	e7fb      	b.n	1008014 <temp_nrf5_mpsl_channel_get+0x30>
 100801c:	0003d090 	.word	0x0003d090

01008020 <nrf_802154_random_init>:
	state = 1664525 * num + 1013904223;
	return num;
}

void nrf_802154_random_init(void)
{
 1008020:	b538      	push	{r3, r4, r5, lr}
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
 1008022:	4b06      	ldr	r3, [pc, #24]	; (100803c <nrf_802154_random_init+0x1c>)
 1008024:	4c06      	ldr	r4, [pc, #24]	; (1008040 <nrf_802154_random_init+0x20>)
 1008026:	689d      	ldr	r5, [r3, #8]
 1008028:	2204      	movs	r2, #4
 100802a:	682b      	ldr	r3, [r5, #0]
 100802c:	4904      	ldr	r1, [pc, #16]	; (1008040 <nrf_802154_random_init+0x20>)
 100802e:	4803      	ldr	r0, [pc, #12]	; (100803c <nrf_802154_random_init+0x1c>)
 1008030:	4798      	blx	r3
	__ASSERT_NO_MSG(device_is_ready(dev));

	do {
		err = entropy_get_entropy(dev, (uint8_t *)&state, sizeof(state));
		__ASSERT_NO_MSG(err == 0);
	} while (state == 0);
 1008032:	6823      	ldr	r3, [r4, #0]
 1008034:	2b00      	cmp	r3, #0
 1008036:	d0f7      	beq.n	1008028 <nrf_802154_random_init+0x8>
}
 1008038:	bd38      	pop	{r3, r4, r5, pc}
 100803a:	bf00      	nop
 100803c:	01015520 	.word	0x01015520
 1008040:	21001ba4 	.word	0x21001ba4

01008044 <nrf_802154_random_get>:
	uint32_t num = state;
 1008044:	4a03      	ldr	r2, [pc, #12]	; (1008054 <nrf_802154_random_get+0x10>)
	state = 1664525 * num + 1013904223;
 1008046:	4904      	ldr	r1, [pc, #16]	; (1008058 <nrf_802154_random_get+0x14>)
	uint32_t num = state;
 1008048:	6810      	ldr	r0, [r2, #0]
	state = 1664525 * num + 1013904223;
 100804a:	4b04      	ldr	r3, [pc, #16]	; (100805c <nrf_802154_random_get+0x18>)
 100804c:	fb01 3300 	mla	r3, r1, r0, r3
 1008050:	6013      	str	r3, [r2, #0]
}

uint32_t nrf_802154_random_get(void)
{
	return next();
}
 1008052:	4770      	bx	lr
 1008054:	21001ba4 	.word	0x21001ba4
 1008058:	0019660d 	.word	0x0019660d
 100805c:	3c6ef35f 	.word	0x3c6ef35f

01008060 <nrf_802154_clock_hfclk_start>:
	hfclk_is_running = true;
	nrf_802154_clock_hfclk_ready();
}

void nrf_802154_clock_hfclk_start(void)
{
 1008060:	b508      	push	{r3, lr}
	int ret;
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
 1008062:	2000      	movs	r0, #0
 1008064:	f7ff f97a 	bl	100735c <z_nrf_clock_control_get_onoff>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
 1008068:	2300      	movs	r3, #0
 100806a:	4905      	ldr	r1, [pc, #20]	; (1008080 <nrf_802154_clock_hfclk_start+0x20>)
 100806c:	60cb      	str	r3, [r1, #12]
 100806e:	4b05      	ldr	r3, [pc, #20]	; (1008084 <nrf_802154_clock_hfclk_start+0x24>)
 1008070:	604b      	str	r3, [r1, #4]
 1008072:	2303      	movs	r3, #3
 1008074:	608b      	str	r3, [r1, #8]

	sys_notify_init_callback(&hfclk_cli.notify, hfclk_on_callback);

	ret = onoff_request(mgr, &hfclk_cli);
	__ASSERT_NO_MSG(ret >= 0);
}
 1008076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret = onoff_request(mgr, &hfclk_cli);
 100807a:	f00a b91d 	b.w	10122b8 <onoff_request>
 100807e:	bf00      	nop
 1008080:	21001ba8 	.word	0x21001ba8
 1008084:	010080b5 	.word	0x010080b5

01008088 <nrf_802154_clock_hfclk_stop>:

void nrf_802154_clock_hfclk_stop(void)
{
 1008088:	b510      	push	{r4, lr}
	int ret;
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
 100808a:	2000      	movs	r0, #0
 100808c:	f7ff f966 	bl	100735c <z_nrf_clock_control_get_onoff>
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
 1008090:	4906      	ldr	r1, [pc, #24]	; (10080ac <nrf_802154_clock_hfclk_stop+0x24>)
 1008092:	4604      	mov	r4, r0
 1008094:	f00a f98d 	bl	10123b2 <onoff_cancel>

	if (rv == -EALREADY) {
 1008098:	3078      	adds	r0, #120	; 0x78
 100809a:	d102      	bne.n	10080a2 <nrf_802154_clock_hfclk_stop+0x1a>
		rv = onoff_release(mgr);
 100809c:	4620      	mov	r0, r4
 100809e:	f00a f963 	bl	1012368 <onoff_release>

	__ASSERT_NO_MSG(mgr != NULL);

	ret = onoff_cancel_or_release(mgr, &hfclk_cli);
	__ASSERT_NO_MSG(ret >= 0);
	hfclk_is_running = false;
 10080a2:	2200      	movs	r2, #0
 10080a4:	4b02      	ldr	r3, [pc, #8]	; (10080b0 <nrf_802154_clock_hfclk_stop+0x28>)
 10080a6:	701a      	strb	r2, [r3, #0]
}
 10080a8:	bd10      	pop	{r4, pc}
 10080aa:	bf00      	nop
 10080ac:	21001ba8 	.word	0x21001ba8
 10080b0:	21003ad4 	.word	0x21003ad4

010080b4 <hfclk_on_callback>:
	hfclk_is_running = true;
 10080b4:	2201      	movs	r2, #1
{
 10080b6:	b508      	push	{r3, lr}
	hfclk_is_running = true;
 10080b8:	4b02      	ldr	r3, [pc, #8]	; (10080c4 <hfclk_on_callback+0x10>)
 10080ba:	701a      	strb	r2, [r3, #0]
	nrf_802154_clock_hfclk_ready();
 10080bc:	f009 fb7c 	bl	10117b8 <nrf_802154_clock_hfclk_ready>
}
 10080c0:	bd08      	pop	{r3, pc}
 10080c2:	bf00      	nop
 10080c4:	21003ad4 	.word	0x21003ad4

010080c8 <nrf_802154_irq_set_pending>:
}

void nrf_802154_irq_set_pending(uint32_t irqn)
{
	/* Zephyr does not provide abstraction layer for setting pending IRQ */
	NVIC_SetPendingIRQ(irqn);
 10080c8:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
 10080ca:	2800      	cmp	r0, #0
 10080cc:	db08      	blt.n	10080e0 <nrf_802154_irq_set_pending+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 10080ce:	2201      	movs	r2, #1
 10080d0:	0943      	lsrs	r3, r0, #5
 10080d2:	4904      	ldr	r1, [pc, #16]	; (10080e4 <nrf_802154_irq_set_pending+0x1c>)
 10080d4:	f000 001f 	and.w	r0, r0, #31
 10080d8:	4082      	lsls	r2, r0
 10080da:	3340      	adds	r3, #64	; 0x40
 10080dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 10080e0:	4770      	bx	lr
 10080e2:	bf00      	nop
 10080e4:	e000e100 	.word	0xe000e100

010080e8 <nrf_802154_irq_clear_pending>:

void nrf_802154_irq_clear_pending(uint32_t irqn)
{
	/* Zephyr does not provide abstraction layer for clearing pending IRQ */
	NVIC_ClearPendingIRQ(irqn);
 10080e8:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
 10080ea:	2800      	cmp	r0, #0
 10080ec:	db08      	blt.n	1008100 <nrf_802154_irq_clear_pending+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 10080ee:	2201      	movs	r2, #1
 10080f0:	0943      	lsrs	r3, r0, #5
 10080f2:	4904      	ldr	r1, [pc, #16]	; (1008104 <nrf_802154_irq_clear_pending+0x1c>)
 10080f4:	f000 001f 	and.w	r0, r0, #31
 10080f8:	4082      	lsls	r2, r0
 10080fa:	3360      	adds	r3, #96	; 0x60
 10080fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 1008100:	4770      	bx	lr
 1008102:	bf00      	nop
 1008104:	e000e100 	.word	0xe000e100

01008108 <nrf_802154_irq_priority_get>:
	return irq_is_enabled(irqn);
}

uint32_t nrf_802154_irq_priority_get(uint32_t irqn)
{
	return NVIC_GetPriority(irqn);
 1008108:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
 100810a:	2800      	cmp	r0, #0
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 100810c:	bfab      	itete	ge
 100810e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 1008112:	4b05      	ldrlt	r3, [pc, #20]	; (1008128 <nrf_802154_irq_priority_get+0x20>)
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 1008114:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 1008118:	f000 000f 	andlt.w	r0, r0, #15
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 100811c:	bfac      	ite	ge
 100811e:	f890 0300 	ldrbge.w	r0, [r0, #768]	; 0x300
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 1008122:	5c18      	ldrblt	r0, [r3, r0]
 1008124:	0940      	lsrs	r0, r0, #5
}
 1008126:	4770      	bx	lr
 1008128:	e000ed14 	.word	0xe000ed14

0100812c <temperature_update_init>:

	k_work_reschedule(&dwork, K_MSEC(CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD));
}

static int temperature_update_init(const struct device *dev)
{
 100812c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	__ASSERT_NO_MSG(device_is_ready(device));

	k_work_init_delayable(&dwork, work_handler);
 100812e:	4c06      	ldr	r4, [pc, #24]	; (1008148 <temperature_update_init+0x1c>)
 1008130:	4906      	ldr	r1, [pc, #24]	; (100814c <temperature_update_init+0x20>)
 1008132:	4620      	mov	r0, r4
 1008134:	f00c fe20 	bl	1014d78 <k_work_init_delayable>
	k_work_schedule(&dwork, K_NO_WAIT);
 1008138:	2200      	movs	r2, #0
 100813a:	2300      	movs	r3, #0
 100813c:	4620      	mov	r0, r4
 100813e:	f008 fc1b 	bl	1010978 <k_work_schedule>

	return 0;
}
 1008142:	2000      	movs	r0, #0
 1008144:	bd10      	pop	{r4, pc}
 1008146:	bf00      	nop
 1008148:	21000ff8 	.word	0x21000ff8
 100814c:	01008151 	.word	0x01008151

01008150 <work_handler>:
{
 1008150:	b537      	push	{r0, r1, r2, r4, r5, lr}
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 1008152:	4c0f      	ldr	r4, [pc, #60]	; (1008190 <work_handler+0x40>)
 1008154:	2139      	movs	r1, #57	; 0x39
 1008156:	68a5      	ldr	r5, [r4, #8]
 1008158:	4620      	mov	r0, r4
 100815a:	68eb      	ldr	r3, [r5, #12]
 100815c:	4798      	blx	r3
	if (!err) {
 100815e:	b970      	cbnz	r0, 100817e <work_handler+0x2e>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
 1008160:	210c      	movs	r1, #12
 1008162:	466a      	mov	r2, sp
 1008164:	4620      	mov	r0, r4
 1008166:	692b      	ldr	r3, [r5, #16]
 1008168:	4798      	blx	r3
	if (!err && (value != val.val1)) {
 100816a:	b940      	cbnz	r0, 100817e <work_handler+0x2e>
 100816c:	4b09      	ldr	r3, [pc, #36]	; (1008194 <work_handler+0x44>)
 100816e:	9a00      	ldr	r2, [sp, #0]
 1008170:	f993 1000 	ldrsb.w	r1, [r3]
 1008174:	4291      	cmp	r1, r2
 1008176:	d002      	beq.n	100817e <work_handler+0x2e>
		value = val.val1;
 1008178:	701a      	strb	r2, [r3, #0]
		nrf_802154_temperature_changed();
 100817a:	f00a fe9f 	bl	1012ebc <nrf_802154_temperature_changed>
	k_work_reschedule(&dwork, K_MSEC(CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD));
 100817e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 1008182:	2300      	movs	r3, #0
 1008184:	4804      	ldr	r0, [pc, #16]	; (1008198 <work_handler+0x48>)
 1008186:	f008 fc2b 	bl	10109e0 <k_work_reschedule>
}
 100818a:	b003      	add	sp, #12
 100818c:	bd30      	pop	{r4, r5, pc}
 100818e:	bf00      	nop
 1008190:	01015568 	.word	0x01015568
 1008194:	21000114 	.word	0x21000114
 1008198:	21000ff8 	.word	0x21000ff8

0100819c <nrf_802154_temperature_get>:
}

int8_t nrf_802154_temperature_get(void)
{
	return value;
}
 100819c:	4b01      	ldr	r3, [pc, #4]	; (10081a4 <nrf_802154_temperature_get+0x8>)
 100819e:	f993 0000 	ldrsb.w	r0, [r3]
 10081a2:	4770      	bx	lr
 10081a4:	21000114 	.word	0x21000114

010081a8 <spinel_packet_send_thread_fn>:
	k_sem_give(&send_sem);
	return (nrf_802154_ser_err_t)len;
}

static void spinel_packet_send_thread_fn(void *arg1, void *arg2, void *arg3)
{
 10081a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_sem_take(sem, timeout);
 10081aa:	4e12      	ldr	r6, [pc, #72]	; (10081f4 <spinel_packet_send_thread_fn+0x4c>)
	LOG_DBG("Spinel backend send thread started");
	while (true) {
		k_sem_take(&send_sem, K_FOREVER);
		struct ringbuffer *buf = &ring_buffer[rd_idx];
 10081ac:	4c12      	ldr	r4, [pc, #72]	; (10081f8 <spinel_packet_send_thread_fn+0x50>)
		uint32_t expected_ret = buf->len;
 10081ae:	4d13      	ldr	r5, [pc, #76]	; (10081fc <spinel_packet_send_thread_fn+0x54>)
 10081b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 10081b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 10081b8:	4630      	mov	r0, r6
 10081ba:	f008 fa1f 	bl	10105fc <z_impl_k_sem_take>
 10081be:	f44f 7396 	mov.w	r3, #300	; 0x12c
		struct ringbuffer *buf = &ring_buffer[rd_idx];
 10081c2:	7821      	ldrb	r1, [r4, #0]

		LOG_DBG("Sending %u bytes from send thread", buf->len);
		int ret = ipc_service_send(&ept, buf->data, buf->len);
 10081c4:	480e      	ldr	r0, [pc, #56]	; (1008200 <spinel_packet_send_thread_fn+0x58>)
		uint32_t expected_ret = buf->len;
 10081c6:	4359      	muls	r1, r3
 10081c8:	586f      	ldr	r7, [r5, r1]
		int ret = ipc_service_send(&ept, buf->data, buf->len);
 10081ca:	3104      	adds	r1, #4
 10081cc:	463a      	mov	r2, r7
 10081ce:	4429      	add	r1, r5
 10081d0:	f00a f9a9 	bl	1012526 <ipc_service_send>
	return (i + 1) % RING_BUFFER_LEN;
 10081d4:	7823      	ldrb	r3, [r4, #0]

		rd_idx = get_rb_idx_plus_1(rd_idx);

		if (ret != expected_ret) {
 10081d6:	4287      	cmp	r7, r0
	return (i + 1) % RING_BUFFER_LEN;
 10081d8:	f103 0301 	add.w	r3, r3, #1
 10081dc:	f003 030f 	and.w	r3, r3, #15
 10081e0:	7023      	strb	r3, [r4, #0]
		if (ret != expected_ret) {
 10081e2:	d0e5      	beq.n	10081b0 <spinel_packet_send_thread_fn+0x8>
			nrf_802154_ser_err_data_t err = {
 10081e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				.reason = NRF_802154_SERIALIZATION_ERROR_BACKEND_FAILURE,
			};

			nrf_802154_serialization_error(&err);
 10081e8:	a801      	add	r0, sp, #4
			nrf_802154_ser_err_data_t err = {
 10081ea:	9301      	str	r3, [sp, #4]
			nrf_802154_serialization_error(&err);
 10081ec:	f009 fe07 	bl	1011dfe <nrf_802154_serialization_error>
	while (true) {
 10081f0:	e7de      	b.n	10081b0 <spinel_packet_send_thread_fn+0x8>
 10081f2:	bf00      	nop
 10081f4:	21000250 	.word	0x21000250
 10081f8:	21003ad6 	.word	0x21003ad6
 10081fc:	21001bb8 	.word	0x21001bb8
 1008200:	21002e78 	.word	0x21002e78

01008204 <endpoint_bound>:
	z_impl_k_sem_give(sem);
 1008204:	4801      	ldr	r0, [pc, #4]	; (100820c <endpoint_bound+0x8>)
 1008206:	f008 b9d9 	b.w	10105bc <z_impl_k_sem_give>
 100820a:	bf00      	nop
 100820c:	21000240 	.word	0x21000240

01008210 <nrf_802154_backend_init>:
{
 1008210:	b508      	push	{r3, lr}
	err = ipc_service_open_instance(ipc_instance);
 1008212:	480d      	ldr	r0, [pc, #52]	; (1008248 <nrf_802154_backend_init+0x38>)
 1008214:	f00a f965 	bl	10124e2 <ipc_service_open_instance>
	if (err < 0 && err != -EALREADY) {
 1008218:	2800      	cmp	r0, #0
 100821a:	da04      	bge.n	1008226 <nrf_802154_backend_init+0x16>
 100821c:	3078      	adds	r0, #120	; 0x78
 100821e:	d002      	beq.n	1008226 <nrf_802154_backend_init+0x16>
		return NRF_802154_SERIALIZATION_ERROR_INIT_FAILED;
 1008220:	f06f 0005 	mvn.w	r0, #5
}
 1008224:	bd08      	pop	{r3, pc}
	err = ipc_service_register_endpoint(ipc_instance, &ept, &ept_cfg);
 1008226:	4a09      	ldr	r2, [pc, #36]	; (100824c <nrf_802154_backend_init+0x3c>)
 1008228:	4909      	ldr	r1, [pc, #36]	; (1008250 <nrf_802154_backend_init+0x40>)
 100822a:	4807      	ldr	r0, [pc, #28]	; (1008248 <nrf_802154_backend_init+0x38>)
 100822c:	f00a f967 	bl	10124fe <ipc_service_register_endpoint>
	if (err < 0) {
 1008230:	2800      	cmp	r0, #0
 1008232:	dbf5      	blt.n	1008220 <nrf_802154_backend_init+0x10>
	return z_impl_k_sem_take(sem, timeout);
 1008234:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 1008238:	2300      	movs	r3, #0
 100823a:	4806      	ldr	r0, [pc, #24]	; (1008254 <nrf_802154_backend_init+0x44>)
 100823c:	f008 f9de 	bl	10105fc <z_impl_k_sem_take>
	if (err < 0) {
 1008240:	2800      	cmp	r0, #0
 1008242:	dbed      	blt.n	1008220 <nrf_802154_backend_init+0x10>
	return NRF_802154_SERIALIZATION_ERROR_OK;
 1008244:	2000      	movs	r0, #0
 1008246:	e7ed      	b.n	1008224 <nrf_802154_backend_init+0x14>
 1008248:	01015538 	.word	0x01015538
 100824c:	21000044 	.word	0x21000044
 1008250:	21002e78 	.word	0x21002e78
 1008254:	21000240 	.word	0x21000240

01008258 <nrf_802154_spinel_encoded_packet_send>:
K_THREAD_DEFINE(spinel_packet_send_thread, SEND_THREAD_STACK_SIZE,
		spinel_packet_send_thread_fn, NULL, NULL, NULL, K_PRIO_COOP(0), 0, 0);

nrf_802154_ser_err_t nrf_802154_spinel_encoded_packet_send(const void *p_data,
							   size_t      data_len)
{
 1008258:	b538      	push	{r3, r4, r5, lr}
 100825a:	4605      	mov	r5, r0
 100825c:	460c      	mov	r4, r1
	if (k_is_in_isr()) {
 100825e:	f00c fce6 	bl	1014c2e <k_is_in_isr>
 1008262:	b1c8      	cbz	r0, 1008298 <nrf_802154_spinel_encoded_packet_send+0x40>
	if (get_rb_idx_plus_1(wr_idx) == rd_idx) {
 1008264:	4912      	ldr	r1, [pc, #72]	; (10082b0 <nrf_802154_spinel_encoded_packet_send+0x58>)
 1008266:	4813      	ldr	r0, [pc, #76]	; (10082b4 <nrf_802154_spinel_encoded_packet_send+0x5c>)
 1008268:	780b      	ldrb	r3, [r1, #0]
 100826a:	7800      	ldrb	r0, [r0, #0]
	return (i + 1) % RING_BUFFER_LEN;
 100826c:	1c5a      	adds	r2, r3, #1
 100826e:	f002 020f 	and.w	r2, r2, #15
	if (get_rb_idx_plus_1(wr_idx) == rd_idx) {
 1008272:	4290      	cmp	r0, r2
 1008274:	d018      	beq.n	10082a8 <nrf_802154_spinel_encoded_packet_send+0x50>
	wr_idx = get_rb_idx_plus_1(wr_idx);
 1008276:	700a      	strb	r2, [r1, #0]
	buf->len = len;
 1008278:	f44f 7296 	mov.w	r2, #300	; 0x12c
 100827c:	4353      	muls	r3, r2
 100827e:	480e      	ldr	r0, [pc, #56]	; (10082b8 <nrf_802154_spinel_encoded_packet_send+0x60>)
	memcpy(buf->data, data, len);
 1008280:	4622      	mov	r2, r4
	buf->len = len;
 1008282:	50c4      	str	r4, [r0, r3]
	memcpy(buf->data, data, len);
 1008284:	3304      	adds	r3, #4
 1008286:	4629      	mov	r1, r5
 1008288:	4418      	add	r0, r3
 100828a:	f00a fbb7 	bl	10129fc <memcpy>
	z_impl_k_sem_give(sem);
 100828e:	480b      	ldr	r0, [pc, #44]	; (10082bc <nrf_802154_spinel_encoded_packet_send+0x64>)
 1008290:	f008 f994 	bl	10105bc <z_impl_k_sem_give>
	return (nrf_802154_ser_err_t)len;
 1008294:	4620      	mov	r0, r4
	LOG_DBG("Sending %u bytes directly", data_len);
	int ret = ipc_service_send(&ept, p_data, data_len);

	return ((ret < 0) ? NRF_802154_SERIALIZATION_ERROR_BACKEND_FAILURE
			  : (nrf_802154_ser_err_t) ret);
}
 1008296:	bd38      	pop	{r3, r4, r5, pc}
	int ret = ipc_service_send(&ept, p_data, data_len);
 1008298:	4622      	mov	r2, r4
 100829a:	4629      	mov	r1, r5
 100829c:	4808      	ldr	r0, [pc, #32]	; (10082c0 <nrf_802154_spinel_encoded_packet_send+0x68>)
 100829e:	f00a f942 	bl	1012526 <ipc_service_send>
			  : (nrf_802154_ser_err_t) ret);
 10082a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 10082a6:	e7f6      	b.n	1008296 <nrf_802154_spinel_encoded_packet_send+0x3e>
		return NRF_802154_SERIALIZATION_ERROR_BACKEND_FAILURE;
 10082a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 10082ac:	e7f3      	b.n	1008296 <nrf_802154_spinel_encoded_packet_send+0x3e>
 10082ae:	bf00      	nop
 10082b0:	21003ad5 	.word	0x21003ad5
 10082b4:	21003ad6 	.word	0x21003ad6
 10082b8:	21001bb8 	.word	0x21001bb8
 10082bc:	21000250 	.word	0x21000250
 10082c0:	21002e78 	.word	0x21002e78

010082c4 <nrf_802154_spinel_response_notifier_init>:

static spinel_prop_key_t awaited_property = AWAITED_PROPERTY_NONE;

void nrf_802154_spinel_response_notifier_init(void)
{
	notify_buff.free = true;
 10082c4:	2201      	movs	r2, #1
 10082c6:	4b03      	ldr	r3, [pc, #12]	; (10082d4 <nrf_802154_spinel_response_notifier_init+0x10>)
 10082c8:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
	return z_impl_k_mutex_init(mutex);
 10082cc:	4802      	ldr	r0, [pc, #8]	; (10082d8 <nrf_802154_spinel_response_notifier_init+0x14>)
 10082ce:	f00c bccd 	b.w	1014c6c <z_impl_k_mutex_init>
 10082d2:	bf00      	nop
 10082d4:	21002e80 	.word	0x21002e80
 10082d8:	21003398 	.word	0x21003398

010082dc <nrf_802154_hp_timer_init>:
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
 10082dc:	4b08      	ldr	r3, [pc, #32]	; (1008300 <nrf_802154_hp_timer_init+0x24>)
 10082de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 10082e2:	f042 0203 	orr.w	r2, r2, #3
 10082e6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_prescaler_set(NRF_TIMER_Type * p_reg, uint32_t prescaler_factor)
{
    NRFX_ASSERT(prescaler_factor <= NRF_TIMER_PRESCALER_MAX);
    p_reg->PRESCALER = prescaler_factor;
 10082ea:	2204      	movs	r2, #4
 10082ec:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
 10082f0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 10082f4:	f022 0203 	bic.w	r2, r2, #3
 10082f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
void nrf_802154_hp_timer_init(void)
{
	nrf_timer_bit_width_set(TIMER, NRF_TIMER_BIT_WIDTH_32);
	nrf_timer_prescaler_set(TIMER, NRF_TIMER_FREQ_1MHz);
	nrf_timer_mode_set(TIMER, NRF_TIMER_MODE_TIMER);
}
 10082fc:	4770      	bx	lr
 10082fe:	bf00      	nop
 1008300:	41018000 	.word	0x41018000

01008304 <nrf_802154_hp_timer_start>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008304:	2201      	movs	r2, #1
 1008306:	4b01      	ldr	r3, [pc, #4]	; (100830c <nrf_802154_hp_timer_start+0x8>)
 1008308:	601a      	str	r2, [r3, #0]
}

void nrf_802154_hp_timer_start(void)
{
	nrf_timer_task_trigger(TIMER, NRF_TIMER_TASK_START);
}
 100830a:	4770      	bx	lr
 100830c:	41018000 	.word	0x41018000

01008310 <nrf_802154_hp_timer_stop>:

void nrf_802154_hp_timer_stop(void)
 1008310:	2201      	movs	r2, #1
 1008312:	4b01      	ldr	r3, [pc, #4]	; (1008318 <nrf_802154_hp_timer_stop+0x8>)
 1008314:	611a      	str	r2, [r3, #16]
 1008316:	4770      	bx	lr
 1008318:	41018000 	.word	0x41018000

0100831c <nrf_802154_hp_timer_sync_task_get>:
}

uint32_t nrf_802154_hp_timer_sync_task_get(void)
{
	return nrf_timer_task_address_get(TIMER, TIMER_CC_SYNC_TASK);
}
 100831c:	4800      	ldr	r0, [pc, #0]	; (1008320 <nrf_802154_hp_timer_sync_task_get+0x4>)
 100831e:	4770      	bx	lr
 1008320:	41018048 	.word	0x41018048

01008324 <nrf_802154_hp_timer_sync_prepare>:
 1008324:	2301      	movs	r3, #1
 1008326:	4a05      	ldr	r2, [pc, #20]	; (100833c <nrf_802154_hp_timer_sync_prepare+0x18>)

void nrf_802154_hp_timer_sync_prepare(void)
{
	uint32_t past_time = timer_time_get() - 1;

	m_unexpected_sync = past_time;
 1008328:	4905      	ldr	r1, [pc, #20]	; (1008340 <nrf_802154_hp_timer_sync_prepare+0x1c>)
 100832a:	6453      	str	r3, [r2, #68]	; 0x44
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
 100832c:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
	uint32_t past_time = timer_time_get() - 1;
 1008330:	3b01      	subs	r3, #1
	m_unexpected_sync = past_time;
 1008332:	600b      	str	r3, [r1, #0]
    p_reg->CC[cc_channel] = cc_value;
 1008334:	f8c2 3548 	str.w	r3, [r2, #1352]	; 0x548
	nrf_timer_cc_set(TIMER, TIMER_CC_SYNC, past_time);
}
 1008338:	4770      	bx	lr
 100833a:	bf00      	nop
 100833c:	41018000 	.word	0x41018000
 1008340:	210033ac 	.word	0x210033ac

01008344 <nrf_802154_hp_timer_sync_time_get>:
    return (uint32_t)p_reg->CC[cc_channel];
 1008344:	4b05      	ldr	r3, [pc, #20]	; (100835c <nrf_802154_hp_timer_sync_time_get+0x18>)
	bool result = false;
	uint32_t sync_time = nrf_timer_cc_get(TIMER, TIMER_CC_SYNC);

	assert(p_timestamp != NULL);

	if (sync_time != m_unexpected_sync) {
 1008346:	4a06      	ldr	r2, [pc, #24]	; (1008360 <nrf_802154_hp_timer_sync_time_get+0x1c>)
 1008348:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
 100834c:	6812      	ldr	r2, [r2, #0]
 100834e:	429a      	cmp	r2, r3
		*p_timestamp = sync_time;
 1008350:	bf1a      	itte	ne
 1008352:	6003      	strne	r3, [r0, #0]
		result = true;
 1008354:	2001      	movne	r0, #1
	bool result = false;
 1008356:	2000      	moveq	r0, #0
	}

	return result;
}
 1008358:	4770      	bx	lr
 100835a:	bf00      	nop
 100835c:	41018000 	.word	0x41018000
 1008360:	210033ac 	.word	0x210033ac

01008364 <nrf_802154_hp_timer_timestamp_task_get>:

uint32_t nrf_802154_hp_timer_timestamp_task_get(void)
{
	return nrf_timer_task_address_get(TIMER, TIMER_CC_EVT_TASK);
}
 1008364:	4800      	ldr	r0, [pc, #0]	; (1008368 <nrf_802154_hp_timer_timestamp_task_get+0x4>)
 1008366:	4770      	bx	lr
 1008368:	4101804c 	.word	0x4101804c

0100836c <nrf_802154_hp_timer_timestamp_get>:
 100836c:	4b01      	ldr	r3, [pc, #4]	; (1008374 <nrf_802154_hp_timer_timestamp_get+0x8>)
 100836e:	f8d3 054c 	ldr.w	r0, [r3, #1356]	; 0x54c

uint32_t nrf_802154_hp_timer_timestamp_get(void)
{
	return nrf_timer_cc_get(TIMER, TIMER_CC_EVT);
}
 1008372:	4770      	bx	lr
 1008374:	41018000 	.word	0x41018000

01008378 <nrf_802154_hp_timer_current_time_get>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008378:	2201      	movs	r2, #1
 100837a:	4b02      	ldr	r3, [pc, #8]	; (1008384 <nrf_802154_hp_timer_current_time_get+0xc>)
 100837c:	645a      	str	r2, [r3, #68]	; 0x44
    return (uint32_t)p_reg->CC[cc_channel];
 100837e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544

uint32_t nrf_802154_hp_timer_current_time_get(void)
{
	return timer_time_get();
}
 1008382:	4770      	bx	lr
 1008384:	41018000 	.word	0x41018000

01008388 <sync_timer_handler>:

/**
 * @brief RTC IRQ handler for synchronization timer channel.
 */
void sync_timer_handler(int32_t id, uint64_t expire_time, void *user_data)
{
 1008388:	4619      	mov	r1, r3
 100838a:	4610      	mov	r0, r2
	/**
	 * Expire time might have been different than the desired target
	 * time. Update it so that a more accurate value can be returned
	 * by nrf_802154_lp_timer_sync_time_get.
	 */
	m_sync_timer.target_time = expire_time;
 100838c:	4b02      	ldr	r3, [pc, #8]	; (1008398 <sync_timer_handler+0x10>)
 100838e:	e9c3 0102 	strd	r0, r1, [r3, #8]

	nrf_802154_sl_timestamper_synchronized();
 1008392:	f009 bc2f 	b.w	1011bf4 <nrf_802154_sl_timestamper_synchronized>
 1008396:	bf00      	nop
 1008398:	210010a8 	.word	0x210010a8

0100839c <nrf_802154_platform_sl_lp_timer_init>:
	return *(volatile uint32_t *)event_address;
}

void nrf_802154_platform_sl_lp_timer_init(void)
{
	m_in_critical_section = false;
 100839c:	2200      	movs	r2, #0
{
 100839e:	b538      	push	{r3, r4, r5, lr}
	m_in_critical_section = false;
 10083a0:	4b0b      	ldr	r3, [pc, #44]	; (10083d0 <nrf_802154_platform_sl_lp_timer_init+0x34>)
	m_hw_task.state = HW_TASK_STATE_IDLE;
	m_hw_task.chan = RTC_CHAN_INVALID;
	m_hw_task.ppi = NRF_802154_SL_HW_TASK_PPI_INVALID;
	m_timer.handler = timer_handler;
 10083a2:	4d0c      	ldr	r5, [pc, #48]	; (10083d4 <nrf_802154_platform_sl_lp_timer_init+0x38>)
	m_in_critical_section = false;
 10083a4:	701a      	strb	r2, [r3, #0]
	m_hw_task.state = HW_TASK_STATE_IDLE;
 10083a6:	4b0c      	ldr	r3, [pc, #48]	; (10083d8 <nrf_802154_platform_sl_lp_timer_init+0x3c>)
	m_sync_timer.handler = sync_timer_handler;
 10083a8:	4c0c      	ldr	r4, [pc, #48]	; (10083dc <nrf_802154_platform_sl_lp_timer_init+0x40>)
	m_hw_task.state = HW_TASK_STATE_IDLE;
 10083aa:	601a      	str	r2, [r3, #0]
	m_hw_task.chan = RTC_CHAN_INVALID;
 10083ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	m_hw_task.ppi = NRF_802154_SL_HW_TASK_PPI_INVALID;
 10083b0:	e9c3 2201 	strd	r2, r2, [r3, #4]
	m_timer.handler = timer_handler;
 10083b4:	4b0a      	ldr	r3, [pc, #40]	; (10083e0 <nrf_802154_platform_sl_lp_timer_init+0x44>)
 10083b6:	602b      	str	r3, [r5, #0]
	m_sync_timer.handler = sync_timer_handler;
 10083b8:	4b0a      	ldr	r3, [pc, #40]	; (10083e4 <nrf_802154_platform_sl_lp_timer_init+0x48>)
 10083ba:	6023      	str	r3, [r4, #0]

	m_timer.chan = z_nrf_rtc_timer_chan_alloc();
 10083bc:	f7ff fd00 	bl	1007dc0 <z_nrf_rtc_timer_chan_alloc>
	if (m_timer.chan < 0) {
 10083c0:	2800      	cmp	r0, #0
	m_timer.chan = z_nrf_rtc_timer_chan_alloc();
 10083c2:	6128      	str	r0, [r5, #16]
	if (m_timer.chan < 0) {
 10083c4:	db02      	blt.n	10083cc <nrf_802154_platform_sl_lp_timer_init+0x30>
		assert(false);
		return;
	}

	m_sync_timer.chan = z_nrf_rtc_timer_chan_alloc();
 10083c6:	f7ff fcfb 	bl	1007dc0 <z_nrf_rtc_timer_chan_alloc>
 10083ca:	6120      	str	r0, [r4, #16]
	if (m_sync_timer.chan < 0) {
		assert(false);
		return;
	}
}
 10083cc:	bd38      	pop	{r3, r4, r5, pc}
 10083ce:	bf00      	nop
 10083d0:	21003ad7 	.word	0x21003ad7
 10083d4:	210010c0 	.word	0x210010c0
 10083d8:	210033b0 	.word	0x210033b0
 10083dc:	210010a8 	.word	0x210010a8
 10083e0:	01012e1b 	.word	0x01012e1b
 10083e4:	01008389 	.word	0x01008389

010083e8 <nrf_802154_platform_sl_lptimer_schedule_at>:
	 */
	return NRF_802154_SL_RTC_TICKS_TO_US(lpticks);
}

void nrf_802154_platform_sl_lptimer_schedule_at(uint64_t fire_lpticks)
{
 10083e8:	4602      	mov	r2, r0
 10083ea:	460b      	mov	r3, r1
	/* This function is not required to be reentrant, hence no critical section. */
	timer_start_at(&m_timer, fire_lpticks);
 10083ec:	4801      	ldr	r0, [pc, #4]	; (10083f4 <nrf_802154_platform_sl_lptimer_schedule_at+0xc>)
 10083ee:	f00a bd1b 	b.w	1012e28 <timer_start_at>
 10083f2:	bf00      	nop
 10083f4:	210010c0 	.word	0x210010c0

010083f8 <nrf_802154_platform_sl_lptimer_disable>:
}

void nrf_802154_platform_sl_lptimer_disable(void)
{
	z_nrf_rtc_timer_abort(m_timer.chan);
 10083f8:	4b01      	ldr	r3, [pc, #4]	; (1008400 <nrf_802154_platform_sl_lptimer_disable+0x8>)
 10083fa:	6918      	ldr	r0, [r3, #16]
 10083fc:	f7ff bb3a 	b.w	1007a74 <z_nrf_rtc_timer_abort>
 1008400:	210010c0 	.word	0x210010c0

01008404 <nrf_802154_platform_sl_lptimer_critical_section_enter>:
}

void nrf_802154_platform_sl_lptimer_critical_section_enter(void)
{
 1008404:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1008406:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 100840a:	b672      	cpsid	i
	nrf_802154_sl_mcu_critical_state_t state;

	nrf_802154_sl_mcu_critical_enter(state);

	if (!m_in_critical_section) {
 100840c:	4c08      	ldr	r4, [pc, #32]	; (1008430 <nrf_802154_platform_sl_lptimer_critical_section_enter+0x2c>)
 100840e:	7823      	ldrb	r3, [r4, #0]
 1008410:	b95b      	cbnz	r3, 100842a <nrf_802154_platform_sl_lptimer_critical_section_enter+0x26>
		m_timer.int_lock_key = z_nrf_rtc_timer_compare_int_lock(m_timer.chan);
 1008412:	4d08      	ldr	r5, [pc, #32]	; (1008434 <nrf_802154_platform_sl_lptimer_critical_section_enter+0x30>)
 1008414:	6928      	ldr	r0, [r5, #16]
 1008416:	f00a fbef 	bl	1012bf8 <z_nrf_rtc_timer_compare_int_lock>
 100841a:	6168      	str	r0, [r5, #20]
		m_sync_timer.int_lock_key = z_nrf_rtc_timer_compare_int_lock(m_sync_timer.chan);
 100841c:	4d06      	ldr	r5, [pc, #24]	; (1008438 <nrf_802154_platform_sl_lptimer_critical_section_enter+0x34>)
 100841e:	6928      	ldr	r0, [r5, #16]
 1008420:	f00a fbea 	bl	1012bf8 <z_nrf_rtc_timer_compare_int_lock>
		m_in_critical_section = true;
 1008424:	2301      	movs	r3, #1
		m_sync_timer.int_lock_key = z_nrf_rtc_timer_compare_int_lock(m_sync_timer.chan);
 1008426:	6168      	str	r0, [r5, #20]
		m_in_critical_section = true;
 1008428:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100842a:	f386 8810 	msr	PRIMASK, r6
	}

	nrf_802154_sl_mcu_critical_exit(state);
}
 100842e:	bd70      	pop	{r4, r5, r6, pc}
 1008430:	21003ad7 	.word	0x21003ad7
 1008434:	210010c0 	.word	0x210010c0
 1008438:	210010a8 	.word	0x210010a8

0100843c <nrf_802154_platform_sl_lptimer_critical_section_exit>:

void nrf_802154_platform_sl_lptimer_critical_section_exit(void)
{
 100843c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100843e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1008442:	b672      	cpsid	i
	nrf_802154_sl_mcu_critical_state_t state;

	nrf_802154_sl_mcu_critical_enter(state);

	m_in_critical_section = false;
 1008444:	2200      	movs	r2, #0
 1008446:	4b0a      	ldr	r3, [pc, #40]	; (1008470 <nrf_802154_platform_sl_lptimer_critical_section_exit+0x34>)
 1008448:	701a      	strb	r2, [r3, #0]

	z_nrf_rtc_timer_compare_int_unlock(m_timer.chan, m_timer.int_lock_key);
 100844a:	4b0a      	ldr	r3, [pc, #40]	; (1008474 <nrf_802154_platform_sl_lptimer_critical_section_exit+0x38>)
 100844c:	6959      	ldr	r1, [r3, #20]
 100844e:	6918      	ldr	r0, [r3, #16]
 1008450:	1a89      	subs	r1, r1, r2
 1008452:	bf18      	it	ne
 1008454:	2101      	movne	r1, #1
 1008456:	f00a fbd1 	bl	1012bfc <z_nrf_rtc_timer_compare_int_unlock>
	z_nrf_rtc_timer_compare_int_unlock(m_sync_timer.chan, m_sync_timer.int_lock_key);
 100845a:	4b07      	ldr	r3, [pc, #28]	; (1008478 <nrf_802154_platform_sl_lptimer_critical_section_exit+0x3c>)
 100845c:	6959      	ldr	r1, [r3, #20]
 100845e:	6918      	ldr	r0, [r3, #16]
 1008460:	3900      	subs	r1, #0
 1008462:	bf18      	it	ne
 1008464:	2101      	movne	r1, #1
 1008466:	f00a fbc9 	bl	1012bfc <z_nrf_rtc_timer_compare_int_unlock>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100846a:	f384 8810 	msr	PRIMASK, r4

	nrf_802154_sl_mcu_critical_exit(state);
}
 100846e:	bd10      	pop	{r4, pc}
 1008470:	21003ad7 	.word	0x21003ad7
 1008474:	210010c0 	.word	0x210010c0
 1008478:	210010a8 	.word	0x210010a8

0100847c <nrf_802154_platform_sl_lptimer_sync_schedule_now>:
{
	return NRF_802154_SL_US_PER_TICK;
}

void nrf_802154_platform_sl_lptimer_sync_schedule_now(void)
{
 100847c:	b510      	push	{r4, lr}
	uint64_t now = z_nrf_rtc_timer_read();
 100847e:	f7ff fb25 	bl	1007acc <z_nrf_rtc_timer_read>
	/**
	 * Despite this function's name, synchronization is not expected to be
	 * scheduled for the current tick. Add a safe 3-tick margin
	 */
	timer_start_at(&m_sync_timer, now + 3);
}
 1008482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	timer_start_at(&m_sync_timer, now + 3);
 1008486:	1cc2      	adds	r2, r0, #3
 1008488:	f141 0300 	adc.w	r3, r1, #0
 100848c:	4801      	ldr	r0, [pc, #4]	; (1008494 <nrf_802154_platform_sl_lptimer_sync_schedule_now+0x18>)
 100848e:	f00a bccb 	b.w	1012e28 <timer_start_at>
 1008492:	bf00      	nop
 1008494:	210010a8 	.word	0x210010a8

01008498 <nrf_802154_platform_sl_lptimer_sync_schedule_at>:

void nrf_802154_platform_sl_lptimer_sync_schedule_at(uint64_t fire_lpticks)
{
 1008498:	4602      	mov	r2, r0
 100849a:	460b      	mov	r3, r1
	timer_start_at(&m_sync_timer, fire_lpticks);
 100849c:	4801      	ldr	r0, [pc, #4]	; (10084a4 <nrf_802154_platform_sl_lptimer_sync_schedule_at+0xc>)
 100849e:	f00a bcc3 	b.w	1012e28 <timer_start_at>
 10084a2:	bf00      	nop
 10084a4:	210010a8 	.word	0x210010a8

010084a8 <nrf_802154_platform_sl_lptimer_sync_abort>:
}

void nrf_802154_platform_sl_lptimer_sync_abort(void)
{
	z_nrf_rtc_timer_abort(m_sync_timer.chan);
 10084a8:	4b01      	ldr	r3, [pc, #4]	; (10084b0 <nrf_802154_platform_sl_lptimer_sync_abort+0x8>)
 10084aa:	6918      	ldr	r0, [r3, #16]
 10084ac:	f7ff bae2 	b.w	1007a74 <z_nrf_rtc_timer_abort>
 10084b0:	210010a8 	.word	0x210010a8

010084b4 <nrf_802154_platform_sl_lptimer_sync_event_get>:
}

uint32_t nrf_802154_platform_sl_lptimer_sync_event_get(void)
{
	return z_nrf_rtc_timer_compare_evt_address_get(m_sync_timer.chan);
 10084b4:	4b01      	ldr	r3, [pc, #4]	; (10084bc <nrf_802154_platform_sl_lptimer_sync_event_get+0x8>)
 10084b6:	6918      	ldr	r0, [r3, #16]
 10084b8:	f7ff bad4 	b.w	1007a64 <z_nrf_rtc_timer_compare_evt_address_get>
 10084bc:	210010a8 	.word	0x210010a8

010084c0 <nrf_802154_platform_sl_lptimer_sync_lpticks_get>:
}

uint64_t nrf_802154_platform_sl_lptimer_sync_lpticks_get(void)
{
	return m_sync_timer.target_time;
}
 10084c0:	4b01      	ldr	r3, [pc, #4]	; (10084c8 <nrf_802154_platform_sl_lptimer_sync_lpticks_get+0x8>)
 10084c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 10084c6:	4770      	bx	lr
 10084c8:	210010a8 	.word	0x210010a8

010084cc <nrf_802154_init>:
{
    return end_timestamp - (psdu_length * PHY_SYMBOLS_PER_OCTET * PHY_US_PER_SYMBOL);
}

void nrf_802154_init(void)
{
 10084cc:	b508      	push	{r3, lr}
    {
        .enter = nrf_802154_critical_section_enter,
        .exit  = nrf_802154_critical_section_exit
    };

    nrf_802154_ack_data_init();
 10084ce:	f004 fbc5 	bl	100cc5c <nrf_802154_ack_data_init>
    nrf_802154_core_init();
 10084d2:	f001 fb11 	bl	1009af8 <nrf_802154_core_init>
    nrf_802154_clock_init();
 10084d6:	f00a fc76 	bl	1012dc6 <nrf_802154_clock_init>
    nrf_802154_critical_section_init();
 10084da:	f001 fd57 	bl	1009f8c <nrf_802154_critical_section_init>
    nrf_802154_sl_crit_sect_init(&crit_sect_int);
 10084de:	4811      	ldr	r0, [pc, #68]	; (1008524 <nrf_802154_init+0x58>)
 10084e0:	f008 ff7a 	bl	10113d8 <nrf_802154_sl_crit_sect_init>
    nrf_802154_debug_init();
 10084e4:	f00a fe77 	bl	10131d6 <nrf_802154_debug_init>
    nrf_802154_notification_init();
 10084e8:	f005 f8c2 	bl	100d670 <nrf_802154_notification_init>
    nrf_802154_pib_init();
 10084ec:	f001 fdcc 	bl	100a088 <nrf_802154_pib_init>
    nrf_802154_security_pib_init();
 10084f0:	f004 f970 	bl	100c7d4 <nrf_802154_security_pib_init>
    nrf_802154_sl_timer_module_init();
 10084f4:	f009 f9e6 	bl	10118c4 <nrf_802154_sl_timer_module_init>
    nrf_802154_random_init();
 10084f8:	f7ff fd92 	bl	1008020 <nrf_802154_random_init>
    nrf_802154_request_init();
 10084fc:	f005 f94e 	bl	100d79c <nrf_802154_request_init>
    nrf_802154_rsch_crit_sect_init();
 1008500:	f009 f97e 	bl	1011800 <nrf_802154_rsch_crit_sect_init>
    nrf_802154_rsch_init();
 1008504:	f008 fff4 	bl	10114f0 <nrf_802154_rsch_init>
    nrf_802154_rx_buffer_init();
 1008508:	f001 fefe 	bl	100a308 <nrf_802154_rx_buffer_init>
    nrf_802154_temperature_init();
 100850c:	f00a fc6c 	bl	1012de8 <nrf_802154_temperature_init>
    nrf_802154_timer_coord_init();
 1008510:	f009 fa9e 	bl	1011a50 <nrf_802154_timer_coord_init>
#if NRF_802154_ACK_TIMEOUT_ENABLED
    nrf_802154_ack_timeout_init();
 1008514:	f004 fafc 	bl	100cb10 <nrf_802154_ack_timeout_init>
#endif
#if NRF_802154_DELAYED_TRX_ENABLED
    nrf_802154_delayed_trx_init();
 1008518:	f003 fb52 	bl	100bbc0 <nrf_802154_delayed_trx_init>
#endif
#if NRF_802154_IFS_ENABLED
    nrf_802154_ifs_init();
#endif
}
 100851c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_ifs_init();
 1008520:	f004 b838 	b.w	100c594 <nrf_802154_ifs_init>
 1008524:	01015918 	.word	0x01015918

01008528 <nrf_802154_transmit_raw>:
}

#if NRF_802154_USE_RAW_API
bool nrf_802154_transmit_raw(uint8_t                              * p_data,
                             const nrf_802154_transmit_metadata_t * p_metadata)
{
 1008528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
            .frame_props = NRF_802154_TRANSMITTED_FRAME_PROPS_DEFAULT_INIT,
            .cca         = true,
            .tx_power    = {.use_metadata_value = false}
        };

        p_metadata = &metadata_default;
 100852a:	4b15      	ldr	r3, [pc, #84]	; (1008580 <nrf_802154_transmit_raw+0x58>)
    }

    nrf_802154_transmit_params_t params =
 100852c:	2600      	movs	r6, #0
        p_metadata = &metadata_default;
 100852e:	2900      	cmp	r1, #0
 1008530:	bf14      	ite	ne
 1008532:	460c      	movne	r4, r1
 1008534:	461c      	moveq	r4, r3
    nrf_802154_transmit_params_t params =
 1008536:	8823      	ldrh	r3, [r4, #0]
 1008538:	f8cd 600a 	str.w	r6, [sp, #10]
 100853c:	f8ad 3008 	strh.w	r3, [sp, #8]
 1008540:	78a3      	ldrb	r3, [r4, #2]
{
 1008542:	4605      	mov	r5, r0
    nrf_802154_transmit_params_t params =
 1008544:	f88d 300d 	strb.w	r3, [sp, #13]
 1008548:	f88d 600e 	strb.w	r6, [sp, #14]
        .tx_power    = {0},
        .cca         = p_metadata->cca,
        .immediate   = false
    };

    (void)nrf_802154_tx_power_convert_metadata_to_tx_power_split(nrf_802154_pib_channel_get(),
 100854c:	f001 fdee 	bl	100a12c <nrf_802154_pib_channel_get>
 1008550:	78e3      	ldrb	r3, [r4, #3]
 1008552:	7921      	ldrb	r1, [r4, #4]
 1008554:	f10d 020a 	add.w	r2, sp, #10
 1008558:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 100855c:	f00a ffd1 	bl	1013502 <nrf_802154_tx_power_convert_metadata_to_tx_power_split>
                                                                 p_metadata->tx_power,
                                                                 &params.tx_power);

    result = are_frame_properties_valid(&params.frame_props);
 1008560:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return p_props->dynamic_data_is_set || !(p_props->is_secured);
 1008564:	f89d 3008 	ldrb.w	r3, [sp, #8]
 1008568:	b900      	cbnz	r0, 100856c <nrf_802154_transmit_raw+0x44>
 100856a:	b933      	cbnz	r3, 100857a <nrf_802154_transmit_raw+0x52>
    if (result)
    {
        result = nrf_802154_request_transmit(NRF_802154_TERM_NONE,
 100856c:	2100      	movs	r1, #0
 100856e:	462a      	mov	r2, r5
 1008570:	4608      	mov	r0, r1
 1008572:	9600      	str	r6, [sp, #0]
 1008574:	ab02      	add	r3, sp, #8
 1008576:	f00b f98d 	bl	1013894 <nrf_802154_request_transmit>
                                             NULL);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return result;
}
 100857a:	b004      	add	sp, #16
 100857c:	bd70      	pop	{r4, r5, r6, pc}
 100857e:	bf00      	nop
 1008580:	01015bd8 	.word	0x01015bd8

01008584 <nrf_802154_modulated_carrier>:
    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return result;
}

bool nrf_802154_modulated_carrier(const uint8_t * p_data)
{
 1008584:	b510      	push	{r4, lr}
    memcpy(m_tx_buffer, p_data, RAW_PAYLOAD_OFFSET + length);
 1008586:	4c06      	ldr	r4, [pc, #24]	; (10085a0 <nrf_802154_modulated_carrier+0x1c>)
 1008588:	7802      	ldrb	r2, [r0, #0]
{
 100858a:	4601      	mov	r1, r0
    memcpy(m_tx_buffer, p_data, RAW_PAYLOAD_OFFSET + length);
 100858c:	3201      	adds	r2, #1
 100858e:	4620      	mov	r0, r4
 1008590:	f00a fa34 	bl	10129fc <memcpy>

    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    tx_buffer_fill_for_modulated_carrier(p_data);

    result = nrf_802154_request_modulated_carrier(NRF_802154_TERM_NONE, m_tx_buffer);
 1008594:	4621      	mov	r1, r4

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return result;
}
 1008596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    result = nrf_802154_request_modulated_carrier(NRF_802154_TERM_NONE, m_tx_buffer);
 100859a:	2000      	movs	r0, #0
 100859c:	f00b b9fe 	b.w	101399c <nrf_802154_request_modulated_carrier>
 10085a0:	21003ad8 	.word	0x21003ad8

010085a4 <nrf_802154_transmit_csma_ca_raw>:
#if NRF_802154_CSMA_CA_ENABLED
#if NRF_802154_USE_RAW_API

bool nrf_802154_transmit_csma_ca_raw(uint8_t                                      * p_data,
                                     const nrf_802154_transmit_csma_ca_metadata_t * p_metadata)
{
 10085a4:	b508      	push	{r3, lr}
        {
            .frame_props = NRF_802154_TRANSMITTED_FRAME_PROPS_DEFAULT_INIT,
            .tx_power    = {.use_metadata_value = false}
        };

        p_metadata = &metadata_default;
 10085a6:	4b07      	ldr	r3, [pc, #28]	; (10085c4 <nrf_802154_transmit_csma_ca_raw+0x20>)
 10085a8:	2900      	cmp	r1, #0
 10085aa:	bf14      	ite	ne
 10085ac:	460a      	movne	r2, r1
 10085ae:	461a      	moveq	r2, r3
    }

    result = are_frame_properties_valid(&p_metadata->frame_props);
 10085b0:	7853      	ldrb	r3, [r2, #1]
    return p_props->dynamic_data_is_set || !(p_props->is_secured);
 10085b2:	7811      	ldrb	r1, [r2, #0]
 10085b4:	b903      	cbnz	r3, 10085b8 <nrf_802154_transmit_csma_ca_raw+0x14>
 10085b6:	b919      	cbnz	r1, 10085c0 <nrf_802154_transmit_csma_ca_raw+0x1c>
    if (result)
    {
        nrf_802154_request_csma_ca_start(p_data, p_metadata);
 10085b8:	4611      	mov	r1, r2
 10085ba:	f00b fae7 	bl	1013b8c <nrf_802154_request_csma_ca_start>
    return p_props->dynamic_data_is_set || !(p_props->is_secured);
 10085be:	2301      	movs	r3, #1
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return result;
}
 10085c0:	4618      	mov	r0, r3
 10085c2:	bd08      	pop	{r3, pc}
 10085c4:	01015bd4 	.word	0x01015bd4

010085c8 <nrf_802154_received_raw>:
    (void)p_data;
}

#if NRF_802154_USE_RAW_API
__WEAK void nrf_802154_received_raw(uint8_t * p_data, int8_t power, uint8_t lqi)
{
 10085c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 10085ca:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 10085ce:	b672      	cpsid	i
    uint64_t timestamp;

    nrf_802154_stat_timestamp_read(&timestamp, last_rx_end_timestamp);
 10085d0:	4c05      	ldr	r4, [pc, #20]	; (10085e8 <nrf_802154_received_raw+0x20>)
 10085d2:	e9d4 4512 	ldrd	r4, r5, [r4, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 10085d6:	f383 8810 	msr	PRIMASK, r3

    nrf_802154_received_timestamp_raw(p_data,
 10085da:	e9cd 4500 	strd	r4, r5, [sp]
 10085de:	f005 fe4f 	bl	100e280 <nrf_802154_received_timestamp_raw>
                                      power,
                                      lqi,
                                      timestamp);
}
 10085e2:	b003      	add	sp, #12
 10085e4:	bd30      	pop	{r4, r5, pc}
 10085e6:	bf00      	nop
 10085e8:	21001150 	.word	0x21001150

010085ec <process_ecb_auth_iteration>:

/**
 * @brief Block of Authorization Transformation iteration
 */
static inline void process_ecb_auth_iteration(void)
{
 10085ec:	b510      	push	{r4, lr}
    m_state.iteration++;
 10085ee:	4a0a      	ldr	r2, [pc, #40]	; (1008618 <process_ecb_auth_iteration+0x2c>)
    two_blocks_xor(mp_ecb_ciphertext, m_b, NRF_802154_AES_CCM_BLOCK_SIZE);
 10085f0:	490a      	ldr	r1, [pc, #40]	; (100861c <process_ecb_auth_iteration+0x30>)
    m_state.iteration++;
 10085f2:	7853      	ldrb	r3, [r2, #1]
 10085f4:	3301      	adds	r3, #1
 10085f6:	7053      	strb	r3, [r2, #1]
    two_blocks_xor(mp_ecb_ciphertext, m_b, NRF_802154_AES_CCM_BLOCK_SIZE);
 10085f8:	4b09      	ldr	r3, [pc, #36]	; (1008620 <process_ecb_auth_iteration+0x34>)
 10085fa:	2210      	movs	r2, #16
 10085fc:	681c      	ldr	r4, [r3, #0]
 10085fe:	4620      	mov	r0, r4
 1008600:	f00a fd0e 	bl	1013020 <two_blocks_xor>
    memcpy(mp_ecb_cleartext, mp_ecb_ciphertext, NRF_802154_AES_CCM_BLOCK_SIZE);
 1008604:	4b07      	ldr	r3, [pc, #28]	; (1008624 <process_ecb_auth_iteration+0x38>)
 1008606:	2210      	movs	r2, #16
 1008608:	6818      	ldr	r0, [r3, #0]
 100860a:	4621      	mov	r1, r4
 100860c:	f00a f9f6 	bl	10129fc <memcpy>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008610:	2201      	movs	r2, #1
 1008612:	4b05      	ldr	r3, [pc, #20]	; (1008628 <process_ecb_auth_iteration+0x3c>)
 1008614:	601a      	str	r2, [r3, #0]
    nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
}
 1008616:	bd10      	pop	{r4, pc}
 1008618:	21003b99 	.word	0x21003b99
 100861c:	21003bbb 	.word	0x21003bbb
 1008620:	210033bc 	.word	0x210033bc
 1008624:	210033c0 	.word	0x210033c0
 1008628:	4100d000 	.word	0x4100d000

0100862c <plain_text_data_get.constprop.0>:
static bool plain_text_data_get(const nrf_802154_aes_ccm_data_t * p_frame,
 100862c:	b570      	push	{r4, r5, r6, lr}
    if (p_frame->plain_text_data_len == 0)
 100862e:	4e0f      	ldr	r6, [pc, #60]	; (100866c <plain_text_data_get.constprop.0+0x40>)
static bool plain_text_data_get(const nrf_802154_aes_ccm_data_t * p_frame,
 1008630:	4604      	mov	r4, r0
    if (p_frame->plain_text_data_len == 0)
 1008632:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
static bool plain_text_data_get(const nrf_802154_aes_ccm_data_t * p_frame,
 1008636:	460d      	mov	r5, r1
    if (p_frame->plain_text_data_len == 0)
 1008638:	b90b      	cbnz	r3, 100863e <plain_text_data_get.constprop.0+0x12>
        return false;
 100863a:	2000      	movs	r0, #0
}
 100863c:	bd70      	pop	{r4, r5, r6, pc}
    memset(p_b, 0, NRF_802154_AES_CCM_BLOCK_SIZE);
 100863e:	2210      	movs	r2, #16
 1008640:	2100      	movs	r1, #0
 1008642:	4628      	mov	r0, r5
 1008644:	f00a f9e5 	bl	1012a12 <memset>
    if (offset >= p_frame->plain_text_data_len)
 1008648:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
    offset += NRF_802154_AES_CCM_BLOCK_SIZE * iter;
 100864c:	0123      	lsls	r3, r4, #4
 100864e:	b2db      	uxtb	r3, r3
    if (offset >= p_frame->plain_text_data_len)
 1008650:	4293      	cmp	r3, r2
 1008652:	d2f2      	bcs.n	100863a <plain_text_data_get.constprop.0+0xe>
    len = MIN(p_frame->plain_text_data_len - offset, NRF_802154_AES_CCM_BLOCK_SIZE);
 1008654:	1ad2      	subs	r2, r2, r3
 1008656:	2a10      	cmp	r2, #16
 1008658:	bfa8      	it	ge
 100865a:	2210      	movge	r2, #16
    memcpy(p_b, p_frame->plain_text_data + offset, len);
 100865c:	6a31      	ldr	r1, [r6, #32]
 100865e:	4628      	mov	r0, r5
 1008660:	b2d2      	uxtb	r2, r2
 1008662:	4419      	add	r1, r3
 1008664:	f00a f9ca 	bl	10129fc <memcpy>
    return true;
 1008668:	2001      	movs	r0, #1
 100866a:	e7e7      	b.n	100863c <plain_text_data_get.constprop.0+0x10>
 100866c:	210010d8 	.word	0x210010d8

01008670 <process_ecb_encrypt_iteration>:

/**
 * @brief Block of Encryption Transformation iteration
 */
static inline void process_ecb_encrypt_iteration(void)
{
 1008670:	b570      	push	{r4, r5, r6, lr}
    p_a[NRF_802154_AES_CCM_AI_FIELD_FLAG_OCTET] = enc_flags;
 1008672:	4c0b      	ldr	r4, [pc, #44]	; (10086a0 <process_ecb_encrypt_iteration+0x30>)
 1008674:	2501      	movs	r5, #1
 1008676:	4620      	mov	r0, r4
    ai_format(&m_aes_ccm_data, m_state.iteration, m_a);
 1008678:	4b0a      	ldr	r3, [pc, #40]	; (10086a4 <process_ecb_encrypt_iteration+0x34>)
    memcpy(&p_a[NRF_802154_AES_CCM_AI_FIELD_NONCE_OCTET],
 100867a:	220d      	movs	r2, #13
 100867c:	490a      	ldr	r1, [pc, #40]	; (10086a8 <process_ecb_encrypt_iteration+0x38>)
    p_a[NRF_802154_AES_CCM_AI_FIELD_FLAG_OCTET] = enc_flags;
 100867e:	f800 5b01 	strb.w	r5, [r0], #1
    ai_format(&m_aes_ccm_data, m_state.iteration, m_a);
 1008682:	785e      	ldrb	r6, [r3, #1]
    memcpy(&p_a[NRF_802154_AES_CCM_AI_FIELD_NONCE_OCTET],
 1008684:	f00a f9ba 	bl	10129fc <memcpy>
    p_a[NRF_802154_AES_CCM_BLOCK_SIZE - 2] = iter >> 8;
 1008688:	2300      	movs	r3, #0
 100868a:	73a3      	strb	r3, [r4, #14]
    memcpy(mp_ecb_cleartext, m_a, NRF_802154_AES_CCM_BLOCK_SIZE);
 100868c:	4b07      	ldr	r3, [pc, #28]	; (10086ac <process_ecb_encrypt_iteration+0x3c>)
 100868e:	2210      	movs	r2, #16
 1008690:	6818      	ldr	r0, [r3, #0]
 1008692:	4621      	mov	r1, r4
    p_a[NRF_802154_AES_CCM_BLOCK_SIZE - 1] = iter;
 1008694:	73e6      	strb	r6, [r4, #15]
    memcpy(mp_ecb_cleartext, m_a, NRF_802154_AES_CCM_BLOCK_SIZE);
 1008696:	f00a f9b1 	bl	10129fc <memcpy>
 100869a:	4b05      	ldr	r3, [pc, #20]	; (10086b0 <process_ecb_encrypt_iteration+0x40>)
 100869c:	601d      	str	r5, [r3, #0]
    nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
}
 100869e:	bd70      	pop	{r4, r5, r6, pc}
 10086a0:	21003b9b 	.word	0x21003b9b
 10086a4:	21003b99 	.word	0x21003b99
 10086a8:	210010fd 	.word	0x210010fd
 10086ac:	210033c0 	.word	0x210033c0
 10086b0:	4100d000 	.word	0x4100d000

010086b4 <perform_plain_text_authorization>:

/**
 * @brief helper function for plain text auth in ECB IRQ
 */
static void perform_plain_text_authorization(void)
{
 10086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (plain_text_data_get(&m_aes_ccm_data, m_state.iteration, m_b))
 10086b6:	4c16      	ldr	r4, [pc, #88]	; (1008710 <perform_plain_text_authorization+0x5c>)
 10086b8:	4916      	ldr	r1, [pc, #88]	; (1008714 <perform_plain_text_authorization+0x60>)
 10086ba:	7860      	ldrb	r0, [r4, #1]
 10086bc:	f7ff ffb6 	bl	100862c <plain_text_data_get.constprop.0>
 10086c0:	4605      	mov	r5, r0
 10086c2:	b118      	cbz	r0, 10086cc <perform_plain_text_authorization+0x18>
    }
    else
    {
        perform_plain_text_encryption();
    }
}
 10086c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        process_ecb_auth_iteration();
 10086c8:	f7ff bf90 	b.w	10085ec <process_ecb_auth_iteration>
    memcpy(m_auth_tag, mp_ecb_ciphertext, m_mic_size[m_aes_ccm_data.mic_level]);
 10086cc:	4f12      	ldr	r7, [pc, #72]	; (1008718 <perform_plain_text_authorization+0x64>)
 10086ce:	4e13      	ldr	r6, [pc, #76]	; (100871c <perform_plain_text_authorization+0x68>)
 10086d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 10086d4:	4812      	ldr	r0, [pc, #72]	; (1008720 <perform_plain_text_authorization+0x6c>)
 10086d6:	5cf2      	ldrb	r2, [r6, r3]
 10086d8:	4b12      	ldr	r3, [pc, #72]	; (1008724 <perform_plain_text_authorization+0x70>)
 10086da:	6819      	ldr	r1, [r3, #0]
 10086dc:	f00a f98e 	bl	10129fc <memcpy>
    m_state.transformation = PLAIN_TEXT_ENCRYPT;
 10086e0:	2302      	movs	r3, #2
    if (plain_text_data_get(&m_aes_ccm_data, m_state.iteration, m_m))
 10086e2:	4628      	mov	r0, r5
 10086e4:	4910      	ldr	r1, [pc, #64]	; (1008728 <perform_plain_text_authorization+0x74>)
    m_state.iteration      = 0;
 10086e6:	7065      	strb	r5, [r4, #1]
    m_state.transformation = PLAIN_TEXT_ENCRYPT;
 10086e8:	7023      	strb	r3, [r4, #0]
    if (plain_text_data_get(&m_aes_ccm_data, m_state.iteration, m_m))
 10086ea:	f7ff ff9f 	bl	100862c <plain_text_data_get.constprop.0>
 10086ee:	b130      	cbz	r0, 10086fe <perform_plain_text_authorization+0x4a>
        m_state.iteration++;
 10086f0:	7863      	ldrb	r3, [r4, #1]
 10086f2:	3301      	adds	r3, #1
 10086f4:	7063      	strb	r3, [r4, #1]
}
 10086f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        process_ecb_encrypt_iteration();
 10086fa:	f7ff bfb9 	b.w	1008670 <process_ecb_encrypt_iteration>
        if (m_mic_size[m_aes_ccm_data.mic_level] != 0)
 10086fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 1008702:	5cf3      	ldrb	r3, [r6, r3]
 1008704:	b11b      	cbz	r3, 100870e <perform_plain_text_authorization+0x5a>
            process_ecb_encrypt_iteration();
 1008706:	f7ff ffb3 	bl	1008670 <process_ecb_encrypt_iteration>
            m_state.transformation = CALCULATE_ENCRYPTED_TAG;
 100870a:	2303      	movs	r3, #3
 100870c:	7023      	strb	r3, [r4, #0]
}
 100870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1008710:	21003b99 	.word	0x21003b99
 1008714:	21003bbb 	.word	0x21003bbb
 1008718:	210010d8 	.word	0x210010d8
 100871c:	01015bdd 	.word	0x01015bdd
 1008720:	21003b89 	.word	0x21003b89
 1008724:	210033bc 	.word	0x210033bc
 1008728:	21003bab 	.word	0x21003bab

0100872c <ecb_irq_handler>:
/**
 * @brief Handler to ECB Interrupt Routine
 *  Performs AES-CCM* calculation in pipeline
 */
static void ecb_irq_handler(void)
{
 100872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_ecb_int_enable_check(NRF_ECB_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
 100872e:	4b53      	ldr	r3, [pc, #332]	; (100887c <ecb_irq_handler+0x150>)
 1008730:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    uint8_t len = 0;
    uint8_t offset;

    if (nrf_ecb_int_enable_check(NRF_ECB, NRF_ECB_INT_ENDECB_MASK) &&
 1008734:	07d1      	lsls	r1, r2, #31
 1008736:	d52d      	bpl.n	1008794 <ecb_irq_handler+0x68>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1008738:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 100873c:	b352      	cbz	r2, 1008794 <ecb_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100873e:	2200      	movs	r2, #0
        nrf_ecb_event_check(NRF_ECB, NRF_ECB_EVENT_ENDECB))
    {
        nrf_ecb_event_clear(NRF_ECB, NRF_ECB_EVENT_ENDECB);

        switch (m_state.transformation)
 1008740:	4d4f      	ldr	r5, [pc, #316]	; (1008880 <ecb_irq_handler+0x154>)
 1008742:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 1008746:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 100874a:	782b      	ldrb	r3, [r5, #0]
 100874c:	2b03      	cmp	r3, #3
 100874e:	d821      	bhi.n	1008794 <ecb_irq_handler+0x68>
 1008750:	e8df f003 	tbb	[pc, r3]
 1008754:	7a4a4702 	.word	0x7a4a4702
    if (p_frame->auth_data_len == 0)
 1008758:	4e4a      	ldr	r6, [pc, #296]	; (1008884 <ecb_irq_handler+0x158>)
        {
            case ADD_AUTH_DATA_AUTH:
                if (add_auth_data_get(&m_aes_ccm_data, m_state.iteration, m_b))
 100875a:	786c      	ldrb	r4, [r5, #1]
    if (p_frame->auth_data_len == 0)
 100875c:	e9d6 3206 	ldrd	r3, r2, [r6, #24]
 1008760:	4313      	orrs	r3, r2
 1008762:	d03a      	beq.n	10087da <ecb_irq_handler+0xae>
    memset(p_b, 0, NRF_802154_AES_CCM_BLOCK_SIZE);
 1008764:	4f48      	ldr	r7, [pc, #288]	; (1008888 <ecb_irq_handler+0x15c>)
 1008766:	2210      	movs	r2, #16
 1008768:	2100      	movs	r1, #0
 100876a:	4638      	mov	r0, r7
 100876c:	f00a f951 	bl	1012a12 <memset>
    if (iter == 0)
 1008770:	b9f4      	cbnz	r4, 10087b0 <ecb_irq_handler+0x84>
        len = MIN(p_frame->auth_data_len, NRF_802154_AES_CCM_BLOCK_SIZE - sizeof(uint16_t));
 1008772:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
 1008776:	2a0f      	cmp	r2, #15
 1008778:	f173 0300 	sbcs.w	r3, r3, #0
        p_b[NRF_802154_AES_CCM_AUTH_DATA_LENGTH_OCTET]     = (p_frame->auth_data_len & 0xFF00) >> 8;
 100877c:	ea4f 2112 	mov.w	r1, r2, lsr #8
        p_b[NRF_802154_AES_CCM_AUTH_DATA_LENGTH_OCTET + 1] = (p_frame->auth_data_len & 0xFF);
 1008780:	707a      	strb	r2, [r7, #1]
        len = MIN(p_frame->auth_data_len, NRF_802154_AES_CCM_BLOCK_SIZE - sizeof(uint16_t));
 1008782:	bf28      	it	cs
 1008784:	220e      	movcs	r2, #14
        p_b[NRF_802154_AES_CCM_AUTH_DATA_LENGTH_OCTET]     = (p_frame->auth_data_len & 0xFF00) >> 8;
 1008786:	7039      	strb	r1, [r7, #0]
        memcpy(&p_b[NRF_802154_AES_CCM_AUTH_DATA_OCTET], p_frame->auth_data, len);
 1008788:	4840      	ldr	r0, [pc, #256]	; (100888c <ecb_irq_handler+0x160>)
 100878a:	6931      	ldr	r1, [r6, #16]
    memcpy(p_b, p_frame->auth_data + offset, len);
 100878c:	f00a f936 	bl	10129fc <memcpy>
                {
                    process_ecb_auth_iteration();
 1008790:	f7ff ff2c 	bl	10085ec <process_ecb_auth_iteration>
    return p_reg->INTENSET & mask;
 1008794:	4b39      	ldr	r3, [pc, #228]	; (100887c <ecb_irq_handler+0x150>)
 1008796:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
            default:
                break;
        }
    }

    if (nrf_ecb_int_enable_check(NRF_ECB, NRF_ECB_INT_ERRORECB_MASK) &&
 100879a:	0792      	lsls	r2, r2, #30
 100879c:	d507      	bpl.n	10087ae <ecb_irq_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 100879e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 10087a2:	b122      	cbz	r2, 10087ae <ecb_irq_handler+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10087a4:	2200      	movs	r2, #0
 10087a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 10087aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
         *
         * Therefore no action is taken in this handler.
         */
        nrf_ecb_event_clear(NRF_ECB, NRF_ECB_EVENT_ERRORECB);
    }
}
 10087ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (offset >= p_frame->auth_data_len)
 10087b0:	2000      	movs	r0, #0
 10087b2:	e9d6 2106 	ldrd	r2, r1, [r6, #24]
    offset += NRF_802154_AES_CCM_BLOCK_SIZE * (iter - 1);
 10087b6:	0123      	lsls	r3, r4, #4
 10087b8:	3b02      	subs	r3, #2
 10087ba:	b2db      	uxtb	r3, r3
    if (offset >= p_frame->auth_data_len)
 10087bc:	4293      	cmp	r3, r2
 10087be:	4188      	sbcs	r0, r1
 10087c0:	d20b      	bcs.n	10087da <ecb_irq_handler+0xae>
    len = MIN(p_frame->auth_data_len - offset, NRF_802154_AES_CCM_BLOCK_SIZE);
 10087c2:	1ad2      	subs	r2, r2, r3
 10087c4:	f161 0100 	sbc.w	r1, r1, #0
 10087c8:	2a11      	cmp	r2, #17
 10087ca:	f171 0100 	sbcs.w	r1, r1, #0
    memcpy(p_b, p_frame->auth_data + offset, len);
 10087ce:	6931      	ldr	r1, [r6, #16]
    len = MIN(p_frame->auth_data_len - offset, NRF_802154_AES_CCM_BLOCK_SIZE);
 10087d0:	bf28      	it	cs
 10087d2:	2210      	movcs	r2, #16
    memcpy(p_b, p_frame->auth_data + offset, len);
 10087d4:	482c      	ldr	r0, [pc, #176]	; (1008888 <ecb_irq_handler+0x15c>)
 10087d6:	4419      	add	r1, r3
 10087d8:	e7d8      	b.n	100878c <ecb_irq_handler+0x60>
                    m_state.iteration      = 0;
 10087da:	2300      	movs	r3, #0
 10087dc:	706b      	strb	r3, [r5, #1]
                    m_state.transformation = PLAIN_TEXT_AUTH;
 10087de:	2301      	movs	r3, #1
 10087e0:	702b      	strb	r3, [r5, #0]
                perform_plain_text_authorization();
 10087e2:	f7ff ff67 	bl	10086b4 <perform_plain_text_authorization>
                break;
 10087e6:	e7d5      	b.n	1008794 <ecb_irq_handler+0x68>
                two_blocks_xor(m_m, mp_ecb_ciphertext, NRF_802154_AES_CCM_BLOCK_SIZE);
 10087e8:	4b29      	ldr	r3, [pc, #164]	; (1008890 <ecb_irq_handler+0x164>)
 10087ea:	2210      	movs	r2, #16
 10087ec:	6819      	ldr	r1, [r3, #0]
 10087ee:	4829      	ldr	r0, [pc, #164]	; (1008894 <ecb_irq_handler+0x168>)
 10087f0:	f00a fc16 	bl	1013020 <two_blocks_xor>
                offset = (m_state.iteration - 1) * NRF_802154_AES_CCM_BLOCK_SIZE;
 10087f4:	786b      	ldrb	r3, [r5, #1]
                len    = MIN(m_aes_ccm_data.plain_text_data_len - offset,
 10087f6:	4c23      	ldr	r4, [pc, #140]	; (1008884 <ecb_irq_handler+0x158>)
                offset = (m_state.iteration - 1) * NRF_802154_AES_CCM_BLOCK_SIZE;
 10087f8:	3b01      	subs	r3, #1
                len    = MIN(m_aes_ccm_data.plain_text_data_len - offset,
 10087fa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                offset = (m_state.iteration - 1) * NRF_802154_AES_CCM_BLOCK_SIZE;
 10087fe:	011b      	lsls	r3, r3, #4
 1008800:	b2db      	uxtb	r3, r3
                len    = MIN(m_aes_ccm_data.plain_text_data_len - offset,
 1008802:	1ad2      	subs	r2, r2, r3
 1008804:	2a10      	cmp	r2, #16
 1008806:	bfa8      	it	ge
 1008808:	2210      	movge	r2, #16
                memcpy(mp_ciphertext + offset, m_m, len);
 100880a:	4923      	ldr	r1, [pc, #140]	; (1008898 <ecb_irq_handler+0x16c>)
 100880c:	b2d2      	uxtb	r2, r2
 100880e:	6808      	ldr	r0, [r1, #0]
 1008810:	4920      	ldr	r1, [pc, #128]	; (1008894 <ecb_irq_handler+0x168>)
 1008812:	4418      	add	r0, r3
 1008814:	f00a f8f2 	bl	10129fc <memcpy>
                if (plain_text_data_get(&m_aes_ccm_data, m_state.iteration, m_m))
 1008818:	491e      	ldr	r1, [pc, #120]	; (1008894 <ecb_irq_handler+0x168>)
 100881a:	7868      	ldrb	r0, [r5, #1]
 100881c:	f7ff ff06 	bl	100862c <plain_text_data_get.constprop.0>
 1008820:	b128      	cbz	r0, 100882e <ecb_irq_handler+0x102>
                    m_state.iteration++;
 1008822:	786b      	ldrb	r3, [r5, #1]
 1008824:	3301      	adds	r3, #1
 1008826:	706b      	strb	r3, [r5, #1]
                        process_ecb_encrypt_iteration();
 1008828:	f7ff ff22 	bl	1008670 <process_ecb_encrypt_iteration>
 100882c:	e7b2      	b.n	1008794 <ecb_irq_handler+0x68>
                    if (m_mic_size[m_aes_ccm_data.mic_level] != 0)
 100882e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 1008832:	4a1a      	ldr	r2, [pc, #104]	; (100889c <ecb_irq_handler+0x170>)
 1008834:	5cd6      	ldrb	r6, [r2, r3]
 1008836:	b11e      	cbz	r6, 1008840 <ecb_irq_handler+0x114>
                        m_state.transformation = CALCULATE_ENCRYPTED_TAG;
 1008838:	2303      	movs	r3, #3
                        m_state.iteration      = 0;
 100883a:	7068      	strb	r0, [r5, #1]
                        m_state.transformation = CALCULATE_ENCRYPTED_TAG;
 100883c:	702b      	strb	r3, [r5, #0]
 100883e:	e7f3      	b.n	1008828 <ecb_irq_handler+0xfc>
    nrf_802154_tx_work_buffer_is_secured_set();
 1008840:	f002 ff14 	bl	100b66c <nrf_802154_tx_work_buffer_is_secured_set>
    m_aes_ccm_data.raw_frame = NULL;
 1008844:	6366      	str	r6, [r4, #52]	; 0x34
}
 1008846:	e7a5      	b.n	1008794 <ecb_irq_handler+0x68>
                               m_mic_size[m_aes_ccm_data.mic_level]);
 1008848:	4d0e      	ldr	r5, [pc, #56]	; (1008884 <ecb_irq_handler+0x158>)
 100884a:	4a14      	ldr	r2, [pc, #80]	; (100889c <ecb_irq_handler+0x170>)
 100884c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
                two_blocks_xor(m_auth_tag,
 1008850:	4813      	ldr	r0, [pc, #76]	; (10088a0 <ecb_irq_handler+0x174>)
                               m_mic_size[m_aes_ccm_data.mic_level]);
 1008852:	5cd4      	ldrb	r4, [r2, r3]
                two_blocks_xor(m_auth_tag,
 1008854:	4b0e      	ldr	r3, [pc, #56]	; (1008890 <ecb_irq_handler+0x164>)
 1008856:	4622      	mov	r2, r4
 1008858:	6819      	ldr	r1, [r3, #0]
 100885a:	f00a fbe1 	bl	1013020 <two_blocks_xor>
                memcpy(mp_work_buffer +
 100885e:	4b11      	ldr	r3, [pc, #68]	; (10088a4 <ecb_irq_handler+0x178>)
 1008860:	490f      	ldr	r1, [pc, #60]	; (10088a0 <ecb_irq_handler+0x174>)
 1008862:	6818      	ldr	r0, [r3, #0]
                       (mp_work_buffer[PHR_OFFSET] - FCS_SIZE -
 1008864:	43e3      	mvns	r3, r4
 1008866:	7802      	ldrb	r2, [r0, #0]
                memcpy(mp_work_buffer +
 1008868:	4413      	add	r3, r2
 100886a:	4418      	add	r0, r3
 100886c:	4622      	mov	r2, r4
 100886e:	f00a f8c5 	bl	10129fc <memcpy>
    nrf_802154_tx_work_buffer_is_secured_set();
 1008872:	f002 fefb 	bl	100b66c <nrf_802154_tx_work_buffer_is_secured_set>
    m_aes_ccm_data.raw_frame = NULL;
 1008876:	2300      	movs	r3, #0
 1008878:	636b      	str	r3, [r5, #52]	; 0x34
}
 100887a:	e78b      	b.n	1008794 <ecb_irq_handler+0x68>
 100887c:	4100d000 	.word	0x4100d000
 1008880:	21003b99 	.word	0x21003b99
 1008884:	210010d8 	.word	0x210010d8
 1008888:	21003bbb 	.word	0x21003bbb
 100888c:	21003bbd 	.word	0x21003bbd
 1008890:	210033bc 	.word	0x210033bc
 1008894:	21003bab 	.word	0x21003bab
 1008898:	210033cc 	.word	0x210033cc
 100889c:	01015bdd 	.word	0x01015bdd
 10088a0:	21003b89 	.word	0x21003b89
 10088a4:	210033c8 	.word	0x210033c8

010088a8 <nrf_802154_aes_ccm_transform_reset>:
    nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
}

void nrf_802154_aes_ccm_transform_reset(void)
{
    m_aes_ccm_data.raw_frame = NULL;
 10088a8:	2200      	movs	r2, #0
 10088aa:	4b01      	ldr	r3, [pc, #4]	; (10088b0 <nrf_802154_aes_ccm_transform_reset+0x8>)
 10088ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 10088ae:	4770      	bx	lr
 10088b0:	210010d8 	.word	0x210010d8

010088b4 <nrf_802154_aes_ccm_transform_prepare>:

bool nrf_802154_aes_ccm_transform_prepare(const nrf_802154_aes_ccm_data_t * p_aes_ccm_data)
{
 10088b4:	b570      	push	{r4, r5, r6, lr}
 10088b6:	4604      	mov	r4, r0
    // Verify that all necessary data is available
    if (p_aes_ccm_data->raw_frame == NULL)
 10088b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 10088ba:	2800      	cmp	r0, #0
 10088bc:	d031      	beq.n	1008922 <nrf_802154_aes_ccm_transform_prepare+0x6e>
    {
        return false;
    }

    // Verify that the optional data, if exists, is complete
    if (((p_aes_ccm_data->auth_data_len != 0) && (p_aes_ccm_data->auth_data == NULL)) ||
 10088be:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 10088c2:	4313      	orrs	r3, r2
 10088c4:	d001      	beq.n	10088ca <nrf_802154_aes_ccm_transform_prepare+0x16>
 10088c6:	6920      	ldr	r0, [r4, #16]
 10088c8:	b358      	cbz	r0, 1008922 <nrf_802154_aes_ccm_transform_prepare+0x6e>
 10088ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 10088ce:	b10b      	cbz	r3, 10088d4 <nrf_802154_aes_ccm_transform_prepare+0x20>
        ((p_aes_ccm_data->plain_text_data_len != 0) && (p_aes_ccm_data->plain_text_data == NULL)))
 10088d0:	6a20      	ldr	r0, [r4, #32]
 10088d2:	b330      	cbz	r0, 1008922 <nrf_802154_aes_ccm_transform_prepare+0x6e>
    {
        return false;
    }

    // Verify that the MIC level is valid
    if (p_aes_ccm_data->mic_level > SECURITY_LEVEL_MIC_LEVEL_MASK)
 10088d4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 10088d8:	2b03      	cmp	r3, #3
 10088da:	d825      	bhi.n	1008928 <nrf_802154_aes_ccm_transform_prepare+0x74>
    {
        return false;
    }

    // Store the encryption data for future use
    memcpy(&m_aes_ccm_data, p_aes_ccm_data, sizeof(nrf_802154_aes_ccm_data_t));
 10088dc:	2238      	movs	r2, #56	; 0x38
 10088de:	4621      	mov	r1, r4
 10088e0:	4812      	ldr	r0, [pc, #72]	; (100892c <nrf_802154_aes_ccm_transform_prepare+0x78>)
 10088e2:	f00a f88b 	bl	10129fc <memcpy>

    ptrdiff_t offset = p_aes_ccm_data->raw_frame[PHR_OFFSET] + PHR_SIZE;
 10088e6:	6b63      	ldr	r3, [r4, #52]	; 0x34

    if (p_aes_ccm_data->plain_text_data)
 10088e8:	6a25      	ldr	r5, [r4, #32]
    ptrdiff_t offset = p_aes_ccm_data->raw_frame[PHR_OFFSET] + PHR_SIZE;
 10088ea:	781a      	ldrb	r2, [r3, #0]
    if (p_aes_ccm_data->plain_text_data)
 10088ec:	b9d5      	cbnz	r5, 1008924 <nrf_802154_aes_ccm_transform_prepare+0x70>
    ptrdiff_t offset = p_aes_ccm_data->raw_frame[PHR_OFFSET] + PHR_SIZE;
 10088ee:	1c55      	adds	r5, r2, #1
        offset = p_aes_ccm_data->plain_text_data - p_aes_ccm_data->raw_frame;
    }

    assert((offset >= 0) && (offset <= MAX_PACKET_SIZE + PHR_SIZE));

    nrf_802154_tx_work_buffer_plain_text_offset_set(offset);
 10088f0:	b2e8      	uxtb	r0, r5
 10088f2:	f002 fec7 	bl	100b684 <nrf_802154_tx_work_buffer_plain_text_offset_set>
    mp_work_buffer = nrf_802154_tx_work_buffer_enable_for(p_aes_ccm_data->raw_frame);
 10088f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 10088f8:	f002 fe7c 	bl	100b5f4 <nrf_802154_tx_work_buffer_enable_for>
 10088fc:	4603      	mov	r3, r0
 10088fe:	4a0c      	ldr	r2, [pc, #48]	; (1008930 <nrf_802154_aes_ccm_transform_prepare+0x7c>)
    mp_ciphertext  = mp_work_buffer + offset;
 1008900:	4e0c      	ldr	r6, [pc, #48]	; (1008934 <nrf_802154_aes_ccm_transform_prepare+0x80>)
 1008902:	442b      	add	r3, r5

    memcpy(mp_work_buffer, p_aes_ccm_data->raw_frame, offset);
 1008904:	6b61      	ldr	r1, [r4, #52]	; 0x34
    mp_work_buffer = nrf_802154_tx_work_buffer_enable_for(p_aes_ccm_data->raw_frame);
 1008906:	6010      	str	r0, [r2, #0]
    memcpy(mp_work_buffer, p_aes_ccm_data->raw_frame, offset);
 1008908:	462a      	mov	r2, r5
    mp_ciphertext  = mp_work_buffer + offset;
 100890a:	6033      	str	r3, [r6, #0]
    memcpy(mp_work_buffer, p_aes_ccm_data->raw_frame, offset);
 100890c:	f00a f876 	bl	10129fc <memcpy>
    memset(mp_ciphertext, 0, p_aes_ccm_data->raw_frame[PHR_OFFSET] + PHR_SIZE - offset);
 1008910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 1008912:	2100      	movs	r1, #0
 1008914:	781a      	ldrb	r2, [r3, #0]
 1008916:	6830      	ldr	r0, [r6, #0]
 1008918:	3201      	adds	r2, #1
 100891a:	1b52      	subs	r2, r2, r5
 100891c:	f00a f879 	bl	1012a12 <memset>

    return true;
 1008920:	2001      	movs	r0, #1
}
 1008922:	bd70      	pop	{r4, r5, r6, pc}
        offset = p_aes_ccm_data->plain_text_data - p_aes_ccm_data->raw_frame;
 1008924:	1aed      	subs	r5, r5, r3
 1008926:	e7e3      	b.n	10088f0 <nrf_802154_aes_ccm_transform_prepare+0x3c>
        return false;
 1008928:	2000      	movs	r0, #0
 100892a:	e7fa      	b.n	1008922 <nrf_802154_aes_ccm_transform_prepare+0x6e>
 100892c:	210010d8 	.word	0x210010d8
 1008930:	210033c8 	.word	0x210033c8
 1008934:	210033cc 	.word	0x210033cc

01008938 <nrf_802154_aes_ccm_transform_start>:

void nrf_802154_aes_ccm_transform_start(uint8_t * p_frame)
{
 1008938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Verify that the algorithm's inputs were prepared properly
    if ((p_frame != m_aes_ccm_data.raw_frame) || (m_aes_ccm_data.raw_frame == NULL))
 100893a:	4e3c      	ldr	r6, [pc, #240]	; (1008a2c <nrf_802154_aes_ccm_transform_start+0xf4>)
{
 100893c:	4601      	mov	r1, r0
    if ((p_frame != m_aes_ccm_data.raw_frame) || (m_aes_ccm_data.raw_frame == NULL))
 100893e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 1008940:	4283      	cmp	r3, r0
 1008942:	d171      	bne.n	1008a28 <nrf_802154_aes_ccm_transform_start+0xf0>
 1008944:	2800      	cmp	r0, #0
 1008946:	d06f      	beq.n	1008a28 <nrf_802154_aes_ccm_transform_start+0xf0>
    auth_flags |= (p_frame->auth_data_len == 0) ? 0 : NRF_802154_AES_CCM_ADATA_AUTH_FLAG;
 1008948:	e9d6 3206 	ldrd	r3, r2, [r6, #24]
 100894c:	4313      	orrs	r3, r2
 100894e:	bf14      	ite	ne
 1008950:	2401      	movne	r4, #1
 1008952:	2400      	moveq	r4, #0
    m           = m_mic_size[p_frame->mic_level];
 1008954:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
 1008958:	4a35      	ldr	r2, [pc, #212]	; (1008a30 <nrf_802154_aes_ccm_transform_start+0xf8>)
    auth_flags |= (p_frame->auth_data_len == 0) ? 0 : NRF_802154_AES_CCM_ADATA_AUTH_FLAG;
 100895a:	01a4      	lsls	r4, r4, #6
    m           = m_mic_size[p_frame->mic_level];
 100895c:	5cd5      	ldrb	r5, [r2, r3]
    m           = (m > 0) ? (m - 2) >> 1 : 0;
 100895e:	b115      	cbz	r5, 1008966 <nrf_802154_aes_ccm_transform_start+0x2e>
 1008960:	3d02      	subs	r5, #2
 1008962:	f3c5 0547 	ubfx	r5, r5, #1, #8
    }

    uint8_t   auth_flags = auth_flags_format(&m_aes_ccm_data);
    uint8_t * p_x        = m_x;
    uint8_t * p_b        = m_b;
    ptrdiff_t offset     = mp_ciphertext - mp_work_buffer;
 1008966:	4b33      	ldr	r3, [pc, #204]	; (1008a34 <nrf_802154_aes_ccm_transform_start+0xfc>)
    p_b[NRF_802154_AES_CCM_B0_FIELD_FLAG_OCTET] = flags;
 1008968:	4f33      	ldr	r7, [pc, #204]	; (1008a38 <nrf_802154_aes_ccm_transform_start+0x100>)
    ptrdiff_t offset     = mp_ciphertext - mp_work_buffer;
 100896a:	6818      	ldr	r0, [r3, #0]
 100896c:	4b33      	ldr	r3, [pc, #204]	; (1008a3c <nrf_802154_aes_ccm_transform_start+0x104>)
    auth_flags |= (m << NRF_802154_AES_CCM_M_BITS_AUTH_FLAG);
 100896e:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
    ptrdiff_t offset     = mp_ciphertext - mp_work_buffer;
 1008972:	681a      	ldr	r2, [r3, #0]
    auth_flags |= NRF_802154_AES_CCM_L_VALUE - 1; // l value
 1008974:	f044 0401 	orr.w	r4, r4, #1

    // Copy updated part of the frame
    memcpy(mp_work_buffer, p_frame, offset);
 1008978:	1a12      	subs	r2, r2, r0
 100897a:	f00a f83f 	bl	10129fc <memcpy>

    // initial settings
    memset(p_x, 0, NRF_802154_AES_CCM_BLOCK_SIZE);
 100897e:	2210      	movs	r2, #16
 1008980:	2100      	movs	r1, #0
 1008982:	482f      	ldr	r0, [pc, #188]	; (1008a40 <nrf_802154_aes_ccm_transform_start+0x108>)
 1008984:	f00a f845 	bl	1012a12 <memset>
    p_b[NRF_802154_AES_CCM_B0_FIELD_FLAG_OCTET] = flags;
 1008988:	4638      	mov	r0, r7
    memcpy(&p_b[NRF_802154_AES_CCM_B0_FIELD_NONCE_OCTET],
 100898a:	220d      	movs	r2, #13
 100898c:	492d      	ldr	r1, [pc, #180]	; (1008a44 <nrf_802154_aes_ccm_transform_start+0x10c>)
    p_b[NRF_802154_AES_CCM_B0_FIELD_FLAG_OCTET] = flags;
 100898e:	f800 4b01 	strb.w	r4, [r0], #1
    memcpy(&p_b[NRF_802154_AES_CCM_B0_FIELD_NONCE_OCTET],
 1008992:	f00a f833 	bl	10129fc <memcpy>
    p_b[NRF_802154_AES_CCM_BLOCK_SIZE - 1] = (p_frame->plain_text_data_len & 0xFF);
 1008996:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    if (!m_initialized)
 100899a:	4c2b      	ldr	r4, [pc, #172]	; (1008a48 <nrf_802154_aes_ccm_transform_start+0x110>)
    p_b[NRF_802154_AES_CCM_BLOCK_SIZE - 1] = (p_frame->plain_text_data_len & 0xFF);
 100899c:	73fb      	strb	r3, [r7, #15]
    p_b[NRF_802154_AES_CCM_BLOCK_SIZE - 2] = 0;
 100899e:	2300      	movs	r3, #0
    b0_format(&m_aes_ccm_data, auth_flags, p_b);

    two_blocks_xor(p_x, p_b, NRF_802154_AES_CCM_BLOCK_SIZE);
 10089a0:	2210      	movs	r2, #16
 10089a2:	4639      	mov	r1, r7
 10089a4:	4826      	ldr	r0, [pc, #152]	; (1008a40 <nrf_802154_aes_ccm_transform_start+0x108>)
    p_b[NRF_802154_AES_CCM_BLOCK_SIZE - 2] = 0;
 10089a6:	73bb      	strb	r3, [r7, #14]
    two_blocks_xor(p_x, p_b, NRF_802154_AES_CCM_BLOCK_SIZE);
 10089a8:	f00a fb3a 	bl	1013020 <two_blocks_xor>
    if (!m_initialized)
 10089ac:	7823      	ldrb	r3, [r4, #0]
 10089ae:	b93b      	cbnz	r3, 10089c0 <nrf_802154_aes_ccm_transform_start+0x88>
        nrf_802154_irq_init(ECB_IRQn, NRF_802154_ECB_PRIORITY, ecb_irq_handler);
 10089b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 10089b4:	200d      	movs	r0, #13
 10089b6:	4a25      	ldr	r2, [pc, #148]	; (1008a4c <nrf_802154_aes_ccm_transform_start+0x114>)
 10089b8:	f00a fa06 	bl	1012dc8 <nrf_802154_irq_init>
        m_initialized = true;
 10089bc:	2301      	movs	r3, #1
 10089be:	7023      	strb	r3, [r4, #0]
    mp_ecb_key        = m_ecb_data;
 10089c0:	4b23      	ldr	r3, [pc, #140]	; (1008a50 <nrf_802154_aes_ccm_transform_start+0x118>)
    mp_ecb_cleartext  = m_ecb_data + 16;
 10089c2:	4a24      	ldr	r2, [pc, #144]	; (1008a54 <nrf_802154_aes_ccm_transform_start+0x11c>)
 10089c4:	f103 0110 	add.w	r1, r3, #16
}

NRF_STATIC_INLINE void nrf_ecb_data_pointer_set(NRF_ECB_Type * p_reg, void const * p_buffer)
{
    p_reg->ECBDATAPTR = (uint32_t)p_buffer;
 10089c8:	4c23      	ldr	r4, [pc, #140]	; (1008a58 <nrf_802154_aes_ccm_transform_start+0x120>)
 10089ca:	6011      	str	r1, [r2, #0]
    mp_ecb_key        = m_ecb_data;
 10089cc:	4d23      	ldr	r5, [pc, #140]	; (1008a5c <nrf_802154_aes_ccm_transform_start+0x124>)
    mp_ecb_ciphertext = m_ecb_data + 32;
 10089ce:	4a24      	ldr	r2, [pc, #144]	; (1008a60 <nrf_802154_aes_ccm_transform_start+0x128>)
 10089d0:	f103 0120 	add.w	r1, r3, #32
 10089d4:	6011      	str	r1, [r2, #0]
    mp_ecb_key        = m_ecb_data;
 10089d6:	602b      	str	r3, [r5, #0]
    nrf_802154_irq_clear_pending(ECB_IRQn);
 10089d8:	200d      	movs	r0, #13
 10089da:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
 10089de:	f7ff fb83 	bl	10080e8 <nrf_802154_irq_clear_pending>
    nrf_802154_irq_enable(ECB_IRQn);
 10089e2:	200d      	movs	r0, #13
 10089e4:	f00a f9fc 	bl	1012de0 <nrf_802154_irq_enable>
    p_reg->INTENSET = mask;
 10089e8:	2601      	movs	r6, #1
 10089ea:	2302      	movs	r3, #2
 10089ec:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
 10089f0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    ecb_init();
    memset(mp_ecb_key, 0, 48);
 10089f4:	2230      	movs	r2, #48	; 0x30
 10089f6:	2100      	movs	r1, #0
 10089f8:	6828      	ldr	r0, [r5, #0]
 10089fa:	f00a f80a 	bl	1012a12 <memset>
    memcpy(mp_ecb_key, p_key, 16);
 10089fe:	2210      	movs	r2, #16
 1008a00:	490a      	ldr	r1, [pc, #40]	; (1008a2c <nrf_802154_aes_ccm_transform_start+0xf4>)
 1008a02:	6828      	ldr	r0, [r5, #0]
 1008a04:	f009 fffa 	bl	10129fc <memcpy>
    memcpy((uint8_t *)nrf_ecb_data_pointer_get(NRF_ECB) + 16, m_x, 16);
 1008a08:	2210      	movs	r2, #16
}

NRF_STATIC_INLINE void * nrf_ecb_data_pointer_get(NRF_ECB_Type const * p_reg)
{
    return (void *)(p_reg->ECBDATAPTR);
 1008a0a:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
 1008a0e:	490c      	ldr	r1, [pc, #48]	; (1008a40 <nrf_802154_aes_ccm_transform_start+0x108>)
 1008a10:	4410      	add	r0, r2
 1008a12:	f009 fff3 	bl	10129fc <memcpy>
    m_state.iteration      = 0;
 1008a16:	2300      	movs	r3, #0
 1008a18:	4a12      	ldr	r2, [pc, #72]	; (1008a64 <nrf_802154_aes_ccm_transform_start+0x12c>)
 1008a1a:	7053      	strb	r3, [r2, #1]
    m_state.transformation = ADD_AUTH_DATA_AUTH;
 1008a1c:	7013      	strb	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008a1e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 1008a22:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008a26:	6026      	str	r6, [r4, #0]
    nrf_ecb_set_key(m_aes_ccm_data.key);
    start_ecb_auth_transformation();
}
 1008a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1008a2a:	bf00      	nop
 1008a2c:	210010d8 	.word	0x210010d8
 1008a30:	01015bdd 	.word	0x01015bdd
 1008a34:	210033c8 	.word	0x210033c8
 1008a38:	21003bbb 	.word	0x21003bbb
 1008a3c:	210033cc 	.word	0x210033cc
 1008a40:	21003bcb 	.word	0x21003bcb
 1008a44:	210010fd 	.word	0x210010fd
 1008a48:	21003b88 	.word	0x21003b88
 1008a4c:	0100872d 	.word	0x0100872d
 1008a50:	21003b58 	.word	0x21003b58
 1008a54:	210033c0 	.word	0x210033c0
 1008a58:	4100d000 	.word	0x4100d000
 1008a5c:	210033c4 	.word	0x210033c4
 1008a60:	210033bc 	.word	0x210033bc
 1008a64:	21003b99 	.word	0x21003b99

01008a68 <nrf_802154_aes_ccm_transform_abort>:

void nrf_802154_aes_ccm_transform_abort(uint8_t * p_frame)
{
 1008a68:	b510      	push	{r4, lr}
    // Verify that the encryption of the correct frame is being aborted.
    if (p_frame != m_aes_ccm_data.raw_frame)
 1008a6a:	4909      	ldr	r1, [pc, #36]	; (1008a90 <nrf_802154_aes_ccm_transform_abort+0x28>)
 1008a6c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 1008a6e:	4283      	cmp	r3, r0
 1008a70:	d10c      	bne.n	1008a8c <nrf_802154_aes_ccm_transform_abort+0x24>
    p_reg->INTENCLR = mask;
 1008a72:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008a74:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
 1008a76:	4b07      	ldr	r3, [pc, #28]	; (1008a94 <nrf_802154_aes_ccm_transform_abort+0x2c>)
 1008a78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1008a7c:	605a      	str	r2, [r3, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1008a7e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 1008a82:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
 1008a86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    nrf_ecb_int_disable(NRF_ECB, NRF_ECB_INT_ENDECB_MASK);
    nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
    nrf_ecb_event_clear(NRF_ECB, NRF_ECB_EVENT_ENDECB);
    nrf_ecb_int_enable(NRF_ECB, NRF_ECB_INT_ENDECB_MASK);

    m_aes_ccm_data.raw_frame = NULL;
 1008a8a:	6348      	str	r0, [r1, #52]	; 0x34
}
 1008a8c:	bd10      	pop	{r4, pc}
 1008a8e:	bf00      	nop
 1008a90:	210010d8 	.word	0x210010d8
 1008a94:	4100d000 	.word	0x4100d000

01008a98 <rx_buffer_is_available>:
 * @retval true   There is available rx buffer.
 * @retval false  Currently there is no available rx buffer.
 */
static bool rx_buffer_is_available(void)
{
    return (mp_current_rx_buffer != NULL) && (mp_current_rx_buffer->free);
 1008a98:	4b03      	ldr	r3, [pc, #12]	; (1008aa8 <rx_buffer_is_available+0x10>)
 1008a9a:	6818      	ldr	r0, [r3, #0]
 1008a9c:	b108      	cbz	r0, 1008aa2 <rx_buffer_is_available+0xa>
 1008a9e:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
}
 1008aa2:	f000 0001 	and.w	r0, r0, #1
 1008aa6:	4770      	bx	lr
 1008aa8:	210033fc 	.word	0x210033fc

01008aac <rx_buffer_get>:
/** Get pointer to available rx buffer.
 *
 * @returns Pointer to available rx buffer or NULL if rx buffer is not available.
 */
static uint8_t * rx_buffer_get(void)
{
 1008aac:	b508      	push	{r3, lr}
    return rx_buffer_is_available() ? mp_current_rx_buffer->data : NULL;
 1008aae:	f7ff fff3 	bl	1008a98 <rx_buffer_is_available>
 1008ab2:	b108      	cbz	r0, 1008ab8 <rx_buffer_get+0xc>
 1008ab4:	4b01      	ldr	r3, [pc, #4]	; (1008abc <rx_buffer_get+0x10>)
 1008ab6:	6818      	ldr	r0, [r3, #0]
}
 1008ab8:	bd08      	pop	{r3, pc}
 1008aba:	bf00      	nop
 1008abc:	210033fc 	.word	0x210033fc

01008ac0 <min_required_rsch_prio>:
 * @section FSM transition request sub-procedures
 **************************************************************************************************/

static rsch_prio_t min_required_rsch_prio(radio_state_t state)
{
    switch (state)
 1008ac0:	1e43      	subs	r3, r0, #1
 1008ac2:	2b09      	cmp	r3, #9
 1008ac4:	d806      	bhi.n	1008ad4 <min_required_rsch_prio+0x14>
 1008ac6:	e8df f003 	tbb	[pc, r3]
 1008aca:	0707      	.short	0x0707
 1008acc:	12100910 	.word	0x12100910
 1008ad0:	10101212 	.word	0x10101212
    {
        case RADIO_STATE_SLEEP:
            return RSCH_PRIO_IDLE;
 1008ad4:	2000      	movs	r0, #0
 1008ad6:	4770      	bx	lr

        case RADIO_STATE_FALLING_ASLEEP:
        case RADIO_STATE_RX:
            return RSCH_PRIO_IDLE_LISTENING;
 1008ad8:	2001      	movs	r0, #1
 1008ada:	4770      	bx	lr
        case RADIO_STATE_MODULATED_CARRIER:
#endif // NRF_802154_CARRIER_FUNCTIONS_ENABLED
            return RSCH_PRIO_TX;

        case RADIO_STATE_CCA_TX:
            if (m_flags.tx_diminished_prio)
 1008adc:	4b05      	ldr	r3, [pc, #20]	; (1008af4 <min_required_rsch_prio+0x34>)
 1008ade:	781b      	ldrb	r3, [r3, #0]
            return RSCH_PRIO_IDLE_LISTENING;
 1008ae0:	f013 0f10 	tst.w	r3, #16
 1008ae4:	bf18      	it	ne
 1008ae6:	2001      	movne	r0, #1
 1008ae8:	4770      	bx	lr
            return RSCH_PRIO_TX;
 1008aea:	2004      	movs	r0, #4
 1008aec:	4770      	bx	lr
    switch (state)
 1008aee:	2002      	movs	r0, #2

        default:
            assert(false);
            return RSCH_PRIO_IDLE;
    }
}
 1008af0:	4770      	bx	lr
 1008af2:	bf00      	nop
 1008af4:	21003be1 	.word	0x21003be1

01008af8 <are_preconditions_met>:
{
    return (min_required_rsch_prio(state) <= prio);
}

static bool are_preconditions_met(void)
{
 1008af8:	b508      	push	{r3, lr}
    rsch_prio_t   current_prio;
    radio_state_t current_state;

    current_prio  = m_rsch_priority;
 1008afa:	4b06      	ldr	r3, [pc, #24]	; (1008b14 <are_preconditions_met+0x1c>)
 1008afc:	7819      	ldrb	r1, [r3, #0]
    current_state = m_state;
 1008afe:	4b06      	ldr	r3, [pc, #24]	; (1008b18 <are_preconditions_met+0x20>)
    current_prio  = m_rsch_priority;
 1008b00:	b2c9      	uxtb	r1, r1
    current_state = m_state;
 1008b02:	7818      	ldrb	r0, [r3, #0]
    return (min_required_rsch_prio(state) <= prio);
 1008b04:	f7ff ffdc 	bl	1008ac0 <min_required_rsch_prio>

    return is_state_allowed_for_prio(current_prio, current_state);
}
 1008b08:	4281      	cmp	r1, r0
 1008b0a:	bf34      	ite	cc
 1008b0c:	2000      	movcc	r0, #0
 1008b0e:	2001      	movcs	r0, #1
 1008b10:	bd08      	pop	{r3, pc}
 1008b12:	bf00      	nop
 1008b14:	21003bdf 	.word	0x21003bdf
 1008b18:	21003be2 	.word	0x21003be2

01008b1c <update_total_times_on_receive_end>:
{
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));

    if (phr)
    {
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
 1008b1c:	0152      	lsls	r2, r2, #5
{
    uint32_t t_listening;
    uint32_t t_frame;

    t_frame     = nrf_802154_frame_duration_get(phr, true, true);
    t_listening = receive_end_hp_timestamp - listening_start_hp_timestamp;
 1008b1e:	1a09      	subs	r1, r1, r0
    t_frame     = nrf_802154_frame_duration_get(phr, true, true);
 1008b20:	32c0      	adds	r2, #192	; 0xc0
 1008b22:	428a      	cmp	r2, r1
 1008b24:	bf28      	it	cs
 1008b26:	460a      	movcs	r2, r1
{
 1008b28:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1008b2a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1008b2e:	b672      	cpsid	i
        t_frame = t_listening;
    }

    t_listening -= t_frame;

    nrf_802154_stat_totals_increment(total_listening_time, t_listening);
 1008b30:	4b0b      	ldr	r3, [pc, #44]	; (1008b60 <update_total_times_on_receive_end+0x44>)
    t_listening -= t_frame;
 1008b32:	1a89      	subs	r1, r1, r2
    nrf_802154_stat_totals_increment(total_listening_time, t_listening);
 1008b34:	e9d3 6700 	ldrd	r6, r7, [r3]
 1008b38:	198c      	adds	r4, r1, r6
 1008b3a:	f147 0500 	adc.w	r5, r7, #0
 1008b3e:	e9c3 4500 	strd	r4, r5, [r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1008b42:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1008b46:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1008b4a:	b672      	cpsid	i
    nrf_802154_stat_totals_increment(total_receive_time, t_frame);
 1008b4c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 1008b50:	1910      	adds	r0, r2, r4
 1008b52:	f145 0100 	adc.w	r1, r5, #0
 1008b56:	e9c3 0102 	strd	r0, r1, [r3, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1008b5a:	f386 8810 	msr	PRIMASK, r6
}
 1008b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1008b60:	21001138 	.word	0x21001138

01008b64 <sleep_init>:
    return m_rsch_timeslot_is_granted;
 1008b64:	4b02      	ldr	r3, [pc, #8]	; (1008b70 <sleep_init+0xc>)
 1008b66:	781b      	ldrb	r3, [r3, #0]
    if (timeslot_is_granted())
 1008b68:	b10b      	cbz	r3, 1008b6e <sleep_init+0xa>
        nrf_802154_timer_coord_stop();
 1008b6a:	f008 bfb1 	b.w	1011ad0 <nrf_802154_timer_coord_stop>
}
 1008b6e:	4770      	bx	lr
 1008b70:	21003be0 	.word	0x21003be0

01008b74 <receive_failed_notify>:
{
 1008b74:	b510      	push	{r4, lr}
 1008b76:	4604      	mov	r4, r0
    nrf_802154_critical_section_nesting_allow();
 1008b78:	f001 fa7a 	bl	100a070 <nrf_802154_critical_section_nesting_allow>
    (void)nrf_802154_notify_receive_failed(error, m_rx_window_id, true);
 1008b7c:	4b04      	ldr	r3, [pc, #16]	; (1008b90 <receive_failed_notify+0x1c>)
 1008b7e:	4620      	mov	r0, r4
 1008b80:	2201      	movs	r2, #1
 1008b82:	6819      	ldr	r1, [r3, #0]
 1008b84:	f00a fe1a 	bl	10137bc <nrf_802154_notify_receive_failed>
}
 1008b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_nesting_deny();
 1008b8c:	f001 ba2c 	b.w	1009fe8 <nrf_802154_critical_section_nesting_deny>
 1008b90:	210033d4 	.word	0x210033d4

01008b94 <received_frame_notify_and_nesting_allow>:
{
 1008b94:	b510      	push	{r4, lr}
 1008b96:	4604      	mov	r4, r0
    nrf_802154_critical_section_nesting_allow();
 1008b98:	f001 fa6a 	bl	100a070 <nrf_802154_critical_section_nesting_allow>
    nrf_802154_notify_received(p_data, m_last_rssi, m_last_lqi);
 1008b9c:	4b05      	ldr	r3, [pc, #20]	; (1008bb4 <received_frame_notify_and_nesting_allow+0x20>)
 1008b9e:	4620      	mov	r0, r4
 1008ba0:	781a      	ldrb	r2, [r3, #0]
 1008ba2:	4b05      	ldr	r3, [pc, #20]	; (1008bb8 <received_frame_notify_and_nesting_allow+0x24>)
 1008ba4:	f993 1000 	ldrsb.w	r1, [r3]
 1008ba8:	f00a fe06 	bl	10137b8 <nrf_802154_notify_received>
}
 1008bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_nesting_deny();
 1008bb0:	f001 ba1a 	b.w	1009fe8 <nrf_802154_critical_section_nesting_deny>
 1008bb4:	21003be7 	.word	0x21003be7
 1008bb8:	21003be3 	.word	0x21003be3

01008bbc <state_set>:
    m_state = state;
 1008bbc:	4a01      	ldr	r2, [pc, #4]	; (1008bc4 <state_set+0x8>)
 1008bbe:	7010      	strb	r0, [r2, #0]
    request_preconditions_for_state(state);
 1008bc0:	f00a ba3b 	b.w	101303a <request_preconditions_for_state>
 1008bc4:	21003be2 	.word	0x21003be2

01008bc8 <transmit_failed_notify_and_nesting_allow>:
{
 1008bc8:	b538      	push	{r3, r4, r5, lr}
 1008bca:	4604      	mov	r4, r0
 1008bcc:	460d      	mov	r5, r1
    nrf_802154_critical_section_nesting_allow();
 1008bce:	f001 fa4f 	bl	100a070 <nrf_802154_critical_section_nesting_allow>
    transmit_failed_notify(mp_tx_data, error, p_meta);
 1008bd2:	4b05      	ldr	r3, [pc, #20]	; (1008be8 <transmit_failed_notify_and_nesting_allow+0x20>)
 1008bd4:	462a      	mov	r2, r5
 1008bd6:	4621      	mov	r1, r4
 1008bd8:	6818      	ldr	r0, [r3, #0]
 1008bda:	f00a fa35 	bl	1013048 <transmit_failed_notify>
}
 1008bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    nrf_802154_critical_section_nesting_deny();
 1008be2:	f001 ba01 	b.w	1009fe8 <nrf_802154_critical_section_nesting_deny>
 1008be6:	bf00      	nop
 1008be8:	210033f4 	.word	0x210033f4

01008bec <rx_data_clear>:
    (void)nrf_802154_frame_parser_data_init(mp_current_rx_buffer->data,
 1008bec:	2200      	movs	r2, #0
 1008bee:	4803      	ldr	r0, [pc, #12]	; (1008bfc <rx_data_clear+0x10>)
 1008bf0:	4611      	mov	r1, r2
 1008bf2:	4b03      	ldr	r3, [pc, #12]	; (1008c00 <rx_data_clear+0x14>)
 1008bf4:	6800      	ldr	r0, [r0, #0]
 1008bf6:	f00a bd39 	b.w	101366c <nrf_802154_frame_parser_data_init>
 1008bfa:	bf00      	nop
 1008bfc:	210033fc 	.word	0x210033fc
 1008c00:	210033d8 	.word	0x210033d8

01008c04 <tx_init>:
{
 1008c04:	b570      	push	{r4, r5, r6, lr}
    return m_rsch_timeslot_is_granted;
 1008c06:	4b1b      	ldr	r3, [pc, #108]	; (1008c74 <tx_init+0x70>)
{
 1008c08:	4606      	mov	r6, r0
    return m_rsch_timeslot_is_granted;
 1008c0a:	781b      	ldrb	r3, [r3, #0]
{
 1008c0c:	460d      	mov	r5, r1
    if (!timeslot_is_granted() || !nrf_802154_rsch_timeslot_request(
 1008c0e:	b913      	cbnz	r3, 1008c16 <tx_init+0x12>
        return false;
 1008c10:	2400      	movs	r4, #0
}
 1008c12:	4620      	mov	r0, r4
 1008c14:	bd70      	pop	{r4, r5, r6, pc}
            nrf_802154_tx_duration_get(p_data[0], cca, ack_is_requested(p_data))))
 1008c16:	7804      	ldrb	r4, [r0, #0]
 1008c18:	f00a fa25 	bl	1013066 <ack_is_requested>
 1008c1c:	1c63      	adds	r3, r4, #1
 1008c1e:	015b      	lsls	r3, r3, #5
    uint16_t us_time = MAX_RAMP_DOWN_TIME + TX_RAMP_UP_TIME + nrf_802154_frame_duration_get(
        psdu_length,
        true,
        true);

    if (ack_requested)
 1008c20:	bb08      	cbnz	r0, 1008c66 <tx_init+0x62>
    uint16_t us_time = MAX_RAMP_DOWN_TIME + TX_RAMP_UP_TIME + nrf_802154_frame_duration_get(
 1008c22:	f103 00ce 	add.w	r0, r3, #206	; 0xce
    {
        us_time += PHY_US_TIME_FROM_SYMBOLS(MAC_IMM_ACK_WAIT_SYMBOLS);
    }

    if (cca)
 1008c26:	b10d      	cbz	r5, 1008c2c <tx_init+0x28>
    {
        us_time += RX_RAMP_UP_TIME + RX_RAMP_DOWN_TIME + PHY_US_TIME_FROM_SYMBOLS(
 1008c28:	30a8      	adds	r0, #168	; 0xa8
 1008c2a:	b280      	uxth	r0, r0
    if (!timeslot_is_granted() || !nrf_802154_rsch_timeslot_request(
 1008c2c:	f00c faf7 	bl	101521e <nrf_802154_rsch_timeslot_request>
 1008c30:	2800      	cmp	r0, #0
 1008c32:	d0ed      	beq.n	1008c10 <tx_init+0xc>
    if (!are_preconditions_met())
 1008c34:	f7ff ff60 	bl	1008af8 <are_preconditions_met>
 1008c38:	4604      	mov	r4, r0
 1008c3a:	2800      	cmp	r0, #0
 1008c3c:	d0e8      	beq.n	1008c10 <tx_init+0xc>
    if (cca)
 1008c3e:	b1ad      	cbz	r5, 1008c6c <tx_init+0x68>
        nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_ready_event_handle_get());
 1008c40:	f002 fbbe 	bl	100b3c0 <nrf_802154_trx_radio_ready_event_handle_get>
        nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_phyend_event_handle_get());
 1008c44:	f008 ff54 	bl	1011af0 <nrf_802154_timer_coord_timestamp_prepare>
    m_flags.tx_with_cca = cca;
 1008c48:	4b0b      	ldr	r3, [pc, #44]	; (1008c78 <tx_init+0x74>)
    nrf_802154_trx_transmit_frame(nrf_802154_tx_work_buffer_get(p_data),
 1008c4a:	4630      	mov	r0, r6
    m_flags.tx_with_cca = cca;
 1008c4c:	781a      	ldrb	r2, [r3, #0]
 1008c4e:	f365 02c3 	bfi	r2, r5, #3, #1
 1008c52:	701a      	strb	r2, [r3, #0]
    nrf_802154_trx_transmit_frame(nrf_802154_tx_work_buffer_get(p_data),
 1008c54:	f002 fcd6 	bl	100b604 <nrf_802154_tx_work_buffer_get>
 1008c58:	4b08      	ldr	r3, [pc, #32]	; (1008c7c <tx_init+0x78>)
 1008c5a:	4629      	mov	r1, r5
 1008c5c:	781b      	ldrb	r3, [r3, #0]
 1008c5e:	4a08      	ldr	r2, [pc, #32]	; (1008c80 <tx_init+0x7c>)
 1008c60:	f001 ff84 	bl	100ab6c <nrf_802154_trx_transmit_frame>
    return true;
 1008c64:	e7d5      	b.n	1008c12 <tx_init+0xe>
        us_time += PHY_US_TIME_FROM_SYMBOLS(MAC_IMM_ACK_WAIT_SYMBOLS);
 1008c66:	f203 402e 	addw	r0, r3, #1070	; 0x42e
 1008c6a:	e7dc      	b.n	1008c26 <tx_init+0x22>
        nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_phyend_event_handle_get());
 1008c6c:	f002 fbac 	bl	100b3c8 <nrf_802154_trx_radio_phyend_event_handle_get>
 1008c70:	e7e8      	b.n	1008c44 <tx_init+0x40>
 1008c72:	bf00      	nop
 1008c74:	21003be0 	.word	0x21003be0
 1008c78:	21003be1 	.word	0x21003be1
 1008c7c:	21003bdd 	.word	0x21003bdd
 1008c80:	21003be4 	.word	0x21003be4

01008c84 <critical_section_can_be_processed_now>:
{
 1008c84:	b508      	push	{r3, lr}
    return m_rsch_timeslot_is_granted;
 1008c86:	4b06      	ldr	r3, [pc, #24]	; (1008ca0 <critical_section_can_be_processed_now+0x1c>)
 1008c88:	781b      	ldrb	r3, [r3, #0]
    return !timeslot_is_granted() || remaining_timeslot_time_is_enough_for_crit_sect();
 1008c8a:	b133      	cbz	r3, 1008c9a <critical_section_can_be_processed_now+0x16>
    return nrf_802154_rsch_timeslot_us_left_get() >= MAX_CRIT_SECT_TIME;
 1008c8c:	f00c fb13 	bl	10152b6 <nrf_802154_rsch_timeslot_us_left_get>
    return !timeslot_is_granted() || remaining_timeslot_time_is_enough_for_crit_sect();
 1008c90:	283b      	cmp	r0, #59	; 0x3b
 1008c92:	bf94      	ite	ls
 1008c94:	2000      	movls	r0, #0
 1008c96:	2001      	movhi	r0, #1
}
 1008c98:	bd08      	pop	{r3, pc}
    return !timeslot_is_granted() || remaining_timeslot_time_is_enough_for_crit_sect();
 1008c9a:	2001      	movs	r0, #1
 1008c9c:	e7fc      	b.n	1008c98 <critical_section_can_be_processed_now+0x14>
 1008c9e:	bf00      	nop
 1008ca0:	21003be0 	.word	0x21003be0

01008ca4 <on_rx_prestarted_timeout>:
{
 1008ca4:	b510      	push	{r4, lr}
        if (m_rx_prestarted_trig_count > 1)
 1008ca6:	4c11      	ldr	r4, [pc, #68]	; (1008cec <on_rx_prestarted_timeout+0x48>)
    nrf_802154_critical_section_forcefully_enter();
 1008ca8:	f00a fa92 	bl	10131d0 <nrf_802154_critical_section_forcefully_enter>
    nrf_802154_sl_ant_div_rx_preamble_timeout_notify();
 1008cac:	f00c fa46 	bl	101513c <nrf_802154_sl_ant_div_rx_preamble_timeout_notify>
        if (m_rx_prestarted_trig_count > 1)
 1008cb0:	7823      	ldrb	r3, [r4, #0]
 1008cb2:	2b01      	cmp	r3, #1
 1008cb4:	d917      	bls.n	1008ce6 <on_rx_prestarted_timeout+0x42>
            uint64_t now = nrf_802154_sl_timer_current_time_get();
 1008cb6:	f00c fb1f 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
            if (nrf_802154_sl_time64_is_in_future(now, m_rx_prestarted_timer.trigger_time))
 1008cba:	4b0d      	ldr	r3, [pc, #52]	; (1008cf0 <on_rx_prestarted_timeout+0x4c>)
 1008cbc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 1008cc0:	4290      	cmp	r0, r2
 1008cc2:	4199      	sbcs	r1, r3
 1008cc4:	d20f      	bcs.n	1008ce6 <on_rx_prestarted_timeout+0x42>
                m_rx_prestarted_trig_count = 1;
 1008cc6:	2301      	movs	r3, #1
 1008cc8:	7023      	strb	r3, [r4, #0]
                nrf_802154_sl_ant_div_rx_preamble_detected_notify();
 1008cca:	f00c fa38 	bl	101513e <nrf_802154_sl_ant_div_rx_preamble_detected_notify>
    if (nrf_802154_pib_coex_rx_request_mode_get() ==
 1008cce:	f001 fa8f 	bl	100a1f0 <nrf_802154_pib_coex_rx_request_mode_get>
 1008cd2:	2801      	cmp	r0, #1
 1008cd4:	d103      	bne.n	1008cde <on_rx_prestarted_timeout+0x3a>
        request_preconditions_for_state(m_state);
 1008cd6:	4b07      	ldr	r3, [pc, #28]	; (1008cf4 <on_rx_prestarted_timeout+0x50>)
 1008cd8:	7818      	ldrb	r0, [r3, #0]
 1008cda:	f00a f9ae 	bl	101303a <request_preconditions_for_state>
}
 1008cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_exit();
 1008ce2:	f001 b95f 	b.w	1009fa4 <nrf_802154_critical_section_exit>
        m_rx_prestarted_trig_count = 0;
 1008ce6:	2300      	movs	r3, #0
 1008ce8:	7023      	strb	r3, [r4, #0]
 1008cea:	e7f0      	b.n	1008cce <on_rx_prestarted_timeout+0x2a>
 1008cec:	21003bdc 	.word	0x21003bdc
 1008cf0:	21001110 	.word	0x21001110
 1008cf4:	21003be2 	.word	0x21003be2

01008cf8 <transmitted_frame_notify>:
{
 1008cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 1008cfa:	4604      	mov	r4, r0
 1008cfc:	460e      	mov	r6, r1
 1008cfe:	4615      	mov	r5, r2
 1008d00:	b087      	sub	sp, #28
    uint8_t                           * p_frame  = mp_tx_data;
 1008d02:	4b12      	ldr	r3, [pc, #72]	; (1008d4c <transmitted_frame_notify+0x54>)
    nrf_802154_transmit_done_metadata_t metadata = {0};
 1008d04:	2218      	movs	r2, #24
 1008d06:	2100      	movs	r1, #0
 1008d08:	4668      	mov	r0, sp
    uint8_t                           * p_frame  = mp_tx_data;
 1008d0a:	681f      	ldr	r7, [r3, #0]
    nrf_802154_transmit_done_metadata_t metadata = {0};
 1008d0c:	f009 fe81 	bl	1012a12 <memset>
    metadata.data.transmitted.p_ack = p_ack;
 1008d10:	9402      	str	r4, [sp, #8]
    metadata.data.transmitted.power = power;
 1008d12:	f88d 600d 	strb.w	r6, [sp, #13]
    metadata.data.transmitted.lqi   = lqi;
 1008d16:	f88d 500e 	strb.w	r5, [sp, #14]
    if (p_ack == NULL)
 1008d1a:	b14c      	cbz	r4, 1008d30 <transmitted_frame_notify+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1008d1c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1008d20:	b672      	cpsid	i
        nrf_802154_stat_timestamp_read(&metadata.data.transmitted.time, last_ack_end_timestamp);
 1008d22:	4a0b      	ldr	r2, [pc, #44]	; (1008d50 <transmitted_frame_notify+0x58>)
 1008d24:	e9d2 0110 	ldrd	r0, r1, [r2, #64]	; 0x40
 1008d28:	e9cd 0104 	strd	r0, r1, [sp, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1008d2c:	f383 8810 	msr	PRIMASK, r3
    nrf_802154_critical_section_nesting_allow();
 1008d30:	f001 f99e 	bl	100a070 <nrf_802154_critical_section_nesting_allow>
    nrf_802154_core_hooks_transmitted(p_frame);
 1008d34:	4638      	mov	r0, r7
 1008d36:	f00a fa30 	bl	101319a <nrf_802154_core_hooks_transmitted>
    nrf_802154_notify_transmitted(p_frame, &metadata);
 1008d3a:	4669      	mov	r1, sp
 1008d3c:	4638      	mov	r0, r7
 1008d3e:	f00a fd3f 	bl	10137c0 <nrf_802154_notify_transmitted>
    nrf_802154_critical_section_nesting_deny();
 1008d42:	f001 f951 	bl	1009fe8 <nrf_802154_critical_section_nesting_deny>
}
 1008d46:	b007      	add	sp, #28
 1008d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1008d4a:	bf00      	nop
 1008d4c:	210033f4 	.word	0x210033f4
 1008d50:	21001150 	.word	0x21001150

01008d54 <operation_terminated_update_total_times>:
    switch (trx_state)
 1008d54:	2803      	cmp	r0, #3
{
 1008d56:	b570      	push	{r4, r5, r6, lr}
    switch (trx_state)
 1008d58:	d001      	beq.n	1008d5e <operation_terminated_update_total_times+0xa>
 1008d5a:	2805      	cmp	r0, #5
 1008d5c:	d10f      	bne.n	1008d7e <operation_terminated_update_total_times+0x2a>
            t = timestamp - m_listening_start_hp_timestamp;
 1008d5e:	4b08      	ldr	r3, [pc, #32]	; (1008d80 <operation_terminated_update_total_times+0x2c>)
 1008d60:	681b      	ldr	r3, [r3, #0]
 1008d62:	1ac9      	subs	r1, r1, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1008d64:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1008d68:	b672      	cpsid	i
            nrf_802154_stat_totals_increment(total_listening_time, t);
 1008d6a:	4806      	ldr	r0, [pc, #24]	; (1008d84 <operation_terminated_update_total_times+0x30>)
 1008d6c:	e9d0 4500 	ldrd	r4, r5, [r0]
 1008d70:	190a      	adds	r2, r1, r4
 1008d72:	f145 0300 	adc.w	r3, r5, #0
 1008d76:	e9c0 2300 	strd	r2, r3, [r0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1008d7a:	f386 8810 	msr	PRIMASK, r6
}
 1008d7e:	bd70      	pop	{r4, r5, r6, pc}
 1008d80:	210033d0 	.word	0x210033d0
 1008d84:	21001138 	.word	0x21001138

01008d88 <rx_init>:
{
 1008d88:	b513      	push	{r0, r1, r4, lr}
    return m_rsch_timeslot_is_granted;
 1008d8a:	4b1c      	ldr	r3, [pc, #112]	; (1008dfc <rx_init+0x74>)
 1008d8c:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted())
 1008d8e:	b393      	cbz	r3, 1008df6 <rx_init+0x6e>
    if (!are_preconditions_met())
 1008d90:	f7ff feb2 	bl	1008af8 <are_preconditions_met>
 1008d94:	b378      	cbz	r0, 1008df6 <rx_init+0x6e>
    m_flags.frame_filtered        = false;
 1008d96:	4a1a      	ldr	r2, [pc, #104]	; (1008e00 <rx_init+0x78>)
 1008d98:	7813      	ldrb	r3, [r2, #0]
 1008d9a:	f023 0307 	bic.w	r3, r3, #7
 1008d9e:	7013      	strb	r3, [r2, #0]
    free_buffer = rx_buffer_is_available();
 1008da0:	f7ff fe7a 	bl	1008a98 <rx_buffer_is_available>
 1008da4:	4604      	mov	r4, r0
    nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 1008da6:	f7ff fe81 	bl	1008aac <rx_buffer_get>
 1008daa:	f001 fda3 	bl	100a8f4 <nrf_802154_trx_receive_buffer_set>
    nrf_802154_fal_tx_power_split_t split_power = {0};
 1008dae:	2300      	movs	r3, #0
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
 1008db0:	a801      	add	r0, sp, #4
    nrf_802154_fal_tx_power_split_t split_power = {0};
 1008db2:	f8ad 3004 	strh.w	r3, [sp, #4]
 1008db6:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
 1008dba:	f00a fbb6 	bl	101352a <nrf_802154_tx_power_split_pib_power_get>
    nrf_802154_trx_receive_frame(BCC_INIT / 8U,
 1008dbe:	4b11      	ldr	r3, [pc, #68]	; (1008e04 <rx_init+0x7c>)
 1008dc0:	aa01      	add	r2, sp, #4
 1008dc2:	7819      	ldrb	r1, [r3, #0]
 1008dc4:	2003      	movs	r0, #3
 1008dc6:	f001 fdc3 	bl	100a950 <nrf_802154_trx_receive_frame>
    m_listening_start_hp_timestamp = nrf_802154_hp_timer_current_time_get();
 1008dca:	f7ff fad5 	bl	1008378 <nrf_802154_hp_timer_current_time_get>
 1008dce:	4b0e      	ldr	r3, [pc, #56]	; (1008e08 <rx_init+0x80>)
 1008dd0:	6018      	str	r0, [r3, #0]
    nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_end_event_handle_get());
 1008dd2:	f002 faf1 	bl	100b3b8 <nrf_802154_trx_radio_end_event_handle_get>
 1008dd6:	f008 fe8b 	bl	1011af0 <nrf_802154_timer_coord_timestamp_prepare>
    if (!free_buffer)
 1008dda:	b93c      	cbnz	r4, 1008dec <rx_init+0x64>
        rx_buffer_in_use_set(nrf_802154_rx_buffer_free_find());
 1008ddc:	f001 faa2 	bl	100a324 <nrf_802154_rx_buffer_free_find>
    mp_current_rx_buffer = p_rx_buffer;
 1008de0:	4b0a      	ldr	r3, [pc, #40]	; (1008e0c <rx_init+0x84>)
 1008de2:	6018      	str	r0, [r3, #0]
        nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 1008de4:	f7ff fe62 	bl	1008aac <rx_buffer_get>
 1008de8:	f001 fd84 	bl	100a8f4 <nrf_802154_trx_receive_buffer_set>
    rx_data_clear();
 1008dec:	f7ff fefe 	bl	1008bec <rx_data_clear>
    mp_ack = NULL;
 1008df0:	2200      	movs	r2, #0
 1008df2:	4b07      	ldr	r3, [pc, #28]	; (1008e10 <rx_init+0x88>)
 1008df4:	601a      	str	r2, [r3, #0]
}
 1008df6:	b002      	add	sp, #8
 1008df8:	bd10      	pop	{r4, pc}
 1008dfa:	bf00      	nop
 1008dfc:	21003be0 	.word	0x21003be0
 1008e00:	21003be1 	.word	0x21003be1
 1008e04:	21003bde 	.word	0x21003bde
 1008e08:	210033d0 	.word	0x210033d0
 1008e0c:	210033fc 	.word	0x210033fc
 1008e10:	210033f8 	.word	0x210033f8

01008e14 <on_bad_ack>:

    return ack_match_check_version_not_2(p_tx_data, p_ack_data);
}

static void on_bad_ack(void)
{
 1008e14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    // We received either a frame with incorrect CRC or not an ACK frame or not matching ACK
    state_set(RADIO_STATE_RX);
 1008e16:	2002      	movs	r0, #2
 1008e18:	f7ff fed0 	bl	1008bbc <state_set>

    rx_init();
 1008e1c:	f7ff ffb4 	bl	1008d88 <rx_init>

    nrf_802154_transmit_done_metadata_t metadata = {};
 1008e20:	2218      	movs	r2, #24
 1008e22:	2100      	movs	r1, #0
 1008e24:	4668      	mov	r0, sp
 1008e26:	f009 fdf4 	bl	1012a12 <memset>

    nrf_802154_tx_work_buffer_original_frame_update(mp_tx_data, &metadata.frame_props);
 1008e2a:	4b06      	ldr	r3, [pc, #24]	; (1008e44 <on_bad_ack+0x30>)
 1008e2c:	4669      	mov	r1, sp
 1008e2e:	6818      	ldr	r0, [r3, #0]
 1008e30:	f002 fbf4 	bl	100b61c <nrf_802154_tx_work_buffer_original_frame_update>
    transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_INVALID_ACK, &metadata);
 1008e34:	4669      	mov	r1, sp
 1008e36:	2002      	movs	r0, #2
 1008e38:	f7ff fec6 	bl	1008bc8 <transmit_failed_notify_and_nesting_allow>

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1008e3c:	b007      	add	sp, #28
 1008e3e:	f85d fb04 	ldr.w	pc, [sp], #4
 1008e42:	bf00      	nop
 1008e44:	210033f4 	.word	0x210033f4

01008e48 <cca_init>:
{
 1008e48:	b508      	push	{r3, lr}
    return m_rsch_timeslot_is_granted;
 1008e4a:	4b07      	ldr	r3, [pc, #28]	; (1008e68 <cca_init+0x20>)
 1008e4c:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted() || !nrf_802154_rsch_timeslot_request(nrf_802154_cca_duration_get()))
 1008e4e:	b153      	cbz	r3, 1008e66 <cca_init+0x1e>
 1008e50:	20ae      	movs	r0, #174	; 0xae
 1008e52:	f00c f9e4 	bl	101521e <nrf_802154_rsch_timeslot_request>
 1008e56:	b130      	cbz	r0, 1008e66 <cca_init+0x1e>
    if (!are_preconditions_met())
 1008e58:	f7ff fe4e 	bl	1008af8 <are_preconditions_met>
 1008e5c:	b118      	cbz	r0, 1008e66 <cca_init+0x1e>
}
 1008e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_trx_standalone_cca();
 1008e62:	f002 b87b 	b.w	100af5c <nrf_802154_trx_standalone_cca>
}
 1008e66:	bd08      	pop	{r3, pc}
 1008e68:	21003be0 	.word	0x21003be0

01008e6c <continuous_carrier_init>:
{
 1008e6c:	b507      	push	{r0, r1, r2, lr}
    return m_rsch_timeslot_is_granted;
 1008e6e:	4b0a      	ldr	r3, [pc, #40]	; (1008e98 <continuous_carrier_init+0x2c>)
 1008e70:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted())
 1008e72:	b16b      	cbz	r3, 1008e90 <continuous_carrier_init+0x24>
    if (!are_preconditions_met())
 1008e74:	f7ff fe40 	bl	1008af8 <are_preconditions_met>
 1008e78:	b150      	cbz	r0, 1008e90 <continuous_carrier_init+0x24>
    nrf_802154_fal_tx_power_split_t split_power = {0};
 1008e7a:	2300      	movs	r3, #0
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
 1008e7c:	a801      	add	r0, sp, #4
    nrf_802154_fal_tx_power_split_t split_power = {0};
 1008e7e:	f8ad 3004 	strh.w	r3, [sp, #4]
 1008e82:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
 1008e86:	f00a fb50 	bl	101352a <nrf_802154_tx_power_split_pib_power_get>
    nrf_802154_trx_continuous_carrier(&split_power);
 1008e8a:	a801      	add	r0, sp, #4
 1008e8c:	f002 f88c 	bl	100afa8 <nrf_802154_trx_continuous_carrier>
}
 1008e90:	b003      	add	sp, #12
 1008e92:	f85d fb04 	ldr.w	pc, [sp], #4
 1008e96:	bf00      	nop
 1008e98:	21003be0 	.word	0x21003be0

01008e9c <modulated_carrier_init>:
{
 1008e9c:	b513      	push	{r0, r1, r4, lr}
    return m_rsch_timeslot_is_granted;
 1008e9e:	4b0a      	ldr	r3, [pc, #40]	; (1008ec8 <modulated_carrier_init+0x2c>)
{
 1008ea0:	4604      	mov	r4, r0
    return m_rsch_timeslot_is_granted;
 1008ea2:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted())
 1008ea4:	b173      	cbz	r3, 1008ec4 <modulated_carrier_init+0x28>
    if (!are_preconditions_met())
 1008ea6:	f7ff fe27 	bl	1008af8 <are_preconditions_met>
 1008eaa:	b158      	cbz	r0, 1008ec4 <modulated_carrier_init+0x28>
    nrf_802154_fal_tx_power_split_t split_power = {0};
 1008eac:	2300      	movs	r3, #0
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
 1008eae:	a801      	add	r0, sp, #4
    nrf_802154_fal_tx_power_split_t split_power = {0};
 1008eb0:	f8ad 3004 	strh.w	r3, [sp, #4]
 1008eb4:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
 1008eb8:	f00a fb37 	bl	101352a <nrf_802154_tx_power_split_pib_power_get>
    nrf_802154_trx_modulated_carrier(p_data, &split_power);
 1008ebc:	4620      	mov	r0, r4
 1008ebe:	a901      	add	r1, sp, #4
 1008ec0:	f002 f890 	bl	100afe4 <nrf_802154_trx_modulated_carrier>
}
 1008ec4:	b002      	add	sp, #8
 1008ec6:	bd10      	pop	{r4, pc}
 1008ec8:	21003be0 	.word	0x21003be0

01008ecc <ed_init>:
{
 1008ecc:	b510      	push	{r4, lr}
    return m_rsch_timeslot_is_granted;
 1008ece:	4b11      	ldr	r3, [pc, #68]	; (1008f14 <ed_init+0x48>)
 1008ed0:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted())
 1008ed2:	b1eb      	cbz	r3, 1008f10 <ed_init+0x44>
    if (!are_preconditions_met())
 1008ed4:	f7ff fe10 	bl	1008af8 <are_preconditions_met>
 1008ed8:	b1d0      	cbz	r0, 1008f10 <ed_init+0x44>
    nrf_802154_sl_ant_div_energy_detection_requested_notify(&m_ed_time_left);
 1008eda:	4c0f      	ldr	r4, [pc, #60]	; (1008f18 <ed_init+0x4c>)
 1008edc:	4620      	mov	r0, r4
 1008ede:	f00c f92f 	bl	1015140 <nrf_802154_sl_ant_div_energy_detection_requested_notify>
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
 1008ee2:	f00c f9e8 	bl	10152b6 <nrf_802154_rsch_timeslot_us_left_get>
    if (iters_left_in_timeslot > ED_ITERS_OVERHEAD)
 1008ee6:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
 1008eea:	d311      	bcc.n	1008f10 <ed_init+0x44>
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
 1008eec:	6822      	ldr	r2, [r4, #0]
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
 1008eee:	09c0      	lsrs	r0, r0, #7
        iters_left_in_timeslot -= ED_ITERS_OVERHEAD;
 1008ef0:	1e83      	subs	r3, r0, #2
        if (requested_iters < iters_left_in_timeslot)
 1008ef2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
 1008ef6:	ea4f 10d2 	mov.w	r0, r2, lsr #7
            *p_requested_ed_time_us = 0U;
 1008efa:	bf8c      	ite	hi
 1008efc:	2200      	movhi	r2, #0
            *p_requested_ed_time_us = *p_requested_ed_time_us -
 1008efe:	eba2 12c3 	subls.w	r2, r2, r3, lsl #7
            requested_iters = iters_left_in_timeslot;
 1008f02:	6022      	str	r2, [r4, #0]
            *p_requested_ed_time_us = *p_requested_ed_time_us -
 1008f04:	bf98      	it	ls
 1008f06:	4618      	movls	r0, r3
}
 1008f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_trx_energy_detection(trx_ed_count);
 1008f0c:	f002 b892 	b.w	100b034 <nrf_802154_trx_energy_detection>
}
 1008f10:	bd10      	pop	{r4, pc}
 1008f12:	bf00      	nop
 1008f14:	21003be0 	.word	0x21003be0
 1008f18:	210033f0 	.word	0x210033f0

01008f1c <on_preconditions_approved>:
{
 1008f1c:	b510      	push	{r4, lr}
 1008f1e:	4604      	mov	r4, r0
    trx_abort();
 1008f20:	f00a f8dc 	bl	10130dc <trx_abort>
    switch (state)
 1008f24:	1ea0      	subs	r0, r4, #2
 1008f26:	2808      	cmp	r0, #8
 1008f28:	d825      	bhi.n	1008f76 <on_preconditions_approved+0x5a>
 1008f2a:	e8df f000 	tbb	[pc, r0]
 1008f2e:	2405      	.short	0x2405
 1008f30:	12241009 	.word	0x12241009
 1008f34:	1a16      	.short	0x1a16
 1008f36:	1e          	.byte	0x1e
 1008f37:	00          	.byte	0x00
}
 1008f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            rx_init();
 1008f3c:	f7ff bf24 	b.w	1008d88 <rx_init>
            (void)tx_init(mp_tx_data, true);
 1008f40:	2101      	movs	r1, #1
}
 1008f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (void)tx_init(mp_tx_data, false);
 1008f46:	4b0c      	ldr	r3, [pc, #48]	; (1008f78 <on_preconditions_approved+0x5c>)
 1008f48:	6818      	ldr	r0, [r3, #0]
 1008f4a:	f7ff be5b 	b.w	1008c04 <tx_init>
 1008f4e:	2100      	movs	r1, #0
 1008f50:	e7f7      	b.n	1008f42 <on_preconditions_approved+0x26>
}
 1008f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ed_init();
 1008f56:	f7ff bfb9 	b.w	1008ecc <ed_init>
}
 1008f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            cca_init();
 1008f5e:	f7ff bf73 	b.w	1008e48 <cca_init>
}
 1008f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            continuous_carrier_init();
 1008f66:	f7ff bf81 	b.w	1008e6c <continuous_carrier_init>
            modulated_carrier_init(mp_tx_data);
 1008f6a:	4b03      	ldr	r3, [pc, #12]	; (1008f78 <on_preconditions_approved+0x5c>)
}
 1008f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            modulated_carrier_init(mp_tx_data);
 1008f70:	6818      	ldr	r0, [r3, #0]
 1008f72:	f7ff bf93 	b.w	1008e9c <modulated_carrier_init>
}
 1008f76:	bd10      	pop	{r4, pc}
 1008f78:	210033f4 	.word	0x210033f4

01008f7c <operation_terminated_notify>:
{
 1008f7c:	b510      	push	{r4, lr}
    switch (state)
 1008f7e:	3802      	subs	r0, #2
{
 1008f80:	b086      	sub	sp, #24
    switch (state)
 1008f82:	2806      	cmp	r0, #6
 1008f84:	d833      	bhi.n	1008fee <operation_terminated_notify+0x72>
 1008f86:	e8df f000 	tbb	[pc, r0]
 1008f8a:	0e04      	.short	0x0e04
 1008f8c:	34232323 	.word	0x34232323
 1008f90:	3a          	.byte	0x3a
 1008f91:	00          	.byte	0x00
            if (receiving_psdu_now)
 1008f92:	b361      	cbz	r1, 1008fee <operation_terminated_notify+0x72>
                (void)nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_ABORTED,
 1008f94:	2201      	movs	r2, #1
 1008f96:	2006      	movs	r0, #6
 1008f98:	4b1c      	ldr	r3, [pc, #112]	; (100900c <operation_terminated_notify+0x90>)
 1008f9a:	6819      	ldr	r1, [r3, #0]
}
 1008f9c:	b006      	add	sp, #24
 1008f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                (void)nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_ABORTED,
 1008fa2:	f00a bc0b 	b.w	10137bc <nrf_802154_notify_receive_failed>
            mp_current_rx_buffer->free = false;
 1008fa6:	2200      	movs	r2, #0
 1008fa8:	4c19      	ldr	r4, [pc, #100]	; (1009010 <operation_terminated_notify+0x94>)
            nrf_802154_core_hooks_tx_ack_failed(mp_ack, NRF_802154_TX_ERROR_ABORTED);
 1008faa:	2106      	movs	r1, #6
            mp_current_rx_buffer->free = false;
 1008fac:	6823      	ldr	r3, [r4, #0]
 1008fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            nrf_802154_core_hooks_tx_ack_failed(mp_ack, NRF_802154_TX_ERROR_ABORTED);
 1008fb2:	4b18      	ldr	r3, [pc, #96]	; (1009014 <operation_terminated_notify+0x98>)
 1008fb4:	6818      	ldr	r0, [r3, #0]
 1008fb6:	f00a f8f9 	bl	10131ac <nrf_802154_core_hooks_tx_ack_failed>
    nrf_802154_notify_received(p_data, m_last_rssi, m_last_lqi);
 1008fba:	4b17      	ldr	r3, [pc, #92]	; (1009018 <operation_terminated_notify+0x9c>)
 1008fbc:	6820      	ldr	r0, [r4, #0]
 1008fbe:	781a      	ldrb	r2, [r3, #0]
 1008fc0:	4b16      	ldr	r3, [pc, #88]	; (100901c <operation_terminated_notify+0xa0>)
 1008fc2:	f993 1000 	ldrsb.w	r1, [r3]
}
 1008fc6:	b006      	add	sp, #24
 1008fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_notify_received(p_data, m_last_rssi, m_last_lqi);
 1008fcc:	f00a bbf4 	b.w	10137b8 <nrf_802154_notify_received>
            nrf_802154_tx_work_buffer_original_frame_update(mp_tx_data, &metadata.frame_props);
 1008fd0:	4c13      	ldr	r4, [pc, #76]	; (1009020 <operation_terminated_notify+0xa4>)
            nrf_802154_transmit_done_metadata_t metadata = {};
 1008fd2:	2218      	movs	r2, #24
 1008fd4:	2100      	movs	r1, #0
 1008fd6:	4668      	mov	r0, sp
 1008fd8:	f009 fd1b 	bl	1012a12 <memset>
            nrf_802154_tx_work_buffer_original_frame_update(mp_tx_data, &metadata.frame_props);
 1008fdc:	4669      	mov	r1, sp
 1008fde:	6820      	ldr	r0, [r4, #0]
 1008fe0:	f002 fb1c 	bl	100b61c <nrf_802154_tx_work_buffer_original_frame_update>
            transmit_failed_notify(mp_tx_data, NRF_802154_TX_ERROR_ABORTED, &metadata);
 1008fe4:	466a      	mov	r2, sp
 1008fe6:	2106      	movs	r1, #6
 1008fe8:	6820      	ldr	r0, [r4, #0]
 1008fea:	f00a f82d 	bl	1013048 <transmit_failed_notify>
}
 1008fee:	b006      	add	sp, #24
 1008ff0:	bd10      	pop	{r4, pc}
            nrf_802154_notify_energy_detection_failed(NRF_802154_ED_ERROR_ABORTED);
 1008ff2:	2001      	movs	r0, #1
}
 1008ff4:	b006      	add	sp, #24
 1008ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            nrf_802154_notify_energy_detection_failed(NRF_802154_ED_ERROR_ABORTED);
 1008ffa:	f00a bbf0 	b.w	10137de <nrf_802154_notify_energy_detection_failed>
            nrf_802154_notify_cca_failed(NRF_802154_CCA_ERROR_ABORTED);
 1008ffe:	2001      	movs	r0, #1
}
 1009000:	b006      	add	sp, #24
 1009002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            nrf_802154_notify_cca_failed(NRF_802154_CCA_ERROR_ABORTED);
 1009006:	f00a bbee 	b.w	10137e6 <nrf_802154_notify_cca_failed>
 100900a:	bf00      	nop
 100900c:	210033d4 	.word	0x210033d4
 1009010:	210033fc 	.word	0x210033fc
 1009014:	210033f8 	.word	0x210033f8
 1009018:	21003be7 	.word	0x21003be7
 100901c:	21003be3 	.word	0x21003be3
 1009020:	210033f4 	.word	0x210033f4

01009024 <current_operation_terminate>:
{
 1009024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1009028:	4607      	mov	r7, r0
 100902a:	4690      	mov	r8, r2
    bool result = nrf_802154_core_hooks_terminate(term_lvl, req_orig);
 100902c:	f000 ff5c 	bl	1009ee8 <nrf_802154_core_hooks_terminate>
    if (result)
 1009030:	4605      	mov	r5, r0
 1009032:	2800      	cmp	r0, #0
 1009034:	d034      	beq.n	10090a0 <current_operation_terminate+0x7c>
        if (m_state == RADIO_STATE_RX)
 1009036:	4c1c      	ldr	r4, [pc, #112]	; (10090a8 <current_operation_terminate+0x84>)
 1009038:	7823      	ldrb	r3, [r4, #0]
 100903a:	2b02      	cmp	r3, #2
 100903c:	d10d      	bne.n	100905a <current_operation_terminate+0x36>
            receiving_psdu_now = nrf_802154_trx_psdu_is_being_received();
 100903e:	f001 fc43 	bl	100a8c8 <nrf_802154_trx_psdu_is_being_received>
 1009042:	4606      	mov	r6, r0
        result = can_terminate_current_operation(m_state, term_lvl, receiving_psdu_now);
 1009044:	7823      	ldrb	r3, [r4, #0]
    switch (state)
 1009046:	2b0a      	cmp	r3, #10
 1009048:	d82a      	bhi.n	10090a0 <current_operation_terminate+0x7c>
 100904a:	e8df f003 	tbb	[pc, r3]
 100904e:	0a0a      	.short	0x0a0a
 1009050:	27272708 	.word	0x27272708
 1009054:	0a272727 	.word	0x0a272727
 1009058:	0a          	.byte	0x0a
 1009059:	00          	.byte	0x00
        bool receiving_psdu_now = false;
 100905a:	2600      	movs	r6, #0
 100905c:	e7f2      	b.n	1009044 <current_operation_terminate+0x20>
            result = (term_lvl >= NRF_802154_TERM_802154) || !receiving_psdu_now;
 100905e:	b907      	cbnz	r7, 1009062 <current_operation_terminate+0x3e>
 1009060:	b9f6      	cbnz	r6, 10090a0 <current_operation_terminate+0x7c>
            trx_abort();
 1009062:	f00a f83b 	bl	10130dc <trx_abort>
            if (m_state == RADIO_STATE_RX)
 1009066:	7823      	ldrb	r3, [r4, #0]
 1009068:	2b02      	cmp	r3, #2
 100906a:	d10a      	bne.n	1009082 <current_operation_terminate+0x5e>
                m_rx_prestarted_trig_count = 0;
 100906c:	2200      	movs	r2, #0
 100906e:	4b0f      	ldr	r3, [pc, #60]	; (10090ac <current_operation_terminate+0x88>)
                (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
 1009070:	480f      	ldr	r0, [pc, #60]	; (10090b0 <current_operation_terminate+0x8c>)
                m_rx_prestarted_trig_count = 0;
 1009072:	701a      	strb	r2, [r3, #0]
                (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
 1009074:	f008 fc56 	bl	1011924 <nrf_802154_sl_timer_remove>
                nrf_802154_sl_ant_div_rx_aborted_notify();
 1009078:	f00c f85f 	bl	101513a <nrf_802154_sl_ant_div_rx_aborted_notify>
                request_preconditions_for_state(m_state);
 100907c:	7820      	ldrb	r0, [r4, #0]
 100907e:	f009 ffdc 	bl	101303a <request_preconditions_for_state>
            if (m_state == RADIO_STATE_ED)
 1009082:	7823      	ldrb	r3, [r4, #0]
 1009084:	2b07      	cmp	r3, #7
 1009086:	d101      	bne.n	100908c <current_operation_terminate+0x68>
                nrf_802154_sl_ant_div_energy_detection_aborted_notify();
 1009088:	f00c f85b 	bl	1015142 <nrf_802154_sl_ant_div_energy_detection_aborted_notify>
            if (notify)
 100908c:	f1b8 0f00 	cmp.w	r8, #0
 1009090:	d007      	beq.n	10090a2 <current_operation_terminate+0x7e>
                operation_terminated_notify(m_state, receiving_psdu_now);
 1009092:	4631      	mov	r1, r6
 1009094:	7820      	ldrb	r0, [r4, #0]
 1009096:	f7ff ff71 	bl	1008f7c <operation_terminated_notify>
 100909a:	e002      	b.n	10090a2 <current_operation_terminate+0x7e>
        if (result)
 100909c:	2f00      	cmp	r7, #0
 100909e:	d1e0      	bne.n	1009062 <current_operation_terminate+0x3e>
        bool receiving_psdu_now = false;
 10090a0:	2500      	movs	r5, #0
}
 10090a2:	4628      	mov	r0, r5
 10090a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10090a8:	21003be2 	.word	0x21003be2
 10090ac:	21003bdc 	.word	0x21003bdc
 10090b0:	21001110 	.word	0x21001110

010090b4 <nrf_802154_rsch_crit_sect_prio_changed>:
{
 10090b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    rsch_prio_t old_prio = m_rsch_priority;
 10090b6:	4a6d      	ldr	r2, [pc, #436]	; (100926c <nrf_802154_rsch_crit_sect_prio_changed+0x1b8>)
{
 10090b8:	4604      	mov	r4, r0
    rsch_prio_t old_prio = m_rsch_priority;
 10090ba:	7813      	ldrb	r3, [r2, #0]
{
 10090bc:	b087      	sub	sp, #28
    m_rsch_priority = prio;
 10090be:	7010      	strb	r0, [r2, #0]
    if ((old_prio == RSCH_PRIO_IDLE) && (prio != RSCH_PRIO_IDLE))
 10090c0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 10090c4:	b98b      	cbnz	r3, 10090ea <nrf_802154_rsch_crit_sect_prio_changed+0x36>
 10090c6:	4d6a      	ldr	r5, [pc, #424]	; (1009270 <nrf_802154_rsch_crit_sect_prio_changed+0x1bc>)
 10090c8:	2800      	cmp	r0, #0
 10090ca:	d072      	beq.n	10091b2 <nrf_802154_rsch_crit_sect_prio_changed+0xfe>
    nrf_802154_trx_enable();
 10090cc:	f001 fad2 	bl	100a674 <nrf_802154_trx_enable>
    m_rsch_timeslot_is_granted = true;
 10090d0:	2201      	movs	r2, #1
 10090d2:	4b68      	ldr	r3, [pc, #416]	; (1009274 <nrf_802154_rsch_crit_sect_prio_changed+0x1c0>)
 10090d4:	701a      	strb	r2, [r3, #0]
    nrf_802154_timer_coord_start();
 10090d6:	f008 fcd5 	bl	1011a84 <nrf_802154_timer_coord_start>
    int_fast8_t transition = action_needed(old_prio, prio, m_state);
 10090da:	7828      	ldrb	r0, [r5, #0]
    return (min_required_rsch_prio(state) <= prio);
 10090dc:	f7ff fcf0 	bl	1008ac0 <min_required_rsch_prio>
    if (old_prio_allows && !new_prio_allows)
 10090e0:	2800      	cmp	r0, #0
 10090e2:	f040 8095 	bne.w	1009210 <nrf_802154_rsch_crit_sect_prio_changed+0x15c>
}
 10090e6:	b007      	add	sp, #28
 10090e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if ((old_prio != RSCH_PRIO_IDLE) && (prio == RSCH_PRIO_IDLE))
 10090ea:	2800      	cmp	r0, #0
 10090ec:	d165      	bne.n	10091ba <nrf_802154_rsch_crit_sect_prio_changed+0x106>
    return m_rsch_timeslot_is_granted;
 10090ee:	4b61      	ldr	r3, [pc, #388]	; (1009274 <nrf_802154_rsch_crit_sect_prio_changed+0x1c0>)
 10090f0:	781a      	ldrb	r2, [r3, #0]
    if (timeslot_is_granted())
 10090f2:	2a00      	cmp	r2, #0
 10090f4:	d0f7      	beq.n	10090e6 <nrf_802154_rsch_crit_sect_prio_changed+0x32>
        if (m_state == RADIO_STATE_RX)
 10090f6:	4e5e      	ldr	r6, [pc, #376]	; (1009270 <nrf_802154_rsch_crit_sect_prio_changed+0x1bc>)
        m_rsch_timeslot_is_granted = false;
 10090f8:	7018      	strb	r0, [r3, #0]
        if (m_state == RADIO_STATE_RX)
 10090fa:	7833      	ldrb	r3, [r6, #0]
 10090fc:	2b02      	cmp	r3, #2
 10090fe:	d102      	bne.n	1009106 <nrf_802154_rsch_crit_sect_prio_changed+0x52>
            receiving_psdu_now = nrf_802154_trx_psdu_is_being_received();
 1009100:	f001 fbe2 	bl	100a8c8 <nrf_802154_trx_psdu_is_being_received>
 1009104:	4604      	mov	r4, r0
    trx_state_t trx_state       = nrf_802154_trx_state_get();
 1009106:	f001 feff 	bl	100af08 <nrf_802154_trx_state_get>
    switch (trx_state)
 100910a:	2803      	cmp	r0, #3
    trx_state_t trx_state       = nrf_802154_trx_state_get();
 100910c:	4605      	mov	r5, r0
    switch (trx_state)
 100910e:	d001      	beq.n	1009114 <nrf_802154_rsch_crit_sect_prio_changed+0x60>
 1009110:	2805      	cmp	r0, #5
 1009112:	d118      	bne.n	1009146 <nrf_802154_rsch_crit_sect_prio_changed+0x92>
    nrf_802154_trx_disable();
 1009114:	f001 fb3a 	bl	100a78c <nrf_802154_trx_disable>
        uint32_t timestamp = nrf_802154_hp_timer_current_time_get();
 1009118:	f7ff f92e 	bl	1008378 <nrf_802154_hp_timer_current_time_get>
 100911c:	4601      	mov	r1, r0
        operation_terminated_update_total_times(trx_state, timestamp);
 100911e:	4628      	mov	r0, r5
 1009120:	f7ff fe18 	bl	1008d54 <operation_terminated_update_total_times>
        nrf_802154_timer_coord_stop();
 1009124:	f008 fcd4 	bl	1011ad0 <nrf_802154_timer_coord_stop>
        nrf_802154_rsch_continuous_ended();
 1009128:	f008 fa3a 	bl	10115a0 <nrf_802154_rsch_continuous_ended>
        result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_RSCH);
 100912c:	2102      	movs	r1, #2
 100912e:	2001      	movs	r0, #1
 1009130:	f000 feda 	bl	1009ee8 <nrf_802154_core_hooks_terminate>
        switch (m_state)
 1009134:	7833      	ldrb	r3, [r6, #0]
 1009136:	3b01      	subs	r3, #1
 1009138:	2b05      	cmp	r3, #5
 100913a:	d8d4      	bhi.n	10090e6 <nrf_802154_rsch_crit_sect_prio_changed+0x32>
 100913c:	e8df f003 	tbb	[pc, r3]
 1009140:	27140c06 	.word	0x27140c06
 1009144:	2727      	.short	0x2727
    nrf_802154_trx_disable();
 1009146:	f001 fb21 	bl	100a78c <nrf_802154_trx_disable>
    if (update_required)
 100914a:	e7eb      	b.n	1009124 <nrf_802154_rsch_crit_sect_prio_changed+0x70>
                state_set(RADIO_STATE_SLEEP);
 100914c:	2000      	movs	r0, #0
}
 100914e:	b007      	add	sp, #28
 1009150:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                state_set(RADIO_STATE_SLEEP);
 1009154:	f7ff bd32 	b.w	1008bbc <state_set>
                if (receiving_psdu_now)
 1009158:	2c00      	cmp	r4, #0
 100915a:	d0c4      	beq.n	10090e6 <nrf_802154_rsch_crit_sect_prio_changed+0x32>
                    receive_failed_notify(NRF_802154_RX_ERROR_TIMESLOT_ENDED);
 100915c:	2005      	movs	r0, #5
}
 100915e:	b007      	add	sp, #28
 1009160:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                    receive_failed_notify(NRF_802154_RX_ERROR_TIMESLOT_ENDED);
 1009164:	f7ff bd06 	b.w	1008b74 <receive_failed_notify>
                state_set(RADIO_STATE_RX);
 1009168:	2002      	movs	r0, #2
 100916a:	f7ff fd27 	bl	1008bbc <state_set>
                mp_current_rx_buffer->free = false;
 100916e:	2200      	movs	r2, #0
 1009170:	4c41      	ldr	r4, [pc, #260]	; (1009278 <nrf_802154_rsch_crit_sect_prio_changed+0x1c4>)
                nrf_802154_core_hooks_tx_ack_failed(mp_ack, NRF_802154_TX_ERROR_TIMESLOT_ENDED);
 1009172:	2104      	movs	r1, #4
                mp_current_rx_buffer->free = false;
 1009174:	6823      	ldr	r3, [r4, #0]
 1009176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                nrf_802154_core_hooks_tx_ack_failed(mp_ack, NRF_802154_TX_ERROR_TIMESLOT_ENDED);
 100917a:	4b40      	ldr	r3, [pc, #256]	; (100927c <nrf_802154_rsch_crit_sect_prio_changed+0x1c8>)
 100917c:	6818      	ldr	r0, [r3, #0]
 100917e:	f00a f815 	bl	10131ac <nrf_802154_core_hooks_tx_ack_failed>
                received_frame_notify_and_nesting_allow(mp_current_rx_buffer->data);
 1009182:	6820      	ldr	r0, [r4, #0]
}
 1009184:	b007      	add	sp, #28
 1009186:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                received_frame_notify_and_nesting_allow(mp_current_rx_buffer->data);
 100918a:	f7ff bd03 	b.w	1008b94 <received_frame_notify_and_nesting_allow>
                state_set(RADIO_STATE_RX);
 100918e:	2002      	movs	r0, #2
 1009190:	f7ff fd14 	bl	1008bbc <state_set>
                nrf_802154_transmit_done_metadata_t metadata = {};
 1009194:	2218      	movs	r2, #24
 1009196:	2100      	movs	r1, #0
 1009198:	4668      	mov	r0, sp
 100919a:	f009 fc3a 	bl	1012a12 <memset>
                nrf_802154_tx_work_buffer_original_frame_update(mp_tx_data, &metadata.frame_props);
 100919e:	4b38      	ldr	r3, [pc, #224]	; (1009280 <nrf_802154_rsch_crit_sect_prio_changed+0x1cc>)
 10091a0:	4669      	mov	r1, sp
 10091a2:	6818      	ldr	r0, [r3, #0]
 10091a4:	f002 fa3a 	bl	100b61c <nrf_802154_tx_work_buffer_original_frame_update>
                transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_TIMESLOT_ENDED,
 10091a8:	4669      	mov	r1, sp
 10091aa:	2004      	movs	r0, #4
 10091ac:	f7ff fd0c 	bl	1008bc8 <transmit_failed_notify_and_nesting_allow>
            break;
 10091b0:	e799      	b.n	10090e6 <nrf_802154_rsch_crit_sect_prio_changed+0x32>
        nrf_802154_rsch_continuous_ended();
 10091b2:	f008 f9f5 	bl	10115a0 <nrf_802154_rsch_continuous_ended>
    int_fast8_t transition = action_needed(old_prio, prio, m_state);
 10091b6:	782b      	ldrb	r3, [r5, #0]
    if (old_prio_allows && !new_prio_allows)
 10091b8:	e795      	b.n	10090e6 <nrf_802154_rsch_crit_sect_prio_changed+0x32>
    int_fast8_t transition = action_needed(old_prio, prio, m_state);
 10091ba:	4f2d      	ldr	r7, [pc, #180]	; (1009270 <nrf_802154_rsch_crit_sect_prio_changed+0x1bc>)
 10091bc:	7838      	ldrb	r0, [r7, #0]
    return (min_required_rsch_prio(state) <= prio);
 10091be:	f7ff fc7f 	bl	1008ac0 <min_required_rsch_prio>
    if (old_prio_allows && !new_prio_allows)
 10091c2:	4281      	cmp	r1, r0
 10091c4:	d32b      	bcc.n	100921e <nrf_802154_rsch_crit_sect_prio_changed+0x16a>
 10091c6:	4284      	cmp	r4, r0
 10091c8:	d28d      	bcs.n	10090e6 <nrf_802154_rsch_crit_sect_prio_changed+0x32>
    result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_CORE);
 10091ca:	2101      	movs	r1, #1
        on_preconditions_denied(m_state);
 10091cc:	783d      	ldrb	r5, [r7, #0]
    result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_CORE);
 10091ce:	4608      	mov	r0, r1
        on_preconditions_denied(m_state);
 10091d0:	b2ed      	uxtb	r5, r5
    result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_CORE);
 10091d2:	f000 fe89 	bl	1009ee8 <nrf_802154_core_hooks_terminate>
    if (state == RADIO_STATE_RX)
 10091d6:	2d02      	cmp	r5, #2
 10091d8:	d131      	bne.n	100923e <nrf_802154_rsch_crit_sect_prio_changed+0x18a>
        receiving_psdu_now = nrf_802154_trx_psdu_is_being_received();
 10091da:	f001 fb75 	bl	100a8c8 <nrf_802154_trx_psdu_is_being_received>
 10091de:	4606      	mov	r6, r0
    trx_abort();
 10091e0:	f009 ff7c 	bl	10130dc <trx_abort>
            if (receiving_psdu_now)
 10091e4:	b396      	cbz	r6, 100924c <nrf_802154_rsch_crit_sect_prio_changed+0x198>
                receive_failed_notify(NRF_802154_RX_ERROR_ABORTED);
 10091e6:	2006      	movs	r0, #6
 10091e8:	f7ff fcc4 	bl	1008b74 <receive_failed_notify>
    operation_terminated_notify(state, receiving_psdu_now);
 10091ec:	4631      	mov	r1, r6
 10091ee:	4628      	mov	r0, r5
 10091f0:	f7ff fec4 	bl	1008f7c <operation_terminated_notify>
        radio_state_t new_state = m_state;
 10091f4:	7839      	ldrb	r1, [r7, #0]
 10091f6:	b2c9      	uxtb	r1, r1
    return (min_required_rsch_prio(state) <= prio);
 10091f8:	4608      	mov	r0, r1
 10091fa:	f7ff fc61 	bl	1008ac0 <min_required_rsch_prio>
        if (is_state_allowed_for_prio(prio, new_state))
 10091fe:	4284      	cmp	r4, r0
 1009200:	f4ff af71 	bcc.w	10090e6 <nrf_802154_rsch_crit_sect_prio_changed+0x32>
            on_preconditions_approved(new_state);
 1009204:	4608      	mov	r0, r1
}
 1009206:	b007      	add	sp, #28
 1009208:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            on_preconditions_approved(m_state);
 100920c:	f7ff be86 	b.w	1008f1c <on_preconditions_approved>
    else if (!old_prio_allows && new_prio_allows)
 1009210:	4284      	cmp	r4, r0
 1009212:	f4ff af68 	bcc.w	10090e6 <nrf_802154_rsch_crit_sect_prio_changed+0x32>
    bool current_state_is_cca_tx        = (m_state == RADIO_STATE_CCA_TX);
 1009216:	782b      	ldrb	r3, [r5, #0]
            on_preconditions_approved(m_state);
 1009218:	4b15      	ldr	r3, [pc, #84]	; (1009270 <nrf_802154_rsch_crit_sect_prio_changed+0x1bc>)
 100921a:	7818      	ldrb	r0, [r3, #0]
 100921c:	e7f3      	b.n	1009206 <nrf_802154_rsch_crit_sect_prio_changed+0x152>
    else if (!old_prio_allows && new_prio_allows)
 100921e:	4284      	cmp	r4, r0
 1009220:	f4ff af61 	bcc.w	10090e6 <nrf_802154_rsch_crit_sect_prio_changed+0x32>
    bool current_state_is_cca_tx        = (m_state == RADIO_STATE_CCA_TX);
 1009224:	783b      	ldrb	r3, [r7, #0]
    bool coex_tx_request_mode_allows    = (m_coex_tx_request_mode ==
 1009226:	4a17      	ldr	r2, [pc, #92]	; (1009284 <nrf_802154_rsch_crit_sect_prio_changed+0x1d0>)
            current_state_is_cca_tx &&
 1009228:	2902      	cmp	r1, #2
    bool coex_tx_request_mode_allows    = (m_coex_tx_request_mode ==
 100922a:	7812      	ldrb	r2, [r2, #0]
    bool current_state_is_cca_tx        = (m_state == RADIO_STATE_CCA_TX);
 100922c:	b2db      	uxtb	r3, r3
            current_state_is_cca_tx &&
 100922e:	d1f3      	bne.n	1009218 <nrf_802154_rsch_crit_sect_prio_changed+0x164>
    return (only_coex_was_unapproved &&
 1009230:	2c04      	cmp	r4, #4
 1009232:	d1f1      	bne.n	1009218 <nrf_802154_rsch_crit_sect_prio_changed+0x164>
            all_preconditions_are_approved &&
 1009234:	2b04      	cmp	r3, #4
 1009236:	d1ef      	bne.n	1009218 <nrf_802154_rsch_crit_sect_prio_changed+0x164>
            current_state_is_cca_tx &&
 1009238:	2a03      	cmp	r2, #3
 100923a:	d1ed      	bne.n	1009218 <nrf_802154_rsch_crit_sect_prio_changed+0x164>
 100923c:	e753      	b.n	10090e6 <nrf_802154_rsch_crit_sect_prio_changed+0x32>
    trx_abort();
 100923e:	f009 ff4d 	bl	10130dc <trx_abort>
    switch (state)
 1009242:	2d04      	cmp	r5, #4
 1009244:	d00b      	beq.n	100925e <nrf_802154_rsch_crit_sect_prio_changed+0x1aa>
 1009246:	d803      	bhi.n	1009250 <nrf_802154_rsch_crit_sect_prio_changed+0x19c>
 1009248:	2d03      	cmp	r5, #3
 100924a:	d004      	beq.n	1009256 <nrf_802154_rsch_crit_sect_prio_changed+0x1a2>
        bool receiving_psdu_now = false;
 100924c:	2600      	movs	r6, #0
 100924e:	e7cd      	b.n	10091ec <nrf_802154_rsch_crit_sect_prio_changed+0x138>
    switch (state)
 1009250:	1f6b      	subs	r3, r5, #5
 1009252:	2b01      	cmp	r3, #1
 1009254:	d8fa      	bhi.n	100924c <nrf_802154_rsch_crit_sect_prio_changed+0x198>
            state_set(RADIO_STATE_RX);
 1009256:	2002      	movs	r0, #2
 1009258:	f7ff fcb0 	bl	1008bbc <state_set>
            break;
 100925c:	e7f6      	b.n	100924c <nrf_802154_rsch_crit_sect_prio_changed+0x198>
            m_flags.tx_diminished_prio = false;
 100925e:	4b0a      	ldr	r3, [pc, #40]	; (1009288 <nrf_802154_rsch_crit_sect_prio_changed+0x1d4>)
 1009260:	781a      	ldrb	r2, [r3, #0]
 1009262:	f36f 1204 	bfc	r2, #4, #1
 1009266:	701a      	strb	r2, [r3, #0]
 1009268:	e7f5      	b.n	1009256 <nrf_802154_rsch_crit_sect_prio_changed+0x1a2>
 100926a:	bf00      	nop
 100926c:	21003bdf 	.word	0x21003bdf
 1009270:	21003be2 	.word	0x21003be2
 1009274:	21003be0 	.word	0x21003be0
 1009278:	210033fc 	.word	0x210033fc
 100927c:	210033f8 	.word	0x210033f8
 1009280:	210033f4 	.word	0x210033f4
 1009284:	21003bdb 	.word	0x21003bdb
 1009288:	21003be1 	.word	0x21003be1

0100928c <nrf_802154_trx_receive_frame_prestarted>:
{
 100928c:	b570      	push	{r4, r5, r6, lr}
            nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX));
 100928e:	2000      	movs	r0, #0
 1009290:	f00b ff5c 	bl	101514c <nrf_802154_sl_ant_div_cfg_mode_get>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1009294:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1009298:	b672      	cpsid	i
    nrf_802154_stat_counter_increment(received_energy_events);
 100929a:	4a18      	ldr	r2, [pc, #96]	; (10092fc <nrf_802154_trx_receive_frame_prestarted+0x70>)
 100929c:	6893      	ldr	r3, [r2, #8]
 100929e:	3301      	adds	r3, #1
 10092a0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 10092a2:	f381 8810 	msr	PRIMASK, r1
    nrf_802154_sl_ant_div_rx_preamble_detected_notify();
 10092a6:	f00b ff4a 	bl	101513e <nrf_802154_sl_ant_div_rx_preamble_detected_notify>
            nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX));
 10092aa:	2000      	movs	r0, #0
 10092ac:	f00b ff4e 	bl	101514c <nrf_802154_sl_ant_div_cfg_mode_get>
 10092b0:	4604      	mov	r4, r0
    if (nrf_802154_pib_coex_rx_request_mode_get() ==
 10092b2:	f000 ff9d 	bl	100a1f0 <nrf_802154_pib_coex_rx_request_mode_get>
 10092b6:	2801      	cmp	r0, #1
 10092b8:	d11c      	bne.n	10092f4 <nrf_802154_trx_receive_frame_prestarted+0x68>
        nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
 10092ba:	2002      	movs	r0, #2
 10092bc:	f00b fffd 	bl	10152ba <nrf_802154_rsch_crit_sect_prio_request>
        uint64_t now = nrf_802154_sl_timer_current_time_get();
 10092c0:	f00c f81a 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
        (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
 10092c4:	4d0e      	ldr	r5, [pc, #56]	; (1009300 <nrf_802154_trx_receive_frame_prestarted+0x74>)
        uint64_t now = nrf_802154_sl_timer_current_time_get();
 10092c6:	4604      	mov	r4, r0
        (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
 10092c8:	4628      	mov	r0, r5
        uint64_t now = nrf_802154_sl_timer_current_time_get();
 10092ca:	460e      	mov	r6, r1
        (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
 10092cc:	f008 fb2a 	bl	1011924 <nrf_802154_sl_timer_remove>
        m_rx_prestarted_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
 10092d0:	2301      	movs	r3, #1
        m_rx_prestarted_timer.trigger_time             = now + PRESTARTED_TIMER_TIMEOUT_US;
 10092d2:	34a0      	adds	r4, #160	; 0xa0
        m_rx_prestarted_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
 10092d4:	772b      	strb	r3, [r5, #28]
        m_rx_prestarted_timer.action.callback.callback = on_rx_prestarted_timeout;
 10092d6:	4b0b      	ldr	r3, [pc, #44]	; (1009304 <nrf_802154_trx_receive_frame_prestarted+0x78>)
        m_rx_prestarted_timer.trigger_time             = now + PRESTARTED_TIMER_TIMEOUT_US;
 10092d8:	f146 0600 	adc.w	r6, r6, #0
        ret = nrf_802154_sl_timer_add(&m_rx_prestarted_timer);
 10092dc:	4628      	mov	r0, r5
        m_rx_prestarted_timer.action.callback.callback = on_rx_prestarted_timeout;
 10092de:	622b      	str	r3, [r5, #32]
        m_rx_prestarted_timer.trigger_time             = now + PRESTARTED_TIMER_TIMEOUT_US;
 10092e0:	e9c5 4604 	strd	r4, r6, [r5, #16]
        ret = nrf_802154_sl_timer_add(&m_rx_prestarted_timer);
 10092e4:	f008 fafe 	bl	10118e4 <nrf_802154_sl_timer_add>
        m_rx_prestarted_trig_count += 1;
 10092e8:	4a07      	ldr	r2, [pc, #28]	; (1009308 <nrf_802154_trx_receive_frame_prestarted+0x7c>)
 10092ea:	7813      	ldrb	r3, [r2, #0]
 10092ec:	3301      	adds	r3, #1
 10092ee:	b2db      	uxtb	r3, r3
 10092f0:	7013      	strb	r3, [r2, #0]
}
 10092f2:	e001      	b.n	10092f8 <nrf_802154_trx_receive_frame_prestarted+0x6c>
    if (rx_timeout_should_be_started)
 10092f4:	2c00      	cmp	r4, #0
 10092f6:	d1e3      	bne.n	10092c0 <nrf_802154_trx_receive_frame_prestarted+0x34>
}
 10092f8:	bd70      	pop	{r4, r5, r6, pc}
 10092fa:	bf00      	nop
 10092fc:	21001150 	.word	0x21001150
 1009300:	21001110 	.word	0x21001110
 1009304:	01008ca5 	.word	0x01008ca5
 1009308:	21003bdc 	.word	0x21003bdc

0100930c <nrf_802154_trx_receive_frame_started>:
{
 100930c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100930e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1009312:	b672      	cpsid	i
    nrf_802154_stat_counter_increment(received_preambles);
 1009314:	4a12      	ldr	r2, [pc, #72]	; (1009360 <nrf_802154_trx_receive_frame_started+0x54>)
 1009316:	68d3      	ldr	r3, [r2, #12]
 1009318:	3301      	adds	r3, #1
 100931a:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100931c:	f381 8810 	msr	PRIMASK, r1
    switch (nrf_802154_pib_coex_rx_request_mode_get())
 1009320:	f000 ff66 	bl	100a1f0 <nrf_802154_pib_coex_rx_request_mode_get>
 1009324:	2801      	cmp	r0, #1
 1009326:	d00f      	beq.n	1009348 <nrf_802154_trx_receive_frame_started+0x3c>
 1009328:	2802      	cmp	r0, #2
 100932a:	d013      	beq.n	1009354 <nrf_802154_trx_receive_frame_started+0x48>
            nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX));
 100932c:	2000      	movs	r0, #0
 100932e:	f00b ff0d 	bl	101514c <nrf_802154_sl_ant_div_cfg_mode_get>
    if (antenna_diversity_is_enabled())
 1009332:	b198      	cbz	r0, 100935c <nrf_802154_trx_receive_frame_started+0x50>
        m_rx_prestarted_trig_count = 0;
 1009334:	2200      	movs	r2, #0
 1009336:	4b0b      	ldr	r3, [pc, #44]	; (1009364 <nrf_802154_trx_receive_frame_started+0x58>)
        (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
 1009338:	480b      	ldr	r0, [pc, #44]	; (1009368 <nrf_802154_trx_receive_frame_started+0x5c>)
        m_rx_prestarted_trig_count = 0;
 100933a:	701a      	strb	r2, [r3, #0]
        (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
 100933c:	f008 faf2 	bl	1011924 <nrf_802154_sl_timer_remove>
}
 1009340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_802154_sl_ant_div_rx_frame_started_notify();
 1009344:	f00b bef6 	b.w	1015134 <nrf_802154_sl_ant_div_rx_frame_started_notify>
            m_rx_prestarted_trig_count = 0;
 1009348:	2200      	movs	r2, #0
 100934a:	4b06      	ldr	r3, [pc, #24]	; (1009364 <nrf_802154_trx_receive_frame_started+0x58>)
            (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
 100934c:	4806      	ldr	r0, [pc, #24]	; (1009368 <nrf_802154_trx_receive_frame_started+0x5c>)
            m_rx_prestarted_trig_count = 0;
 100934e:	701a      	strb	r2, [r3, #0]
            (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
 1009350:	f008 fae8 	bl	1011924 <nrf_802154_sl_timer_remove>
            nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
 1009354:	2002      	movs	r0, #2
 1009356:	f00b ffb0 	bl	10152ba <nrf_802154_rsch_crit_sect_prio_request>
            break;
 100935a:	e7e7      	b.n	100932c <nrf_802154_trx_receive_frame_started+0x20>
}
 100935c:	bd08      	pop	{r3, pc}
 100935e:	bf00      	nop
 1009360:	21001150 	.word	0x21001150
 1009364:	21003bdc 	.word	0x21003bdc
 1009368:	21001110 	.word	0x21001110

0100936c <nrf_802154_trx_receive_frame_bcmatched>:
{
 100936c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (!m_flags.frame_filtered)
 1009370:	4c53      	ldr	r4, [pc, #332]	; (10094c0 <nrf_802154_trx_receive_frame_bcmatched+0x154>)
{
 1009372:	4606      	mov	r6, r0
    if (!m_flags.frame_filtered)
 1009374:	7823      	ldrb	r3, [r4, #0]
    num_data_bytes      = bcc;
 1009376:	f88d 0007 	strb.w	r0, [sp, #7]
    if (!m_flags.frame_filtered)
 100937a:	07df      	lsls	r7, r3, #31
 100937c:	d46a      	bmi.n	1009454 <nrf_802154_trx_receive_frame_bcmatched+0xe8>
        filter_result = nrf_802154_filter_frame_part(&m_current_rx_frame_data,
 100937e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 10094c4 <nrf_802154_trx_receive_frame_bcmatched+0x158>
 1009382:	f10d 0107 	add.w	r1, sp, #7
 1009386:	4640      	mov	r0, r8
 1009388:	f002 fd7a 	bl	100be80 <nrf_802154_filter_frame_part>
        if (filter_result == NRF_802154_RX_ERROR_NONE)
 100938c:	4607      	mov	r7, r0
 100938e:	b9c0      	cbnz	r0, 10093c2 <nrf_802154_trx_receive_frame_bcmatched+0x56>
            if (num_data_bytes != prev_num_data_bytes)
 1009390:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
 1009394:	7823      	ldrb	r3, [r4, #0]
            if (num_data_bytes != prev_num_data_bytes)
 1009396:	42b5      	cmp	r5, r6
 1009398:	d110      	bne.n	10093bc <nrf_802154_trx_receive_frame_bcmatched+0x50>
                m_flags.frame_filtered = true;
 100939a:	f043 0301 	orr.w	r3, r3, #1
                nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
 100939e:	2002      	movs	r0, #2
                m_flags.frame_filtered = true;
 10093a0:	7023      	strb	r3, [r4, #0]
                nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
 10093a2:	f00b ff8a 	bl	10152ba <nrf_802154_rsch_crit_sect_prio_request>
                m_flags.frame_parsed = false;
 10093a6:	7823      	ldrb	r3, [r4, #0]
 10093a8:	f367 0341 	bfi	r3, r7, #1, #1
 10093ac:	7023      	strb	r3, [r4, #0]
                nrf_802154_ack_generator_reset();
 10093ae:	f00a f9ce 	bl	101374e <nrf_802154_ack_generator_reset>
                bcc = PHR_SIZE +
 10093b2:	f898 5014 	ldrb.w	r5, [r8, #20]
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
 10093b6:	7823      	ldrb	r3, [r4, #0]
                bcc = PHR_SIZE +
 10093b8:	3502      	adds	r5, #2
 10093ba:	b2ed      	uxtb	r5, r5
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
 10093bc:	075a      	lsls	r2, r3, #29
 10093be:	d433      	bmi.n	1009428 <nrf_802154_trx_receive_frame_bcmatched+0xbc>
 10093c0:	e008      	b.n	10093d4 <nrf_802154_trx_receive_frame_bcmatched+0x68>
        else if ((filter_result == NRF_802154_RX_ERROR_INVALID_LENGTH) ||
 10093c2:	2809      	cmp	r0, #9
 10093c4:	d01d      	beq.n	1009402 <nrf_802154_trx_receive_frame_bcmatched+0x96>
                 (!nrf_802154_pib_promiscuous_get()))
 10093c6:	f000 fe89 	bl	100a0dc <nrf_802154_pib_promiscuous_get>
        else if ((filter_result == NRF_802154_RX_ERROR_INVALID_LENGTH) ||
 10093ca:	b1d0      	cbz	r0, 1009402 <nrf_802154_trx_receive_frame_bcmatched+0x96>
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
 10093cc:	7823      	ldrb	r3, [r4, #0]
 10093ce:	075d      	lsls	r5, r3, #29
 10093d0:	d429      	bmi.n	1009426 <nrf_802154_trx_receive_frame_bcmatched+0xba>
{
 10093d2:	4635      	mov	r5, r6
                                                 mp_current_rx_buffer->data[0],
 10093d4:	4f3c      	ldr	r7, [pc, #240]	; (10094c8 <nrf_802154_trx_receive_frame_bcmatched+0x15c>)
 10093d6:	6838      	ldr	r0, [r7, #0]
        if (nrf_802154_rsch_timeslot_request(nrf_802154_rx_duration_get(
 10093d8:	7806      	ldrb	r6, [r0, #0]
 10093da:	f009 fe44 	bl	1013066 <ack_is_requested>
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
 10093de:	1c73      	adds	r3, r6, #1
 10093e0:	015b      	lsls	r3, r3, #5
{
    // SHR + PHR + PSDU
    // if ACK: + aTurnaroundTime + ACK frame duration
    uint16_t us_time = nrf_802154_frame_duration_get(psdu_length, true, true);

    if (ack_requested)
 10093e2:	2800      	cmp	r0, #0
 10093e4:	d15d      	bne.n	10094a2 <nrf_802154_trx_receive_frame_bcmatched+0x136>
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SHR_SYMBOLS);
 10093e6:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 10093ea:	f00b ff18 	bl	101521e <nrf_802154_rsch_timeslot_request>
 10093ee:	2800      	cmp	r0, #0
 10093f0:	d05a      	beq.n	10094a8 <nrf_802154_trx_receive_frame_bcmatched+0x13c>
            m_flags.rx_timeslot_requested = true;
 10093f2:	7823      	ldrb	r3, [r4, #0]
    nrf_802154_core_hooks_rx_started(p_frame);
 10093f4:	6838      	ldr	r0, [r7, #0]
            m_flags.rx_timeslot_requested = true;
 10093f6:	f043 0304 	orr.w	r3, r3, #4
 10093fa:	7023      	strb	r3, [r4, #0]
    nrf_802154_core_hooks_rx_started(p_frame);
 10093fc:	f009 fed8 	bl	10131b0 <nrf_802154_core_hooks_rx_started>
}
 1009400:	e012      	b.n	1009428 <nrf_802154_trx_receive_frame_bcmatched+0xbc>
            trx_abort();
 1009402:	f009 fe6b 	bl	10130dc <trx_abort>
            rx_init();
 1009406:	f7ff fcbf 	bl	1008d88 <rx_init>
            request_preconditions_for_state(m_state);
 100940a:	4b30      	ldr	r3, [pc, #192]	; (10094cc <nrf_802154_trx_receive_frame_bcmatched+0x160>)
 100940c:	7818      	ldrb	r0, [r3, #0]
 100940e:	f009 fe14 	bl	101303a <request_preconditions_for_state>
            if ((mp_current_rx_buffer->data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) !=
 1009412:	4b2d      	ldr	r3, [pc, #180]	; (10094c8 <nrf_802154_trx_receive_frame_bcmatched+0x15c>)
 1009414:	681b      	ldr	r3, [r3, #0]
 1009416:	785b      	ldrb	r3, [r3, #1]
 1009418:	f003 0307 	and.w	r3, r3, #7
 100941c:	2b02      	cmp	r3, #2
 100941e:	d002      	beq.n	1009426 <nrf_802154_trx_receive_frame_bcmatched+0xba>
                receive_failed_notify(filter_result);
 1009420:	4638      	mov	r0, r7
 1009422:	f7ff fba7 	bl	1008b74 <receive_failed_notify>
{
 1009426:	4635      	mov	r5, r6
    if (m_flags.frame_filtered &&
 1009428:	7823      	ldrb	r3, [r4, #0]
 100942a:	f003 0303 	and.w	r3, r3, #3
 100942e:	2b03      	cmp	r3, #3
 1009430:	d10c      	bne.n	100944c <nrf_802154_trx_receive_frame_bcmatched+0xe0>
 * @retval  false AR bit is not set.
 */
static inline bool nrf_802154_frame_parser_ar_bit_is_set(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
 1009432:	4c24      	ldr	r4, [pc, #144]	; (10094c4 <nrf_802154_trx_receive_frame_bcmatched+0x158>)
 1009434:	6823      	ldr	r3, [r4, #0]
 1009436:	785b      	ldrb	r3, [r3, #1]
        m_flags.frame_parsed &&
 1009438:	069b      	lsls	r3, r3, #26
 100943a:	d507      	bpl.n	100944c <nrf_802154_trx_receive_frame_bcmatched+0xe0>
        nrf_802154_pib_auto_ack_get())
 100943c:	f000 fe5e 	bl	100a0fc <nrf_802154_pib_auto_ack_get>
        nrf_802154_frame_parser_ar_bit_is_set(&m_current_rx_frame_data) &&
 1009440:	b120      	cbz	r0, 100944c <nrf_802154_trx_receive_frame_bcmatched+0xe0>
        mp_ack = nrf_802154_ack_generator_create(&m_current_rx_frame_data);
 1009442:	4620      	mov	r0, r4
 1009444:	f00a f98a 	bl	101375c <nrf_802154_ack_generator_create>
 1009448:	4b21      	ldr	r3, [pc, #132]	; (10094d0 <nrf_802154_trx_receive_frame_bcmatched+0x164>)
 100944a:	6018      	str	r0, [r3, #0]
}
 100944c:	4628      	mov	r0, r5
 100944e:	b002      	add	sp, #8
 1009450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (!m_flags.frame_parsed)
 1009454:	0798      	lsls	r0, r3, #30
 1009456:	d4ba      	bmi.n	10093ce <nrf_802154_trx_receive_frame_bcmatched+0x62>
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
 1009458:	4d1a      	ldr	r5, [pc, #104]	; (10094c4 <nrf_802154_trx_receive_frame_bcmatched+0x158>)
 100945a:	682b      	ldr	r3, [r5, #0]
 100945c:	785b      	ldrb	r3, [r3, #1]
        if (nrf_802154_frame_parser_security_enabled_bit_is_set(&m_current_rx_frame_data))
 100945e:	0719      	lsls	r1, r3, #28
 1009460:	d517      	bpl.n	1009492 <nrf_802154_trx_receive_frame_bcmatched+0x126>
            if (nrf_802154_frame_parser_valid_data_extend(
 1009462:	2205      	movs	r2, #5
 1009464:	4631      	mov	r1, r6
 1009466:	4628      	mov	r0, r5
 1009468:	f00a f920 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
 100946c:	b120      	cbz	r0, 1009478 <nrf_802154_trx_receive_frame_bcmatched+0x10c>
            m_flags.frame_parsed = true;
 100946e:	7823      	ldrb	r3, [r4, #0]
 1009470:	f043 0302 	orr.w	r3, r3, #2
 1009474:	7023      	strb	r3, [r4, #0]
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
 1009476:	e7aa      	b.n	10093ce <nrf_802154_trx_receive_frame_bcmatched+0x62>
            else if (nrf_802154_frame_parser_valid_data_extend(
 1009478:	2204      	movs	r2, #4
 100947a:	4628      	mov	r0, r5
 100947c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 1009480:	f00a f914 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
 1009484:	7823      	ldrb	r3, [r4, #0]
 1009486:	2800      	cmp	r0, #0
 1009488:	d0a1      	beq.n	10093ce <nrf_802154_trx_receive_frame_bcmatched+0x62>
                bcc = PHR_SIZE +
 100948a:	7d6d      	ldrb	r5, [r5, #21]
 100948c:	3501      	adds	r5, #1
 100948e:	b2ed      	uxtb	r5, r5
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
 1009490:	e794      	b.n	10093bc <nrf_802154_trx_receive_frame_bcmatched+0x50>
        else if (nrf_802154_frame_parser_valid_data_extend(
 1009492:	2203      	movs	r2, #3
 1009494:	4631      	mov	r1, r6
 1009496:	4628      	mov	r0, r5
 1009498:	f00a f908 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
 100949c:	2800      	cmp	r0, #0
 100949e:	d1e6      	bne.n	100946e <nrf_802154_trx_receive_frame_bcmatched+0x102>
 10094a0:	e794      	b.n	10093cc <nrf_802154_trx_receive_frame_bcmatched+0x60>
    {
        us_time += PHY_US_TIME_FROM_SYMBOLS(A_TURNAROUND_TIME_SYMBOLS +
 10094a2:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 10094a6:	e7a0      	b.n	10093ea <nrf_802154_trx_receive_frame_bcmatched+0x7e>
            trx_abort();
 10094a8:	f009 fe18 	bl	10130dc <trx_abort>
            rx_init();
 10094ac:	f7ff fc6c 	bl	1008d88 <rx_init>
            (void)nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_TIMESLOT_ENDED,
 10094b0:	4b08      	ldr	r3, [pc, #32]	; (10094d4 <nrf_802154_trx_receive_frame_bcmatched+0x168>)
 10094b2:	2201      	movs	r2, #1
 10094b4:	6819      	ldr	r1, [r3, #0]
 10094b6:	2005      	movs	r0, #5
 10094b8:	f00a f980 	bl	10137bc <nrf_802154_notify_receive_failed>
 10094bc:	e7b4      	b.n	1009428 <nrf_802154_trx_receive_frame_bcmatched+0xbc>
 10094be:	bf00      	nop
 10094c0:	21003be1 	.word	0x21003be1
 10094c4:	210033d8 	.word	0x210033d8
 10094c8:	210033fc 	.word	0x210033fc
 10094cc:	21003be2 	.word	0x21003be2
 10094d0:	210033f8 	.word	0x210033f8
 10094d4:	210033d4 	.word	0x210033d4

010094d8 <nrf_802154_trx_receive_frame_crcerror>:
{
 10094d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
 10094da:	f7fe ff47 	bl	100836c <nrf_802154_hp_timer_timestamp_get>
    m_flags.frame_filtered        = false;
 10094de:	4a17      	ldr	r2, [pc, #92]	; (100953c <nrf_802154_trx_receive_frame_crcerror+0x64>)
    uint32_t listening_start_hp_timestamp = m_listening_start_hp_timestamp;
 10094e0:	4d17      	ldr	r5, [pc, #92]	; (1009540 <nrf_802154_trx_receive_frame_crcerror+0x68>)
    m_flags.frame_filtered        = false;
 10094e2:	7813      	ldrb	r3, [r2, #0]
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
 10094e4:	4604      	mov	r4, r0
    m_flags.frame_filtered        = false;
 10094e6:	f023 0307 	bic.w	r3, r3, #7
 10094ea:	7013      	strb	r3, [r2, #0]
    uint32_t listening_start_hp_timestamp = m_listening_start_hp_timestamp;
 10094ec:	682e      	ldr	r6, [r5, #0]
    rx_data_clear();
 10094ee:	f7ff fb7d 	bl	1008bec <rx_data_clear>
    request_preconditions_for_state(m_state);
 10094f2:	4b14      	ldr	r3, [pc, #80]	; (1009544 <nrf_802154_trx_receive_frame_crcerror+0x6c>)
 10094f4:	7818      	ldrb	r0, [r3, #0]
 10094f6:	f009 fda0 	bl	101303a <request_preconditions_for_state>
    nrf_802154_fal_tx_power_split_t split_power = {0};
 10094fa:	2300      	movs	r3, #0
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
 10094fc:	a801      	add	r0, sp, #4
    nrf_802154_fal_tx_power_split_t split_power = {0};
 10094fe:	f8ad 3004 	strh.w	r3, [sp, #4]
 1009502:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
 1009506:	f00a f810 	bl	101352a <nrf_802154_tx_power_split_pib_power_get>
    nrf_802154_trx_receive_frame(BCC_INIT / 8U,
 100950a:	4b0f      	ldr	r3, [pc, #60]	; (1009548 <nrf_802154_trx_receive_frame_crcerror+0x70>)
 100950c:	aa01      	add	r2, sp, #4
 100950e:	7819      	ldrb	r1, [r3, #0]
 1009510:	2003      	movs	r0, #3
 1009512:	f001 fa1d 	bl	100a950 <nrf_802154_trx_receive_frame>
    m_listening_start_hp_timestamp = nrf_802154_hp_timer_current_time_get();
 1009516:	f7fe ff2f 	bl	1008378 <nrf_802154_hp_timer_current_time_get>
 100951a:	6028      	str	r0, [r5, #0]
    nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_end_event_handle_get());
 100951c:	f001 ff4c 	bl	100b3b8 <nrf_802154_trx_radio_end_event_handle_get>
 1009520:	f008 fae6 	bl	1011af0 <nrf_802154_timer_coord_timestamp_prepare>
    update_total_times_on_receive_end(listening_start_hp_timestamp,
 1009524:	4b09      	ldr	r3, [pc, #36]	; (100954c <nrf_802154_trx_receive_frame_crcerror+0x74>)
 1009526:	4621      	mov	r1, r4
 1009528:	681b      	ldr	r3, [r3, #0]
 100952a:	4630      	mov	r0, r6
 100952c:	781a      	ldrb	r2, [r3, #0]
 100952e:	f7ff faf5 	bl	1008b1c <update_total_times_on_receive_end>
    receive_failed_notify(NRF_802154_RX_ERROR_INVALID_FCS);
 1009532:	2002      	movs	r0, #2
 1009534:	f7ff fb1e 	bl	1008b74 <receive_failed_notify>
}
 1009538:	b002      	add	sp, #8
 100953a:	bd70      	pop	{r4, r5, r6, pc}
 100953c:	21003be1 	.word	0x21003be1
 1009540:	210033d0 	.word	0x210033d0
 1009544:	21003be2 	.word	0x21003be2
 1009548:	21003bde 	.word	0x21003bde
 100954c:	210033fc 	.word	0x210033fc

01009550 <nrf_802154_trx_receive_ack_crcerror>:
{
 1009550:	b508      	push	{r3, lr}
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
 1009552:	f7fe ff0b 	bl	100836c <nrf_802154_hp_timer_timestamp_get>
    update_total_times_on_receive_end(listening_start_hp_timestamp,
 1009556:	4b06      	ldr	r3, [pc, #24]	; (1009570 <nrf_802154_trx_receive_ack_crcerror+0x20>)
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
 1009558:	4601      	mov	r1, r0
    update_total_times_on_receive_end(listening_start_hp_timestamp,
 100955a:	681b      	ldr	r3, [r3, #0]
 100955c:	781a      	ldrb	r2, [r3, #0]
 100955e:	4b05      	ldr	r3, [pc, #20]	; (1009574 <nrf_802154_trx_receive_ack_crcerror+0x24>)
 1009560:	6818      	ldr	r0, [r3, #0]
 1009562:	f7ff fadb 	bl	1008b1c <update_total_times_on_receive_end>
}
 1009566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    on_bad_ack();
 100956a:	f7ff bc53 	b.w	1008e14 <on_bad_ack>
 100956e:	bf00      	nop
 1009570:	210033fc 	.word	0x210033fc
 1009574:	210033d0 	.word	0x210033d0

01009578 <nrf_802154_trx_receive_frame_received>:
{
 1009578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t * p_received_data = mp_current_rx_buffer->data;
 100957c:	4d57      	ldr	r5, [pc, #348]	; (10096dc <nrf_802154_trx_receive_frame_received+0x164>)
    if (m_flags.frame_filtered || nrf_802154_pib_promiscuous_get())
 100957e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 10096e0 <nrf_802154_trx_receive_frame_received+0x168>
    uint8_t * p_received_data = mp_current_rx_buffer->data;
 1009582:	682c      	ldr	r4, [r5, #0]
    m_last_rssi = rssi_last_measurement_get();
 1009584:	f009 fd7f 	bl	1013086 <rssi_last_measurement_get>
 1009588:	4b56      	ldr	r3, [pc, #344]	; (10096e4 <nrf_802154_trx_receive_frame_received+0x16c>)
 100958a:	7018      	strb	r0, [r3, #0]
    uint32_t lqi = RX_FRAME_LQI(p_data);
 100958c:	7823      	ldrb	r3, [r4, #0]
 100958e:	4423      	add	r3, r4
    lqi  = nrf_802154_rssi_lqi_corrected_get(lqi);
 1009590:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 1009594:	f009 ff6c 	bl	1013470 <nrf_802154_rssi_lqi_corrected_get>
    lqi *= LQI_VALUE_FACTOR;
 1009598:	0080      	lsls	r0, r0, #2
    if (lqi > LQI_MAX)
 100959a:	28ff      	cmp	r0, #255	; 0xff
 100959c:	bf28      	it	cs
 100959e:	20ff      	movcs	r0, #255	; 0xff
    return (uint8_t)lqi;
 10095a0:	4b51      	ldr	r3, [pc, #324]	; (10096e8 <nrf_802154_trx_receive_frame_received+0x170>)
 10095a2:	7018      	strb	r0, [r3, #0]
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
 10095a4:	f7fe fee2 	bl	100836c <nrf_802154_hp_timer_timestamp_get>
    update_total_times_on_receive_end(listening_start_hp_timestamp,
 10095a8:	682b      	ldr	r3, [r5, #0]
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
 10095aa:	4601      	mov	r1, r0
    update_total_times_on_receive_end(listening_start_hp_timestamp,
 10095ac:	781a      	ldrb	r2, [r3, #0]
 10095ae:	4b4f      	ldr	r3, [pc, #316]	; (10096ec <nrf_802154_trx_receive_frame_received+0x174>)
 10095b0:	6818      	ldr	r0, [r3, #0]
 10095b2:	f7ff fab3 	bl	1008b1c <update_total_times_on_receive_end>
    if (m_flags.frame_filtered || nrf_802154_pib_promiscuous_get())
 10095b6:	f898 3000 	ldrb.w	r3, [r8]
 10095ba:	07d9      	lsls	r1, r3, #31
 10095bc:	d533      	bpl.n	1009626 <nrf_802154_trx_receive_frame_received+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 10095be:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 10095c2:	b672      	cpsid	i
        nrf_802154_stat_counter_increment(received_frames);
 10095c4:	4e4a      	ldr	r6, [pc, #296]	; (10096f0 <nrf_802154_trx_receive_frame_received+0x178>)
 10095c6:	6873      	ldr	r3, [r6, #4]
 10095c8:	3301      	adds	r3, #1
 10095ca:	6073      	str	r3, [r6, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 10095cc:	f382 8810 	msr	PRIMASK, r2
        uint64_t ts = timer_coord_timestamp_get();
 10095d0:	f009 fd61 	bl	1013096 <timer_coord_timestamp_get>
 10095d4:	4602      	mov	r2, r0
 10095d6:	460b      	mov	r3, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 10095d8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 10095dc:	b672      	cpsid	i
        nrf_802154_stat_timestamp_write(last_rx_end_timestamp, ts);
 10095de:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 10095e2:	f381 8810 	msr	PRIMASK, r1
    return p_parser_data->p_frame[PHR_OFFSET];
 10095e6:	4f43      	ldr	r7, [pc, #268]	; (10096f4 <nrf_802154_trx_receive_frame_received+0x17c>)
        nrf_802154_sl_ant_div_rx_frame_received_notify();
 10095e8:	f00b fda6 	bl	1015138 <nrf_802154_sl_ant_div_rx_frame_received_notify>
 10095ec:	683b      	ldr	r3, [r7, #0]
        bool parse_result = nrf_802154_frame_parser_valid_data_extend(
 10095ee:	2206      	movs	r2, #6
 10095f0:	7819      	ldrb	r1, [r3, #0]
 10095f2:	4638      	mov	r0, r7
 10095f4:	3101      	adds	r1, #1
 10095f6:	b2c9      	uxtb	r1, r1
 10095f8:	f00a f858 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
        if (m_flags.frame_filtered &&
 10095fc:	f898 3000 	ldrb.w	r3, [r8]
 1009600:	07da      	lsls	r2, r3, #31
 1009602:	d41f      	bmi.n	1009644 <nrf_802154_trx_receive_frame_received+0xcc>
            request_preconditions_for_state(m_state);
 1009604:	4b3c      	ldr	r3, [pc, #240]	; (10096f8 <nrf_802154_trx_receive_frame_received+0x180>)
 1009606:	7818      	ldrb	r0, [r3, #0]
 1009608:	f009 fd17 	bl	101303a <request_preconditions_for_state>
            if (((p_received_data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) != FRAME_TYPE_ACK) ||
 100960c:	7863      	ldrb	r3, [r4, #1]
 100960e:	f003 0307 	and.w	r3, r3, #7
 1009612:	2b02      	cmp	r3, #2
 1009614:	d057      	beq.n	10096c6 <nrf_802154_trx_receive_frame_received+0x14e>
                mp_current_rx_buffer->free = false;
 1009616:	2200      	movs	r2, #0
 1009618:	682b      	ldr	r3, [r5, #0]
 100961a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                rx_buffer_in_use_set(nrf_802154_rx_buffer_free_find());
 100961e:	f000 fe81 	bl	100a324 <nrf_802154_rx_buffer_free_find>
    mp_current_rx_buffer = p_rx_buffer;
 1009622:	6028      	str	r0, [r5, #0]
                rx_init();
 1009624:	e036      	b.n	1009694 <nrf_802154_trx_receive_frame_received+0x11c>
    if (m_flags.frame_filtered || nrf_802154_pib_promiscuous_get())
 1009626:	f000 fd59 	bl	100a0dc <nrf_802154_pib_promiscuous_get>
 100962a:	2800      	cmp	r0, #0
 100962c:	d1c7      	bne.n	10095be <nrf_802154_trx_receive_frame_received+0x46>
        request_preconditions_for_state(m_state);
 100962e:	4b32      	ldr	r3, [pc, #200]	; (10096f8 <nrf_802154_trx_receive_frame_received+0x180>)
 1009630:	7818      	ldrb	r0, [r3, #0]
 1009632:	f009 fd02 	bl	101303a <request_preconditions_for_state>
        rx_init();
 1009636:	f7ff fba7 	bl	1008d88 <rx_init>
}
 100963a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        receive_failed_notify(NRF_802154_RX_ERROR_RUNTIME);
 100963e:	2004      	movs	r0, #4
 1009640:	f7ff ba98 	b.w	1008b74 <receive_failed_notify>
        if (m_flags.frame_filtered &&
 1009644:	2800      	cmp	r0, #0
 1009646:	d0dd      	beq.n	1009604 <nrf_802154_trx_receive_frame_received+0x8c>
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
 1009648:	683b      	ldr	r3, [r7, #0]
 100964a:	785b      	ldrb	r3, [r3, #1]
            parse_result &&
 100964c:	069b      	lsls	r3, r3, #26
 100964e:	d5d9      	bpl.n	1009604 <nrf_802154_trx_receive_frame_received+0x8c>
            nrf_802154_pib_auto_ack_get())
 1009650:	f000 fd54 	bl	100a0fc <nrf_802154_pib_auto_ack_get>
            nrf_802154_frame_parser_ar_bit_is_set(&m_current_rx_frame_data) &&
 1009654:	2800      	cmp	r0, #0
 1009656:	d0d5      	beq.n	1009604 <nrf_802154_trx_receive_frame_received+0x8c>
            nrf_802154_tx_work_buffer_reset(&m_default_frame_props);
 1009658:	4828      	ldr	r0, [pc, #160]	; (10096fc <nrf_802154_trx_receive_frame_received+0x184>)
 100965a:	f001 ffb3 	bl	100b5c4 <nrf_802154_tx_work_buffer_reset>
            mp_ack   = nrf_802154_ack_generator_create(&m_current_rx_frame_data);
 100965e:	4638      	mov	r0, r7
 1009660:	f00a f87c 	bl	101375c <nrf_802154_ack_generator_create>
 1009664:	4f26      	ldr	r7, [pc, #152]	; (1009700 <nrf_802154_trx_receive_frame_received+0x188>)
 1009666:	6038      	str	r0, [r7, #0]
        if (send_ack)
 1009668:	2800      	cmp	r0, #0
 100966a:	d0cb      	beq.n	1009604 <nrf_802154_trx_receive_frame_received+0x8c>
            state_set(RADIO_STATE_TX_ACK);
 100966c:	2003      	movs	r0, #3
 100966e:	f7ff faa5 	bl	1008bbc <state_set>
            if (is_state_allowed_for_prio(m_rsch_priority, RADIO_STATE_TX_ACK))
 1009672:	4b24      	ldr	r3, [pc, #144]	; (1009704 <nrf_802154_trx_receive_frame_received+0x18c>)
 1009674:	781b      	ldrb	r3, [r3, #0]
 1009676:	2b03      	cmp	r3, #3
 1009678:	d913      	bls.n	10096a2 <nrf_802154_trx_receive_frame_received+0x12a>
                if (nrf_802154_trx_transmit_ack(nrf_802154_tx_work_buffer_get(mp_ack), ACK_IFS))
 100967a:	6838      	ldr	r0, [r7, #0]
 100967c:	f001 ffc2 	bl	100b604 <nrf_802154_tx_work_buffer_get>
 1009680:	21c0      	movs	r1, #192	; 0xc0
 1009682:	f001 fb0f 	bl	100aca4 <nrf_802154_trx_transmit_ack>
 1009686:	bb30      	cbnz	r0, 10096d6 <nrf_802154_trx_receive_frame_received+0x15e>
                    mp_current_rx_buffer->free = false;
 1009688:	682b      	ldr	r3, [r5, #0]
 100968a:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
                state_set(RADIO_STATE_RX);
 100968e:	2002      	movs	r0, #2
 1009690:	f7ff fa94 	bl	1008bbc <state_set>
                rx_init();
 1009694:	f7ff fb78 	bl	1008d88 <rx_init>
                received_frame_notify_and_nesting_allow(p_received_data);
 1009698:	4620      	mov	r0, r4
}
 100969a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                received_frame_notify_and_nesting_allow(p_received_data);
 100969e:	f7ff ba79 	b.w	1008b94 <received_frame_notify_and_nesting_allow>
                if (!nrf_802154_rsch_prec_is_approved(RSCH_PREC_COEX,
 10096a2:	2104      	movs	r1, #4
 10096a4:	2002      	movs	r0, #2
 10096a6:	f008 f85b 	bl	1011760 <nrf_802154_rsch_prec_is_approved>
 10096aa:	b938      	cbnz	r0, 10096bc <nrf_802154_trx_receive_frame_received+0x144>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 10096ac:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 10096b0:	b672      	cpsid	i
                    nrf_802154_stat_counter_increment(coex_denied_requests);
 10096b2:	69b3      	ldr	r3, [r6, #24]
 10096b4:	3301      	adds	r3, #1
 10096b6:	61b3      	str	r3, [r6, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 10096b8:	f382 8810 	msr	PRIMASK, r2
                mp_current_rx_buffer->free = false;
 10096bc:	2200      	movs	r2, #0
 10096be:	682b      	ldr	r3, [r5, #0]
 10096c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 10096c4:	e7e3      	b.n	100968e <nrf_802154_trx_receive_frame_received+0x116>
                nrf_802154_pib_promiscuous_get())
 10096c6:	f000 fd09 	bl	100a0dc <nrf_802154_pib_promiscuous_get>
            if (((p_received_data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) != FRAME_TYPE_ACK) ||
 10096ca:	2800      	cmp	r0, #0
 10096cc:	d1a3      	bne.n	1009616 <nrf_802154_trx_receive_frame_received+0x9e>
}
 10096ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                rx_init();
 10096d2:	f7ff bb59 	b.w	1008d88 <rx_init>
}
 10096d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10096da:	bf00      	nop
 10096dc:	210033fc 	.word	0x210033fc
 10096e0:	21003be1 	.word	0x21003be1
 10096e4:	21003be3 	.word	0x21003be3
 10096e8:	21003be7 	.word	0x21003be7
 10096ec:	210033d0 	.word	0x210033d0
 10096f0:	21001150 	.word	0x21001150
 10096f4:	210033d8 	.word	0x210033d8
 10096f8:	21003be2 	.word	0x21003be2
 10096fc:	01015be1 	.word	0x01015be1
 1009700:	210033f8 	.word	0x210033f8
 1009704:	21003bdf 	.word	0x21003bdf

01009708 <nrf_802154_trx_transmit_frame_started>:
{
 1009708:	b510      	push	{r4, lr}
    uint8_t * p_frame = mp_tx_data;
 100970a:	4b06      	ldr	r3, [pc, #24]	; (1009724 <nrf_802154_trx_transmit_frame_started+0x1c>)
 100970c:	681c      	ldr	r4, [r3, #0]
    if (nrf_802154_core_hooks_tx_started(p_frame))
 100970e:	4620      	mov	r0, r4
 1009710:	f000 fc2a 	bl	1009f68 <nrf_802154_core_hooks_tx_started>
 1009714:	b120      	cbz	r0, 1009720 <nrf_802154_trx_transmit_frame_started+0x18>
        nrf_802154_tx_started(p_frame);
 1009716:	4620      	mov	r0, r4
}
 1009718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_802154_tx_started(p_frame);
 100971c:	f009 bc7f 	b.w	101301e <nrf_802154_tx_started>
}
 1009720:	bd10      	pop	{r4, pc}
 1009722:	bf00      	nop
 1009724:	210033f4 	.word	0x210033f4

01009728 <nrf_802154_trx_transmit_ack_started>:
{
 1009728:	b510      	push	{r4, lr}
    nrf_802154_core_hooks_tx_ack_started(mp_ack);
 100972a:	4c04      	ldr	r4, [pc, #16]	; (100973c <nrf_802154_trx_transmit_ack_started+0x14>)
 100972c:	6820      	ldr	r0, [r4, #0]
 100972e:	f009 fd43 	bl	10131b8 <nrf_802154_core_hooks_tx_ack_started>
    nrf_802154_tx_ack_started(mp_ack);
 1009732:	6820      	ldr	r0, [r4, #0]
}
 1009734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_tx_ack_started(mp_ack);
 1009738:	f004 bd9c 	b.w	100e274 <nrf_802154_tx_ack_started>
 100973c:	210033f8 	.word	0x210033f8

01009740 <nrf_802154_trx_transmit_ack_transmitted>:
{
 1009740:	b570      	push	{r4, r5, r6, lr}
    uint32_t t_transmit = TX_RAMP_UP_TIME + nrf_802154_frame_duration_get(mp_ack[PHR_OFFSET],
 1009742:	4b10      	ldr	r3, [pc, #64]	; (1009784 <nrf_802154_trx_transmit_ack_transmitted+0x44>)
 1009744:	681b      	ldr	r3, [r3, #0]
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));
 1009746:	781b      	ldrb	r3, [r3, #0]
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
 1009748:	015b      	lsls	r3, r3, #5
 100974a:	33e8      	adds	r3, #232	; 0xe8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100974c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1009750:	b672      	cpsid	i
    nrf_802154_stat_totals_increment(total_transmit_time, t_transmit);
 1009752:	4a0d      	ldr	r2, [pc, #52]	; (1009788 <nrf_802154_trx_transmit_ack_transmitted+0x48>)
 1009754:	e9d2 4504 	ldrd	r4, r5, [r2, #16]
 1009758:	1918      	adds	r0, r3, r4
 100975a:	f145 0100 	adc.w	r1, r5, #0
 100975e:	e9c2 0104 	strd	r0, r1, [r2, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1009762:	f386 8810 	msr	PRIMASK, r6
    uint8_t * p_received_data = mp_current_rx_buffer->data;
 1009766:	4b09      	ldr	r3, [pc, #36]	; (100978c <nrf_802154_trx_transmit_ack_transmitted+0x4c>)
    state_set(RADIO_STATE_RX);
 1009768:	2002      	movs	r0, #2
    uint8_t * p_received_data = mp_current_rx_buffer->data;
 100976a:	681c      	ldr	r4, [r3, #0]
    mp_current_rx_buffer->free = false;
 100976c:	2300      	movs	r3, #0
 100976e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    state_set(RADIO_STATE_RX);
 1009772:	f7ff fa23 	bl	1008bbc <state_set>
    rx_init();
 1009776:	f7ff fb07 	bl	1008d88 <rx_init>
    received_frame_notify_and_nesting_allow(p_received_data);
 100977a:	4620      	mov	r0, r4
}
 100977c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    received_frame_notify_and_nesting_allow(p_received_data);
 1009780:	f7ff ba08 	b.w	1008b94 <received_frame_notify_and_nesting_allow>
 1009784:	210033f8 	.word	0x210033f8
 1009788:	21001138 	.word	0x21001138
 100978c:	210033fc 	.word	0x210033fc

01009790 <nrf_802154_trx_transmit_frame_transmitted>:
{
 1009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint64_t ts = timer_coord_timestamp_get();
 1009792:	f009 fc80 	bl	1013096 <timer_coord_timestamp_get>
 1009796:	4604      	mov	r4, r0
 1009798:	460d      	mov	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100979a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 100979e:	b672      	cpsid	i
    nrf_802154_stat_timestamp_write(last_tx_end_timestamp, ts);
 10097a0:	483c      	ldr	r0, [pc, #240]	; (1009894 <nrf_802154_trx_transmit_frame_transmitted+0x104>)
 10097a2:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 10097a6:	f383 8810 	msr	PRIMASK, r3
    if (m_flags.tx_with_cca)
 10097aa:	4e3b      	ldr	r6, [pc, #236]	; (1009898 <nrf_802154_trx_transmit_frame_transmitted+0x108>)
 10097ac:	493b      	ldr	r1, [pc, #236]	; (100989c <nrf_802154_trx_transmit_frame_transmitted+0x10c>)
 10097ae:	7833      	ldrb	r3, [r6, #0]
 10097b0:	f013 0208 	ands.w	r2, r3, #8
 10097b4:	d05f      	beq.n	1009876 <nrf_802154_trx_transmit_frame_transmitted+0xe6>
        m_flags.tx_diminished_prio = false;
 10097b6:	f36f 1304 	bfc	r3, #4, #1
 10097ba:	7033      	strb	r3, [r6, #0]
        ts -= nrf_802154_frame_duration_get(mp_tx_data[0], true, true) + RX_TX_TURNAROUND_TIME;
 10097bc:	680b      	ldr	r3, [r1, #0]
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));
 10097be:	781b      	ldrb	r3, [r3, #0]
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
 10097c0:	015b      	lsls	r3, r3, #5
 10097c2:	33d4      	adds	r3, #212	; 0xd4
 10097c4:	1ae6      	subs	r6, r4, r3
 10097c6:	f165 0700 	sbc.w	r7, r5, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 10097ca:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 10097ce:	b672      	cpsid	i
        nrf_802154_stat_timestamp_write(last_cca_idle_timestamp, ts);
 10097d0:	e9c0 670c 	strd	r6, r7, [r0, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 10097d4:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 10097d8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 10097dc:	b672      	cpsid	i
        nrf_802154_stat_timestamp_read(&cca_start_ts, last_cca_start_timestamp);
 10097de:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 10097e2:	f384 8810 	msr	PRIMASK, r4
        t_transmit  += RX_TX_TURNAROUND_TIME;
 10097e6:	2014      	movs	r0, #20
        t_listening += RX_RAMP_UP_TIME + (uint32_t)(ts - cca_start_ts);
 10097e8:	f1c2 0228 	rsb	r2, r2, #40	; 0x28
 10097ec:	4432      	add	r2, r6
    t_transmit += nrf_802154_frame_duration_get(mp_tx_data[PHR_OFFSET], true, true);
 10097ee:	680b      	ldr	r3, [r1, #0]
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));
 10097f0:	781b      	ldrb	r3, [r3, #0]
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
 10097f2:	3301      	adds	r3, #1
 10097f4:	015b      	lsls	r3, r3, #5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 10097f6:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 10097fa:	b672      	cpsid	i
    nrf_802154_stat_totals_increment(total_listening_time, t_listening);
 10097fc:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 10098a0 <nrf_802154_trx_transmit_frame_transmitted+0x110>
 1009800:	e9dc 6700 	ldrd	r6, r7, [ip]
 1009804:	1994      	adds	r4, r2, r6
 1009806:	f147 0500 	adc.w	r5, r7, #0
 100980a:	e9cc 4500 	strd	r4, r5, [ip]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100980e:	f38e 8810 	msr	PRIMASK, lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1009812:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1009816:	b672      	cpsid	i
    t_transmit += nrf_802154_frame_duration_get(mp_tx_data[PHR_OFFSET], true, true);
 1009818:	33a0      	adds	r3, #160	; 0xa0
 100981a:	4403      	add	r3, r0
    nrf_802154_stat_totals_increment(total_transmit_time, t_transmit);
 100981c:	e9dc 4504 	ldrd	r4, r5, [ip, #16]
 1009820:	191e      	adds	r6, r3, r4
 1009822:	f145 0700 	adc.w	r7, r5, #0
 1009826:	e9cc 6704 	strd	r6, r7, [ip, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100982a:	f382 8810 	msr	PRIMASK, r2
    if (ack_is_requested(mp_tx_data))
 100982e:	6808      	ldr	r0, [r1, #0]
 1009830:	f009 fc19 	bl	1013066 <ack_is_requested>
 1009834:	4604      	mov	r4, r0
 1009836:	b300      	cbz	r0, 100987a <nrf_802154_trx_transmit_frame_transmitted+0xea>
        state_set(RADIO_STATE_RX_ACK);
 1009838:	2006      	movs	r0, #6
 100983a:	f7ff f9bf 	bl	1008bbc <state_set>
        bool rx_buffer_free = rx_buffer_is_available();
 100983e:	f7ff f92b 	bl	1008a98 <rx_buffer_is_available>
 1009842:	4604      	mov	r4, r0
        nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 1009844:	f7ff f932 	bl	1008aac <rx_buffer_get>
 1009848:	f001 f854 	bl	100a8f4 <nrf_802154_trx_receive_buffer_set>
        nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_end_event_handle_get());
 100984c:	f001 fdb4 	bl	100b3b8 <nrf_802154_trx_radio_end_event_handle_get>
 1009850:	f008 f94e 	bl	1011af0 <nrf_802154_timer_coord_timestamp_prepare>
        nrf_802154_trx_receive_ack();
 1009854:	f001 f90c 	bl	100aa70 <nrf_802154_trx_receive_ack>
        m_listening_start_hp_timestamp = nrf_802154_hp_timer_current_time_get();
 1009858:	f7fe fd8e 	bl	1008378 <nrf_802154_hp_timer_current_time_get>
 100985c:	4b11      	ldr	r3, [pc, #68]	; (10098a4 <nrf_802154_trx_transmit_frame_transmitted+0x114>)
 100985e:	6018      	str	r0, [r3, #0]
        if (!rx_buffer_free)
 1009860:	b9bc      	cbnz	r4, 1009892 <nrf_802154_trx_transmit_frame_transmitted+0x102>
            rx_buffer_in_use_set(nrf_802154_rx_buffer_free_find());
 1009862:	f000 fd5f 	bl	100a324 <nrf_802154_rx_buffer_free_find>
    mp_current_rx_buffer = p_rx_buffer;
 1009866:	4b10      	ldr	r3, [pc, #64]	; (10098a8 <nrf_802154_trx_transmit_frame_transmitted+0x118>)
 1009868:	6018      	str	r0, [r3, #0]
            nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 100986a:	f7ff f91f 	bl	1008aac <rx_buffer_get>
}
 100986e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 1009872:	f001 b83f 	b.w	100a8f4 <nrf_802154_trx_receive_buffer_set>
        t_transmit += TX_RAMP_UP_TIME;
 1009876:	2028      	movs	r0, #40	; 0x28
 1009878:	e7b9      	b.n	10097ee <nrf_802154_trx_transmit_frame_transmitted+0x5e>
        state_set(RADIO_STATE_RX);
 100987a:	2002      	movs	r0, #2
 100987c:	f7ff f99e 	bl	1008bbc <state_set>
        rx_init();
 1009880:	f7ff fa82 	bl	1008d88 <rx_init>
        transmitted_frame_notify(NULL, 0, 0);
 1009884:	4622      	mov	r2, r4
 1009886:	4621      	mov	r1, r4
 1009888:	4620      	mov	r0, r4
}
 100988a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        transmitted_frame_notify(NULL, 0, 0);
 100988e:	f7ff ba33 	b.w	1008cf8 <transmitted_frame_notify>
}
 1009892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1009894:	21001150 	.word	0x21001150
 1009898:	21003be1 	.word	0x21003be1
 100989c:	210033f4 	.word	0x210033f4
 10098a0:	21001138 	.word	0x21001138
 10098a4:	210033d0 	.word	0x210033d0
 10098a8:	210033fc 	.word	0x210033fc

010098ac <nrf_802154_trx_receive_ack_received>:

void nrf_802154_trx_receive_ack_received(void)
{
 10098ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    // CRC of received frame is correct
    uint8_t * p_ack_data = mp_current_rx_buffer->data;
 10098ae:	4d40      	ldr	r5, [pc, #256]	; (10099b0 <nrf_802154_trx_receive_ack_received+0x104>)
{
 10098b0:	b08d      	sub	sp, #52	; 0x34
    uint8_t * p_ack_data = mp_current_rx_buffer->data;
 10098b2:	682c      	ldr	r4, [r5, #0]

#if NRF_802154_TOTAL_TIMES_MEASUREMENT_ENABLED
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
 10098b4:	f7fe fd5a 	bl	100836c <nrf_802154_hp_timer_timestamp_get>
    uint32_t listening_start_hp_timestamp = m_listening_start_hp_timestamp;

    update_total_times_on_receive_end(listening_start_hp_timestamp,
 10098b8:	682b      	ldr	r3, [r5, #0]
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
 10098ba:	4601      	mov	r1, r0
    update_total_times_on_receive_end(listening_start_hp_timestamp,
 10098bc:	781a      	ldrb	r2, [r3, #0]
 10098be:	4b3d      	ldr	r3, [pc, #244]	; (10099b4 <nrf_802154_trx_receive_ack_received+0x108>)
 10098c0:	6818      	ldr	r0, [r3, #0]
 10098c2:	f7ff f92b 	bl	1008b1c <update_total_times_on_receive_end>
                                      receive_end_hp_timestamp,
                                      mp_current_rx_buffer->data[PHR_OFFSET]);
#endif

    if (ack_match_check(mp_tx_data, p_ack_data))
 10098c6:	4b3c      	ldr	r3, [pc, #240]	; (10099b8 <nrf_802154_trx_receive_ack_received+0x10c>)
 10098c8:	6818      	ldr	r0, [r3, #0]
    if ((p_tx_data == NULL) || (p_ack_data == NULL))
 10098ca:	2800      	cmp	r0, #0
 10098cc:	d036      	beq.n	100993c <nrf_802154_trx_receive_ack_received+0x90>
 10098ce:	b3ac      	cbz	r4, 100993c <nrf_802154_trx_receive_ack_received+0x90>
    if ((p_ack_data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) != FRAME_TYPE_ACK)
 10098d0:	7863      	ldrb	r3, [r4, #1]
 10098d2:	f003 0307 	and.w	r3, r3, #7
 10098d6:	2b02      	cmp	r3, #2
 10098d8:	d130      	bne.n	100993c <nrf_802154_trx_receive_ack_received+0x90>
    if ((p_tx_data[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK) == FRAME_VERSION_2)
 10098da:	7883      	ldrb	r3, [r0, #2]
 10098dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 10098e0:	2b20      	cmp	r3, #32
 10098e2:	d130      	bne.n	1009946 <nrf_802154_trx_receive_ack_received+0x9a>
    parse_result = nrf_802154_frame_parser_data_init(p_tx_frame,
 10098e4:	7801      	ldrb	r1, [r0, #0]
 10098e6:	466b      	mov	r3, sp
 10098e8:	3101      	adds	r1, #1
 10098ea:	2203      	movs	r2, #3
 10098ec:	b2c9      	uxtb	r1, r1
 10098ee:	f009 febd 	bl	101366c <nrf_802154_frame_parser_data_init>
    if (!parse_result)
 10098f2:	b318      	cbz	r0, 100993c <nrf_802154_trx_receive_ack_received+0x90>
    parse_result = nrf_802154_frame_parser_data_init(p_ack_frame,
 10098f4:	7821      	ldrb	r1, [r4, #0]
 10098f6:	ab06      	add	r3, sp, #24
 10098f8:	3101      	adds	r1, #1
 10098fa:	2203      	movs	r2, #3
 10098fc:	4620      	mov	r0, r4
 10098fe:	b2c9      	uxtb	r1, r1
 1009900:	f009 feb4 	bl	101366c <nrf_802154_frame_parser_data_init>
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 1009904:	9e06      	ldr	r6, [sp, #24]
 1009906:	78b3      	ldrb	r3, [r6, #2]
    if (nrf_802154_frame_parser_frame_version_get(&ack_data) != FRAME_VERSION_2)
 1009908:	f003 0330 	and.w	r3, r3, #48	; 0x30
 100990c:	2b20      	cmp	r3, #32
 100990e:	d115      	bne.n	100993c <nrf_802154_trx_receive_ack_received+0x90>
 * @returns  Offset of the frame Source Address field.
 */
static inline uint8_t nrf_802154_frame_parser_src_addr_offset_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->mhr.src.addr_offset;
 1009910:	f89d 4009 	ldrb.w	r4, [sp, #9]
static inline const uint8_t * nrf_802154_frame_parser_src_addr_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    uint8_t offset = nrf_802154_frame_parser_src_addr_offset_get(p_parser_data);

    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1009914:	2cff      	cmp	r4, #255	; 0xff
 1009916:	d011      	beq.n	100993c <nrf_802154_trx_receive_ack_received+0x90>
    return p_parser_data->mhr.dst.addr_offset;
 1009918:	f89d 101f 	ldrb.w	r1, [sp, #31]
    {
        return NULL;
    }

    return &p_parser_data->p_frame[offset];
 100991c:	9b00      	ldr	r3, [sp, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100991e:	29ff      	cmp	r1, #255	; 0xff
 1009920:	d00c      	beq.n	100993c <nrf_802154_trx_receive_ack_received+0x90>
 * @returns  Source address size in bytes.
 */
static inline uint8_t nrf_802154_frame_parser_src_addr_size_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->helper.src_addr_size;
 1009922:	f89d 2012 	ldrb.w	r2, [sp, #18]
 * @returns  Destination address size in bytes.
 */
static inline uint8_t nrf_802154_frame_parser_dst_addr_size_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->helper.dst_addr_size;
 1009926:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
    if (!parse_result ||
 100992a:	b138      	cbz	r0, 100993c <nrf_802154_trx_receive_ack_received+0x90>
 100992c:	1918      	adds	r0, r3, r4
 100992e:	d005      	beq.n	100993c <nrf_802154_trx_receive_ack_received+0x90>
        (p_ack_dst_addr == NULL) ||
 1009930:	42ba      	cmp	r2, r7
 1009932:	d103      	bne.n	100993c <nrf_802154_trx_receive_ack_received+0x90>
        (0 != memcmp(p_tx_src_addr,
 1009934:	4431      	add	r1, r6
 1009936:	f009 f83a 	bl	10129ae <memcmp>
        (tx_src_addr_size != ack_dst_addr_size) ||
 100993a:	b170      	cbz	r0, 100995a <nrf_802154_trx_receive_ack_received+0xae>
    {
        on_bad_ack();
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 100993c:	b00d      	add	sp, #52	; 0x34
 100993e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        on_bad_ack();
 1009942:	f7ff ba67 	b.w	1008e14 <on_bad_ack>
    if (p_ack_data[PHR_OFFSET] != IMM_ACK_LENGTH)
 1009946:	7823      	ldrb	r3, [r4, #0]
 1009948:	2b05      	cmp	r3, #5
 100994a:	d1f7      	bne.n	100993c <nrf_802154_trx_receive_ack_received+0x90>
    switch (p_ack_data[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK)
 100994c:	78a3      	ldrb	r3, [r4, #2]
 100994e:	069b      	lsls	r3, r3, #26
 1009950:	d4f4      	bmi.n	100993c <nrf_802154_trx_receive_ack_received+0x90>
    if (p_ack_data[DSN_OFFSET] != p_tx_data[DSN_OFFSET])
 1009952:	78e2      	ldrb	r2, [r4, #3]
 1009954:	78c3      	ldrb	r3, [r0, #3]
 1009956:	429a      	cmp	r2, r3
 1009958:	d1f0      	bne.n	100993c <nrf_802154_trx_receive_ack_received+0x90>
        uint64_t ts = timer_coord_timestamp_get();
 100995a:	f009 fb9c 	bl	1013096 <timer_coord_timestamp_get>
 100995e:	4602      	mov	r2, r0
 1009960:	460b      	mov	r3, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1009962:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1009966:	b672      	cpsid	i
        nrf_802154_stat_timestamp_write(last_ack_end_timestamp, ts);
 1009968:	4814      	ldr	r0, [pc, #80]	; (10099bc <nrf_802154_trx_receive_ack_received+0x110>)
 100996a:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100996e:	f381 8810 	msr	PRIMASK, r1
        mp_current_rx_buffer->free = false;
 1009972:	2300      	movs	r3, #0
        rx_buffer_t * p_ack_buffer = mp_current_rx_buffer;
 1009974:	682c      	ldr	r4, [r5, #0]
        state_set(RADIO_STATE_RX);
 1009976:	2002      	movs	r0, #2
        mp_current_rx_buffer->free = false;
 1009978:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        state_set(RADIO_STATE_RX);
 100997c:	f7ff f91e 	bl	1008bbc <state_set>
        rx_init();
 1009980:	f7ff fa02 	bl	1008d88 <rx_init>
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
 1009984:	f009 fb7f 	bl	1013086 <rssi_last_measurement_get>
    uint32_t lqi = RX_FRAME_LQI(p_data);
 1009988:	7823      	ldrb	r3, [r4, #0]
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
 100998a:	4605      	mov	r5, r0
    uint32_t lqi = RX_FRAME_LQI(p_data);
 100998c:	4423      	add	r3, r4
    lqi  = nrf_802154_rssi_lqi_corrected_get(lqi);
 100998e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 1009992:	f009 fd6d 	bl	1013470 <nrf_802154_rssi_lqi_corrected_get>
    lqi *= LQI_VALUE_FACTOR;
 1009996:	0082      	lsls	r2, r0, #2
    if (lqi > LQI_MAX)
 1009998:	2aff      	cmp	r2, #255	; 0xff
 100999a:	bf28      	it	cs
 100999c:	22ff      	movcs	r2, #255	; 0xff
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
 100999e:	4629      	mov	r1, r5
 10099a0:	4620      	mov	r0, r4
 10099a2:	b2d2      	uxtb	r2, r2
}
 10099a4:	b00d      	add	sp, #52	; 0x34
 10099a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
 10099aa:	f7ff b9a5 	b.w	1008cf8 <transmitted_frame_notify>
 10099ae:	bf00      	nop
 10099b0:	210033fc 	.word	0x210033fc
 10099b4:	210033d0 	.word	0x210033d0
 10099b8:	210033f4 	.word	0x210033f4
 10099bc:	21001150 	.word	0x21001150

010099c0 <nrf_802154_trx_transmit_frame_ccaidle>:
    // of the nrf_802154_trx_transmit_frame does not contain TRX_TRANSMIT_NOTIFICATION_CCASTARTED.
    assert(false);
}

void nrf_802154_trx_transmit_frame_ccaidle(void)
{
 10099c0:	b538      	push	{r3, r4, r5, lr}

    assert(m_state == RADIO_STATE_CCA_TX);
    assert(m_trx_transmit_frame_notifications_mask & TRX_TRANSMIT_NOTIFICATION_CCAIDLE);

#if (NRF_802154_FRAME_TIMESTAMP_ENABLED)
    uint64_t ts = timer_coord_timestamp_get();
 10099c2:	f009 fb68 	bl	1013096 <timer_coord_timestamp_get>
 10099c6:	460d      	mov	r5, r1
 10099c8:	4604      	mov	r4, r0

    // Configure the timer coordinator to get a timestamp of the PHYEND event.
    nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_phyend_event_handle_get());
 10099ca:	f001 fcfd 	bl	100b3c8 <nrf_802154_trx_radio_phyend_event_handle_get>
 10099ce:	f008 f88f 	bl	1011af0 <nrf_802154_timer_coord_timestamp_prepare>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 10099d2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 10099d6:	b672      	cpsid	i

    // Update stat timestamp of CCASTART event
    nrf_802154_stat_timestamp_write(last_cca_start_timestamp, ts);
 10099d8:	4a08      	ldr	r2, [pc, #32]	; (10099fc <nrf_802154_trx_transmit_frame_ccaidle+0x3c>)
 10099da:	e9c2 450a 	strd	r4, r5, [r2, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 10099de:	f383 8810 	msr	PRIMASK, r3
#endif

    if (m_coex_tx_request_mode == NRF_802154_COEX_TX_REQUEST_MODE_CCA_DONE)
 10099e2:	4b07      	ldr	r3, [pc, #28]	; (1009a00 <nrf_802154_trx_transmit_frame_ccaidle+0x40>)
 10099e4:	781b      	ldrb	r3, [r3, #0]
 10099e6:	2b03      	cmp	r3, #3
 10099e8:	d107      	bne.n	10099fa <nrf_802154_trx_transmit_frame_ccaidle+0x3a>
    {
        nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_TX);
 10099ea:	2004      	movs	r0, #4
 10099ec:	f00b fc65 	bl	10152ba <nrf_802154_rsch_crit_sect_prio_request>
        m_flags.tx_diminished_prio = false;
 10099f0:	4b04      	ldr	r3, [pc, #16]	; (1009a04 <nrf_802154_trx_transmit_frame_ccaidle+0x44>)
 10099f2:	781a      	ldrb	r2, [r3, #0]
 10099f4:	f36f 1204 	bfc	r2, #4, #1
 10099f8:	701a      	strb	r2, [r3, #0]
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 10099fa:	bd38      	pop	{r3, r4, r5, pc}
 10099fc:	21001150 	.word	0x21001150
 1009a00:	21003bdb 	.word	0x21003bdb
 1009a04:	21003be1 	.word	0x21003be1

01009a08 <nrf_802154_trx_transmit_frame_ccabusy>:

void nrf_802154_trx_transmit_frame_ccabusy(void)
{
 1009a08:	b530      	push	{r4, r5, lr}
 1009a0a:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1009a0c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1009a10:	b672      	cpsid	i
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    nrf_802154_stat_counter_increment(cca_failed_attempts);
 1009a12:	4a14      	ldr	r2, [pc, #80]	; (1009a64 <nrf_802154_trx_transmit_frame_ccabusy+0x5c>)
 1009a14:	6813      	ldr	r3, [r2, #0]
 1009a16:	3301      	adds	r3, #1
 1009a18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1009a1a:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1009a1e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1009a22:	b672      	cpsid	i

#if (NRF_802154_TOTAL_TIMES_MEASUREMENT_ENABLED)
    uint32_t t_listening = RX_RAMP_UP_TIME + PHY_US_TIME_FROM_SYMBOLS(A_CCA_DURATION_SYMBOLS);

    nrf_802154_stat_totals_increment(total_listening_time, t_listening);
 1009a24:	4c10      	ldr	r4, [pc, #64]	; (1009a68 <nrf_802154_trx_transmit_frame_ccabusy+0x60>)
 1009a26:	e9d4 2300 	ldrd	r2, r3, [r4]
 1009a2a:	f112 00a8 	adds.w	r0, r2, #168	; 0xa8
 1009a2e:	f143 0100 	adc.w	r1, r3, #0
 1009a32:	e9c4 0100 	strd	r0, r1, [r4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1009a36:	f385 8810 	msr	PRIMASK, r5
#endif

    state_set(RADIO_STATE_RX);
 1009a3a:	2002      	movs	r0, #2
 1009a3c:	f7ff f8be 	bl	1008bbc <state_set>
    rx_init();
 1009a40:	f7ff f9a2 	bl	1008d88 <rx_init>

    nrf_802154_transmit_done_metadata_t metadata = {};
 1009a44:	2218      	movs	r2, #24
 1009a46:	2100      	movs	r1, #0
 1009a48:	4668      	mov	r0, sp
 1009a4a:	f008 ffe2 	bl	1012a12 <memset>

    nrf_802154_tx_work_buffer_original_frame_update(mp_tx_data, &metadata.frame_props);
 1009a4e:	4b07      	ldr	r3, [pc, #28]	; (1009a6c <nrf_802154_trx_transmit_frame_ccabusy+0x64>)
 1009a50:	4669      	mov	r1, sp
 1009a52:	6818      	ldr	r0, [r3, #0]
 1009a54:	f001 fde2 	bl	100b61c <nrf_802154_tx_work_buffer_original_frame_update>
    transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_BUSY_CHANNEL, &metadata);
 1009a58:	4669      	mov	r1, sp
 1009a5a:	2001      	movs	r0, #1
 1009a5c:	f7ff f8b4 	bl	1008bc8 <transmit_failed_notify_and_nesting_allow>

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1009a60:	b007      	add	sp, #28
 1009a62:	bd30      	pop	{r4, r5, pc}
 1009a64:	21001150 	.word	0x21001150
 1009a68:	21001138 	.word	0x21001138
 1009a6c:	210033f4 	.word	0x210033f4

01009a70 <nrf_802154_trx_energy_detection_finished>:

void nrf_802154_trx_energy_detection_finished(uint8_t ed_sample)
{
 1009a70:	b538      	push	{r3, r4, r5, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    if (m_ed_result < ed_sample)
 1009a72:	4c1f      	ldr	r4, [pc, #124]	; (1009af0 <nrf_802154_trx_energy_detection_finished+0x80>)
    {
        // Collect maximum value of samples provided by trx
        m_ed_result = ed_sample;
    }

    if (m_ed_time_left >= ED_ITER_DURATION)
 1009a74:	4d1f      	ldr	r5, [pc, #124]	; (1009af4 <nrf_802154_trx_energy_detection_finished+0x84>)
    if (m_ed_result < ed_sample)
 1009a76:	7823      	ldrb	r3, [r4, #0]
 1009a78:	4283      	cmp	r3, r0
    if (m_ed_time_left >= ED_ITER_DURATION)
 1009a7a:	682b      	ldr	r3, [r5, #0]
        m_ed_result = ed_sample;
 1009a7c:	bf38      	it	cc
 1009a7e:	7020      	strbcc	r0, [r4, #0]
    if (m_ed_time_left >= ED_ITER_DURATION)
 1009a80:	2b7f      	cmp	r3, #127	; 0x7f
 1009a82:	d916      	bls.n	1009ab2 <nrf_802154_trx_energy_detection_finished+0x42>
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
 1009a84:	f00b fc17 	bl	10152b6 <nrf_802154_rsch_timeslot_us_left_get>
    if (iters_left_in_timeslot > ED_ITERS_OVERHEAD)
 1009a88:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
 1009a8c:	d32e      	bcc.n	1009aec <nrf_802154_trx_energy_detection_finished+0x7c>
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
 1009a8e:	682a      	ldr	r2, [r5, #0]
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
 1009a90:	09c0      	lsrs	r0, r0, #7
        iters_left_in_timeslot -= ED_ITERS_OVERHEAD;
 1009a92:	1e83      	subs	r3, r0, #2
        if (requested_iters < iters_left_in_timeslot)
 1009a94:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
 1009a98:	ea4f 10d2 	mov.w	r0, r2, lsr #7
            *p_requested_ed_time_us = 0U;
 1009a9c:	bf8c      	ite	hi
 1009a9e:	2200      	movhi	r2, #0
            *p_requested_ed_time_us = *p_requested_ed_time_us -
 1009aa0:	eba2 12c3 	subls.w	r2, r2, r3, lsl #7
            requested_iters = iters_left_in_timeslot;
 1009aa4:	602a      	str	r2, [r5, #0]
            *p_requested_ed_time_us = *p_requested_ed_time_us -
 1009aa6:	bf98      	it	ls
 1009aa8:	4618      	movls	r0, r3
        energy_detected_notify(nrf_802154_rssi_ed_sample_convert(m_ed_result));

    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1009aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            nrf_802154_trx_energy_detection(trx_ed_count);
 1009aae:	f001 bac1 	b.w	100b034 <nrf_802154_trx_energy_detection>
    else if (nrf_802154_sl_ant_div_energy_detection_finished_notify())
 1009ab2:	f00b fb47 	bl	1015144 <nrf_802154_sl_ant_div_energy_detection_finished_notify>
 1009ab6:	b118      	cbz	r0, 1009ac0 <nrf_802154_trx_energy_detection_finished+0x50>
}
 1009ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ed_init();
 1009abc:	f7ff ba06 	b.w	1008ecc <ed_init>
        nrf_802154_trx_channel_set(nrf_802154_pib_channel_get());
 1009ac0:	f000 fb34 	bl	100a12c <nrf_802154_pib_channel_get>
 1009ac4:	f009 fd12 	bl	10134ec <nrf_802154_trx_channel_set>
        state_set(RADIO_STATE_RX);
 1009ac8:	2002      	movs	r0, #2
 1009aca:	f7ff f877 	bl	1008bbc <state_set>
        rx_init();
 1009ace:	f7ff f95b 	bl	1008d88 <rx_init>
        energy_detected_notify(nrf_802154_rssi_ed_sample_convert(m_ed_result));
 1009ad2:	7820      	ldrb	r0, [r4, #0]
 1009ad4:	f009 fcdd 	bl	1013492 <nrf_802154_rssi_ed_sample_convert>
 1009ad8:	4604      	mov	r4, r0
    nrf_802154_critical_section_nesting_allow();
 1009ada:	f000 fac9 	bl	100a070 <nrf_802154_critical_section_nesting_allow>
    nrf_802154_notify_energy_detected(result);
 1009ade:	4620      	mov	r0, r4
 1009ae0:	f009 fe7b 	bl	10137da <nrf_802154_notify_energy_detected>
}
 1009ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    nrf_802154_critical_section_nesting_deny();
 1009ae8:	f000 ba7e 	b.w	1009fe8 <nrf_802154_critical_section_nesting_deny>
}
 1009aec:	bd38      	pop	{r3, r4, r5, pc}
 1009aee:	bf00      	nop
 1009af0:	21003be8 	.word	0x21003be8
 1009af4:	210033f0 	.word	0x210033f0

01009af8 <nrf_802154_core_init>:
/***************************************************************************************************
 * @section API functions
 **************************************************************************************************/

void nrf_802154_core_init(void)
{
 1009af8:	b508      	push	{r3, lr}
    m_state                    = RADIO_STATE_SLEEP;
 1009afa:	2300      	movs	r3, #0
 1009afc:	4a07      	ldr	r2, [pc, #28]	; (1009b1c <nrf_802154_core_init+0x24>)
    m_rsch_timeslot_is_granted = false;
    m_rx_prestarted_trig_count = 0;

    nrf_802154_sl_timer_init(&m_rx_prestarted_timer);
 1009afe:	4808      	ldr	r0, [pc, #32]	; (1009b20 <nrf_802154_core_init+0x28>)
    m_state                    = RADIO_STATE_SLEEP;
 1009b00:	7013      	strb	r3, [r2, #0]
    m_rsch_timeslot_is_granted = false;
 1009b02:	4a08      	ldr	r2, [pc, #32]	; (1009b24 <nrf_802154_core_init+0x2c>)
 1009b04:	7013      	strb	r3, [r2, #0]
    m_rx_prestarted_trig_count = 0;
 1009b06:	4a08      	ldr	r2, [pc, #32]	; (1009b28 <nrf_802154_core_init+0x30>)
 1009b08:	7013      	strb	r3, [r2, #0]
    nrf_802154_sl_timer_init(&m_rx_prestarted_timer);
 1009b0a:	f00b fbfc 	bl	1015306 <nrf_802154_sl_timer_init>

    nrf_802154_trx_init();
 1009b0e:	f009 fce6 	bl	10134de <nrf_802154_trx_init>
    nrf_802154_ack_generator_init();
}
 1009b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_ack_generator_init();
 1009b16:	f009 be13 	b.w	1013740 <nrf_802154_ack_generator_init>
 1009b1a:	bf00      	nop
 1009b1c:	21003be2 	.word	0x21003be2
 1009b20:	21001110 	.word	0x21001110
 1009b24:	21003be0 	.word	0x21003be0
 1009b28:	21003bdc 	.word	0x21003bdc

01009b2c <nrf_802154_core_sleep>:
{
    return m_state;
}

bool nrf_802154_core_sleep(nrf_802154_term_t term_lvl)
{
 1009b2c:	b538      	push	{r3, r4, r5, lr}
 1009b2e:	4605      	mov	r5, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = nrf_802154_critical_section_enter();
 1009b30:	f009 fb4b 	bl	10131ca <nrf_802154_critical_section_enter>

    if (result)
 1009b34:	4604      	mov	r4, r0
 1009b36:	b1f0      	cbz	r0, 1009b76 <nrf_802154_core_sleep+0x4a>
    {
        if ((m_state != RADIO_STATE_SLEEP) && (m_state != RADIO_STATE_FALLING_ASLEEP))
 1009b38:	4b10      	ldr	r3, [pc, #64]	; (1009b7c <nrf_802154_core_sleep+0x50>)
 1009b3a:	781a      	ldrb	r2, [r3, #0]
 1009b3c:	b1ba      	cbz	r2, 1009b6e <nrf_802154_core_sleep+0x42>
 1009b3e:	781b      	ldrb	r3, [r3, #0]
 1009b40:	2b01      	cmp	r3, #1
 1009b42:	d014      	beq.n	1009b6e <nrf_802154_core_sleep+0x42>
        {
            result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
 1009b44:	2201      	movs	r2, #1
 1009b46:	4628      	mov	r0, r5
 1009b48:	4611      	mov	r1, r2
 1009b4a:	f7ff fa6b 	bl	1009024 <current_operation_terminate>

            if (result)
 1009b4e:	4605      	mov	r5, r0
 1009b50:	b170      	cbz	r0, 1009b70 <nrf_802154_core_sleep+0x44>
    return m_rsch_timeslot_is_granted;
 1009b52:	4b0b      	ldr	r3, [pc, #44]	; (1009b80 <nrf_802154_core_sleep+0x54>)
 1009b54:	781b      	ldrb	r3, [r3, #0]
            {
                // The order of calls in the following blocks is inverted to avoid RAAL races.
                if (timeslot_is_granted())
 1009b56:	b12b      	cbz	r3, 1009b64 <nrf_802154_core_sleep+0x38>
                {
                    state_set(RADIO_STATE_FALLING_ASLEEP);
 1009b58:	2001      	movs	r0, #1
 1009b5a:	f7ff f82f 	bl	1008bbc <state_set>
    if (nrf_802154_trx_go_idle())
 1009b5e:	f001 f9d9 	bl	100af14 <nrf_802154_trx_go_idle>
 1009b62:	b920      	cbnz	r0, 1009b6e <nrf_802154_core_sleep+0x42>
        sleep_init();
 1009b64:	f7fe fffe 	bl	1008b64 <sleep_init>
        state_set(RADIO_STATE_SLEEP);
 1009b68:	2000      	movs	r0, #0
 1009b6a:	f7ff f827 	bl	1008bbc <state_set>
    bool result = nrf_802154_critical_section_enter();
 1009b6e:	4625      	mov	r5, r4
                    state_set(RADIO_STATE_SLEEP);
                }
            }
        }

        nrf_802154_critical_section_exit();
 1009b70:	f000 fa18 	bl	1009fa4 <nrf_802154_critical_section_exit>
 1009b74:	462c      	mov	r4, r5
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009b76:	4620      	mov	r0, r4
 1009b78:	bd38      	pop	{r3, r4, r5, pc}
 1009b7a:	bf00      	nop
 1009b7c:	21003be2 	.word	0x21003be2
 1009b80:	21003be0 	.word	0x21003be0

01009b84 <nrf_802154_core_receive>:
bool nrf_802154_core_receive(nrf_802154_term_t              term_lvl,
                             req_originator_t               req_orig,
                             nrf_802154_notification_func_t notify_function,
                             bool                           notify_abort,
                             uint32_t                       id)
{
 1009b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1009b88:	4606      	mov	r6, r0
 1009b8a:	460f      	mov	r7, r1
 1009b8c:	4615      	mov	r5, r2
 1009b8e:	4698      	mov	r8, r3
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = nrf_802154_critical_section_enter();
 1009b90:	f009 fb1b 	bl	10131ca <nrf_802154_critical_section_enter>

    if (result)
 1009b94:	4604      	mov	r4, r0
 1009b96:	b350      	cbz	r0, 1009bee <nrf_802154_core_receive+0x6a>
    {
        if ((m_state != RADIO_STATE_RX) && (m_state != RADIO_STATE_TX_ACK))
 1009b98:	4b17      	ldr	r3, [pc, #92]	; (1009bf8 <nrf_802154_core_receive+0x74>)
 1009b9a:	781a      	ldrb	r2, [r3, #0]
 1009b9c:	2a02      	cmp	r2, #2
 1009b9e:	d006      	beq.n	1009bae <nrf_802154_core_receive+0x2a>
 1009ba0:	781b      	ldrb	r3, [r3, #0]
 1009ba2:	2b03      	cmp	r3, #3
 1009ba4:	d003      	beq.n	1009bae <nrf_802154_core_receive+0x2a>
        {
            if (critical_section_can_be_processed_now())
 1009ba6:	f7ff f86d 	bl	1008c84 <critical_section_can_be_processed_now>
 1009baa:	b940      	cbnz	r0, 1009bbe <nrf_802154_core_receive+0x3a>
                    rx_init();
                }
            }
            else
            {
                result = false;
 1009bac:	2400      	movs	r4, #0
            }
        }

        if (notify_function != NULL)
 1009bae:	b10d      	cbz	r5, 1009bb4 <nrf_802154_core_receive+0x30>
        {
            notify_function(result);
 1009bb0:	4620      	mov	r0, r4
 1009bb2:	47a8      	blx	r5
        }

        nrf_802154_critical_section_exit();
 1009bb4:	f000 f9f6 	bl	1009fa4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009bb8:	4620      	mov	r0, r4
 1009bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                result = current_operation_terminate(term_lvl, req_orig, notify_abort);
 1009bbe:	4642      	mov	r2, r8
 1009bc0:	4639      	mov	r1, r7
 1009bc2:	4630      	mov	r0, r6
 1009bc4:	f7ff fa2e 	bl	1009024 <current_operation_terminate>
                if (result)
 1009bc8:	2800      	cmp	r0, #0
 1009bca:	d0ef      	beq.n	1009bac <nrf_802154_core_receive+0x28>
    if (nrf_802154_wifi_coex_is_enabled())
 1009bcc:	f00b fb9c 	bl	1015308 <nrf_802154_wifi_coex_is_enabled>
 1009bd0:	b108      	cbz	r0, 1009bd6 <nrf_802154_core_receive+0x52>
        switch (nrf_802154_pib_coex_rx_request_mode_get())
 1009bd2:	f000 fb0d 	bl	100a1f0 <nrf_802154_pib_coex_rx_request_mode_get>
                    m_trx_receive_frame_notifications_mask =
 1009bd6:	2203      	movs	r2, #3
 1009bd8:	4b08      	ldr	r3, [pc, #32]	; (1009bfc <nrf_802154_core_receive+0x78>)
                    state_set(RADIO_STATE_RX);
 1009bda:	2002      	movs	r0, #2
                    m_trx_receive_frame_notifications_mask =
 1009bdc:	701a      	strb	r2, [r3, #0]
                    m_rx_window_id = id;
 1009bde:	9a06      	ldr	r2, [sp, #24]
 1009be0:	4b07      	ldr	r3, [pc, #28]	; (1009c00 <nrf_802154_core_receive+0x7c>)
 1009be2:	601a      	str	r2, [r3, #0]
                    state_set(RADIO_STATE_RX);
 1009be4:	f7fe ffea 	bl	1008bbc <state_set>
                    rx_init();
 1009be8:	f7ff f8ce 	bl	1008d88 <rx_init>
 1009bec:	e7df      	b.n	1009bae <nrf_802154_core_receive+0x2a>
        if (notify_function != NULL)
 1009bee:	2d00      	cmp	r5, #0
 1009bf0:	d0e2      	beq.n	1009bb8 <nrf_802154_core_receive+0x34>
            notify_function(false);
 1009bf2:	47a8      	blx	r5
 1009bf4:	e7e0      	b.n	1009bb8 <nrf_802154_core_receive+0x34>
 1009bf6:	bf00      	nop
 1009bf8:	21003be2 	.word	0x21003be2
 1009bfc:	21003bde 	.word	0x21003bde
 1009c00:	210033d4 	.word	0x210033d4

01009c04 <nrf_802154_core_transmit>:
bool nrf_802154_core_transmit(nrf_802154_term_t              term_lvl,
                              req_originator_t               req_orig,
                              uint8_t                      * p_data,
                              nrf_802154_transmit_params_t * p_params,
                              nrf_802154_notification_func_t notify_function)
{
 1009c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1009c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 1009c0c:	4607      	mov	r7, r0
 1009c0e:	4689      	mov	r9, r1
 1009c10:	4616      	mov	r6, r2
 1009c12:	461c      	mov	r4, r3
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1009c14:	f009 fa57 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1009c18:	4605      	mov	r5, r0
 1009c1a:	2800      	cmp	r0, #0
 1009c1c:	d05a      	beq.n	1009cd4 <nrf_802154_core_transmit+0xd0>
    {
        if (nrf_802154_core_hooks_pre_transmission(p_data, p_params, &transmit_failed_notify))
 1009c1e:	4621      	mov	r1, r4
 1009c20:	4630      	mov	r0, r6
 1009c22:	4a2f      	ldr	r2, [pc, #188]	; (1009ce0 <nrf_802154_core_transmit+0xdc>)
 1009c24:	f009 fab7 	bl	1013196 <nrf_802154_core_hooks_pre_transmission>
 1009c28:	b130      	cbz	r0, 1009c38 <nrf_802154_core_transmit+0x34>
        {
            result = current_operation_terminate(term_lvl, req_orig, true);
 1009c2a:	2201      	movs	r2, #1
 1009c2c:	4649      	mov	r1, r9
 1009c2e:	4638      	mov	r0, r7
 1009c30:	f7ff f9f8 	bl	1009024 <current_operation_terminate>

            if (result)
 1009c34:	b950      	cbnz	r0, 1009c4c <nrf_802154_core_transmit+0x48>
            {
                nrf_802154_tx_work_buffer_reset(&p_params->frame_props);
                result = nrf_802154_core_hooks_tx_setup(p_data, p_params, &transmit_failed_notify);
 1009c36:	2500      	movs	r5, #0
                    result = true;
                }
            }
        }

        if (notify_function != NULL)
 1009c38:	f1b8 0f00 	cmp.w	r8, #0
 1009c3c:	d001      	beq.n	1009c42 <nrf_802154_core_transmit+0x3e>
        {
            notify_function(result);
 1009c3e:	4628      	mov	r0, r5
 1009c40:	47c0      	blx	r8
        }

        nrf_802154_critical_section_exit();
 1009c42:	f000 f9af 	bl	1009fa4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009c46:	4628      	mov	r0, r5
 1009c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                nrf_802154_tx_work_buffer_reset(&p_params->frame_props);
 1009c4c:	4620      	mov	r0, r4
 1009c4e:	f001 fcb9 	bl	100b5c4 <nrf_802154_tx_work_buffer_reset>
                result = nrf_802154_core_hooks_tx_setup(p_data, p_params, &transmit_failed_notify);
 1009c52:	4621      	mov	r1, r4
 1009c54:	4630      	mov	r0, r6
 1009c56:	4a22      	ldr	r2, [pc, #136]	; (1009ce0 <nrf_802154_core_transmit+0xdc>)
 1009c58:	f000 f95a 	bl	1009f10 <nrf_802154_core_hooks_tx_setup>
            if (result)
 1009c5c:	2800      	cmp	r0, #0
 1009c5e:	d0ea      	beq.n	1009c36 <nrf_802154_core_transmit+0x32>
                m_coex_tx_request_mode                  = nrf_802154_pib_coex_tx_request_mode_get();
 1009c60:	f000 facc 	bl	100a1fc <nrf_802154_pib_coex_tx_request_mode_get>
 1009c64:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1009ce4 <nrf_802154_core_transmit+0xe0>
                    make_trx_frame_transmit_notification_mask(p_params->cca);
 1009c68:	7967      	ldrb	r7, [r4, #5]
                m_coex_tx_request_mode                  = nrf_802154_pib_coex_tx_request_mode_get();
 1009c6a:	f889 0000 	strb.w	r0, [r9]
    if (nrf_802154_wifi_coex_is_enabled())
 1009c6e:	f00b fb4b 	bl	1015308 <nrf_802154_wifi_coex_is_enabled>
 1009c72:	b118      	cbz	r0, 1009c7c <nrf_802154_core_transmit+0x78>
        switch (nrf_802154_pib_coex_tx_request_mode_get())
 1009c74:	f000 fac2 	bl	100a1fc <nrf_802154_pib_coex_tx_request_mode_get>
 1009c78:	2803      	cmp	r0, #3
 1009c7a:	d029      	beq.n	1009cd0 <nrf_802154_core_transmit+0xcc>
    if (cca)
 1009c7c:	007b      	lsls	r3, r7, #1
 1009c7e:	b2db      	uxtb	r3, r3
                m_trx_transmit_frame_notifications_mask =
 1009c80:	4a19      	ldr	r2, [pc, #100]	; (1009ce8 <nrf_802154_core_transmit+0xe4>)
 1009c82:	7013      	strb	r3, [r2, #0]
                    m_coex_tx_request_mode == NRF_802154_COEX_TX_REQUEST_MODE_CCA_DONE;
 1009c84:	f899 3000 	ldrb.w	r3, [r9]
                m_flags.tx_diminished_prio =
 1009c88:	4a18      	ldr	r2, [pc, #96]	; (1009cec <nrf_802154_core_transmit+0xe8>)
                    m_coex_tx_request_mode == NRF_802154_COEX_TX_REQUEST_MODE_CCA_DONE;
 1009c8a:	1ed9      	subs	r1, r3, #3
 1009c8c:	424b      	negs	r3, r1
 1009c8e:	414b      	adcs	r3, r1
                m_flags.tx_diminished_prio =
 1009c90:	7811      	ldrb	r1, [r2, #0]
 1009c92:	f363 1104 	bfi	r1, r3, #4, #1
 1009c96:	7011      	strb	r1, [r2, #0]
                state_set(p_params->cca ? RADIO_STATE_CCA_TX : RADIO_STATE_TX);
 1009c98:	7960      	ldrb	r0, [r4, #5]
 1009c9a:	f1c0 0005 	rsb	r0, r0, #5
 1009c9e:	b2c0      	uxtb	r0, r0
 1009ca0:	f7fe ff8c 	bl	1008bbc <state_set>
                mp_tx_data = p_data;
 1009ca4:	4b12      	ldr	r3, [pc, #72]	; (1009cf0 <nrf_802154_core_transmit+0xec>)
                m_tx_power = p_params->tx_power;
 1009ca6:	8862      	ldrh	r2, [r4, #2]
                mp_tx_data = p_data;
 1009ca8:	601e      	str	r6, [r3, #0]
                m_tx_power = p_params->tx_power;
 1009caa:	4b12      	ldr	r3, [pc, #72]	; (1009cf4 <nrf_802154_core_transmit+0xf0>)
                result = tx_init(p_data, p_params->cca);
 1009cac:	4630      	mov	r0, r6
                m_tx_power = p_params->tx_power;
 1009cae:	801a      	strh	r2, [r3, #0]
 1009cb0:	7922      	ldrb	r2, [r4, #4]
                result = tx_init(p_data, p_params->cca);
 1009cb2:	7961      	ldrb	r1, [r4, #5]
                m_tx_power = p_params->tx_power;
 1009cb4:	709a      	strb	r2, [r3, #2]
                result = tx_init(p_data, p_params->cca);
 1009cb6:	f7fe ffa5 	bl	1008c04 <tx_init>
                if (p_params->immediate)
 1009cba:	79a3      	ldrb	r3, [r4, #6]
 1009cbc:	2b00      	cmp	r3, #0
 1009cbe:	d0bb      	beq.n	1009c38 <nrf_802154_core_transmit+0x34>
                    if (!result)
 1009cc0:	2800      	cmp	r0, #0
 1009cc2:	d1b9      	bne.n	1009c38 <nrf_802154_core_transmit+0x34>
                        state_set(RADIO_STATE_RX);
 1009cc4:	2002      	movs	r0, #2
 1009cc6:	f7fe ff79 	bl	1008bbc <state_set>
                        rx_init();
 1009cca:	f7ff f85d 	bl	1008d88 <rx_init>
 1009cce:	e7b2      	b.n	1009c36 <nrf_802154_core_transmit+0x32>
                result |= TRX_TRANSMIT_NOTIFICATION_CCAIDLE;
 1009cd0:	2302      	movs	r3, #2
 1009cd2:	e7d5      	b.n	1009c80 <nrf_802154_core_transmit+0x7c>
        if (notify_function != NULL)
 1009cd4:	f1b8 0f00 	cmp.w	r8, #0
 1009cd8:	d0b5      	beq.n	1009c46 <nrf_802154_core_transmit+0x42>
            notify_function(false);
 1009cda:	47c0      	blx	r8
 1009cdc:	e7b3      	b.n	1009c46 <nrf_802154_core_transmit+0x42>
 1009cde:	bf00      	nop
 1009ce0:	01013049 	.word	0x01013049
 1009ce4:	21003bdb 	.word	0x21003bdb
 1009ce8:	21003bdd 	.word	0x21003bdd
 1009cec:	21003be1 	.word	0x21003be1
 1009cf0:	210033f4 	.word	0x210033f4
 1009cf4:	21003be4 	.word	0x21003be4

01009cf8 <nrf_802154_core_energy_detection>:

bool nrf_802154_core_energy_detection(nrf_802154_term_t term_lvl, uint32_t time_us)
{
 1009cf8:	b570      	push	{r4, r5, r6, lr}
 1009cfa:	4606      	mov	r6, r0
 1009cfc:	460d      	mov	r5, r1
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1009cfe:	f009 f9e2 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1009d02:	4604      	mov	r4, r0
 1009d04:	b1a8      	cbz	r0, 1009d32 <nrf_802154_core_energy_detection+0x3a>
    {
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
 1009d06:	2201      	movs	r2, #1
 1009d08:	4630      	mov	r0, r6
 1009d0a:	4611      	mov	r1, r2
 1009d0c:	f7ff f98a 	bl	1009024 <current_operation_terminate>

        if (result)
 1009d10:	4604      	mov	r4, r0
 1009d12:	b160      	cbz	r0, 1009d2e <nrf_802154_core_energy_detection+0x36>
        {
            if (time_us < ED_ITER_DURATION)
 1009d14:	2d80      	cmp	r5, #128	; 0x80
 1009d16:	bf38      	it	cc
 1009d18:	2580      	movcc	r5, #128	; 0x80
            {
                time_us = ED_ITER_DURATION;
            }

            m_ed_time_left = time_us;
            m_ed_result    = 0;
 1009d1a:	2200      	movs	r2, #0
            m_ed_time_left = time_us;
 1009d1c:	4b06      	ldr	r3, [pc, #24]	; (1009d38 <nrf_802154_core_energy_detection+0x40>)

            state_set(RADIO_STATE_ED);
 1009d1e:	2007      	movs	r0, #7
            m_ed_time_left = time_us;
 1009d20:	601d      	str	r5, [r3, #0]
            m_ed_result    = 0;
 1009d22:	4b06      	ldr	r3, [pc, #24]	; (1009d3c <nrf_802154_core_energy_detection+0x44>)
 1009d24:	701a      	strb	r2, [r3, #0]
            state_set(RADIO_STATE_ED);
 1009d26:	f7fe ff49 	bl	1008bbc <state_set>
            ed_init();
 1009d2a:	f7ff f8cf 	bl	1008ecc <ed_init>
        }

        nrf_802154_critical_section_exit();
 1009d2e:	f000 f939 	bl	1009fa4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009d32:	4620      	mov	r0, r4
 1009d34:	bd70      	pop	{r4, r5, r6, pc}
 1009d36:	bf00      	nop
 1009d38:	210033f0 	.word	0x210033f0
 1009d3c:	21003be8 	.word	0x21003be8

01009d40 <nrf_802154_core_modulated_carrier>:
    return result;
}

bool nrf_802154_core_modulated_carrier(nrf_802154_term_t term_lvl,
                                       const uint8_t   * p_data)
{
 1009d40:	b570      	push	{r4, r5, r6, lr}
 1009d42:	4606      	mov	r6, r0
 1009d44:	460d      	mov	r5, r1
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1009d46:	f009 f9be 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1009d4a:	4604      	mov	r4, r0
 1009d4c:	b180      	cbz	r0, 1009d70 <nrf_802154_core_modulated_carrier+0x30>
    {
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
 1009d4e:	2201      	movs	r2, #1
 1009d50:	4630      	mov	r0, r6
 1009d52:	4611      	mov	r1, r2
 1009d54:	f7ff f966 	bl	1009024 <current_operation_terminate>

        if (result)
 1009d58:	4604      	mov	r4, r0
 1009d5a:	b138      	cbz	r0, 1009d6c <nrf_802154_core_modulated_carrier+0x2c>
        {
            state_set(RADIO_STATE_MODULATED_CARRIER);
 1009d5c:	200a      	movs	r0, #10
 1009d5e:	f7fe ff2d 	bl	1008bbc <state_set>
            mp_tx_data = (uint8_t *)p_data;
 1009d62:	4b04      	ldr	r3, [pc, #16]	; (1009d74 <nrf_802154_core_modulated_carrier+0x34>)
            modulated_carrier_init(p_data);
 1009d64:	4628      	mov	r0, r5
            mp_tx_data = (uint8_t *)p_data;
 1009d66:	601d      	str	r5, [r3, #0]
            modulated_carrier_init(p_data);
 1009d68:	f7ff f898 	bl	1008e9c <modulated_carrier_init>
        }

        nrf_802154_critical_section_exit();
 1009d6c:	f000 f91a 	bl	1009fa4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009d70:	4620      	mov	r0, r4
 1009d72:	bd70      	pop	{r4, r5, r6, pc}
 1009d74:	210033f4 	.word	0x210033f4

01009d78 <nrf_802154_core_notify_buffer_free>:

#endif // NRF_802154_CARRIER_FUNCTIONS_ENABLED

bool nrf_802154_core_notify_buffer_free(uint8_t * p_data)
{
 1009d78:	b510      	push	{r4, lr}
 1009d7a:	4604      	mov	r4, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    rx_buffer_t * p_buffer     = (rx_buffer_t *)p_data;
    bool          in_crit_sect = critical_section_enter_and_verify_timeslot_length();
 1009d7c:	f009 f9a3 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>

    p_buffer->free = true;
 1009d80:	2301      	movs	r3, #1
 1009d82:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80

    if (in_crit_sect)
 1009d86:	b168      	cbz	r0, 1009da4 <nrf_802154_core_notify_buffer_free+0x2c>
    return m_rsch_timeslot_is_granted;
 1009d88:	4b07      	ldr	r3, [pc, #28]	; (1009da8 <nrf_802154_core_notify_buffer_free+0x30>)
 1009d8a:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted())
 1009d8c:	b143      	cbz	r3, 1009da0 <nrf_802154_core_notify_buffer_free+0x28>
        {
            if (nrf_802154_trx_receive_is_buffer_missing())
 1009d8e:	f000 fda1 	bl	100a8d4 <nrf_802154_trx_receive_is_buffer_missing>
 1009d92:	b128      	cbz	r0, 1009da0 <nrf_802154_core_notify_buffer_free+0x28>
    mp_current_rx_buffer = p_rx_buffer;
 1009d94:	4b05      	ldr	r3, [pc, #20]	; (1009dac <nrf_802154_core_notify_buffer_free+0x34>)
 1009d96:	601c      	str	r4, [r3, #0]
            {
                rx_buffer_in_use_set(p_buffer);
                nrf_802154_trx_receive_buffer_set(rx_buffer_get());
 1009d98:	f7fe fe88 	bl	1008aac <rx_buffer_get>
 1009d9c:	f000 fdaa 	bl	100a8f4 <nrf_802154_trx_receive_buffer_set>
            }
        }

        nrf_802154_critical_section_exit();
 1009da0:	f000 f900 	bl	1009fa4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return true;
}
 1009da4:	2001      	movs	r0, #1
 1009da6:	bd10      	pop	{r4, pc}
 1009da8:	21003be0 	.word	0x21003be0
 1009dac:	210033fc 	.word	0x210033fc

01009db0 <nrf_802154_core_channel_update>:

bool nrf_802154_core_channel_update(req_originator_t req_orig)
{
 1009db0:	b570      	push	{r4, r5, r6, lr}
 1009db2:	4606      	mov	r6, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1009db4:	f009 f987 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1009db8:	4604      	mov	r4, r0
 1009dba:	b1c8      	cbz	r0, 1009df0 <nrf_802154_core_channel_update+0x40>
    return m_rsch_timeslot_is_granted;
 1009dbc:	4d13      	ldr	r5, [pc, #76]	; (1009e0c <nrf_802154_core_channel_update+0x5c>)
 1009dbe:	782b      	ldrb	r3, [r5, #0]
    {
        if (timeslot_is_granted())
 1009dc0:	b11b      	cbz	r3, 1009dca <nrf_802154_core_channel_update+0x1a>
        {
            nrf_802154_trx_channel_set(nrf_802154_pib_channel_get());
 1009dc2:	f000 f9b3 	bl	100a12c <nrf_802154_pib_channel_get>
 1009dc6:	f009 fb91 	bl	10134ec <nrf_802154_trx_channel_set>
        }

        switch (m_state)
 1009dca:	4b11      	ldr	r3, [pc, #68]	; (1009e10 <nrf_802154_core_channel_update+0x60>)
 1009dcc:	781a      	ldrb	r2, [r3, #0]
 1009dce:	2a09      	cmp	r2, #9
 1009dd0:	b2d3      	uxtb	r3, r2
 1009dd2:	d00f      	beq.n	1009df4 <nrf_802154_core_channel_update+0x44>
 1009dd4:	2b0a      	cmp	r3, #10
 1009dd6:	d013      	beq.n	1009e00 <nrf_802154_core_channel_update+0x50>
 1009dd8:	2b02      	cmp	r3, #2
 1009dda:	d107      	bne.n	1009dec <nrf_802154_core_channel_update+0x3c>
        {
            case RADIO_STATE_RX:
                if (current_operation_terminate(NRF_802154_TERM_802154, req_orig, true))
 1009ddc:	2201      	movs	r2, #1
 1009dde:	4631      	mov	r1, r6
 1009de0:	4610      	mov	r0, r2
 1009de2:	f7ff f91f 	bl	1009024 <current_operation_terminate>
 1009de6:	b108      	cbz	r0, 1009dec <nrf_802154_core_channel_update+0x3c>
                {
                    rx_init();
 1009de8:	f7fe ffce 	bl	1008d88 <rx_init>
            default:
                // Don't perform any additional action in any other state.
                break;
        }

        nrf_802154_critical_section_exit();
 1009dec:	f000 f8da 	bl	1009fa4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009df0:	4620      	mov	r0, r4
 1009df2:	bd70      	pop	{r4, r5, r6, pc}
    return m_rsch_timeslot_is_granted;
 1009df4:	782b      	ldrb	r3, [r5, #0]
                if (timeslot_is_granted())
 1009df6:	2b00      	cmp	r3, #0
 1009df8:	d0f8      	beq.n	1009dec <nrf_802154_core_channel_update+0x3c>
                    nrf_802154_trx_continuous_carrier_restart();
 1009dfa:	f001 f8ed 	bl	100afd8 <nrf_802154_trx_continuous_carrier_restart>
 1009dfe:	e7f5      	b.n	1009dec <nrf_802154_core_channel_update+0x3c>
    return m_rsch_timeslot_is_granted;
 1009e00:	782b      	ldrb	r3, [r5, #0]
                if (timeslot_is_granted())
 1009e02:	2b00      	cmp	r3, #0
 1009e04:	d0f2      	beq.n	1009dec <nrf_802154_core_channel_update+0x3c>
                    nrf_802154_trx_modulated_carrier_restart();
 1009e06:	f001 f90f 	bl	100b028 <nrf_802154_trx_modulated_carrier_restart>
 1009e0a:	e7ef      	b.n	1009dec <nrf_802154_core_channel_update+0x3c>
 1009e0c:	21003be0 	.word	0x21003be0
 1009e10:	21003be2 	.word	0x21003be2

01009e14 <nrf_802154_core_cca_cfg_update>:

bool nrf_802154_core_cca_cfg_update(void)
{
 1009e14:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1009e16:	f009 f956 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1009e1a:	4604      	mov	r4, r0
 1009e1c:	b130      	cbz	r0, 1009e2c <nrf_802154_core_cca_cfg_update+0x18>
    return m_rsch_timeslot_is_granted;
 1009e1e:	4b04      	ldr	r3, [pc, #16]	; (1009e30 <nrf_802154_core_cca_cfg_update+0x1c>)
 1009e20:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted())
 1009e22:	b10b      	cbz	r3, 1009e28 <nrf_802154_core_cca_cfg_update+0x14>
        {
            nrf_802154_trx_cca_configuration_update();
 1009e24:	f009 fb64 	bl	10134f0 <nrf_802154_trx_cca_configuration_update>
        }

        nrf_802154_critical_section_exit();
 1009e28:	f000 f8bc 	bl	1009fa4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009e2c:	4620      	mov	r0, r4
 1009e2e:	bd10      	pop	{r4, pc}
 1009e30:	21003be0 	.word	0x21003be0

01009e34 <nrf_802154_core_rssi_measure>:

bool nrf_802154_core_rssi_measure(void)
{
 1009e34:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1009e36:	f009 f946 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1009e3a:	4604      	mov	r4, r0
 1009e3c:	b168      	cbz	r0, 1009e5a <nrf_802154_core_rssi_measure+0x26>
    return m_rsch_timeslot_is_granted;
 1009e3e:	4b09      	ldr	r3, [pc, #36]	; (1009e64 <nrf_802154_core_rssi_measure+0x30>)
 1009e40:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted() && (m_state == RADIO_STATE_RX))
 1009e42:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 1009e46:	b133      	cbz	r3, 1009e56 <nrf_802154_core_rssi_measure+0x22>
 1009e48:	4b07      	ldr	r3, [pc, #28]	; (1009e68 <nrf_802154_core_rssi_measure+0x34>)
 1009e4a:	781b      	ldrb	r3, [r3, #0]
 1009e4c:	2b02      	cmp	r3, #2
 1009e4e:	d106      	bne.n	1009e5e <nrf_802154_core_rssi_measure+0x2a>
        {
            result = nrf_802154_trx_rssi_measure();
 1009e50:	f000 fe4a 	bl	100aae8 <nrf_802154_trx_rssi_measure>
 1009e54:	4604      	mov	r4, r0
        else
        {
            result = false;
        }

        nrf_802154_critical_section_exit();
 1009e56:	f000 f8a5 	bl	1009fa4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009e5a:	4620      	mov	r0, r4
 1009e5c:	bd10      	pop	{r4, pc}
            result = false;
 1009e5e:	2400      	movs	r4, #0
 1009e60:	e7f9      	b.n	1009e56 <nrf_802154_core_rssi_measure+0x22>
 1009e62:	bf00      	nop
 1009e64:	21003be0 	.word	0x21003be0
 1009e68:	21003be2 	.word	0x21003be2

01009e6c <nrf_802154_core_last_rssi_measurement_get>:

bool nrf_802154_core_last_rssi_measurement_get(int8_t * p_rssi)
{
 1009e6c:	b538      	push	{r3, r4, r5, lr}
 1009e6e:	4605      	mov	r5, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result       = false;
    bool in_crit_sect = false;
    bool rssi_started = nrf_802154_trx_rssi_measure_is_started();
 1009e70:	f000 fe64 	bl	100ab3c <nrf_802154_trx_rssi_measure_is_started>

    if (rssi_started)
 1009e74:	b910      	cbnz	r0, 1009e7c <nrf_802154_core_last_rssi_measurement_get+0x10>
    bool result       = false;
 1009e76:	2400      	movs	r4, #0
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009e78:	4620      	mov	r0, r4
 1009e7a:	bd38      	pop	{r3, r4, r5, pc}
        in_crit_sect = critical_section_enter_and_verify_timeslot_length();
 1009e7c:	f009 f923 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>
    if (rssi_started && in_crit_sect)
 1009e80:	2800      	cmp	r0, #0
 1009e82:	d0f8      	beq.n	1009e76 <nrf_802154_core_last_rssi_measurement_get+0xa>
    return m_rsch_timeslot_is_granted;
 1009e84:	4b09      	ldr	r3, [pc, #36]	; (1009eac <nrf_802154_core_last_rssi_measurement_get+0x40>)
 1009e86:	781b      	ldrb	r3, [r3, #0]
        if (timeslot_is_granted())
 1009e88:	b91b      	cbnz	r3, 1009e92 <nrf_802154_core_last_rssi_measurement_get+0x26>
    bool result       = false;
 1009e8a:	2400      	movs	r4, #0
        nrf_802154_critical_section_exit();
 1009e8c:	f000 f88a 	bl	1009fa4 <nrf_802154_critical_section_exit>
 1009e90:	e7f2      	b.n	1009e78 <nrf_802154_core_last_rssi_measurement_get+0xc>
            rssi_started = nrf_802154_trx_rssi_measure_is_started();
 1009e92:	f000 fe53 	bl	100ab3c <nrf_802154_trx_rssi_measure_is_started>
            if (rssi_started)
 1009e96:	2800      	cmp	r0, #0
 1009e98:	d0f7      	beq.n	1009e8a <nrf_802154_core_last_rssi_measurement_get+0x1e>
    while (!nrf_802154_trx_rssi_sample_is_available())
 1009e9a:	f000 fe5d 	bl	100ab58 <nrf_802154_trx_rssi_sample_is_available>
 1009e9e:	4604      	mov	r4, r0
 1009ea0:	2800      	cmp	r0, #0
 1009ea2:	d0fa      	beq.n	1009e9a <nrf_802154_core_last_rssi_measurement_get+0x2e>
                *p_rssi = rssi_last_measurement_get();
 1009ea4:	f009 f8ef 	bl	1013086 <rssi_last_measurement_get>
 1009ea8:	7028      	strb	r0, [r5, #0]
    if (in_crit_sect)
 1009eaa:	e7ef      	b.n	1009e8c <nrf_802154_core_last_rssi_measurement_get+0x20>
 1009eac:	21003be0 	.word	0x21003be0

01009eb0 <nrf_802154_core_last_frame_rssi_get>:

int8_t  nrf_802154_core_last_frame_rssi_get(void)
{
    return m_last_rssi;
}
 1009eb0:	4b01      	ldr	r3, [pc, #4]	; (1009eb8 <nrf_802154_core_last_frame_rssi_get+0x8>)
 1009eb2:	f993 0000 	ldrsb.w	r0, [r3]
 1009eb6:	4770      	bx	lr
 1009eb8:	21003be3 	.word	0x21003be3

01009ebc <nrf_802154_core_last_frame_lqi_get>:

uint8_t nrf_802154_core_last_frame_lqi_get(void)
{
    return m_last_lqi;
}
 1009ebc:	4b01      	ldr	r3, [pc, #4]	; (1009ec4 <nrf_802154_core_last_frame_lqi_get+0x8>)
 1009ebe:	7818      	ldrb	r0, [r3, #0]
 1009ec0:	4770      	bx	lr
 1009ec2:	bf00      	nop
 1009ec4:	21003be7 	.word	0x21003be7

01009ec8 <nrf_802154_core_antenna_update>:

bool nrf_802154_core_antenna_update(void)
{
 1009ec8:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
 1009eca:	f009 f8fc 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>

    if (result)
 1009ece:	4604      	mov	r4, r0
 1009ed0:	b130      	cbz	r0, 1009ee0 <nrf_802154_core_antenna_update+0x18>
    return m_rsch_timeslot_is_granted;
 1009ed2:	4b04      	ldr	r3, [pc, #16]	; (1009ee4 <nrf_802154_core_antenna_update+0x1c>)
 1009ed4:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted())
 1009ed6:	b10b      	cbz	r3, 1009edc <nrf_802154_core_antenna_update+0x14>
        {
            nrf_802154_trx_antenna_update();
 1009ed8:	f000 fcbe 	bl	100a858 <nrf_802154_trx_antenna_update>
        }

        nrf_802154_critical_section_exit();
 1009edc:	f000 f862 	bl	1009fa4 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 1009ee0:	4620      	mov	r0, r4
 1009ee2:	bd10      	pop	{r4, pc}
 1009ee4:	21003be0 	.word	0x21003be0

01009ee8 <nrf_802154_core_hooks_terminate>:

    NULL,
};

bool nrf_802154_core_hooks_terminate(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
 1009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1009eea:	4605      	mov	r5, r0
 1009eec:	460e      	mov	r6, r1
    bool result = true;

    for (uint32_t i = 0; i < sizeof(m_abort_hooks) / sizeof(m_abort_hooks[0]); i++)
 1009eee:	2400      	movs	r4, #0
 1009ef0:	4f06      	ldr	r7, [pc, #24]	; (1009f0c <nrf_802154_core_hooks_terminate+0x24>)
    {
        if (m_abort_hooks[i] == NULL)
 1009ef2:	f857 3b04 	ldr.w	r3, [r7], #4
 1009ef6:	b133      	cbz	r3, 1009f06 <nrf_802154_core_hooks_terminate+0x1e>
        {
            break;
        }

        result = m_abort_hooks[i](term_lvl, req_orig);
 1009ef8:	4631      	mov	r1, r6
 1009efa:	4628      	mov	r0, r5
 1009efc:	4798      	blx	r3

        if (!result)
 1009efe:	b118      	cbz	r0, 1009f08 <nrf_802154_core_hooks_terminate+0x20>
    for (uint32_t i = 0; i < sizeof(m_abort_hooks) / sizeof(m_abort_hooks[0]); i++)
 1009f00:	3401      	adds	r4, #1
 1009f02:	2c05      	cmp	r4, #5
 1009f04:	d1f5      	bne.n	1009ef2 <nrf_802154_core_hooks_terminate+0xa>
 1009f06:	2001      	movs	r0, #1
            break;
        }
    }

    return result;
}
 1009f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1009f0a:	bf00      	nop
 1009f0c:	01015958 	.word	0x01015958

01009f10 <nrf_802154_core_hooks_tx_setup>:

bool nrf_802154_core_hooks_tx_setup(
    uint8_t                                 * p_frame,
    nrf_802154_transmit_params_t            * p_params,
    nrf_802154_transmit_failed_notification_t notify_function)
{
 1009f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1009f14:	4605      	mov	r5, r0
 1009f16:	460e      	mov	r6, r1
 1009f18:	4617      	mov	r7, r2
 1009f1a:	4c08      	ldr	r4, [pc, #32]	; (1009f3c <nrf_802154_core_hooks_tx_setup+0x2c>)
 1009f1c:	f104 0810 	add.w	r8, r4, #16
    bool result = true;

    for (uint32_t i = 0; i < sizeof(m_tx_setup_hooks) / sizeof(m_tx_setup_hooks[0]);
         i++)
    {
        if (m_tx_setup_hooks[i] == NULL)
 1009f20:	f854 3b04 	ldr.w	r3, [r4], #4
 1009f24:	b133      	cbz	r3, 1009f34 <nrf_802154_core_hooks_tx_setup+0x24>
        {
            break;
        }

        result = m_tx_setup_hooks[i](p_frame, p_params, notify_function);
 1009f26:	463a      	mov	r2, r7
 1009f28:	4631      	mov	r1, r6
 1009f2a:	4628      	mov	r0, r5
 1009f2c:	4798      	blx	r3

        if (!result)
 1009f2e:	b110      	cbz	r0, 1009f36 <nrf_802154_core_hooks_tx_setup+0x26>
    for (uint32_t i = 0; i < sizeof(m_tx_setup_hooks) / sizeof(m_tx_setup_hooks[0]);
 1009f30:	4544      	cmp	r4, r8
 1009f32:	d1f5      	bne.n	1009f20 <nrf_802154_core_hooks_tx_setup+0x10>
{
 1009f34:	2001      	movs	r0, #1
            break;
        }
    }

    return result;
}
 1009f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1009f3a:	bf00      	nop
 1009f3c:	01015948 	.word	0x01015948

01009f40 <nrf_802154_core_hooks_tx_failed>:
        m_transmitted_hooks[i](p_frame);
    }
}

bool nrf_802154_core_hooks_tx_failed(uint8_t * p_frame, nrf_802154_tx_error_t error)
{
 1009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1009f42:	4605      	mov	r5, r0
 1009f44:	460e      	mov	r6, r1
    bool result = true;

    for (uint32_t i = 0; i < sizeof(m_tx_failed_hooks) / sizeof(m_tx_failed_hooks[0]); i++)
 1009f46:	2400      	movs	r4, #0
 1009f48:	4f06      	ldr	r7, [pc, #24]	; (1009f64 <nrf_802154_core_hooks_tx_failed+0x24>)
    {
        if (m_tx_failed_hooks[i] == NULL)
 1009f4a:	f857 3b04 	ldr.w	r3, [r7], #4
 1009f4e:	b133      	cbz	r3, 1009f5e <nrf_802154_core_hooks_tx_failed+0x1e>
        {
            break;
        }

        result = m_tx_failed_hooks[i](p_frame, error);
 1009f50:	4631      	mov	r1, r6
 1009f52:	4628      	mov	r0, r5
 1009f54:	4798      	blx	r3

        if (!result)
 1009f56:	b118      	cbz	r0, 1009f60 <nrf_802154_core_hooks_tx_failed+0x20>
    for (uint32_t i = 0; i < sizeof(m_tx_failed_hooks) / sizeof(m_tx_failed_hooks[0]); i++)
 1009f58:	3401      	adds	r4, #1
 1009f5a:	2c04      	cmp	r4, #4
 1009f5c:	d1f5      	bne.n	1009f4a <nrf_802154_core_hooks_tx_failed+0xa>
 1009f5e:	2001      	movs	r0, #1
            break;
        }
    }

    return result;
}
 1009f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1009f62:	bf00      	nop
 1009f64:	01015938 	.word	0x01015938

01009f68 <nrf_802154_core_hooks_tx_started>:
        m_tx_ack_failed_hooks[i](p_ack, error);
    }
}

bool nrf_802154_core_hooks_tx_started(uint8_t * p_frame)
{
 1009f68:	b570      	push	{r4, r5, r6, lr}
 1009f6a:	4605      	mov	r5, r0
    bool result = true;

    for (uint32_t i = 0; i < sizeof(m_tx_started_hooks) / sizeof(m_tx_started_hooks[0]); i++)
 1009f6c:	2400      	movs	r4, #0
 1009f6e:	4e06      	ldr	r6, [pc, #24]	; (1009f88 <nrf_802154_core_hooks_tx_started+0x20>)
    {
        if (m_tx_started_hooks[i] == NULL)
 1009f70:	f856 3b04 	ldr.w	r3, [r6], #4
 1009f74:	b12b      	cbz	r3, 1009f82 <nrf_802154_core_hooks_tx_started+0x1a>
        {
            break;
        }

        result = m_tx_started_hooks[i](p_frame);
 1009f76:	4628      	mov	r0, r5
 1009f78:	4798      	blx	r3

        if (!result)
 1009f7a:	b118      	cbz	r0, 1009f84 <nrf_802154_core_hooks_tx_started+0x1c>
    for (uint32_t i = 0; i < sizeof(m_tx_started_hooks) / sizeof(m_tx_started_hooks[0]); i++)
 1009f7c:	3401      	adds	r4, #1
 1009f7e:	2c06      	cmp	r4, #6
 1009f80:	d1f6      	bne.n	1009f70 <nrf_802154_core_hooks_tx_started+0x8>
 1009f82:	2001      	movs	r0, #1
            break;
        }
    }

    return result;
}
 1009f84:	bd70      	pop	{r4, r5, r6, pc}
 1009f86:	bf00      	nop
 1009f88:	01015920 	.word	0x01015920

01009f8c <nrf_802154_critical_section_init>:
 * @section API functions
 **************************************************************************************************/

void nrf_802154_critical_section_init(void)
{
    m_nested_critical_section_counter          = 0;
 1009f8c:	2200      	movs	r2, #0
 1009f8e:	4b03      	ldr	r3, [pc, #12]	; (1009f9c <nrf_802154_critical_section_init+0x10>)
 1009f90:	701a      	strb	r2, [r3, #0]
    m_nested_critical_section_allowed_priority = NESTED_CRITICAL_SECTION_ALLOWED_PRIORITY_NONE;
 1009f92:	22ff      	movs	r2, #255	; 0xff
 1009f94:	4b02      	ldr	r3, [pc, #8]	; (1009fa0 <nrf_802154_critical_section_init+0x14>)
 1009f96:	701a      	strb	r2, [r3, #0]
}
 1009f98:	4770      	bx	lr
 1009f9a:	bf00      	nop
 1009f9c:	21003bea 	.word	0x21003bea
 1009fa0:	21003be9 	.word	0x21003be9

01009fa4 <nrf_802154_critical_section_exit>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

void nrf_802154_critical_section_exit(void)
{
 1009fa4:	b570      	push	{r4, r5, r6, lr}
        cnt = m_nested_critical_section_counter;
 1009fa6:	4e0f      	ldr	r6, [pc, #60]	; (1009fe4 <nrf_802154_critical_section_exit+0x40>)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1009fa8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1009fac:	b672      	cpsid	i
 1009fae:	7833      	ldrb	r3, [r6, #0]
        --cnt;
 1009fb0:	3b01      	subs	r3, #1
        if (cnt == 0U)
 1009fb2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 1009fb6:	d111      	bne.n	1009fdc <nrf_802154_critical_section_exit+0x38>
            if (nrf_802154_critical_section_rsch_event_is_pending())
 1009fb8:	f007 fc60 	bl	101187c <nrf_802154_critical_section_rsch_event_is_pending>
 1009fbc:	b120      	cbz	r0, 1009fc8 <nrf_802154_critical_section_exit+0x24>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1009fbe:	f385 8810 	msr	PRIMASK, r5
                nrf_802154_critical_section_rsch_process_pending();
 1009fc2:	f007 fc4b 	bl	101185c <nrf_802154_critical_section_rsch_process_pending>
    while (!succeed);
 1009fc6:	e7ef      	b.n	1009fa8 <nrf_802154_critical_section_exit+0x4>
    if (nrf_802154_rsch_prec_is_approved(RSCH_PREC_RAAL, RSCH_PRIO_MIN_APPROVED))
 1009fc8:	2101      	movs	r1, #1
 1009fca:	4608      	mov	r0, r1
 1009fcc:	f007 fbc8 	bl	1011760 <nrf_802154_rsch_prec_is_approved>
 1009fd0:	b110      	cbz	r0, 1009fd8 <nrf_802154_critical_section_exit+0x34>
        nrf_802154_irq_enable(RADIO_IRQn);
 1009fd2:	2008      	movs	r0, #8
 1009fd4:	f008 ff04 	bl	1012de0 <nrf_802154_irq_enable>
            nrf_802154_platform_sl_lptimer_critical_section_exit();
 1009fd8:	f7fe fa30 	bl	100843c <nrf_802154_platform_sl_lptimer_critical_section_exit>
        m_nested_critical_section_counter = cnt;
 1009fdc:	7034      	strb	r4, [r6, #0]
 1009fde:	f385 8810 	msr	PRIMASK, r5
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    critical_section_exit();

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 1009fe2:	bd70      	pop	{r4, r5, r6, pc}
 1009fe4:	21003bea 	.word	0x21003bea

01009fe8 <nrf_802154_critical_section_nesting_deny>:
void nrf_802154_critical_section_nesting_deny(void)
{
    assert(m_nested_critical_section_allowed_priority >= 0);
    assert(m_nested_critical_section_counter >= 1);

    m_nested_critical_section_allowed_priority = NESTED_CRITICAL_SECTION_ALLOWED_PRIORITY_NONE;
 1009fe8:	22ff      	movs	r2, #255	; 0xff
 1009fea:	4b01      	ldr	r3, [pc, #4]	; (1009ff0 <nrf_802154_critical_section_nesting_deny+0x8>)
 1009fec:	701a      	strb	r2, [r3, #0]
}
 1009fee:	4770      	bx	lr
 1009ff0:	21003be9 	.word	0x21003be9

01009ff4 <nrf_802154_critical_section_active_vector_priority_get>:
    return m_nested_critical_section_counter > 1;
}

uint32_t nrf_802154_critical_section_active_vector_priority_get(void)
{
    uint32_t  active_vector_id = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) >> SCB_ICSR_VECTACTIVE_Pos;
 1009ff4:	4b05      	ldr	r3, [pc, #20]	; (100a00c <nrf_802154_critical_section_active_vector_priority_get+0x18>)
 1009ff6:	6858      	ldr	r0, [r3, #4]
 1009ff8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    IRQn_Type irq_number;
    uint32_t  active_priority;

    // Check if this function is called from main thread.
    if (active_vector_id == 0)
 1009ffc:	b118      	cbz	r0, 100a006 <nrf_802154_critical_section_active_vector_priority_get+0x12>
        return UINT32_MAX;
    }

    assert(active_vector_id >= CMSIS_IRQ_NUM_VECTACTIVE_DIFF);

    irq_number      = (IRQn_Type)(active_vector_id - CMSIS_IRQ_NUM_VECTACTIVE_DIFF);
 1009ffe:	3810      	subs	r0, #16
    active_priority = nrf_802154_irq_priority_get(irq_number);
 100a000:	b240      	sxtb	r0, r0
 100a002:	f7fe b881 	b.w	1008108 <nrf_802154_irq_priority_get>

    return active_priority;
}
 100a006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 100a00a:	4770      	bx	lr
 100a00c:	e000ed00 	.word	0xe000ed00

0100a010 <critical_section_enter>:
{
 100a010:	b538      	push	{r3, r4, r5, lr}
 100a012:	4604      	mov	r4, r0
    return active_priority_convert(nrf_802154_critical_section_active_vector_priority_get());
 100a014:	f7ff ffee 	bl	1009ff4 <nrf_802154_critical_section_active_vector_priority_get>
    return active_priority == UINT32_MAX ? INT8_MAX : (int8_t)active_priority;
 100a018:	1c43      	adds	r3, r0, #1
 100a01a:	bf08      	it	eq
 100a01c:	207f      	moveq	r0, #127	; 0x7f
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100a01e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 100a022:	b672      	cpsid	i
    if (forced ||
 100a024:	4a10      	ldr	r2, [pc, #64]	; (100a068 <critical_section_enter+0x58>)
 100a026:	b93c      	cbnz	r4, 100a038 <critical_section_enter+0x28>
        (m_nested_critical_section_counter == 0) ||
 100a028:	7813      	ldrb	r3, [r2, #0]
    if (forced ||
 100a02a:	b12b      	cbz	r3, 100a038 <critical_section_enter+0x28>
        (m_nested_critical_section_allowed_priority == active_vector_priority))
 100a02c:	4b0f      	ldr	r3, [pc, #60]	; (100a06c <critical_section_enter+0x5c>)
 100a02e:	7819      	ldrb	r1, [r3, #0]
        (m_nested_critical_section_counter == 0) ||
 100a030:	b243      	sxtb	r3, r0
        (m_nested_critical_section_allowed_priority == active_vector_priority))
 100a032:	b249      	sxtb	r1, r1
        (m_nested_critical_section_counter == 0) ||
 100a034:	4299      	cmp	r1, r3
 100a036:	d106      	bne.n	100a046 <critical_section_enter+0x36>
        uint8_t cnt = m_nested_critical_section_counter;
 100a038:	7814      	ldrb	r4, [r2, #0]
        ++cnt;
 100a03a:	3401      	adds	r4, #1
 100a03c:	b2e4      	uxtb	r4, r4
        if (cnt == 1U)
 100a03e:	2c01      	cmp	r4, #1
        m_nested_critical_section_counter = cnt;
 100a040:	7014      	strb	r4, [r2, #0]
        if (cnt == 1U)
 100a042:	d004      	beq.n	100a04e <critical_section_enter+0x3e>
        result = true;
 100a044:	2401      	movs	r4, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100a046:	f385 8810 	msr	PRIMASK, r5
}
 100a04a:	4620      	mov	r0, r4
 100a04c:	bd38      	pop	{r3, r4, r5, pc}
            nrf_802154_platform_sl_lptimer_critical_section_enter();
 100a04e:	f7fe f9d9 	bl	1008404 <nrf_802154_platform_sl_lptimer_critical_section_enter>
    if (nrf_802154_rsch_prec_is_approved(RSCH_PREC_RAAL, RSCH_PRIO_MIN_APPROVED))
 100a052:	4621      	mov	r1, r4
 100a054:	4620      	mov	r0, r4
 100a056:	f007 fb83 	bl	1011760 <nrf_802154_rsch_prec_is_approved>
 100a05a:	2800      	cmp	r0, #0
 100a05c:	d0f2      	beq.n	100a044 <critical_section_enter+0x34>
        nrf_802154_irq_disable(RADIO_IRQn);
 100a05e:	2008      	movs	r0, #8
 100a060:	f008 fec0 	bl	1012de4 <nrf_802154_irq_disable>
 100a064:	e7ee      	b.n	100a044 <critical_section_enter+0x34>
 100a066:	bf00      	nop
 100a068:	21003bea 	.word	0x21003bea
 100a06c:	21003be9 	.word	0x21003be9

0100a070 <nrf_802154_critical_section_nesting_allow>:
{
 100a070:	b508      	push	{r3, lr}
    return active_priority_convert(nrf_802154_critical_section_active_vector_priority_get());
 100a072:	f7ff ffbf 	bl	1009ff4 <nrf_802154_critical_section_active_vector_priority_get>
    return active_priority == UINT32_MAX ? INT8_MAX : (int8_t)active_priority;
 100a076:	1c43      	adds	r3, r0, #1
 100a078:	bf08      	it	eq
 100a07a:	207f      	moveq	r0, #127	; 0x7f
    m_nested_critical_section_allowed_priority = active_vector_priority_get();
 100a07c:	4b01      	ldr	r3, [pc, #4]	; (100a084 <nrf_802154_critical_section_nesting_allow+0x14>)
 100a07e:	b240      	sxtb	r0, r0
 100a080:	7018      	strb	r0, [r3, #0]
}
 100a082:	bd08      	pop	{r3, pc}
 100a084:	21003be9 	.word	0x21003be9

0100a088 <nrf_802154_pib_init>:
    return result;
}

void nrf_802154_pib_init(void)
{
    m_data.promiscuous = false;
 100a088:	235a      	movs	r3, #90	; 0x5a
{
 100a08a:	b510      	push	{r4, lr}
    m_data.promiscuous = false;
 100a08c:	4c12      	ldr	r4, [pc, #72]	; (100a0d8 <nrf_802154_pib_init+0x50>)
    m_data.auto_ack    = true;
    m_data.pan_coord   = false;
    m_data.channel     = 11;

    memset(m_data.pan_id, 0xff, sizeof(m_data.pan_id));
 100a08e:	2202      	movs	r2, #2
 100a090:	21ff      	movs	r1, #255	; 0xff
 100a092:	1c60      	adds	r0, r4, #1
    m_data.promiscuous = false;
 100a094:	7463      	strb	r3, [r4, #17]
    memset(m_data.pan_id, 0xff, sizeof(m_data.pan_id));
 100a096:	f008 fcbc 	bl	1012a12 <memset>
    m_data.short_addr[0] = 0xfe;
 100a09a:	23fe      	movs	r3, #254	; 0xfe
 100a09c:	70e3      	strb	r3, [r4, #3]
    m_data.short_addr[1] = 0xff;
 100a09e:	23ff      	movs	r3, #255	; 0xff
    memset(m_data.extended_addr, 0, sizeof(m_data.extended_addr));
 100a0a0:	2208      	movs	r2, #8
 100a0a2:	2100      	movs	r1, #0
 100a0a4:	1d60      	adds	r0, r4, #5
    m_data.short_addr[1] = 0xff;
 100a0a6:	7123      	strb	r3, [r4, #4]
    memset(m_data.extended_addr, 0, sizeof(m_data.extended_addr));
 100a0a8:	f008 fcb3 	bl	1012a12 <memset>

    m_data.cca.mode           = NRF_802154_CCA_MODE_DEFAULT;
    m_data.cca.ed_threshold   = NRF_802154_CCA_ED_THRESHOLD_DEFAULT;
 100a0ac:	f642 522d 	movw	r2, #11565	; 0x2d2d
 100a0b0:	81e2      	strh	r2, [r4, #14]
    m_data.cca.corr_threshold = NRF_802154_CCA_CORR_THRESHOLD_DEFAULT;
    m_data.cca.corr_limit     = NRF_802154_CCA_CORR_LIMIT_DEFAULT;
 100a0b2:	2202      	movs	r2, #2
 100a0b4:	7422      	strb	r2, [r4, #16]

#if NRF_802154_DISABLE_BCC_MATCHING
    m_data.coex.rx_request_mode = NRF_802154_COEX_RX_REQUEST_MODE_PREAMBLE;
#else
    m_data.coex.rx_request_mode = NRF_802154_COEX_RX_REQUEST_MODE_DESTINED;
 100a0b6:	f240 4203 	movw	r2, #1027	; 0x403
 100a0ba:	8262      	strh	r2, [r4, #18]
#endif
    m_data.coex.tx_request_mode = NRF_802154_COEX_TX_REQUEST_MODE_ON_CCA_TOGGLE;

#if NRF_802154_CSMA_CA_ENABLED
    m_data.csmaca.min_be       = NRF_802154_CSMA_CA_MIN_BE_DEFAULT;
 100a0bc:	f240 5203 	movw	r2, #1283	; 0x503
 100a0c0:	82a2      	strh	r2, [r4, #20]
    m_data.csmaca.max_be       = NRF_802154_CSMA_CA_MAX_BE_DEFAULT;
    m_data.csmaca.max_backoffs = NRF_802154_CSMA_CA_MAX_CSMA_BACKOFFS_DEFAULT;
 100a0c2:	2204      	movs	r2, #4
 100a0c4:	75a2      	strb	r2, [r4, #22]
#endif // NRF_802154_CSMA_CA_ENABLED

#if NRF_802154_IFS_ENABLED
    m_data.ifs.min_sifs_period_us = MIN_SIFS_PERIOD_US;
 100a0c6:	22c0      	movs	r2, #192	; 0xc0
    m_data.cca.mode           = NRF_802154_CCA_MODE_DEFAULT;
 100a0c8:	2300      	movs	r3, #0
    m_data.ifs.min_sifs_period_us = MIN_SIFS_PERIOD_US;
 100a0ca:	8362      	strh	r2, [r4, #26]
    m_data.ifs.min_lifs_period_us = MIN_LIFS_PERIOD_US;
 100a0cc:	f44f 7220 	mov.w	r2, #640	; 0x280
    m_data.cca.mode           = NRF_802154_CCA_MODE_DEFAULT;
 100a0d0:	7363      	strb	r3, [r4, #13]
    m_data.ifs.min_lifs_period_us = MIN_LIFS_PERIOD_US;
 100a0d2:	83a2      	strh	r2, [r4, #28]
    m_data.ifs.mode               = NRF_802154_IFS_MODE_DISABLED;
 100a0d4:	7623      	strb	r3, [r4, #24]

#if NRF_802154_TEST_MODES_ENABLED
    m_data.test_modes.csmaca_backoff = NRF_802154_TEST_MODE_CSMACA_BACKOFF_RANDOM;
#endif

}
 100a0d6:	bd10      	pop	{r4, pc}
 100a0d8:	21003ab0 	.word	0x21003ab0

0100a0dc <nrf_802154_pib_promiscuous_get>:

bool nrf_802154_pib_promiscuous_get(void)
{
    return m_data.promiscuous;
 100a0dc:	4b02      	ldr	r3, [pc, #8]	; (100a0e8 <nrf_802154_pib_promiscuous_get+0xc>)
 100a0de:	7c58      	ldrb	r0, [r3, #17]
}
 100a0e0:	f000 0001 	and.w	r0, r0, #1
 100a0e4:	4770      	bx	lr
 100a0e6:	bf00      	nop
 100a0e8:	21003ab0 	.word	0x21003ab0

0100a0ec <nrf_802154_pib_promiscuous_set>:

void nrf_802154_pib_promiscuous_set(bool enabled)
{
    m_data.promiscuous = enabled;
 100a0ec:	4b02      	ldr	r3, [pc, #8]	; (100a0f8 <nrf_802154_pib_promiscuous_set+0xc>)
 100a0ee:	7c5a      	ldrb	r2, [r3, #17]
 100a0f0:	f360 0200 	bfi	r2, r0, #0, #1
 100a0f4:	745a      	strb	r2, [r3, #17]
}
 100a0f6:	4770      	bx	lr
 100a0f8:	21003ab0 	.word	0x21003ab0

0100a0fc <nrf_802154_pib_auto_ack_get>:

bool nrf_802154_pib_auto_ack_get(void)
{
    return m_data.auto_ack;
 100a0fc:	4b02      	ldr	r3, [pc, #8]	; (100a108 <nrf_802154_pib_auto_ack_get+0xc>)
 100a0fe:	7c58      	ldrb	r0, [r3, #17]
}
 100a100:	f3c0 0040 	ubfx	r0, r0, #1, #1
 100a104:	4770      	bx	lr
 100a106:	bf00      	nop
 100a108:	21003ab0 	.word	0x21003ab0

0100a10c <nrf_802154_pib_pan_coord_get>:
    m_data.auto_ack = enabled;
}

bool nrf_802154_pib_pan_coord_get(void)
{
    return m_data.pan_coord;
 100a10c:	4b02      	ldr	r3, [pc, #8]	; (100a118 <nrf_802154_pib_pan_coord_get+0xc>)
 100a10e:	7c58      	ldrb	r0, [r3, #17]
}
 100a110:	f3c0 0080 	ubfx	r0, r0, #2, #1
 100a114:	4770      	bx	lr
 100a116:	bf00      	nop
 100a118:	21003ab0 	.word	0x21003ab0

0100a11c <nrf_802154_pib_pan_coord_set>:

void nrf_802154_pib_pan_coord_set(bool enabled)
{
    m_data.pan_coord = enabled;
 100a11c:	4b02      	ldr	r3, [pc, #8]	; (100a128 <nrf_802154_pib_pan_coord_set+0xc>)
 100a11e:	7c5a      	ldrb	r2, [r3, #17]
 100a120:	f360 0282 	bfi	r2, r0, #2, #1
 100a124:	745a      	strb	r2, [r3, #17]
}
 100a126:	4770      	bx	lr
 100a128:	21003ab0 	.word	0x21003ab0

0100a12c <nrf_802154_pib_channel_get>:

uint8_t nrf_802154_pib_channel_get(void)
{
    return m_data.channel;
 100a12c:	4b01      	ldr	r3, [pc, #4]	; (100a134 <nrf_802154_pib_channel_get+0x8>)
 100a12e:	7c58      	ldrb	r0, [r3, #17]
}
 100a130:	08c0      	lsrs	r0, r0, #3
 100a132:	4770      	bx	lr
 100a134:	21003ab0 	.word	0x21003ab0

0100a138 <nrf_802154_pib_channel_set>:

void nrf_802154_pib_channel_set(uint8_t channel)
{
    m_data.channel = channel;
 100a138:	4b02      	ldr	r3, [pc, #8]	; (100a144 <nrf_802154_pib_channel_set+0xc>)
 100a13a:	7c5a      	ldrb	r2, [r3, #17]
 100a13c:	f360 02c7 	bfi	r2, r0, #3, #5
 100a140:	745a      	strb	r2, [r3, #17]
}
 100a142:	4770      	bx	lr
 100a144:	21003ab0 	.word	0x21003ab0

0100a148 <nrf_802154_pib_tx_power_get>:

int8_t nrf_802154_pib_tx_power_get(void)
{
    return m_data.tx_power;
}
 100a148:	4b01      	ldr	r3, [pc, #4]	; (100a150 <nrf_802154_pib_tx_power_get+0x8>)
 100a14a:	f993 0000 	ldrsb.w	r0, [r3]
 100a14e:	4770      	bx	lr
 100a150:	21003ab0 	.word	0x21003ab0

0100a154 <nrf_802154_pib_tx_power_set>:

void nrf_802154_pib_tx_power_set(int8_t dbm)
{
    m_data.tx_power = dbm;
 100a154:	4b01      	ldr	r3, [pc, #4]	; (100a15c <nrf_802154_pib_tx_power_set+0x8>)
 100a156:	7018      	strb	r0, [r3, #0]
}
 100a158:	4770      	bx	lr
 100a15a:	bf00      	nop
 100a15c:	21003ab0 	.word	0x21003ab0

0100a160 <nrf_802154_pib_pan_id_get>:

const uint8_t * nrf_802154_pib_pan_id_get(void)
{
    return m_data.pan_id;
}
 100a160:	4800      	ldr	r0, [pc, #0]	; (100a164 <nrf_802154_pib_pan_id_get+0x4>)
 100a162:	4770      	bx	lr
 100a164:	21003ab1 	.word	0x21003ab1

0100a168 <nrf_802154_pib_pan_id_set>:

void nrf_802154_pib_pan_id_set(const uint8_t * p_pan_id)
{
 100a168:	4601      	mov	r1, r0
    memcpy(m_data.pan_id, p_pan_id, PAN_ID_SIZE);
 100a16a:	2202      	movs	r2, #2
 100a16c:	4801      	ldr	r0, [pc, #4]	; (100a174 <nrf_802154_pib_pan_id_set+0xc>)
 100a16e:	f008 bc45 	b.w	10129fc <memcpy>
 100a172:	bf00      	nop
 100a174:	21003ab1 	.word	0x21003ab1

0100a178 <nrf_802154_pib_extended_address_get>:
}

const uint8_t * nrf_802154_pib_extended_address_get(void)
{
    return m_data.extended_addr;
}
 100a178:	4800      	ldr	r0, [pc, #0]	; (100a17c <nrf_802154_pib_extended_address_get+0x4>)
 100a17a:	4770      	bx	lr
 100a17c:	21003ab5 	.word	0x21003ab5

0100a180 <nrf_802154_pib_extended_address_set>:

void nrf_802154_pib_extended_address_set(const uint8_t * p_extended_address)
{
 100a180:	4601      	mov	r1, r0
    memcpy(m_data.extended_addr, p_extended_address, EXTENDED_ADDRESS_SIZE);
 100a182:	2208      	movs	r2, #8
 100a184:	4801      	ldr	r0, [pc, #4]	; (100a18c <nrf_802154_pib_extended_address_set+0xc>)
 100a186:	f008 bc39 	b.w	10129fc <memcpy>
 100a18a:	bf00      	nop
 100a18c:	21003ab5 	.word	0x21003ab5

0100a190 <nrf_802154_pib_short_address_get>:
}

const uint8_t * nrf_802154_pib_short_address_get(void)
{
    return m_data.short_addr;
}
 100a190:	4800      	ldr	r0, [pc, #0]	; (100a194 <nrf_802154_pib_short_address_get+0x4>)
 100a192:	4770      	bx	lr
 100a194:	21003ab3 	.word	0x21003ab3

0100a198 <nrf_802154_pib_short_address_set>:

void nrf_802154_pib_short_address_set(const uint8_t * p_short_address)
{
 100a198:	4601      	mov	r1, r0
    memcpy(m_data.short_addr, p_short_address, SHORT_ADDRESS_SIZE);
 100a19a:	2202      	movs	r2, #2
 100a19c:	4801      	ldr	r0, [pc, #4]	; (100a1a4 <nrf_802154_pib_short_address_set+0xc>)
 100a19e:	f008 bc2d 	b.w	10129fc <memcpy>
 100a1a2:	bf00      	nop
 100a1a4:	21003ab3 	.word	0x21003ab3

0100a1a8 <nrf_802154_pib_cca_cfg_set>:
}

void nrf_802154_pib_cca_cfg_set(const nrf_802154_cca_cfg_t * p_cca_cfg)
{
    switch (p_cca_cfg->mode)
 100a1a8:	7803      	ldrb	r3, [r0, #0]
{
 100a1aa:	4601      	mov	r1, r0
    switch (p_cca_cfg->mode)
 100a1ac:	2b01      	cmp	r3, #1
 100a1ae:	d00a      	beq.n	100a1c6 <nrf_802154_pib_cca_cfg_set+0x1e>
 100a1b0:	d903      	bls.n	100a1ba <nrf_802154_pib_cca_cfg_set+0x12>
 100a1b2:	3b02      	subs	r3, #2
 100a1b4:	2b01      	cmp	r3, #1
 100a1b6:	d90d      	bls.n	100a1d4 <nrf_802154_pib_cca_cfg_set+0x2c>
 100a1b8:	4770      	bx	lr
    {
        case NRF_RADIO_CCA_MODE_ED:
            m_data.cca.mode         = p_cca_cfg->mode;
 100a1ba:	2200      	movs	r2, #0
 100a1bc:	4b07      	ldr	r3, [pc, #28]	; (100a1dc <nrf_802154_pib_cca_cfg_set+0x34>)
 100a1be:	735a      	strb	r2, [r3, #13]
            m_data.cca.ed_threshold = p_cca_cfg->ed_threshold;
 100a1c0:	7842      	ldrb	r2, [r0, #1]
 100a1c2:	739a      	strb	r2, [r3, #14]
            break;
 100a1c4:	4770      	bx	lr

        case NRF_RADIO_CCA_MODE_CARRIER:
            m_data.cca.mode           = p_cca_cfg->mode;
 100a1c6:	4a05      	ldr	r2, [pc, #20]	; (100a1dc <nrf_802154_pib_cca_cfg_set+0x34>)
 100a1c8:	7353      	strb	r3, [r2, #13]
            m_data.cca.corr_threshold = p_cca_cfg->corr_threshold;
 100a1ca:	7883      	ldrb	r3, [r0, #2]
 100a1cc:	73d3      	strb	r3, [r2, #15]
            m_data.cca.corr_limit     = p_cca_cfg->corr_limit;
 100a1ce:	78c3      	ldrb	r3, [r0, #3]
 100a1d0:	7413      	strb	r3, [r2, #16]
            break;

        default:
            assert(false);
    }
}
 100a1d2:	4770      	bx	lr
            memcpy(&m_data.cca, p_cca_cfg, sizeof(m_data.cca));
 100a1d4:	2204      	movs	r2, #4
 100a1d6:	4802      	ldr	r0, [pc, #8]	; (100a1e0 <nrf_802154_pib_cca_cfg_set+0x38>)
 100a1d8:	f008 bc10 	b.w	10129fc <memcpy>
 100a1dc:	21003ab0 	.word	0x21003ab0
 100a1e0:	21003abd 	.word	0x21003abd

0100a1e4 <nrf_802154_pib_cca_cfg_get>:

void nrf_802154_pib_cca_cfg_get(nrf_802154_cca_cfg_t * p_cca_cfg)
{
    memcpy(p_cca_cfg, &m_data.cca, sizeof(m_data.cca));
 100a1e4:	2204      	movs	r2, #4
 100a1e6:	4901      	ldr	r1, [pc, #4]	; (100a1ec <nrf_802154_pib_cca_cfg_get+0x8>)
 100a1e8:	f008 bc08 	b.w	10129fc <memcpy>
 100a1ec:	21003abd 	.word	0x21003abd

0100a1f0 <nrf_802154_pib_coex_rx_request_mode_get>:
}

nrf_802154_coex_rx_request_mode_t nrf_802154_pib_coex_rx_request_mode_get(void)
{
    return m_data.coex.rx_request_mode;
}
 100a1f0:	4b01      	ldr	r3, [pc, #4]	; (100a1f8 <nrf_802154_pib_coex_rx_request_mode_get+0x8>)
 100a1f2:	7c98      	ldrb	r0, [r3, #18]
 100a1f4:	4770      	bx	lr
 100a1f6:	bf00      	nop
 100a1f8:	21003ab0 	.word	0x21003ab0

0100a1fc <nrf_802154_pib_coex_tx_request_mode_get>:
}

nrf_802154_coex_tx_request_mode_t nrf_802154_pib_coex_tx_request_mode_get(void)
{
    return m_data.coex.tx_request_mode;
}
 100a1fc:	4b01      	ldr	r3, [pc, #4]	; (100a204 <nrf_802154_pib_coex_tx_request_mode_get+0x8>)
 100a1fe:	7cd8      	ldrb	r0, [r3, #19]
 100a200:	4770      	bx	lr
 100a202:	bf00      	nop
 100a204:	21003ab0 	.word	0x21003ab0

0100a208 <nrf_802154_pib_csmaca_min_be_set>:

#if NRF_802154_CSMA_CA_ENABLED
bool nrf_802154_pib_csmaca_min_be_set(uint8_t min_be)
{
 100a208:	4603      	mov	r3, r0
    bool result = (min_be <= CSMACA_BE_MAXIMUM);
 100a20a:	2808      	cmp	r0, #8

    if (result)
    {
        m_data.csmaca.min_be = min_be;
 100a20c:	bf9b      	ittet	ls
 100a20e:	4a02      	ldrls	r2, [pc, #8]	; (100a218 <nrf_802154_pib_csmaca_min_be_set+0x10>)
    bool result = (min_be <= CSMACA_BE_MAXIMUM);
 100a210:	2001      	movls	r0, #1
 100a212:	2000      	movhi	r0, #0
        m_data.csmaca.min_be = min_be;
 100a214:	7513      	strbls	r3, [r2, #20]
    }

    return result;
}
 100a216:	4770      	bx	lr
 100a218:	21003ab0 	.word	0x21003ab0

0100a21c <nrf_802154_pib_csmaca_min_be_get>:

uint8_t nrf_802154_pib_csmaca_min_be_get(void)
{
    return m_data.csmaca.min_be;
}
 100a21c:	4b01      	ldr	r3, [pc, #4]	; (100a224 <nrf_802154_pib_csmaca_min_be_get+0x8>)
 100a21e:	7d18      	ldrb	r0, [r3, #20]
 100a220:	4770      	bx	lr
 100a222:	bf00      	nop
 100a224:	21003ab0 	.word	0x21003ab0

0100a228 <nrf_802154_pib_csmaca_max_be_set>:

bool nrf_802154_pib_csmaca_max_be_set(uint8_t max_be)
{
 100a228:	4603      	mov	r3, r0
    bool result = (max_be <= CSMACA_BE_MAXIMUM);
 100a22a:	2808      	cmp	r0, #8

    if (result)
    {
        m_data.csmaca.max_be = max_be;
 100a22c:	bf9b      	ittet	ls
 100a22e:	4a02      	ldrls	r2, [pc, #8]	; (100a238 <nrf_802154_pib_csmaca_max_be_set+0x10>)
    bool result = (max_be <= CSMACA_BE_MAXIMUM);
 100a230:	2001      	movls	r0, #1
 100a232:	2000      	movhi	r0, #0
        m_data.csmaca.max_be = max_be;
 100a234:	7553      	strbls	r3, [r2, #21]
    }

    return result;
}
 100a236:	4770      	bx	lr
 100a238:	21003ab0 	.word	0x21003ab0

0100a23c <nrf_802154_pib_csmaca_max_be_get>:

uint8_t nrf_802154_pib_csmaca_max_be_get(void)
{
    return m_data.csmaca.max_be;
}
 100a23c:	4b01      	ldr	r3, [pc, #4]	; (100a244 <nrf_802154_pib_csmaca_max_be_get+0x8>)
 100a23e:	7d58      	ldrb	r0, [r3, #21]
 100a240:	4770      	bx	lr
 100a242:	bf00      	nop
 100a244:	21003ab0 	.word	0x21003ab0

0100a248 <nrf_802154_pib_csmaca_max_backoffs_set>:

void nrf_802154_pib_csmaca_max_backoffs_set(uint8_t max_backoffs)
{
    m_data.csmaca.max_backoffs = max_backoffs;
 100a248:	4b01      	ldr	r3, [pc, #4]	; (100a250 <nrf_802154_pib_csmaca_max_backoffs_set+0x8>)
 100a24a:	7598      	strb	r0, [r3, #22]
}
 100a24c:	4770      	bx	lr
 100a24e:	bf00      	nop
 100a250:	21003ab0 	.word	0x21003ab0

0100a254 <nrf_802154_pib_csmaca_max_backoffs_get>:

uint8_t nrf_802154_pib_csmaca_max_backoffs_get(void)
{
    return m_data.csmaca.max_backoffs;
}
 100a254:	4b01      	ldr	r3, [pc, #4]	; (100a25c <nrf_802154_pib_csmaca_max_backoffs_get+0x8>)
 100a256:	7d98      	ldrb	r0, [r3, #22]
 100a258:	4770      	bx	lr
 100a25a:	bf00      	nop
 100a25c:	21003ab0 	.word	0x21003ab0

0100a260 <nrf_802154_pib_ifs_mode_get>:

#if NRF_802154_IFS_ENABLED
nrf_802154_ifs_mode_t nrf_802154_pib_ifs_mode_get(void)
{
    return m_data.ifs.mode;
}
 100a260:	4b01      	ldr	r3, [pc, #4]	; (100a268 <nrf_802154_pib_ifs_mode_get+0x8>)
 100a262:	7e18      	ldrb	r0, [r3, #24]
 100a264:	4770      	bx	lr
 100a266:	bf00      	nop
 100a268:	21003ab0 	.word	0x21003ab0

0100a26c <nrf_802154_pib_ifs_mode_set>:

bool nrf_802154_pib_ifs_mode_set(nrf_802154_ifs_mode_t mode)
{
    switch (mode)
 100a26c:	2802      	cmp	r0, #2
    {
        case NRF_802154_IFS_MODE_DISABLED:
        case NRF_802154_IFS_MODE_MATCHING_ADDRESSES:
        case NRF_802154_IFS_MODE_ALWAYS:
            m_data.ifs.mode = mode;
 100a26e:	bf9d      	ittte	ls
 100a270:	4b02      	ldrls	r3, [pc, #8]	; (100a27c <nrf_802154_pib_ifs_mode_set+0x10>)
 100a272:	7618      	strbls	r0, [r3, #24]
            return true;
 100a274:	2001      	movls	r0, #1

        default:
            return false;
 100a276:	2000      	movhi	r0, #0
    }
}
 100a278:	4770      	bx	lr
 100a27a:	bf00      	nop
 100a27c:	21003ab0 	.word	0x21003ab0

0100a280 <nrf_802154_pib_ifs_min_sifs_period_get>:

uint16_t nrf_802154_pib_ifs_min_sifs_period_get(void)
{
    return m_data.ifs.min_sifs_period_us;
}
 100a280:	4b01      	ldr	r3, [pc, #4]	; (100a288 <nrf_802154_pib_ifs_min_sifs_period_get+0x8>)
 100a282:	8b58      	ldrh	r0, [r3, #26]
 100a284:	4770      	bx	lr
 100a286:	bf00      	nop
 100a288:	21003ab0 	.word	0x21003ab0

0100a28c <nrf_802154_pib_ifs_min_sifs_period_set>:

void nrf_802154_pib_ifs_min_sifs_period_set(uint16_t period)
{
    assert(period >= TURNAROUND_TIME);

    m_data.ifs.min_sifs_period_us = period;
 100a28c:	4b01      	ldr	r3, [pc, #4]	; (100a294 <nrf_802154_pib_ifs_min_sifs_period_set+0x8>)
 100a28e:	8358      	strh	r0, [r3, #26]
}
 100a290:	4770      	bx	lr
 100a292:	bf00      	nop
 100a294:	21003ab0 	.word	0x21003ab0

0100a298 <nrf_802154_pib_ifs_min_lifs_period_get>:

uint16_t nrf_802154_pib_ifs_min_lifs_period_get(void)
{
    return m_data.ifs.min_lifs_period_us;
}
 100a298:	4b01      	ldr	r3, [pc, #4]	; (100a2a0 <nrf_802154_pib_ifs_min_lifs_period_get+0x8>)
 100a29a:	8b98      	ldrh	r0, [r3, #28]
 100a29c:	4770      	bx	lr
 100a29e:	bf00      	nop
 100a2a0:	21003ab0 	.word	0x21003ab0

0100a2a4 <nrf_802154_pib_ifs_min_lifs_period_set>:

void nrf_802154_pib_ifs_min_lifs_period_set(uint16_t period)
{
    m_data.ifs.min_lifs_period_us = period;
 100a2a4:	4b01      	ldr	r3, [pc, #4]	; (100a2ac <nrf_802154_pib_ifs_min_lifs_period_set+0x8>)
 100a2a6:	8398      	strh	r0, [r3, #28]
}
 100a2a8:	4770      	bx	lr
 100a2aa:	bf00      	nop
 100a2ac:	21003ab0 	.word	0x21003ab0

0100a2b0 <nrf_802154_rssi_sample_temp_corr_value_get>:
    return (rssi_value < 0) ? (-(int8_t)abs_rssi_value) : ((int8_t)abs_rssi_value);
}

/* Implementation based on Errata 87 for nRF53 family. */
int8_t nrf_802154_rssi_sample_temp_corr_value_get(uint8_t rssi_sample)
{
 100a2b0:	b538      	push	{r3, r4, r5, lr}
 100a2b2:	4604      	mov	r4, r0

    temp            = (int32_t)nrf_802154_temperature_get();
    rssi_sample_i32 = (int32_t)rssi_sample;

    compensated_rssi = normalize_rssi((RSSI_COEFF_A1 * rssi_sample_i32)
                                      + (RSSI_COEFF_A3 * POW_3(rssi_sample_i32))
 100a2b4:	25cd      	movs	r5, #205	; 0xcd
    temp            = (int32_t)nrf_802154_temperature_get();
 100a2b6:	f7fd ff71 	bl	100819c <nrf_802154_temperature_get>
                                      + (RSSI_COEFF_A3 * POW_3(rssi_sample_i32))
 100a2ba:	fb04 f204 	mul.w	r2, r4, r4
    compensated_rssi = normalize_rssi((RSSI_COEFF_A1 * rssi_sample_i32)
 100a2be:	4b0e      	ldr	r3, [pc, #56]	; (100a2f8 <nrf_802154_rssi_sample_temp_corr_value_get+0x48>)
                                      + (RSSI_COEFF_A3 * POW_3(rssi_sample_i32))
 100a2c0:	fb04 f102 	mul.w	r1, r4, r2
    compensated_rssi = normalize_rssi((RSSI_COEFF_A1 * rssi_sample_i32)
 100a2c4:	4363      	muls	r3, r4
                                      + (RSSI_COEFF_A3 * POW_3(rssi_sample_i32))
 100a2c6:	fb05 3301 	mla	r3, r5, r1, r3
                                      - (RSSI_COEFF_A2 * POW_2(rssi_sample_i32))
 100a2ca:	490c      	ldr	r1, [pc, #48]	; (100a2fc <nrf_802154_rssi_sample_temp_corr_value_get+0x4c>)
 100a2cc:	fb01 3302 	mla	r3, r1, r2, r3
                                      - (RSSI_COEFF_TEMP * temp) - RSSI_COEFF_A0);
 100a2d0:	4a0b      	ldr	r2, [pc, #44]	; (100a300 <nrf_802154_rssi_sample_temp_corr_value_get+0x50>)
 100a2d2:	fb02 3300 	mla	r3, r2, r0, r3
 100a2d6:	4a0b      	ldr	r2, [pc, #44]	; (100a304 <nrf_802154_rssi_sample_temp_corr_value_get+0x54>)
 100a2d8:	441a      	add	r2, r3
    abs_rssi_value = (rssi_value < 0) ? (-rssi_value) : rssi_value;
 100a2da:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 100a2de:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    abs_rssi_value = (abs_rssi_value + (RSSI_COEFF_BASE / 2)) / RSSI_COEFF_BASE;
 100a2e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 100a2e6:	0d9b      	lsrs	r3, r3, #22
    return (rssi_value < 0) ? (-(int8_t)abs_rssi_value) : ((int8_t)abs_rssi_value);
 100a2e8:	2a00      	cmp	r2, #0
 100a2ea:	bfb8      	it	lt
 100a2ec:	425b      	neglt	r3, r3
 100a2ee:	b25b      	sxtb	r3, r3

    return compensated_rssi - (int8_t)rssi_sample;
 100a2f0:	1b18      	subs	r0, r3, r4
}
 100a2f2:	b240      	sxtb	r0, r0
 100a2f4:	bd38      	pop	{r3, r4, r5, pc}
 100a2f6:	bf00      	nop
 100a2f8:	0063d70a 	.word	0x0063d70a
 100a2fc:	ffff5dcc 	.word	0xffff5dcc
 100a300:	fffccccd 	.word	0xfffccccd
 100a304:	fe333333 	.word	0xfe333333

0100a308 <nrf_802154_rx_buffer_init>:

rx_buffer_t nrf_802154_rx_buffers[NRF_802154_RX_BUFFERS]; ///< Receive buffers.

void nrf_802154_rx_buffer_init(void)
{
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
 100a308:	2300      	movs	r3, #0
    {
        nrf_802154_rx_buffers[i].free = true;
 100a30a:	2101      	movs	r1, #1
 100a30c:	4a04      	ldr	r2, [pc, #16]	; (100a320 <nrf_802154_rx_buffer_init+0x18>)
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
 100a30e:	3301      	adds	r3, #1
 100a310:	2b10      	cmp	r3, #16
        nrf_802154_rx_buffers[i].free = true;
 100a312:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
 100a316:	f102 0281 	add.w	r2, r2, #129	; 0x81
 100a31a:	d1f8      	bne.n	100a30e <nrf_802154_rx_buffer_init+0x6>
    }
}
 100a31c:	4770      	bx	lr
 100a31e:	bf00      	nop
 100a320:	21003beb 	.word	0x21003beb

0100a324 <nrf_802154_rx_buffer_free_find>:

rx_buffer_t * nrf_802154_rx_buffer_free_find(void)
{
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
 100a324:	4a07      	ldr	r2, [pc, #28]	; (100a344 <nrf_802154_rx_buffer_free_find+0x20>)
 100a326:	2300      	movs	r3, #0
 100a328:	4611      	mov	r1, r2
    {
        if (nrf_802154_rx_buffers[i].free)
 100a32a:	f892 0080 	ldrb.w	r0, [r2, #128]	; 0x80
 100a32e:	b118      	cbz	r0, 100a338 <nrf_802154_rx_buffer_free_find+0x14>
        {
            return &nrf_802154_rx_buffers[i];
 100a330:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
 100a334:	18c8      	adds	r0, r1, r3
 100a336:	4770      	bx	lr
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
 100a338:	3301      	adds	r3, #1
 100a33a:	2b10      	cmp	r3, #16
 100a33c:	f102 0281 	add.w	r2, r2, #129	; 0x81
 100a340:	d1f3      	bne.n	100a32a <nrf_802154_rx_buffer_free_find+0x6>
        }
    }

    return NULL;
}
 100a342:	4770      	bx	lr
 100a344:	21003beb 	.word	0x21003beb

0100a348 <nrf_802154_stat_timestamps_get>:
        p_src++;
    }
}

void nrf_802154_stat_timestamps_get(nrf_802154_stat_timestamps_t * p_stat_timestamps)
{
 100a348:	b530      	push	{r4, r5, lr}
    *p_stat_timestamps = g_nrf_802154_stats.timestamps;
 100a34a:	4604      	mov	r4, r0
 100a34c:	4d04      	ldr	r5, [pc, #16]	; (100a360 <nrf_802154_stat_timestamps_get+0x18>)
 100a34e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 100a350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 100a352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 100a354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 100a356:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 100a35a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 100a35e:	bd30      	pop	{r4, r5, pc}
 100a360:	21001170 	.word	0x21001170

0100a364 <nrf_802154_swi_init>:
    nrf_802154_notification_swi_irq_handler();
    nrf_802154_request_swi_irq_handler();
}

void nrf_802154_swi_init(void)
{
 100a364:	b510      	push	{r4, lr}
    static bool initialized = false;

    if (!initialized)
 100a366:	4c07      	ldr	r4, [pc, #28]	; (100a384 <nrf_802154_swi_init+0x20>)
 100a368:	7823      	ldrb	r3, [r4, #0]
 100a36a:	b94b      	cbnz	r3, 100a380 <nrf_802154_swi_init+0x1c>
    {
        nrf_802154_irq_init(NRF_802154_EGU_IRQN, NRF_802154_SWI_PRIORITY, swi_irq_handler);
 100a36c:	2101      	movs	r1, #1
 100a36e:	2014      	movs	r0, #20
 100a370:	4a05      	ldr	r2, [pc, #20]	; (100a388 <nrf_802154_swi_init+0x24>)
 100a372:	f008 fd29 	bl	1012dc8 <nrf_802154_irq_init>
        nrf_802154_irq_enable(NRF_802154_EGU_IRQN);
 100a376:	2014      	movs	r0, #20
 100a378:	f008 fd32 	bl	1012de0 <nrf_802154_irq_enable>
        initialized = true;
 100a37c:	2301      	movs	r3, #1
 100a37e:	7023      	strb	r3, [r4, #0]
    }
}
 100a380:	bd10      	pop	{r4, pc}
 100a382:	bf00      	nop
 100a384:	210043fb 	.word	0x210043fb
 100a388:	010134af 	.word	0x010134af

0100a38c <txpower_set>:
static void txpower_set(nrf_radio_txpower_t txpower)
{
#ifdef NRF53_SERIES
    bool radio_high_voltage_enable = false;

    if ((int8_t)txpower > 0)
 100a38c:	b243      	sxtb	r3, r0
 100a38e:	2b00      	cmp	r3, #0
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_vreqctrl_radio_high_voltage_set(NRF_VREQCTRL_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.VREQH =
        (enable ? VREQCTRL_VREGRADIO_VREQH_VREQH_Enabled : VREQCTRL_VREGRADIO_VREQH_VREQH_Disabled);
 100a390:	bfcc      	ite	gt
 100a392:	2301      	movgt	r3, #1
 100a394:	2300      	movle	r3, #0
    p_reg->VREGRADIO.VREQH =
 100a396:	4a05      	ldr	r2, [pc, #20]	; (100a3ac <txpower_set+0x20>)
    {
        /* To get higher than 0dBm raise operating voltage of the radio, giving 3dBm power boost */
        radio_high_voltage_enable = true;
        txpower                  -= 3;
 100a398:	bfc8      	it	gt
 100a39a:	3803      	subgt	r0, #3
 100a39c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    return freq;
}

NRF_STATIC_INLINE void nrf_radio_txpower_set(NRF_RADIO_Type * p_reg, nrf_radio_txpower_t tx_power)
{
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
 100a3a0:	4b03      	ldr	r3, [pc, #12]	; (100a3b0 <txpower_set+0x24>)
 100a3a2:	bfc8      	it	gt
 100a3a4:	b2c0      	uxtbgt	r0, r0
 100a3a6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
    nrf_vreqctrl_radio_high_voltage_set(NRF_VREQCTRL_NS, radio_high_voltage_enable);
#endif
    nrf_radio_txpower_set(NRF_RADIO, txpower);
}
 100a3aa:	4770      	bx	lr
 100a3ac:	41004000 	.word	0x41004000
 100a3b0:	41008000 	.word	0x41008000

0100a3b4 <fem_for_lna_reset>:
    }
}

/** Reset FEM configuration for LNA. */
static void fem_for_lna_reset(void)
{
 100a3b4:	b508      	push	{r3, lr}
    mpsl_fem_lna_configuration_clear();
 100a3b6:	f7fa f9ef 	bl	1004798 <mpsl_fem_lna_configuration_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100a3ba:	2201      	movs	r2, #1
 100a3bc:	4b05      	ldr	r3, [pc, #20]	; (100a3d4 <fem_for_lna_reset+0x20>)
 100a3be:	611a      	str	r2, [r3, #16]
    p_reg->SHORTS &= ~(mask);
 100a3c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 100a3c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 100a3c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_timer_shorts_disable(NRF_802154_TIMER_INSTANCE, NRF_TIMER_SHORT_COMPARE0_STOP_MASK);
    nrf_802154_trx_ppi_for_fem_clear();
    /* There is no need to explicitly deactivate LNA pin during reset as mpsl_fem_abort_set is used
     * to provide a deactivation mechanism on DISABLED event.
     */
}
 100a3cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_trx_ppi_for_fem_clear();
 100a3d0:	f001 b8ca 	b.w	100b568 <nrf_802154_trx_ppi_for_fem_clear>
 100a3d4:	4100c000 	.word	0x4100c000

0100a3d8 <standalone_cca_finish>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

static void standalone_cca_finish(void)
{
 100a3d8:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
 100a3da:	2100      	movs	r1, #0
 100a3dc:	2004      	movs	r0, #4
 100a3de:	f001 f85b 	bl	100b498 <nrf_802154_trx_ppi_for_ramp_up_clear>
    p_reg->SHORTS = shorts_mask;
 100a3e2:	2300      	movs	r3, #0
 100a3e4:	4c06      	ldr	r4, [pc, #24]	; (100a400 <standalone_cca_finish+0x28>)
 100a3e6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);

    fem_for_lna_reset();
 100a3ea:	f7ff ffe3 	bl	100a3b4 <fem_for_lna_reset>
    p_reg->INTENCLR = mask;
 100a3ee:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 100a3f2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100a3f6:	2301      	movs	r3, #1
 100a3f8:	6323      	str	r3, [r4, #48]	; 0x30
 100a3fa:	6123      	str	r3, [r4, #16]

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_CCASTOP);
    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100a3fc:	bd10      	pop	{r4, pc}
 100a3fe:	bf00      	nop
 100a400:	41008000 	.word	0x41008000

0100a404 <energy_detection_finish>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

static void energy_detection_finish(void)
{
 100a404:	b508      	push	{r3, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
 100a406:	2100      	movs	r1, #0
 100a408:	2004      	movs	r0, #4
 100a40a:	f001 f845 	bl	100b498 <nrf_802154_trx_ppi_for_ramp_up_clear>
    fem_for_lna_reset();
 100a40e:	f7ff ffd1 	bl	100a3b4 <fem_for_lna_reset>
    p_reg->INTENCLR = mask;
 100a412:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 100a416:	4b05      	ldr	r3, [pc, #20]	; (100a42c <energy_detection_finish+0x28>)
 100a418:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
 100a41c:	2200      	movs	r2, #0
 100a41e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100a422:	2201      	movs	r2, #1
 100a424:	629a      	str	r2, [r3, #40]	; 0x28
 100a426:	611a      	str	r2, [r3, #16]

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_EDSTOP);
    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100a428:	bd08      	pop	{r3, pc}
 100a42a:	bf00      	nop
 100a42c:	41008000 	.word	0x41008000

0100a430 <trigger_disable_to_start_rampup>:
{
 100a430:	b508      	push	{r3, lr}
    if (!nrf_802154_trx_ppi_for_ramp_up_was_triggered())
 100a432:	f001 f853 	bl	100b4dc <nrf_802154_trx_ppi_for_ramp_up_was_triggered>
 100a436:	b910      	cbnz	r0, 100a43e <trigger_disable_to_start_rampup+0xe>
 100a438:	2201      	movs	r2, #1
 100a43a:	4b01      	ldr	r3, [pc, #4]	; (100a440 <trigger_disable_to_start_rampup+0x10>)
 100a43c:	611a      	str	r2, [r3, #16]
}
 100a43e:	bd08      	pop	{r3, pc}
 100a440:	41008000 	.word	0x41008000

0100a444 <fem_for_tx_reset>:
{
 100a444:	b510      	push	{r4, lr}
 100a446:	4c09      	ldr	r4, [pc, #36]	; (100a46c <fem_for_tx_reset+0x28>)
 100a448:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 100a44c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 100a450:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (cca)
 100a454:	b108      	cbz	r0, 100a45a <fem_for_tx_reset+0x16>
        mpsl_fem_lna_configuration_clear();
 100a456:	f7fa f99f 	bl	1004798 <mpsl_fem_lna_configuration_clear>
        mpsl_fem_pa_configuration_clear();
 100a45a:	f7fa f997 	bl	100478c <mpsl_fem_pa_configuration_clear>
    nrf_802154_trx_ppi_for_fem_clear();
 100a45e:	f001 f883 	bl	100b568 <nrf_802154_trx_ppi_for_fem_clear>
    nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
 100a462:	f009 f847 	bl	10134f4 <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100a466:	2301      	movs	r3, #1
 100a468:	6123      	str	r3, [r4, #16]
}
 100a46a:	bd10      	pop	{r4, pc}
 100a46c:	4100c000 	.word	0x4100c000

0100a470 <txframe_finish>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}

static void txframe_finish(void)
{
 100a470:	b510      	push	{r4, lr}
     * If FEM is in use the PPI_EGU_TIMER_START might be triggered if radio reached DISABLED state,
     * so the TIMER may start counting from the value on which FEM activation finished. The TIMER's CC registers
     * are set in the past so even if TIMER started no spurious FEM PA activation will occur.
     * We need to disable PPI_EGU_TIMER_START and then shutdown TIMER as it is not used.
     */
    txframe_finish_disable_ppis(m_transmit_with_cca);
 100a472:	4c09      	ldr	r4, [pc, #36]	; (100a498 <txframe_finish+0x28>)
 100a474:	7820      	ldrb	r0, [r4, #0]
 100a476:	f009 f822 	bl	10134be <txframe_finish_disable_ppis>

    fem_for_tx_reset(m_transmit_with_cca);
 100a47a:	7820      	ldrb	r0, [r4, #0]
 100a47c:	f7ff ffe2 	bl	100a444 <fem_for_tx_reset>
    p_reg->INTENCLR = mask;
 100a480:	4a06      	ldr	r2, [pc, #24]	; (100a49c <txframe_finish+0x2c>)
 100a482:	4b07      	ldr	r3, [pc, #28]	; (100a4a0 <txframe_finish+0x30>)
 100a484:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
 100a488:	2300      	movs	r3, #0
 100a48a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    txframe_finish_disable_ints();

    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);
#if NRF_802154_TX_STARTED_NOTIFY_ENABLED
    m_flags.tx_started = false;
 100a48e:	4a05      	ldr	r2, [pc, #20]	; (100a4a4 <txframe_finish+0x34>)
 100a490:	7093      	strb	r3, [r2, #2]
#endif
    m_flags.missing_receive_buffer = false;
 100a492:	7053      	strb	r3, [r2, #1]
     * All PPIs that were used are disabled (forks are cleared if used)
     * RADIO.SHORTS are cleared
     */

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100a494:	bd10      	pop	{r4, pc}
 100a496:	bf00      	nop
 100a498:	210043fc 	.word	0x210043fc
 100a49c:	41008000 	.word	0x41008000
 100a4a0:	08060003 	.word	0x08060003
 100a4a4:	210043fd 	.word	0x210043fd

0100a4a8 <rxframe_finish>:
{
 100a4a8:	2320      	movs	r3, #32
 100a4aa:	b510      	push	{r4, lr}
                     RADIO_RSSISAMPLE_RSSISAMPLE_Pos);
}

NRF_STATIC_INLINE nrf_radio_state_t nrf_radio_state_get(NRF_RADIO_Type const * p_reg)
{
    return (nrf_radio_state_t) p_reg->STATE;
 100a4ac:	4911      	ldr	r1, [pc, #68]	; (100a4f4 <rxframe_finish+0x4c>)
 100a4ae:	f8d1 2550 	ldr.w	r2, [r1, #1360]	; 0x550
        if (nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_DISABLED)
 100a4b2:	b2d2      	uxtb	r2, r2
 100a4b4:	b10a      	cbz	r2, 100a4ba <rxframe_finish+0x12>
    for (uint32_t i = 0; i < MAX_RXRAMPDOWN_CYCLES; i++)
 100a4b6:	3b01      	subs	r3, #1
 100a4b8:	d1f9      	bne.n	100a4ae <rxframe_finish+0x6>
    nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
 100a4ba:	f009 f81b 	bl	10134f4 <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
    rxframe_finish_disable_ppis();
 100a4be:	f009 f804 	bl	10134ca <rxframe_finish_disable_ppis>
    mpsl_fem_lna_configuration_clear();
 100a4c2:	f7fa f969 	bl	1004798 <mpsl_fem_lna_configuration_clear>
    p_reg->SHORTS &= ~(mask);
 100a4c6:	4a0c      	ldr	r2, [pc, #48]	; (100a4f8 <rxframe_finish+0x50>)
    p_reg->INTENCLR = mask;
 100a4c8:	f243 4002 	movw	r0, #13314	; 0x3402
 100a4cc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
}

NRF_STATIC_INLINE void nrf_egu_int_disable(NRF_EGU_Type * p_reg, uint32_t mask)
{
    NRFX_ASSERT(p_reg);
    p_reg->INTENCLR = mask;
 100a4d0:	2408      	movs	r4, #8
 100a4d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 100a4d6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    m_flags.psdu_being_received = false;
 100a4da:	2300      	movs	r3, #0
 100a4dc:	4a07      	ldr	r2, [pc, #28]	; (100a4fc <rxframe_finish+0x54>)
 100a4de:	4905      	ldr	r1, [pc, #20]	; (100a4f4 <rxframe_finish+0x4c>)
 100a4e0:	7013      	strb	r3, [r2, #0]
 100a4e2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
 100a4e6:	4806      	ldr	r0, [pc, #24]	; (100a500 <rxframe_finish+0x58>)
 100a4e8:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
 100a4ec:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    m_flags.missing_receive_buffer = false;
 100a4f0:	7053      	strb	r3, [r2, #1]
}
 100a4f2:	bd10      	pop	{r4, pc}
 100a4f4:	41008000 	.word	0x41008000
 100a4f8:	4100c000 	.word	0x4100c000
 100a4fc:	210043fd 	.word	0x210043fd
 100a500:	41014000 	.word	0x41014000

0100a504 <fem_for_pa_set>:
{
 100a504:	b508      	push	{r3, lr}
    (void)mpsl_fem_pa_gain_set(p_fem_gain_data);
 100a506:	f7fa f953 	bl	10047b0 <mpsl_fem_pa_gain_set>
    if (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0, NULL) == 0)
 100a50a:	2100      	movs	r1, #0
 100a50c:	4807      	ldr	r0, [pc, #28]	; (100a52c <fem_for_pa_set+0x28>)
 100a50e:	f7fa f931 	bl	1004774 <mpsl_fem_pa_configuration_set>
 100a512:	b950      	cbnz	r0, 100a52a <fem_for_pa_set+0x26>
    p_reg->SHORTS |= mask;
 100a514:	4a06      	ldr	r2, [pc, #24]	; (100a530 <fem_for_pa_set+0x2c>)
 100a516:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 100a51a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 100a51e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 100a522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_802154_trx_ppi_for_fem_set();
 100a526:	f001 b815 	b.w	100b554 <nrf_802154_trx_ppi_for_fem_set>
}
 100a52a:	bd08      	pop	{r3, pc}
 100a52c:	01015998 	.word	0x01015998
 100a530:	4100c000 	.word	0x4100c000

0100a534 <cca_configuration_update>:
{
 100a534:	b513      	push	{r0, r1, r4, lr}
    nrf_802154_pib_cca_cfg_get(&cca_cfg);
 100a536:	a801      	add	r0, sp, #4
 100a538:	f7ff fe54 	bl	100a1e4 <nrf_802154_pib_cca_cfg_get>
    nrf_radio_cca_configure(NRF_RADIO,
 100a53c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 100a540:	f89d 4004 	ldrb.w	r4, [sp, #4]
 100a544:	f008 ffa3 	bl	101348e <nrf_802154_rssi_cca_ed_threshold_corrected_get>
                                               uint8_t              cca_corr_cnt)
{
    p_reg->CCACTRL = (((uint32_t)cca_mode           << RADIO_CCACTRL_CCAMODE_Pos) |
                      ((uint32_t)cca_ed_threshold   << RADIO_CCACTRL_CCAEDTHRES_Pos) |
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
                      ((uint32_t)cca_corr_cnt       << RADIO_CCACTRL_CCACORRCNT_Pos));
 100a548:	f89d 3007 	ldrb.w	r3, [sp, #7]
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
 100a54c:	f89d 2006 	ldrb.w	r2, [sp, #6]
                      ((uint32_t)cca_corr_cnt       << RADIO_CCACTRL_CCACORRCNT_Pos));
 100a550:	061b      	lsls	r3, r3, #24
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
 100a552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 100a556:	4323      	orrs	r3, r4
    p_reg->CCACTRL = (((uint32_t)cca_mode           << RADIO_CCACTRL_CCAMODE_Pos) |
 100a558:	4a03      	ldr	r2, [pc, #12]	; (100a568 <cca_configuration_update+0x34>)
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
 100a55a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    p_reg->CCACTRL = (((uint32_t)cca_mode           << RADIO_CCACTRL_CCAMODE_Pos) |
 100a55e:	f8c2 366c 	str.w	r3, [r2, #1644]	; 0x66c
}
 100a562:	b002      	add	sp, #8
 100a564:	bd10      	pop	{r4, pc}
 100a566:	bf00      	nop
 100a568:	41008000 	.word	0x41008000

0100a56c <channel_set>:
    nrf_radio_frequency_set(NRF_RADIO, 2405U + 5U * (channel - 11U));
 100a56c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 100a570:	f600 102e 	addw	r0, r0, #2350	; 0x92e
    if (radio_frequency < 2400)
 100a574:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
        delta = ((uint32_t)(radio_frequency - 2360)) |
 100a578:	bf38      	it	cc
 100a57a:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
    p_reg->FREQUENCY = delta;
 100a57e:	4b04      	ldr	r3, [pc, #16]	; (100a590 <channel_set+0x24>)
        delta = ((uint32_t)(radio_frequency - 2360)) |
 100a580:	bf34      	ite	cc
 100a582:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
        delta = ((uint32_t)(radio_frequency - 2400)) |
 100a586:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
    p_reg->FREQUENCY = delta;
 100a58a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
 100a58e:	4770      	bx	lr
 100a590:	41008000 	.word	0x41008000

0100a594 <fem_for_lna_set>:
{
 100a594:	b508      	push	{r3, lr}
    if (mpsl_fem_lna_configuration_set(&m_activate_rx_cc0, NULL) == 0)
 100a596:	2100      	movs	r1, #0
 100a598:	4807      	ldr	r0, [pc, #28]	; (100a5b8 <fem_for_lna_set+0x24>)
 100a59a:	f7fa f8f1 	bl	1004780 <mpsl_fem_lna_configuration_set>
 100a59e:	b950      	cbnz	r0, 100a5b6 <fem_for_lna_set+0x22>
 100a5a0:	4a06      	ldr	r2, [pc, #24]	; (100a5bc <fem_for_lna_set+0x28>)
 100a5a2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 100a5a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 100a5aa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 100a5ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_802154_trx_ppi_for_fem_set();
 100a5b2:	f000 bfcf 	b.w	100b554 <nrf_802154_trx_ppi_for_fem_set>
}
 100a5b6:	bd08      	pop	{r3, pc}
 100a5b8:	010159ac 	.word	0x010159ac
 100a5bc:	4100c000 	.word	0x4100c000

0100a5c0 <rxack_finish>:
{
 100a5c0:	b510      	push	{r4, lr}
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
 100a5c2:	2100      	movs	r1, #0
 100a5c4:	2004      	movs	r0, #4
 100a5c6:	f000 ff67 	bl	100b498 <nrf_802154_trx_ppi_for_ramp_up_clear>
    p_reg->INTENCLR = mask;
 100a5ca:	f243 0302 	movw	r3, #12290	; 0x3002
 100a5ce:	4c0b      	ldr	r4, [pc, #44]	; (100a5fc <rxack_finish+0x3c>)
 100a5d0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    mpsl_fem_lna_configuration_clear();
 100a5d4:	f7fa f8e0 	bl	1004798 <mpsl_fem_lna_configuration_clear>
    nrf_802154_trx_ppi_for_fem_clear();
 100a5d8:	f000 ffc6 	bl	100b568 <nrf_802154_trx_ppi_for_fem_clear>
    p_reg->SHORTS &= ~(mask);
 100a5dc:	4b08      	ldr	r3, [pc, #32]	; (100a600 <rxack_finish+0x40>)
 100a5de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 100a5e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 100a5e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100a5ea:	2201      	movs	r2, #1
 100a5ec:	611a      	str	r2, [r3, #16]
    p_reg->SHORTS = shorts_mask;
 100a5ee:	2300      	movs	r3, #0
    m_flags.missing_receive_buffer = false;
 100a5f0:	4a04      	ldr	r2, [pc, #16]	; (100a604 <rxack_finish+0x44>)
 100a5f2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
 100a5f6:	7053      	strb	r3, [r2, #1]
}
 100a5f8:	bd10      	pop	{r4, pc}
 100a5fa:	bf00      	nop
 100a5fc:	41008000 	.word	0x41008000
 100a600:	4100c000 	.word	0x4100c000
 100a604:	210043fd 	.word	0x210043fd

0100a608 <rx_flags_clear>:
    m_flags.missing_receive_buffer = false;
 100a608:	2200      	movs	r2, #0
 100a60a:	4b02      	ldr	r3, [pc, #8]	; (100a614 <rx_flags_clear+0xc>)
 100a60c:	705a      	strb	r2, [r3, #1]
    m_flags.psdu_being_received = false;
 100a60e:	701a      	strb	r2, [r3, #0]
}
 100a610:	4770      	bx	lr
 100a612:	bf00      	nop
 100a614:	210043fd 	.word	0x210043fd

0100a618 <nrf_timer_init>:
 100a618:	2201      	movs	r2, #1
 100a61a:	4b09      	ldr	r3, [pc, #36]	; (100a640 <nrf_timer_init+0x28>)
 100a61c:	611a      	str	r2, [r3, #16]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
 100a61e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 100a622:	f022 0203 	bic.w	r2, r2, #3
 100a626:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
 100a62a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 100a62e:	f042 0203 	orr.w	r2, r2, #3
 100a632:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PRESCALER = prescaler_factor;
 100a636:	2204      	movs	r2, #4
 100a638:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
 100a63c:	4770      	bx	lr
 100a63e:	bf00      	nop
 100a640:	4100c000 	.word	0x4100c000

0100a644 <nrf_802154_trx_module_reset>:
    m_trx_state                      = TRX_STATE_DISABLED;
 100a644:	2100      	movs	r1, #0
 100a646:	4b06      	ldr	r3, [pc, #24]	; (100a660 <nrf_802154_trx_module_reset+0x1c>)
    memset(&m_flags, 0, sizeof(m_flags));
 100a648:	2205      	movs	r2, #5
    m_trx_state                      = TRX_STATE_DISABLED;
 100a64a:	7019      	strb	r1, [r3, #0]
    m_timer_value_on_radio_end_event = 0;
 100a64c:	4b05      	ldr	r3, [pc, #20]	; (100a664 <nrf_802154_trx_module_reset+0x20>)
    memset(&m_flags, 0, sizeof(m_flags));
 100a64e:	4806      	ldr	r0, [pc, #24]	; (100a668 <nrf_802154_trx_module_reset+0x24>)
    m_timer_value_on_radio_end_event = 0;
 100a650:	6019      	str	r1, [r3, #0]
    m_transmit_with_cca              = false;
 100a652:	4b06      	ldr	r3, [pc, #24]	; (100a66c <nrf_802154_trx_module_reset+0x28>)
 100a654:	7019      	strb	r1, [r3, #0]
    mp_receive_buffer                = NULL;
 100a656:	4b06      	ldr	r3, [pc, #24]	; (100a670 <nrf_802154_trx_module_reset+0x2c>)
 100a658:	6019      	str	r1, [r3, #0]
    memset(&m_flags, 0, sizeof(m_flags));
 100a65a:	f008 b9da 	b.w	1012a12 <memset>
 100a65e:	bf00      	nop
 100a660:	21004402 	.word	0x21004402
 100a664:	21003404 	.word	0x21003404
 100a668:	210043fd 	.word	0x210043fd
 100a66c:	210043fc 	.word	0x210043fc
 100a670:	21003400 	.word	0x21003400

0100a674 <nrf_802154_trx_enable>:
{
 100a674:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    nrf_timer_init();
 100a676:	f7ff ffcf 	bl	100a618 <nrf_timer_init>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
 100a67a:	2300      	movs	r3, #0
 100a67c:	2201      	movs	r2, #1
 100a67e:	4c3e      	ldr	r4, [pc, #248]	; (100a778 <nrf_802154_trx_enable+0x104>)
        if (((volatile uint32_t *)((volatile uintptr_t)NRF_FICR_NS->TRIMCNF[index].ADDR &
 100a680:	483e      	ldr	r0, [pc, #248]	; (100a77c <nrf_802154_trx_enable+0x108>)
 100a682:	f8c4 3ffc 	str.w	r3, [r4, #4092]	; 0xffc
 100a686:	f8c4 2ffc 	str.w	r2, [r4, #4092]	; 0xffc
 100a68a:	00da      	lsls	r2, r3, #3
 100a68c:	f102 72ff 	add.w	r2, r2, #33423360	; 0x1fe0000
 100a690:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 100a694:	f8d2 1300 	ldr.w	r1, [r2, #768]	; 0x300
    for (uint32_t index = 0; index < FICR_TRIM_REGISTERS_COUNT; index++)
 100a698:	3301      	adds	r3, #1
        if (((volatile uint32_t *)((volatile uintptr_t)NRF_FICR_NS->TRIMCNF[index].ADDR &
 100a69a:	4001      	ands	r1, r0
 100a69c:	42a1      	cmp	r1, r4
            *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) =
 100a69e:	bf02      	ittt	eq
 100a6a0:	f8d2 1300 	ldreq.w	r1, [r2, #768]	; 0x300
                NRF_FICR_NS->TRIMCNF[index].DATA;
 100a6a4:	f8d2 2304 	ldreq.w	r2, [r2, #772]	; 0x304
            *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) =
 100a6a8:	600a      	streq	r2, [r1, #0]
    for (uint32_t index = 0; index < FICR_TRIM_REGISTERS_COUNT; index++)
 100a6aa:	2b20      	cmp	r3, #32
 100a6ac:	d1ed      	bne.n	100a68a <nrf_802154_trx_enable+0x16>
    p_reg->MODE = ((uint32_t) radio_mode << RADIO_MODE_MODE_Pos);
 100a6ae:	230f      	movs	r3, #15
 100a6b0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    uint32_t ficr_reg = *(volatile uint32_t *)(FICR_BASE + 0x84UL);
 100a6b4:	4b32      	ldr	r3, [pc, #200]	; (100a780 <nrf_802154_trx_enable+0x10c>)
    memset(&packet_conf, 0, sizeof(packet_conf));
 100a6b6:	2100      	movs	r1, #0
    uint32_t ficr_reg = *(volatile uint32_t *)(FICR_BASE + 0x84UL);
 100a6b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    memset(&packet_conf, 0, sizeof(packet_conf));
 100a6bc:	220d      	movs	r2, #13
    *p_radio_reg = ficr_reg;
 100a6be:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    memset(&packet_conf, 0, sizeof(packet_conf));
 100a6c2:	4668      	mov	r0, sp
 100a6c4:	f008 f9a5 	bl	1012a12 <memset>
    packet_conf.plen   = NRF_RADIO_PREAMBLE_LENGTH_32BIT_ZERO;
 100a6c8:	2302      	movs	r3, #2
 100a6ca:	f88d 3005 	strb.w	r3, [sp, #5]
    packet_conf.maxlen = MAX_PACKET_SIZE;
 100a6ce:	237f      	movs	r3, #127	; 0x7f
    packet_conf.lflen  = 8;
 100a6d0:	2608      	movs	r6, #8
    packet_conf.crcinc = true;
 100a6d2:	2501      	movs	r5, #1
    packet_conf.maxlen = MAX_PACKET_SIZE;
 100a6d4:	f88d 3008 	strb.w	r3, [sp, #8]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
 100a6d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
 100a6dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
 100a6e0:	075b      	lsls	r3, r3, #29
 100a6e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
 100a6e6:	f89d 2002 	ldrb.w	r2, [sp, #2]
    packet_conf.lflen  = 8;
 100a6ea:	f88d 6000 	strb.w	r6, [sp]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
 100a6ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                        (RADIO_PCNF0_S1INCL_Include   << RADIO_PCNF0_S1INCL_Pos) :
 100a6f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    packet_conf.crcinc = true;
 100a6f6:	f88d 5006 	strb.w	r5, [sp, #6]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
 100a6fa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                    ((uint32_t)p_config->cilen << RADIO_PCNF0_CILEN_Pos) |
 100a6fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
 100a702:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 100a706:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 100a70a:	4333      	orrs	r3, r6
    p_reg->PCNF0 = (((uint32_t)p_config->lflen << RADIO_PCNF0_LFLEN_Pos) |
 100a70c:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
 100a710:	f89d 3009 	ldrb.w	r3, [sp, #9]
                         (RADIO_PCNF1_WHITEEN_Enabled  << RADIO_PCNF1_WHITEEN_Pos) :
 100a714:	f89d 200c 	ldrb.w	r2, [sp, #12]
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
 100a718:	40b3      	lsls	r3, r6
                         (RADIO_PCNF1_ENDIAN_Little << RADIO_PCNF1_ENDIAN_Pos) ) |
 100a71a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
 100a71e:	f89d 200a 	ldrb.w	r2, [sp, #10]
                         (RADIO_PCNF1_ENDIAN_Little << RADIO_PCNF1_ENDIAN_Pos) ) |
 100a722:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                         (RADIO_PCNF1_ENDIAN_Big    << RADIO_PCNF1_ENDIAN_Pos) :
 100a726:	f89d 200b 	ldrb.w	r2, [sp, #11]
                         (RADIO_PCNF1_ENDIAN_Little << RADIO_PCNF1_ENDIAN_Pos) ) |
 100a72a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 100a72e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
    p_reg->PCNF1 = (((uint32_t)p_config->maxlen  << RADIO_PCNF1_MAXLEN_Pos) |
 100a732:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
 100a736:	f240 2302 	movw	r3, #514	; 0x202
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
 100a73a:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
 100a73e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->CRCPOLY = (crc_polynominal << RADIO_CRCPOLY_CRCPOLY_Pos);
 100a742:	4b10      	ldr	r3, [pc, #64]	; (100a784 <nrf_802154_trx_enable+0x110>)
 100a744:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    nrf_802154_trx_ppi_for_enable();
 100a748:	f000 fe42 	bl	100b3d0 <nrf_802154_trx_ppi_for_enable>
    cca_configuration_update();
 100a74c:	f7ff fef2 	bl	100a534 <cca_configuration_update>
    channel_set(nrf_802154_pib_channel_get());
 100a750:	f7ff fcec 	bl	100a12c <nrf_802154_pib_channel_get>
 100a754:	f7ff ff0a 	bl	100a56c <channel_set>
    nrf_802154_custom_part_of_radio_init();
 100a758:	f008 fc60 	bl	101301c <nrf_802154_custom_part_of_radio_init>
    nrf_802154_irq_enable(RADIO_IRQn);
 100a75c:	4630      	mov	r0, r6
 100a75e:	f008 fb3f 	bl	1012de0 <nrf_802154_irq_enable>
    mpsl_fem_abort_set(NRF_802154_DPPI_RADIO_DISABLED,
 100a762:	2100      	movs	r1, #0
 100a764:	2007      	movs	r0, #7
 100a766:	f7fa f829 	bl	10047bc <mpsl_fem_abort_set>
    mpsl_fem_deactivate_now(MPSL_FEM_ALL);
 100a76a:	2003      	movs	r0, #3
 100a76c:	f7fa f81a 	bl	10047a4 <mpsl_fem_deactivate_now>
    m_trx_state = TRX_STATE_IDLE;
 100a770:	4b05      	ldr	r3, [pc, #20]	; (100a788 <nrf_802154_trx_enable+0x114>)
 100a772:	701d      	strb	r5, [r3, #0]
}
 100a774:	b004      	add	sp, #16
 100a776:	bd70      	pop	{r4, r5, r6, pc}
 100a778:	41008000 	.word	0x41008000
 100a77c:	fffff000 	.word	0xfffff000
 100a780:	01ff0000 	.word	0x01ff0000
 100a784:	00011021 	.word	0x00011021
 100a788:	21004402 	.word	0x21004402

0100a78c <nrf_802154_trx_disable>:
{
 100a78c:	b510      	push	{r4, lr}
    if (m_trx_state != TRX_STATE_DISABLED)
 100a78e:	4c2c      	ldr	r4, [pc, #176]	; (100a840 <nrf_802154_trx_disable+0xb4>)
 100a790:	7823      	ldrb	r3, [r4, #0]
 100a792:	2b00      	cmp	r3, #0
 100a794:	d040      	beq.n	100a818 <nrf_802154_trx_disable+0x8c>
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
 100a796:	2200      	movs	r2, #0
 100a798:	4b2a      	ldr	r3, [pc, #168]	; (100a844 <nrf_802154_trx_disable+0xb8>)
        nrf_802154_irq_clear_pending(RADIO_IRQn);
 100a79a:	2008      	movs	r0, #8
 100a79c:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
 100a7a0:	f7fd fca2 	bl	10080e8 <nrf_802154_irq_clear_pending>
    switch (m_trx_state)
 100a7a4:	7823      	ldrb	r3, [r4, #0]
 100a7a6:	3b03      	subs	r3, #3
 100a7a8:	2b08      	cmp	r3, #8
 100a7aa:	d808      	bhi.n	100a7be <nrf_802154_trx_disable+0x32>
 100a7ac:	e8df f003 	tbb	[pc, r3]
 100a7b0:	3a350705 	.word	0x3a350705
 100a7b4:	44443541 	.word	0x44443541
 100a7b8:	35          	.byte	0x35
 100a7b9:	00          	.byte	0x00
            rxframe_finish_disable_ppis();
 100a7ba:	f008 fe86 	bl	10134ca <rxframe_finish_disable_ppis>
    nrf_802154_trx_ppi_for_disable();
 100a7be:	f000 fe25 	bl	100b40c <nrf_802154_trx_ppi_for_disable>
 100a7c2:	2208      	movs	r2, #8
 100a7c4:	4b20      	ldr	r3, [pc, #128]	; (100a848 <nrf_802154_trx_disable+0xbc>)
 100a7c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 100a7ca:	2200      	movs	r2, #0
 100a7cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 100a7d0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    p_reg->SHORTS &= ~(mask);
 100a7d4:	4b1d      	ldr	r3, [pc, #116]	; (100a84c <nrf_802154_trx_disable+0xc0>)
 100a7d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 100a7da:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 100a7de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100a7e2:	2201      	movs	r2, #1
 100a7e4:	611a      	str	r2, [r3, #16]
 100a7e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 100a7ea:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
        mpsl_fem_lna_configuration_clear();
 100a7ee:	f7f9 ffd3 	bl	1004798 <mpsl_fem_lna_configuration_clear>
        mpsl_fem_pa_configuration_clear();
 100a7f2:	f7f9 ffcb 	bl	100478c <mpsl_fem_pa_configuration_clear>
        mpsl_fem_abort_clear();
 100a7f6:	f7f9 ffe7 	bl	10047c8 <mpsl_fem_abort_clear>
        if (m_trx_state != TRX_STATE_IDLE)
 100a7fa:	7823      	ldrb	r3, [r4, #0]
 100a7fc:	2b01      	cmp	r3, #1
 100a7fe:	d004      	beq.n	100a80a <nrf_802154_trx_disable+0x7e>
    mpsl_fem_deactivate_now(MPSL_FEM_ALL);
 100a800:	2003      	movs	r0, #3
 100a802:	f7f9 ffcf 	bl	10047a4 <mpsl_fem_deactivate_now>
    mpsl_fem_disable();
 100a806:	f7f9 ffaf 	bl	1004768 <mpsl_fem_disable>
        m_flags.psdu_being_received = false;
 100a80a:	2300      	movs	r3, #0
 100a80c:	4a10      	ldr	r2, [pc, #64]	; (100a850 <nrf_802154_trx_disable+0xc4>)
        m_trx_state = TRX_STATE_DISABLED;
 100a80e:	7023      	strb	r3, [r4, #0]
        m_flags.psdu_being_received = false;
 100a810:	7013      	strb	r3, [r2, #0]
        m_flags.missing_receive_buffer = false;
 100a812:	7053      	strb	r3, [r2, #1]
        m_flags.rssi_started           = false;
 100a814:	70d3      	strb	r3, [r2, #3]
        m_flags.tx_started = false;
 100a816:	7093      	strb	r3, [r2, #2]
}
 100a818:	bd10      	pop	{r4, pc}
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
 100a81a:	2100      	movs	r1, #0
 100a81c:	2004      	movs	r0, #4
            nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
 100a81e:	f000 fe3b 	bl	100b498 <nrf_802154_trx_ppi_for_ramp_up_clear>
 100a822:	e003      	b.n	100a82c <nrf_802154_trx_disable+0xa0>
            txframe_finish_disable_ppis(m_transmit_with_cca);
 100a824:	4b0b      	ldr	r3, [pc, #44]	; (100a854 <nrf_802154_trx_disable+0xc8>)
 100a826:	7818      	ldrb	r0, [r3, #0]
 100a828:	f008 fe49 	bl	10134be <txframe_finish_disable_ppis>
            nrf_802154_trx_ppi_for_fem_clear();
 100a82c:	f000 fe9c 	bl	100b568 <nrf_802154_trx_ppi_for_fem_clear>
            break;
 100a830:	e7c5      	b.n	100a7be <nrf_802154_trx_disable+0x32>
            nrf_802154_trx_ppi_for_ack_tx_clear();
 100a832:	f000 fe7d 	bl	100b530 <nrf_802154_trx_ppi_for_ack_tx_clear>
            break;
 100a836:	e7c2      	b.n	100a7be <nrf_802154_trx_disable+0x32>
            nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
 100a838:	2100      	movs	r1, #0
 100a83a:	4608      	mov	r0, r1
 100a83c:	e7ef      	b.n	100a81e <nrf_802154_trx_disable+0x92>
 100a83e:	bf00      	nop
 100a840:	21004402 	.word	0x21004402
 100a844:	41008000 	.word	0x41008000
 100a848:	41014000 	.word	0x41014000
 100a84c:	4100c000 	.word	0x4100c000
 100a850:	210043fd 	.word	0x210043fd
 100a854:	210043fc 	.word	0x210043fc

0100a858 <nrf_802154_trx_antenna_update>:
{
 100a858:	b538      	push	{r3, r4, r5, lr}
    switch (m_trx_state)
 100a85a:	4c1a      	ldr	r4, [pc, #104]	; (100a8c4 <nrf_802154_trx_antenna_update+0x6c>)
 100a85c:	7823      	ldrb	r3, [r4, #0]
 100a85e:	3b03      	subs	r3, #3
 100a860:	b2db      	uxtb	r3, r3
 100a862:	2b08      	cmp	r3, #8
 100a864:	d810      	bhi.n	100a888 <nrf_802154_trx_antenna_update+0x30>
 100a866:	2001      	movs	r0, #1
 100a868:	fa00 f303 	lsl.w	r3, r0, r3
 100a86c:	f013 05ec 	ands.w	r5, r3, #236	; 0xec
 100a870:	d122      	bne.n	100a8b8 <nrf_802154_trx_antenna_update+0x60>
 100a872:	f240 1213 	movw	r2, #275	; 0x113
 100a876:	4213      	tst	r3, r2
 100a878:	d006      	beq.n	100a888 <nrf_802154_trx_antenna_update+0x30>
    nrf_802154_sl_ant_div_mode_t mode   = nrf_802154_sl_ant_div_cfg_mode_get(
 100a87a:	4628      	mov	r0, r5
 100a87c:	f00a fc66 	bl	101514c <nrf_802154_sl_ant_div_cfg_mode_get>
    switch (mode)
 100a880:	2801      	cmp	r0, #1
 100a882:	d002      	beq.n	100a88a <nrf_802154_trx_antenna_update+0x32>
 100a884:	2802      	cmp	r0, #2
 100a886:	d007      	beq.n	100a898 <nrf_802154_trx_antenna_update+0x40>
}
 100a888:	bd38      	pop	{r3, r4, r5, pc}
            result = nrf_802154_sl_ant_div_antenna_set(
 100a88a:	4628      	mov	r0, r5
            result = nrf_802154_sl_ant_div_antenna_set(
 100a88c:	f00a fc60 	bl	1015150 <nrf_802154_sl_ant_div_cfg_antenna_get>
}
 100a890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            result = nrf_802154_sl_ant_div_antenna_set(
 100a894:	f00a bc4c 	b.w	1015130 <nrf_802154_sl_ant_div_antenna_set>
    switch (m_trx_state)
 100a898:	7822      	ldrb	r2, [r4, #0]
 100a89a:	2a04      	cmp	r2, #4
 100a89c:	b2d3      	uxtb	r3, r2
 100a89e:	d805      	bhi.n	100a8ac <nrf_802154_trx_antenna_update+0x54>
 100a8a0:	2b02      	cmp	r3, #2
 100a8a2:	d9f1      	bls.n	100a888 <nrf_802154_trx_antenna_update+0x30>
}
 100a8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            nrf_802154_sl_ant_div_rx_started_notify();
 100a8a8:	f00a bc4e 	b.w	1015148 <nrf_802154_sl_ant_div_rx_started_notify>
    switch (m_trx_state)
 100a8ac:	2b07      	cmp	r3, #7
 100a8ae:	d1eb      	bne.n	100a888 <nrf_802154_trx_antenna_update+0x30>
}
 100a8b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            nrf_802154_sl_ant_div_txack_notify();
 100a8b4:	f00a bc49 	b.w	101514a <nrf_802154_sl_ant_div_txack_notify>
    nrf_802154_sl_ant_div_mode_t mode   = nrf_802154_sl_ant_div_cfg_mode_get(
 100a8b8:	f00a fc48 	bl	101514c <nrf_802154_sl_ant_div_cfg_mode_get>
    switch (mode)
 100a8bc:	2801      	cmp	r0, #1
 100a8be:	d1e3      	bne.n	100a888 <nrf_802154_trx_antenna_update+0x30>
 100a8c0:	e7e4      	b.n	100a88c <nrf_802154_trx_antenna_update+0x34>
 100a8c2:	bf00      	nop
 100a8c4:	21004402 	.word	0x21004402

0100a8c8 <nrf_802154_trx_psdu_is_being_received>:
}
 100a8c8:	4b01      	ldr	r3, [pc, #4]	; (100a8d0 <nrf_802154_trx_psdu_is_being_received+0x8>)
 100a8ca:	7818      	ldrb	r0, [r3, #0]
 100a8cc:	4770      	bx	lr
 100a8ce:	bf00      	nop
 100a8d0:	210043fd 	.word	0x210043fd

0100a8d4 <nrf_802154_trx_receive_is_buffer_missing>:
    switch (m_trx_state)
 100a8d4:	4b05      	ldr	r3, [pc, #20]	; (100a8ec <nrf_802154_trx_receive_is_buffer_missing+0x18>)
 100a8d6:	781b      	ldrb	r3, [r3, #0]
 100a8d8:	2b03      	cmp	r3, #3
 100a8da:	b2da      	uxtb	r2, r3
 100a8dc:	d001      	beq.n	100a8e2 <nrf_802154_trx_receive_is_buffer_missing+0xe>
 100a8de:	2a05      	cmp	r2, #5
 100a8e0:	d102      	bne.n	100a8e8 <nrf_802154_trx_receive_is_buffer_missing+0x14>
            return m_flags.missing_receive_buffer;
 100a8e2:	4b03      	ldr	r3, [pc, #12]	; (100a8f0 <nrf_802154_trx_receive_is_buffer_missing+0x1c>)
 100a8e4:	7858      	ldrb	r0, [r3, #1]
 100a8e6:	4770      	bx	lr
    switch (m_trx_state)
 100a8e8:	2000      	movs	r0, #0
}
 100a8ea:	4770      	bx	lr
 100a8ec:	21004402 	.word	0x21004402
 100a8f0:	210043fd 	.word	0x210043fd

0100a8f4 <nrf_802154_trx_receive_buffer_set>:
    mp_receive_buffer = p_receive_buffer;
 100a8f4:	4a10      	ldr	r2, [pc, #64]	; (100a938 <nrf_802154_trx_receive_buffer_set+0x44>)
{
 100a8f6:	b510      	push	{r4, lr}
 100a8f8:	4603      	mov	r3, r0
    mp_receive_buffer = p_receive_buffer;
 100a8fa:	6010      	str	r0, [r2, #0]
    if ((p_receive_buffer != NULL) && m_flags.missing_receive_buffer)
 100a8fc:	b1c8      	cbz	r0, 100a932 <nrf_802154_trx_receive_buffer_set+0x3e>
 100a8fe:	4a0f      	ldr	r2, [pc, #60]	; (100a93c <nrf_802154_trx_receive_buffer_set+0x48>)
 100a900:	7850      	ldrb	r0, [r2, #1]
 100a902:	b1b0      	cbz	r0, 100a932 <nrf_802154_trx_receive_buffer_set+0x3e>
    switch (m_trx_state)
 100a904:	490e      	ldr	r1, [pc, #56]	; (100a940 <nrf_802154_trx_receive_buffer_set+0x4c>)
 100a906:	7809      	ldrb	r1, [r1, #0]
 100a908:	2903      	cmp	r1, #3
 100a90a:	b2cc      	uxtb	r4, r1
 100a90c:	d012      	beq.n	100a934 <nrf_802154_trx_receive_buffer_set+0x40>
    uint32_t shorts = SHORTS_IDLE;
 100a90e:	2c05      	cmp	r4, #5
 100a910:	490c      	ldr	r1, [pc, #48]	; (100a944 <nrf_802154_trx_receive_buffer_set+0x50>)
 100a912:	bf18      	it	ne
 100a914:	2100      	movne	r1, #0
    m_flags.missing_receive_buffer = false;
 100a916:	2400      	movs	r4, #0
 100a918:	7054      	strb	r4, [r2, #1]
    p_reg->PACKETPTR = (uint32_t)p_packet;
 100a91a:	4a0b      	ldr	r2, [pc, #44]	; (100a948 <nrf_802154_trx_receive_buffer_set+0x54>)
 100a91c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->SHORTS = shorts_mask;
 100a920:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    return (nrf_radio_state_t) p_reg->STATE;
 100a924:	f8d2 3550 	ldr.w	r3, [r2, #1360]	; 0x550
    if (nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_RXIDLE)
 100a928:	b2db      	uxtb	r3, r3
 100a92a:	2b02      	cmp	r3, #2
 100a92c:	d101      	bne.n	100a932 <nrf_802154_trx_receive_buffer_set+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100a92e:	2301      	movs	r3, #1
 100a930:	6093      	str	r3, [r2, #8]
}
 100a932:	bd10      	pop	{r4, pc}
    switch (m_trx_state)
 100a934:	4905      	ldr	r1, [pc, #20]	; (100a94c <nrf_802154_trx_receive_buffer_set+0x58>)
 100a936:	e7ee      	b.n	100a916 <nrf_802154_trx_receive_buffer_set+0x22>
 100a938:	21003400 	.word	0x21003400
 100a93c:	210043fd 	.word	0x210043fd
 100a940:	21004402 	.word	0x21004402
 100a944:	00080012 	.word	0x00080012
 100a948:	41008000 	.word	0x41008000
 100a94c:	00080052 	.word	0x00080052

0100a950 <nrf_802154_trx_receive_frame>:
{
 100a950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100a954:	f04f 0801 	mov.w	r8, #1
 100a958:	4615      	mov	r5, r2
    m_flags.rssi_started = false;
 100a95a:	2700      	movs	r7, #0
    m_trx_state = TRX_STATE_RXFRAME;
 100a95c:	2203      	movs	r2, #3
 100a95e:	4b3b      	ldr	r3, [pc, #236]	; (100aa4c <nrf_802154_trx_receive_frame+0xfc>)
    m_flags.rssi_started = false;
 100a960:	4e3b      	ldr	r6, [pc, #236]	; (100aa50 <nrf_802154_trx_receive_frame+0x100>)
 100a962:	f8c3 8010 	str.w	r8, [r3, #16]
    m_trx_state = TRX_STATE_RXFRAME;
 100a966:	4b3b      	ldr	r3, [pc, #236]	; (100aa54 <nrf_802154_trx_receive_frame+0x104>)
{
 100a968:	4604      	mov	r4, r0
    m_trx_state = TRX_STATE_RXFRAME;
 100a96a:	701a      	strb	r2, [r3, #0]
    rx_flags_clear();
 100a96c:	f7ff fe4c 	bl	100a608 <rx_flags_clear>
    m_flags.rssi_started = false;
 100a970:	70f7      	strb	r7, [r6, #3]
    m_flags.rssi_settled = false;
 100a972:	7137      	strb	r7, [r6, #4]
    txpower_set(p_ack_tx_power->radio_tx_power);
 100a974:	7828      	ldrb	r0, [r5, #0]
 100a976:	f7ff fd09 	bl	100a38c <txpower_set>
    if (mp_receive_buffer != NULL)
 100a97a:	4a37      	ldr	r2, [pc, #220]	; (100aa58 <nrf_802154_trx_receive_frame+0x108>)
 100a97c:	4b37      	ldr	r3, [pc, #220]	; (100aa5c <nrf_802154_trx_receive_frame+0x10c>)
 100a97e:	6810      	ldr	r0, [r2, #0]
 100a980:	2800      	cmp	r0, #0
 100a982:	d055      	beq.n	100aa30 <nrf_802154_trx_receive_frame+0xe0>
        nrf_radio_packetptr_set(NRF_RADIO, mp_receive_buffer);
 100a984:	6812      	ldr	r2, [r2, #0]
        m_flags.missing_receive_buffer = false;
 100a986:	7077      	strb	r7, [r6, #1]
    p_reg->PACKETPTR = (uint32_t)p_packet;
 100a988:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        shorts |= SHORTS_RX_FREE_BUFFER;
 100a98c:	4a34      	ldr	r2, [pc, #208]	; (100aa60 <nrf_802154_trx_receive_frame+0x110>)
    p_reg->SHORTS = shorts_mask;
 100a98e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100a992:	2200      	movs	r2, #0
    nrf_radio_bcc_set(NRF_RADIO, bcc * 8U);
 100a994:	00e4      	lsls	r4, r4, #3
    p_reg->BCC = radio_bcc;
 100a996:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100a99a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 100a99e:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 100a9a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 100a9a6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 100a9aa:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 100a9ae:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    if ((notifications_mask & TRX_RECEIVE_NOTIFICATION_STARTED) != 0U)
 100a9b2:	0788      	lsls	r0, r1, #30
 100a9b4:	bf45      	ittet	mi
 100a9b6:	f8c3 2104 	strmi.w	r2, [r3, #260]	; 0x104
        ints_to_enable |= NRF_RADIO_INT_ADDRESS_MASK;
 100a9ba:	f243 4402 	movwmi	r4, #13314	; 0x3402
    ints_to_enable |= NRF_RADIO_INT_CRCOK_MASK;
 100a9be:	f44f 5450 	movpl.w	r4, #13312	; 0x3400
 100a9c2:	f8d3 3104 	ldrmi.w	r3, [r3, #260]	; 0x104
    if (((notifications_mask & TRX_RECEIVE_NOTIFICATION_PRESTARTED) != 0U) ||
 100a9c6:	f011 0001 	ands.w	r0, r1, #1
 100a9ca:	d035      	beq.n	100aa38 <nrf_802154_trx_receive_frame+0xe8>
        nrf_802154_trx_ppi_for_radio_sync_set(EGU_SYNC_TASK);
 100a9cc:	200c      	movs	r0, #12
 100a9ce:	f000 fdd3 	bl	100b578 <nrf_802154_trx_ppi_for_radio_sync_set>
 100a9d2:	2200      	movs	r2, #0
 100a9d4:	4b21      	ldr	r3, [pc, #132]	; (100aa5c <nrf_802154_trx_receive_frame+0x10c>)
 100a9d6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 100a9da:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 100a9de:	4b21      	ldr	r3, [pc, #132]	; (100aa64 <nrf_802154_trx_receive_frame+0x114>)
 100a9e0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 100a9e4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    p_reg->INTENSET = mask;
 100a9e8:	2208      	movs	r2, #8
 100a9ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    p_reg->INTENSET = mask;
 100a9ee:	4b1b      	ldr	r3, [pc, #108]	; (100aa5c <nrf_802154_trx_receive_frame+0x10c>)
    if (mpsl_fem_lna_configuration_set(&m_activate_rx_cc0, NULL) == 0)
 100a9f0:	2100      	movs	r1, #0
 100a9f2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
 100a9f6:	481c      	ldr	r0, [pc, #112]	; (100aa68 <nrf_802154_trx_receive_frame+0x118>)
 100a9f8:	f7f9 fec2 	bl	1004780 <mpsl_fem_lna_configuration_set>
 100a9fc:	4b13      	ldr	r3, [pc, #76]	; (100aa4c <nrf_802154_trx_receive_frame+0xfc>)
 100a9fe:	bb00      	cbnz	r0, 100aa42 <nrf_802154_trx_receive_frame+0xf2>
    return (uint32_t)p_reg->CC[cc_channel];
 100aa00:	f8d3 4540 	ldr.w	r4, [r3, #1344]	; 0x540
    mpsl_fem_pa_gain_set(&p_ack_tx_power->fem);
 100aa04:	1c68      	adds	r0, r5, #1
 100aa06:	f7f9 fed3 	bl	10047b0 <mpsl_fem_pa_gain_set>
    m_timer_value_on_radio_end_event = delta_time;
 100aa0a:	4b18      	ldr	r3, [pc, #96]	; (100aa6c <nrf_802154_trx_receive_frame+0x11c>)
 100aa0c:	601c      	str	r4, [r3, #0]
    nrf_802154_trx_antenna_update();
 100aa0e:	f7ff ff23 	bl	100a858 <nrf_802154_trx_antenna_update>
    p_reg->SHORTS |= mask;
 100aa12:	4a0e      	ldr	r2, [pc, #56]	; (100aa4c <nrf_802154_trx_receive_frame+0xfc>)
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, true);
 100aa14:	2101      	movs	r1, #1
 100aa16:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 100aa1a:	2004      	movs	r0, #4
 100aa1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 100aa20:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 100aa24:	f000 fd0a 	bl	100b43c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 100aa28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    trigger_disable_to_start_rampup();
 100aa2c:	f7ff bd00 	b.w	100a430 <trigger_disable_to_start_rampup>
    uint32_t shorts         = SHORTS_RX;
 100aa30:	2252      	movs	r2, #82	; 0x52
        m_flags.missing_receive_buffer = true;
 100aa32:	f886 8001 	strb.w	r8, [r6, #1]
 100aa36:	e7aa      	b.n	100a98e <nrf_802154_trx_receive_frame+0x3e>
         nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX)))
 100aa38:	f00a fb88 	bl	101514c <nrf_802154_sl_ant_div_cfg_mode_get>
    if (((notifications_mask & TRX_RECEIVE_NOTIFICATION_PRESTARTED) != 0U) ||
 100aa3c:	2800      	cmp	r0, #0
 100aa3e:	d1c5      	bne.n	100a9cc <nrf_802154_trx_receive_frame+0x7c>
 100aa40:	e7d5      	b.n	100a9ee <nrf_802154_trx_receive_frame+0x9e>
    p_reg->CC[cc_channel] = cc_value;
 100aa42:	2401      	movs	r4, #1
 100aa44:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
}
 100aa48:	e7dc      	b.n	100aa04 <nrf_802154_trx_receive_frame+0xb4>
 100aa4a:	bf00      	nop
 100aa4c:	4100c000 	.word	0x4100c000
 100aa50:	210043fd 	.word	0x210043fd
 100aa54:	21004402 	.word	0x21004402
 100aa58:	21003400 	.word	0x21003400
 100aa5c:	41008000 	.word	0x41008000
 100aa60:	00080052 	.word	0x00080052
 100aa64:	41014000 	.word	0x41014000
 100aa68:	010159ac 	.word	0x010159ac
 100aa6c:	21003404 	.word	0x21003404

0100aa70 <nrf_802154_trx_receive_ack>:
    m_trx_state = TRX_STATE_RXACK;
 100aa70:	2205      	movs	r2, #5
{
 100aa72:	b510      	push	{r4, lr}
    m_trx_state = TRX_STATE_RXACK;
 100aa74:	4b17      	ldr	r3, [pc, #92]	; (100aad4 <nrf_802154_trx_receive_ack+0x64>)
    if (mp_receive_buffer != NULL)
 100aa76:	4918      	ldr	r1, [pc, #96]	; (100aad8 <nrf_802154_trx_receive_ack+0x68>)
    m_trx_state = TRX_STATE_RXACK;
 100aa78:	701a      	strb	r2, [r3, #0]
    if (mp_receive_buffer != NULL)
 100aa7a:	6808      	ldr	r0, [r1, #0]
 100aa7c:	4a17      	ldr	r2, [pc, #92]	; (100aadc <nrf_802154_trx_receive_ack+0x6c>)
 100aa7e:	4b18      	ldr	r3, [pc, #96]	; (100aae0 <nrf_802154_trx_receive_ack+0x70>)
 100aa80:	b320      	cbz	r0, 100aacc <nrf_802154_trx_receive_ack+0x5c>
        m_flags.missing_receive_buffer = false;
 100aa82:	2000      	movs	r0, #0
 100aa84:	7050      	strb	r0, [r2, #1]
        nrf_radio_packetptr_set(NRF_RADIO, mp_receive_buffer);
 100aa86:	680a      	ldr	r2, [r1, #0]
    p_reg->PACKETPTR = (uint32_t)p_packet;
 100aa88:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        shorts |= SHORTS_RX_FREE_BUFFER;
 100aa8c:	4a15      	ldr	r2, [pc, #84]	; (100aae4 <nrf_802154_trx_receive_ack+0x74>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100aa8e:	2400      	movs	r4, #0
    p_reg->SHORTS = shorts_mask;
 100aa90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100aa94:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
 100aa98:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 100aa9c:	f8c3 4130 	str.w	r4, [r3, #304]	; 0x130
 100aaa0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 100aaa4:	f8c3 4134 	str.w	r4, [r3, #308]	; 0x134
 100aaa8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
    p_reg->INTENSET = mask;
 100aaac:	f243 0202 	movw	r2, #12290	; 0x3002
 100aab0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fem_for_lna_set();
 100aab4:	f7ff fd6e 	bl	100a594 <fem_for_lna_set>
    nrf_802154_trx_antenna_update();
 100aab8:	f7ff fece 	bl	100a858 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, false);
 100aabc:	4621      	mov	r1, r4
 100aabe:	2004      	movs	r0, #4
 100aac0:	f000 fcbc 	bl	100b43c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 100aac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
 100aac8:	f7ff bcb2 	b.w	100a430 <trigger_disable_to_start_rampup>
        m_flags.missing_receive_buffer = true;
 100aacc:	2101      	movs	r1, #1
 100aace:	7051      	strb	r1, [r2, #1]
    uint32_t shorts         = SHORTS_RX_ACK;
 100aad0:	2212      	movs	r2, #18
 100aad2:	e7dc      	b.n	100aa8e <nrf_802154_trx_receive_ack+0x1e>
 100aad4:	21004402 	.word	0x21004402
 100aad8:	21003400 	.word	0x21003400
 100aadc:	210043fd 	.word	0x210043fd
 100aae0:	41008000 	.word	0x41008000
 100aae4:	00080012 	.word	0x00080012

0100aae8 <nrf_802154_trx_rssi_measure>:
{
 100aae8:	b538      	push	{r3, r4, r5, lr}
    if (m_trx_state == TRX_STATE_RXFRAME)
 100aaea:	4b10      	ldr	r3, [pc, #64]	; (100ab2c <nrf_802154_trx_rssi_measure+0x44>)
 100aaec:	781b      	ldrb	r3, [r3, #0]
 100aaee:	2b03      	cmp	r3, #3
 100aaf0:	d11a      	bne.n	100ab28 <nrf_802154_trx_rssi_measure+0x40>
    return (nrf_radio_state_t) p_reg->STATE;
 100aaf2:	4c0f      	ldr	r4, [pc, #60]	; (100ab30 <nrf_802154_trx_rssi_measure+0x48>)
 100aaf4:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
        if ((radio_state == RADIO_STATE_STATE_RxIdle) || (radio_state == RADIO_STATE_STATE_Rx))
 100aaf8:	3b02      	subs	r3, #2
 100aafa:	b2db      	uxtb	r3, r3
 100aafc:	2b01      	cmp	r3, #1
 100aafe:	d813      	bhi.n	100ab28 <nrf_802154_trx_rssi_measure+0x40>
            if (!m_flags.rssi_settled)
 100ab00:	4d0c      	ldr	r5, [pc, #48]	; (100ab34 <nrf_802154_trx_rssi_measure+0x4c>)
 100ab02:	792b      	ldrb	r3, [r5, #4]
 100ab04:	b93b      	cbnz	r3, 100ab16 <nrf_802154_trx_rssi_measure+0x2e>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
 100ab06:	4b0c      	ldr	r3, [pc, #48]	; (100ab38 <nrf_802154_trx_rssi_measure+0x50>)
 100ab08:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 100ab0c:	f043 0301 	orr.w	r3, r3, #1
 100ab10:	4798      	blx	r3
                m_flags.rssi_settled = true;
 100ab12:	2301      	movs	r3, #1
 100ab14:	712b      	strb	r3, [r5, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100ab16:	2300      	movs	r3, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100ab18:	2001      	movs	r0, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100ab1a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 100ab1e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100ab22:	6160      	str	r0, [r4, #20]
            m_flags.rssi_started = true;
 100ab24:	70e8      	strb	r0, [r5, #3]
}
 100ab26:	bd38      	pop	{r3, r4, r5, pc}
    bool result = false;
 100ab28:	2000      	movs	r0, #0
 100ab2a:	e7fc      	b.n	100ab26 <nrf_802154_trx_rssi_measure+0x3e>
 100ab2c:	21004402 	.word	0x21004402
 100ab30:	41008000 	.word	0x41008000
 100ab34:	210043fd 	.word	0x210043fd
 100ab38:	010157e0 	.word	0x010157e0

0100ab3c <nrf_802154_trx_rssi_measure_is_started>:
}
 100ab3c:	4b01      	ldr	r3, [pc, #4]	; (100ab44 <nrf_802154_trx_rssi_measure_is_started+0x8>)
 100ab3e:	78d8      	ldrb	r0, [r3, #3]
 100ab40:	4770      	bx	lr
 100ab42:	bf00      	nop
 100ab44:	210043fd 	.word	0x210043fd

0100ab48 <nrf_802154_trx_rssi_last_sample_get>:
    return (uint8_t)((p_reg->RSSISAMPLE & RADIO_RSSISAMPLE_RSSISAMPLE_Msk) >>
 100ab48:	4b02      	ldr	r3, [pc, #8]	; (100ab54 <nrf_802154_trx_rssi_last_sample_get+0xc>)
 100ab4a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
 100ab4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 100ab52:	4770      	bx	lr
 100ab54:	41008000 	.word	0x41008000

0100ab58 <nrf_802154_trx_rssi_sample_is_available>:
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100ab58:	4b03      	ldr	r3, [pc, #12]	; (100ab68 <nrf_802154_trx_rssi_sample_is_available+0x10>)
 100ab5a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
 100ab5e:	3800      	subs	r0, #0
 100ab60:	bf18      	it	ne
 100ab62:	2001      	movne	r0, #1
 100ab64:	4770      	bx	lr
 100ab66:	bf00      	nop
 100ab68:	41008000 	.word	0x41008000

0100ab6c <nrf_802154_trx_transmit_frame>:
{
 100ab6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100ab70:	4616      	mov	r6, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100ab72:	2201      	movs	r2, #1
 100ab74:	461f      	mov	r7, r3
 100ab76:	4b40      	ldr	r3, [pc, #256]	; (100ac78 <nrf_802154_trx_transmit_frame+0x10c>)
 100ab78:	4680      	mov	r8, r0
 100ab7a:	611a      	str	r2, [r3, #16]
    m_trx_state         = TRX_STATE_TXFRAME;
 100ab7c:	2206      	movs	r2, #6
 100ab7e:	4b3f      	ldr	r3, [pc, #252]	; (100ac7c <nrf_802154_trx_transmit_frame+0x110>)
    p_reg->PACKETPTR = (uint32_t)p_packet;
 100ab80:	4c3f      	ldr	r4, [pc, #252]	; (100ac80 <nrf_802154_trx_transmit_frame+0x114>)
 100ab82:	701a      	strb	r2, [r3, #0]
    m_transmit_with_cca = cca;
 100ab84:	4b3f      	ldr	r3, [pc, #252]	; (100ac84 <nrf_802154_trx_transmit_frame+0x118>)
    txpower_set(p_tx_power->radio_tx_power);
 100ab86:	7830      	ldrb	r0, [r6, #0]
    m_transmit_with_cca = cca;
 100ab88:	7019      	strb	r1, [r3, #0]
{
 100ab8a:	460d      	mov	r5, r1
    txpower_set(p_tx_power->radio_tx_power);
 100ab8c:	f7ff fbfe 	bl	100a38c <txpower_set>
 100ab90:	f8c4 8504 	str.w	r8, [r4, #1284]	; 0x504
    if (cca)
 100ab94:	b1c9      	cbz	r1, 100abca <nrf_802154_trx_transmit_frame+0x5e>
    p_reg->SHORTS = shorts_mask;
 100ab96:	4b3c      	ldr	r3, [pc, #240]	; (100ac88 <nrf_802154_trx_transmit_frame+0x11c>)
 100ab98:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100ab9c:	2300      	movs	r3, #0
 100ab9e:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 100aba2:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 100aba6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 100abaa:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        if ((notifications_mask & TRX_TRANSMIT_NOTIFICATION_CCAIDLE) != 0U)
 100abae:	07ba      	lsls	r2, r7, #30
 100abb0:	d438      	bmi.n	100ac24 <nrf_802154_trx_transmit_frame+0xb8>
        ints_to_enable |= NRF_RADIO_INT_CCABUSY_MASK;
 100abb2:	4936      	ldr	r1, [pc, #216]	; (100ac8c <nrf_802154_trx_transmit_frame+0x120>)
        if ((notifications_mask & TRX_TRANSMIT_NOTIFICATION_CCASTARTED) != 0U)
 100abb4:	077b      	lsls	r3, r7, #29
 100abb6:	d512      	bpl.n	100abde <nrf_802154_trx_transmit_frame+0x72>
 100abb8:	2200      	movs	r2, #0
 100abba:	4b31      	ldr	r3, [pc, #196]	; (100ac80 <nrf_802154_trx_transmit_frame+0x114>)
            ints_to_enable |= NRF_RADIO_INT_READY_MASK;
 100abbc:	f041 0101 	orr.w	r1, r1, #1
 100abc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 100abc4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 100abc8:	e009      	b.n	100abde <nrf_802154_trx_transmit_frame+0x72>
    p_reg->SHORTS = shorts_mask;
 100abca:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 100abce:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100abd2:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
    ints_to_enable |= NRF_RADIO_INT_PHYEND_MASK;
 100abd6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 100abda:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 100abde:	2400      	movs	r4, #0
 100abe0:	4b27      	ldr	r3, [pc, #156]	; (100ac80 <nrf_802154_trx_transmit_frame+0x114>)
    ints_to_enable    |= NRF_RADIO_INT_ADDRESS_MASK;
 100abe2:	f041 0102 	orr.w	r1, r1, #2
 100abe6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
 100abea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    m_flags.tx_started = false;
 100abee:	4a28      	ldr	r2, [pc, #160]	; (100ac90 <nrf_802154_trx_transmit_frame+0x124>)
    (void)mpsl_fem_pa_gain_set(p_fem_gain_data);
 100abf0:	1c70      	adds	r0, r6, #1
    m_flags.tx_started = false;
 100abf2:	7094      	strb	r4, [r2, #2]
    p_reg->INTENSET = mask;
 100abf4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    (void)mpsl_fem_pa_gain_set(p_fem_gain_data);
 100abf8:	f7f9 fdda 	bl	10047b0 <mpsl_fem_pa_gain_set>
    if (cca)
 100abfc:	b345      	cbz	r5, 100ac50 <nrf_802154_trx_transmit_frame+0xe4>
        if (mpsl_fem_lna_configuration_set(&m_activate_rx_cc0, &m_ccaidle) == 0)
 100abfe:	4925      	ldr	r1, [pc, #148]	; (100ac94 <nrf_802154_trx_transmit_frame+0x128>)
 100ac00:	4825      	ldr	r0, [pc, #148]	; (100ac98 <nrf_802154_trx_transmit_frame+0x12c>)
 100ac02:	f7f9 fdbd 	bl	1004780 <mpsl_fem_lna_configuration_set>
 100ac06:	4601      	mov	r1, r0
 100ac08:	b990      	cbnz	r0, 100ac30 <nrf_802154_trx_transmit_frame+0xc4>
        if (mpsl_fem_pa_configuration_set(&m_ccaidle, NULL) == 0)
 100ac0a:	4822      	ldr	r0, [pc, #136]	; (100ac94 <nrf_802154_trx_transmit_frame+0x128>)
 100ac0c:	f7f9 fdb2 	bl	1004774 <mpsl_fem_pa_configuration_set>
    p_reg->SHORTS |= mask;
 100ac10:	4a19      	ldr	r2, [pc, #100]	; (100ac78 <nrf_802154_trx_transmit_frame+0x10c>)
 100ac12:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 100ac16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 100ac1a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
        nrf_802154_trx_ppi_for_fem_set();
 100ac1e:	f000 fc99 	bl	100b554 <nrf_802154_trx_ppi_for_fem_set>
    nrf_802154_trx_antenna_update();
 100ac22:	e00b      	b.n	100ac3c <nrf_802154_trx_transmit_frame+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100ac24:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 100ac28:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
            ints_to_enable |= NRF_RADIO_INT_CCAIDLE_MASK;
 100ac2c:	491b      	ldr	r1, [pc, #108]	; (100ac9c <nrf_802154_trx_transmit_frame+0x130>)
 100ac2e:	e7c1      	b.n	100abb4 <nrf_802154_trx_transmit_frame+0x48>
        if (mpsl_fem_pa_configuration_set(&m_ccaidle, NULL) == 0)
 100ac30:	4621      	mov	r1, r4
 100ac32:	4818      	ldr	r0, [pc, #96]	; (100ac94 <nrf_802154_trx_transmit_frame+0x128>)
 100ac34:	f7f9 fd9e 	bl	1004774 <mpsl_fem_pa_configuration_set>
 100ac38:	2800      	cmp	r0, #0
 100ac3a:	d0e9      	beq.n	100ac10 <nrf_802154_trx_transmit_frame+0xa4>
    nrf_802154_trx_antenna_update();
 100ac3c:	f7ff fe0c 	bl	100a858 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(cca ? NRF_RADIO_TASK_RXEN : NRF_RADIO_TASK_TXEN, false);
 100ac40:	2004      	movs	r0, #4
 100ac42:	2100      	movs	r1, #0
 100ac44:	f000 fbfa 	bl	100b43c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 100ac48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    trigger_disable_to_start_rampup();
 100ac4c:	f7ff bbf0 	b.w	100a430 <trigger_disable_to_start_rampup>
        success = (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0, NULL) == 0);
 100ac50:	4629      	mov	r1, r5
 100ac52:	4813      	ldr	r0, [pc, #76]	; (100aca0 <nrf_802154_trx_transmit_frame+0x134>)
 100ac54:	f7f9 fd8e 	bl	1004774 <mpsl_fem_pa_configuration_set>
    if (success)
 100ac58:	b118      	cbz	r0, 100ac62 <nrf_802154_trx_transmit_frame+0xf6>
    nrf_802154_trx_antenna_update();
 100ac5a:	f7ff fdfd 	bl	100a858 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(cca ? NRF_RADIO_TASK_RXEN : NRF_RADIO_TASK_TXEN, false);
 100ac5e:	2000      	movs	r0, #0
 100ac60:	e7ef      	b.n	100ac42 <nrf_802154_trx_transmit_frame+0xd6>
 100ac62:	4a05      	ldr	r2, [pc, #20]	; (100ac78 <nrf_802154_trx_transmit_frame+0x10c>)
 100ac64:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 100ac68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 100ac6c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
        nrf_802154_trx_ppi_for_fem_set();
 100ac70:	f000 fc70 	bl	100b554 <nrf_802154_trx_ppi_for_fem_set>
 100ac74:	e7f1      	b.n	100ac5a <nrf_802154_trx_transmit_frame+0xee>
 100ac76:	bf00      	nop
 100ac78:	4100c000 	.word	0x4100c000
 100ac7c:	21004402 	.word	0x21004402
 100ac80:	41008000 	.word	0x41008000
 100ac84:	210043fc 	.word	0x210043fc
 100ac88:	00143800 	.word	0x00143800
 100ac8c:	08040000 	.word	0x08040000
 100ac90:	210043fd 	.word	0x210043fd
 100ac94:	01015984 	.word	0x01015984
 100ac98:	010159ac 	.word	0x010159ac
 100ac9c:	08060000 	.word	0x08060000
 100aca0:	01015998 	.word	0x01015998

0100aca4 <nrf_802154_trx_transmit_ack>:
    m_trx_state = TRX_STATE_TXACK;
 100aca4:	2207      	movs	r2, #7
 100aca6:	4b36      	ldr	r3, [pc, #216]	; (100ad80 <nrf_802154_trx_transmit_ack+0xdc>)
    if (delay_us <= TXRU_TIME + EVENT_LAT)
 100aca8:	293f      	cmp	r1, #63	; 0x3f
{
 100acaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100acae:	4d35      	ldr	r5, [pc, #212]	; (100ad84 <nrf_802154_trx_transmit_ack+0xe0>)
    m_trx_state = TRX_STATE_TXACK;
 100acb0:	701a      	strb	r2, [r3, #0]
    if (delay_us <= TXRU_TIME + EVENT_LAT)
 100acb2:	d804      	bhi.n	100acbe <nrf_802154_trx_transmit_ack+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100acb4:	2301      	movs	r3, #1
 100acb6:	612b      	str	r3, [r5, #16]
        return result;
 100acb8:	2000      	movs	r0, #0
}
 100acba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t timer_cc_ramp_up_start = m_timer_value_on_radio_end_event + delay_us - TXRU_TIME -
 100acbe:	4b32      	ldr	r3, [pc, #200]	; (100ad88 <nrf_802154_trx_transmit_ack+0xe4>)
 100acc0:	f04f 0800 	mov.w	r8, #0
 100acc4:	681e      	ldr	r6, [r3, #0]
    p_reg->SHORTS = shorts_mask;
 100acc6:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
    p_reg->PACKETPTR = (uint32_t)p_packet;
 100acca:	4c30      	ldr	r4, [pc, #192]	; (100ad8c <nrf_802154_trx_transmit_ack+0xe8>)
 100accc:	440e      	add	r6, r1
 100acce:	f1a6 073f 	sub.w	r7, r6, #63	; 0x3f
    p_reg->CC[cc_channel] = cc_value;
 100acd2:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
 100acd6:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    p_reg->SHORTS = shorts_mask;
 100acda:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100acde:	f8c4 8154 	str.w	r8, [r4, #340]	; 0x154
 100ace2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
    m_activate_tx_cc0_timeshifted = m_activate_tx_cc0;
 100ace6:	4b2a      	ldr	r3, [pc, #168]	; (100ad90 <nrf_802154_trx_transmit_ack+0xec>)
 100ace8:	2214      	movs	r2, #20
 100acea:	4618      	mov	r0, r3
 100acec:	4641      	mov	r1, r8
 100acee:	f007 fe90 	bl	1012a12 <memset>
 100acf2:	2205      	movs	r2, #5
    if (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0_timeshifted, NULL) == 0)
 100acf4:	4641      	mov	r1, r8
    m_activate_tx_cc0_timeshifted.event.timer.counter_period.end = timer_cc_ramp_up_start +
 100acf6:	3e17      	subs	r6, #23
    m_activate_tx_cc0_timeshifted = m_activate_tx_cc0;
 100acf8:	6045      	str	r5, [r0, #4]
 100acfa:	7402      	strb	r2, [r0, #16]
    m_activate_tx_cc0_timeshifted.event.timer.counter_period.end = timer_cc_ramp_up_start +
 100acfc:	60c6      	str	r6, [r0, #12]
    if (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0_timeshifted, NULL) == 0)
 100acfe:	f7f9 fd39 	bl	1004774 <mpsl_fem_pa_configuration_set>
    p_reg->SHORTS |= mask;
 100ad02:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 100ad06:	bb98      	cbnz	r0, 100ad70 <nrf_802154_trx_transmit_ack+0xcc>
 100ad08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 100ad0c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    nrf_802154_trx_antenna_update();
 100ad10:	f7ff fda2 	bl	100a858 <nrf_802154_trx_antenna_update>
 100ad14:	2300      	movs	r3, #0
 100ad16:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 100ad1a:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 100ad1e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 100ad22:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    nrf_802154_trx_ppi_for_ack_tx_set();
 100ad26:	f000 fbef 	bl	100b508 <nrf_802154_trx_ppi_for_ack_tx_set>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100ad2a:	2201      	movs	r2, #1
 100ad2c:	4b15      	ldr	r3, [pc, #84]	; (100ad84 <nrf_802154_trx_transmit_ack+0xe0>)
 100ad2e:	4c17      	ldr	r4, [pc, #92]	; (100ad8c <nrf_802154_trx_transmit_ack+0xe8>)
 100ad30:	64da      	str	r2, [r3, #76]	; 0x4c
    return (uint32_t)p_reg->CC[cc_channel];
 100ad32:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
 100ad36:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
    if ((timer_cc_now < timer_cc_ramp_up_start) &&
 100ad3a:	4297      	cmp	r7, r2
 100ad3c:	d903      	bls.n	100ad46 <nrf_802154_trx_transmit_ack+0xa2>
 100ad3e:	429f      	cmp	r7, r3
 100ad40:	d919      	bls.n	100ad76 <nrf_802154_trx_transmit_ack+0xd2>
        ((timer_cc_fem_start >= timer_cc_ramp_up_start) || (timer_cc_now > timer_cc_fem_start)))
 100ad42:	4293      	cmp	r3, r2
 100ad44:	d317      	bcc.n	100ad76 <nrf_802154_trx_transmit_ack+0xd2>
        nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
 100ad46:	f008 fbd5 	bl	10134f4 <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
    return (nrf_radio_state_t) p_reg->STATE;
 100ad4a:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
        if (nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_TXRU)
 100ad4e:	b2db      	uxtb	r3, r3
 100ad50:	2b09      	cmp	r3, #9
 100ad52:	d010      	beq.n	100ad76 <nrf_802154_trx_transmit_ack+0xd2>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100ad54:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
        else if (nrf_radio_event_check(NRF_RADIO, NRF_RADIO_EVENT_TXREADY))
 100ad58:	b96b      	cbnz	r3, 100ad76 <nrf_802154_trx_transmit_ack+0xd2>
        nrf_802154_trx_ppi_for_ack_tx_clear();
 100ad5a:	f000 fbe9 	bl	100b530 <nrf_802154_trx_ppi_for_ack_tx_clear>
        mpsl_fem_pa_configuration_clear();
 100ad5e:	f7f9 fd15 	bl	100478c <mpsl_fem_pa_configuration_clear>
        mpsl_fem_deactivate_now(MPSL_FEM_PA);
 100ad62:	2001      	movs	r0, #1
 100ad64:	f7f9 fd1e 	bl	10047a4 <mpsl_fem_deactivate_now>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100ad68:	2201      	movs	r2, #1
 100ad6a:	4b06      	ldr	r3, [pc, #24]	; (100ad84 <nrf_802154_trx_transmit_ack+0xe0>)
 100ad6c:	611a      	str	r2, [r3, #16]
}
 100ad6e:	e7a3      	b.n	100acb8 <nrf_802154_trx_transmit_ack+0x14>
    p_reg->SHORTS |= mask;
 100ad70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 100ad74:	e7ca      	b.n	100ad0c <nrf_802154_trx_transmit_ack+0x68>
    p_reg->INTENSET = mask;
 100ad76:	4b07      	ldr	r3, [pc, #28]	; (100ad94 <nrf_802154_trx_transmit_ack+0xf0>)
}
 100ad78:	2001      	movs	r0, #1
    p_reg->INTENSET = mask;
 100ad7a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
 100ad7e:	e79c      	b.n	100acba <nrf_802154_trx_transmit_ack+0x16>
 100ad80:	21004402 	.word	0x21004402
 100ad84:	4100c000 	.word	0x4100c000
 100ad88:	21003404 	.word	0x21003404
 100ad8c:	41008000 	.word	0x41008000
 100ad90:	21003408 	.word	0x21003408
 100ad94:	08000002 	.word	0x08000002

0100ad98 <nrf_802154_trx_abort>:
{
 100ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (m_trx_state)
 100ad9a:	4c53      	ldr	r4, [pc, #332]	; (100aee8 <nrf_802154_trx_abort+0x150>)
 100ad9c:	7823      	ldrb	r3, [r4, #0]
 100ad9e:	3b02      	subs	r3, #2
 100ada0:	2b09      	cmp	r3, #9
 100ada2:	d80c      	bhi.n	100adbe <nrf_802154_trx_abort+0x26>
 100ada4:	e8df f003 	tbb	[pc, r3]
 100ada8:	2e2a0c05 	.word	0x2e2a0c05
 100adac:	78755f4a 	.word	0x78755f4a
 100adb0:	9d89      	.short	0x9d89
    p_reg->INTENCLR = mask;
 100adb2:	2210      	movs	r2, #16
 100adb4:	4b4d      	ldr	r3, [pc, #308]	; (100aeec <nrf_802154_trx_abort+0x154>)
 100adb6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    m_trx_state = TRX_STATE_FINISHED;
 100adba:	230c      	movs	r3, #12
 100adbc:	7023      	strb	r3, [r4, #0]
}
 100adbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rxframe_finish_disable_ppis();
 100adc0:	f008 fb83 	bl	10134ca <rxframe_finish_disable_ppis>
 100adc4:	f243 4502 	movw	r5, #13314	; 0x3402
    mpsl_fem_lna_configuration_clear();
 100adc8:	f7f9 fce6 	bl	1004798 <mpsl_fem_lna_configuration_clear>
    m_flags.psdu_being_received = false;
 100adcc:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
 100adce:	2608      	movs	r6, #8
    p_reg->SHORTS &= ~(mask);
 100add0:	4b47      	ldr	r3, [pc, #284]	; (100aef0 <nrf_802154_trx_abort+0x158>)
 100add2:	4848      	ldr	r0, [pc, #288]	; (100aef4 <nrf_802154_trx_abort+0x15c>)
 100add4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 100add8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 100addc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 100ade0:	4a42      	ldr	r2, [pc, #264]	; (100aeec <nrf_802154_trx_abort+0x154>)
 100ade2:	7001      	strb	r1, [r0, #0]
 100ade4:	f8c2 5308 	str.w	r5, [r2, #776]	; 0x308
 100ade8:	4d43      	ldr	r5, [pc, #268]	; (100aef8 <nrf_802154_trx_abort+0x160>)
 100adea:	f8c5 6308 	str.w	r6, [r5, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
 100adee:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    m_flags.missing_receive_buffer = false;
 100adf2:	7041      	strb	r1, [r0, #1]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100adf4:	2101      	movs	r1, #1
 100adf6:	6111      	str	r1, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100adf8:	6119      	str	r1, [r3, #16]
    m_trx_state = TRX_STATE_FINISHED;
 100adfa:	e7de      	b.n	100adba <nrf_802154_trx_abort+0x22>
 100adfc:	2201      	movs	r2, #1
 100adfe:	4b3c      	ldr	r3, [pc, #240]	; (100aef0 <nrf_802154_trx_abort+0x158>)
 100ae00:	611a      	str	r2, [r3, #16]
    m_trx_state = TRX_STATE_FINISHED;
 100ae02:	e7da      	b.n	100adba <nrf_802154_trx_abort+0x22>
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
 100ae04:	2100      	movs	r1, #0
 100ae06:	2004      	movs	r0, #4
 100ae08:	f000 fb46 	bl	100b498 <nrf_802154_trx_ppi_for_ramp_up_clear>
    p_reg->INTENCLR = mask;
 100ae0c:	f243 0302 	movw	r3, #12290	; 0x3002
 100ae10:	4d36      	ldr	r5, [pc, #216]	; (100aeec <nrf_802154_trx_abort+0x154>)
 100ae12:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    mpsl_fem_lna_configuration_clear();
 100ae16:	f7f9 fcbf 	bl	1004798 <mpsl_fem_lna_configuration_clear>
    nrf_802154_trx_ppi_for_fem_clear();
 100ae1a:	f000 fba5 	bl	100b568 <nrf_802154_trx_ppi_for_fem_clear>
    p_reg->SHORTS &= ~(mask);
 100ae1e:	4b34      	ldr	r3, [pc, #208]	; (100aef0 <nrf_802154_trx_abort+0x158>)
    m_flags.missing_receive_buffer = false;
 100ae20:	4934      	ldr	r1, [pc, #208]	; (100aef4 <nrf_802154_trx_abort+0x15c>)
 100ae22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 100ae26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 100ae2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->SHORTS = shorts_mask;
 100ae2e:	2200      	movs	r2, #0
 100ae30:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
 100ae34:	704a      	strb	r2, [r1, #1]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100ae36:	2201      	movs	r2, #1
 100ae38:	612a      	str	r2, [r5, #16]
 100ae3a:	e7e1      	b.n	100ae00 <nrf_802154_trx_abort+0x68>
    p_reg->SHORTS = shorts_mask;
 100ae3c:	2600      	movs	r6, #0

static void transmit_frame_abort(void)
{
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    txframe_finish_disable_ppis(m_transmit_with_cca);
 100ae3e:	4f2f      	ldr	r7, [pc, #188]	; (100aefc <nrf_802154_trx_abort+0x164>)
 100ae40:	4d2a      	ldr	r5, [pc, #168]	; (100aeec <nrf_802154_trx_abort+0x154>)
 100ae42:	7838      	ldrb	r0, [r7, #0]
 100ae44:	f008 fb3b 	bl	10134be <txframe_finish_disable_ppis>
 100ae48:	f8c5 6200 	str.w	r6, [r5, #512]	; 0x200
    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);

    fem_for_tx_reset(m_transmit_with_cca);
 100ae4c:	7838      	ldrb	r0, [r7, #0]
 100ae4e:	f7ff faf9 	bl	100a444 <fem_for_tx_reset>
    p_reg->INTENCLR = mask;
 100ae52:	4b2b      	ldr	r3, [pc, #172]	; (100af00 <nrf_802154_trx_abort+0x168>)
 100ae54:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

    txframe_finish_disable_ints();
#if NRF_802154_TX_STARTED_NOTIFY_ENABLED
    m_flags.tx_started = false;
 100ae58:	4b26      	ldr	r3, [pc, #152]	; (100aef4 <nrf_802154_trx_abort+0x15c>)
 100ae5a:	709e      	strb	r6, [r3, #2]
#endif
    m_flags.missing_receive_buffer = false;
 100ae5c:	705e      	strb	r6, [r3, #1]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100ae5e:	2301      	movs	r3, #1
 100ae60:	632b      	str	r3, [r5, #48]	; 0x30
 100ae62:	612b      	str	r3, [r5, #16]

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_CCASTOP);
    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    m_trx_state = TRX_STATE_FINISHED;
 100ae64:	e7a9      	b.n	100adba <nrf_802154_trx_abort+0x22>

static void transmit_ack_abort(void)
{
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_802154_trx_ppi_for_ack_tx_clear();
 100ae66:	f000 fb63 	bl	100b530 <nrf_802154_trx_ppi_for_ack_tx_clear>
    p_reg->SHORTS = shorts_mask;
 100ae6a:	2300      	movs	r3, #0
 100ae6c:	4d1f      	ldr	r5, [pc, #124]	; (100aeec <nrf_802154_trx_abort+0x154>)
 100ae6e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200

    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);

    mpsl_fem_pa_configuration_clear();
 100ae72:	f7f9 fc8b 	bl	100478c <mpsl_fem_pa_configuration_clear>
 100ae76:	4b1e      	ldr	r3, [pc, #120]	; (100aef0 <nrf_802154_trx_abort+0x158>)
 100ae78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 100ae7c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 100ae80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100ae84:	2201      	movs	r2, #1
 100ae86:	611a      	str	r2, [r3, #16]
    p_reg->INTENCLR = mask;
 100ae88:	4b1e      	ldr	r3, [pc, #120]	; (100af04 <nrf_802154_trx_abort+0x16c>)
 100ae8a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100ae8e:	612a      	str	r2, [r5, #16]

    nrf_radio_int_disable(NRF_RADIO, NRF_RADIO_INT_PHYEND_MASK | NRF_RADIO_INT_ADDRESS_MASK);

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    m_trx_state = TRX_STATE_FINISHED;
 100ae90:	e793      	b.n	100adba <nrf_802154_trx_abort+0x22>
    standalone_cca_finish();
 100ae92:	f7ff faa1 	bl	100a3d8 <standalone_cca_finish>
    m_trx_state = TRX_STATE_FINISHED;
 100ae96:	e790      	b.n	100adba <nrf_802154_trx_abort+0x22>
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
 100ae98:	2100      	movs	r1, #0
 100ae9a:	2501      	movs	r5, #1
 100ae9c:	4608      	mov	r0, r1
 100ae9e:	f000 fafb 	bl	100b498 <nrf_802154_trx_ppi_for_ramp_up_clear>
    mpsl_fem_pa_configuration_clear();
 100aea2:	f7f9 fc73 	bl	100478c <mpsl_fem_pa_configuration_clear>
 100aea6:	4b12      	ldr	r3, [pc, #72]	; (100aef0 <nrf_802154_trx_abort+0x158>)
 100aea8:	611d      	str	r5, [r3, #16]
    nrf_802154_trx_ppi_for_fem_clear();
 100aeaa:	f000 fb5d 	bl	100b568 <nrf_802154_trx_ppi_for_fem_clear>
    mpsl_fem_deactivate_now(MPSL_FEM_PA);
 100aeae:	4628      	mov	r0, r5
 100aeb0:	f7f9 fc78 	bl	10047a4 <mpsl_fem_deactivate_now>
 100aeb4:	4b0d      	ldr	r3, [pc, #52]	; (100aeec <nrf_802154_trx_abort+0x154>)
 100aeb6:	611d      	str	r5, [r3, #16]
    m_trx_state = TRX_STATE_FINISHED;
 100aeb8:	e77f      	b.n	100adba <nrf_802154_trx_abort+0x22>
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
 100aeba:	2100      	movs	r1, #0
 100aebc:	4608      	mov	r0, r1
 100aebe:	f000 faeb 	bl	100b498 <nrf_802154_trx_ppi_for_ramp_up_clear>
    p_reg->SHORTS = shorts_mask;
 100aec2:	2300      	movs	r3, #0
 100aec4:	2501      	movs	r5, #1
 100aec6:	4e09      	ldr	r6, [pc, #36]	; (100aeec <nrf_802154_trx_abort+0x154>)
 100aec8:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    mpsl_fem_pa_configuration_clear();
 100aecc:	f7f9 fc5e 	bl	100478c <mpsl_fem_pa_configuration_clear>
 100aed0:	4b07      	ldr	r3, [pc, #28]	; (100aef0 <nrf_802154_trx_abort+0x158>)
 100aed2:	611d      	str	r5, [r3, #16]
    nrf_802154_trx_ppi_for_fem_clear();
 100aed4:	f000 fb48 	bl	100b568 <nrf_802154_trx_ppi_for_fem_clear>
    mpsl_fem_deactivate_now(MPSL_FEM_PA);
 100aed8:	4628      	mov	r0, r5
 100aeda:	f7f9 fc63 	bl	10047a4 <mpsl_fem_deactivate_now>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100aede:	6135      	str	r5, [r6, #16]
    m_trx_state = TRX_STATE_FINISHED;
 100aee0:	e76b      	b.n	100adba <nrf_802154_trx_abort+0x22>
    energy_detection_finish();
 100aee2:	f7ff fa8f 	bl	100a404 <energy_detection_finish>
 100aee6:	e768      	b.n	100adba <nrf_802154_trx_abort+0x22>
 100aee8:	21004402 	.word	0x21004402
 100aeec:	41008000 	.word	0x41008000
 100aef0:	4100c000 	.word	0x4100c000
 100aef4:	210043fd 	.word	0x210043fd
 100aef8:	41014000 	.word	0x41014000
 100aefc:	210043fc 	.word	0x210043fc
 100af00:	08060003 	.word	0x08060003
 100af04:	08000002 	.word	0x08000002

0100af08 <nrf_802154_trx_state_get>:
    return m_trx_state;
 100af08:	4b01      	ldr	r3, [pc, #4]	; (100af10 <nrf_802154_trx_state_get+0x8>)
 100af0a:	7818      	ldrb	r0, [r3, #0]
}
 100af0c:	4770      	bx	lr
 100af0e:	bf00      	nop
 100af10:	21004402 	.word	0x21004402

0100af14 <nrf_802154_trx_go_idle>:
    switch (m_trx_state)
 100af14:	4b0e      	ldr	r3, [pc, #56]	; (100af50 <nrf_802154_trx_go_idle+0x3c>)
 100af16:	7819      	ldrb	r1, [r3, #0]
 100af18:	2904      	cmp	r1, #4
 100af1a:	b2ca      	uxtb	r2, r1
 100af1c:	d005      	beq.n	100af2a <nrf_802154_trx_go_idle+0x16>
 100af1e:	2a0c      	cmp	r2, #12
 100af20:	d006      	beq.n	100af30 <nrf_802154_trx_go_idle+0x1c>
 100af22:	2a02      	cmp	r2, #2
 100af24:	d112      	bne.n	100af4c <nrf_802154_trx_go_idle+0x38>
{
 100af26:	2001      	movs	r0, #1
 100af28:	4770      	bx	lr
 100af2a:	2101      	movs	r1, #1
 100af2c:	4a09      	ldr	r2, [pc, #36]	; (100af54 <nrf_802154_trx_go_idle+0x40>)
 100af2e:	6111      	str	r1, [r2, #16]
    m_trx_state = TRX_STATE_GOING_IDLE;
 100af30:	2202      	movs	r2, #2
 100af32:	701a      	strb	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100af34:	2200      	movs	r2, #0
 100af36:	4b08      	ldr	r3, [pc, #32]	; (100af58 <nrf_802154_trx_go_idle+0x44>)
 100af38:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 100af3c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100af40:	2201      	movs	r2, #1
 100af42:	611a      	str	r2, [r3, #16]
    p_reg->INTENSET = mask;
 100af44:	2210      	movs	r2, #16
 100af46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
 100af4a:	e7ec      	b.n	100af26 <nrf_802154_trx_go_idle+0x12>
    bool result = false;
 100af4c:	2000      	movs	r0, #0
}
 100af4e:	4770      	bx	lr
 100af50:	21004402 	.word	0x21004402
 100af54:	4100c000 	.word	0x4100c000
 100af58:	41008000 	.word	0x41008000

0100af5c <nrf_802154_trx_standalone_cca>:
    m_trx_state = TRX_STATE_STANDALONE_CCA;
 100af5c:	2208      	movs	r2, #8
 100af5e:	4b10      	ldr	r3, [pc, #64]	; (100afa0 <nrf_802154_trx_standalone_cca+0x44>)
{
 100af60:	b510      	push	{r4, lr}
    m_trx_state = TRX_STATE_STANDALONE_CCA;
 100af62:	701a      	strb	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100af64:	2400      	movs	r4, #0
    p_reg->SHORTS = shorts_mask;
 100af66:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 100af6a:	4b0e      	ldr	r3, [pc, #56]	; (100afa4 <nrf_802154_trx_standalone_cca+0x48>)
 100af6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100af70:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 100af74:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 100af78:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
 100af7c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
    p_reg->INTENSET = mask;
 100af80:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 100af84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fem_for_lna_set();
 100af88:	f7ff fb04 	bl	100a594 <fem_for_lna_set>
    nrf_802154_trx_antenna_update();
 100af8c:	f7ff fc64 	bl	100a858 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, false);
 100af90:	4621      	mov	r1, r4
 100af92:	2004      	movs	r0, #4
 100af94:	f000 fa52 	bl	100b43c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 100af98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
 100af9c:	f7ff ba48 	b.w	100a430 <trigger_disable_to_start_rampup>
 100afa0:	21004402 	.word	0x21004402
 100afa4:	41008000 	.word	0x41008000

0100afa8 <nrf_802154_trx_continuous_carrier>:
    txpower_set(p_tx_power->radio_tx_power);
 100afa8:	4601      	mov	r1, r0
    m_trx_state = TRX_STATE_CONTINUOUS_CARRIER;
 100afaa:	2209      	movs	r2, #9
{
 100afac:	b508      	push	{r3, lr}
    m_trx_state = TRX_STATE_CONTINUOUS_CARRIER;
 100afae:	4b09      	ldr	r3, [pc, #36]	; (100afd4 <nrf_802154_trx_continuous_carrier+0x2c>)
    txpower_set(p_tx_power->radio_tx_power);
 100afb0:	f811 0b01 	ldrb.w	r0, [r1], #1
    m_trx_state = TRX_STATE_CONTINUOUS_CARRIER;
 100afb4:	701a      	strb	r2, [r3, #0]
    txpower_set(p_tx_power->radio_tx_power);
 100afb6:	f7ff f9e9 	bl	100a38c <txpower_set>
    fem_for_pa_set(&p_tx_power->fem);
 100afba:	4608      	mov	r0, r1
 100afbc:	f7ff faa2 	bl	100a504 <fem_for_pa_set>
    nrf_802154_trx_antenna_update();
 100afc0:	f7ff fc4a 	bl	100a858 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_TXEN, false);
 100afc4:	2100      	movs	r1, #0
 100afc6:	4608      	mov	r0, r1
 100afc8:	f000 fa38 	bl	100b43c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 100afcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    trigger_disable_to_start_rampup();
 100afd0:	f7ff ba2e 	b.w	100a430 <trigger_disable_to_start_rampup>
 100afd4:	21004402 	.word	0x21004402

0100afd8 <nrf_802154_trx_continuous_carrier_restart>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100afd8:	2201      	movs	r2, #1
 100afda:	4b01      	ldr	r3, [pc, #4]	; (100afe0 <nrf_802154_trx_continuous_carrier_restart+0x8>)
 100afdc:	611a      	str	r2, [r3, #16]
}
 100afde:	4770      	bx	lr
 100afe0:	41008000 	.word	0x41008000

0100afe4 <nrf_802154_trx_modulated_carrier>:
    m_trx_state = TRX_STATE_MODULATED_CARRIER;
 100afe4:	220a      	movs	r2, #10
{
 100afe6:	b510      	push	{r4, lr}
    m_trx_state = TRX_STATE_MODULATED_CARRIER;
 100afe8:	4b0d      	ldr	r3, [pc, #52]	; (100b020 <nrf_802154_trx_modulated_carrier+0x3c>)
{
 100afea:	4604      	mov	r4, r0
    txpower_set(p_tx_power->radio_tx_power);
 100afec:	f811 0b01 	ldrb.w	r0, [r1], #1
    m_trx_state = TRX_STATE_MODULATED_CARRIER;
 100aff0:	701a      	strb	r2, [r3, #0]
    txpower_set(p_tx_power->radio_tx_power);
 100aff2:	f7ff f9cb 	bl	100a38c <txpower_set>
    p_reg->SHORTS = shorts_mask;
 100aff6:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
    p_reg->PACKETPTR = (uint32_t)p_packet;
 100affa:	4b0a      	ldr	r3, [pc, #40]	; (100b024 <nrf_802154_trx_modulated_carrier+0x40>)
    fem_for_pa_set(&p_tx_power->fem);
 100affc:	4608      	mov	r0, r1
 100affe:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    p_reg->SHORTS = shorts_mask;
 100b002:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 100b006:	f7ff fa7d 	bl	100a504 <fem_for_pa_set>
    nrf_802154_trx_antenna_update();
 100b00a:	f7ff fc25 	bl	100a858 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_TXEN, false);
 100b00e:	2100      	movs	r1, #0
 100b010:	4608      	mov	r0, r1
 100b012:	f000 fa13 	bl	100b43c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 100b016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
 100b01a:	f7ff ba09 	b.w	100a430 <trigger_disable_to_start_rampup>
 100b01e:	bf00      	nop
 100b020:	21004402 	.word	0x21004402
 100b024:	41008000 	.word	0x41008000

0100b028 <nrf_802154_trx_modulated_carrier_restart>:
void nrf_802154_trx_modulated_carrier_restart(void)
 100b028:	2201      	movs	r2, #1
 100b02a:	4b01      	ldr	r3, [pc, #4]	; (100b030 <nrf_802154_trx_modulated_carrier_restart+0x8>)
 100b02c:	611a      	str	r2, [r3, #16]
 100b02e:	4770      	bx	lr
 100b030:	41008000 	.word	0x41008000

0100b034 <nrf_802154_trx_energy_detection>:
    m_trx_state = TRX_STATE_ENERGY_DETECTION;
 100b034:	220b      	movs	r2, #11
 100b036:	4b10      	ldr	r3, [pc, #64]	; (100b078 <nrf_802154_trx_energy_detection+0x44>)
{
 100b038:	b510      	push	{r4, lr}
    m_trx_state = TRX_STATE_ENERGY_DETECTION;
 100b03a:	701a      	strb	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b03c:	2400      	movs	r4, #0
    p_reg->SHORTS = shorts_mask;
 100b03e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    p_reg->EDCNT = (ed_loop_count & RADIO_EDCNT_EDCNT_Msk);
 100b042:	4b0e      	ldr	r3, [pc, #56]	; (100b07c <nrf_802154_trx_energy_detection+0x48>)
    ed_count--;
 100b044:	3801      	subs	r0, #1
 100b046:	f3c0 0014 	ubfx	r0, r0, #0, #21
 100b04a:	f8c3 0664 	str.w	r0, [r3, #1636]	; 0x664
    p_reg->SHORTS = shorts_mask;
 100b04e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b052:	f8c3 413c 	str.w	r4, [r3, #316]	; 0x13c
 100b056:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    p_reg->INTENSET = mask;
 100b05a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fem_for_lna_set();
 100b05e:	f7ff fa99 	bl	100a594 <fem_for_lna_set>
    nrf_802154_trx_antenna_update();
 100b062:	f7ff fbf9 	bl	100a858 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, false);
 100b066:	4621      	mov	r1, r4
 100b068:	2004      	movs	r0, #4
 100b06a:	f000 f9e7 	bl	100b43c <nrf_802154_trx_ppi_for_ramp_up_set>
}
 100b06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
 100b072:	f7ff b9dd 	b.w	100a430 <trigger_disable_to_start_rampup>
 100b076:	bf00      	nop
 100b078:	21004402 	.word	0x21004402
 100b07c:	41008000 	.word	0x41008000

0100b080 <nrf_802154_radio_irq_handler>:
}

#endif

void nrf_802154_radio_irq_handler(void)
{
 100b080:	b570      	push	{r4, r5, r6, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    // Prevent interrupting of this handler by requests from higher priority code.
    nrf_802154_critical_section_forcefully_enter();
 100b082:	f008 f8a5 	bl	10131d0 <nrf_802154_critical_section_forcefully_enter>
    return p_reg->INTENSET & mask;
 100b086:	4bb5      	ldr	r3, [pc, #724]	; (100b35c <nrf_802154_radio_irq_handler+0x2dc>)
 100b088:	4cb5      	ldr	r4, [pc, #724]	; (100b360 <nrf_802154_radio_irq_handler+0x2e0>)
 100b08a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304

#if defined(RADIO_INTENSET_SYNC_Msk)
    // Note: For NRF_RADIO_EVENT_SYNC we enable interrupt through EGU.
    // That's why we check here EGU's EGU_SYNC_INTMASK.
    // The RADIO does not have interrupt from SYNC event.
    if (nrf_egu_int_enable_check(NRF_802154_EGU_INSTANCE, EGU_SYNC_INTMASK) &&
 100b08e:	f012 0f08 	tst.w	r2, #8
 100b092:	d00d      	beq.n	100b0b0 <nrf_802154_radio_irq_handler+0x30>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b094:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 100b098:	b152      	cbz	r2, 100b0b0 <nrf_802154_radio_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b09a:	2200      	movs	r2, #0
 100b09c:	f8c4 2168 	str.w	r2, [r4, #360]	; 0x168
 100b0a0:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 100b0a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 100b0a8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    nrf_802154_trx_receive_frame_prestarted();
 100b0ac:	f7fe f8ee 	bl	100928c <nrf_802154_trx_receive_frame_prestarted>
    return p_reg->INTENSET & mask;
 100b0b0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304

        irq_handler_sync();
    }
#endif

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_READY_MASK) &&
 100b0b4:	07dd      	lsls	r5, r3, #31
 100b0b6:	d50c      	bpl.n	100b0d2 <nrf_802154_radio_irq_handler+0x52>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b0b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 100b0bc:	b14b      	cbz	r3, 100b0d2 <nrf_802154_radio_irq_handler+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b0be:	2300      	movs	r3, #0
 100b0c0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 100b0c4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    p_reg->INTENCLR = mask;
 100b0c8:	2301      	movs	r3, #1
 100b0ca:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    nrf_802154_trx_transmit_frame_ccastarted();
 100b0ce:	f008 f835 	bl	101313c <nrf_802154_trx_transmit_frame_ccastarted>
    return p_reg->INTENSET & mask;
 100b0d2:	4ba3      	ldr	r3, [pc, #652]	; (100b360 <nrf_802154_radio_irq_handler+0x2e0>)
 100b0d4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_READY);

        irq_handler_ready();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_ADDRESS_MASK) &&
 100b0d8:	0790      	lsls	r0, r2, #30
 100b0da:	d515      	bpl.n	100b108 <nrf_802154_radio_irq_handler+0x88>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b0dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 100b0e0:	b192      	cbz	r2, 100b108 <nrf_802154_radio_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b0e2:	2200      	movs	r2, #0
 100b0e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 100b0e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    switch (m_trx_state)
 100b0ec:	4a9d      	ldr	r2, [pc, #628]	; (100b364 <nrf_802154_radio_irq_handler+0x2e4>)
 100b0ee:	7812      	ldrb	r2, [r2, #0]
 100b0f0:	3a03      	subs	r2, #3
 100b0f2:	2a04      	cmp	r2, #4
 100b0f4:	d808      	bhi.n	100b108 <nrf_802154_radio_irq_handler+0x88>
 100b0f6:	e8df f012 	tbh	[pc, r2, lsl #1]
 100b0fa:	0005      	.short	0x0005
 100b0fc:	00d10007 	.word	0x00d10007
 100b100:	00e000d7 	.word	0x00e000d7
            nrf_802154_trx_receive_frame_started();
 100b104:	f7fe f902 	bl	100930c <nrf_802154_trx_receive_frame_started>
    return p_reg->INTENSET & mask;
 100b108:	4c95      	ldr	r4, [pc, #596]	; (100b360 <nrf_802154_radio_irq_handler+0x2e0>)
 100b10a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
        irq_handler_address();
    }

#if !NRF_802154_DISABLE_BCC_MATCHING
    // Check MAC frame header.
    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_BCMATCH_MASK) &&
 100b10e:	0559      	lsls	r1, r3, #21
 100b110:	d519      	bpl.n	100b146 <nrf_802154_radio_irq_handler+0xc6>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b112:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 100b116:	b1b3      	cbz	r3, 100b146 <nrf_802154_radio_irq_handler+0xc6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b118:	2300      	movs	r3, #0
    m_flags.psdu_being_received = true;
 100b11a:	2201      	movs	r2, #1
 100b11c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 100b120:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 100b124:	4b90      	ldr	r3, [pc, #576]	; (100b368 <nrf_802154_radio_irq_handler+0x2e8>)
 100b126:	701a      	strb	r2, [r3, #0]
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b128:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    if (nrf_radio_event_check(NRF_RADIO, NRF_RADIO_EVENT_CRCERROR))
 100b12c:	b95b      	cbnz	r3, 100b146 <nrf_802154_radio_irq_handler+0xc6>
    return p_reg->BCC;
 100b12e:	f8d4 5560 	ldr.w	r5, [r4, #1376]	; 0x560
    current_bcc = nrf_radio_bcc_get(NRF_RADIO) / 8U;
 100b132:	f3c5 05c7 	ubfx	r5, r5, #3, #8
    next_bcc = nrf_802154_trx_receive_frame_bcmatched(current_bcc);
 100b136:	4628      	mov	r0, r5
 100b138:	f7fe f918 	bl	100936c <nrf_802154_trx_receive_frame_bcmatched>
    if (next_bcc > current_bcc)
 100b13c:	4285      	cmp	r5, r0
        nrf_radio_bcc_set(NRF_RADIO, next_bcc * 8);
 100b13e:	bf3c      	itt	cc
 100b140:	00c0      	lslcc	r0, r0, #3
    p_reg->BCC = radio_bcc;
 100b142:	f8c4 0560 	strcc.w	r0, [r4, #1376]	; 0x560
    return p_reg->INTENSET & mask;
 100b146:	4b86      	ldr	r3, [pc, #536]	; (100b360 <nrf_802154_radio_irq_handler+0x2e0>)
 100b148:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    }

#endif // !NRF_802154_DISABLE_BCC_MATCHING

#if !NRF_802154_DISABLE_BCC_MATCHING || NRF_802154_NOTIFY_CRCERROR
    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CRCERROR_MASK) &&
 100b14c:	0492      	lsls	r2, r2, #18
 100b14e:	d510      	bpl.n	100b172 <nrf_802154_radio_irq_handler+0xf2>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b150:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 100b154:	b16a      	cbz	r2, 100b172 <nrf_802154_radio_irq_handler+0xf2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b156:	2200      	movs	r2, #0
    switch (m_trx_state)
 100b158:	4c82      	ldr	r4, [pc, #520]	; (100b364 <nrf_802154_radio_irq_handler+0x2e4>)
 100b15a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 100b15e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 100b162:	7823      	ldrb	r3, [r4, #0]
 100b164:	2b03      	cmp	r3, #3
 100b166:	b2da      	uxtb	r2, r3
 100b168:	f000 80ad 	beq.w	100b2c6 <nrf_802154_radio_irq_handler+0x246>
 100b16c:	2a05      	cmp	r2, #5
 100b16e:	f000 80b4 	beq.w	100b2da <nrf_802154_radio_irq_handler+0x25a>
    return p_reg->INTENSET & mask;
 100b172:	4b7b      	ldr	r3, [pc, #492]	; (100b360 <nrf_802154_radio_irq_handler+0x2e0>)
 100b174:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304

        irq_handler_crcerror();
    }
#endif // !NRF_802154_DISABLE_BCC_MATCHING || NRF_802154_NOTIFY_CRCERROR

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CRCOK_MASK) &&
 100b178:	04d6      	lsls	r6, r2, #19
 100b17a:	d510      	bpl.n	100b19e <nrf_802154_radio_irq_handler+0x11e>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b17c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 100b180:	b16a      	cbz	r2, 100b19e <nrf_802154_radio_irq_handler+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b182:	2200      	movs	r2, #0
    switch (m_trx_state)
 100b184:	4c77      	ldr	r4, [pc, #476]	; (100b364 <nrf_802154_radio_irq_handler+0x2e4>)
 100b186:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 100b18a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 100b18e:	7823      	ldrb	r3, [r4, #0]
 100b190:	2b03      	cmp	r3, #3
 100b192:	b2da      	uxtb	r2, r3
 100b194:	f000 80a8 	beq.w	100b2e8 <nrf_802154_radio_irq_handler+0x268>
 100b198:	2a05      	cmp	r2, #5
 100b19a:	f000 80af 	beq.w	100b2fc <nrf_802154_radio_irq_handler+0x27c>
    return p_reg->INTENSET & mask;
 100b19e:	4c70      	ldr	r4, [pc, #448]	; (100b360 <nrf_802154_radio_irq_handler+0x2e0>)
 100b1a0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_CRCOK);

        irq_handler_crcok();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_PHYEND_MASK) &&
 100b1a4:	011d      	lsls	r5, r3, #4
 100b1a6:	d510      	bpl.n	100b1ca <nrf_802154_radio_irq_handler+0x14a>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b1a8:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 100b1ac:	b16b      	cbz	r3, 100b1ca <nrf_802154_radio_irq_handler+0x14a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b1ae:	2600      	movs	r6, #0
    switch (m_trx_state)
 100b1b0:	4d6c      	ldr	r5, [pc, #432]	; (100b364 <nrf_802154_radio_irq_handler+0x2e4>)
 100b1b2:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
 100b1b6:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 100b1ba:	782b      	ldrb	r3, [r5, #0]
 100b1bc:	2b06      	cmp	r3, #6
 100b1be:	b2da      	uxtb	r2, r3
 100b1c0:	f000 80a3 	beq.w	100b30a <nrf_802154_radio_irq_handler+0x28a>
 100b1c4:	2a07      	cmp	r2, #7
 100b1c6:	f000 80a7 	beq.w	100b318 <nrf_802154_radio_irq_handler+0x298>
    return p_reg->INTENSET & mask;
 100b1ca:	4b65      	ldr	r3, [pc, #404]	; (100b360 <nrf_802154_radio_irq_handler+0x2e0>)
 100b1cc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_PHYEND);

        irq_handler_phyend();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_DISABLED_MASK) &&
 100b1d0:	06d4      	lsls	r4, r2, #27
 100b1d2:	d517      	bpl.n	100b204 <nrf_802154_radio_irq_handler+0x184>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b1d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 100b1d8:	b1a2      	cbz	r2, 100b204 <nrf_802154_radio_irq_handler+0x184>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b1da:	2200      	movs	r2, #0
    switch (m_trx_state)
 100b1dc:	4c61      	ldr	r4, [pc, #388]	; (100b364 <nrf_802154_radio_irq_handler+0x2e4>)
 100b1de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 100b1e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 100b1e6:	7822      	ldrb	r2, [r4, #0]
 100b1e8:	2a02      	cmp	r2, #2
 100b1ea:	d10b      	bne.n	100b204 <nrf_802154_radio_irq_handler+0x184>
    p_reg->INTENCLR = mask;
 100b1ec:	2210      	movs	r2, #16
    mpsl_fem_deactivate_now(MPSL_FEM_ALL);
 100b1ee:	2003      	movs	r0, #3
 100b1f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 100b1f4:	f7f9 fad6 	bl	10047a4 <mpsl_fem_deactivate_now>
    mpsl_fem_disable();
 100b1f8:	f7f9 fab6 	bl	1004768 <mpsl_fem_disable>
    m_trx_state = TRX_STATE_IDLE;
 100b1fc:	2301      	movs	r3, #1
 100b1fe:	7023      	strb	r3, [r4, #0]
    nrf_802154_trx_go_idle_finished();
 100b200:	f007 ff84 	bl	101310c <nrf_802154_trx_go_idle_finished>
    return p_reg->INTENSET & mask;
 100b204:	4b56      	ldr	r3, [pc, #344]	; (100b360 <nrf_802154_radio_irq_handler+0x2e0>)
 100b206:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_DISABLED);

        irq_handler_disabled();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CCAIDLE_MASK) &&
 100b20a:	0390      	lsls	r0, r2, #14
 100b20c:	d516      	bpl.n	100b23c <nrf_802154_radio_irq_handler+0x1bc>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b20e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 100b212:	b19a      	cbz	r2, 100b23c <nrf_802154_radio_irq_handler+0x1bc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b214:	2200      	movs	r2, #0
    switch (m_trx_state)
 100b216:	4c53      	ldr	r4, [pc, #332]	; (100b364 <nrf_802154_radio_irq_handler+0x2e4>)
 100b218:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 100b21c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 100b220:	7823      	ldrb	r3, [r4, #0]
 100b222:	2b06      	cmp	r3, #6
 100b224:	b2da      	uxtb	r2, r3
 100b226:	f000 808e 	beq.w	100b346 <nrf_802154_radio_irq_handler+0x2c6>
 100b22a:	2a08      	cmp	r2, #8
 100b22c:	d106      	bne.n	100b23c <nrf_802154_radio_irq_handler+0x1bc>
            standalone_cca_finish();
 100b22e:	f7ff f8d3 	bl	100a3d8 <standalone_cca_finish>
            m_trx_state = TRX_STATE_FINISHED;
 100b232:	230c      	movs	r3, #12
            nrf_802154_trx_standalone_cca_finished(true);
 100b234:	2001      	movs	r0, #1
            m_trx_state = TRX_STATE_FINISHED;
 100b236:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_standalone_cca_finished(true);
 100b238:	f007 ff70 	bl	101311c <nrf_802154_trx_standalone_cca_finished>
    return p_reg->INTENSET & mask;
 100b23c:	4b48      	ldr	r3, [pc, #288]	; (100b360 <nrf_802154_radio_irq_handler+0x2e0>)
 100b23e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_CCAIDLE);

        irq_handler_ccaidle();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CCABUSY_MASK) &&
 100b242:	0351      	lsls	r1, r2, #13
 100b244:	d50f      	bpl.n	100b266 <nrf_802154_radio_irq_handler+0x1e6>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b246:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 100b24a:	b162      	cbz	r2, 100b266 <nrf_802154_radio_irq_handler+0x1e6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b24c:	2500      	movs	r5, #0
    switch (m_trx_state)
 100b24e:	4c45      	ldr	r4, [pc, #276]	; (100b364 <nrf_802154_radio_irq_handler+0x2e4>)
 100b250:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
 100b254:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 100b258:	7823      	ldrb	r3, [r4, #0]
 100b25a:	2b06      	cmp	r3, #6
 100b25c:	b2da      	uxtb	r2, r3
 100b25e:	d075      	beq.n	100b34c <nrf_802154_radio_irq_handler+0x2cc>
 100b260:	2a08      	cmp	r2, #8
 100b262:	f000 8087 	beq.w	100b374 <nrf_802154_radio_irq_handler+0x2f4>
    return p_reg->INTENSET & mask;
 100b266:	4b3e      	ldr	r3, [pc, #248]	; (100b360 <nrf_802154_radio_irq_handler+0x2e0>)
 100b268:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_CCABUSY);

        irq_handler_ccabusy();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_EDEND_MASK) &&
 100b26c:	0412      	lsls	r2, r2, #16
 100b26e:	d511      	bpl.n	100b294 <nrf_802154_radio_irq_handler+0x214>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
 100b270:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 100b274:	b172      	cbz	r2, 100b294 <nrf_802154_radio_irq_handler+0x214>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100b276:	2200      	movs	r2, #0
 100b278:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 100b27c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    return (uint8_t) p_reg->EDSAMPLE;
 100b280:	f8d3 4668 	ldr.w	r4, [r3, #1640]	; 0x668
    energy_detection_finish();
 100b284:	f7ff f8be 	bl	100a404 <energy_detection_finish>
    m_trx_state = TRX_STATE_FINISHED;
 100b288:	220c      	movs	r2, #12
 100b28a:	4b36      	ldr	r3, [pc, #216]	; (100b364 <nrf_802154_radio_irq_handler+0x2e4>)
    nrf_802154_trx_energy_detection_finished(ed_sample);
 100b28c:	b2e0      	uxtb	r0, r4
    m_trx_state = TRX_STATE_FINISHED;
 100b28e:	701a      	strb	r2, [r3, #0]
    nrf_802154_trx_energy_detection_finished(ed_sample);
 100b290:	f7fe fbee 	bl	1009a70 <nrf_802154_trx_energy_detection_finished>
    }

    nrf_802154_critical_section_exit();

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
 100b294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    nrf_802154_critical_section_exit();
 100b298:	f7fe be84 	b.w	1009fa4 <nrf_802154_critical_section_exit>
            m_flags.rssi_started = true;
 100b29c:	2201      	movs	r2, #1
 100b29e:	4b32      	ldr	r3, [pc, #200]	; (100b368 <nrf_802154_radio_irq_handler+0x2e8>)
 100b2a0:	70da      	strb	r2, [r3, #3]
            nrf_802154_trx_receive_ack_started();
 100b2a2:	f007 ff31 	bl	1013108 <nrf_802154_trx_receive_ack_started>
            break;
 100b2a6:	e72f      	b.n	100b108 <nrf_802154_radio_irq_handler+0x88>
    p_reg->INTENCLR = mask;
 100b2a8:	2202      	movs	r2, #2
 100b2aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_flags.tx_started = true;
 100b2ae:	2201      	movs	r2, #1
 100b2b0:	4b2d      	ldr	r3, [pc, #180]	; (100b368 <nrf_802154_radio_irq_handler+0x2e8>)
 100b2b2:	709a      	strb	r2, [r3, #2]
            nrf_802154_trx_transmit_frame_started();
 100b2b4:	f7fe fa28 	bl	1009708 <nrf_802154_trx_transmit_frame_started>
            break;
 100b2b8:	e726      	b.n	100b108 <nrf_802154_radio_irq_handler+0x88>
 100b2ba:	2202      	movs	r2, #2
 100b2bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            nrf_802154_trx_transmit_ack_started();
 100b2c0:	f7fe fa32 	bl	1009728 <nrf_802154_trx_transmit_ack_started>
            break;
 100b2c4:	e720      	b.n	100b108 <nrf_802154_radio_irq_handler+0x88>
            rxframe_finish();
 100b2c6:	f7ff f8ef 	bl	100a4a8 <rxframe_finish>
 100b2ca:	2201      	movs	r2, #1
 100b2cc:	4b27      	ldr	r3, [pc, #156]	; (100b36c <nrf_802154_radio_irq_handler+0x2ec>)
 100b2ce:	611a      	str	r2, [r3, #16]
            m_trx_state = TRX_STATE_FINISHED;
 100b2d0:	230c      	movs	r3, #12
 100b2d2:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_frame_crcerror();
 100b2d4:	f7fe f900 	bl	10094d8 <nrf_802154_trx_receive_frame_crcerror>
            break;
 100b2d8:	e74b      	b.n	100b172 <nrf_802154_radio_irq_handler+0xf2>
            rxack_finish();
 100b2da:	f7ff f971 	bl	100a5c0 <rxack_finish>
            m_trx_state = TRX_STATE_FINISHED;
 100b2de:	230c      	movs	r3, #12
 100b2e0:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_ack_crcerror();
 100b2e2:	f7fe f935 	bl	1009550 <nrf_802154_trx_receive_ack_crcerror>
            break;
 100b2e6:	e744      	b.n	100b172 <nrf_802154_radio_irq_handler+0xf2>
            m_flags.rssi_started = true;
 100b2e8:	2201      	movs	r2, #1
 100b2ea:	4b1f      	ldr	r3, [pc, #124]	; (100b368 <nrf_802154_radio_irq_handler+0x2e8>)
 100b2ec:	70da      	strb	r2, [r3, #3]
            rxframe_finish();
 100b2ee:	f7ff f8db 	bl	100a4a8 <rxframe_finish>
            m_trx_state = TRX_STATE_RXFRAME_FINISHED;
 100b2f2:	2304      	movs	r3, #4
 100b2f4:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_frame_received();
 100b2f6:	f7fe f93f 	bl	1009578 <nrf_802154_trx_receive_frame_received>
            break;
 100b2fa:	e750      	b.n	100b19e <nrf_802154_radio_irq_handler+0x11e>
            rxack_finish();
 100b2fc:	f7ff f960 	bl	100a5c0 <rxack_finish>
            m_trx_state = TRX_STATE_FINISHED;
 100b300:	230c      	movs	r3, #12
 100b302:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_ack_received();
 100b304:	f7fe fad2 	bl	10098ac <nrf_802154_trx_receive_ack_received>
            break;
 100b308:	e749      	b.n	100b19e <nrf_802154_radio_irq_handler+0x11e>
            txframe_finish();
 100b30a:	f7ff f8b1 	bl	100a470 <txframe_finish>
            m_trx_state = TRX_STATE_FINISHED;
 100b30e:	230c      	movs	r3, #12
 100b310:	702b      	strb	r3, [r5, #0]
            nrf_802154_trx_transmit_frame_transmitted();
 100b312:	f7fe fa3d 	bl	1009790 <nrf_802154_trx_transmit_frame_transmitted>
            break;
 100b316:	e758      	b.n	100b1ca <nrf_802154_radio_irq_handler+0x14a>
    nrf_802154_trx_ppi_for_ack_tx_clear();
 100b318:	f000 f90a 	bl	100b530 <nrf_802154_trx_ppi_for_ack_tx_clear>
    p_reg->SHORTS = shorts_mask;
 100b31c:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
    mpsl_fem_pa_configuration_clear();
 100b320:	f7f9 fa34 	bl	100478c <mpsl_fem_pa_configuration_clear>
    p_reg->SHORTS &= ~(mask);
 100b324:	4b11      	ldr	r3, [pc, #68]	; (100b36c <nrf_802154_radio_irq_handler+0x2ec>)
 100b326:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 100b32a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 100b32e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100b332:	2201      	movs	r2, #1
 100b334:	611a      	str	r2, [r3, #16]
    p_reg->INTENCLR = mask;
 100b336:	4b0e      	ldr	r3, [pc, #56]	; (100b370 <nrf_802154_radio_irq_handler+0x2f0>)
 100b338:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            m_trx_state = TRX_STATE_FINISHED;
 100b33c:	230c      	movs	r3, #12
 100b33e:	702b      	strb	r3, [r5, #0]
            nrf_802154_trx_transmit_ack_transmitted();
 100b340:	f7fe f9fe 	bl	1009740 <nrf_802154_trx_transmit_ack_transmitted>
            break;
 100b344:	e741      	b.n	100b1ca <nrf_802154_radio_irq_handler+0x14a>
            nrf_802154_trx_transmit_frame_ccaidle();
 100b346:	f7fe fb3b 	bl	10099c0 <nrf_802154_trx_transmit_frame_ccaidle>
            break;
 100b34a:	e777      	b.n	100b23c <nrf_802154_radio_irq_handler+0x1bc>
            txframe_finish();
 100b34c:	f7ff f890 	bl	100a470 <txframe_finish>
            m_trx_state = TRX_STATE_FINISHED;
 100b350:	230c      	movs	r3, #12
 100b352:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_transmit_frame_ccabusy();
 100b354:	f7fe fb58 	bl	1009a08 <nrf_802154_trx_transmit_frame_ccabusy>
            break;
 100b358:	e785      	b.n	100b266 <nrf_802154_radio_irq_handler+0x1e6>
 100b35a:	bf00      	nop
 100b35c:	41014000 	.word	0x41014000
 100b360:	41008000 	.word	0x41008000
 100b364:	21004402 	.word	0x21004402
 100b368:	210043fd 	.word	0x210043fd
 100b36c:	4100c000 	.word	0x4100c000
 100b370:	08000002 	.word	0x08000002
            standalone_cca_finish();
 100b374:	f7ff f830 	bl	100a3d8 <standalone_cca_finish>
            m_trx_state = TRX_STATE_FINISHED;
 100b378:	230c      	movs	r3, #12
            nrf_802154_trx_standalone_cca_finished(false);
 100b37a:	4628      	mov	r0, r5
            m_trx_state = TRX_STATE_FINISHED;
 100b37c:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_standalone_cca_finished(false);
 100b37e:	f007 fecd 	bl	101311c <nrf_802154_trx_standalone_cca_finished>
            break;
 100b382:	e770      	b.n	100b266 <nrf_802154_radio_irq_handler+0x1e6>

0100b384 <nrf_802154_trx_swi_irq_handler>:

#endif // NRF_802154_INTERNAL_RADIO_IRQ_HANDLING

#if defined(RADIO_INTENSET_SYNC_Msk)
void nrf_802154_trx_swi_irq_handler(void)
{
 100b384:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100b386:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 100b38a:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
 100b38c:	4b09      	ldr	r3, [pc, #36]	; (100b3b4 <nrf_802154_trx_swi_irq_handler+0x30>)
 100b38e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    // To prevent that from happening, the handler is executed with disabled interrupts.
    nrf_802154_mcu_critical_state_t mcu_crit_state;

    nrf_802154_mcu_critical_enter(mcu_crit_state);

    if (nrf_egu_int_enable_check(NRF_802154_EGU_INSTANCE, EGU_SYNC_INTMASK) &&
 100b392:	0712      	lsls	r2, r2, #28
 100b394:	d50a      	bpl.n	100b3ac <nrf_802154_trx_swi_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
 100b396:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 100b39a:	b13a      	cbz	r2, 100b3ac <nrf_802154_trx_swi_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 100b39c:	2200      	movs	r2, #0
        // process sync event.
        // If we are in critical section, the RADIO_IRQ is disabled on NVIC.
        // Following will make it pending, and processing of RADIO_IRQ will start
        // when critical section is left.

        nrf_802154_irq_set_pending(RADIO_IRQn);
 100b39e:	2008      	movs	r0, #8
 100b3a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 100b3a4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 100b3a8:	f7fc fe8e 	bl	10080c8 <nrf_802154_irq_set_pending>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100b3ac:	f384 8810 	msr	PRIMASK, r4
    }

    nrf_802154_mcu_critical_exit(mcu_crit_state);
}
 100b3b0:	bd10      	pop	{r4, pc}
 100b3b2:	bf00      	nop
 100b3b4:	41014000 	.word	0x41014000

0100b3b8 <nrf_802154_trx_radio_end_event_handle_get>:
        .event_addr = (uint32_t)&NRF_RADIO->EVENTS_END
#endif
    };

    return &r;
}
 100b3b8:	4800      	ldr	r0, [pc, #0]	; (100b3bc <nrf_802154_trx_radio_end_event_handle_get+0x4>)
 100b3ba:	4770      	bx	lr
 100b3bc:	0101597c 	.word	0x0101597c

0100b3c0 <nrf_802154_trx_radio_ready_event_handle_get>:
        .event_addr = (uint32_t)&NRF_RADIO->EVENTS_READY
#endif
    };

    return &r;
}
 100b3c0:	4800      	ldr	r0, [pc, #0]	; (100b3c4 <nrf_802154_trx_radio_ready_event_handle_get+0x4>)
 100b3c2:	4770      	bx	lr
 100b3c4:	01015974 	.word	0x01015974

0100b3c8 <nrf_802154_trx_radio_phyend_event_handle_get>:
        .event_addr = (uint32_t)&NRF_RADIO->EVENTS_PHYEND
#endif
    };

    return &r;
}
 100b3c8:	4800      	ldr	r0, [pc, #0]	; (100b3cc <nrf_802154_trx_radio_phyend_event_handle_get+0x4>)
 100b3ca:	4770      	bx	lr
 100b3cc:	0101596c 	.word	0x0101596c

0100b3d0 <nrf_802154_trx_ppi_for_enable>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
 100b3d0:	4b0c      	ldr	r3, [pc, #48]	; (100b404 <nrf_802154_trx_ppi_for_enable+0x34>)
 100b3d2:	4a0d      	ldr	r2, [pc, #52]	; (100b408 <nrf_802154_trx_ppi_for_enable+0x38>)
 100b3d4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 100b3d8:	3a03      	subs	r2, #3
 100b3da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 100b3de:	3201      	adds	r2, #1
 100b3e0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 100b3e4:	3201      	adds	r2, #1
 100b3e6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 100b3ea:	3206      	adds	r2, #6
 100b3ec:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 100b3f0:	3a03      	subs	r2, #3
 100b3f2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
 100b3f6:	f241 22f0 	movw	r2, #4848	; 0x12f0
 100b3fa:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 100b3fe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                             (1UL << NRF_802154_DPPI_RADIO_READY) |
                             (1UL << NRF_802154_DPPI_RADIO_ADDRESS) |
                             (1UL << NRF_802154_DPPI_RADIO_END) |
                             (1UL << NRF_802154_DPPI_RADIO_PHYEND) |
                             (1UL << NRF_802154_DPPI_RADIO_CCAIDLE));
}
 100b402:	4770      	bx	lr
 100b404:	41008000 	.word	0x41008000
 100b408:	80000007 	.word	0x80000007

0100b40c <nrf_802154_trx_ppi_for_disable>:
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
 100b40c:	f241 22f0 	movw	r2, #4848	; 0x12f0
 100b410:	4b09      	ldr	r3, [pc, #36]	; (100b438 <nrf_802154_trx_ppi_for_disable+0x2c>)
 100b412:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
 100b416:	2200      	movs	r2, #0
 100b418:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
 100b41c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 100b420:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 100b424:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 100b428:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 100b42c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 100b430:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_PHYEND);
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_END);
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_ADDRESS);
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_READY);
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_DISABLED);
}
 100b434:	4770      	bx	lr
 100b436:	bf00      	nop
 100b438:	4100f000 	.word	0x4100f000

0100b43c <nrf_802154_trx_ppi_for_ramp_up_set>:
 100b43c:	2300      	movs	r3, #0

void nrf_802154_trx_ppi_for_ramp_up_set(nrf_radio_task_t ramp_up_task, bool start_timer)
{
 100b43e:	b530      	push	{r4, r5, lr}
 100b440:	4a0f      	ldr	r2, [pc, #60]	; (100b480 <nrf_802154_trx_ppi_for_ramp_up_set+0x44>)
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 100b442:	4d10      	ldr	r5, [pc, #64]	; (100b484 <nrf_802154_trx_ppi_for_ramp_up_set+0x48>)
 100b444:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 100b448:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
NRF_STATIC_INLINE void nrf_dppi_channels_include_in_group(NRF_DPPIC_Type *         p_reg,
                                                          uint32_t                 channel_mask,
                                                          nrf_dppi_channel_group_t channel_group)
{
    p_reg->CHG[(uint32_t) channel_group] =
        p_reg->CHG[(uint32_t) channel_group] | (channel_mask);
 100b44c:	4b0e      	ldr	r3, [pc, #56]	; (100b488 <nrf_802154_trx_ppi_for_ramp_up_set+0x4c>)
 100b44e:	f8d3 4800 	ldr.w	r4, [r3, #2048]	; 0x800
 100b452:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    p_reg->CHG[(uint32_t) channel_group] =
 100b456:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800

NRF_STATIC_INLINE void nrf_egu_publish_set(NRF_EGU_Type *  p_reg,
                                           nrf_egu_event_t event,
                                           uint8_t         channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
 100b45a:	4c0c      	ldr	r4, [pc, #48]	; (100b48c <nrf_802154_trx_ppi_for_ramp_up_set+0x50>)
 100b45c:	f8c2 41bc 	str.w	r4, [r2, #444]	; 0x1bc
 100b460:	502c      	str	r4, [r5, r0]
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 100b462:	480b      	ldr	r0, [pc, #44]	; (100b490 <nrf_802154_trx_ppi_for_ramp_up_set+0x54>)
 100b464:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
    nrf_dppi_channels_include_in_group(NRF_DPPIC, 1UL << PPI_EGU_RAMP_UP, DPPI_CHGRP_RAMP_UP);
    nrf_egu_publish_set(NRF_802154_EGU_INSTANCE, EGU_EVENT, PPI_EGU_RAMP_UP);
    nrf_radio_subscribe_set(NRF_RADIO, ramp_up_task, PPI_EGU_RAMP_UP);
    nrf_dppi_subscribe_set(NRF_DPPIC, DPPI_CHGRP_RAMP_UP_DIS_TASK, PPI_EGU_RAMP_UP);

    if (start_timer)
 100b468:	b111      	cbz	r1, 100b470 <nrf_802154_trx_ppi_for_ramp_up_set+0x34>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 100b46a:	490a      	ldr	r1, [pc, #40]	; (100b494 <nrf_802154_trx_ppi_for_ramp_up_set+0x58>)
 100b46c:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 100b470:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
    p_reg->CHENSET = mask;
 100b474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 100b478:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

    nrf_dppi_channels_enable(NRF_DPPIC,
                             (1UL << PPI_EGU_RAMP_UP));

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100b47c:	bd30      	pop	{r4, r5, pc}
 100b47e:	bf00      	nop
 100b480:	41014000 	.word	0x41014000
 100b484:	41008080 	.word	0x41008080
 100b488:	4100f000 	.word	0x4100f000
 100b48c:	8000000a 	.word	0x8000000a
 100b490:	80000007 	.word	0x80000007
 100b494:	4100c000 	.word	0x4100c000

0100b498 <nrf_802154_trx_ppi_for_ramp_up_clear>:
    p_reg->CHENCLR = mask;
 100b498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 100b49c:	4a0c      	ldr	r2, [pc, #48]	; (100b4d0 <nrf_802154_trx_ppi_for_ramp_up_clear+0x38>)

void nrf_802154_trx_ppi_for_ramp_up_clear(nrf_radio_task_t ramp_up_task, bool start_timer)
{
 100b49e:	b530      	push	{r4, r5, lr}
 100b4a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_egu_publish_clear(NRF_EGU_Type *  p_reg,
                                             nrf_egu_event_t event)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
 100b4a4:	2300      	movs	r3, #0
 100b4a6:	4d0b      	ldr	r5, [pc, #44]	; (100b4d4 <nrf_802154_trx_ppi_for_ramp_up_clear+0x3c>)
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 100b4a8:	4c0b      	ldr	r4, [pc, #44]	; (100b4d8 <nrf_802154_trx_ppi_for_ramp_up_clear+0x40>)
 100b4aa:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
 100b4ae:	5023      	str	r3, [r4, r0]
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 100b4b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
NRF_STATIC_INLINE void nrf_dppi_channels_remove_from_group(NRF_DPPIC_Type *         p_reg,
                                                           uint32_t                 channel_mask,
                                                           nrf_dppi_channel_group_t channel_group)
{
    p_reg->CHG[(uint32_t) channel_group] =
        p_reg->CHG[(uint32_t) channel_group] & ~(channel_mask);
 100b4b4:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 100b4b8:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    p_reg->CHG[(uint32_t) channel_group] =
 100b4bc:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
    nrf_egu_publish_clear(NRF_802154_EGU_INSTANCE, EGU_EVENT);
    nrf_radio_subscribe_clear(NRF_RADIO, ramp_up_task);
    nrf_dppi_subscribe_clear(NRF_DPPIC, DPPI_CHGRP_RAMP_UP_DIS_TASK);
    nrf_dppi_channels_remove_from_group(NRF_DPPIC, 1UL << PPI_EGU_RAMP_UP, DPPI_CHGRP_RAMP_UP);

    if (start_timer)
 100b4c0:	b119      	cbz	r1, 100b4ca <nrf_802154_trx_ppi_for_ramp_up_clear+0x32>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 100b4c2:	f5a2 5240 	sub.w	r2, r2, #12288	; 0x3000
 100b4c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 100b4ca:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
    }

    nrf_egu_subscribe_clear(NRF_802154_EGU_INSTANCE, EGU_TASK);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100b4ce:	bd30      	pop	{r4, r5, pc}
 100b4d0:	4100f000 	.word	0x4100f000
 100b4d4:	41014000 	.word	0x41014000
 100b4d8:	41008080 	.word	0x41008080

0100b4dc <nrf_802154_trx_ppi_for_ramp_up_was_triggered>:
    __ASM("nop");
    __ASM("nop");
}

bool nrf_802154_trx_ppi_for_ramp_up_was_triggered(void)
{
 100b4dc:	b508      	push	{r3, lr}
    return (nrf_radio_state_t) p_reg->STATE;
 100b4de:	4b08      	ldr	r3, [pc, #32]	; (100b500 <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x24>)
 100b4e0:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    if (nrf_radio_state_get(NRF_RADIO) != NRF_RADIO_STATE_DISABLED)
 100b4e4:	b2db      	uxtb	r3, r3
 100b4e6:	b943      	cbnz	r3, 100b4fa <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x1e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
 100b4e8:	4b06      	ldr	r3, [pc, #24]	; (100b504 <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x28>)
        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
        return true;
    }

    // Wait for PPIs
    nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
 100b4ea:	f008 f803 	bl	10134f4 <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
 100b4ee:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c

    if (nrf_egu_event_check(NRF_802154_EGU_INSTANCE, EGU_EVENT))
 100b4f2:	3800      	subs	r0, #0
 100b4f4:	bf18      	it	ne
 100b4f6:	2001      	movne	r0, #1
        return true;
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
    return false;
}
 100b4f8:	bd08      	pop	{r3, pc}
        return true;
 100b4fa:	2001      	movs	r0, #1
 100b4fc:	e7fc      	b.n	100b4f8 <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x1c>
 100b4fe:	bf00      	nop
 100b500:	41008000 	.word	0x41008000
 100b504:	41014000 	.word	0x41014000

0100b508 <nrf_802154_trx_ppi_for_ack_tx_set>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 100b508:	4b06      	ldr	r3, [pc, #24]	; (100b524 <nrf_802154_trx_ppi_for_ack_tx_set+0x1c>)
 100b50a:	4a07      	ldr	r2, [pc, #28]	; (100b528 <nrf_802154_trx_ppi_for_ack_tx_set+0x20>)
 100b50c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
 100b510:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 100b514:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
    p_reg->CHENSET = mask;
 100b518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 100b51c:	4b03      	ldr	r3, [pc, #12]	; (100b52c <nrf_802154_trx_ppi_for_ack_tx_set+0x24>)
 100b51e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_timer_publish_set(NRF_802154_TIMER_INSTANCE, NRF_TIMER_EVENT_COMPARE1, PPI_TIMER_TX_ACK);

    nrf_dppi_channels_enable(NRF_DPPIC, (1UL << PPI_TIMER_TX_ACK));

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100b522:	4770      	bx	lr
 100b524:	8000000a 	.word	0x8000000a
 100b528:	41008000 	.word	0x41008000
 100b52c:	4100f000 	.word	0x4100f000

0100b530 <nrf_802154_trx_ppi_for_ack_tx_clear>:
    p_reg->CHENCLR = mask;
 100b530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 100b534:	4b05      	ldr	r3, [pc, #20]	; (100b54c <nrf_802154_trx_ppi_for_ack_tx_clear+0x1c>)
 100b536:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 100b53a:	2300      	movs	r3, #0
 100b53c:	4a04      	ldr	r2, [pc, #16]	; (100b550 <nrf_802154_trx_ppi_for_ack_tx_clear+0x20>)
 100b53e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
 100b542:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 100b546:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4

    nrf_radio_subscribe_clear(NRF_RADIO, NRF_RADIO_TASK_TXEN);
    nrf_timer_publish_clear(NRF_802154_TIMER_INSTANCE, NRF_TIMER_EVENT_COMPARE1);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100b54a:	4770      	bx	lr
 100b54c:	4100f000 	.word	0x4100f000
 100b550:	41008000 	.word	0x41008000

0100b554 <nrf_802154_trx_ppi_for_fem_set>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 100b554:	4b02      	ldr	r3, [pc, #8]	; (100b560 <nrf_802154_trx_ppi_for_fem_set+0xc>)
 100b556:	4a03      	ldr	r2, [pc, #12]	; (100b564 <nrf_802154_trx_ppi_for_fem_set+0x10>)
 100b558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_timer_subscribe_set(NRF_802154_TIMER_INSTANCE, NRF_TIMER_TASK_START, PPI_DISABLED_EGU);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100b55c:	4770      	bx	lr
 100b55e:	bf00      	nop
 100b560:	4100c000 	.word	0x4100c000
 100b564:	80000007 	.word	0x80000007

0100b568 <nrf_802154_trx_ppi_for_fem_clear>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 100b568:	2200      	movs	r2, #0
 100b56a:	4b02      	ldr	r3, [pc, #8]	; (100b574 <nrf_802154_trx_ppi_for_fem_clear+0xc>)
 100b56c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_timer_subscribe_clear(NRF_802154_TIMER_INSTANCE, NRF_TIMER_TASK_START);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100b570:	4770      	bx	lr
 100b572:	bf00      	nop
 100b574:	4100c000 	.word	0x4100c000

0100b578 <nrf_802154_trx_ppi_for_radio_sync_set>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
 100b578:	4a07      	ldr	r2, [pc, #28]	; (100b598 <nrf_802154_trx_ppi_for_radio_sync_set+0x20>)
 100b57a:	4b08      	ldr	r3, [pc, #32]	; (100b59c <nrf_802154_trx_ppi_for_radio_sync_set+0x24>)
 100b57c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
 100b580:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 100b584:	3380      	adds	r3, #128	; 0x80
 100b586:	501a      	str	r2, [r3, r0]
    p_reg->CHENSET = mask;
 100b588:	f44f 7280 	mov.w	r2, #256	; 0x100
 100b58c:	f5a3 43a1 	sub.w	r3, r3, #20608	; 0x5080
 100b590:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_radio_publish_set(NRF_RADIO, NRF_RADIO_EVENT_SYNC, PPI_RADIO_SYNC_EGU_SYNC);
    nrf_egu_subscribe_set(NRF_802154_EGU_INSTANCE, task, PPI_RADIO_SYNC_EGU_SYNC);
    nrf_dppi_channels_enable(NRF_DPPIC, (1UL << PPI_RADIO_SYNC_EGU_SYNC));

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100b594:	4770      	bx	lr
 100b596:	bf00      	nop
 100b598:	80000008 	.word	0x80000008
 100b59c:	41008000 	.word	0x41008000

0100b5a0 <nrf_802154_trx_ppi_for_radio_sync_clear>:
    p_reg->CHENCLR = mask;
 100b5a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 100b5a4:	4b06      	ldr	r3, [pc, #24]	; (100b5c0 <nrf_802154_trx_ppi_for_radio_sync_clear+0x20>)
 100b5a6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
 100b5aa:	2200      	movs	r2, #0
 100b5ac:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
 100b5b0:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
 100b5b4:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 100b5b8:	3380      	adds	r3, #128	; 0x80
 100b5ba:	501a      	str	r2, [r3, r0]
    nrf_dppi_channels_disable(NRF_DPPIC, (1UL << PPI_RADIO_SYNC_EGU_SYNC));
    nrf_radio_publish_clear(NRF_RADIO, NRF_RADIO_EVENT_SYNC);
    nrf_egu_subscribe_clear(NRF_802154_EGU_INSTANCE, task);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100b5bc:	4770      	bx	lr
 100b5be:	bf00      	nop
 100b5c0:	4100f000 	.word	0x4100f000

0100b5c4 <nrf_802154_tx_work_buffer_reset>:
static bool      m_is_secured;                              ///< Flag that indicates if work buffer has been successfully secured.
static bool      m_is_dynamic_data_updated;                 ///< Flag that indicates if work buffer has had dynamic data successfully updated.

void nrf_802154_tx_work_buffer_reset(const nrf_802154_transmitted_frame_props_t * p_frame_props)
{
    mp_original_frame   = NULL;
 100b5c4:	2300      	movs	r3, #0
 100b5c6:	4a07      	ldr	r2, [pc, #28]	; (100b5e4 <nrf_802154_tx_work_buffer_reset+0x20>)
 100b5c8:	6013      	str	r3, [r2, #0]
    m_plain_text_offset = 0;
 100b5ca:	4a07      	ldr	r2, [pc, #28]	; (100b5e8 <nrf_802154_tx_work_buffer_reset+0x24>)
 100b5cc:	7013      	strb	r3, [r2, #0]

    if (p_frame_props == NULL)
 100b5ce:	4b07      	ldr	r3, [pc, #28]	; (100b5ec <nrf_802154_tx_work_buffer_reset+0x28>)
 100b5d0:	b918      	cbnz	r0, 100b5da <nrf_802154_tx_work_buffer_reset+0x16>
    {
        m_is_secured              = false;
 100b5d2:	7018      	strb	r0, [r3, #0]
        m_is_dynamic_data_updated = false;
 100b5d4:	4b06      	ldr	r3, [pc, #24]	; (100b5f0 <nrf_802154_tx_work_buffer_reset+0x2c>)
 100b5d6:	7018      	strb	r0, [r3, #0]
    else
    {
        m_is_secured              = p_frame_props->is_secured;
        m_is_dynamic_data_updated = p_frame_props->dynamic_data_is_set;
    }
}
 100b5d8:	4770      	bx	lr
        m_is_secured              = p_frame_props->is_secured;
 100b5da:	7802      	ldrb	r2, [r0, #0]
        m_is_dynamic_data_updated = p_frame_props->dynamic_data_is_set;
 100b5dc:	7840      	ldrb	r0, [r0, #1]
        m_is_secured              = p_frame_props->is_secured;
 100b5de:	701a      	strb	r2, [r3, #0]
        m_is_dynamic_data_updated = p_frame_props->dynamic_data_is_set;
 100b5e0:	e7f8      	b.n	100b5d4 <nrf_802154_tx_work_buffer_reset+0x10>
 100b5e2:	bf00      	nop
 100b5e4:	2100341c 	.word	0x2100341c
 100b5e8:	21004405 	.word	0x21004405
 100b5ec:	21004404 	.word	0x21004404
 100b5f0:	21004403 	.word	0x21004403

0100b5f4 <nrf_802154_tx_work_buffer_enable_for>:

uint8_t * nrf_802154_tx_work_buffer_enable_for(uint8_t * p_original_frame)
{
    mp_original_frame = p_original_frame;
 100b5f4:	4b01      	ldr	r3, [pc, #4]	; (100b5fc <nrf_802154_tx_work_buffer_enable_for+0x8>)
 100b5f6:	6018      	str	r0, [r3, #0]
    return m_work_buffer;
}
 100b5f8:	4801      	ldr	r0, [pc, #4]	; (100b600 <nrf_802154_tx_work_buffer_enable_for+0xc>)
 100b5fa:	4770      	bx	lr
 100b5fc:	2100341c 	.word	0x2100341c
 100b600:	21004406 	.word	0x21004406

0100b604 <nrf_802154_tx_work_buffer_get>:

const uint8_t * nrf_802154_tx_work_buffer_get(const uint8_t * p_original_frame)
{
    return mp_original_frame ? m_work_buffer : p_original_frame;
 100b604:	4b03      	ldr	r3, [pc, #12]	; (100b614 <nrf_802154_tx_work_buffer_get+0x10>)
 100b606:	681a      	ldr	r2, [r3, #0]
}
 100b608:	4b03      	ldr	r3, [pc, #12]	; (100b618 <nrf_802154_tx_work_buffer_get+0x14>)
 100b60a:	2a00      	cmp	r2, #0
 100b60c:	bf18      	it	ne
 100b60e:	4618      	movne	r0, r3
 100b610:	4770      	bx	lr
 100b612:	bf00      	nop
 100b614:	2100341c 	.word	0x2100341c
 100b618:	21004406 	.word	0x21004406

0100b61c <nrf_802154_tx_work_buffer_original_frame_update>:

void nrf_802154_tx_work_buffer_original_frame_update(
    uint8_t                              * p_original_frame,
    nrf_802154_transmitted_frame_props_t * p_frame_props)
{
 100b61c:	b410      	push	{r4}
    assert(p_frame_props != NULL);

    p_frame_props->is_secured          = m_is_secured;
    p_frame_props->dynamic_data_is_set = m_is_dynamic_data_updated;
 100b61e:	4a0e      	ldr	r2, [pc, #56]	; (100b658 <nrf_802154_tx_work_buffer_original_frame_update+0x3c>)
    p_frame_props->is_secured          = m_is_secured;
 100b620:	4b0e      	ldr	r3, [pc, #56]	; (100b65c <nrf_802154_tx_work_buffer_original_frame_update+0x40>)
    p_frame_props->dynamic_data_is_set = m_is_dynamic_data_updated;
 100b622:	7814      	ldrb	r4, [r2, #0]

    if (mp_original_frame == NULL)
 100b624:	4a0e      	ldr	r2, [pc, #56]	; (100b660 <nrf_802154_tx_work_buffer_original_frame_update+0x44>)
    p_frame_props->is_secured          = m_is_secured;
 100b626:	781b      	ldrb	r3, [r3, #0]
    if (mp_original_frame == NULL)
 100b628:	6812      	ldr	r2, [r2, #0]
    p_frame_props->is_secured          = m_is_secured;
 100b62a:	700b      	strb	r3, [r1, #0]
    p_frame_props->dynamic_data_is_set = m_is_dynamic_data_updated;
 100b62c:	704c      	strb	r4, [r1, #1]
    if (mp_original_frame == NULL)
 100b62e:	b182      	cbz	r2, 100b652 <nrf_802154_tx_work_buffer_original_frame_update+0x36>
    {
        return;
    }

    uint8_t work_buffer_len = m_work_buffer[PHR_OFFSET] + PHR_SIZE;
 100b630:	490c      	ldr	r1, [pc, #48]	; (100b664 <nrf_802154_tx_work_buffer_original_frame_update+0x48>)
 100b632:	780a      	ldrb	r2, [r1, #0]
 100b634:	3201      	adds	r2, #1
 100b636:	b2d2      	uxtb	r2, r2

    if (m_is_dynamic_data_updated && m_is_secured)
 100b638:	b134      	cbz	r4, 100b648 <nrf_802154_tx_work_buffer_original_frame_update+0x2c>
 100b63a:	b113      	cbz	r3, 100b642 <nrf_802154_tx_work_buffer_original_frame_update+0x26>
    }
    else
    {
        // Intentionally empty.
    }
}
 100b63c:	bc10      	pop	{r4}
        memcpy(p_original_frame, m_work_buffer, work_buffer_len - m_plain_text_offset);
 100b63e:	f007 b9dd 	b.w	10129fc <memcpy>
        memcpy(p_original_frame, m_work_buffer, m_plain_text_offset);
 100b642:	4b09      	ldr	r3, [pc, #36]	; (100b668 <nrf_802154_tx_work_buffer_original_frame_update+0x4c>)
 100b644:	781a      	ldrb	r2, [r3, #0]
 100b646:	e7f9      	b.n	100b63c <nrf_802154_tx_work_buffer_original_frame_update+0x20>
    else if (m_is_secured)
 100b648:	b11b      	cbz	r3, 100b652 <nrf_802154_tx_work_buffer_original_frame_update+0x36>
        memcpy(p_original_frame, m_work_buffer, work_buffer_len - m_plain_text_offset);
 100b64a:	4b07      	ldr	r3, [pc, #28]	; (100b668 <nrf_802154_tx_work_buffer_original_frame_update+0x4c>)
 100b64c:	781b      	ldrb	r3, [r3, #0]
 100b64e:	1ad2      	subs	r2, r2, r3
 100b650:	e7f4      	b.n	100b63c <nrf_802154_tx_work_buffer_original_frame_update+0x20>
}
 100b652:	bc10      	pop	{r4}
 100b654:	4770      	bx	lr
 100b656:	bf00      	nop
 100b658:	21004403 	.word	0x21004403
 100b65c:	21004404 	.word	0x21004404
 100b660:	2100341c 	.word	0x2100341c
 100b664:	21004406 	.word	0x21004406
 100b668:	21004405 	.word	0x21004405

0100b66c <nrf_802154_tx_work_buffer_is_secured_set>:

void nrf_802154_tx_work_buffer_is_secured_set(void)
{
    m_is_secured = true;
 100b66c:	2201      	movs	r2, #1
 100b66e:	4b01      	ldr	r3, [pc, #4]	; (100b674 <nrf_802154_tx_work_buffer_is_secured_set+0x8>)
 100b670:	701a      	strb	r2, [r3, #0]
}
 100b672:	4770      	bx	lr
 100b674:	21004404 	.word	0x21004404

0100b678 <nrf_802154_tx_work_buffer_is_dynamic_data_updated_set>:

void nrf_802154_tx_work_buffer_is_dynamic_data_updated_set(void)
{
    m_is_dynamic_data_updated = true;
 100b678:	2201      	movs	r2, #1
 100b67a:	4b01      	ldr	r3, [pc, #4]	; (100b680 <nrf_802154_tx_work_buffer_is_dynamic_data_updated_set+0x8>)
 100b67c:	701a      	strb	r2, [r3, #0]
}
 100b67e:	4770      	bx	lr
 100b680:	21004403 	.word	0x21004403

0100b684 <nrf_802154_tx_work_buffer_plain_text_offset_set>:

void nrf_802154_tx_work_buffer_plain_text_offset_set(uint8_t offset)
{
    m_plain_text_offset = offset;
 100b684:	4b01      	ldr	r3, [pc, #4]	; (100b68c <nrf_802154_tx_work_buffer_plain_text_offset_set+0x8>)
 100b686:	7018      	strb	r0, [r3, #0]
}
 100b688:	4770      	bx	lr
 100b68a:	bf00      	nop
 100b68c:	21004405 	.word	0x21004405

0100b690 <notify_failed>:
 * @brief Notify MAC layer that CSMA-CA failed
 *
 * @param[in]  error  The error that caused the failure
 */
static void notify_failed(nrf_802154_tx_error_t error)
{
 100b690:	b510      	push	{r4, lr}
 100b692:	4604      	mov	r4, r0
 100b694:	b086      	sub	sp, #24
    // core rejected attempt, use my current frame_props
    nrf_802154_transmit_done_metadata_t metadata = {};
 100b696:	2218      	movs	r2, #24
 100b698:	2100      	movs	r1, #0
 100b69a:	4668      	mov	r0, sp
 100b69c:	f007 f9b9 	bl	1012a12 <memset>

    metadata.frame_props = m_data_props;
 100b6a0:	4b05      	ldr	r3, [pc, #20]	; (100b6b8 <notify_failed+0x28>)

    nrf_802154_notify_transmit_failed(mp_data, error, &metadata);
 100b6a2:	466a      	mov	r2, sp
    metadata.frame_props = m_data_props;
 100b6a4:	881b      	ldrh	r3, [r3, #0]
    nrf_802154_notify_transmit_failed(mp_data, error, &metadata);
 100b6a6:	4621      	mov	r1, r4
    metadata.frame_props = m_data_props;
 100b6a8:	f8ad 3000 	strh.w	r3, [sp]
    nrf_802154_notify_transmit_failed(mp_data, error, &metadata);
 100b6ac:	4b03      	ldr	r3, [pc, #12]	; (100b6bc <notify_failed+0x2c>)
 100b6ae:	6818      	ldr	r0, [r3, #0]
 100b6b0:	f008 f891 	bl	10137d6 <nrf_802154_notify_transmit_failed>
}
 100b6b4:	b006      	add	sp, #24
 100b6b6:	bd10      	pop	{r4, pc}
 100b6b8:	2100448a 	.word	0x2100448a
 100b6bc:	21003420 	.word	0x21003420

0100b6c0 <random_backoff_start>:

/**
 * @brief Delay CCA procedure for random (2^BE - 1) unit backoff periods.
 */
static void random_backoff_start(void)
{
 100b6c0:	b530      	push	{r4, r5, lr}
    return nrf_802154_random_get() % (1U << m_be);
 100b6c2:	2501      	movs	r5, #1
{
 100b6c4:	b087      	sub	sp, #28
    return nrf_802154_random_get() % (1U << m_be);
 100b6c6:	f7fc fcbd 	bl	1008044 <nrf_802154_random_get>
 100b6ca:	4b1e      	ldr	r3, [pc, #120]	; (100b744 <random_backoff_start+0x84>)
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    uint64_t backoff_us = backoff_periods_calc() * UNIT_BACKOFF_PERIOD;

    rsch_dly_ts_param_t backoff_ts_param =
 100b6cc:	2218      	movs	r2, #24
    return nrf_802154_random_get() % (1U << m_be);
 100b6ce:	781c      	ldrb	r4, [r3, #0]
    uint64_t backoff_us = backoff_periods_calc() * UNIT_BACKOFF_PERIOD;
 100b6d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
    return nrf_802154_random_get() % (1U << m_be);
 100b6d4:	fa05 f404 	lsl.w	r4, r5, r4
 100b6d8:	3c01      	subs	r4, #1
 100b6da:	4004      	ands	r4, r0
    rsch_dly_ts_param_t backoff_ts_param =
 100b6dc:	2100      	movs	r1, #0
 100b6de:	4668      	mov	r0, sp
    uint64_t backoff_us = backoff_periods_calc() * UNIT_BACKOFF_PERIOD;
 100b6e0:	b2e4      	uxtb	r4, r4
 100b6e2:	435c      	muls	r4, r3
    rsch_dly_ts_param_t backoff_ts_param =
 100b6e4:	f007 f995 	bl	1012a12 <memset>
    {
        .trigger_time     = nrf_802154_sl_timer_current_time_get() + backoff_us,
 100b6e8:	f009 fe06 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
    rsch_dly_ts_param_t backoff_ts_param =
 100b6ec:	2302      	movs	r3, #2
 100b6ee:	f88d 3009 	strb.w	r3, [sp, #9]
 100b6f2:	4b15      	ldr	r3, [pc, #84]	; (100b748 <random_backoff_start+0x88>)
        .trigger_time     = nrf_802154_sl_timer_current_time_get() + backoff_us,
 100b6f4:	1900      	adds	r0, r0, r4
    rsch_dly_ts_param_t backoff_ts_param =
 100b6f6:	9303      	str	r3, [sp, #12]
 100b6f8:	f06f 0302 	mvn.w	r3, #2
        .trigger_time     = nrf_802154_sl_timer_current_time_get() + backoff_us,
 100b6fc:	f141 0100 	adc.w	r1, r1, #0
    rsch_dly_ts_param_t backoff_ts_param =
 100b700:	e9cd 0100 	strd	r0, r1, [sp]
 100b704:	9304      	str	r3, [sp, #16]
        .type             = RSCH_DLY_TS_TYPE_RELAXED,
        .started_callback = frame_transmit,
        .id               = NRF_802154_RESERVED_CSMACA_ID,
    };

    switch (nrf_802154_pib_coex_tx_request_mode_get())
 100b706:	f7fe fd79 	bl	100a1fc <nrf_802154_pib_coex_tx_request_mode_get>
 100b70a:	2802      	cmp	r0, #2
 100b70c:	d012      	beq.n	100b734 <random_backoff_start+0x74>
 100b70e:	d806      	bhi.n	100b71e <random_backoff_start+0x5e>
 100b710:	42a8      	cmp	r0, r5
 100b712:	d00b      	beq.n	100b72c <random_backoff_start+0x6c>
            assert(false);
            break;
    }

    // Delayed timeslot with these parameters should always be scheduled
    if (!nrf_802154_rsch_delayed_timeslot_request(&backoff_ts_param))
 100b714:	4668      	mov	r0, sp
 100b716:	f005 ffa3 	bl	1011660 <nrf_802154_rsch_delayed_timeslot_request>
    {
        assert(false);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100b71a:	b007      	add	sp, #28
 100b71c:	bd30      	pop	{r4, r5, pc}
    switch (nrf_802154_pib_coex_tx_request_mode_get())
 100b71e:	3803      	subs	r0, #3
 100b720:	b2c0      	uxtb	r0, r0
 100b722:	2801      	cmp	r0, #1
 100b724:	d8f6      	bhi.n	100b714 <random_backoff_start+0x54>
            backoff_ts_param.prio = RSCH_PRIO_IDLE_LISTENING;
 100b726:	f88d 5008 	strb.w	r5, [sp, #8]
            break;
 100b72a:	e7f3      	b.n	100b714 <random_backoff_start+0x54>
            backoff_ts_param.prio = RSCH_PRIO_TX;
 100b72c:	2304      	movs	r3, #4
            backoff_ts_param.prio = (m_nb == 0) ? RSCH_PRIO_IDLE_LISTENING : RSCH_PRIO_TX;
 100b72e:	f88d 3008 	strb.w	r3, [sp, #8]
            break;
 100b732:	e7ef      	b.n	100b714 <random_backoff_start+0x54>
            backoff_ts_param.prio = (m_nb == 0) ? RSCH_PRIO_IDLE_LISTENING : RSCH_PRIO_TX;
 100b734:	4b05      	ldr	r3, [pc, #20]	; (100b74c <random_backoff_start+0x8c>)
 100b736:	781b      	ldrb	r3, [r3, #0]
 100b738:	2b00      	cmp	r3, #0
 100b73a:	bf14      	ite	ne
 100b73c:	2304      	movne	r3, #4
 100b73e:	2301      	moveq	r3, #1
 100b740:	e7f5      	b.n	100b72e <random_backoff_start+0x6e>
 100b742:	bf00      	nop
 100b744:	2100448c 	.word	0x2100448c
 100b748:	0100b801 	.word	0x0100b801
 100b74c:	2100448d 	.word	0x2100448d

0100b750 <notify_busy_channel>:
{
 100b750:	b510      	push	{r4, lr}
 100b752:	4604      	mov	r4, r0
    nrf_802154_rsch_delayed_timeslot_cancel(NRF_802154_RESERVED_CSMACA_ID, true);
 100b754:	2101      	movs	r1, #1
 100b756:	f06f 0002 	mvn.w	r0, #2
 100b75a:	f009 fd62 	bl	1015222 <nrf_802154_rsch_delayed_timeslot_cancel>
    if (!result && (m_nb >= nrf_802154_pib_csmaca_max_backoffs_get()))
 100b75e:	b954      	cbnz	r4, 100b776 <notify_busy_channel+0x26>
 100b760:	f7fe fd78 	bl	100a254 <nrf_802154_pib_csmaca_max_backoffs_get>
 100b764:	4b04      	ldr	r3, [pc, #16]	; (100b778 <notify_busy_channel+0x28>)
 100b766:	781b      	ldrb	r3, [r3, #0]
 100b768:	4283      	cmp	r3, r0
 100b76a:	d304      	bcc.n	100b776 <notify_busy_channel+0x26>
}
 100b76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        notify_failed(NRF_802154_TX_ERROR_BUSY_CHANNEL);
 100b770:	2001      	movs	r0, #1
 100b772:	f7ff bf8d 	b.w	100b690 <notify_failed>
}
 100b776:	bd10      	pop	{r4, pc}
 100b778:	2100448d 	.word	0x2100448d

0100b77c <csma_ca_state_set>:
  __ASM volatile ("dmb 0xF":::"memory");
 100b77c:	f3bf 8f5f 	dmb	sy
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 100b780:	4a08      	ldr	r2, [pc, #32]	; (100b7a4 <csma_ca_state_set+0x28>)
 100b782:	e8d2 3f4f 	ldrexb	r3, [r2]

    do
    {
        uint8_t old_val = __LDREXB((volatile uint8_t *)p_obj);

        if ( old_val != *p_expected)
 100b786:	b2db      	uxtb	r3, r3
 100b788:	4283      	cmp	r3, r0
 100b78a:	d003      	beq.n	100b794 <csma_ca_state_set+0x18>
  __ASM volatile ("clrex" ::: "memory");
 100b78c:	f3bf 8f2f 	clrex
        {
            *p_expected = old_val;
            __CLREX();
            return false;
 100b790:	2000      	movs	r0, #0
 100b792:	4770      	bx	lr
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 100b794:	e8c2 1f43 	strexb	r3, r1, [r2]
        }
    }
    while (__STREXB(desired, (volatile uint8_t *)p_obj));
 100b798:	2b00      	cmp	r3, #0
 100b79a:	d1f2      	bne.n	100b782 <csma_ca_state_set+0x6>
  __ASM volatile ("dmb 0xF":::"memory");
 100b79c:	f3bf 8f5f 	dmb	sy

    __DMB();

    return true;
 100b7a0:	2001      	movs	r0, #1
}
 100b7a2:	4770      	bx	lr
 100b7a4:	21004486 	.word	0x21004486

0100b7a8 <channel_busy>:

static bool channel_busy(void)
{
 100b7a8:	b510      	push	{r4, lr}
    bool result = true;

    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    if (csma_ca_state_set(CSMA_CA_STATE_ONGOING, CSMA_CA_STATE_BACKOFF))
 100b7aa:	2101      	movs	r1, #1
 100b7ac:	2002      	movs	r0, #2
 100b7ae:	f7ff ffe5 	bl	100b77c <csma_ca_state_set>
 100b7b2:	b908      	cbnz	r0, 100b7b8 <channel_busy+0x10>
    bool result = true;
 100b7b4:	2001      	movs	r0, #1
        }
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return result;
}
 100b7b6:	bd10      	pop	{r4, pc}
        m_nb++;
 100b7b8:	4c0e      	ldr	r4, [pc, #56]	; (100b7f4 <channel_busy+0x4c>)
 100b7ba:	7823      	ldrb	r3, [r4, #0]
 100b7bc:	3301      	adds	r3, #1
 100b7be:	7023      	strb	r3, [r4, #0]
        if (m_be < nrf_802154_pib_csmaca_max_be_get())
 100b7c0:	f7fe fd3c 	bl	100a23c <nrf_802154_pib_csmaca_max_be_get>
 100b7c4:	4a0c      	ldr	r2, [pc, #48]	; (100b7f8 <channel_busy+0x50>)
 100b7c6:	7813      	ldrb	r3, [r2, #0]
 100b7c8:	4298      	cmp	r0, r3
            m_be++;
 100b7ca:	bf84      	itt	hi
 100b7cc:	3301      	addhi	r3, #1
 100b7ce:	7013      	strbhi	r3, [r2, #0]
        if (m_nb > nrf_802154_pib_csmaca_max_backoffs_get())
 100b7d0:	f7fe fd40 	bl	100a254 <nrf_802154_pib_csmaca_max_backoffs_get>
 100b7d4:	7823      	ldrb	r3, [r4, #0]
 100b7d6:	2400      	movs	r4, #0
 100b7d8:	4283      	cmp	r3, r0
 100b7da:	d906      	bls.n	100b7ea <channel_busy+0x42>
            mp_data = NULL;
 100b7dc:	4b07      	ldr	r3, [pc, #28]	; (100b7fc <channel_busy+0x54>)
            bool ret = csma_ca_state_set(CSMA_CA_STATE_BACKOFF, CSMA_CA_STATE_IDLE);
 100b7de:	4621      	mov	r1, r4
 100b7e0:	2001      	movs	r0, #1
            mp_data = NULL;
 100b7e2:	601c      	str	r4, [r3, #0]
            bool ret = csma_ca_state_set(CSMA_CA_STATE_BACKOFF, CSMA_CA_STATE_IDLE);
 100b7e4:	f7ff ffca 	bl	100b77c <csma_ca_state_set>
            (void)ret;
 100b7e8:	e7e4      	b.n	100b7b4 <channel_busy+0xc>
            random_backoff_start();
 100b7ea:	f7ff ff69 	bl	100b6c0 <random_backoff_start>
            result = false;
 100b7ee:	4620      	mov	r0, r4
 100b7f0:	e7e1      	b.n	100b7b6 <channel_busy+0xe>
 100b7f2:	bf00      	nop
 100b7f4:	2100448d 	.word	0x2100448d
 100b7f8:	2100448c 	.word	0x2100448c
 100b7fc:	21003420 	.word	0x21003420

0100b800 <frame_transmit>:
{
 100b800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 100b802:	4604      	mov	r4, r0
    if (csma_ca_state_set(CSMA_CA_STATE_BACKOFF, CSMA_CA_STATE_ONGOING))
 100b804:	2102      	movs	r1, #2
 100b806:	2001      	movs	r0, #1
 100b808:	f7ff ffb8 	bl	100b77c <csma_ca_state_set>
 100b80c:	b348      	cbz	r0, 100b862 <frame_transmit+0x62>
    bool first_transmit_attempt     = (0 == m_nb);
 100b80e:	4b18      	ldr	r3, [pc, #96]	; (100b870 <frame_transmit+0x70>)
 100b810:	781c      	ldrb	r4, [r3, #0]
    bool coex_requires_boosted_prio = (nrf_802154_pib_coex_tx_request_mode_get() ==
 100b812:	f7fe fcf3 	bl	100a1fc <nrf_802154_pib_coex_tx_request_mode_get>
    if (first_transmit_attempt && coex_requires_boosted_prio)
 100b816:	b934      	cbnz	r4, 100b826 <frame_transmit+0x26>
 100b818:	2802      	cmp	r0, #2
 100b81a:	d104      	bne.n	100b826 <frame_transmit+0x26>
        if (!nrf_802154_rsch_delayed_timeslot_priority_update(NRF_802154_RESERVED_CSMACA_ID,
 100b81c:	2104      	movs	r1, #4
 100b81e:	f06f 0002 	mvn.w	r0, #2
 100b822:	f009 fd1c 	bl	101525e <nrf_802154_rsch_delayed_timeslot_priority_update>
        nrf_802154_transmit_params_t params =
 100b826:	4b13      	ldr	r3, [pc, #76]	; (100b874 <frame_transmit+0x74>)
 100b828:	2000      	movs	r0, #0
 100b82a:	881b      	ldrh	r3, [r3, #0]
        if (!nrf_802154_request_transmit(NRF_802154_TERM_NONE,
 100b82c:	2103      	movs	r1, #3
        nrf_802154_transmit_params_t params =
 100b82e:	f8ad 3008 	strh.w	r3, [sp, #8]
 100b832:	4b11      	ldr	r3, [pc, #68]	; (100b878 <frame_transmit+0x78>)
 100b834:	f88d 000e 	strb.w	r0, [sp, #14]
 100b838:	881a      	ldrh	r2, [r3, #0]
 100b83a:	789b      	ldrb	r3, [r3, #2]
 100b83c:	f8ad 200a 	strh.w	r2, [sp, #10]
 100b840:	f88d 300c 	strb.w	r3, [sp, #12]
 100b844:	2301      	movs	r3, #1
 100b846:	f88d 300d 	strb.w	r3, [sp, #13]
        if (!nrf_802154_request_transmit(NRF_802154_TERM_NONE,
 100b84a:	4b0c      	ldr	r3, [pc, #48]	; (100b87c <frame_transmit+0x7c>)
 100b84c:	4a0c      	ldr	r2, [pc, #48]	; (100b880 <frame_transmit+0x80>)
 100b84e:	9300      	str	r3, [sp, #0]
 100b850:	6812      	ldr	r2, [r2, #0]
 100b852:	ab02      	add	r3, sp, #8
 100b854:	f008 f81e 	bl	1013894 <nrf_802154_request_transmit>
 100b858:	b908      	cbnz	r0, 100b85e <frame_transmit+0x5e>
            (void)channel_busy();
 100b85a:	f7ff ffa5 	bl	100b7a8 <channel_busy>
}
 100b85e:	b004      	add	sp, #16
 100b860:	bd10      	pop	{r4, pc}
        nrf_802154_rsch_delayed_timeslot_cancel(dly_ts_id, true);
 100b862:	2101      	movs	r1, #1
 100b864:	4620      	mov	r0, r4
}
 100b866:	b004      	add	sp, #16
 100b868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_802154_rsch_delayed_timeslot_cancel(dly_ts_id, true);
 100b86c:	f009 bcd9 	b.w	1015222 <nrf_802154_rsch_delayed_timeslot_cancel>
 100b870:	2100448d 	.word	0x2100448d
 100b874:	2100448a 	.word	0x2100448a
 100b878:	21004487 	.word	0x21004487
 100b87c:	0100b751 	.word	0x0100b751
 100b880:	21003420 	.word	0x21003420

0100b884 <nrf_802154_csma_ca_start>:

bool nrf_802154_csma_ca_start(uint8_t                                      * p_data,
                              const nrf_802154_transmit_csma_ca_metadata_t * p_metadata)
{
 100b884:	b538      	push	{r3, r4, r5, lr}
 100b886:	4605      	mov	r5, r0
 100b888:	460c      	mov	r4, r1
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

#if (NRF_802154_FRAME_TIMESTAMP_ENABLED)
    uint64_t ts = nrf_802154_sl_timer_current_time_get();
 100b88a:	f009 fd35 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
 100b88e:	4602      	mov	r2, r0
 100b890:	460b      	mov	r3, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100b892:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 100b896:	b672      	cpsid	i

    nrf_802154_stat_timestamp_write(last_csmaca_start_timestamp, ts);
 100b898:	4810      	ldr	r0, [pc, #64]	; (100b8dc <nrf_802154_csma_ca_start+0x58>)
 100b89a:	e9c0 2308 	strd	r2, r3, [r0, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100b89e:	f381 8810 	msr	PRIMASK, r1
#endif

    bool result = csma_ca_state_set(CSMA_CA_STATE_IDLE, CSMA_CA_STATE_BACKOFF);
 100b8a2:	2101      	movs	r1, #1
 100b8a4:	2000      	movs	r0, #0
 100b8a6:	f7ff ff69 	bl	100b77c <csma_ca_state_set>

    assert(result);
    (void)result;

    mp_data      = p_data;
 100b8aa:	4b0d      	ldr	r3, [pc, #52]	; (100b8e0 <nrf_802154_csma_ca_start+0x5c>)
    m_data_props = p_metadata->frame_props;
 100b8ac:	8822      	ldrh	r2, [r4, #0]
    mp_data      = p_data;
 100b8ae:	601d      	str	r5, [r3, #0]
    m_data_props = p_metadata->frame_props;
 100b8b0:	4b0c      	ldr	r3, [pc, #48]	; (100b8e4 <nrf_802154_csma_ca_start+0x60>)
 100b8b2:	801a      	strh	r2, [r3, #0]
    m_nb         = 0;
 100b8b4:	2200      	movs	r2, #0
 100b8b6:	4b0c      	ldr	r3, [pc, #48]	; (100b8e8 <nrf_802154_csma_ca_start+0x64>)
 100b8b8:	701a      	strb	r2, [r3, #0]
    m_be         = nrf_802154_pib_csmaca_min_be_get();
 100b8ba:	f7fe fcaf 	bl	100a21c <nrf_802154_pib_csmaca_min_be_get>
 100b8be:	4b0b      	ldr	r3, [pc, #44]	; (100b8ec <nrf_802154_csma_ca_start+0x68>)
 100b8c0:	7018      	strb	r0, [r3, #0]
    (void)nrf_802154_tx_power_convert_metadata_to_tx_power_split(nrf_802154_pib_channel_get(),
 100b8c2:	f7fe fc33 	bl	100a12c <nrf_802154_pib_channel_get>
 100b8c6:	78a3      	ldrb	r3, [r4, #2]
 100b8c8:	78e1      	ldrb	r1, [r4, #3]
 100b8ca:	4a09      	ldr	r2, [pc, #36]	; (100b8f0 <nrf_802154_csma_ca_start+0x6c>)
 100b8cc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 100b8d0:	f007 fe17 	bl	1013502 <nrf_802154_tx_power_convert_metadata_to_tx_power_split>
                                                                 p_metadata->tx_power,
                                                                 &m_tx_power);

    random_backoff_start();
 100b8d4:	f7ff fef4 	bl	100b6c0 <random_backoff_start>

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return true;
}
 100b8d8:	2001      	movs	r0, #1
 100b8da:	bd38      	pop	{r3, r4, r5, pc}
 100b8dc:	21001150 	.word	0x21001150
 100b8e0:	21003420 	.word	0x21003420
 100b8e4:	2100448a 	.word	0x2100448a
 100b8e8:	2100448d 	.word	0x2100448d
 100b8ec:	2100448c 	.word	0x2100448c
 100b8f0:	21004487 	.word	0x21004487

0100b8f4 <nrf_802154_csma_ca_abort>:
{
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = true;

    if (((req_orig != REQ_ORIG_CORE) && (req_orig != REQ_ORIG_HIGHER_LAYER)) ||
 100b8f4:	2901      	cmp	r1, #1
{
 100b8f6:	b508      	push	{r3, lr}
    if (((req_orig != REQ_ORIG_CORE) && (req_orig != REQ_ORIG_HIGHER_LAYER)) ||
 100b8f8:	d901      	bls.n	100b8fe <nrf_802154_csma_ca_abort+0xa>
    bool result = true;
 100b8fa:	2001      	movs	r0, #1
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 100b8fc:	bd08      	pop	{r3, pc}
  __ASM volatile ("dmb 0xF":::"memory");
 100b8fe:	f3bf 8f5f 	dmb	sy
static inline uint8_t nrf_802154_sl_atomic_load_u8(uint8_t * p_obj)
{
    uint8_t value;

    __DMB();
    value = *p_obj;
 100b902:	4b0a      	ldr	r3, [pc, #40]	; (100b92c <nrf_802154_csma_ca_abort+0x38>)
 100b904:	781a      	ldrb	r2, [r3, #0]
 100b906:	f3bf 8f5f 	dmb	sy
    if (((req_orig != REQ_ORIG_CORE) && (req_orig != REQ_ORIG_HIGHER_LAYER)) ||
 100b90a:	2a00      	cmp	r2, #0
 100b90c:	d0f5      	beq.n	100b8fa <nrf_802154_csma_ca_abort+0x6>
    else if (term_lvl >= NRF_802154_TERM_802154)
 100b90e:	2800      	cmp	r0, #0
 100b910:	d0f4      	beq.n	100b8fc <nrf_802154_csma_ca_abort+0x8>
 100b912:	f3bf 8f5f 	dmb	sy
    *p_obj = value;
 100b916:	2203      	movs	r2, #3
 100b918:	701a      	strb	r2, [r3, #0]
 100b91a:	f3bf 8f5f 	dmb	sy
        nrf_802154_rsch_delayed_timeslot_cancel(NRF_802154_RESERVED_CSMACA_ID, false);
 100b91e:	2100      	movs	r1, #0
 100b920:	f06f 0002 	mvn.w	r0, #2
 100b924:	f009 fc7d 	bl	1015222 <nrf_802154_rsch_delayed_timeslot_cancel>
 100b928:	e7e7      	b.n	100b8fa <nrf_802154_csma_ca_abort+0x6>
 100b92a:	bf00      	nop
 100b92c:	21004486 	.word	0x21004486

0100b930 <nrf_802154_csma_ca_tx_failed_hook>:

bool nrf_802154_csma_ca_tx_failed_hook(uint8_t * p_frame, nrf_802154_tx_error_t error)
{
 100b930:	b570      	push	{r4, r5, r6, lr}
        // shall be stopped.

        case NRF_802154_TX_ERROR_KEY_ID_INVALID:
        /* Fallthrough. */
        case NRF_802154_TX_ERROR_FRAME_COUNTER_ERROR:
            if (mp_data == p_frame)
 100b932:	4a12      	ldr	r2, [pc, #72]	; (100b97c <nrf_802154_csma_ca_tx_failed_hook+0x4c>)
    switch (error)
 100b934:	f1a1 0308 	sub.w	r3, r1, #8
 100b938:	2b01      	cmp	r3, #1
{
 100b93a:	4604      	mov	r4, r0
 100b93c:	460d      	mov	r5, r1
            if (mp_data == p_frame)
 100b93e:	6816      	ldr	r6, [r2, #0]
    switch (error)
 100b940:	d80b      	bhi.n	100b95a <nrf_802154_csma_ca_tx_failed_hook+0x2a>
            if (mp_data == p_frame)
 100b942:	42b0      	cmp	r0, r6
 100b944:	d107      	bne.n	100b956 <nrf_802154_csma_ca_tx_failed_hook+0x26>
            {
                mp_data = NULL;
 100b946:	2300      	movs	r3, #0
 100b948:	6013      	str	r3, [r2, #0]
 100b94a:	f3bf 8f5f 	dmb	sy
 100b94e:	4a0c      	ldr	r2, [pc, #48]	; (100b980 <nrf_802154_csma_ca_tx_failed_hook+0x50>)
 100b950:	7013      	strb	r3, [r2, #0]
 100b952:	f3bf 8f5f 	dmb	sy
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
 100b956:	2001      	movs	r0, #1
 100b958:	bd70      	pop	{r4, r5, r6, pc}
            if (csma_ca_state_set(CSMA_CA_STATE_ABORTED, CSMA_CA_STATE_IDLE))
 100b95a:	2100      	movs	r1, #0
 100b95c:	2003      	movs	r0, #3
 100b95e:	f7ff ff0d 	bl	100b77c <csma_ca_state_set>
 100b962:	b128      	cbz	r0, 100b970 <nrf_802154_csma_ca_tx_failed_hook+0x40>
                if (p_frame != mp_data)
 100b964:	42b4      	cmp	r4, r6
 100b966:	d0f6      	beq.n	100b956 <nrf_802154_csma_ca_tx_failed_hook+0x26>
                    notify_failed(error);
 100b968:	4628      	mov	r0, r5
 100b96a:	f7ff fe91 	bl	100b690 <notify_failed>
 100b96e:	e7f2      	b.n	100b956 <nrf_802154_csma_ca_tx_failed_hook+0x26>
            else if (p_frame == mp_data)
 100b970:	42b4      	cmp	r4, r6
 100b972:	d1f0      	bne.n	100b956 <nrf_802154_csma_ca_tx_failed_hook+0x26>
}
 100b974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                result = channel_busy();
 100b978:	f7ff bf16 	b.w	100b7a8 <channel_busy>
 100b97c:	21003420 	.word	0x21003420
 100b980:	21004486 	.word	0x21004486

0100b984 <nrf_802154_csma_ca_tx_started_hook>:

bool nrf_802154_csma_ca_tx_started_hook(uint8_t * p_frame)
{
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    if (mp_data == p_frame)
 100b984:	4a06      	ldr	r2, [pc, #24]	; (100b9a0 <nrf_802154_csma_ca_tx_started_hook+0x1c>)
 100b986:	6813      	ldr	r3, [r2, #0]
 100b988:	4283      	cmp	r3, r0
 100b98a:	d107      	bne.n	100b99c <nrf_802154_csma_ca_tx_started_hook+0x18>
    {
        mp_data = NULL;
 100b98c:	2300      	movs	r3, #0
 100b98e:	6013      	str	r3, [r2, #0]
 100b990:	f3bf 8f5f 	dmb	sy
 100b994:	4a03      	ldr	r2, [pc, #12]	; (100b9a4 <nrf_802154_csma_ca_tx_started_hook+0x20>)
 100b996:	7013      	strb	r3, [r2, #0]
 100b998:	f3bf 8f5f 	dmb	sy
        nrf_802154_sl_atomic_store_u8(&m_state, CSMA_CA_STATE_IDLE);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return true;
}
 100b99c:	2001      	movs	r0, #1
 100b99e:	4770      	bx	lr
 100b9a0:	21003420 	.word	0x21003420
 100b9a4:	21004486 	.word	0x21004486

0100b9a8 <dly_tx_result_notify>:
 * Transmit request result callback.
 *
 * @param[in]  result  Result of TX request.
 */
static void dly_tx_result_notify(bool result)
{
 100b9a8:	b510      	push	{r4, lr}
    if (id == m_dly_tx_data[0].id)
 100b9aa:	4c0b      	ldr	r4, [pc, #44]	; (100b9d8 <dly_tx_result_notify+0x30>)
    // Currently there's only a single delayed transmission possible at a time
    dly_op_data_t * p_dly_op_data = dly_tx_data_by_id_search(NRF_802154_RESERVED_DTX_ID);

    assert(p_dly_op_data != NULL);

    if (!result)
 100b9ac:	4601      	mov	r1, r0
    if (id == m_dly_tx_data[0].id)
 100b9ae:	6863      	ldr	r3, [r4, #4]
{
 100b9b0:	b086      	sub	sp, #24
    return NULL;
 100b9b2:	3304      	adds	r3, #4
 100b9b4:	bf18      	it	ne
 100b9b6:	2400      	movne	r4, #0
    if (!result)
 100b9b8:	b958      	cbnz	r0, 100b9d2 <dly_tx_result_notify+0x2a>
    {
        // core rejected attempt, use my current frame_props
        nrf_802154_transmit_done_metadata_t metadata = {};
 100b9ba:	2218      	movs	r2, #24
 100b9bc:	4668      	mov	r0, sp
 100b9be:	f007 f828 	bl	1012a12 <memset>

        metadata.frame_props = p_dly_op_data->tx.params.frame_props;
 100b9c2:	8aa3      	ldrh	r3, [r4, #20]
        nrf_802154_notify_transmit_failed(p_dly_op_data->tx.p_data,
 100b9c4:	466a      	mov	r2, sp
 100b9c6:	2107      	movs	r1, #7
 100b9c8:	6920      	ldr	r0, [r4, #16]
        metadata.frame_props = p_dly_op_data->tx.params.frame_props;
 100b9ca:	f8ad 3000 	strh.w	r3, [sp]
        nrf_802154_notify_transmit_failed(p_dly_op_data->tx.p_data,
 100b9ce:	f007 ff02 	bl	10137d6 <nrf_802154_notify_transmit_failed>
                                          NRF_802154_TX_ERROR_TIMESLOT_DENIED,
                                          &metadata);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100b9d2:	b006      	add	sp, #24
 100b9d4:	bd10      	pop	{r4, pc}
 100b9d6:	bf00      	nop
 100b9d8:	210011a0 	.word	0x210011a0

0100b9dc <tx_timeslot_started_callback>:
 * Notify that the previously requested delayed TX timeslot has started just now.
 *
 * @param[in]  dly_ts_id  ID of the started timeslot.
 */
static void tx_timeslot_started_callback(rsch_dly_ts_id_t dly_ts_id)
{
 100b9dc:	b513      	push	{r0, r1, r4, lr}
    if (id == m_dly_tx_data[0].id)
 100b9de:	4c19      	ldr	r4, [pc, #100]	; (100ba44 <tx_timeslot_started_callback+0x68>)

    dly_op_data_t * p_dly_op_data = dly_tx_data_by_id_search(dly_ts_id);

    assert(p_dly_op_data != NULL);

    bool result = dly_op_state_set(p_dly_op_data,
 100b9e0:	2204      	movs	r2, #4
    if (id == m_dly_tx_data[0].id)
 100b9e2:	6863      	ldr	r3, [r4, #4]
    bool result = dly_op_state_set(p_dly_op_data,
 100b9e4:	2102      	movs	r1, #2
    if (id == m_dly_tx_data[0].id)
 100b9e6:	4298      	cmp	r0, r3
 100b9e8:	d125      	bne.n	100ba36 <tx_timeslot_started_callback+0x5a>
    bool result = dly_op_state_set(p_dly_op_data,
 100b9ea:	4620      	mov	r0, r4
 100b9ec:	f007 fdab 	bl	1013546 <dly_op_state_set>
    nrf_802154_pib_channel_set(p_dly_op_data->tx.channel);
 100b9f0:	7ee0      	ldrb	r0, [r4, #27]
 100b9f2:	f7fe fba1 	bl	100a138 <nrf_802154_pib_channel_set>
    if (nrf_802154_request_channel_update(REQ_ORIG_DELAYED_TRX))
 100b9f6:	2005      	movs	r0, #5
 100b9f8:	f008 f80a 	bl	1013a10 <nrf_802154_request_channel_update>
 100b9fc:	b1c0      	cbz	r0, 100ba30 <tx_timeslot_started_callback+0x54>
        (void)nrf_802154_request_transmit(NRF_802154_TERM_802154,
 100b9fe:	4b12      	ldr	r3, [pc, #72]	; (100ba48 <tx_timeslot_started_callback+0x6c>)
 100ba00:	2105      	movs	r1, #5
 100ba02:	9300      	str	r3, [sp, #0]
 100ba04:	2001      	movs	r0, #1
 100ba06:	6922      	ldr	r2, [r4, #16]
 100ba08:	f104 0314 	add.w	r3, r4, #20
 100ba0c:	f007 ff42 	bl	1013894 <nrf_802154_request_transmit>
    result = nrf_802154_rsch_delayed_timeslot_cancel(p_dly_op_data->id, handler);
 100ba10:	2101      	movs	r1, #1
 100ba12:	6860      	ldr	r0, [r4, #4]
 100ba14:	f009 fc05 	bl	1015222 <nrf_802154_rsch_delayed_timeslot_cancel>
    if (result)
 100ba18:	b110      	cbz	r0, 100ba20 <tx_timeslot_started_callback+0x44>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100ba1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100ba1e:	6063      	str	r3, [r4, #4]
    transmit_attempt(p_dly_op_data);

    result = dly_ts_slot_release(p_dly_op_data, true);
    assert(result);

    result = dly_op_state_set(p_dly_op_data,
 100ba20:	2201      	movs	r2, #1
 100ba22:	2104      	movs	r1, #4
 100ba24:	4807      	ldr	r0, [pc, #28]	; (100ba44 <tx_timeslot_started_callback+0x68>)
                              DELAYED_TRX_OP_STATE_STOPPED);
    assert(result);
    (void)result;

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100ba26:	b002      	add	sp, #8
 100ba28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    result = dly_op_state_set(p_dly_op_data,
 100ba2c:	f007 bd8b 	b.w	1013546 <dly_op_state_set>
        dly_tx_result_notify(false);
 100ba30:	f7ff ffba 	bl	100b9a8 <dly_tx_result_notify>
 100ba34:	e7ec      	b.n	100ba10 <tx_timeslot_started_callback+0x34>
    bool result = dly_op_state_set(p_dly_op_data,
 100ba36:	2000      	movs	r0, #0
 100ba38:	f007 fd85 	bl	1013546 <dly_op_state_set>
    nrf_802154_pib_channel_set(p_dly_op_data->tx.channel);
 100ba3c:	2300      	movs	r3, #0
 100ba3e:	7edb      	ldrb	r3, [r3, #27]
 100ba40:	deff      	udf	#255	; 0xff
 100ba42:	bf00      	nop
 100ba44:	210011a0 	.word	0x210011a0
 100ba48:	0100b9a9 	.word	0x0100b9a9

0100ba4c <dly_rx_all_ongoing_abort>:
{
 100ba4c:	b510      	push	{r4, lr}
        ret = nrf_802154_sl_timer_remove(&p_dly_op_data->rx.timeout_timer);
 100ba4e:	4814      	ldr	r0, [pc, #80]	; (100baa0 <dly_rx_all_ongoing_abort+0x54>)
 100ba50:	f005 ff68 	bl	1011924 <nrf_802154_sl_timer_remove>
        if (ret != NRF_802154_SL_TIMER_RET_SUCCESS)
 100ba54:	4602      	mov	r2, r0
 100ba56:	b960      	cbnz	r0, 100ba72 <dly_rx_all_ongoing_abort+0x26>
        bool notified = nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_DELAYED_ABORTED,
 100ba58:	4c12      	ldr	r4, [pc, #72]	; (100baa4 <dly_rx_all_ongoing_abort+0x58>)
 100ba5a:	200a      	movs	r0, #10
 100ba5c:	6861      	ldr	r1, [r4, #4]
 100ba5e:	f007 fead 	bl	10137bc <nrf_802154_notify_receive_failed>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100ba62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        result = dly_op_state_set(p_dly_op_data,
 100ba66:	2201      	movs	r2, #1
 100ba68:	2104      	movs	r1, #4
 100ba6a:	4620      	mov	r0, r4
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100ba6c:	6063      	str	r3, [r4, #4]
        result = dly_op_state_set(p_dly_op_data,
 100ba6e:	f007 fd6a 	bl	1013546 <dly_op_state_set>
        ret = nrf_802154_sl_timer_remove(&p_dly_op_data->rx.timeout_timer);
 100ba72:	480d      	ldr	r0, [pc, #52]	; (100baa8 <dly_rx_all_ongoing_abort+0x5c>)
 100ba74:	f005 ff56 	bl	1011924 <nrf_802154_sl_timer_remove>
        if (ret != NRF_802154_SL_TIMER_RET_SUCCESS)
 100ba78:	4602      	mov	r2, r0
 100ba7a:	b978      	cbnz	r0, 100ba9c <dly_rx_all_ongoing_abort+0x50>
        bool notified = nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_DELAYED_ABORTED,
 100ba7c:	4c09      	ldr	r4, [pc, #36]	; (100baa4 <dly_rx_all_ongoing_abort+0x58>)
 100ba7e:	200a      	movs	r0, #10
 100ba80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 100ba82:	f007 fe9b 	bl	10137bc <nrf_802154_notify_receive_failed>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100ba86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100ba8a:	65e3      	str	r3, [r4, #92]	; 0x5c
        result = dly_op_state_set(p_dly_op_data,
 100ba8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 100ba90:	2201      	movs	r2, #1
}
 100ba92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        result = dly_op_state_set(p_dly_op_data,
 100ba96:	2104      	movs	r1, #4
 100ba98:	f007 bd55 	b.w	1013546 <dly_op_state_set>
}
 100ba9c:	bd10      	pop	{r4, pc}
 100ba9e:	bf00      	nop
 100baa0:	21001208 	.word	0x21001208
 100baa4:	210011f8 	.word	0x210011f8
 100baa8:	21001260 	.word	0x21001260

0100baac <dly_rx_result_notify>:
{
 100baac:	b570      	push	{r4, r5, r6, lr}
 100baae:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100bab0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 100bab4:	b672      	cpsid	i
    dly_op_data_t ** pp_op = (dly_op_data_t **)nrf_802154_queue_pop_begin(&m_dly_rx_id_q);
 100bab6:	4818      	ldr	r0, [pc, #96]	; (100bb18 <dly_rx_result_notify+0x6c>)
 100bab8:	f007 fcc4 	bl	1013444 <nrf_802154_queue_pop_begin>
 100babc:	4604      	mov	r4, r0
    nrf_802154_queue_pop_commit(&m_dly_rx_id_q);
 100babe:	4816      	ldr	r0, [pc, #88]	; (100bb18 <dly_rx_result_notify+0x6c>)
 100bac0:	f007 fcc6 	bl	1013450 <nrf_802154_queue_pop_commit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100bac4:	f386 8810 	msr	PRIMASK, r6
    return *pp_op;
 100bac8:	6824      	ldr	r4, [r4, #0]
    if (p_dly_op_data == NULL)
 100baca:	b324      	cbz	r4, 100bb16 <dly_rx_result_notify+0x6a>
    if (result)
 100bacc:	b1e5      	cbz	r5, 100bb08 <dly_rx_result_notify+0x5c>
        dly_rx_all_ongoing_abort();
 100bace:	f7ff ffbd 	bl	100ba4c <dly_rx_all_ongoing_abort>
        now = nrf_802154_sl_timer_current_time_get();
 100bad2:	f009 fc11 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
 100bad6:	4602      	mov	r2, r0
 100bad8:	460b      	mov	r3, r1
        p_dly_op_data->rx.timeout_timer.trigger_time        = now + tout_len;
 100bada:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 100badc:	2000      	movs	r0, #0
 100bade:	1889      	adds	r1, r1, r2
 100bae0:	f143 0500 	adc.w	r5, r3, #0
 100bae4:	e9c4 1508 	strd	r1, r5, [r4, #32]
        p_dly_op_data->rx.timeout_timer.action_type         =
 100bae8:	2101      	movs	r1, #1
        p_dly_op_data->rx.extension_frame.sof_timestamp = now;
 100baea:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
        p_dly_op_data->rx.timeout_timer.user_data.p_pointer = p_dly_op_data;
 100baee:	62a4      	str	r4, [r4, #40]	; 0x28
        p_dly_op_data->rx.extension_frame.psdu_length   = 0;
 100baf0:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
        p_dly_op_data->rx.timeout_timer.action_type         =
 100baf4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
        p_dly_op_data->rx.extension_frame.ack_requested = false;
 100baf8:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
        ret = nrf_802154_sl_timer_add(&p_dly_op_data->rx.timeout_timer);
 100bafc:	f104 0010 	add.w	r0, r4, #16
}
 100bb00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = nrf_802154_sl_timer_add(&p_dly_op_data->rx.timeout_timer);
 100bb04:	f005 beee 	b.w	10118e4 <nrf_802154_sl_timer_add>
        bool notified = nrf_802154_notify_receive_failed(
 100bb08:	462a      	mov	r2, r5
 100bb0a:	6861      	ldr	r1, [r4, #4]
 100bb0c:	2007      	movs	r0, #7
}
 100bb0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bool notified = nrf_802154_notify_receive_failed(
 100bb12:	f007 be53 	b.w	10137bc <nrf_802154_notify_receive_failed>
}
 100bb16:	bd70      	pop	{r4, r5, r6, pc}
 100bb18:	2100342c 	.word	0x2100342c

0100bb1c <rx_timeslot_started_callback>:
 * Notify that the previously requested delayed RX timeslot has started just now.
 *
 * @param[in]  dly_ts_id  ID of the started timeslot.
 */
static void rx_timeslot_started_callback(rsch_dly_ts_id_t dly_ts_id)
{
 100bb1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        if (m_dly_rx_data[i].id == id)
 100bb1e:	4c25      	ldr	r4, [pc, #148]	; (100bbb4 <rx_timeslot_started_callback+0x98>)
{
 100bb20:	4605      	mov	r5, r0
        if (m_dly_rx_data[i].id == id)
 100bb22:	6863      	ldr	r3, [r4, #4]
 100bb24:	4298      	cmp	r0, r3
 100bb26:	d003      	beq.n	100bb30 <rx_timeslot_started_callback+0x14>
 100bb28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 100bb2a:	4298      	cmp	r0, r3
 100bb2c:	d140      	bne.n	100bbb0 <rx_timeslot_started_callback+0x94>
                p_dly_op_data = &m_dly_rx_data[i];
 100bb2e:	3458      	adds	r4, #88	; 0x58
        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
        return;
    }

    bool attempt_success = false;
    bool result          = dly_op_state_set(p_dly_op_data,
 100bb30:	2204      	movs	r2, #4
 100bb32:	2102      	movs	r1, #2
 100bb34:	4620      	mov	r0, r4
 100bb36:	f007 fd06 	bl	1013546 <dly_op_state_set>
                                            DELAYED_TRX_OP_STATE_PENDING,
                                            DELAYED_TRX_OP_STATE_ONGOING);

    if (result)
 100bb3a:	b3a0      	cbz	r0, 100bba6 <rx_timeslot_started_callback+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100bb3c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 100bb40:	b672      	cpsid	i
    dly_op_data_t ** pp_op = (dly_op_data_t **)nrf_802154_queue_push_begin(&m_dly_rx_id_q);
 100bb42:	481d      	ldr	r0, [pc, #116]	; (100bbb8 <rx_timeslot_started_callback+0x9c>)
 100bb44:	f007 fc6f 	bl	1013426 <nrf_802154_queue_push_begin>
    *pp_op = p_dly_op_data;
 100bb48:	6004      	str	r4, [r0, #0]
    nrf_802154_queue_push_commit(&m_dly_rx_id_q);
 100bb4a:	481b      	ldr	r0, [pc, #108]	; (100bbb8 <rx_timeslot_started_callback+0x9c>)
 100bb4c:	f007 fc71 	bl	1013432 <nrf_802154_queue_push_commit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100bb50:	f386 8810 	msr	PRIMASK, r6
    if (nrf_802154_pib_channel_get() != p_dly_op_data->rx.channel)
 100bb54:	f7fe faea 	bl	100a12c <nrf_802154_pib_channel_get>
 100bb58:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 100bb5c:	4298      	cmp	r0, r3
 100bb5e:	d118      	bne.n	100bb92 <rx_timeslot_started_callback+0x76>
        result = nrf_802154_request_receive(NRF_802154_TERM_802154,
 100bb60:	6863      	ldr	r3, [r4, #4]
 100bb62:	2105      	movs	r1, #5
 100bb64:	9300      	str	r3, [sp, #0]
 100bb66:	2301      	movs	r3, #1
 100bb68:	4a14      	ldr	r2, [pc, #80]	; (100bbbc <rx_timeslot_started_callback+0xa0>)
 100bb6a:	4618      	mov	r0, r3
 100bb6c:	f007 fe65 	bl	101383a <nrf_802154_request_receive>
 100bb70:	4606      	mov	r6, r0
    {
        attempt_success = receive_attempt(p_dly_op_data);
    }

    result = nrf_802154_rsch_delayed_timeslot_cancel(dly_ts_id, true);
 100bb72:	2101      	movs	r1, #1
 100bb74:	4628      	mov	r0, r5
 100bb76:	f009 fb54 	bl	1015222 <nrf_802154_rsch_delayed_timeslot_cancel>
    assert(result);

    if (!attempt_success)
 100bb7a:	b9ce      	cbnz	r6, 100bbb0 <rx_timeslot_started_callback+0x94>
    {
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100bb7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

        result = dly_op_state_set(p_dly_op_data,
 100bb80:	2201      	movs	r2, #1
 100bb82:	2104      	movs	r1, #4
 100bb84:	4620      	mov	r0, r4
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100bb86:	6063      	str	r3, [r4, #4]
                                  DELAYED_TRX_OP_STATE_STOPPED);
        assert(result);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
 100bb88:	b002      	add	sp, #8
 100bb8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        result = dly_op_state_set(p_dly_op_data,
 100bb8e:	f007 bcda 	b.w	1013546 <dly_op_state_set>
        nrf_802154_pib_channel_set(p_dly_op_data->rx.channel);
 100bb92:	4618      	mov	r0, r3
 100bb94:	f7fe fad0 	bl	100a138 <nrf_802154_pib_channel_set>
        channel_update_success = nrf_802154_request_channel_update(REQ_ORIG_DELAYED_TRX);
 100bb98:	2005      	movs	r0, #5
 100bb9a:	f007 ff39 	bl	1013a10 <nrf_802154_request_channel_update>
    if (channel_update_success)
 100bb9e:	2800      	cmp	r0, #0
 100bba0:	d1de      	bne.n	100bb60 <rx_timeslot_started_callback+0x44>
        dly_rx_result_notify(result);
 100bba2:	f7ff ff83 	bl	100baac <dly_rx_result_notify>
    result = nrf_802154_rsch_delayed_timeslot_cancel(dly_ts_id, true);
 100bba6:	2101      	movs	r1, #1
 100bba8:	4628      	mov	r0, r5
 100bbaa:	f009 fb3a 	bl	1015222 <nrf_802154_rsch_delayed_timeslot_cancel>
    if (!attempt_success)
 100bbae:	e7e5      	b.n	100bb7c <rx_timeslot_started_callback+0x60>
}
 100bbb0:	b002      	add	sp, #8
 100bbb2:	bd70      	pop	{r4, r5, r6, pc}
 100bbb4:	210011f8 	.word	0x210011f8
 100bbb8:	2100342c 	.word	0x2100342c
 100bbbc:	0100baad 	.word	0x0100baad

0100bbc0 <nrf_802154_delayed_trx_init>:
}

#endif // TEST

void nrf_802154_delayed_trx_init(void)
{
 100bbc0:	b570      	push	{r4, r5, r6, lr}
                          sizeof(m_dly_rx_id_q_mem),
                          sizeof(m_dly_rx_id_q_mem[0]));

    for (uint32_t i = 0; i < sizeof(m_dly_rx_data) / sizeof(m_dly_rx_data[0]); i++)
    {
        m_dly_rx_data[i].state = DELAYED_TRX_OP_STATE_STOPPED;
 100bbc2:	2601      	movs	r6, #1
        m_dly_rx_data[i].id    = NRF_802154_RESERVED_INVALID_ID;
 100bbc4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        m_dly_rx_data[i].state = DELAYED_TRX_OP_STATE_STOPPED;
 100bbc8:	4c0b      	ldr	r4, [pc, #44]	; (100bbf8 <nrf_802154_delayed_trx_init+0x38>)
    nrf_802154_queue_init(&m_dly_rx_id_q,
 100bbca:	2304      	movs	r3, #4
 100bbcc:	2208      	movs	r2, #8
 100bbce:	490b      	ldr	r1, [pc, #44]	; (100bbfc <nrf_802154_delayed_trx_init+0x3c>)
 100bbd0:	480b      	ldr	r0, [pc, #44]	; (100bc00 <nrf_802154_delayed_trx_init+0x40>)
 100bbd2:	f007 fc1f 	bl	1013414 <nrf_802154_queue_init>
        nrf_802154_sl_timer_init(&m_dly_rx_data[i].rx.timeout_timer);
 100bbd6:	f104 0010 	add.w	r0, r4, #16
        m_dly_rx_data[i].state = DELAYED_TRX_OP_STATE_STOPPED;
 100bbda:	7026      	strb	r6, [r4, #0]
        m_dly_rx_data[i].id    = NRF_802154_RESERVED_INVALID_ID;
 100bbdc:	6065      	str	r5, [r4, #4]
        nrf_802154_sl_timer_init(&m_dly_rx_data[i].rx.timeout_timer);
 100bbde:	f009 fb92 	bl	1015306 <nrf_802154_sl_timer_init>
 100bbe2:	f104 0068 	add.w	r0, r4, #104	; 0x68
        m_dly_rx_data[i].state = DELAYED_TRX_OP_STATE_STOPPED;
 100bbe6:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
        m_dly_rx_data[i].id    = NRF_802154_RESERVED_INVALID_ID;
 100bbea:	65e5      	str	r5, [r4, #92]	; 0x5c
        nrf_802154_sl_timer_init(&m_dly_rx_data[i].rx.timeout_timer);
 100bbec:	f009 fb8b 	bl	1015306 <nrf_802154_sl_timer_init>
    }

    for (uint32_t i = 0; i < sizeof(m_dly_tx_data) / sizeof(m_dly_tx_data[0]); i++)
    {
        m_dly_tx_data[i].state = DELAYED_TRX_OP_STATE_STOPPED;
 100bbf0:	4b04      	ldr	r3, [pc, #16]	; (100bc04 <nrf_802154_delayed_trx_init+0x44>)
 100bbf2:	701e      	strb	r6, [r3, #0]
        m_dly_tx_data[i].id    = NRF_802154_RESERVED_INVALID_ID;
 100bbf4:	605d      	str	r5, [r3, #4]
    }
}
 100bbf6:	bd70      	pop	{r4, r5, r6, pc}
 100bbf8:	210011f8 	.word	0x210011f8
 100bbfc:	21003424 	.word	0x21003424
 100bc00:	2100342c 	.word	0x2100342c
 100bc04:	210011a0 	.word	0x210011a0

0100bc08 <nrf_802154_delayed_trx_transmit>:
}

bool nrf_802154_delayed_trx_transmit(uint8_t                                 * p_data,
                                     uint64_t                                  tx_time,
                                     const nrf_802154_transmit_at_metadata_t * p_metadata)
{
 100bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return available_dly_ts_slot_from_pool_get(
 100bc0c:	2101      	movs	r1, #1
{
 100bc0e:	b086      	sub	sp, #24
 100bc10:	4607      	mov	r7, r0
    return available_dly_ts_slot_from_pool_get(
 100bc12:	4828      	ldr	r0, [pc, #160]	; (100bcb4 <nrf_802154_delayed_trx_transmit+0xac>)
{
 100bc14:	4615      	mov	r5, r2
 100bc16:	461e      	mov	r6, r3
 100bc18:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    return available_dly_ts_slot_from_pool_get(
 100bc1c:	f007 fcaa 	bl	1013574 <available_dly_ts_slot_from_pool_get>
    dly_op_data_t * p_dly_tx_data = available_dly_tx_slot_get();
    bool            result        = false;

    if (p_dly_tx_data != NULL)
 100bc20:	4604      	mov	r4, r0
 100bc22:	2800      	cmp	r0, #0
 100bc24:	d043      	beq.n	100bcae <nrf_802154_delayed_trx_transmit+0xa6>
    {
        tx_time -= TX_SETUP_TIME;
        tx_time -= TX_RAMP_UP_TIME;

        if (p_metadata->cca)
 100bc26:	f898 3002 	ldrb.w	r3, [r8, #2]
 100bc2a:	bbd3      	cbnz	r3, 100bca2 <nrf_802154_delayed_trx_transmit+0x9a>
        tx_time -= TX_RAMP_UP_TIME;
 100bc2c:	3df3      	subs	r5, #243	; 0xf3
 100bc2e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
        {
            tx_time -= nrf_802154_cca_before_tx_duration_get();
        }

        p_dly_tx_data->op = RSCH_DLY_TS_OP_DTX;
 100bc32:	2300      	movs	r3, #0

        p_dly_tx_data->tx.p_data             = p_data;
 100bc34:	6127      	str	r7, [r4, #16]
        p_dly_tx_data->tx.params.frame_props = p_metadata->frame_props;
        (void)nrf_802154_tx_power_convert_metadata_to_tx_power_split(p_metadata->channel,
                                                                     p_metadata->tx_power,
                                                                     &p_dly_tx_data->tx.params.tx_power);
        p_dly_tx_data->tx.params.cca       = p_metadata->cca;
        p_dly_tx_data->tx.params.immediate = true;
 100bc36:	2701      	movs	r7, #1
        p_dly_tx_data->op = RSCH_DLY_TS_OP_DTX;
 100bc38:	7223      	strb	r3, [r4, #8]
        p_dly_tx_data->tx.params.frame_props = p_metadata->frame_props;
 100bc3a:	f8b8 3000 	ldrh.w	r3, [r8]
        (void)nrf_802154_tx_power_convert_metadata_to_tx_power_split(p_metadata->channel,
 100bc3e:	f104 0216 	add.w	r2, r4, #22
        p_dly_tx_data->tx.params.frame_props = p_metadata->frame_props;
 100bc42:	82a3      	strh	r3, [r4, #20]
        (void)nrf_802154_tx_power_convert_metadata_to_tx_power_split(p_metadata->channel,
 100bc44:	f898 3004 	ldrb.w	r3, [r8, #4]
 100bc48:	f898 1005 	ldrb.w	r1, [r8, #5]
 100bc4c:	f898 0003 	ldrb.w	r0, [r8, #3]
 100bc50:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 100bc54:	f007 fc55 	bl	1013502 <nrf_802154_tx_power_convert_metadata_to_tx_power_split>
        p_dly_tx_data->tx.params.cca       = p_metadata->cca;
 100bc58:	f898 3002 	ldrb.w	r3, [r8, #2]
        p_dly_tx_data->tx.params.immediate = true;
 100bc5c:	76a7      	strb	r7, [r4, #26]
        p_dly_tx_data->tx.params.cca       = p_metadata->cca;
 100bc5e:	7663      	strb	r3, [r4, #25]
        p_dly_tx_data->tx.channel          = p_metadata->channel;
 100bc60:	f898 3003 	ldrb.w	r3, [r8, #3]
        p_dly_tx_data->id                  = NRF_802154_RESERVED_DTX_ID;

        rsch_dly_ts_param_t dly_ts_param =
 100bc64:	2204      	movs	r2, #4
        p_dly_tx_data->tx.channel          = p_metadata->channel;
 100bc66:	76e3      	strb	r3, [r4, #27]
        p_dly_tx_data->id                  = NRF_802154_RESERVED_DTX_ID;
 100bc68:	f06f 0303 	mvn.w	r3, #3
 100bc6c:	6063      	str	r3, [r4, #4]
        rsch_dly_ts_param_t dly_ts_param =
 100bc6e:	f8ad 2008 	strh.w	r2, [sp, #8]
 100bc72:	4a11      	ldr	r2, [pc, #68]	; (100bcb8 <nrf_802154_delayed_trx_transmit+0xb0>)
    bool result = nrf_802154_rsch_delayed_timeslot_request(p_dly_ts_param);
 100bc74:	4668      	mov	r0, sp
        rsch_dly_ts_param_t dly_ts_param =
 100bc76:	e9cd 5600 	strd	r5, r6, [sp]
 100bc7a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 100bc7e:	f88d 700a 	strb.w	r7, [sp, #10]
    bool result = nrf_802154_rsch_delayed_timeslot_request(p_dly_ts_param);
 100bc82:	f005 fced 	bl	1011660 <nrf_802154_rsch_delayed_timeslot_request>
    if (!result)
 100bc86:	4605      	mov	r5, r0
 100bc88:	b938      	cbnz	r0, 100bc9a <nrf_802154_delayed_trx_transmit+0x92>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100bc8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        bool state_set = dly_op_state_set(p_dly_op_data,
 100bc8e:	463a      	mov	r2, r7
 100bc90:	2102      	movs	r1, #2
 100bc92:	4620      	mov	r0, r4
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100bc94:	6063      	str	r3, [r4, #4]
        bool state_set = dly_op_state_set(p_dly_op_data,
 100bc96:	f007 fc56 	bl	1013546 <dly_op_state_set>

        result = dly_op_request(&dly_ts_param, p_dly_tx_data);
    }

    return result;
}
 100bc9a:	4628      	mov	r0, r5
 100bc9c:	b006      	add	sp, #24
 100bc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tx_time -= nrf_802154_cca_before_tx_duration_get();
 100bca2:	f46f 73c3 	mvn.w	r3, #390	; 0x186
 100bca6:	18ed      	adds	r5, r5, r3
 100bca8:	f166 0600 	sbc.w	r6, r6, #0
 100bcac:	e7c1      	b.n	100bc32 <nrf_802154_delayed_trx_transmit+0x2a>
    bool            result        = false;
 100bcae:	4605      	mov	r5, r0
 100bcb0:	e7f3      	b.n	100bc9a <nrf_802154_delayed_trx_transmit+0x92>
 100bcb2:	bf00      	nop
 100bcb4:	210011a0 	.word	0x210011a0
 100bcb8:	0100b9dd 	.word	0x0100b9dd

0100bcbc <nrf_802154_delayed_trx_receive>:

bool nrf_802154_delayed_trx_receive(uint64_t rx_time,
                                    uint32_t timeout,
                                    uint8_t  channel,
                                    uint32_t id)
{
 100bcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 100bcc0:	4605      	mov	r5, r0
 100bcc2:	b086      	sub	sp, #24
 100bcc4:	460e      	mov	r6, r1
    return available_dly_ts_slot_from_pool_get(
 100bcc6:	481c      	ldr	r0, [pc, #112]	; (100bd38 <nrf_802154_delayed_trx_receive+0x7c>)
 100bcc8:	2102      	movs	r1, #2
{
 100bcca:	4617      	mov	r7, r2
 100bccc:	469a      	mov	sl, r3
 100bcce:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    return available_dly_ts_slot_from_pool_get(
 100bcd2:	f007 fc4f 	bl	1013574 <available_dly_ts_slot_from_pool_get>
    dly_op_data_t * p_dly_rx_data = available_dly_rx_slot_get();
    bool            result        = false;

    if (p_dly_rx_data != NULL)
 100bcd6:	4604      	mov	r4, r0
 100bcd8:	b358      	cbz	r0, 100bd32 <nrf_802154_delayed_trx_receive+0x76>
        rx_time -= RX_RAMP_UP_TIME;

        p_dly_rx_data->op = RSCH_DLY_TS_OP_DRX;

        p_dly_rx_data->rx.timeout_length                         = timeout + RX_RAMP_UP_TIME;
        p_dly_rx_data->rx.timeout_timer.action.callback.callback = notify_rx_timeout;
 100bcda:	4b18      	ldr	r3, [pc, #96]	; (100bd3c <nrf_802154_delayed_trx_receive+0x80>)
        p_dly_rx_data->op = RSCH_DLY_TS_OP_DRX;
 100bcdc:	f04f 0801 	mov.w	r8, #1
        p_dly_rx_data->rx.timeout_timer.action.callback.callback = notify_rx_timeout;
 100bce0:	6303      	str	r3, [r0, #48]	; 0x30

        p_dly_rx_data->rx.channel = channel;
        p_dly_rx_data->id         = id;

        rsch_dly_ts_param_t dly_ts_param =
 100bce2:	f240 1301 	movw	r3, #257	; 0x101
        p_dly_rx_data->op = RSCH_DLY_TS_OP_DRX;
 100bce6:	f880 8008 	strb.w	r8, [r0, #8]
        p_dly_rx_data->id         = id;
 100bcea:	f8c0 9004 	str.w	r9, [r0, #4]
        rx_time -= RX_RAMP_UP_TIME;
 100bcee:	3d96      	subs	r5, #150	; 0x96
        rsch_dly_ts_param_t dly_ts_param =
 100bcf0:	f8ad 3008 	strh.w	r3, [sp, #8]
        p_dly_rx_data->rx.timeout_length                         = timeout + RX_RAMP_UP_TIME;
 100bcf4:	f107 0728 	add.w	r7, r7, #40	; 0x28
        rsch_dly_ts_param_t dly_ts_param =
 100bcf8:	4b11      	ldr	r3, [pc, #68]	; (100bd40 <nrf_802154_delayed_trx_receive+0x84>)
        p_dly_rx_data->rx.timeout_length                         = timeout + RX_RAMP_UP_TIME;
 100bcfa:	6387      	str	r7, [r0, #56]	; 0x38
        p_dly_rx_data->rx.channel = channel;
 100bcfc:	f880 a050 	strb.w	sl, [r0, #80]	; 0x50
        rx_time -= RX_RAMP_UP_TIME;
 100bd00:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    bool result = nrf_802154_rsch_delayed_timeslot_request(p_dly_ts_param);
 100bd04:	4668      	mov	r0, sp
        rsch_dly_ts_param_t dly_ts_param =
 100bd06:	e9cd 5600 	strd	r5, r6, [sp]
 100bd0a:	e9cd 3903 	strd	r3, r9, [sp, #12]
 100bd0e:	f88d 800a 	strb.w	r8, [sp, #10]
    bool result = nrf_802154_rsch_delayed_timeslot_request(p_dly_ts_param);
 100bd12:	f005 fca5 	bl	1011660 <nrf_802154_rsch_delayed_timeslot_request>
    if (!result)
 100bd16:	4605      	mov	r5, r0
 100bd18:	b938      	cbnz	r0, 100bd2a <nrf_802154_delayed_trx_receive+0x6e>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100bd1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        bool state_set = dly_op_state_set(p_dly_op_data,
 100bd1e:	4642      	mov	r2, r8
 100bd20:	2102      	movs	r1, #2
 100bd22:	4620      	mov	r0, r4
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100bd24:	6063      	str	r3, [r4, #4]
        bool state_set = dly_op_state_set(p_dly_op_data,
 100bd26:	f007 fc0e 	bl	1013546 <dly_op_state_set>

        result = dly_op_request(&dly_ts_param, p_dly_rx_data);
    }

    return result;
}
 100bd2a:	4628      	mov	r0, r5
 100bd2c:	b006      	add	sp, #24
 100bd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bool            result        = false;
 100bd32:	4605      	mov	r5, r0
 100bd34:	e7f9      	b.n	100bd2a <nrf_802154_delayed_trx_receive+0x6e>
 100bd36:	bf00      	nop
 100bd38:	210011f8 	.word	0x210011f8
 100bd3c:	0101359d 	.word	0x0101359d
 100bd40:	0100bb1d 	.word	0x0100bb1d

0100bd44 <nrf_802154_delayed_trx_transmit_cancel>:

bool nrf_802154_delayed_trx_transmit_cancel(void)
{
 100bd44:	b510      	push	{r4, lr}
    result = nrf_802154_rsch_delayed_timeslot_cancel(p_dly_op_data->id, handler);
 100bd46:	4c08      	ldr	r4, [pc, #32]	; (100bd68 <nrf_802154_delayed_trx_transmit_cancel+0x24>)
 100bd48:	2100      	movs	r1, #0
 100bd4a:	6860      	ldr	r0, [r4, #4]
 100bd4c:	f009 fa69 	bl	1015222 <nrf_802154_rsch_delayed_timeslot_cancel>
    if (result)
 100bd50:	b148      	cbz	r0, 100bd66 <nrf_802154_delayed_trx_transmit_cancel+0x22>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100bd52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100bd56:	6063      	str	r3, [r4, #4]
    dly_op_data_t * p_dly_op_data = &m_dly_tx_data[0];
    bool            result        = false;

    if (dly_ts_slot_release(p_dly_op_data, false))
    {
        result = dly_op_state_set(p_dly_op_data,
 100bd58:	4620      	mov	r0, r4

        assert(result);
    }

    return result;
}
 100bd5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        result = dly_op_state_set(p_dly_op_data,
 100bd5e:	2201      	movs	r2, #1
 100bd60:	2102      	movs	r1, #2
 100bd62:	f007 bbf0 	b.w	1013546 <dly_op_state_set>
}
 100bd66:	bd10      	pop	{r4, pc}
 100bd68:	210011a0 	.word	0x210011a0

0100bd6c <nrf_802154_delayed_trx_receive_cancel>:

bool nrf_802154_delayed_trx_receive_cancel(uint32_t id)
{
 100bd6c:	b538      	push	{r3, r4, r5, lr}
        if (m_dly_rx_data[i].id == id)
 100bd6e:	4c0f      	ldr	r4, [pc, #60]	; (100bdac <nrf_802154_delayed_trx_receive_cancel+0x40>)
 100bd70:	6863      	ldr	r3, [r4, #4]
 100bd72:	4298      	cmp	r0, r3
 100bd74:	d005      	beq.n	100bd82 <nrf_802154_delayed_trx_receive_cancel+0x16>
 100bd76:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 100bd78:	4298      	cmp	r0, r3
 100bd7a:	d001      	beq.n	100bd80 <nrf_802154_delayed_trx_receive_cancel+0x14>
    bool            stopped       = false;

    if (p_dly_op_data == NULL)
    {
        // Delayed receive window with provided ID could not be found.
        return false;
 100bd7c:	2000      	movs	r0, #0
        nrf_802154_sl_atomic_store_u8((uint8_t *)&p_dly_op_data->state,
                                      DELAYED_TRX_OP_STATE_STOPPED);
    }

    return stopped;
}
 100bd7e:	bd38      	pop	{r3, r4, r5, pc}
                p_dly_op_data = &m_dly_rx_data[i];
 100bd80:	3458      	adds	r4, #88	; 0x58
    bool result      = nrf_802154_rsch_delayed_timeslot_cancel(id, false);
 100bd82:	2100      	movs	r1, #0
 100bd84:	f009 fa4d 	bl	1015222 <nrf_802154_rsch_delayed_timeslot_cancel>
 100bd88:	4605      	mov	r5, r0
    nrf_802154_sl_timer_ret_t ret = nrf_802154_sl_timer_remove(&p_dly_op_data->rx.timeout_timer);
 100bd8a:	f104 0010 	add.w	r0, r4, #16
 100bd8e:	f005 fdc9 	bl	1011924 <nrf_802154_sl_timer_remove>
    if (result || was_running)
 100bd92:	b90d      	cbnz	r5, 100bd98 <nrf_802154_delayed_trx_receive_cancel+0x2c>
 100bd94:	2800      	cmp	r0, #0
 100bd96:	d1f1      	bne.n	100bd7c <nrf_802154_delayed_trx_receive_cancel+0x10>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 100bd98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 100bd9c:	6063      	str	r3, [r4, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 100bd9e:	f3bf 8f5f 	dmb	sy
 100bda2:	2001      	movs	r0, #1
 100bda4:	7020      	strb	r0, [r4, #0]
 100bda6:	f3bf 8f5f 	dmb	sy
}
 100bdaa:	e7e8      	b.n	100bd7e <nrf_802154_delayed_trx_receive_cancel+0x12>
 100bdac:	210011f8 	.word	0x210011f8

0100bdb0 <nrf_802154_delayed_trx_abort>:

bool nrf_802154_delayed_trx_abort(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
 100bdb0:	b508      	push	{r3, lr}
        if (m_dly_rx_data[i].state == DELAYED_TRX_OP_STATE_ONGOING)
 100bdb2:	4b06      	ldr	r3, [pc, #24]	; (100bdcc <nrf_802154_delayed_trx_abort+0x1c>)
 100bdb4:	781a      	ldrb	r2, [r3, #0]
 100bdb6:	2a04      	cmp	r2, #4
 100bdb8:	d003      	beq.n	100bdc2 <nrf_802154_delayed_trx_abort+0x12>
 100bdba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 100bdbe:	2b04      	cmp	r3, #4
 100bdc0:	d102      	bne.n	100bdc8 <nrf_802154_delayed_trx_abort+0x18>
    {
        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
        return true;
    }

    if (term_lvl < NRF_802154_TERM_802154)
 100bdc2:	b110      	cbz	r0, 100bdca <nrf_802154_delayed_trx_abort+0x1a>
    {
        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
        return false;
    }

    dly_rx_all_ongoing_abort();
 100bdc4:	f7ff fe42 	bl	100ba4c <dly_rx_all_ongoing_abort>
        return true;
 100bdc8:	2001      	movs	r0, #1

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
    return true;
}
 100bdca:	bd08      	pop	{r3, pc}
 100bdcc:	210011f8 	.word	0x210011f8

0100bdd0 <nrf_802154_delayed_trx_rx_started_hook>:

void nrf_802154_delayed_trx_rx_started_hook(const uint8_t * p_frame)
{
 100bdd0:	b530      	push	{r4, r5, lr}
        if (m_dly_rx_data[i].state == DELAYED_TRX_OP_STATE_ONGOING)
 100bdd2:	4b12      	ldr	r3, [pc, #72]	; (100be1c <nrf_802154_delayed_trx_rx_started_hook+0x4c>)
    dly_op_data_t                * p_dly_op_data = ongoing_dly_rx_slot_get();
    nrf_802154_frame_parser_data_t frame_data;

    bool result = nrf_802154_frame_parser_data_init(p_frame,
 100bdd4:	7801      	ldrb	r1, [r0, #0]
        if (m_dly_rx_data[i].state == DELAYED_TRX_OP_STATE_ONGOING)
 100bdd6:	781a      	ldrb	r2, [r3, #0]
{
 100bdd8:	b087      	sub	sp, #28
    dly_op_data_t * p_dly_op_data = NULL;
 100bdda:	2a04      	cmp	r2, #4
 100bddc:	bf0c      	ite	eq
 100bdde:	461c      	moveq	r4, r3
 100bde0:	2400      	movne	r4, #0
        if (m_dly_rx_data[i].state == DELAYED_TRX_OP_STATE_ONGOING)
 100bde2:	f813 2f58 	ldrb.w	r2, [r3, #88]!
    bool result = nrf_802154_frame_parser_data_init(p_frame,
 100bde6:	3101      	adds	r1, #1
            p_dly_op_data = &m_dly_rx_data[i];
 100bde8:	2a04      	cmp	r2, #4
 100bdea:	bf08      	it	eq
 100bdec:	461c      	moveq	r4, r3
    bool result = nrf_802154_frame_parser_data_init(p_frame,
 100bdee:	b2c9      	uxtb	r1, r1
 100bdf0:	466b      	mov	r3, sp
 100bdf2:	2201      	movs	r2, #1
{
 100bdf4:	4605      	mov	r5, r0
    bool result = nrf_802154_frame_parser_data_init(p_frame,
 100bdf6:	f007 fc39 	bl	101366c <nrf_802154_frame_parser_data_init>
                                                    p_frame[PHR_OFFSET] + PHR_SIZE,
                                                    PARSE_LEVEL_FCF_OFFSETS,
                                                    &frame_data);

    if ((result) && (p_dly_op_data != NULL))
 100bdfa:	b168      	cbz	r0, 100be18 <nrf_802154_delayed_trx_rx_started_hook+0x48>
 100bdfc:	b164      	cbz	r4, 100be18 <nrf_802154_delayed_trx_rx_started_hook+0x48>
    {
        p_dly_op_data->rx.extension_frame.sof_timestamp = nrf_802154_sl_timer_current_time_get();
 100bdfe:	f009 fa7b 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
 100be02:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
        p_dly_op_data->rx.extension_frame.psdu_length   = p_frame[PHR_OFFSET];
 100be06:	782b      	ldrb	r3, [r5, #0]
 100be08:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
 100be0c:	9b00      	ldr	r3, [sp, #0]
 100be0e:	785b      	ldrb	r3, [r3, #1]
 100be10:	f3c3 1340 	ubfx	r3, r3, #5, #1
        p_dly_op_data->rx.extension_frame.ack_requested = nrf_802154_frame_parser_ar_bit_is_set(
 100be14:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
            &frame_data);
    }
}
 100be18:	b007      	add	sp, #28
 100be1a:	bd30      	pop	{r4, r5, pc}
 100be1c:	210011f8 	.word	0x210011f8

0100be20 <nrf_802154_delayed_trx_nearest_drx_time_to_midpoint_get>:

bool nrf_802154_delayed_trx_nearest_drx_time_to_midpoint_get(uint32_t * p_drx_time_to_midpoint)
{
 100be20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bool     result            = false;
    uint32_t min_time_to_start = 0xffffffff;
    uint64_t drx_time_to_start = UINT64_C(0xffffffff);
    uint32_t drx_time_to_midpoint;

    for (int i = 0; i < sizeof(m_dly_rx_data) / sizeof(m_dly_rx_data[0]); i++)
 100be24:	2700      	movs	r7, #0
    uint64_t drx_time_to_start = UINT64_C(0xffffffff);
 100be26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 100be2a:	2300      	movs	r3, #0
{
 100be2c:	4605      	mov	r5, r0
    uint32_t min_time_to_start = 0xffffffff;
 100be2e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    bool     result            = false;
 100be32:	4638      	mov	r0, r7
    uint64_t drx_time_to_start = UINT64_C(0xffffffff);
 100be34:	e9cd 2300 	strd	r2, r3, [sp]
    for (int i = 0; i < sizeof(m_dly_rx_data) / sizeof(m_dly_rx_data[0]); i++)
 100be38:	4c10      	ldr	r4, [pc, #64]	; (100be7c <nrf_802154_delayed_trx_nearest_drx_time_to_midpoint_get+0x5c>)
    {
        if (m_dly_rx_data[i].state != DELAYED_TRX_OP_STATE_PENDING)
 100be3a:	7823      	ldrb	r3, [r4, #0]
 100be3c:	2b02      	cmp	r3, #2
 100be3e:	d113      	bne.n	100be68 <nrf_802154_delayed_trx_nearest_drx_time_to_midpoint_get+0x48>
        {
            continue;
        }

        result = nrf_802154_rsch_delayed_timeslot_time_to_start_get(m_dly_rx_data[i].id,
 100be40:	4669      	mov	r1, sp
 100be42:	6860      	ldr	r0, [r4, #4]
 100be44:	f009 fa18 	bl	1015278 <nrf_802154_rsch_delayed_timeslot_time_to_start_get>
                                                                    &drx_time_to_start);
        drx_time_to_start += RX_SETUP_TIME + RX_RAMP_UP_TIME;
 100be48:	9b00      	ldr	r3, [sp, #0]
 100be4a:	9a01      	ldr	r2, [sp, #4]
 100be4c:	3396      	adds	r3, #150	; 0x96
 100be4e:	f142 0200 	adc.w	r2, r2, #0
 100be52:	e9cd 3200 	strd	r3, r2, [sp]

        if (result)
 100be56:	b138      	cbz	r0, 100be68 <nrf_802154_delayed_trx_nearest_drx_time_to_midpoint_get+0x48>
        {
            min_time_to_start = drx_time_to_start < min_time_to_start ?
                                (uint32_t)drx_time_to_start : min_time_to_start;
 100be58:	4543      	cmp	r3, r8
 100be5a:	f172 0200 	sbcs.w	r2, r2, #0
 100be5e:	bf38      	it	cc
 100be60:	4698      	movcc	r8, r3
            drx_time_to_midpoint = min_time_to_start + m_dly_rx_data[i].rx.timeout_length / 2;
 100be62:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 100be64:	eb08 0656 	add.w	r6, r8, r6, lsr #1
    for (int i = 0; i < sizeof(m_dly_rx_data) / sizeof(m_dly_rx_data[0]); i++)
 100be68:	3458      	adds	r4, #88	; 0x58
 100be6a:	b127      	cbz	r7, 100be76 <nrf_802154_delayed_trx_nearest_drx_time_to_midpoint_get+0x56>
        }
    }

    if (result)
 100be6c:	b100      	cbz	r0, 100be70 <nrf_802154_delayed_trx_nearest_drx_time_to_midpoint_get+0x50>
    {
        *p_drx_time_to_midpoint = drx_time_to_midpoint;
 100be6e:	602e      	str	r6, [r5, #0]
    }

    return result;
}
 100be70:	b002      	add	sp, #8
 100be72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < sizeof(m_dly_rx_data) / sizeof(m_dly_rx_data[0]); i++)
 100be76:	2701      	movs	r7, #1
 100be78:	e7df      	b.n	100be3a <nrf_802154_delayed_trx_nearest_drx_time_to_midpoint_get+0x1a>
 100be7a:	bf00      	nop
 100be7c:	210011f8 	.word	0x210011f8

0100be80 <nrf_802154_filter_frame_part>:
}

nrf_802154_rx_error_t nrf_802154_filter_frame_part(
    nrf_802154_frame_parser_data_t * p_frame_data,
    uint8_t                        * p_num_bytes)
{
 100be80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 100be84:	460f      	mov	r7, r1
    nrf_802154_rx_error_t result        = NRF_802154_RX_ERROR_INVALID_FRAME;
    uint8_t               frame_type    = nrf_802154_frame_parser_frame_type_get(p_frame_data);
    uint8_t               frame_version = nrf_802154_frame_parser_frame_version_get(p_frame_data);
    uint8_t               psdu_length   = nrf_802154_frame_parser_frame_length_get(p_frame_data);

    switch (*p_num_bytes)
 100be86:	7809      	ldrb	r1, [r1, #0]
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 100be88:	6803      	ldr	r3, [r0, #0]
 100be8a:	2903      	cmp	r1, #3
 100be8c:	785c      	ldrb	r4, [r3, #1]
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 100be8e:	789e      	ldrb	r6, [r3, #2]
{
 100be90:	4605      	mov	r5, r0
    return p_parser_data->p_frame[PHR_OFFSET];
 100be92:	781b      	ldrb	r3, [r3, #0]
    switch (*p_num_bytes)
 100be94:	d13b      	bne.n	100bf0e <nrf_802154_filter_frame_part+0x8e>
    {
        case FCF_CHECK_OFFSET:
            if ((psdu_length < IMM_ACK_LENGTH) || (psdu_length > MAX_PACKET_SIZE))
 100be96:	3b05      	subs	r3, #5
 100be98:	2b7a      	cmp	r3, #122	; 0x7a
 100be9a:	f200 8098 	bhi.w	100bfce <nrf_802154_filter_frame_part+0x14e>
            {
                result = NRF_802154_RX_ERROR_INVALID_LENGTH;
                break;
            }

            if (!nrf_802154_frame_parser_valid_data_extend(p_frame_data,
 100be9e:	2201      	movs	r2, #1
 100bea0:	f007 fc04 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
 100bea4:	b918      	cbnz	r0, 100beae <nrf_802154_filter_frame_part+0x2e>
                                                           *p_num_bytes,
                                                           PARSE_LEVEL_FCF_OFFSETS))
            {
                result = NRF_802154_RX_ERROR_INVALID_FRAME;
 100bea6:	2001      	movs	r0, #1
            result = dst_addr_check(p_frame_data);
            break;
    }

    return result;
}
 100bea8:	b002      	add	sp, #8
 100beaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 100beae:	f004 0407 	and.w	r4, r4, #7
    switch (frame_type)
 100beb2:	2c05      	cmp	r4, #5
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 100beb4:	f006 0630 	and.w	r6, r6, #48	; 0x30
 100beb8:	d008      	beq.n	100becc <nrf_802154_filter_frame_part+0x4c>
 100beba:	d81b      	bhi.n	100bef4 <nrf_802154_filter_frame_part+0x74>
 100bebc:	2c04      	cmp	r4, #4
 100bebe:	d0f2      	beq.n	100bea6 <nrf_802154_filter_frame_part+0x26>
            if (!frame_type_and_version_filter(frame_type, frame_version))
 100bec0:	2e30      	cmp	r6, #48	; 0x30
 100bec2:	d0f0      	beq.n	100bea6 <nrf_802154_filter_frame_part+0x26>
    switch (frame_version)
 100bec4:	2e20      	cmp	r6, #32
 100bec6:	d01e      	beq.n	100bf06 <nrf_802154_filter_frame_part+0x86>
 100bec8:	d902      	bls.n	100bed0 <nrf_802154_filter_frame_part+0x50>
 100beca:	e7ec      	b.n	100bea6 <nrf_802154_filter_frame_part+0x26>
            if (!frame_type_and_version_filter(frame_type, frame_version))
 100becc:	2e00      	cmp	r6, #0
 100bece:	d1ea      	bne.n	100bea6 <nrf_802154_filter_frame_part+0x26>
    return p_parser_data->p_frame[DEST_ADDR_TYPE_OFFSET] & DEST_ADDR_TYPE_MASK;
 100bed0:	682b      	ldr	r3, [r5, #0]
 100bed2:	789b      	ldrb	r3, [r3, #2]
 100bed4:	f003 030c 	and.w	r3, r3, #12
    switch (nrf_802154_frame_parser_dst_addr_type_get(p_frame_data))
 100bed8:	2b08      	cmp	r3, #8
 100beda:	d00a      	beq.n	100bef2 <nrf_802154_filter_frame_part+0x72>
 100bedc:	2b0c      	cmp	r3, #12
 100bede:	d007      	beq.n	100bef0 <nrf_802154_filter_frame_part+0x70>
 100bee0:	2b00      	cmp	r3, #0
 100bee2:	d1e0      	bne.n	100bea6 <nrf_802154_filter_frame_part+0x26>
            if (nrf_802154_pib_pan_coord_get() || (frame_type == FRAME_TYPE_BEACON))
 100bee4:	f7fe f912 	bl	100a10c <nrf_802154_pib_pan_coord_get>
 100bee8:	b930      	cbnz	r0, 100bef8 <nrf_802154_filter_frame_part+0x78>
 100beea:	b12c      	cbz	r4, 100bef8 <nrf_802154_filter_frame_part+0x78>
                result = NRF_802154_RX_ERROR_INVALID_DEST_ADDR;
 100beec:	2003      	movs	r0, #3
 100beee:	e7db      	b.n	100bea8 <nrf_802154_filter_frame_part+0x28>
            *p_num_bytes = EXTENDED_ADDR_CHECK_OFFSET;
 100bef0:	230e      	movs	r3, #14
 100bef2:	703b      	strb	r3, [r7, #0]
            result       = NRF_802154_RX_ERROR_NONE;
 100bef4:	2000      	movs	r0, #0
 100bef6:	e7d7      	b.n	100bea8 <nrf_802154_filter_frame_part+0x28>
    return p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK;
 100bef8:	682b      	ldr	r3, [r5, #0]
 100befa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 100befe:	2b00      	cmp	r3, #0
 100bf00:	dad1      	bge.n	100bea6 <nrf_802154_filter_frame_part+0x26>
                        *p_num_bytes = PANID_CHECK_OFFSET;
 100bf02:	2306      	movs	r3, #6
 100bf04:	e7f5      	b.n	100bef2 <nrf_802154_filter_frame_part+0x72>
 * @returns  End offset of the destination addressing section.
 */
static inline uint8_t nrf_802154_frame_parser_dst_addressing_end_offset_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->helper.dst_addressing_end_offset;
 100bf06:	7ceb      	ldrb	r3, [r5, #19]
            if (end_offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100bf08:	2bff      	cmp	r3, #255	; 0xff
 100bf0a:	d1f2      	bne.n	100bef2 <nrf_802154_filter_frame_part+0x72>
 100bf0c:	e7cb      	b.n	100bea6 <nrf_802154_filter_frame_part+0x26>
            if (!nrf_802154_frame_parser_valid_data_extend(p_frame_data,
 100bf0e:	2202      	movs	r2, #2
 100bf10:	f007 fbcc 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
 100bf14:	2800      	cmp	r0, #0
 100bf16:	d0c6      	beq.n	100bea6 <nrf_802154_filter_frame_part+0x26>
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 100bf18:	682e      	ldr	r6, [r5, #0]
    return p_parser_data->mhr.dst.panid_offset;
 100bf1a:	79aa      	ldrb	r2, [r5, #6]
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 100bf1c:	7877      	ldrb	r7, [r6, #1]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100bf1e:	2aff      	cmp	r2, #255	; 0xff
    return p_parser_data->mhr.dst.addr_offset;
 100bf20:	79ec      	ldrb	r4, [r5, #7]
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 100bf22:	f007 0707 	and.w	r7, r7, #7
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100bf26:	d108      	bne.n	100bf3a <nrf_802154_filter_frame_part+0xba>
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100bf28:	2cff      	cmp	r4, #255	; 0xff
 100bf2a:	d12b      	bne.n	100bf84 <nrf_802154_filter_frame_part+0x104>
            return (nrf_802154_pib_pan_coord_get() ||
 100bf2c:	f7fe f8ee 	bl	100a10c <nrf_802154_pib_pan_coord_get>
                     FRAME_TYPE_BEACON)) ? NRF_802154_RX_ERROR_NONE :
 100bf30:	2800      	cmp	r0, #0
 100bf32:	d1df      	bne.n	100bef4 <nrf_802154_filter_frame_part+0x74>
            return (nrf_802154_pib_pan_coord_get() ||
 100bf34:	2f00      	cmp	r7, #0
 100bf36:	d0dd      	beq.n	100bef4 <nrf_802154_filter_frame_part+0x74>
 100bf38:	e7d8      	b.n	100beec <nrf_802154_filter_frame_part+0x6c>
 100bf3a:	2cff      	cmp	r4, #255	; 0xff
 100bf3c:	d02b      	beq.n	100bf96 <nrf_802154_filter_frame_part+0x116>
    return &p_parser_data->p_frame[offset];
 100bf3e:	4434      	add	r4, r6
    return &p_parser_data->p_frame[offset];
 100bf40:	4416      	add	r6, r2
    if ((0 == memcmp(p_panid, nrf_802154_pib_pan_id_get(), PAN_ID_SIZE)) ||
 100bf42:	f7fe f90d 	bl	100a160 <nrf_802154_pib_pan_id_get>
 100bf46:	2202      	movs	r2, #2
 100bf48:	4601      	mov	r1, r0
 100bf4a:	4630      	mov	r0, r6
 100bf4c:	f006 fd2f 	bl	10129ae <memcmp>
 100bf50:	b1b0      	cbz	r0, 100bf80 <nrf_802154_filter_frame_part+0x100>
        (0 == memcmp(p_panid, BROADCAST_ADDRESS, PAN_ID_SIZE)))
 100bf52:	4b20      	ldr	r3, [pc, #128]	; (100bfd4 <nrf_802154_filter_frame_part+0x154>)
 100bf54:	2202      	movs	r2, #2
 100bf56:	f8b3 8000 	ldrh.w	r8, [r3]
 100bf5a:	4630      	mov	r0, r6
 100bf5c:	a901      	add	r1, sp, #4
 100bf5e:	f8ad 8004 	strh.w	r8, [sp, #4]
 100bf62:	f006 fd24 	bl	10129ae <memcmp>
    if ((0 == memcmp(p_panid, nrf_802154_pib_pan_id_get(), PAN_ID_SIZE)) ||
 100bf66:	b158      	cbz	r0, 100bf80 <nrf_802154_filter_frame_part+0x100>
    else if ((FRAME_TYPE_BEACON == frame_type) &&
 100bf68:	2f00      	cmp	r7, #0
 100bf6a:	d1bf      	bne.n	100beec <nrf_802154_filter_frame_part+0x6c>
             (0 == memcmp(nrf_802154_pib_pan_id_get(), BROADCAST_ADDRESS, PAN_ID_SIZE)))
 100bf6c:	f7fe f8f8 	bl	100a160 <nrf_802154_pib_pan_id_get>
 100bf70:	2202      	movs	r2, #2
 100bf72:	4669      	mov	r1, sp
 100bf74:	f8ad 8000 	strh.w	r8, [sp]
 100bf78:	f006 fd19 	bl	10129ae <memcmp>
    else if ((FRAME_TYPE_BEACON == frame_type) &&
 100bf7c:	2800      	cmp	r0, #0
 100bf7e:	d1b5      	bne.n	100beec <nrf_802154_filter_frame_part+0x6c>
    uint8_t dst_addr_size =
 100bf80:	b90c      	cbnz	r4, 100bf86 <nrf_802154_filter_frame_part+0x106>
 100bf82:	e7d3      	b.n	100bf2c <nrf_802154_filter_frame_part+0xac>
    return &p_parser_data->p_frame[offset];
 100bf84:	4434      	add	r4, r6
    return p_parser_data->helper.dst_addr_size;
 100bf86:	7c6d      	ldrb	r5, [r5, #17]
    switch (dst_addr_size)
 100bf88:	2d02      	cmp	r5, #2
 100bf8a:	d006      	beq.n	100bf9a <nrf_802154_filter_frame_part+0x11a>
 100bf8c:	2d08      	cmp	r5, #8
 100bf8e:	d019      	beq.n	100bfc4 <nrf_802154_filter_frame_part+0x144>
 100bf90:	2d00      	cmp	r5, #0
 100bf92:	d188      	bne.n	100bea6 <nrf_802154_filter_frame_part+0x26>
 100bf94:	e7ca      	b.n	100bf2c <nrf_802154_filter_frame_part+0xac>
        return NULL;
 100bf96:	2400      	movs	r4, #0
 100bf98:	e7d2      	b.n	100bf40 <nrf_802154_filter_frame_part+0xc0>
    if ((0 == memcmp(p_dst_addr, nrf_802154_pib_short_address_get(), SHORT_ADDRESS_SIZE)) ||
 100bf9a:	f7fe f8f9 	bl	100a190 <nrf_802154_pib_short_address_get>
 100bf9e:	462a      	mov	r2, r5
 100bfa0:	4601      	mov	r1, r0
 100bfa2:	4620      	mov	r0, r4
 100bfa4:	f006 fd03 	bl	10129ae <memcmp>
 100bfa8:	2800      	cmp	r0, #0
 100bfaa:	d0a3      	beq.n	100bef4 <nrf_802154_filter_frame_part+0x74>
        (0 == memcmp(p_dst_addr, BROADCAST_ADDRESS, SHORT_ADDRESS_SIZE)))
 100bfac:	462a      	mov	r2, r5
 100bfae:	4b09      	ldr	r3, [pc, #36]	; (100bfd4 <nrf_802154_filter_frame_part+0x154>)
 100bfb0:	a901      	add	r1, sp, #4
 100bfb2:	881b      	ldrh	r3, [r3, #0]
 100bfb4:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (0 == memcmp(p_dst_addr, nrf_802154_pib_extended_address_get(), EXTENDED_ADDRESS_SIZE))
 100bfb8:	4620      	mov	r0, r4
 100bfba:	f006 fcf8 	bl	10129ae <memcmp>
 100bfbe:	2800      	cmp	r0, #0
 100bfc0:	d194      	bne.n	100beec <nrf_802154_filter_frame_part+0x6c>
 100bfc2:	e797      	b.n	100bef4 <nrf_802154_filter_frame_part+0x74>
 100bfc4:	f7fe f8d8 	bl	100a178 <nrf_802154_pib_extended_address_get>
 100bfc8:	462a      	mov	r2, r5
 100bfca:	4601      	mov	r1, r0
 100bfcc:	e7f4      	b.n	100bfb8 <nrf_802154_filter_frame_part+0x138>
                result = NRF_802154_RX_ERROR_INVALID_LENGTH;
 100bfce:	2009      	movs	r0, #9
 100bfd0:	e76a      	b.n	100bea8 <nrf_802154_filter_frame_part+0x28>
 100bfd2:	bf00      	nop
 100bfd4:	010157d4 	.word	0x010157d4

0100bfd8 <parse_state_advance>:
    return requested_parse_level > p_parser_data->parse_level;
}

static bool parse_state_advance(nrf_802154_frame_parser_data_t * p_parser_data,
                                nrf_802154_frame_parser_level_t  requested_parse_level)
{
 100bfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 100bfdc:	4604      	mov	r4, r0
 100bfde:	460e      	mov	r6, r1

    do
    {
        result = false;

        switch (p_parser_data->parse_level)
 100bfe0:	7927      	ldrb	r7, [r4, #4]
 100bfe2:	2f06      	cmp	r7, #6
 100bfe4:	f200 8110 	bhi.w	100c208 <parse_state_advance+0x230>
 100bfe8:	e8df f007 	tbb	[pc, r7]
 100bfec:	8d877d07 	.word	0x8d877d07
 100bff0:	c1bb      	.short	0xc1bb
 100bff2:	04          	.byte	0x04
 100bff3:	00          	.byte	0x00
                    next_level = PARSE_LEVEL_FULL;
                }
                break;

            case PARSE_LEVEL_FULL:
                return true;
 100bff4:	2001      	movs	r0, #1
        }
    }
    while (result);

    return p_parser_data->parse_level >= requested_parse_level;
}
 100bff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (level_is_elevated(p_parser_data, requested_parse_level))
 100bffa:	2e00      	cmp	r6, #0
 100bffc:	d078      	beq.n	100c0f0 <parse_state_advance+0x118>
    if (offset > p_parser_data->valid_data_len)
 100bffe:	7963      	ldrb	r3, [r4, #5]
 100c000:	2b02      	cmp	r3, #2
 100c002:	d975      	bls.n	100c0f0 <parse_state_advance+0x118>
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
 100c004:	6822      	ldr	r2, [r4, #0]
 100c006:	7890      	ldrb	r0, [r2, #2]
    return (p_parser_data->p_frame[PAN_ID_COMPR_OFFSET] & PAN_ID_COMPR_MASK) ? true : false;
 100c008:	7851      	ldrb	r1, [r2, #1]
 100c00a:	f000 0501 	and.w	r5, r0, #1
 100c00e:	f1c5 0304 	rsb	r3, r5, #4
    switch (nrf_802154_frame_parser_frame_version_get(p_parser_data))
 100c012:	f010 0f20 	tst.w	r0, #32
 100c016:	b2db      	uxtb	r3, r3
    return p_parser_data->p_frame[DEST_ADDR_TYPE_OFFSET] & DEST_ADDR_TYPE_MASK;
 100c018:	f000 0c0c 	and.w	ip, r0, #12
 100c01c:	d11d      	bne.n	100c05a <parse_state_advance+0x82>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
 100c01e:	f1bc 0f00 	cmp.w	ip, #0
 100c022:	d129      	bne.n	100c078 <parse_state_advance+0xa0>
 100c024:	7891      	ldrb	r1, [r2, #2]
 100c026:	4879      	ldr	r0, [pc, #484]	; (100c20c <parse_state_advance+0x234>)
    if (dst_addr_is_present(p_parser_data))
 100c028:	f011 0f0c 	tst.w	r1, #12
        p_parser_data->mhr.dst.addr_offset = offset;
 100c02c:	bf18      	it	ne
 100c02e:	71e3      	strbne	r3, [r4, #7]
 100c030:	7891      	ldrb	r1, [r2, #2]
 100c032:	f001 010c 	and.w	r1, r1, #12
 100c036:	5c41      	ldrb	r1, [r0, r1]
    if (addr_size == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100c038:	29ff      	cmp	r1, #255	; 0xff
 100c03a:	d059      	beq.n	100c0f0 <parse_state_advance+0x118>
    offset                                         += addr_size;
 100c03c:	440b      	add	r3, r1
 100c03e:	b2db      	uxtb	r3, r3
    p_parser_data->helper.dst_addr_size             = addr_size;
 100c040:	7461      	strb	r1, [r4, #17]
    p_parser_data->helper.dst_addressing_end_offset = offset;
 100c042:	74e3      	strb	r3, [r4, #19]
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 100c044:	7891      	ldrb	r1, [r2, #2]
    return (p_parser_data->p_frame[PAN_ID_COMPR_OFFSET] & PAN_ID_COMPR_MASK) ? true : false;
 100c046:	7850      	ldrb	r0, [r2, #1]
    switch (nrf_802154_frame_parser_frame_version_get(p_parser_data))
 100c048:	068d      	lsls	r5, r1, #26
 100c04a:	f3c0 1080 	ubfx	r0, r0, #6, #1
 100c04e:	d420      	bmi.n	100c092 <parse_state_advance+0xba>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
 100c050:	293f      	cmp	r1, #63	; 0x3f
 100c052:	d926      	bls.n	100c0a2 <parse_state_advance+0xca>
                return panid_compression ? false : true;
 100c054:	f080 0101 	eor.w	r1, r0, #1
 100c058:	e03b      	b.n	100c0d2 <parse_state_advance+0xfa>
            if (nrf_802154_frame_parser_dst_addr_is_extended(p_parser_data) &&
 100c05a:	f1bc 0f0c 	cmp.w	ip, #12
 100c05e:	f3c1 1180 	ubfx	r1, r1, #6, #1
 100c062:	d10e      	bne.n	100c082 <parse_state_advance+0xaa>
 100c064:	f000 0cc0 	and.w	ip, r0, #192	; 0xc0
 100c068:	f1bc 0fc0 	cmp.w	ip, #192	; 0xc0
 100c06c:	d102      	bne.n	100c074 <parse_state_advance+0x9c>
                return panid_compression ? false : true;
 100c06e:	f081 0101 	eor.w	r1, r1, #1
 100c072:	e00b      	b.n	100c08c <parse_state_advance+0xb4>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
 100c074:	283f      	cmp	r0, #63	; 0x3f
 100c076:	d9fa      	bls.n	100c06e <parse_state_advance+0x96>
        offset                             += PAN_ID_SIZE;
 100c078:	f1c5 0506 	rsb	r5, r5, #6
        p_parser_data->mhr.dst.panid_offset = offset;
 100c07c:	71a3      	strb	r3, [r4, #6]
        offset                             += PAN_ID_SIZE;
 100c07e:	b2eb      	uxtb	r3, r5
 100c080:	e7d0      	b.n	100c024 <parse_state_advance+0x4c>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
 100c082:	283f      	cmp	r0, #63	; 0x3f
 100c084:	d8cb      	bhi.n	100c01e <parse_state_advance+0x46>
            if (dst_addr_is_present(p_parser_data))
 100c086:	f1bc 0f00 	cmp.w	ip, #0
 100c08a:	d1f0      	bne.n	100c06e <parse_state_advance+0x96>
    if (dst_panid_is_present(p_parser_data))
 100c08c:	2900      	cmp	r1, #0
 100c08e:	d1f3      	bne.n	100c078 <parse_state_advance+0xa0>
 100c090:	e7c8      	b.n	100c024 <parse_state_advance+0x4c>
            if (nrf_802154_frame_parser_dst_addr_is_extended(p_parser_data) &&
 100c092:	f001 050c 	and.w	r5, r1, #12
 100c096:	2d0c      	cmp	r5, #12
 100c098:	d115      	bne.n	100c0c6 <parse_state_advance+0xee>
 100c09a:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
 100c09e:	2dc0      	cmp	r5, #192	; 0xc0
 100c0a0:	d1d6      	bne.n	100c050 <parse_state_advance+0x78>
    if (src_addr_is_present(p_parser_data))
 100c0a2:	7891      	ldrb	r1, [r2, #2]
 100c0a4:	293f      	cmp	r1, #63	; 0x3f
        p_parser_data->mhr.src.addr_offset = offset;
 100c0a6:	bf88      	it	hi
 100c0a8:	7263      	strbhi	r3, [r4, #9]
    return p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK;
 100c0aa:	7892      	ldrb	r2, [r2, #2]
 100c0ac:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    switch (addr_type)
 100c0b0:	2a80      	cmp	r2, #128	; 0x80
 100c0b2:	d014      	beq.n	100c0de <parse_state_advance+0x106>
 100c0b4:	2ac0      	cmp	r2, #192	; 0xc0
 100c0b6:	d014      	beq.n	100c0e2 <parse_state_advance+0x10a>
 100c0b8:	b9d2      	cbnz	r2, 100c0f0 <parse_state_advance+0x118>
    offset                             += addr_size;
 100c0ba:	4413      	add	r3, r2
    p_parser_data->helper.addressing_end_offset = offset;
 100c0bc:	7523      	strb	r3, [r4, #20]
                    next_level = PARSE_LEVEL_FCF_OFFSETS;
 100c0be:	2301      	movs	r3, #1
    p_parser_data->helper.src_addr_size = addr_size;
 100c0c0:	74a2      	strb	r2, [r4, #18]
            p_parser_data->parse_level = next_level;
 100c0c2:	7123      	strb	r3, [r4, #4]
    while (result);
 100c0c4:	e78c      	b.n	100bfe0 <parse_state_advance+0x8>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
 100c0c6:	293f      	cmp	r1, #63	; 0x3f
 100c0c8:	d9eb      	bls.n	100c0a2 <parse_state_advance+0xca>
            return panid_compression ? false : true;
 100c0ca:	f080 0101 	eor.w	r1, r0, #1
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
 100c0ce:	2d00      	cmp	r5, #0
 100c0d0:	d1c0      	bne.n	100c054 <parse_state_advance+0x7c>
    if (src_panid_is_present(p_parser_data))
 100c0d2:	2900      	cmp	r1, #0
 100c0d4:	d0e5      	beq.n	100c0a2 <parse_state_advance+0xca>
        p_parser_data->mhr.src.panid_offset = offset;
 100c0d6:	7223      	strb	r3, [r4, #8]
        offset                             += PAN_ID_SIZE;
 100c0d8:	3302      	adds	r3, #2
 100c0da:	b2db      	uxtb	r3, r3
 100c0dc:	e7e1      	b.n	100c0a2 <parse_state_advance+0xca>
    switch (addr_type)
 100c0de:	2202      	movs	r2, #2
 100c0e0:	e7eb      	b.n	100c0ba <parse_state_advance+0xe2>
            return EXTENDED_ADDRESS_SIZE;
 100c0e2:	2208      	movs	r2, #8
 100c0e4:	e7e9      	b.n	100c0ba <parse_state_advance+0xe2>
                if (p_parser_data->valid_data_len >=
 100c0e6:	7962      	ldrb	r2, [r4, #5]
 100c0e8:	7ce3      	ldrb	r3, [r4, #19]
 100c0ea:	429a      	cmp	r2, r3
 100c0ec:	f080 808a 	bcs.w	100c204 <parse_state_advance+0x22c>
    return p_parser_data->parse_level >= requested_parse_level;
 100c0f0:	42be      	cmp	r6, r7
 100c0f2:	bf8c      	ite	hi
 100c0f4:	2000      	movhi	r0, #0
 100c0f6:	2001      	movls	r0, #1
 100c0f8:	e77d      	b.n	100bff6 <parse_state_advance+0x1e>
                if (p_parser_data->valid_data_len >= p_parser_data->helper.addressing_end_offset)
 100c0fa:	7962      	ldrb	r2, [r4, #5]
 100c0fc:	7d23      	ldrb	r3, [r4, #20]
 100c0fe:	429a      	cmp	r2, r3
 100c100:	d3f6      	bcc.n	100c0f0 <parse_state_advance+0x118>
                    next_level = PARSE_LEVEL_ADDRESSING_END;
 100c102:	2303      	movs	r3, #3
 100c104:	e7dd      	b.n	100c0c2 <parse_state_advance+0xea>
                if (level_is_elevated(p_parser_data, requested_parse_level))
 100c106:	2e03      	cmp	r6, #3
 100c108:	d9f2      	bls.n	100c0f0 <parse_state_advance+0x118>
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
 100c10a:	6822      	ldr	r2, [r4, #0]
    uint8_t offset = p_parser_data->helper.addressing_end_offset;
 100c10c:	7d23      	ldrb	r3, [r4, #20]
 100c10e:	7851      	ldrb	r1, [r2, #1]
    if (nrf_802154_frame_parser_security_enabled_bit_is_set(p_parser_data) == false)
 100c110:	070d      	lsls	r5, r1, #28
 100c112:	d402      	bmi.n	100c11a <parse_state_advance+0x142>
        p_parser_data->helper.aux_sec_hdr_end_offset = offset;
 100c114:	7563      	strb	r3, [r4, #21]
                    next_level = PARSE_LEVEL_SEC_CTRL_OFFSETS;
 100c116:	2304      	movs	r3, #4
 100c118:	e7d3      	b.n	100c0c2 <parse_state_advance+0xea>
    if ((offset + SECURITY_CONTROL_SIZE) > p_parser_data->valid_data_len)
 100c11a:	7961      	ldrb	r1, [r4, #5]
 100c11c:	4299      	cmp	r1, r3
 100c11e:	d9e7      	bls.n	100c0f0 <parse_state_advance+0x118>
    p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset = offset;
 100c120:	72a3      	strb	r3, [r4, #10]
    return p_parser_data->p_frame[offset] & FRAME_COUNTER_SUPPRESS_BIT;
 100c122:	18d1      	adds	r1, r2, r3
    if (nrf_802154_frame_parser_sec_ctrl_fc_suppress_bit_is_set(p_parser_data) == false)
 100c124:	5cd2      	ldrb	r2, [r2, r3]
    offset += SECURITY_CONTROL_SIZE;
 100c126:	1c5d      	adds	r5, r3, #1
    if (nrf_802154_frame_parser_sec_ctrl_fc_suppress_bit_is_set(p_parser_data) == false)
 100c128:	0690      	lsls	r0, r2, #26
    offset += SECURITY_CONTROL_SIZE;
 100c12a:	b2ed      	uxtb	r5, r5
        p_parser_data->mhr.aux_sec_hdr.frame_counter_offset = offset;
 100c12c:	bf5e      	ittt	pl
 100c12e:	72e5      	strbpl	r5, [r4, #11]
        offset += FRAME_COUNTER_SIZE;
 100c130:	3305      	addpl	r3, #5
 100c132:	b2dd      	uxtbpl	r5, r3
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 100c134:	780b      	ldrb	r3, [r1, #0]
    if (key_id_mode != KEY_ID_MODE_0)
 100c136:	f013 0f18 	tst.w	r3, #24
 100c13a:	f3c3 00c1 	ubfx	r0, r3, #3, #2
 100c13e:	d00a      	beq.n	100c156 <parse_state_advance+0x17e>
    key_src_size = key_source_size_get(key_id_mode);
 100c140:	f007 fa8b 	bl	101365a <key_source_size_get>
        p_parser_data->mhr.aux_sec_hdr.key_id_offset = offset;
 100c144:	7325      	strb	r5, [r4, #12]
        if (key_src_size > 0)
 100c146:	b110      	cbz	r0, 100c14e <parse_state_advance+0x176>
            p_parser_data->mhr.aux_sec_hdr.key_src_offset = offset;
 100c148:	7365      	strb	r5, [r4, #13]
            offset += key_src_size;
 100c14a:	4405      	add	r5, r0
 100c14c:	b2ed      	uxtb	r5, r5
        p_parser_data->mhr.aux_sec_hdr.key_idx_offset = offset;
 100c14e:	73a5      	strb	r5, [r4, #14]
        offset += KEY_IDX_SIZE;
 100c150:	3501      	adds	r5, #1
        p_parser_data->helper.key_src_size            = key_src_size;
 100c152:	75a0      	strb	r0, [r4, #22]
        offset += KEY_IDX_SIZE;
 100c154:	b2ed      	uxtb	r5, r5
    p_parser_data->helper.mic_size               = mic_size_get(p_parser_data);
 100c156:	4620      	mov	r0, r4
 100c158:	f007 fa63 	bl	1013622 <mic_size_get>
 100c15c:	462b      	mov	r3, r5
 100c15e:	75e0      	strb	r0, [r4, #23]
        if (result)
 100c160:	e7d8      	b.n	100c114 <parse_state_advance+0x13c>
                if (p_parser_data->valid_data_len >= p_parser_data->helper.aux_sec_hdr_end_offset)
 100c162:	7962      	ldrb	r2, [r4, #5]
 100c164:	7d63      	ldrb	r3, [r4, #21]
 100c166:	429a      	cmp	r2, r3
 100c168:	d3c2      	bcc.n	100c0f0 <parse_state_advance+0x118>
                    next_level = PARSE_LEVEL_AUX_SEC_HDR_END;
 100c16a:	2305      	movs	r3, #5
 100c16c:	e7a9      	b.n	100c0c2 <parse_state_advance+0xea>
                if (level_is_elevated(p_parser_data, requested_parse_level))
 100c16e:	2e05      	cmp	r6, #5
 100c170:	d9be      	bls.n	100c0f0 <parse_state_advance+0x118>
    return p_parser_data->p_frame[PHR_OFFSET];
 100c172:	f8d4 9000 	ldr.w	r9, [r4]
    if (((psdu_length + PHR_SIZE) != p_parser_data->valid_data_len) ||
 100c176:	7962      	ldrb	r2, [r4, #5]
 100c178:	f899 3000 	ldrb.w	r3, [r9]
    uint8_t         offset      = p_parser_data->helper.aux_sec_hdr_end_offset;
 100c17c:	f894 8015 	ldrb.w	r8, [r4, #21]
    if (((psdu_length + PHR_SIZE) != p_parser_data->valid_data_len) ||
 100c180:	1c59      	adds	r1, r3, #1
 100c182:	4291      	cmp	r1, r2
 100c184:	d1b4      	bne.n	100c0f0 <parse_state_advance+0x118>
 100c186:	061a      	lsls	r2, r3, #24
 100c188:	d4b2      	bmi.n	100c0f0 <parse_state_advance+0x118>
    return (p_parser_data->p_frame[IE_PRESENT_OFFSET] & IE_PRESENT_BIT) ? true : false;
 100c18a:	f899 3002 	ldrb.w	r3, [r9, #2]
    if (nrf_802154_frame_parser_ie_present_bit_is_set(p_parser_data))
 100c18e:	079b      	lsls	r3, r3, #30
 100c190:	d521      	bpl.n	100c1d6 <parse_state_advance+0x1fe>
        p_parser_data->mhr.header_ie_offset = offset;
 100c192:	f884 800f 	strb.w	r8, [r4, #15]
    return nrf_802154_frame_parser_frame_length_get(p_parser_data) - FCS_SIZE + PHR_SIZE;
 100c196:	f899 5000 	ldrb.w	r5, [r9]
        p_end_addr  = nrf_802154_frame_parser_mfr_get(p_parser_data) - mic_size_get(p_parser_data);
 100c19a:	4620      	mov	r0, r4
 100c19c:	3d01      	subs	r5, #1
 100c19e:	b2ed      	uxtb	r5, r5
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100c1a0:	2dff      	cmp	r5, #255	; 0xff
        return NULL;
 100c1a2:	bf0c      	ite	eq
 100c1a4:	2500      	moveq	r5, #0
    return &p_parser_data->p_frame[offset];
 100c1a6:	444d      	addne	r5, r9
 100c1a8:	f007 fa3b 	bl	1013622 <mic_size_get>
        p_ie_header = &p_parser_data->p_frame[offset];
 100c1ac:	eb09 0a08 	add.w	sl, r9, r8
        p_end_addr  = nrf_802154_frame_parser_mfr_get(p_parser_data) - mic_size_get(p_parser_data);
 100c1b0:	1a2d      	subs	r5, r5, r0
        while (!nrf_802154_frame_parser_ie_iterator_end(p_iterator, p_end_addr))
 100c1b2:	4629      	mov	r1, r5
 100c1b4:	4650      	mov	r0, sl
 100c1b6:	f007 fa22 	bl	10135fe <nrf_802154_frame_parser_ie_iterator_end>
 100c1ba:	b960      	cbnz	r0, 100c1d6 <parse_state_advance+0x1fe>
 * @returns  Length of currently iterated information element.
 *
 */
static inline uint8_t nrf_802154_frame_parser_ie_length_get(const uint8_t * p_ie_iterator)
{
    return p_ie_iterator[IE_LENGTH_OFFSET] & IE_LENGTH_MASK;
 100c1bc:	f89a 3000 	ldrb.w	r3, [sl]
 100c1c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 */
static inline const uint8_t * nrf_802154_frame_parser_ie_iterator_next(
    const uint8_t * p_ie_iterator)
{
    return nrf_802154_frame_parser_ie_content_address_get(p_ie_iterator)
           + nrf_802154_frame_parser_ie_length_get(p_ie_iterator);
 100c1c4:	3302      	adds	r3, #2
 100c1c6:	449a      	add	sl, r3
            if (p_iterator > p_end_addr)
 100c1c8:	4555      	cmp	r5, sl
 100c1ca:	d391      	bcc.n	100c0f0 <parse_state_advance+0x118>
            else if (p_iterator == p_end_addr)
 100c1cc:	d10b      	bne.n	100c1e6 <parse_state_advance+0x20e>
                offset = p_iterator - p_parser_data->p_frame;
 100c1ce:	eba5 0509 	sub.w	r5, r5, r9
 100c1d2:	fa5f f885 	uxtb.w	r8, r5
    return nrf_802154_frame_parser_frame_length_get(p_parser_data) - FCS_SIZE + PHR_SIZE;
 100c1d6:	f899 3000 	ldrb.w	r3, [r9]
 100c1da:	3b01      	subs	r3, #1
    if (offset != nrf_802154_frame_parser_mfr_offset_get(p_parser_data))
 100c1dc:	b2db      	uxtb	r3, r3
 100c1de:	4543      	cmp	r3, r8
 100c1e0:	d10d      	bne.n	100c1fe <parse_state_advance+0x226>
                    next_level = PARSE_LEVEL_FULL;
 100c1e2:	2306      	movs	r3, #6
 100c1e4:	e76d      	b.n	100c0c2 <parse_state_advance+0xea>
            else if (nrf_802154_frame_parser_ie_iterator_end(p_iterator, p_end_addr))
 100c1e6:	4650      	mov	r0, sl
 100c1e8:	f007 fa09 	bl	10135fe <nrf_802154_frame_parser_ie_iterator_end>
 100c1ec:	2800      	cmp	r0, #0
 100c1ee:	d0e0      	beq.n	100c1b2 <parse_state_advance+0x1da>
    return p_ie_iterator + IE_DATA_OFFSET;
 100c1f0:	f10a 0802 	add.w	r8, sl, #2
                offset = nrf_802154_frame_parser_ie_content_address_get(p_iterator) -
 100c1f4:	eba8 0809 	sub.w	r8, r8, r9
 100c1f8:	fa5f f888 	uxtb.w	r8, r8
                break;
 100c1fc:	e7eb      	b.n	100c1d6 <parse_state_advance+0x1fe>
        p_parser_data->mac_payload.mac_payload_offset = offset;
 100c1fe:	f884 8010 	strb.w	r8, [r4, #16]
        if (result)
 100c202:	e7ee      	b.n	100c1e2 <parse_state_advance+0x20a>
                    next_level = PARSE_LEVEL_DST_ADDRESSING_END;
 100c204:	2302      	movs	r3, #2
 100c206:	e75c      	b.n	100c0c2 <parse_state_advance+0xea>
        switch (p_parser_data->parse_level)
 100c208:	2000      	movs	r0, #0
 100c20a:	e6f4      	b.n	100bff6 <parse_state_advance+0x1e>
 100c20c:	01015be3 	.word	0x01015be3

0100c210 <ie_writer_reset>:
/**
 * @brief Resets IE writer to pristine state.
 */
static void ie_writer_reset(void)
{
    m_writer_state = IE_WRITER_RESET;
 100c210:	2300      	movs	r3, #0
 100c212:	4a06      	ldr	r2, [pc, #24]	; (100c22c <ie_writer_reset+0x1c>)
 100c214:	7013      	strb	r3, [r2, #0]
    mp_csl_phase_addr  = NULL;
 100c216:	4a06      	ldr	r2, [pc, #24]	; (100c230 <ie_writer_reset+0x20>)
 100c218:	6013      	str	r3, [r2, #0]
    mp_csl_period_addr = NULL;
 100c21a:	4a06      	ldr	r2, [pc, #24]	; (100c234 <ie_writer_reset+0x24>)
 100c21c:	6013      	str	r3, [r2, #0]
    mp_lm_rssi_addr   = NULL;
 100c21e:	4a06      	ldr	r2, [pc, #24]	; (100c238 <ie_writer_reset+0x28>)
 100c220:	6013      	str	r3, [r2, #0]
    mp_lm_margin_addr = NULL;
 100c222:	4a06      	ldr	r2, [pc, #24]	; (100c23c <ie_writer_reset+0x2c>)
 100c224:	6013      	str	r3, [r2, #0]
    mp_lm_lqi_addr    = NULL;
 100c226:	4a06      	ldr	r2, [pc, #24]	; (100c240 <ie_writer_reset+0x30>)
 100c228:	6013      	str	r3, [r2, #0]

    csl_ie_write_reset();
    link_metrics_ie_write_reset();
}
 100c22a:	4770      	bx	lr
 100c22c:	2100448f 	.word	0x2100448f
 100c230:	21003444 	.word	0x21003444
 100c234:	21003440 	.word	0x21003440
 100c238:	2100343c 	.word	0x2100343c
 100c23c:	21003438 	.word	0x21003438
 100c240:	21003434 	.word	0x21003434

0100c244 <link_metrics_ie_write_commit>:
{
 100c244:	b570      	push	{r4, r5, r6, lr}
    if ((mp_lm_rssi_addr != NULL) || (mp_lm_margin_addr != NULL))
 100c246:	4e19      	ldr	r6, [pc, #100]	; (100c2ac <link_metrics_ie_write_commit+0x68>)
{
 100c248:	4604      	mov	r4, r0
    if ((mp_lm_rssi_addr != NULL) || (mp_lm_margin_addr != NULL))
 100c24a:	6833      	ldr	r3, [r6, #0]
 100c24c:	4d18      	ldr	r5, [pc, #96]	; (100c2b0 <link_metrics_ie_write_commit+0x6c>)
 100c24e:	b90b      	cbnz	r3, 100c254 <link_metrics_ie_write_commit+0x10>
 100c250:	682b      	ldr	r3, [r5, #0]
 100c252:	b30b      	cbz	r3, 100c298 <link_metrics_ie_write_commit+0x54>
        int8_t rssi = (uint8_t)nrf_802154_core_last_frame_rssi_get();
 100c254:	f7fd fe2c 	bl	1009eb0 <nrf_802154_core_last_frame_rssi_get>
        if (mp_lm_rssi_addr != NULL)
 100c258:	6832      	ldr	r2, [r6, #0]
 100c25a:	b15a      	cbz	r2, 100c274 <link_metrics_ie_write_commit+0x30>
    scaled = (uint8_t)((intermediate * (UINT8_MAX - 0)) /
 100c25c:	2182      	movs	r1, #130	; 0x82
    rssi_lim = (rssi_lim > IE_VENDOR_THREAD_RSSI_CEIL) ? IE_VENDOR_THREAD_RSSI_CEIL : rssi_lim;
 100c25e:	ea00 73e0 	and.w	r3, r0, r0, asr #31
    intermediate = (int16_t)rssi_lim - IE_VENDOR_THREAD_RSSI_FLOOR;
 100c262:	3382      	adds	r3, #130	; 0x82
    scaled = (uint8_t)((intermediate * (UINT8_MAX - 0)) /
 100c264:	b29b      	uxth	r3, r3
 100c266:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 100c26a:	fbb3 f3f1 	udiv	r3, r3, r1
 100c26e:	7013      	strb	r3, [r2, #0]
            *p_written       = true;
 100c270:	2301      	movs	r3, #1
 100c272:	7023      	strb	r3, [r4, #0]
        if (mp_lm_margin_addr != NULL)
 100c274:	682a      	ldr	r2, [r5, #0]
 100c276:	b17a      	cbz	r2, 100c298 <link_metrics_ie_write_commit+0x54>
            *mp_lm_margin_addr = margin_scale((int16_t)rssi - ED_RSSIOFFS);
 100c278:	f100 035d 	add.w	r3, r0, #93	; 0x5d
    margin_lim = (margin < IE_VENDOR_THREAD_MARGIN_FLOOR) ? IE_VENDOR_THREAD_MARGIN_FLOOR : margin;
 100c27c:	b21b      	sxth	r3, r3
 100c27e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    scaled = (uint8_t)(((margin_lim - IE_VENDOR_THREAD_MARGIN_FLOOR) * (UINT8_MAX - 0)) /
 100c282:	2b82      	cmp	r3, #130	; 0x82
 100c284:	bfa8      	it	ge
 100c286:	2382      	movge	r3, #130	; 0x82
 100c288:	2182      	movs	r1, #130	; 0x82
 100c28a:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 100c28e:	fbb3 f3f1 	udiv	r3, r3, r1
 100c292:	7013      	strb	r3, [r2, #0]
            *p_written         = true;
 100c294:	2301      	movs	r3, #1
 100c296:	7023      	strb	r3, [r4, #0]
    if (mp_lm_lqi_addr != NULL)
 100c298:	4b06      	ldr	r3, [pc, #24]	; (100c2b4 <link_metrics_ie_write_commit+0x70>)
 100c29a:	681d      	ldr	r5, [r3, #0]
 100c29c:	b125      	cbz	r5, 100c2a8 <link_metrics_ie_write_commit+0x64>
        *mp_lm_lqi_addr = (uint8_t)nrf_802154_core_last_frame_lqi_get();
 100c29e:	f7fd fe0d 	bl	1009ebc <nrf_802154_core_last_frame_lqi_get>
        *p_written      = true;
 100c2a2:	2301      	movs	r3, #1
        *mp_lm_lqi_addr = (uint8_t)nrf_802154_core_last_frame_lqi_get();
 100c2a4:	7028      	strb	r0, [r5, #0]
        *p_written      = true;
 100c2a6:	7023      	strb	r3, [r4, #0]
}
 100c2a8:	bd70      	pop	{r4, r5, r6, pc}
 100c2aa:	bf00      	nop
 100c2ac:	2100343c 	.word	0x2100343c
 100c2b0:	21003438 	.word	0x21003438
 100c2b4:	21003434 	.word	0x21003434

0100c2b8 <csl_ie_write_commit.constprop.0>:
static void csl_ie_write_commit(bool * p_written)
 100c2b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if ((mp_csl_phase_addr == NULL) || (mp_csl_period_addr == NULL))
 100c2bc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 100c368 <csl_ie_write_commit.constprop.0+0xb0>
static void csl_ie_write_commit(bool * p_written)
 100c2c0:	4606      	mov	r6, r0
    if ((mp_csl_phase_addr == NULL) || (mp_csl_period_addr == NULL))
 100c2c2:	f8d8 3000 	ldr.w	r3, [r8]
 100c2c6:	2b00      	cmp	r3, #0
 100c2c8:	d04a      	beq.n	100c360 <csl_ie_write_commit.constprop.0+0xa8>
 100c2ca:	4f28      	ldr	r7, [pc, #160]	; (100c36c <csl_ie_write_commit.constprop.0+0xb4>)
 100c2cc:	683b      	ldr	r3, [r7, #0]
 100c2ce:	2b00      	cmp	r3, #0
 100c2d0:	d046      	beq.n	100c360 <csl_ie_write_commit.constprop.0+0xa8>
    if (m_csl_anchor_time_set)
 100c2d2:	4b27      	ldr	r3, [pc, #156]	; (100c370 <csl_ie_write_commit.constprop.0+0xb8>)
 100c2d4:	781b      	ldrb	r3, [r3, #0]
 100c2d6:	2b00      	cmp	r3, #0
 100c2d8:	d03d      	beq.n	100c356 <csl_ie_write_commit.constprop.0+0x9e>
        result = (m_csl_period != 0);
 100c2da:	4c26      	ldr	r4, [pc, #152]	; (100c374 <csl_ie_write_commit.constprop.0+0xbc>)
        if (result)
 100c2dc:	8823      	ldrh	r3, [r4, #0]
 100c2de:	2b00      	cmp	r3, #0
 100c2e0:	d03e      	beq.n	100c360 <csl_ie_write_commit.constprop.0+0xa8>
            uint64_t now           = nrf_802154_sl_timer_current_time_get();
 100c2e2:	f009 f809 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
            uint32_t csl_period_us = m_csl_period * IE_CSL_SYMBOLS_PER_UNIT * PHY_US_PER_SYMBOL;
 100c2e6:	23a0      	movs	r3, #160	; 0xa0
 100c2e8:	8825      	ldrh	r5, [r4, #0]
 100c2ea:	435d      	muls	r5, r3
            if (now >= m_csl_anchor_time)
 100c2ec:	4b22      	ldr	r3, [pc, #136]	; (100c378 <csl_ie_write_commit.constprop.0+0xc0>)
 100c2ee:	e9d3 4c00 	ldrd	r4, ip, [r3]
 100c2f2:	42a0      	cmp	r0, r4
 100c2f4:	eb71 030c 	sbcs.w	r3, r1, ip
 100c2f8:	f04f 0300 	mov.w	r3, #0
 100c2fc:	d324      	bcc.n	100c348 <csl_ie_write_commit.constprop.0+0x90>
                    (uint32_t)((now - m_csl_anchor_time) % csl_period_us);
 100c2fe:	1b00      	subs	r0, r0, r4
 100c300:	462a      	mov	r2, r5
 100c302:	eb61 010c 	sbc.w	r1, r1, ip
 100c306:	f7f3 ff27 	bl	1000158 <__aeabi_uldivmod>
                *p_time_to_midpoint = csl_period_us - time_from_previous_window;
 100c30a:	1aaa      	subs	r2, r5, r2
                *p_time_to_midpoint = (uint32_t)((m_csl_anchor_time - now) % csl_period_us);
 100c30c:	9201      	str	r2, [sp, #4]
    symbols   = time_remaining / PHY_US_PER_SYMBOL;
 100c30e:	9b01      	ldr	r3, [sp, #4]
    if (csl_phase > IE_CSL_PERIOD_MAX)
 100c310:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 100c314:	d224      	bcs.n	100c360 <csl_ie_write_commit.constprop.0+0xa8>
    csl_phase = symbols / IE_CSL_SYMBOLS_PER_UNIT;
 100c316:	22a0      	movs	r2, #160	; 0xa0
 100c318:	fbb3 f3f2 	udiv	r3, r3, r2
 * @param[out] p_buffer  A little-endian byte array to be populated
 */
static inline void host_16_to_little(uint16_t value, uint8_t * p_buffer)
{
    assert(p_buffer != NULL);
    memcpy(p_buffer, &value, sizeof(uint16_t));
 100c31c:	2202      	movs	r2, #2
 100c31e:	f8d8 0000 	ldr.w	r0, [r8]
 100c322:	eb0d 0102 	add.w	r1, sp, r2
    host_16_to_little(csl_phase, mp_csl_phase_addr);
 100c326:	f8ad 3002 	strh.w	r3, [sp, #2]
 100c32a:	f006 fb67 	bl	10129fc <memcpy>
 100c32e:	2202      	movs	r2, #2
    host_16_to_little(m_csl_period, mp_csl_period_addr);
 100c330:	4b10      	ldr	r3, [pc, #64]	; (100c374 <csl_ie_write_commit.constprop.0+0xbc>)
 100c332:	6838      	ldr	r0, [r7, #0]
 100c334:	881b      	ldrh	r3, [r3, #0]
 100c336:	eb0d 0102 	add.w	r1, sp, r2
 100c33a:	f8ad 3002 	strh.w	r3, [sp, #2]
 100c33e:	f006 fb5d 	bl	10129fc <memcpy>
    *p_written = true;
 100c342:	2301      	movs	r3, #1
 100c344:	7033      	strb	r3, [r6, #0]
 100c346:	e00b      	b.n	100c360 <csl_ie_write_commit.constprop.0+0xa8>
                *p_time_to_midpoint = (uint32_t)((m_csl_anchor_time - now) % csl_period_us);
 100c348:	1a20      	subs	r0, r4, r0
 100c34a:	462a      	mov	r2, r5
 100c34c:	eb6c 0101 	sbc.w	r1, ip, r1
 100c350:	f7f3 ff02 	bl	1000158 <__aeabi_uldivmod>
 100c354:	e7da      	b.n	100c30c <csl_ie_write_commit.constprop.0+0x54>
        result = nrf_802154_delayed_trx_nearest_drx_time_to_midpoint_get(p_time_to_midpoint);
 100c356:	a801      	add	r0, sp, #4
 100c358:	f7ff fd62 	bl	100be20 <nrf_802154_delayed_trx_nearest_drx_time_to_midpoint_get>
    if (csl_time_to_nearest_window_midpoint_get(&time_remaining) == false)
 100c35c:	2800      	cmp	r0, #0
 100c35e:	d1d6      	bne.n	100c30e <csl_ie_write_commit.constprop.0+0x56>
}
 100c360:	b002      	add	sp, #8
 100c362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100c366:	bf00      	nop
 100c368:	21003444 	.word	0x21003444
 100c36c:	21003440 	.word	0x21003440
 100c370:	2100448e 	.word	0x2100448e
 100c374:	21003ace 	.word	0x21003ace
 100c378:	210012a8 	.word	0x210012a8

0100c37c <nrf_802154_ie_writer_prepare>:
    csl_ie_write_commit(p_written);
    link_metrics_ie_write_commit(p_written);
}

void nrf_802154_ie_writer_prepare(uint8_t * p_ie_header, const uint8_t * p_end_addr)
{
 100c37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    assert(p_ie_header != NULL);
    assert(p_ie_header < p_end_addr);

    ie_writer_reset();
 100c37e:	f7ff ff47 	bl	100c210 <ie_writer_reset>
    m_writer_state = IE_WRITER_PREPARE;
 100c382:	2201      	movs	r2, #1
{
 100c384:	4604      	mov	r4, r0
 100c386:	460d      	mov	r5, r1
    m_writer_state = IE_WRITER_PREPARE;
 100c388:	4b2e      	ldr	r3, [pc, #184]	; (100c444 <nrf_802154_ie_writer_prepare+0xc8>)
    mp_csl_phase_addr  = (uint8_t *)nrf_802154_frame_parser_ie_content_address_get(p_iterator);
 100c38a:	4e2f      	ldr	r6, [pc, #188]	; (100c448 <nrf_802154_ie_writer_prepare+0xcc>)
    mp_csl_period_addr = mp_csl_phase_addr + sizeof(uint16_t);
 100c38c:	4f2f      	ldr	r7, [pc, #188]	; (100c44c <nrf_802154_ie_writer_prepare+0xd0>)
    m_writer_state = IE_WRITER_PREPARE;
 100c38e:	701a      	strb	r2, [r3, #0]
 * @returns  Identifier of currently iterated information element.
 *
 */
static inline uint8_t nrf_802154_frame_parser_ie_id_get(const uint8_t * p_ie_iterator)
{
    return (p_ie_iterator[IE_ID_OFFSET_0] >> 7) | (p_ie_iterator[IE_ID_OFFSET_1] << 1);
 100c390:	7822      	ldrb	r2, [r4, #0]
 100c392:	7861      	ldrb	r1, [r4, #1]
 100c394:	09d3      	lsrs	r3, r2, #7
 100c396:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
{
    uint8_t ie_id = nrf_802154_frame_parser_ie_id_get(p_ie_iterator);

    return ((nrf_802154_frame_parser_ie_length_get(p_ie_iterator) == 0) &&
            ((ie_id == IE_HT1) || (ie_id == IE_HT2)))
           || (p_ie_iterator >= p_end_addr);
 100c39a:	f012 017f 	ands.w	r1, r2, #127	; 0x7f
    return (p_ie_iterator[IE_ID_OFFSET_0] >> 7) | (p_ie_iterator[IE_ID_OFFSET_1] << 1);
 100c39e:	b2db      	uxtb	r3, r3
           || (p_ie_iterator >= p_end_addr);
 100c3a0:	d128      	bne.n	100c3f4 <nrf_802154_ie_writer_prepare+0x78>
    return ((nrf_802154_frame_parser_ie_length_get(p_ie_iterator) == 0) &&
 100c3a2:	f1a3 017e 	sub.w	r1, r3, #126	; 0x7e
 100c3a6:	2901      	cmp	r1, #1
 100c3a8:	d94a      	bls.n	100c440 <nrf_802154_ie_writer_prepare+0xc4>
           || (p_ie_iterator >= p_end_addr);
 100c3aa:	42a5      	cmp	r5, r4
 100c3ac:	d948      	bls.n	100c440 <nrf_802154_ie_writer_prepare+0xc4>
        switch (nrf_802154_frame_parser_ie_id_get(p_iterator))
 100c3ae:	2b00      	cmp	r3, #0
 100c3b0:	d040      	beq.n	100c434 <nrf_802154_ie_writer_prepare+0xb8>
 100c3b2:	2b1a      	cmp	r3, #26
 100c3b4:	d13e      	bne.n	100c434 <nrf_802154_ie_writer_prepare+0xb8>
    if (nrf_802154_frame_parser_ie_length_get(p_iterator) < IE_CSL_SIZE_MIN)
 100c3b6:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 100c3ba:	d004      	beq.n	100c3c6 <nrf_802154_ie_writer_prepare+0x4a>
    return p_ie_iterator + IE_DATA_OFFSET;
 100c3bc:	1ca3      	adds	r3, r4, #2
    mp_csl_phase_addr  = (uint8_t *)nrf_802154_frame_parser_ie_content_address_get(p_iterator);
 100c3be:	6033      	str	r3, [r6, #0]
    mp_csl_period_addr = mp_csl_phase_addr + sizeof(uint16_t);
 100c3c0:	1d23      	adds	r3, r4, #4
 100c3c2:	603b      	str	r3, [r7, #0]
        if (result == false)
 100c3c4:	e036      	b.n	100c434 <nrf_802154_ie_writer_prepare+0xb8>
    ie_writer_prepare(p_ie_header, p_end_addr);
}
 100c3c6:	b003      	add	sp, #12
 100c3c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            ie_writer_reset();
 100c3cc:	f7ff bf20 	b.w	100c210 <ie_writer_reset>
        switch (*p_content_iterator)
 100c3d0:	7811      	ldrb	r1, [r2, #0]
 100c3d2:	2902      	cmp	r1, #2
 100c3d4:	d00a      	beq.n	100c3ec <nrf_802154_ie_writer_prepare+0x70>
 100c3d6:	2903      	cmp	r1, #3
 100c3d8:	d00a      	beq.n	100c3f0 <nrf_802154_ie_writer_prepare+0x74>
 100c3da:	2901      	cmp	r1, #1
 100c3dc:	d1f3      	bne.n	100c3c6 <nrf_802154_ie_writer_prepare+0x4a>
                if (mp_lm_rssi_addr != NULL)
 100c3de:	491c      	ldr	r1, [pc, #112]	; (100c450 <nrf_802154_ie_writer_prepare+0xd4>)
                if (mp_lm_lqi_addr != NULL)
 100c3e0:	6808      	ldr	r0, [r1, #0]
 100c3e2:	2800      	cmp	r0, #0
 100c3e4:	d1ef      	bne.n	100c3c6 <nrf_802154_ie_writer_prepare+0x4a>
                mp_lm_lqi_addr = p_content_iterator;
 100c3e6:	600a      	str	r2, [r1, #0]
                break;
 100c3e8:	3201      	adds	r2, #1
        p_content_iterator++;
 100c3ea:	e021      	b.n	100c430 <nrf_802154_ie_writer_prepare+0xb4>
                if (mp_lm_margin_addr != NULL)
 100c3ec:	4919      	ldr	r1, [pc, #100]	; (100c454 <nrf_802154_ie_writer_prepare+0xd8>)
 100c3ee:	e7f7      	b.n	100c3e0 <nrf_802154_ie_writer_prepare+0x64>
                if (mp_lm_lqi_addr != NULL)
 100c3f0:	4919      	ldr	r1, [pc, #100]	; (100c458 <nrf_802154_ie_writer_prepare+0xdc>)
 100c3f2:	e7f5      	b.n	100c3e0 <nrf_802154_ie_writer_prepare+0x64>
           || (p_ie_iterator >= p_end_addr);
 100c3f4:	42a5      	cmp	r5, r4
 100c3f6:	d923      	bls.n	100c440 <nrf_802154_ie_writer_prepare+0xc4>
        switch (nrf_802154_frame_parser_ie_id_get(p_iterator))
 100c3f8:	2b00      	cmp	r3, #0
 100c3fa:	d1da      	bne.n	100c3b2 <nrf_802154_ie_writer_prepare+0x36>
                if (nrf_802154_frame_parser_ie_length_get(p_iterator) >= IE_VENDOR_SIZE_MIN &&
 100c3fc:	2902      	cmp	r1, #2
 100c3fe:	d919      	bls.n	100c434 <nrf_802154_ie_writer_prepare+0xb8>
{
    assert(p_buffer != NULL);

    uint32_t value = 0;

    memcpy(&value, p_buffer, 3);
 100c400:	2203      	movs	r2, #3
 100c402:	1ca1      	adds	r1, r4, #2
 100c404:	a801      	add	r0, sp, #4
    uint32_t value = 0;
 100c406:	9301      	str	r3, [sp, #4]
    memcpy(&value, p_buffer, 3);
 100c408:	f006 faf8 	bl	10129fc <memcpy>
 100c40c:	9a01      	ldr	r2, [sp, #4]
 100c40e:	4b13      	ldr	r3, [pc, #76]	; (100c45c <nrf_802154_ie_writer_prepare+0xe0>)
 100c410:	429a      	cmp	r2, r3
 100c412:	d10f      	bne.n	100c434 <nrf_802154_ie_writer_prepare+0xb8>
    return p_ie_iterator[IE_LENGTH_OFFSET] & IE_LENGTH_MASK;
 100c414:	7823      	ldrb	r3, [r4, #0]
                    if (nrf_802154_frame_parser_ie_length_get(p_iterator) >=
 100c416:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 100c41a:	d00b      	beq.n	100c434 <nrf_802154_ie_writer_prepare+0xb8>
                        IE_VENDOR_THREAD_SIZE_MIN &&
 100c41c:	7962      	ldrb	r2, [r4, #5]
 100c41e:	b94a      	cbnz	r2, 100c434 <nrf_802154_ie_writer_prepare+0xb8>
 100c420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (nrf_802154_frame_parser_ie_length_get(p_iterator) < IE_VENDOR_THREAD_ACK_SIZE_MIN ||
 100c424:	1f5a      	subs	r2, r3, #5
 100c426:	2a01      	cmp	r2, #1
 100c428:	d8cd      	bhi.n	100c3c6 <nrf_802154_ie_writer_prepare+0x4a>
           + nrf_802154_frame_parser_ie_length_get(p_ie_iterator);
 100c42a:	3302      	adds	r3, #2
 * @returns  Current vendor-specific IE thread data address.
 */
static inline const uint8_t * nrf_802154_frame_parser_ie_vendor_thread_data_addr_get(
    const uint8_t * p_ie_iterator)
{
    return nrf_802154_frame_parser_ie_content_address_get(p_ie_iterator) +
 100c42c:	1da2      	adds	r2, r4, #6
           + nrf_802154_frame_parser_ie_length_get(p_ie_iterator);
 100c42e:	4423      	add	r3, r4
    while (p_content_iterator != ie_end)
 100c430:	429a      	cmp	r2, r3
 100c432:	d1cd      	bne.n	100c3d0 <nrf_802154_ie_writer_prepare+0x54>
    return p_ie_iterator[IE_LENGTH_OFFSET] & IE_LENGTH_MASK;
 100c434:	7823      	ldrb	r3, [r4, #0]
 100c436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
           + nrf_802154_frame_parser_ie_length_get(p_ie_iterator);
 100c43a:	3302      	adds	r3, #2
 100c43c:	441c      	add	r4, r3
 100c43e:	e7a7      	b.n	100c390 <nrf_802154_ie_writer_prepare+0x14>
}
 100c440:	b003      	add	sp, #12
 100c442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100c444:	2100448f 	.word	0x2100448f
 100c448:	21003444 	.word	0x21003444
 100c44c:	21003440 	.word	0x21003440
 100c450:	2100343c 	.word	0x2100343c
 100c454:	21003438 	.word	0x21003438
 100c458:	21003434 	.word	0x21003434
 100c45c:	00eab89b 	.word	0x00eab89b

0100c460 <nrf_802154_ie_writer_tx_started_hook>:

    return true;
}

bool nrf_802154_ie_writer_tx_started_hook(uint8_t * p_frame)
{
 100c460:	b507      	push	{r0, r1, r2, lr}
    (void)p_frame;

    if (m_writer_state != IE_WRITER_PREPARE)
 100c462:	4b0e      	ldr	r3, [pc, #56]	; (100c49c <nrf_802154_ie_writer_tx_started_hook+0x3c>)
 100c464:	781a      	ldrb	r2, [r3, #0]
 100c466:	2a01      	cmp	r2, #1
 100c468:	d113      	bne.n	100c492 <nrf_802154_ie_writer_tx_started_hook+0x32>
    {
        return true;
    }

    bool written = false;
 100c46a:	2200      	movs	r2, #0
 100c46c:	f88d 2007 	strb.w	r2, [sp, #7]
    m_writer_state = IE_WRITER_COMMIT;
 100c470:	2202      	movs	r2, #2
    csl_ie_write_commit(p_written);
 100c472:	f10d 0007 	add.w	r0, sp, #7
    m_writer_state = IE_WRITER_COMMIT;
 100c476:	701a      	strb	r2, [r3, #0]
    csl_ie_write_commit(p_written);
 100c478:	f7ff ff1e 	bl	100c2b8 <csl_ie_write_commit.constprop.0>
    link_metrics_ie_write_commit(p_written);
 100c47c:	f10d 0007 	add.w	r0, sp, #7
 100c480:	f7ff fee0 	bl	100c244 <link_metrics_ie_write_commit>

    ie_writer_commit(&written);
    ie_writer_reset();
 100c484:	f7ff fec4 	bl	100c210 <ie_writer_reset>

    if (written)
 100c488:	f89d 3007 	ldrb.w	r3, [sp, #7]
 100c48c:	b10b      	cbz	r3, 100c492 <nrf_802154_ie_writer_tx_started_hook+0x32>
    {
        nrf_802154_tx_work_buffer_is_dynamic_data_updated_set();
 100c48e:	f7ff f8f3 	bl	100b678 <nrf_802154_tx_work_buffer_is_dynamic_data_updated_set>
    }

    return true;
}
 100c492:	2001      	movs	r0, #1
 100c494:	b003      	add	sp, #12
 100c496:	f85d fb04 	ldr.w	pc, [sp], #4
 100c49a:	bf00      	nop
 100c49c:	2100448f 	.word	0x2100448f

0100c4a0 <nrf_802154_ie_writer_tx_ack_started_hook>:

void nrf_802154_ie_writer_tx_ack_started_hook(uint8_t * p_ack)
{
 100c4a0:	b507      	push	{r0, r1, r2, lr}
    (void)p_ack;

    if (m_writer_state != IE_WRITER_PREPARE)
 100c4a2:	4b0f      	ldr	r3, [pc, #60]	; (100c4e0 <nrf_802154_ie_writer_tx_ack_started_hook+0x40>)
 100c4a4:	781a      	ldrb	r2, [r3, #0]
 100c4a6:	2a01      	cmp	r2, #1
 100c4a8:	d116      	bne.n	100c4d8 <nrf_802154_ie_writer_tx_ack_started_hook+0x38>
    {
        return;
    }

    bool written = false;
 100c4aa:	2200      	movs	r2, #0
 100c4ac:	f88d 2007 	strb.w	r2, [sp, #7]
    m_writer_state = IE_WRITER_COMMIT;
 100c4b0:	2202      	movs	r2, #2
    csl_ie_write_commit(p_written);
 100c4b2:	f10d 0007 	add.w	r0, sp, #7
    m_writer_state = IE_WRITER_COMMIT;
 100c4b6:	701a      	strb	r2, [r3, #0]
    csl_ie_write_commit(p_written);
 100c4b8:	f7ff fefe 	bl	100c2b8 <csl_ie_write_commit.constprop.0>
    link_metrics_ie_write_commit(p_written);
 100c4bc:	f10d 0007 	add.w	r0, sp, #7
 100c4c0:	f7ff fec0 	bl	100c244 <link_metrics_ie_write_commit>

    ie_writer_commit(&written);
    ie_writer_reset();
 100c4c4:	f7ff fea4 	bl	100c210 <ie_writer_reset>

    if (written)
 100c4c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 100c4cc:	b123      	cbz	r3, 100c4d8 <nrf_802154_ie_writer_tx_ack_started_hook+0x38>
    {
        nrf_802154_tx_work_buffer_is_dynamic_data_updated_set();
    }
}
 100c4ce:	b003      	add	sp, #12
 100c4d0:	f85d eb04 	ldr.w	lr, [sp], #4
        nrf_802154_tx_work_buffer_is_dynamic_data_updated_set();
 100c4d4:	f7ff b8d0 	b.w	100b678 <nrf_802154_tx_work_buffer_is_dynamic_data_updated_set>
}
 100c4d8:	b003      	add	sp, #12
 100c4da:	f85d fb04 	ldr.w	pc, [sp], #4
 100c4de:	bf00      	nop
 100c4e0:	2100448f 	.word	0x2100448f

0100c4e4 <nrf_802154_ie_writer_csl_period_set>:

#if NRF_802154_DELAYED_TRX_ENABLED

void nrf_802154_ie_writer_csl_period_set(uint16_t period)
{
    m_csl_period = period;
 100c4e4:	4b01      	ldr	r3, [pc, #4]	; (100c4ec <nrf_802154_ie_writer_csl_period_set+0x8>)
 100c4e6:	8018      	strh	r0, [r3, #0]
}
 100c4e8:	4770      	bx	lr
 100c4ea:	bf00      	nop
 100c4ec:	21003ace 	.word	0x21003ace

0100c4f0 <nrf_802154_ie_writer_csl_anchor_time_set>:

void nrf_802154_ie_writer_csl_anchor_time_set(uint64_t anchor_time)
{
    m_csl_anchor_time     = anchor_time;
    m_csl_anchor_time_set = true;
 100c4f0:	2201      	movs	r2, #1
    m_csl_anchor_time     = anchor_time;
 100c4f2:	4b03      	ldr	r3, [pc, #12]	; (100c500 <nrf_802154_ie_writer_csl_anchor_time_set+0x10>)
 100c4f4:	e9c3 0100 	strd	r0, r1, [r3]
    m_csl_anchor_time_set = true;
 100c4f8:	4b02      	ldr	r3, [pc, #8]	; (100c504 <nrf_802154_ie_writer_csl_anchor_time_set+0x14>)
 100c4fa:	701a      	strb	r2, [r3, #0]
}
 100c4fc:	4770      	bx	lr
 100c4fe:	bf00      	nop
 100c500:	210012a8 	.word	0x210012a8
 100c504:	2100448e 	.word	0x2100448e

0100c508 <ifs_tx_result_notify>:
{
    return ((m_state & expected_state_mask) != 0);
}

static void ifs_tx_result_notify(bool result)
{
 100c508:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!result)
 100c50a:	4601      	mov	r1, r0
 100c50c:	b960      	cbnz	r0, 100c528 <ifs_tx_result_notify+0x20>
    {
        nrf_802154_transmit_done_metadata_t metadata = {};
 100c50e:	2218      	movs	r2, #24
 100c510:	4668      	mov	r0, sp
 100c512:	f006 fa7e 	bl	1012a12 <memset>

        metadata.frame_props = m_context.params.frame_props;
 100c516:	4b06      	ldr	r3, [pc, #24]	; (100c530 <ifs_tx_result_notify+0x28>)
        nrf_802154_notify_transmit_failed(m_context.p_data,
 100c518:	2107      	movs	r1, #7
        metadata.frame_props = m_context.params.frame_props;
 100c51a:	889a      	ldrh	r2, [r3, #4]
        nrf_802154_notify_transmit_failed(m_context.p_data,
 100c51c:	6818      	ldr	r0, [r3, #0]
        metadata.frame_props = m_context.params.frame_props;
 100c51e:	f8ad 2000 	strh.w	r2, [sp]
        nrf_802154_notify_transmit_failed(m_context.p_data,
 100c522:	466a      	mov	r2, sp
 100c524:	f007 f957 	bl	10137d6 <nrf_802154_notify_transmit_failed>
                                          NRF_802154_TX_ERROR_TIMESLOT_DENIED,
                                          &metadata);
    }
}
 100c528:	b007      	add	sp, #28
 100c52a:	f85d fb04 	ldr.w	pc, [sp], #4
 100c52e:	bf00      	nop
 100c530:	21003448 	.word	0x21003448

0100c534 <ifs_state_set>:
 100c534:	f3bf 8f5f 	dmb	sy
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 100c538:	4a08      	ldr	r2, [pc, #32]	; (100c55c <ifs_state_set+0x28>)
 100c53a:	e8d2 3f4f 	ldrexb	r3, [r2]
        if ( old_val != *p_expected)
 100c53e:	b2db      	uxtb	r3, r3
 100c540:	4283      	cmp	r3, r0
 100c542:	d003      	beq.n	100c54c <ifs_state_set+0x18>
  __ASM volatile ("clrex" ::: "memory");
 100c544:	f3bf 8f2f 	clrex
            return false;
 100c548:	2000      	movs	r0, #0
 100c54a:	4770      	bx	lr
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 100c54c:	e8c2 1f43 	strexb	r3, r1, [r2]
    while (__STREXB(desired, (volatile uint8_t *)p_obj));
 100c550:	2b00      	cmp	r3, #0
 100c552:	d1f2      	bne.n	100c53a <ifs_state_set+0x6>
  __ASM volatile ("dmb 0xF":::"memory");
 100c554:	f3bf 8f5f 	dmb	sy
    return true;
 100c558:	2001      	movs	r0, #1
}
 100c55a:	4770      	bx	lr
 100c55c:	2100449a 	.word	0x2100449a

0100c560 <callback_fired>:

static void callback_fired(nrf_802154_sl_timer_t * p_timer)
{
 100c560:	b513      	push	{r0, r1, r4, lr}
    ifs_operation_t * p_ctx = (ifs_operation_t *)p_timer->user_data.p_pointer;

    if (ifs_state_set(IFS_STATE_ARMED, IFS_STATE_FIRED))
 100c562:	2104      	movs	r1, #4
    ifs_operation_t * p_ctx = (ifs_operation_t *)p_timer->user_data.p_pointer;
 100c564:	6984      	ldr	r4, [r0, #24]
    if (ifs_state_set(IFS_STATE_ARMED, IFS_STATE_FIRED))
 100c566:	2002      	movs	r0, #2
 100c568:	f7ff ffe4 	bl	100c534 <ifs_state_set>
 100c56c:	b170      	cbz	r0, 100c58c <callback_fired+0x2c>
    {
        nrf_802154_request_transmit(NRF_802154_TERM_NONE,
 100c56e:	4b08      	ldr	r3, [pc, #32]	; (100c590 <callback_fired+0x30>)
 100c570:	2000      	movs	r0, #0
 100c572:	9300      	str	r3, [sp, #0]
 100c574:	6822      	ldr	r2, [r4, #0]
 100c576:	1863      	adds	r3, r4, r1
 100c578:	2106      	movs	r1, #6
 100c57a:	f007 f98b 	bl	1013894 <nrf_802154_request_transmit>
                                    REQ_ORIG_IFS,
                                    p_ctx->p_data,
                                    &p_ctx->params,
                                    ifs_tx_result_notify);

        ifs_state_set(IFS_STATE_FIRED, IFS_STATE_STOPPED);
 100c57e:	2101      	movs	r1, #1
 100c580:	2004      	movs	r0, #4
    }
}
 100c582:	b002      	add	sp, #8
 100c584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ifs_state_set(IFS_STATE_FIRED, IFS_STATE_STOPPED);
 100c588:	f7ff bfd4 	b.w	100c534 <ifs_state_set>
}
 100c58c:	b002      	add	sp, #8
 100c58e:	bd10      	pop	{r4, pc}
 100c590:	0100c509 	.word	0x0100c509

0100c594 <nrf_802154_ifs_init>:
    return ifs_period;
}

void nrf_802154_ifs_init(void)
{
    m_state                    = IFS_STATE_STOPPED;
 100c594:	2201      	movs	r2, #1
 100c596:	4b09      	ldr	r3, [pc, #36]	; (100c5bc <nrf_802154_ifs_init+0x28>)
    m_is_last_address_extended = false;
    m_last_frame_timestamp     = 0;
 100c598:	2000      	movs	r0, #0
    m_state                    = IFS_STATE_STOPPED;
 100c59a:	701a      	strb	r2, [r3, #0]
    m_is_last_address_extended = false;
 100c59c:	2300      	movs	r3, #0
    m_last_frame_timestamp     = 0;
 100c59e:	2100      	movs	r1, #0
    m_is_last_address_extended = false;
 100c5a0:	4a07      	ldr	r2, [pc, #28]	; (100c5c0 <nrf_802154_ifs_init+0x2c>)
 100c5a2:	7013      	strb	r3, [r2, #0]
    m_last_frame_timestamp     = 0;
 100c5a4:	4a07      	ldr	r2, [pc, #28]	; (100c5c4 <nrf_802154_ifs_init+0x30>)
 100c5a6:	e9c2 0100 	strd	r0, r1, [r2]
    m_last_frame_length        = 0;
 100c5aa:	4a07      	ldr	r2, [pc, #28]	; (100c5c8 <nrf_802154_ifs_init+0x34>)
    m_context                  = (ifs_operation_t){ .p_data = NULL };

    nrf_802154_sl_timer_init(&m_timer);
 100c5ac:	4807      	ldr	r0, [pc, #28]	; (100c5cc <nrf_802154_ifs_init+0x38>)
    m_last_frame_length        = 0;
 100c5ae:	7013      	strb	r3, [r2, #0]
    m_context                  = (ifs_operation_t){ .p_data = NULL };
 100c5b0:	4a07      	ldr	r2, [pc, #28]	; (100c5d0 <nrf_802154_ifs_init+0x3c>)
 100c5b2:	e9c2 3300 	strd	r3, r3, [r2]
 100c5b6:	6093      	str	r3, [r2, #8]
    nrf_802154_sl_timer_init(&m_timer);
 100c5b8:	f008 bea5 	b.w	1015306 <nrf_802154_sl_timer_init>
 100c5bc:	2100449a 	.word	0x2100449a
 100c5c0:	21004491 	.word	0x21004491
 100c5c4:	210012d8 	.word	0x210012d8
 100c5c8:	21004490 	.word	0x21004490
 100c5cc:	210012b0 	.word	0x210012b0
 100c5d0:	21003448 	.word	0x21003448

0100c5d4 <nrf_802154_ifs_pretransmission>:

bool nrf_802154_ifs_pretransmission(
    uint8_t                                 * p_frame,
    nrf_802154_transmit_params_t            * p_params,
    nrf_802154_transmit_failed_notification_t notify_function)
{
 100c5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    (void)notify_function;

    nrf_802154_ifs_mode_t mode;

    if (p_params->immediate)
 100c5d8:	f891 8006 	ldrb.w	r8, [r1, #6]
{
 100c5dc:	4681      	mov	r9, r0
 100c5de:	460e      	mov	r6, r1
 100c5e0:	b086      	sub	sp, #24
    if (p_params->immediate)
 100c5e2:	f1b8 0f00 	cmp.w	r8, #0
 100c5e6:	d176      	bne.n	100c6d6 <nrf_802154_ifs_pretransmission+0x102>
    {
        return true;
    }

    mode = nrf_802154_pib_ifs_mode_get();
 100c5e8:	f7fd fe3a 	bl	100a260 <nrf_802154_pib_ifs_mode_get>

    if (mode == NRF_802154_IFS_MODE_DISABLED)
 100c5ec:	2800      	cmp	r0, #0
 100c5ee:	d072      	beq.n	100c6d6 <nrf_802154_ifs_pretransmission+0x102>
    {
        // Functionality is disabled - skip the routine.
        return true;
    }

    if (!m_last_frame_length)
 100c5f0:	4c3c      	ldr	r4, [pc, #240]	; (100c6e4 <nrf_802154_ifs_pretransmission+0x110>)
 100c5f2:	7823      	ldrb	r3, [r4, #0]
 100c5f4:	2b00      	cmp	r3, #0
 100c5f6:	d06e      	beq.n	100c6d6 <nrf_802154_ifs_pretransmission+0x102>
    {
        // No frame was transmitted before - skip the routine.
        return true;
    }

    if ((mode == NRF_802154_IFS_MODE_MATCHING_ADDRESSES) && !is_ifs_needed_by_address(p_frame))
 100c5f8:	2801      	cmp	r0, #1
 100c5fa:	d123      	bne.n	100c644 <nrf_802154_ifs_pretransmission+0x70>
    bool result = nrf_802154_frame_parser_data_init(p_frame,
 100c5fc:	f899 1000 	ldrb.w	r1, [r9]
 100c600:	466b      	mov	r3, sp
 100c602:	3101      	adds	r1, #1
 100c604:	2203      	movs	r2, #3
 100c606:	4648      	mov	r0, r9
 100c608:	b2c9      	uxtb	r1, r1
 100c60a:	f007 f82f 	bl	101366c <nrf_802154_frame_parser_data_init>
    if (result)
 100c60e:	b1c8      	cbz	r0, 100c644 <nrf_802154_ifs_pretransmission+0x70>
    return p_parser_data->mhr.dst.addr_offset;
 100c610:	f89d 0007 	ldrb.w	r0, [sp, #7]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100c614:	28ff      	cmp	r0, #255	; 0xff
 100c616:	d015      	beq.n	100c644 <nrf_802154_ifs_pretransmission+0x70>
    return &p_parser_data->p_frame[offset];
 100c618:	9d00      	ldr	r5, [sp, #0]
    if (is_extended == m_is_last_address_extended)
 100c61a:	4a33      	ldr	r2, [pc, #204]	; (100c6e8 <nrf_802154_ifs_pretransmission+0x114>)
 100c61c:	78ab      	ldrb	r3, [r5, #2]
 100c61e:	7811      	ldrb	r1, [r2, #0]
 100c620:	f003 030c 	and.w	r3, r3, #12
 100c624:	f1a3 070c 	sub.w	r7, r3, #12
 100c628:	427a      	negs	r2, r7
 100c62a:	417a      	adcs	r2, r7
 100c62c:	4291      	cmp	r1, r2
 100c62e:	d152      	bne.n	100c6d6 <nrf_802154_ifs_pretransmission+0x102>
        size_t    addr_len  = is_extended ? EXTENDED_ADDRESS_SIZE : SHORT_ADDRESS_SIZE;
 100c630:	2b0c      	cmp	r3, #12
        if (0 == memcmp(addr, last_addr, addr_len))
 100c632:	bf14      	ite	ne
 100c634:	2202      	movne	r2, #2
 100c636:	2208      	moveq	r2, #8
 100c638:	492c      	ldr	r1, [pc, #176]	; (100c6ec <nrf_802154_ifs_pretransmission+0x118>)
 100c63a:	4428      	add	r0, r5
 100c63c:	f006 f9b7 	bl	10129ae <memcmp>
 100c640:	2800      	cmp	r0, #0
 100c642:	d148      	bne.n	100c6d6 <nrf_802154_ifs_pretransmission+0x102>
    {
        return true;
    }

    uint64_t current_timestamp = nrf_802154_sl_timer_current_time_get();
 100c644:	f008 fe58 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
    if (!nrf_802154_sl_time64_is_in_future(m_last_frame_timestamp, current_timestamp))
 100c648:	4f29      	ldr	r7, [pc, #164]	; (100c6f0 <nrf_802154_ifs_pretransmission+0x11c>)
 100c64a:	e9d7 3200 	ldrd	r3, r2, [r7]
 100c64e:	4283      	cmp	r3, r0
 100c650:	eb72 0501 	sbcs.w	r5, r2, r1
 100c654:	d331      	bcc.n	100c6ba <nrf_802154_ifs_pretransmission+0xe6>
        if (current_timestamp != m_last_frame_timestamp)
 100c656:	4291      	cmp	r1, r2
 100c658:	bf08      	it	eq
 100c65a:	4298      	cmpeq	r0, r3
 100c65c:	d13b      	bne.n	100c6d6 <nrf_802154_ifs_pretransmission+0x102>
    if (m_last_frame_length > MAX_SIFS_FRAME_SIZE)
 100c65e:	7823      	ldrb	r3, [r4, #0]
 100c660:	2b12      	cmp	r3, #18
 100c662:	d927      	bls.n	100c6b4 <nrf_802154_ifs_pretransmission+0xe0>
        ifs_period = nrf_802154_pib_ifs_min_lifs_period_get();
 100c664:	f7fd fe18 	bl	100a298 <nrf_802154_pib_ifs_min_lifs_period_get>
        ifs_period = nrf_802154_pib_ifs_min_sifs_period_get();
 100c668:	4604      	mov	r4, r0
    uint32_t dt                = ifs_needed_by_time(current_timestamp);

    if (dt == 0)
 100c66a:	b3a0      	cbz	r0, 100c6d6 <nrf_802154_ifs_pretransmission+0x102>
    {
        return true;
    }

    if (!ifs_state_set(IFS_STATE_STOPPED, IFS_STATE_ARMED))
 100c66c:	2102      	movs	r1, #2
 100c66e:	2001      	movs	r0, #1
 100c670:	f7ff ff60 	bl	100c534 <ifs_state_set>
 100c674:	b1d0      	cbz	r0, 100c6ac <nrf_802154_ifs_pretransmission+0xd8>
    {
        m_context.p_data                 = p_frame;
        m_context.params.frame_props     = p_params->frame_props;
        m_context.params.cca             = p_params->cca;
        m_context.params.tx_power        = p_params->tx_power;
        m_context.params.immediate       = true;
 100c676:	2501      	movs	r5, #1
        m_context.p_data                 = p_frame;
 100c678:	4b1e      	ldr	r3, [pc, #120]	; (100c6f4 <nrf_802154_ifs_pretransmission+0x120>)
        m_timer.trigger_time             = m_last_frame_timestamp + dt;
 100c67a:	481f      	ldr	r0, [pc, #124]	; (100c6f8 <nrf_802154_ifs_pretransmission+0x124>)
        m_context.p_data                 = p_frame;
 100c67c:	f8c3 9000 	str.w	r9, [r3]
        m_context.params.frame_props     = p_params->frame_props;
 100c680:	8832      	ldrh	r2, [r6, #0]
 100c682:	809a      	strh	r2, [r3, #4]
        m_context.params.cca             = p_params->cca;
 100c684:	7972      	ldrb	r2, [r6, #5]
 100c686:	725a      	strb	r2, [r3, #9]
        m_context.params.tx_power        = p_params->tx_power;
 100c688:	8872      	ldrh	r2, [r6, #2]
 100c68a:	80da      	strh	r2, [r3, #6]
 100c68c:	7932      	ldrb	r2, [r6, #4]
        m_context.params.immediate       = true;
 100c68e:	729d      	strb	r5, [r3, #10]
        m_context.params.tx_power        = p_params->tx_power;
 100c690:	721a      	strb	r2, [r3, #8]
        m_timer.trigger_time             = m_last_frame_timestamp + dt;
 100c692:	e9d7 2100 	ldrd	r2, r1, [r7]
 100c696:	1912      	adds	r2, r2, r4
 100c698:	f141 0100 	adc.w	r1, r1, #0
 100c69c:	e9c0 2104 	strd	r2, r1, [r0, #16]
        m_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
        m_timer.action.callback.callback = callback_fired;
 100c6a0:	4a16      	ldr	r2, [pc, #88]	; (100c6fc <nrf_802154_ifs_pretransmission+0x128>)
        m_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
 100c6a2:	7705      	strb	r5, [r0, #28]
        m_timer.action.callback.callback = callback_fired;
 100c6a4:	6202      	str	r2, [r0, #32]
        m_timer.user_data.p_pointer      = &m_context;
 100c6a6:	6183      	str	r3, [r0, #24]

        if (nrf_802154_sl_timer_add(&m_timer) != NRF_802154_SL_TIMER_RET_SUCCESS)
 100c6a8:	f005 f91c 	bl	10118e4 <nrf_802154_sl_timer_add>
            assert(false);
        }
    }

    return false;
}
 100c6ac:	4640      	mov	r0, r8
 100c6ae:	b006      	add	sp, #24
 100c6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ifs_period = nrf_802154_pib_ifs_min_sifs_period_get();
 100c6b4:	f7fd fde4 	bl	100a280 <nrf_802154_pib_ifs_min_sifs_period_get>
 100c6b8:	e7d6      	b.n	100c668 <nrf_802154_ifs_pretransmission+0x94>
    uint64_t dt = current_timestamp - m_last_frame_timestamp;
 100c6ba:	1ac5      	subs	r5, r0, r3
    if (m_last_frame_length > MAX_SIFS_FRAME_SIZE)
 100c6bc:	7823      	ldrb	r3, [r4, #0]
    uint64_t dt = current_timestamp - m_last_frame_timestamp;
 100c6be:	eb61 0a02 	sbc.w	sl, r1, r2
    if (m_last_frame_length > MAX_SIFS_FRAME_SIZE)
 100c6c2:	2b12      	cmp	r3, #18
 100c6c4:	d90a      	bls.n	100c6dc <nrf_802154_ifs_pretransmission+0x108>
        ifs_period = nrf_802154_pib_ifs_min_lifs_period_get();
 100c6c6:	f7fd fde7 	bl	100a298 <nrf_802154_pib_ifs_min_lifs_period_get>
    if (dt > ifs_period)
 100c6ca:	2300      	movs	r3, #0
 100c6cc:	42a8      	cmp	r0, r5
 100c6ce:	eb73 030a 	sbcs.w	r3, r3, sl
        ifs_period = nrf_802154_pib_ifs_min_sifs_period_get();
 100c6d2:	4604      	mov	r4, r0
    if (dt > ifs_period)
 100c6d4:	d2ca      	bcs.n	100c66c <nrf_802154_ifs_pretransmission+0x98>
        return true;
 100c6d6:	f04f 0801 	mov.w	r8, #1
 100c6da:	e7e7      	b.n	100c6ac <nrf_802154_ifs_pretransmission+0xd8>
        ifs_period = nrf_802154_pib_ifs_min_sifs_period_get();
 100c6dc:	f7fd fdd0 	bl	100a280 <nrf_802154_pib_ifs_min_sifs_period_get>
 100c6e0:	e7f3      	b.n	100c6ca <nrf_802154_ifs_pretransmission+0xf6>
 100c6e2:	bf00      	nop
 100c6e4:	21004490 	.word	0x21004490
 100c6e8:	21004491 	.word	0x21004491
 100c6ec:	21004492 	.word	0x21004492
 100c6f0:	210012d8 	.word	0x210012d8
 100c6f4:	21003448 	.word	0x21003448
 100c6f8:	210012b0 	.word	0x210012b0
 100c6fc:	0100c561 	.word	0x0100c561

0100c700 <nrf_802154_ifs_transmitted_hook>:

void nrf_802154_ifs_transmitted_hook(const uint8_t * p_frame)
{
 100c700:	b530      	push	{r4, r5, lr}
 100c702:	b087      	sub	sp, #28
 100c704:	4604      	mov	r4, r0
    assert(p_frame[0] != 0U);

    m_last_frame_timestamp = nrf_802154_sl_timer_current_time_get();
 100c706:	f008 fdf7 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
 100c70a:	4b16      	ldr	r3, [pc, #88]	; (100c764 <nrf_802154_ifs_transmitted_hook+0x64>)

    nrf_802154_frame_parser_data_t frame_data;
    const uint8_t                * addr;

    bool result = nrf_802154_frame_parser_data_init(p_frame,
 100c70c:	2203      	movs	r2, #3
    m_last_frame_timestamp = nrf_802154_sl_timer_current_time_get();
 100c70e:	e9c3 0100 	strd	r0, r1, [r3]
    bool result = nrf_802154_frame_parser_data_init(p_frame,
 100c712:	7821      	ldrb	r1, [r4, #0]
 100c714:	466b      	mov	r3, sp
 100c716:	3101      	adds	r1, #1
 100c718:	4620      	mov	r0, r4
 100c71a:	b2c9      	uxtb	r1, r1
 100c71c:	f006 ffa6 	bl	101366c <nrf_802154_frame_parser_data_init>
                                                    p_frame[PHR_OFFSET] + PHR_SIZE,
                                                    PARSE_LEVEL_ADDRESSING_END,
                                                    &frame_data);

    if (result)
 100c720:	4a11      	ldr	r2, [pc, #68]	; (100c768 <nrf_802154_ifs_transmitted_hook+0x68>)
 100c722:	b198      	cbz	r0, 100c74c <nrf_802154_ifs_transmitted_hook+0x4c>
    return p_parser_data->mhr.dst.addr_offset;
 100c724:	9900      	ldr	r1, [sp, #0]
 100c726:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100c72a:	788b      	ldrb	r3, [r1, #2]
 100c72c:	f003 030c 	and.w	r3, r3, #12
    return (p_parser_data->p_frame[DEST_ADDR_TYPE_OFFSET] & DEST_ADDR_TYPE_MASK) ==
 100c730:	f1a3 0c0c 	sub.w	ip, r3, #12
 100c734:	f1dc 0000 	rsbs	r0, ip, #0
 100c738:	eb40 000c 	adc.w	r0, r0, ip
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100c73c:	2dff      	cmp	r5, #255	; 0xff
 100c73e:	d005      	beq.n	100c74c <nrf_802154_ifs_transmitted_hook+0x4c>
        // If the transmitted frame has no address, we consider that enough time has passed so no IFS insertion will be needed.
        m_last_frame_length = 0;
        return;
    }

    if (m_is_last_address_extended)
 100c740:	2b0c      	cmp	r3, #12
    return &p_parser_data->p_frame[offset];
 100c742:	4429      	add	r1, r5
        m_is_last_address_extended = nrf_802154_frame_parser_dst_addr_is_extended(&frame_data);
 100c744:	7010      	strb	r0, [r2, #0]
    if (m_is_last_address_extended)
 100c746:	d007      	beq.n	100c758 <nrf_802154_ifs_transmitted_hook+0x58>
    {
        memcpy(m_last_address.ext, addr, EXTENDED_ADDRESS_SIZE);
    }
    else
    {
        memcpy(m_last_address.sh, addr, SHORT_ADDRESS_SIZE);
 100c748:	2202      	movs	r2, #2
 100c74a:	e006      	b.n	100c75a <nrf_802154_ifs_transmitted_hook+0x5a>
        m_is_last_address_extended = nrf_802154_frame_parser_dst_addr_is_extended(&frame_data);
 100c74c:	2300      	movs	r3, #0
 100c74e:	7010      	strb	r0, [r2, #0]
    }

    m_last_frame_length = p_frame[0];
 100c750:	4a06      	ldr	r2, [pc, #24]	; (100c76c <nrf_802154_ifs_transmitted_hook+0x6c>)
 100c752:	7013      	strb	r3, [r2, #0]
}
 100c754:	b007      	add	sp, #28
 100c756:	bd30      	pop	{r4, r5, pc}
        memcpy(m_last_address.ext, addr, EXTENDED_ADDRESS_SIZE);
 100c758:	2208      	movs	r2, #8
        memcpy(m_last_address.sh, addr, SHORT_ADDRESS_SIZE);
 100c75a:	4805      	ldr	r0, [pc, #20]	; (100c770 <nrf_802154_ifs_transmitted_hook+0x70>)
 100c75c:	f006 f94e 	bl	10129fc <memcpy>
    m_last_frame_length = p_frame[0];
 100c760:	7823      	ldrb	r3, [r4, #0]
 100c762:	e7f5      	b.n	100c750 <nrf_802154_ifs_transmitted_hook+0x50>
 100c764:	210012d8 	.word	0x210012d8
 100c768:	21004491 	.word	0x21004491
 100c76c:	21004490 	.word	0x21004490
 100c770:	21004492 	.word	0x21004492

0100c774 <nrf_802154_ifs_abort>:

bool nrf_802154_ifs_abort(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
 100c774:	b510      	push	{r4, lr}
    bool result = true;

    if (req_orig == REQ_ORIG_IFS)
 100c776:	2906      	cmp	r1, #6
{
 100c778:	b086      	sub	sp, #24
    if (req_orig == REQ_ORIG_IFS)
 100c77a:	d019      	beq.n	100c7b0 <nrf_802154_ifs_abort+0x3c>
    {
        // Ignore if self-request.
    }
    else
    {
        if (term_lvl >= NRF_802154_TERM_802154)
 100c77c:	b1d8      	cbz	r0, 100c7b6 <nrf_802154_ifs_abort+0x42>
        {
            if (ifs_state_set(IFS_STATE_ARMED, IFS_STATE_ABORTING))
 100c77e:	2108      	movs	r1, #8
 100c780:	2002      	movs	r0, #2
 100c782:	f7ff fed7 	bl	100c534 <ifs_state_set>
 100c786:	b178      	cbz	r0, 100c7a8 <nrf_802154_ifs_abort+0x34>
            {
                ifs_operation_t * p_op = (ifs_operation_t *)m_timer.user_data.p_pointer;
 100c788:	4b0f      	ldr	r3, [pc, #60]	; (100c7c8 <nrf_802154_ifs_abort+0x54>)

                // The IFS was still waiting, so the transmission didn't occur
                // at all. Notify with frame_props passed in nrf_802154_ifs_pretransmission hook
                nrf_802154_transmit_done_metadata_t metadata = {};
 100c78a:	2218      	movs	r2, #24
 100c78c:	2100      	movs	r1, #0
 100c78e:	4668      	mov	r0, sp
                ifs_operation_t * p_op = (ifs_operation_t *)m_timer.user_data.p_pointer;
 100c790:	699c      	ldr	r4, [r3, #24]
                nrf_802154_transmit_done_metadata_t metadata = {};
 100c792:	f006 f93e 	bl	1012a12 <memset>

                metadata.frame_props = m_context.params.frame_props;
 100c796:	4b0d      	ldr	r3, [pc, #52]	; (100c7cc <nrf_802154_ifs_abort+0x58>)
                nrf_802154_notify_transmit_failed(p_op->p_data,
 100c798:	466a      	mov	r2, sp
                metadata.frame_props = m_context.params.frame_props;
 100c79a:	889b      	ldrh	r3, [r3, #4]
                nrf_802154_notify_transmit_failed(p_op->p_data,
 100c79c:	2106      	movs	r1, #6
                metadata.frame_props = m_context.params.frame_props;
 100c79e:	f8ad 3000 	strh.w	r3, [sp]
                nrf_802154_notify_transmit_failed(p_op->p_data,
 100c7a2:	6820      	ldr	r0, [r4, #0]
 100c7a4:	f007 f817 	bl	10137d6 <nrf_802154_notify_transmit_failed>
                                                  NRF_802154_TX_ERROR_ABORTED,
                                                  &metadata);
            }

            ifs_state_set(IFS_STATE_MASK, IFS_STATE_STOPPED);
 100c7a8:	2101      	movs	r1, #1
 100c7aa:	200f      	movs	r0, #15
 100c7ac:	f7ff fec2 	bl	100c534 <ifs_state_set>
    bool result = true;
 100c7b0:	2001      	movs	r0, #1
            result = !ifs_state_is(IFS_STATE_ARMED | IFS_STATE_FIRED);
        }
    }

    return result;
}
 100c7b2:	b006      	add	sp, #24
 100c7b4:	bd10      	pop	{r4, pc}
    return ((m_state & expected_state_mask) != 0);
 100c7b6:	4b06      	ldr	r3, [pc, #24]	; (100c7d0 <nrf_802154_ifs_abort+0x5c>)
 100c7b8:	781b      	ldrb	r3, [r3, #0]
            result = !ifs_state_is(IFS_STATE_ARMED | IFS_STATE_FIRED);
 100c7ba:	f013 0f06 	tst.w	r3, #6
 100c7be:	bf0c      	ite	eq
 100c7c0:	2001      	moveq	r0, #1
 100c7c2:	2000      	movne	r0, #0
 100c7c4:	e7f5      	b.n	100c7b2 <nrf_802154_ifs_abort+0x3e>
 100c7c6:	bf00      	nop
 100c7c8:	210012b0 	.word	0x210012b0
 100c7cc:	21003448 	.word	0x21003448
 100c7d0:	2100449a 	.word	0x2100449a

0100c7d4 <nrf_802154_security_pib_init>:

nrf_802154_security_error_t nrf_802154_security_pib_init(void)
{
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
    {
        m_key_storage[i].taken = false;
 100c7d4:	2000      	movs	r0, #0
 100c7d6:	4b04      	ldr	r3, [pc, #16]	; (100c7e8 <nrf_802154_security_pib_init+0x14>)
 100c7d8:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 100c7dc:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
 100c7e0:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
    }

    return NRF_802154_SECURITY_ERROR_NONE;
}
 100c7e4:	4770      	bx	lr
 100c7e6:	bf00      	nop
 100c7e8:	21003458 	.word	0x21003458

0100c7ec <nrf_802154_security_pib_key_store>:
{
    return NRF_802154_SECURITY_ERROR_NONE;
}

nrf_802154_security_error_t nrf_802154_security_pib_key_store(nrf_802154_key_t * p_key)
{
 100c7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert(p_key != NULL);

    if (p_key->type != NRF_802154_KEY_CLEARTEXT)
 100c7f0:	68c6      	ldr	r6, [r0, #12]
{
 100c7f2:	4604      	mov	r4, r0
    if (p_key->type != NRF_802154_KEY_CLEARTEXT)
 100c7f4:	2e00      	cmp	r6, #0
 100c7f6:	d148      	bne.n	100c88a <nrf_802154_security_pib_key_store+0x9e>
    switch (mode)
 100c7f8:	7903      	ldrb	r3, [r0, #4]
 100c7fa:	2b03      	cmp	r3, #3
 100c7fc:	d847      	bhi.n	100c88e <nrf_802154_security_pib_key_store+0xa2>
    if (!mode_is_valid(p_key->id.mode))
    {
        return NRF_802154_SECURITY_ERROR_MODE_NOT_SUPPORTED;
    }

    if (key_is_present(&p_key->id))
 100c7fe:	4d27      	ldr	r5, [pc, #156]	; (100c89c <nrf_802154_security_pib_key_store+0xb0>)
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 100c800:	46b0      	mov	r8, r6
 100c802:	462f      	mov	r7, r5
    if (key_is_present(&p_key->id))
 100c804:	f100 0904 	add.w	r9, r0, #4
        if (key_matches(&m_key_storage[i], p_id))
 100c808:	4649      	mov	r1, r9
 100c80a:	4628      	mov	r0, r5
 100c80c:	f006 ff73 	bl	10136f6 <key_matches>
 100c810:	2800      	cmp	r0, #0
 100c812:	d13e      	bne.n	100c892 <nrf_802154_security_pib_key_store+0xa6>
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 100c814:	f108 0801 	add.w	r8, r8, #1
 100c818:	f1b8 0f03 	cmp.w	r8, #3
 100c81c:	f105 0524 	add.w	r5, r5, #36	; 0x24
 100c820:	d1f2      	bne.n	100c808 <nrf_802154_security_pib_key_store+0x1c>
        return NRF_802154_SECURITY_ERROR_ALREADY_PRESENT;
    }

    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
    {
        if (m_key_storage[i].taken == false)
 100c822:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 100c826:	b133      	cbz	r3, 100c836 <nrf_802154_security_pib_key_store+0x4a>
 100c828:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 100c82c:	b35b      	cbz	r3, 100c886 <nrf_802154_security_pib_key_store+0x9a>
 100c82e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 100c832:	bb83      	cbnz	r3, 100c896 <nrf_802154_security_pib_key_store+0xaa>
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 100c834:	2602      	movs	r6, #2
        {
            memcpy(m_key_storage[i].key,
 100c836:	2524      	movs	r5, #36	; 0x24
 100c838:	4375      	muls	r5, r6
 100c83a:	eb07 0805 	add.w	r8, r7, r5
 100c83e:	6821      	ldr	r1, [r4, #0]
 100c840:	2210      	movs	r2, #16
 100c842:	4640      	mov	r0, r8
 100c844:	f006 f8da 	bl	10129fc <memcpy>
                   p_key->value.p_cleartext_key,
                   sizeof(m_key_storage[i].key));
            m_key_storage[i].mode = p_key->id.mode;
 100c848:	7922      	ldrb	r2, [r4, #4]
            memcpy(m_key_storage[i].id, p_key->id.p_key_id, id_length_get(p_key->id.mode));
 100c84a:	f105 0010 	add.w	r0, r5, #16
 100c84e:	1e53      	subs	r3, r2, #1
 100c850:	2b02      	cmp	r3, #2
            m_key_storage[i].mode = p_key->id.mode;
 100c852:	f888 2019 	strb.w	r2, [r8, #25]
            memcpy(m_key_storage[i].id, p_key->id.p_key_id, id_length_get(p_key->id.mode));
 100c856:	bf96      	itet	ls
 100c858:	0092      	lslls	r2, r2, #2
 100c85a:	2200      	movhi	r2, #0
 100c85c:	3a03      	subls	r2, #3
 100c85e:	68a1      	ldr	r1, [r4, #8]
 100c860:	4438      	add	r0, r7
 100c862:	f006 f8cb 	bl	10129fc <memcpy>
            m_key_storage[i].frame_counter            = p_key->frame_counter;
 100c866:	2324      	movs	r3, #36	; 0x24
 100c868:	fb03 7306 	mla	r3, r3, r6, r7
 100c86c:	6922      	ldr	r2, [r4, #16]
 100c86e:	61da      	str	r2, [r3, #28]
            m_key_storage[i].use_global_frame_counter = p_key->use_global_frame_counter;
 100c870:	7d22      	ldrb	r2, [r4, #20]
 100c872:	f883 2020 	strb.w	r2, [r3, #32]
 100c876:	f3bf 8f5f 	dmb	sy

            __DMB();

            m_key_storage[i].taken = true;
 100c87a:	2201      	movs	r2, #1
            return NRF_802154_SECURITY_ERROR_NONE;
 100c87c:	2000      	movs	r0, #0
            m_key_storage[i].taken = true;
 100c87e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
    }

    return NRF_802154_SECURITY_ERROR_STORAGE_FULL;
}
 100c882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 100c886:	2601      	movs	r6, #1
 100c888:	e7d5      	b.n	100c836 <nrf_802154_security_pib_key_store+0x4a>
        return NRF_802154_SECURITY_ERROR_TYPE_NOT_SUPPORTED;
 100c88a:	2004      	movs	r0, #4
 100c88c:	e7f9      	b.n	100c882 <nrf_802154_security_pib_key_store+0x96>
        return NRF_802154_SECURITY_ERROR_MODE_NOT_SUPPORTED;
 100c88e:	2005      	movs	r0, #5
 100c890:	e7f7      	b.n	100c882 <nrf_802154_security_pib_key_store+0x96>
        return NRF_802154_SECURITY_ERROR_ALREADY_PRESENT;
 100c892:	2003      	movs	r0, #3
 100c894:	e7f5      	b.n	100c882 <nrf_802154_security_pib_key_store+0x96>
    return NRF_802154_SECURITY_ERROR_STORAGE_FULL;
 100c896:	2001      	movs	r0, #1
 100c898:	e7f3      	b.n	100c882 <nrf_802154_security_pib_key_store+0x96>
 100c89a:	bf00      	nop
 100c89c:	21003458 	.word	0x21003458

0100c8a0 <nrf_802154_security_pib_key_remove>:

nrf_802154_security_error_t nrf_802154_security_pib_key_remove(nrf_802154_key_id_t * p_id)
{
 100c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100c8a2:	4d0b      	ldr	r5, [pc, #44]	; (100c8d0 <nrf_802154_security_pib_key_remove+0x30>)
 100c8a4:	4606      	mov	r6, r0
    assert(p_id != NULL);

    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 100c8a6:	2400      	movs	r4, #0
 100c8a8:	462f      	mov	r7, r5
    {
        if (key_matches(&m_key_storage[i], p_id))
 100c8aa:	4631      	mov	r1, r6
 100c8ac:	4628      	mov	r0, r5
 100c8ae:	f006 ff22 	bl	10136f6 <key_matches>
 100c8b2:	b130      	cbz	r0, 100c8c2 <nrf_802154_security_pib_key_remove+0x22>
        {
            m_key_storage[i].taken = false;
 100c8b4:	2324      	movs	r3, #36	; 0x24
 100c8b6:	2000      	movs	r0, #0
 100c8b8:	fb03 7704 	mla	r7, r3, r4, r7
 100c8bc:	f887 0021 	strb.w	r0, [r7, #33]	; 0x21
            return NRF_802154_SECURITY_ERROR_NONE;
        }
    }

    return NRF_802154_SECURITY_ERROR_KEY_NOT_FOUND;
}
 100c8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 100c8c2:	3401      	adds	r4, #1
 100c8c4:	2c03      	cmp	r4, #3
 100c8c6:	f105 0524 	add.w	r5, r5, #36	; 0x24
 100c8ca:	d1ee      	bne.n	100c8aa <nrf_802154_security_pib_key_remove+0xa>
    return NRF_802154_SECURITY_ERROR_KEY_NOT_FOUND;
 100c8cc:	2002      	movs	r0, #2
 100c8ce:	e7f7      	b.n	100c8c0 <nrf_802154_security_pib_key_remove+0x20>
 100c8d0:	21003458 	.word	0x21003458

0100c8d4 <nrf_802154_security_pib_key_use>:

nrf_802154_security_error_t nrf_802154_security_pib_key_use(nrf_802154_key_id_t * p_id,
                                                            void                * destination)
{
 100c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100c8d6:	4606      	mov	r6, r0
 100c8d8:	460f      	mov	r7, r1
    assert(destination != NULL);
    assert(p_id != NULL);

    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 100c8da:	2500      	movs	r5, #0
 100c8dc:	4c09      	ldr	r4, [pc, #36]	; (100c904 <nrf_802154_security_pib_key_use+0x30>)
    {
        if (key_matches(&m_key_storage[i], p_id))
 100c8de:	4631      	mov	r1, r6
 100c8e0:	4620      	mov	r0, r4
 100c8e2:	f006 ff08 	bl	10136f6 <key_matches>
 100c8e6:	b130      	cbz	r0, 100c8f6 <nrf_802154_security_pib_key_use+0x22>
        {
            memcpy((uint8_t *)destination, m_key_storage[i].key, sizeof(m_key_storage[i].key));
 100c8e8:	2210      	movs	r2, #16
 100c8ea:	4621      	mov	r1, r4
 100c8ec:	4638      	mov	r0, r7
 100c8ee:	f006 f885 	bl	10129fc <memcpy>
            return NRF_802154_SECURITY_ERROR_NONE;
 100c8f2:	2000      	movs	r0, #0
        }
    }

    return NRF_802154_SECURITY_ERROR_KEY_NOT_FOUND;
}
 100c8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 100c8f6:	3501      	adds	r5, #1
 100c8f8:	2d03      	cmp	r5, #3
 100c8fa:	f104 0424 	add.w	r4, r4, #36	; 0x24
 100c8fe:	d1ee      	bne.n	100c8de <nrf_802154_security_pib_key_use+0xa>
    return NRF_802154_SECURITY_ERROR_KEY_NOT_FOUND;
 100c900:	2002      	movs	r0, #2
 100c902:	e7f7      	b.n	100c8f4 <nrf_802154_security_pib_key_use+0x20>
 100c904:	21003458 	.word	0x21003458

0100c908 <nrf_802154_security_pib_global_frame_counter_set>:

void nrf_802154_security_pib_global_frame_counter_set(uint32_t frame_counter)
{
    m_global_frame_counter = frame_counter;
 100c908:	4b01      	ldr	r3, [pc, #4]	; (100c910 <nrf_802154_security_pib_global_frame_counter_set+0x8>)
 100c90a:	6018      	str	r0, [r3, #0]
}
 100c90c:	4770      	bx	lr
 100c90e:	bf00      	nop
 100c910:	21003454 	.word	0x21003454

0100c914 <nrf_802154_security_pib_frame_counter_get_next>:

nrf_802154_security_error_t nrf_802154_security_pib_frame_counter_get_next(
    uint32_t            * p_frame_counter,
    nrf_802154_key_id_t * p_id)
{
 100c914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100c918:	4e16      	ldr	r6, [pc, #88]	; (100c974 <nrf_802154_security_pib_frame_counter_get_next+0x60>)
 100c91a:	4607      	mov	r7, r0
 100c91c:	4688      	mov	r8, r1
    assert(p_id != NULL);

    uint32_t * p_frame_counter_to_use = NULL;
    uint32_t   fc;

    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 100c91e:	2400      	movs	r4, #0
 100c920:	4635      	mov	r5, r6
    {
        if (key_matches(&m_key_storage[i], p_id))
 100c922:	4641      	mov	r1, r8
 100c924:	4630      	mov	r0, r6
 100c926:	f006 fee6 	bl	10136f6 <key_matches>
 100c92a:	b178      	cbz	r0, 100c94c <nrf_802154_security_pib_frame_counter_get_next+0x38>
        {
            if (m_key_storage[i].use_global_frame_counter)
 100c92c:	2324      	movs	r3, #36	; 0x24
 100c92e:	435c      	muls	r4, r3
 100c930:	192b      	adds	r3, r5, r4
 100c932:	f893 3020 	ldrb.w	r3, [r3, #32]
 100c936:	b98b      	cbnz	r3, 100c95c <nrf_802154_security_pib_frame_counter_get_next+0x48>
            {
                p_frame_counter_to_use = &m_global_frame_counter;
            }
            else
            {
                p_frame_counter_to_use = &m_key_storage[i].frame_counter;
 100c938:	341c      	adds	r4, #28
 100c93a:	442c      	add	r4, r5
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 100c93c:	e854 2f00 	ldrex	r2, [r4]

    do
    {
        fc = __LDREXW(p_frame_counter_to_use);

        if (fc == UINT32_MAX)
 100c940:	1c53      	adds	r3, r2, #1
 100c942:	d10d      	bne.n	100c960 <nrf_802154_security_pib_frame_counter_get_next+0x4c>
  __ASM volatile ("clrex" ::: "memory");
 100c944:	f3bf 8f2f 	clrex
        {
            __CLREX();
            return NRF_802154_SECURITY_ERROR_FRAME_COUNTER_OVERFLOW;
 100c948:	2006      	movs	r0, #6
 100c94a:	e005      	b.n	100c958 <nrf_802154_security_pib_frame_counter_get_next+0x44>
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
 100c94c:	3401      	adds	r4, #1
 100c94e:	2c03      	cmp	r4, #3
 100c950:	f106 0624 	add.w	r6, r6, #36	; 0x24
 100c954:	d1e5      	bne.n	100c922 <nrf_802154_security_pib_frame_counter_get_next+0xe>
        return NRF_802154_SECURITY_ERROR_KEY_NOT_FOUND;
 100c956:	2002      	movs	r0, #2
    while (__STREXW(fc + 1, p_frame_counter_to_use));

    *p_frame_counter = *p_frame_counter_to_use - 1;

    return NRF_802154_SECURITY_ERROR_NONE;
}
 100c958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                p_frame_counter_to_use = &m_global_frame_counter;
 100c95c:	4c06      	ldr	r4, [pc, #24]	; (100c978 <nrf_802154_security_pib_frame_counter_get_next+0x64>)
 100c95e:	e7ed      	b.n	100c93c <nrf_802154_security_pib_frame_counter_get_next+0x28>
    while (__STREXW(fc + 1, p_frame_counter_to_use));
 100c960:	3201      	adds	r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 100c962:	e844 2000 	strex	r0, r2, [r4]
 100c966:	2800      	cmp	r0, #0
 100c968:	d1e8      	bne.n	100c93c <nrf_802154_security_pib_frame_counter_get_next+0x28>
    *p_frame_counter = *p_frame_counter_to_use - 1;
 100c96a:	6823      	ldr	r3, [r4, #0]
 100c96c:	3b01      	subs	r3, #1
 100c96e:	603b      	str	r3, [r7, #0]
    return NRF_802154_SECURITY_ERROR_NONE;
 100c970:	e7f2      	b.n	100c958 <nrf_802154_security_pib_frame_counter_get_next+0x44>
 100c972:	bf00      	nop
 100c974:	21003458 	.word	0x21003458
 100c978:	21003454 	.word	0x21003454

0100c97c <nrf_802154_security_writer_tx_setup>:
{
    nrf_802154_frame_parser_data_t frame_data;
    nrf_802154_key_id_t            key_id;
    bool                           result = false;

    key_id.p_key_id          = NULL;
 100c97c:	2300      	movs	r3, #0
{
 100c97e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_frame_counter_injected = false;
 100c982:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 100ca58 <nrf_802154_security_writer_tx_setup+0xdc>

    if (p_params->frame_props.dynamic_data_is_set)
 100c986:	784f      	ldrb	r7, [r1, #1]
{
 100c988:	b090      	sub	sp, #64	; 0x40
 100c98a:	4605      	mov	r5, r0
 100c98c:	460e      	mov	r6, r1
 100c98e:	4691      	mov	r9, r2
    key_id.p_key_id          = NULL;
 100c990:	9303      	str	r3, [sp, #12]
    m_frame_counter_injected = false;
 100c992:	f888 3000 	strb.w	r3, [r8]
    if (p_params->frame_props.dynamic_data_is_set)
 100c996:	2f00      	cmp	r7, #0
 100c998:	d145      	bne.n	100ca26 <nrf_802154_security_writer_tx_setup+0xaa>
    {
        // The frame has a frame counter field already set. Pass.
        return true;
    }

    result = nrf_802154_frame_parser_data_init(p_frame,
 100c99a:	7801      	ldrb	r1, [r0, #0]
 100c99c:	ab0a      	add	r3, sp, #40	; 0x28
 100c99e:	3101      	adds	r1, #1
 100c9a0:	2205      	movs	r2, #5
 100c9a2:	b2c9      	uxtb	r1, r1
 100c9a4:	f006 fe62 	bl	101366c <nrf_802154_frame_parser_data_init>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100c9a8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100c9ac:	2bff      	cmp	r3, #255	; 0xff
 100c9ae:	d03a      	beq.n	100ca26 <nrf_802154_security_writer_tx_setup+0xaa>
    return &p_parser_data->p_frame[offset];
 100c9b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return (NULL != nrf_802154_frame_parser_sec_ctrl_get(p_frame_data)) &&
 100c9b2:	42dc      	cmn	r4, r3
 100c9b4:	d037      	beq.n	100ca26 <nrf_802154_security_writer_tx_setup+0xaa>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 100c9b6:	5ce3      	ldrb	r3, [r4, r3]
 100c9b8:	075a      	lsls	r2, r3, #29
 100c9ba:	d034      	beq.n	100ca26 <nrf_802154_security_writer_tx_setup+0xaa>
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 100c9bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    p_key_id->mode = nrf_802154_frame_parser_sec_ctrl_key_id_mode_get(p_frame_data);
 100c9c0:	f88d 3008 	strb.w	r3, [sp, #8]
    switch (p_key_id->mode)
 100c9c4:	3b01      	subs	r3, #1
 100c9c6:	2b02      	cmp	r3, #2
 100c9c8:	d806      	bhi.n	100c9d8 <nrf_802154_security_writer_tx_setup+0x5c>
    return p_parser_data->mhr.aux_sec_hdr.key_id_offset;
 100c9ca:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100c9ce:	2bff      	cmp	r3, #255	; 0xff
        return NULL;
 100c9d0:	bf0c      	ite	eq
 100c9d2:	463b      	moveq	r3, r7
    return &p_parser_data->p_frame[offset];
 100c9d4:	191b      	addne	r3, r3, r4
            p_key_id->p_key_id = (uint8_t *)nrf_802154_frame_parser_key_id_get(p_frame_data);
 100c9d6:	9303      	str	r3, [sp, #12]
    return p_parser_data->mhr.aux_sec_hdr.frame_counter_offset;
 100c9d8:	f89d a033 	ldrb.w	sl, [sp, #51]	; 0x33
    err = nrf_802154_security_pib_frame_counter_get_next(&frame_counter, p_key_id);
 100c9dc:	a902      	add	r1, sp, #8
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100c9de:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 100c9e2:	a801      	add	r0, sp, #4
 100c9e4:	d110      	bne.n	100ca08 <nrf_802154_security_writer_tx_setup+0x8c>
 100c9e6:	f7ff ff95 	bl	100c914 <nrf_802154_security_pib_frame_counter_get_next>
        /* Prepare key ID for key validation. */
        key_id_prepare(&frame_data, &key_id);

        nrf_802154_security_error_t err = frame_counter_inject(&frame_data, &key_id);

        switch (err)
 100c9ea:	2802      	cmp	r0, #2
 100c9ec:	d12c      	bne.n	100ca48 <nrf_802154_security_writer_tx_setup+0xcc>
                m_frame_counter_injected = true;
                break;

            case NRF_802154_SECURITY_ERROR_KEY_NOT_FOUND:
            {
                nrf_802154_transmit_done_metadata_t metadata = {};
 100c9ee:	2218      	movs	r2, #24
 100c9f0:	2100      	movs	r1, #0
 100c9f2:	a804      	add	r0, sp, #16
 100c9f4:	f006 f80d 	bl	1012a12 <memset>

                metadata.frame_props = p_params->frame_props;
                notify_function(p_frame, NRF_802154_TX_ERROR_KEY_ID_INVALID, &metadata);
 100c9f8:	2108      	movs	r1, #8
                metadata.frame_props = p_params->frame_props;
 100c9fa:	8833      	ldrh	r3, [r6, #0]
                notify_function(p_frame, NRF_802154_TX_ERROR_KEY_ID_INVALID, &metadata);
 100c9fc:	aa04      	add	r2, sp, #16
                metadata.frame_props = p_params->frame_props;
 100c9fe:	f8ad 3010 	strh.w	r3, [sp, #16]
            case NRF_802154_SECURITY_ERROR_FRAME_COUNTER_OVERFLOW:
            {
                nrf_802154_transmit_done_metadata_t metadata = {};

                metadata.frame_props = p_params->frame_props;
                notify_function(p_frame, NRF_802154_TX_ERROR_FRAME_COUNTER_ERROR, &metadata);
 100ca02:	4628      	mov	r0, r5
 100ca04:	47c8      	blx	r9
                result = false;
            }
            break;
 100ca06:	e023      	b.n	100ca50 <nrf_802154_security_writer_tx_setup+0xd4>
    err = nrf_802154_security_pib_frame_counter_get_next(&frame_counter, p_key_id);
 100ca08:	f7ff ff84 	bl	100c914 <nrf_802154_security_pib_frame_counter_get_next>
    switch (err)
 100ca0c:	b968      	cbnz	r0, 100ca2a <nrf_802154_security_writer_tx_setup+0xae>
            if (p_frame_counter != NULL)
 100ca0e:	eb14 000a 	adds.w	r0, r4, sl
 100ca12:	d005      	beq.n	100ca20 <nrf_802154_security_writer_tx_setup+0xa4>
                host_32_to_little(frame_counter, p_frame_counter);
 100ca14:	9b01      	ldr	r3, [sp, #4]
    memcpy(p_buffer, &value, sizeof(uint32_t));
 100ca16:	2204      	movs	r2, #4
 100ca18:	a904      	add	r1, sp, #16
 100ca1a:	9304      	str	r3, [sp, #16]
 100ca1c:	f005 ffee 	bl	10129fc <memcpy>
                m_frame_counter_injected = true;
 100ca20:	2301      	movs	r3, #1
 100ca22:	f888 3000 	strb.w	r3, [r8]
        return true;
 100ca26:	2701      	movs	r7, #1
 100ca28:	e012      	b.n	100ca50 <nrf_802154_security_writer_tx_setup+0xd4>
        switch (err)
 100ca2a:	2802      	cmp	r0, #2
 100ca2c:	d0df      	beq.n	100c9ee <nrf_802154_security_writer_tx_setup+0x72>
 100ca2e:	2806      	cmp	r0, #6
 100ca30:	d10e      	bne.n	100ca50 <nrf_802154_security_writer_tx_setup+0xd4>
                nrf_802154_transmit_done_metadata_t metadata = {};
 100ca32:	2218      	movs	r2, #24
 100ca34:	2100      	movs	r1, #0
 100ca36:	a804      	add	r0, sp, #16
 100ca38:	f005 ffeb 	bl	1012a12 <memset>
                metadata.frame_props = p_params->frame_props;
 100ca3c:	8833      	ldrh	r3, [r6, #0]
                notify_function(p_frame, NRF_802154_TX_ERROR_FRAME_COUNTER_ERROR, &metadata);
 100ca3e:	2109      	movs	r1, #9
                metadata.frame_props = p_params->frame_props;
 100ca40:	f8ad 3010 	strh.w	r3, [sp, #16]
                notify_function(p_frame, NRF_802154_TX_ERROR_FRAME_COUNTER_ERROR, &metadata);
 100ca44:	aa04      	add	r2, sp, #16
 100ca46:	e7dc      	b.n	100ca02 <nrf_802154_security_writer_tx_setup+0x86>
        switch (err)
 100ca48:	2806      	cmp	r0, #6
 100ca4a:	d0f2      	beq.n	100ca32 <nrf_802154_security_writer_tx_setup+0xb6>
 100ca4c:	2800      	cmp	r0, #0
 100ca4e:	d0e7      	beq.n	100ca20 <nrf_802154_security_writer_tx_setup+0xa4>
        }
    }
    while (0);

    return result;
}
 100ca50:	4638      	mov	r0, r7
 100ca52:	b010      	add	sp, #64	; 0x40
 100ca54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100ca58:	2100449b 	.word	0x2100449b

0100ca5c <nrf_802154_security_writer_tx_started_hook>:

bool nrf_802154_security_writer_tx_started_hook(uint8_t * p_frame)
{
 100ca5c:	b508      	push	{r3, lr}
    if (m_frame_counter_injected)
 100ca5e:	4b03      	ldr	r3, [pc, #12]	; (100ca6c <nrf_802154_security_writer_tx_started_hook+0x10>)
 100ca60:	781b      	ldrb	r3, [r3, #0]
 100ca62:	b10b      	cbz	r3, 100ca68 <nrf_802154_security_writer_tx_started_hook+0xc>
    {
        /* Mark dynamic data updated in the work buffer. */
        nrf_802154_tx_work_buffer_is_dynamic_data_updated_set();
 100ca64:	f7fe fe08 	bl	100b678 <nrf_802154_tx_work_buffer_is_dynamic_data_updated_set>
    }

    return true;
}
 100ca68:	2001      	movs	r0, #1
 100ca6a:	bd08      	pop	{r3, pc}
 100ca6c:	2100449b 	.word	0x2100449b

0100ca70 <timeout_timer_stop>:
    (void)ret;
}

static void timeout_timer_stop(void)
{
    m_procedure_is_active = false;
 100ca70:	2200      	movs	r2, #0
 100ca72:	4b03      	ldr	r3, [pc, #12]	; (100ca80 <timeout_timer_stop+0x10>)
 100ca74:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 100ca76:	f3bf 8f5f 	dmb	sy

    // To make sure `timeout_timer_fired()` detects that procedure is being stopped if it preempts
    // this function.
    __DMB();

    (void)nrf_802154_sl_timer_remove(&m_timer);
 100ca7a:	4802      	ldr	r0, [pc, #8]	; (100ca84 <timeout_timer_stop+0x14>)
 100ca7c:	f004 bf52 	b.w	1011924 <nrf_802154_sl_timer_remove>
 100ca80:	2100449c 	.word	0x2100449c
 100ca84:	210012e0 	.word	0x210012e0

0100ca88 <timeout_timer_fired>:
{
 100ca88:	b513      	push	{r0, r1, r4, lr}
    if (m_procedure_is_active)
 100ca8a:	4c12      	ldr	r4, [pc, #72]	; (100cad4 <timeout_timer_fired+0x4c>)
 100ca8c:	7823      	ldrb	r3, [r4, #0]
 100ca8e:	b15b      	cbz	r3, 100caa8 <timeout_timer_fired+0x20>
        if (nrf_802154_request_receive(NRF_802154_TERM_802154,
 100ca90:	f06f 0301 	mvn.w	r3, #1
 100ca94:	2104      	movs	r1, #4
 100ca96:	9300      	str	r3, [sp, #0]
 100ca98:	2001      	movs	r0, #1
 100ca9a:	2300      	movs	r3, #0
 100ca9c:	4a0e      	ldr	r2, [pc, #56]	; (100cad8 <timeout_timer_fired+0x50>)
 100ca9e:	f006 fecc 	bl	101383a <nrf_802154_request_receive>
 100caa2:	b118      	cbz	r0, 100caac <timeout_timer_fired+0x24>
            m_procedure_is_active = false;
 100caa4:	2300      	movs	r3, #0
 100caa6:	7023      	strb	r3, [r4, #0]
}
 100caa8:	b002      	add	sp, #8
 100caaa:	bd10      	pop	{r4, pc}
    m_dt += RETRY_DELAY;
 100caac:	4a0b      	ldr	r2, [pc, #44]	; (100cadc <timeout_timer_fired+0x54>)
    m_timer.trigger_time += RETRY_DELAY;
 100caae:	480c      	ldr	r0, [pc, #48]	; (100cae0 <timeout_timer_fired+0x58>)
    m_dt += RETRY_DELAY;
 100cab0:	6813      	ldr	r3, [r2, #0]
 100cab2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 100cab6:	6013      	str	r3, [r2, #0]
    m_timer.trigger_time += RETRY_DELAY;
 100cab8:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 100cabc:	f513 73fa 	adds.w	r3, r3, #500	; 0x1f4
 100cac0:	f142 0200 	adc.w	r2, r2, #0
 100cac4:	e9c0 3204 	strd	r3, r2, [r0, #16]
}
 100cac8:	b002      	add	sp, #8
 100caca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ret = nrf_802154_sl_timer_add(&m_timer);
 100cace:	f004 bf09 	b.w	10118e4 <nrf_802154_sl_timer_add>
 100cad2:	bf00      	nop
 100cad4:	2100449c 	.word	0x2100449c
 100cad8:	0100cae5 	.word	0x0100cae5
 100cadc:	210034c8 	.word	0x210034c8
 100cae0:	210012e0 	.word	0x210012e0

0100cae4 <notify_tx_error>:
{
 100cae4:	b510      	push	{r4, lr}
 100cae6:	b086      	sub	sp, #24
    if (result)
 100cae8:	b170      	cbz	r0, 100cb08 <notify_tx_error+0x24>
        nrf_802154_tx_work_buffer_original_frame_update(mp_frame, &metadata.frame_props);
 100caea:	4c08      	ldr	r4, [pc, #32]	; (100cb0c <notify_tx_error+0x28>)
        nrf_802154_transmit_done_metadata_t metadata = {0};
 100caec:	2218      	movs	r2, #24
 100caee:	2100      	movs	r1, #0
 100caf0:	4668      	mov	r0, sp
 100caf2:	f005 ff8e 	bl	1012a12 <memset>
        nrf_802154_tx_work_buffer_original_frame_update(mp_frame, &metadata.frame_props);
 100caf6:	4669      	mov	r1, sp
 100caf8:	6820      	ldr	r0, [r4, #0]
 100cafa:	f7fe fd8f 	bl	100b61c <nrf_802154_tx_work_buffer_original_frame_update>
        nrf_802154_notify_transmit_failed(mp_frame, NRF_802154_TX_ERROR_NO_ACK, &metadata);
 100cafe:	466a      	mov	r2, sp
 100cb00:	2105      	movs	r1, #5
 100cb02:	6820      	ldr	r0, [r4, #0]
 100cb04:	f006 fe67 	bl	10137d6 <nrf_802154_notify_transmit_failed>
}
 100cb08:	b006      	add	sp, #24
 100cb0a:	bd10      	pop	{r4, pc}
 100cb0c:	210034c4 	.word	0x210034c4

0100cb10 <nrf_802154_ack_timeout_init>:
}

void nrf_802154_ack_timeout_init(void)
{
    m_timeout             = NRF_802154_PRECISE_ACK_TIMEOUT_DEFAULT_TIMEOUT;
 100cb10:	22d2      	movs	r2, #210	; 0xd2
 100cb12:	4b06      	ldr	r3, [pc, #24]	; (100cb2c <nrf_802154_ack_timeout_init+0x1c>)
    m_dt                  = 0;
    m_procedure_is_active = false;
    mp_frame              = NULL;

    nrf_802154_sl_timer_init(&m_timer);
 100cb14:	4806      	ldr	r0, [pc, #24]	; (100cb30 <nrf_802154_ack_timeout_init+0x20>)
    m_timeout             = NRF_802154_PRECISE_ACK_TIMEOUT_DEFAULT_TIMEOUT;
 100cb16:	601a      	str	r2, [r3, #0]
    m_dt                  = 0;
 100cb18:	2300      	movs	r3, #0
 100cb1a:	4a06      	ldr	r2, [pc, #24]	; (100cb34 <nrf_802154_ack_timeout_init+0x24>)
 100cb1c:	6013      	str	r3, [r2, #0]
    m_procedure_is_active = false;
 100cb1e:	4a06      	ldr	r2, [pc, #24]	; (100cb38 <nrf_802154_ack_timeout_init+0x28>)
 100cb20:	7013      	strb	r3, [r2, #0]
    mp_frame              = NULL;
 100cb22:	4a06      	ldr	r2, [pc, #24]	; (100cb3c <nrf_802154_ack_timeout_init+0x2c>)
 100cb24:	6013      	str	r3, [r2, #0]
    nrf_802154_sl_timer_init(&m_timer);
 100cb26:	f008 bbee 	b.w	1015306 <nrf_802154_sl_timer_init>
 100cb2a:	bf00      	nop
 100cb2c:	2100005c 	.word	0x2100005c
 100cb30:	210012e0 	.word	0x210012e0
 100cb34:	210034c8 	.word	0x210034c8
 100cb38:	2100449c 	.word	0x2100449c
 100cb3c:	210034c4 	.word	0x210034c4

0100cb40 <nrf_802154_ack_timeout_tx_started_hook>:
{
    m_timeout = time;
}

bool nrf_802154_ack_timeout_tx_started_hook(uint8_t * p_frame)
{
 100cb40:	b538      	push	{r3, r4, r5, lr}
    mp_frame = p_frame;
 100cb42:	4c0f      	ldr	r4, [pc, #60]	; (100cb80 <nrf_802154_ack_timeout_tx_started_hook+0x40>)
    m_timer.action.callback.callback = timeout_timer_fired;
 100cb44:	4d0f      	ldr	r5, [pc, #60]	; (100cb84 <nrf_802154_ack_timeout_tx_started_hook+0x44>)
    mp_frame = p_frame;
 100cb46:	6020      	str	r0, [r4, #0]
    uint64_t                  now = nrf_802154_sl_timer_current_time_get();
 100cb48:	f008 fbd6 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
           nrf_802154_frame_duration_get(mp_frame[0], false, true);
 100cb4c:	6823      	ldr	r3, [r4, #0]
    m_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
 100cb4e:	2401      	movs	r4, #1
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));
 100cb50:	781a      	ldrb	r2, [r3, #0]
           IMM_ACK_DURATION +
 100cb52:	4b0d      	ldr	r3, [pc, #52]	; (100cb88 <nrf_802154_ack_timeout_tx_started_hook+0x48>)
 100cb54:	681b      	ldr	r3, [r3, #0]
 100cb56:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    m_dt = m_timeout +
 100cb5a:	4a0c      	ldr	r2, [pc, #48]	; (100cb8c <nrf_802154_ack_timeout_tx_started_hook+0x4c>)
           IMM_ACK_DURATION +
 100cb5c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    m_dt = m_timeout +
 100cb60:	6013      	str	r3, [r2, #0]
    m_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
 100cb62:	4a0b      	ldr	r2, [pc, #44]	; (100cb90 <nrf_802154_ack_timeout_tx_started_hook+0x50>)
    m_timer.trigger_time             = now + m_dt;
 100cb64:	181b      	adds	r3, r3, r0
 100cb66:	f141 0100 	adc.w	r1, r1, #0
 100cb6a:	e9c2 3104 	strd	r3, r1, [r2, #16]
    m_procedure_is_active = true;
 100cb6e:	4b09      	ldr	r3, [pc, #36]	; (100cb94 <nrf_802154_ack_timeout_tx_started_hook+0x54>)
    ret = nrf_802154_sl_timer_add(&m_timer);
 100cb70:	4610      	mov	r0, r2
    m_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
 100cb72:	7714      	strb	r4, [r2, #28]
    m_timer.action.callback.callback = timeout_timer_fired;
 100cb74:	6215      	str	r5, [r2, #32]
    m_procedure_is_active = true;
 100cb76:	701c      	strb	r4, [r3, #0]
    ret = nrf_802154_sl_timer_add(&m_timer);
 100cb78:	f004 feb4 	bl	10118e4 <nrf_802154_sl_timer_add>
    timeout_timer_start();

    return true;
}
 100cb7c:	4620      	mov	r0, r4
 100cb7e:	bd38      	pop	{r3, r4, r5, pc}
 100cb80:	210034c4 	.word	0x210034c4
 100cb84:	0100ca89 	.word	0x0100ca89
 100cb88:	2100005c 	.word	0x2100005c
 100cb8c:	210034c8 	.word	0x210034c8
 100cb90:	210012e0 	.word	0x210012e0
 100cb94:	2100449c 	.word	0x2100449c

0100cb98 <nrf_802154_ack_timeout_abort>:

bool nrf_802154_ack_timeout_abort(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
 100cb98:	b508      	push	{r3, lr}
    bool result;

    if (!m_procedure_is_active || req_orig == REQ_ORIG_ACK_TIMEOUT)
 100cb9a:	4b05      	ldr	r3, [pc, #20]	; (100cbb0 <nrf_802154_ack_timeout_abort+0x18>)
 100cb9c:	781b      	ldrb	r3, [r3, #0]
 100cb9e:	b123      	cbz	r3, 100cbaa <nrf_802154_ack_timeout_abort+0x12>
 100cba0:	2904      	cmp	r1, #4
 100cba2:	d002      	beq.n	100cbaa <nrf_802154_ack_timeout_abort+0x12>
    {
        // Ignore if procedure is not running or self-request.
        result = true;
    }
    else if (term_lvl >= NRF_802154_TERM_802154)
 100cba4:	b110      	cbz	r0, 100cbac <nrf_802154_ack_timeout_abort+0x14>
    {
        // Stop procedure only if termination level is high enough.
        timeout_timer_stop();
 100cba6:	f7ff ff63 	bl	100ca70 <timeout_timer_stop>
        result = true;
 100cbaa:	2001      	movs	r0, #1
    {
        result = false;
    }

    return result;
}
 100cbac:	bd08      	pop	{r3, pc}
 100cbae:	bf00      	nop
 100cbb0:	2100449c 	.word	0x2100449c

0100cbb4 <addr_index_find>:
 */
static bool addr_index_find(const uint8_t       * p_addr,
                            uint32_t            * p_location,
                            nrf_802154_ack_data_t data_type,
                            bool                  extended)
{
 100cbb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint8_t * p_addr_array;
    bool      valid_data_type = true;

    switch (data_type)
 100cbb8:	b122      	cbz	r2, 100cbc4 <addr_index_find+0x10>
 100cbba:	2a01      	cmp	r2, #1
 100cbbc:	d013      	beq.n	100cbe6 <addr_index_find+0x32>
            break;
    }

    if (!valid_data_type)
    {
        return false;
 100cbbe:	2000      	movs	r0, #0
    }

    return addr_binary_search(p_addr, p_addr_array, p_location, data_type, extended);
}
 100cbc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            p_addr_array = extended ? (uint8_t *)m_pending_bit.extended_addr :
 100cbc4:	4a23      	ldr	r2, [pc, #140]	; (100cc54 <addr_index_find+0xa0>)
 100cbc6:	b9a3      	cbnz	r3, 100cbf2 <addr_index_find+0x3e>
            entry_size     = extended ? EXTENDED_ADDRESS_SIZE : SHORT_ADDRESS_SIZE;
 100cbc8:	2402      	movs	r4, #2
                             m_pending_bit.num_of_ext_addr : m_pending_bit.num_of_short_addr;
 100cbca:	f8d2 70a4 	ldr.w	r7, [r2, #164]	; 0xa4
            p_addr_array = extended ? (uint8_t *)m_pending_bit.extended_addr :
 100cbce:	3201      	adds	r2, #1
    uint32_t midpoint = 0;
 100cbd0:	2500      	movs	r5, #0
    int32_t  high     = addr_array_len;
 100cbd2:	46bc      	mov	ip, r7
    int32_t  low      = 0;
 100cbd4:	462e      	mov	r6, r5
    while (high >= low)
 100cbd6:	45b4      	cmp	ip, r6
 100cbd8:	da15      	bge.n	100cc06 <addr_index_find+0x52>
    if ((uint32_t)low == midpoint + 1)
 100cbda:	1c6b      	adds	r3, r5, #1
 100cbdc:	42b3      	cmp	r3, r6
 100cbde:	bf08      	it	eq
 100cbe0:	4635      	moveq	r5, r6
    *p_location = midpoint;
 100cbe2:	600d      	str	r5, [r1, #0]
    return false;
 100cbe4:	e7eb      	b.n	100cbbe <addr_index_find+0xa>
            p_addr_array = extended ? (uint8_t *)m_ie.ext_data : (uint8_t *)m_ie.short_data;
 100cbe6:	4a1c      	ldr	r2, [pc, #112]	; (100cc58 <addr_index_find+0xa4>)
 100cbe8:	b943      	cbnz	r3, 100cbfc <addr_index_find+0x48>
            entry_size     = extended ? sizeof(ack_ext_ie_data_t) : sizeof(ack_short_ie_data_t);
 100cbea:	240b      	movs	r4, #11
            addr_array_len = extended ? m_ie.num_of_ext_data : m_ie.num_of_short_data;
 100cbec:	f8d2 71c0 	ldr.w	r7, [r2, #448]	; 0x1c0
 100cbf0:	e7ee      	b.n	100cbd0 <addr_index_find+0x1c>
                             m_pending_bit.num_of_ext_addr : m_pending_bit.num_of_short_addr;
 100cbf2:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
            entry_size     = extended ? EXTENDED_ADDRESS_SIZE : SHORT_ADDRESS_SIZE;
 100cbf6:	2408      	movs	r4, #8
            p_addr_array = extended ? (uint8_t *)m_pending_bit.extended_addr :
 100cbf8:	3221      	adds	r2, #33	; 0x21
 100cbfa:	e7e9      	b.n	100cbd0 <addr_index_find+0x1c>
            addr_array_len = extended ? m_ie.num_of_ext_data : m_ie.num_of_short_data;
 100cbfc:	f8d2 71c4 	ldr.w	r7, [r2, #452]	; 0x1c4
            entry_size     = extended ? sizeof(ack_ext_ie_data_t) : sizeof(ack_short_ie_data_t);
 100cc00:	2411      	movs	r4, #17
            p_addr_array = extended ? (uint8_t *)m_ie.ext_data : (uint8_t *)m_ie.short_data;
 100cc02:	32b0      	adds	r2, #176	; 0xb0
 100cc04:	e7e4      	b.n	100cbd0 <addr_index_find+0x1c>
        midpoint = (uint32_t)(low + (high - low) / 2);
 100cc06:	ebac 0506 	sub.w	r5, ip, r6
 100cc0a:	eb06 0565 	add.w	r5, r6, r5, asr #1
        if (midpoint >= addr_array_len)
 100cc0e:	42af      	cmp	r7, r5
 100cc10:	d9e3      	bls.n	100cbda <addr_index_find+0x26>
        switch (addr_compare(p_addr, p_addr_array + entry_size * midpoint, extended))
 100cc12:	fb05 fe04 	mul.w	lr, r5, r4
 100cc16:	eb02 080e 	add.w	r8, r2, lr
    if (extended)
 100cc1a:	b183      	cbz	r3, 100cc3e <addr_index_find+0x8a>
        second_addr = *(uint32_t *)(p_second_addr + (i * sizeof(uint32_t)));
 100cc1c:	f852 e00e 	ldr.w	lr, [r2, lr]
        if (first_addr < second_addr)
 100cc20:	f8d0 9000 	ldr.w	r9, [r0]
 100cc24:	45ce      	cmp	lr, r9
 100cc26:	d80f      	bhi.n	100cc48 <addr_index_find+0x94>
        else if (first_addr > second_addr)
 100cc28:	d311      	bcc.n	100cc4e <addr_index_find+0x9a>
        second_addr = *(uint32_t *)(p_second_addr + (i * sizeof(uint32_t)));
 100cc2a:	f8d8 e004 	ldr.w	lr, [r8, #4]
        if (first_addr < second_addr)
 100cc2e:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if (first_addr < second_addr)
 100cc32:	45f0      	cmp	r8, lr
 100cc34:	d308      	bcc.n	100cc48 <addr_index_find+0x94>
    else if (first_addr > second_addr)
 100cc36:	d80a      	bhi.n	100cc4e <addr_index_find+0x9a>
                return true;
 100cc38:	2001      	movs	r0, #1
                *p_location = midpoint;
 100cc3a:	600d      	str	r5, [r1, #0]
                return true;
 100cc3c:	e7c0      	b.n	100cbc0 <addr_index_find+0xc>
    uint16_t first_addr  = *(uint16_t *)(p_first_addr);
 100cc3e:	f8b0 8000 	ldrh.w	r8, [r0]
    uint16_t second_addr = *(uint16_t *)(p_second_addr);
 100cc42:	f832 e00e 	ldrh.w	lr, [r2, lr]
 100cc46:	e7f4      	b.n	100cc32 <addr_index_find+0x7e>
                high = (int32_t)(midpoint - 1);
 100cc48:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
                break;
 100cc4c:	e7c3      	b.n	100cbd6 <addr_index_find+0x22>
                low = (int32_t)(midpoint + 1);
 100cc4e:	1c6e      	adds	r6, r5, #1
                break;
 100cc50:	e7c1      	b.n	100cbd6 <addr_index_find+0x22>
 100cc52:	bf00      	nop
 100cc54:	21003694 	.word	0x21003694
 100cc58:	210034cc 	.word	0x210034cc

0100cc5c <nrf_802154_ack_data_init>:
/***************************************************************************************************
 * @section Public API
 **************************************************************************************************/

void nrf_802154_ack_data_init(void)
{
 100cc5c:	b510      	push	{r4, lr}
    memset(&m_pending_bit, 0, sizeof(m_pending_bit));
 100cc5e:	4c09      	ldr	r4, [pc, #36]	; (100cc84 <nrf_802154_ack_data_init+0x28>)
 100cc60:	22ac      	movs	r2, #172	; 0xac
 100cc62:	2100      	movs	r1, #0
 100cc64:	4620      	mov	r0, r4
 100cc66:	f005 fed4 	bl	1012a12 <memset>
    memset(&m_ie, 0, sizeof(m_ie));
 100cc6a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 100cc6e:	2100      	movs	r1, #0
 100cc70:	4805      	ldr	r0, [pc, #20]	; (100cc88 <nrf_802154_ack_data_init+0x2c>)
 100cc72:	f005 fece 	bl	1012a12 <memset>

    m_pending_bit.enabled = true;
 100cc76:	2301      	movs	r3, #1
    m_src_matching_method = NRF_802154_SRC_ADDR_MATCH_THREAD;
 100cc78:	2200      	movs	r2, #0
    m_pending_bit.enabled = true;
 100cc7a:	7023      	strb	r3, [r4, #0]
    m_src_matching_method = NRF_802154_SRC_ADDR_MATCH_THREAD;
 100cc7c:	4b03      	ldr	r3, [pc, #12]	; (100cc8c <nrf_802154_ack_data_init+0x30>)
 100cc7e:	701a      	strb	r2, [r3, #0]
}
 100cc80:	bd10      	pop	{r4, pc}
 100cc82:	bf00      	nop
 100cc84:	21003694 	.word	0x21003694
 100cc88:	210034cc 	.word	0x210034cc
 100cc8c:	2100449d 	.word	0x2100449d

0100cc90 <nrf_802154_ack_data_enable>:

void nrf_802154_ack_data_enable(bool enabled)
{
    m_pending_bit.enabled = enabled;
 100cc90:	4b01      	ldr	r3, [pc, #4]	; (100cc98 <nrf_802154_ack_data_enable+0x8>)
 100cc92:	7018      	strb	r0, [r3, #0]
}
 100cc94:	4770      	bx	lr
 100cc96:	bf00      	nop
 100cc98:	21003694 	.word	0x21003694

0100cc9c <nrf_802154_ack_data_for_addr_set>:
bool nrf_802154_ack_data_for_addr_set(const uint8_t       * p_addr,
                                      bool                  extended,
                                      nrf_802154_ack_data_t data_type,
                                      const void          * p_data,
                                      uint8_t               data_len)
{
 100cc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100cca0:	4698      	mov	r8, r3
    uint32_t location = 0;
 100cca2:	2300      	movs	r3, #0
{
 100cca4:	b085      	sub	sp, #20
 100cca6:	460d      	mov	r5, r1
    uint32_t location = 0;
 100cca8:	9303      	str	r3, [sp, #12]

    if (addr_index_find(p_addr, &location, data_type, extended) ||
 100ccaa:	460b      	mov	r3, r1
 100ccac:	a903      	add	r1, sp, #12
{
 100ccae:	4692      	mov	sl, r2
 100ccb0:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 100ccb4:	9001      	str	r0, [sp, #4]
    if (addr_index_find(p_addr, &location, data_type, extended) ||
 100ccb6:	f7ff ff7d 	bl	100cbb4 <addr_index_find>
 100ccba:	bb58      	cbnz	r0, 100cd14 <nrf_802154_ack_data_for_addr_set+0x78>
    switch (data_type)
 100ccbc:	f1ba 0f00 	cmp.w	sl, #0
 100ccc0:	d005      	beq.n	100ccce <nrf_802154_ack_data_for_addr_set+0x32>
 100ccc2:	f1ba 0f01 	cmp.w	sl, #1
 100ccc6:	d039      	beq.n	100cd3c <nrf_802154_ack_data_for_addr_set+0xa0>
    }
    else
    {
        return false;
    }
}
 100ccc8:	b005      	add	sp, #20
 100ccca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (extended)
 100ccce:	2d00      	cmp	r5, #0
 100ccd0:	d03a      	beq.n	100cd48 <nrf_802154_ack_data_for_addr_set+0xac>
                entry_size         = EXTENDED_ADDRESS_SIZE;
 100ccd2:	2608      	movs	r6, #8
                p_addr_array       = (uint8_t *)m_pending_bit.extended_addr;
 100ccd4:	4c27      	ldr	r4, [pc, #156]	; (100cd74 <nrf_802154_ack_data_for_addr_set+0xd8>)
                p_addr_array_len   = &m_pending_bit.num_of_ext_addr;
 100ccd6:	f104 0987 	add.w	r9, r4, #135	; 0x87
    if (!valid_data_type || (*p_addr_array_len == max_addr_array_len))
 100ccda:	f8d9 2000 	ldr.w	r2, [r9]
 100ccde:	2a10      	cmp	r2, #16
 100cce0:	d0f2      	beq.n	100ccc8 <nrf_802154_ack_data_for_addr_set+0x2c>
        addr_add(p_addr, location, data_type, extended))
 100cce2:	9903      	ldr	r1, [sp, #12]
    memmove(p_addr_array + entry_size * (location + 1),
 100cce4:	fb01 6006 	mla	r0, r1, r6, r6
            p_addr_array + entry_size * (location),
 100cce8:	1b83      	subs	r3, r0, r6
 100ccea:	eb04 0b03 	add.w	fp, r4, r3
            (*p_addr_array_len - location) * entry_size);
 100ccee:	1a52      	subs	r2, r2, r1
    memmove(p_addr_array + entry_size * (location + 1),
 100ccf0:	4372      	muls	r2, r6
 100ccf2:	4659      	mov	r1, fp
 100ccf4:	4420      	add	r0, r4
 100ccf6:	f005 fe6a 	bl	10129ce <memmove>
    memcpy(p_addr_array + entry_size * location,
 100ccfa:	2d00      	cmp	r5, #0
 100ccfc:	bf14      	ite	ne
 100ccfe:	2208      	movne	r2, #8
 100cd00:	2202      	moveq	r2, #2
 100cd02:	4658      	mov	r0, fp
 100cd04:	9901      	ldr	r1, [sp, #4]
 100cd06:	f005 fe79 	bl	10129fc <memcpy>
    (*p_addr_array_len)++;
 100cd0a:	f8d9 3000 	ldr.w	r3, [r9]
 100cd0e:	3301      	adds	r3, #1
 100cd10:	f8c9 3000 	str.w	r3, [r9]
        if (data_type == NRF_802154_ACK_DATA_IE)
 100cd14:	f1ba 0f01 	cmp.w	sl, #1
 100cd18:	d10e      	bne.n	100cd38 <nrf_802154_ack_data_for_addr_set+0x9c>
            ie_data_add(location, extended, p_data, data_len);
 100cd1a:	9c03      	ldr	r4, [sp, #12]
    if (extended)
 100cd1c:	4e16      	ldr	r6, [pc, #88]	; (100cd78 <nrf_802154_ack_data_for_addr_set+0xdc>)
 100cd1e:	b1ed      	cbz	r5, 100cd5c <nrf_802154_ack_data_for_addr_set+0xc0>
        memcpy(m_ie.ext_data[location].ie_data.p_data, p_data, data_len);
 100cd20:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 100cd24:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 100cd28:	463a      	mov	r2, r7
 100cd2a:	4641      	mov	r1, r8
 100cd2c:	4430      	add	r0, r6
 100cd2e:	f005 fe65 	bl	10129fc <memcpy>
        m_ie.ext_data[location].ie_data.len = data_len;
 100cd32:	1932      	adds	r2, r6, r4
 100cd34:	f882 70c0 	strb.w	r7, [r2, #192]	; 0xc0
        return true;
 100cd38:	2001      	movs	r0, #1
 100cd3a:	e7c5      	b.n	100ccc8 <nrf_802154_ack_data_for_addr_set+0x2c>
            if (extended)
 100cd3c:	b14d      	cbz	r5, 100cd52 <nrf_802154_ack_data_for_addr_set+0xb6>
                p_addr_array       = (uint8_t *)m_ie.ext_data;
 100cd3e:	4c0f      	ldr	r4, [pc, #60]	; (100cd7c <nrf_802154_ack_data_for_addr_set+0xe0>)
                entry_size         = sizeof(ack_ext_ie_data_t);
 100cd40:	2611      	movs	r6, #17
                p_addr_array_len   = &m_ie.num_of_ext_data;
 100cd42:	f504 798a 	add.w	r9, r4, #276	; 0x114
 100cd46:	e7c8      	b.n	100ccda <nrf_802154_ack_data_for_addr_set+0x3e>
                p_addr_array       = (uint8_t *)m_pending_bit.short_addr;
 100cd48:	4c0d      	ldr	r4, [pc, #52]	; (100cd80 <nrf_802154_ack_data_for_addr_set+0xe4>)
                entry_size         = SHORT_ADDRESS_SIZE;
 100cd4a:	2602      	movs	r6, #2
                p_addr_array_len   = &m_pending_bit.num_of_short_addr;
 100cd4c:	f104 09a3 	add.w	r9, r4, #163	; 0xa3
 100cd50:	e7c3      	b.n	100ccda <nrf_802154_ack_data_for_addr_set+0x3e>
                p_addr_array       = (uint8_t *)m_ie.short_data;
 100cd52:	4c09      	ldr	r4, [pc, #36]	; (100cd78 <nrf_802154_ack_data_for_addr_set+0xdc>)
                entry_size         = sizeof(ack_short_ie_data_t);
 100cd54:	260b      	movs	r6, #11
                p_addr_array_len   = &m_ie.num_of_short_data;
 100cd56:	f504 79e0 	add.w	r9, r4, #448	; 0x1c0
 100cd5a:	e7be      	b.n	100ccda <nrf_802154_ack_data_for_addr_set+0x3e>
        memcpy(m_ie.short_data[location].ie_data.p_data, p_data, data_len);
 100cd5c:	230b      	movs	r3, #11
 100cd5e:	435c      	muls	r4, r3
 100cd60:	1ca0      	adds	r0, r4, #2
 100cd62:	4430      	add	r0, r6
 100cd64:	463a      	mov	r2, r7
 100cd66:	4641      	mov	r1, r8
        m_ie.short_data[location].ie_data.len = data_len;
 100cd68:	4426      	add	r6, r4
        memcpy(m_ie.short_data[location].ie_data.p_data, p_data, data_len);
 100cd6a:	f005 fe47 	bl	10129fc <memcpy>
        m_ie.short_data[location].ie_data.len = data_len;
 100cd6e:	72b7      	strb	r7, [r6, #10]
 100cd70:	e7e2      	b.n	100cd38 <nrf_802154_ack_data_for_addr_set+0x9c>
 100cd72:	bf00      	nop
 100cd74:	210036b5 	.word	0x210036b5
 100cd78:	210034cc 	.word	0x210034cc
 100cd7c:	2100357c 	.word	0x2100357c
 100cd80:	21003695 	.word	0x21003695

0100cd84 <nrf_802154_ack_data_for_addr_clear>:

bool nrf_802154_ack_data_for_addr_clear(const uint8_t       * p_addr,
                                        bool                  extended,
                                        nrf_802154_ack_data_t data_type)
{
 100cd84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t location = 0;
 100cd86:	2700      	movs	r7, #0

    if (addr_index_find(p_addr, &location, data_type, extended))
 100cd88:	460b      	mov	r3, r1
{
 100cd8a:	460d      	mov	r5, r1
    if (addr_index_find(p_addr, &location, data_type, extended))
 100cd8c:	a901      	add	r1, sp, #4
{
 100cd8e:	4616      	mov	r6, r2
    uint32_t location = 0;
 100cd90:	9701      	str	r7, [sp, #4]
    if (addr_index_find(p_addr, &location, data_type, extended))
 100cd92:	f7ff ff0f 	bl	100cbb4 <addr_index_find>
 100cd96:	4604      	mov	r4, r0
 100cd98:	b118      	cbz	r0, 100cda2 <nrf_802154_ack_data_for_addr_clear+0x1e>
    switch (data_type)
 100cd9a:	b12e      	cbz	r6, 100cda8 <nrf_802154_ack_data_for_addr_clear+0x24>
 100cd9c:	2e01      	cmp	r6, #1
 100cd9e:	d019      	beq.n	100cdd4 <nrf_802154_ack_data_for_addr_clear+0x50>
    {
        return addr_remove(location, data_type, extended);
    }
    else
    {
        return false;
 100cda0:	463c      	mov	r4, r7
    }
}
 100cda2:	4620      	mov	r0, r4
 100cda4:	b003      	add	sp, #12
 100cda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (extended)
 100cda8:	b9d5      	cbnz	r5, 100cde0 <nrf_802154_ack_data_for_addr_clear+0x5c>
                entry_size       = SHORT_ADDRESS_SIZE;
 100cdaa:	2602      	movs	r6, #2
                p_addr_array     = (uint8_t *)m_pending_bit.short_addr;
 100cdac:	4b12      	ldr	r3, [pc, #72]	; (100cdf8 <nrf_802154_ack_data_for_addr_clear+0x74>)
                p_addr_array_len = &m_pending_bit.num_of_short_addr;
 100cdae:	f103 05a3 	add.w	r5, r3, #163	; 0xa3
    if (!valid_data_type || (*p_addr_array_len == 0))
 100cdb2:	6829      	ldr	r1, [r5, #0]
 100cdb4:	b1f1      	cbz	r1, 100cdf4 <nrf_802154_ack_data_for_addr_clear+0x70>
        return addr_remove(location, data_type, extended);
 100cdb6:	9a01      	ldr	r2, [sp, #4]
    memmove(p_addr_array + entry_size * location,
 100cdb8:	fb06 f002 	mul.w	r0, r6, r2
            (*p_addr_array_len - location - 1) * entry_size);
 100cdbc:	1a89      	subs	r1, r1, r2
 100cdbe:	1e4a      	subs	r2, r1, #1
            p_addr_array + entry_size * (location + 1),
 100cdc0:	1831      	adds	r1, r6, r0
    memmove(p_addr_array + entry_size * location,
 100cdc2:	4419      	add	r1, r3
 100cdc4:	4418      	add	r0, r3
 100cdc6:	4372      	muls	r2, r6
 100cdc8:	f005 fe01 	bl	10129ce <memmove>
    (*p_addr_array_len)--;
 100cdcc:	682b      	ldr	r3, [r5, #0]
 100cdce:	3b01      	subs	r3, #1
 100cdd0:	602b      	str	r3, [r5, #0]
    return true;
 100cdd2:	e7e6      	b.n	100cda2 <nrf_802154_ack_data_for_addr_clear+0x1e>
            if (extended)
 100cdd4:	b94d      	cbnz	r5, 100cdea <nrf_802154_ack_data_for_addr_clear+0x66>
                p_addr_array     = (uint8_t *)m_ie.short_data;
 100cdd6:	4b09      	ldr	r3, [pc, #36]	; (100cdfc <nrf_802154_ack_data_for_addr_clear+0x78>)
                entry_size       = sizeof(ack_short_ie_data_t);
 100cdd8:	260b      	movs	r6, #11
                p_addr_array_len = &m_ie.num_of_short_data;
 100cdda:	f503 75e0 	add.w	r5, r3, #448	; 0x1c0
 100cdde:	e7e8      	b.n	100cdb2 <nrf_802154_ack_data_for_addr_clear+0x2e>
                p_addr_array     = (uint8_t *)m_pending_bit.extended_addr;
 100cde0:	4b07      	ldr	r3, [pc, #28]	; (100ce00 <nrf_802154_ack_data_for_addr_clear+0x7c>)
                entry_size       = EXTENDED_ADDRESS_SIZE;
 100cde2:	2608      	movs	r6, #8
                p_addr_array_len = &m_pending_bit.num_of_ext_addr;
 100cde4:	f103 0587 	add.w	r5, r3, #135	; 0x87
 100cde8:	e7e3      	b.n	100cdb2 <nrf_802154_ack_data_for_addr_clear+0x2e>
                p_addr_array     = (uint8_t *)m_ie.ext_data;
 100cdea:	4b06      	ldr	r3, [pc, #24]	; (100ce04 <nrf_802154_ack_data_for_addr_clear+0x80>)
                entry_size       = sizeof(ack_ext_ie_data_t);
 100cdec:	2611      	movs	r6, #17
                p_addr_array_len = &m_ie.num_of_ext_data;
 100cdee:	f503 758a 	add.w	r5, r3, #276	; 0x114
 100cdf2:	e7de      	b.n	100cdb2 <nrf_802154_ack_data_for_addr_clear+0x2e>
        return false;
 100cdf4:	460c      	mov	r4, r1
 100cdf6:	e7d4      	b.n	100cda2 <nrf_802154_ack_data_for_addr_clear+0x1e>
 100cdf8:	21003695 	.word	0x21003695
 100cdfc:	210034cc 	.word	0x210034cc
 100ce00:	210036b5 	.word	0x210036b5
 100ce04:	2100357c 	.word	0x2100357c

0100ce08 <nrf_802154_ack_data_reset>:

void nrf_802154_ack_data_reset(bool extended, nrf_802154_ack_data_t data_type)
{
    switch (data_type)
 100ce08:	b111      	cbz	r1, 100ce10 <nrf_802154_ack_data_reset+0x8>
 100ce0a:	2901      	cmp	r1, #1
 100ce0c:	d008      	beq.n	100ce20 <nrf_802154_ack_data_reset+0x18>
 100ce0e:	4770      	bx	lr
    {
        case NRF_802154_ACK_DATA_PENDING_BIT:
            if (extended)
 100ce10:	4b08      	ldr	r3, [pc, #32]	; (100ce34 <nrf_802154_ack_data_reset+0x2c>)
 100ce12:	b110      	cbz	r0, 100ce1a <nrf_802154_ack_data_reset+0x12>
            {
                m_pending_bit.num_of_ext_addr = 0;
 100ce14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 100ce18:	4770      	bx	lr
            }
            else
            {
                m_pending_bit.num_of_short_addr = 0;
 100ce1a:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
 100ce1e:	4770      	bx	lr
            }
            break;

        case NRF_802154_ACK_DATA_IE:
            if (extended)
 100ce20:	4b05      	ldr	r3, [pc, #20]	; (100ce38 <nrf_802154_ack_data_reset+0x30>)
 100ce22:	b118      	cbz	r0, 100ce2c <nrf_802154_ack_data_reset+0x24>
            {
                m_ie.num_of_ext_data = 0;
 100ce24:	2200      	movs	r2, #0
 100ce26:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 100ce2a:	4770      	bx	lr
            }
            else
            {
                m_ie.num_of_short_data = 0;
 100ce2c:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
            break;

        default:
            break;
    }
}
 100ce30:	4770      	bx	lr
 100ce32:	bf00      	nop
 100ce34:	21003694 	.word	0x21003694
 100ce38:	210034cc 	.word	0x210034cc

0100ce3c <nrf_802154_ack_data_src_addr_matching_method_set>:

void nrf_802154_ack_data_src_addr_matching_method_set(nrf_802154_src_addr_match_t match_method)
{
    switch (match_method)
 100ce3c:	2802      	cmp	r0, #2
    {
        case NRF_802154_SRC_ADDR_MATCH_THREAD:
        case NRF_802154_SRC_ADDR_MATCH_ZIGBEE:
        case NRF_802154_SRC_ADDR_MATCH_ALWAYS_1:
            m_src_matching_method = match_method;
 100ce3e:	bf9c      	itt	ls
 100ce40:	4b01      	ldrls	r3, [pc, #4]	; (100ce48 <nrf_802154_ack_data_src_addr_matching_method_set+0xc>)
 100ce42:	7018      	strbls	r0, [r3, #0]

        default:
            assert(false);
    }

}
 100ce44:	4770      	bx	lr
 100ce46:	bf00      	nop
 100ce48:	2100449d 	.word	0x2100449d

0100ce4c <nrf_802154_ack_data_pending_bit_should_be_set>:

bool nrf_802154_ack_data_pending_bit_should_be_set(
    const nrf_802154_frame_parser_data_t * p_frame_data)
{
 100ce4c:	b513      	push	{r0, r1, r4, lr}
    bool ret;

    switch (m_src_matching_method)
 100ce4e:	4a22      	ldr	r2, [pc, #136]	; (100ced8 <nrf_802154_ack_data_pending_bit_should_be_set+0x8c>)
{
 100ce50:	4603      	mov	r3, r0
    switch (m_src_matching_method)
 100ce52:	7812      	ldrb	r2, [r2, #0]
 100ce54:	2a01      	cmp	r2, #1
 100ce56:	d018      	beq.n	100ce8a <nrf_802154_ack_data_pending_bit_should_be_set+0x3e>
 100ce58:	2a02      	cmp	r2, #2
 100ce5a:	d039      	beq.n	100ced0 <nrf_802154_ack_data_pending_bit_should_be_set+0x84>
 100ce5c:	2a00      	cmp	r2, #0
 100ce5e:	d139      	bne.n	100ced4 <nrf_802154_ack_data_pending_bit_should_be_set+0x88>
    return p_parser_data->mhr.src.addr_offset;
 100ce60:	7a40      	ldrb	r0, [r0, #9]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100ce62:	28ff      	cmp	r0, #255	; 0xff
 100ce64:	d034      	beq.n	100ced0 <nrf_802154_ack_data_pending_bit_should_be_set+0x84>
    if (!m_pending_bit.enabled || (NULL == p_src_addr))
 100ce66:	491d      	ldr	r1, [pc, #116]	; (100cedc <nrf_802154_ack_data_pending_bit_should_be_set+0x90>)
 100ce68:	7809      	ldrb	r1, [r1, #0]
 100ce6a:	2900      	cmp	r1, #0
 100ce6c:	d030      	beq.n	100ced0 <nrf_802154_ack_data_pending_bit_should_be_set+0x84>
 100ce6e:	681c      	ldr	r4, [r3, #0]
    return (p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK) ==
 100ce70:	78a3      	ldrb	r3, [r4, #2]
    return addr_index_find(p_src_addr, &location, NRF_802154_ACK_DATA_PENDING_BIT, extended);
 100ce72:	4420      	add	r0, r4
 100ce74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 100ce78:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 100ce7c:	424b      	negs	r3, r1
 100ce7e:	414b      	adcs	r3, r1
 100ce80:	a901      	add	r1, sp, #4
 100ce82:	f7ff fe97 	bl	100cbb4 <addr_index_find>
            ret = false;
            assert(false);
    }

    return ret;
}
 100ce86:	b002      	add	sp, #8
 100ce88:	bd10      	pop	{r4, pc}
    if (!m_pending_bit.enabled)
 100ce8a:	4914      	ldr	r1, [pc, #80]	; (100cedc <nrf_802154_ack_data_pending_bit_should_be_set+0x90>)
 100ce8c:	7808      	ldrb	r0, [r1, #0]
 100ce8e:	b1f8      	cbz	r0, 100ced0 <nrf_802154_ack_data_pending_bit_should_be_set+0x84>
    return p_parser_data->mhr.src.addr_offset;
 100ce90:	681a      	ldr	r2, [r3, #0]
 100ce92:	7a5c      	ldrb	r4, [r3, #9]
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 100ce94:	7851      	ldrb	r1, [r2, #1]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100ce96:	2cff      	cmp	r4, #255	; 0xff
    if (nrf_802154_frame_parser_frame_type_get(p_parser_data) != FRAME_TYPE_COMMAND)
 100ce98:	f001 0107 	and.w	r1, r1, #7
        return NULL;
 100ce9c:	bf0c      	ite	eq
 100ce9e:	2400      	moveq	r4, #0
    return &p_parser_data->p_frame[offset];
 100cea0:	18a4      	addne	r4, r4, r2
    if (nrf_802154_frame_parser_frame_type_get(p_parser_data) != FRAME_TYPE_COMMAND)
 100cea2:	2903      	cmp	r1, #3
 100cea4:	d116      	bne.n	100ced4 <nrf_802154_ack_data_pending_bit_should_be_set+0x88>
    return p_parser_data->mac_payload.mac_payload_offset;
 100cea6:	7c1b      	ldrb	r3, [r3, #16]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100cea8:	2bff      	cmp	r3, #255	; 0xff
 100ceaa:	d013      	beq.n	100ced4 <nrf_802154_ack_data_pending_bit_should_be_set+0x88>
    if ((p_cmd != NULL) && (*p_cmd == MAC_CMD_DATA_REQ))
 100ceac:	5cd3      	ldrb	r3, [r2, r3]
 100ceae:	2b04      	cmp	r3, #4
 100ceb0:	d110      	bne.n	100ced4 <nrf_802154_ack_data_pending_bit_should_be_set+0x88>
    return p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK;
 100ceb2:	7893      	ldrb	r3, [r2, #2]
        if (src_addr_type == SRC_ADDR_TYPE_SHORT)
 100ceb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 100ceb8:	2b80      	cmp	r3, #128	; 0x80
 100ceba:	d1e4      	bne.n	100ce86 <nrf_802154_ack_data_pending_bit_should_be_set+0x3a>
            ret = !addr_index_find(p_src_addr,
 100cebc:	2300      	movs	r3, #0
 100cebe:	4620      	mov	r0, r4
 100cec0:	461a      	mov	r2, r3
 100cec2:	a901      	add	r1, sp, #4
 100cec4:	f7ff fe76 	bl	100cbb4 <addr_index_find>
                                   false);
 100cec8:	f080 0001 	eor.w	r0, r0, #1
 100cecc:	b2c0      	uxtb	r0, r0
 100cece:	e7da      	b.n	100ce86 <nrf_802154_ack_data_pending_bit_should_be_set+0x3a>
            ret = addr_match_standard_compliant(p_frame_data);
 100ced0:	2001      	movs	r0, #1
 100ced2:	e7d8      	b.n	100ce86 <nrf_802154_ack_data_pending_bit_should_be_set+0x3a>
    switch (m_src_matching_method)
 100ced4:	2000      	movs	r0, #0
 100ced6:	e7d6      	b.n	100ce86 <nrf_802154_ack_data_pending_bit_should_be_set+0x3a>
 100ced8:	2100449d 	.word	0x2100449d
 100cedc:	21003694 	.word	0x21003694

0100cee0 <nrf_802154_ack_data_ie_get>:

const uint8_t * nrf_802154_ack_data_ie_get(const uint8_t * p_src_addr,
                                           bool            src_addr_extended,
                                           uint8_t       * p_ie_length)
{
 100cee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 100cee2:	460e      	mov	r6, r1
 100cee4:	4615      	mov	r5, r2
    uint32_t location;

    if (NULL == p_src_addr)
 100cee6:	b1d0      	cbz	r0, 100cf1e <nrf_802154_ack_data_ie_get+0x3e>
    {
        return NULL;
    }

    if (addr_index_find(p_src_addr, &location, NRF_802154_ACK_DATA_IE, src_addr_extended))
 100cee8:	460b      	mov	r3, r1
 100ceea:	2201      	movs	r2, #1
 100ceec:	a901      	add	r1, sp, #4
 100ceee:	f7ff fe61 	bl	100cbb4 <addr_index_find>
 100cef2:	b198      	cbz	r0, 100cf1c <nrf_802154_ack_data_ie_get+0x3c>
    {
        if (src_addr_extended)
        {
            *p_ie_length = m_ie.ext_data[location].ie_data.len;
 100cef4:	9c01      	ldr	r4, [sp, #4]
 100cef6:	480b      	ldr	r0, [pc, #44]	; (100cf24 <nrf_802154_ack_data_ie_get+0x44>)
        if (src_addr_extended)
 100cef8:	b14e      	cbz	r6, 100cf0e <nrf_802154_ack_data_ie_get+0x2e>
            *p_ie_length = m_ie.ext_data[location].ie_data.len;
 100cefa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 100cefe:	1903      	adds	r3, r0, r4
 100cf00:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
            return m_ie.ext_data[location].ie_data.p_data;
 100cf04:	34b8      	adds	r4, #184	; 0xb8
            *p_ie_length = m_ie.ext_data[location].ie_data.len;
 100cf06:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            *p_ie_length = m_ie.short_data[location].ie_data.len;
            return m_ie.short_data[location].ie_data.p_data;
 100cf08:	4420      	add	r0, r4
    else
    {
        *p_ie_length = 0;
        return NULL;
    }
}
 100cf0a:	b002      	add	sp, #8
 100cf0c:	bd70      	pop	{r4, r5, r6, pc}
            *p_ie_length = m_ie.short_data[location].ie_data.len;
 100cf0e:	230b      	movs	r3, #11
 100cf10:	435c      	muls	r4, r3
 100cf12:	1903      	adds	r3, r0, r4
 100cf14:	7a9b      	ldrb	r3, [r3, #10]
            return m_ie.short_data[location].ie_data.p_data;
 100cf16:	3402      	adds	r4, #2
            *p_ie_length = m_ie.short_data[location].ie_data.len;
 100cf18:	702b      	strb	r3, [r5, #0]
            return m_ie.short_data[location].ie_data.p_data;
 100cf1a:	e7f5      	b.n	100cf08 <nrf_802154_ack_data_ie_get+0x28>
        *p_ie_length = 0;
 100cf1c:	7028      	strb	r0, [r5, #0]
        return NULL;
 100cf1e:	2000      	movs	r0, #0
 100cf20:	e7f3      	b.n	100cf0a <nrf_802154_ack_data_ie_get+0x2a>
 100cf22:	bf00      	nop
 100cf24:	210034cc 	.word	0x210034cc

0100cf28 <fcf_frame_pending_set>:
        m_ack[SECURITY_ENABLED_OFFSET] |= SECURITY_ENABLED_BIT;
    }
}

static void fcf_frame_pending_set(const nrf_802154_frame_parser_data_t * p_frame_data)
{
 100cf28:	b508      	push	{r3, lr}
    if (nrf_802154_ack_data_pending_bit_should_be_set(p_frame_data))
 100cf2a:	f7ff ff8f 	bl	100ce4c <nrf_802154_ack_data_pending_bit_should_be_set>
 100cf2e:	b120      	cbz	r0, 100cf3a <fcf_frame_pending_set+0x12>
    {
        m_ack[FRAME_PENDING_OFFSET] |= FRAME_PENDING_BIT;
 100cf30:	4a02      	ldr	r2, [pc, #8]	; (100cf3c <fcf_frame_pending_set+0x14>)
 100cf32:	7853      	ldrb	r3, [r2, #1]
 100cf34:	f043 0310 	orr.w	r3, r3, #16
 100cf38:	7053      	strb	r3, [r2, #1]
    }
}
 100cf3a:	bd08      	pop	{r3, pc}
 100cf3c:	2100449f 	.word	0x2100449f

0100cf40 <nrf_802154_enh_ack_generator_reset>:
{
    // Intentionally empty.
}

void nrf_802154_enh_ack_generator_reset(void)
{
 100cf40:	b510      	push	{r4, lr}
    memset(m_ack, 0U, sizeof(m_ack));
 100cf42:	4c0a      	ldr	r4, [pc, #40]	; (100cf6c <nrf_802154_enh_ack_generator_reset+0x2c>)
 100cf44:	2280      	movs	r2, #128	; 0x80
 100cf46:	2100      	movs	r1, #0
 100cf48:	4620      	mov	r0, r4
 100cf4a:	f005 fd62 	bl	1012a12 <memset>
    (void)nrf_802154_frame_parser_data_init(m_ack, 0U, PARSE_LEVEL_NONE, &m_ack_data);
 100cf4e:	2200      	movs	r2, #0
 100cf50:	4b07      	ldr	r3, [pc, #28]	; (100cf70 <nrf_802154_enh_ack_generator_reset+0x30>)
 100cf52:	4611      	mov	r1, r2
 100cf54:	4620      	mov	r0, r4
 100cf56:	f006 fb89 	bl	101366c <nrf_802154_frame_parser_data_init>
    mp_ie_data    = 0U;
 100cf5a:	2300      	movs	r3, #0
 100cf5c:	4a05      	ldr	r2, [pc, #20]	; (100cf74 <nrf_802154_enh_ack_generator_reset+0x34>)
 100cf5e:	6013      	str	r3, [r2, #0]
    m_ie_data_len = 0U;
 100cf60:	4a05      	ldr	r2, [pc, #20]	; (100cf78 <nrf_802154_enh_ack_generator_reset+0x38>)
 100cf62:	7013      	strb	r3, [r2, #0]
    m_ack_state   = ACK_STATE_RESET;
 100cf64:	4a05      	ldr	r2, [pc, #20]	; (100cf7c <nrf_802154_enh_ack_generator_reset+0x3c>)
 100cf66:	7013      	strb	r3, [r2, #0]
}
 100cf68:	bd10      	pop	{r4, pc}
 100cf6a:	bf00      	nop
 100cf6c:	2100449f 	.word	0x2100449f
 100cf70:	21003744 	.word	0x21003744
 100cf74:	21003740 	.word	0x21003740
 100cf78:	2100449e 	.word	0x2100449e
 100cf7c:	2100451f 	.word	0x2100451f

0100cf80 <nrf_802154_enh_ack_generator_create>:

uint8_t * nrf_802154_enh_ack_generator_create(
    const nrf_802154_frame_parser_data_t * p_frame_data)
{
 100cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_ack_state;
 100cf84:	4f8d      	ldr	r7, [pc, #564]	; (100d1bc <nrf_802154_enh_ack_generator_create+0x23c>)
{
 100cf86:	4605      	mov	r5, r0
    return m_ack_state;
 100cf88:	783b      	ldrb	r3, [r7, #0]
{
 100cf8a:	b087      	sub	sp, #28
    switch (ack_state_get())
 100cf8c:	2b02      	cmp	r3, #2
 100cf8e:	d005      	beq.n	100cf9c <nrf_802154_enh_ack_generator_create+0x1c>
 100cf90:	2b03      	cmp	r3, #3
 100cf92:	f000 8222 	beq.w	100d3da <nrf_802154_enh_ack_generator_create+0x45a>
 100cf96:	b92b      	cbnz	r3, 100cfa4 <nrf_802154_enh_ack_generator_create+0x24>
    m_ack_state = state_to_set;
 100cf98:	2302      	movs	r3, #2
 100cf9a:	703b      	strb	r3, [r7, #0]
    return p_parser_data->parse_level;
 100cf9c:	4c88      	ldr	r4, [pc, #544]	; (100d1c0 <nrf_802154_enh_ack_generator_create+0x240>)
 100cf9e:	792e      	ldrb	r6, [r5, #4]
 100cfa0:	7923      	ldrb	r3, [r4, #4]
    if ((frame_parse_level >= PARSE_LEVEL_FCF_OFFSETS) &&
 100cfa2:	b91e      	cbnz	r6, 100cfac <nrf_802154_enh_ack_generator_create+0x2c>
            if (processing_done)
            {
                ack_state_set(p_ack ? ACK_STATE_COMPLETE : ACK_STATE_INVALID);
            }

            return processing_done ? p_ack : NULL;
 100cfa4:	2000      	movs	r0, #0

        default:
            assert(false);
            return NULL;
    }
}
 100cfa6:	b007      	add	sp, #28
 100cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((frame_parse_level >= PARSE_LEVEL_FCF_OFFSETS) &&
 100cfac:	2b00      	cmp	r3, #0
 100cfae:	d155      	bne.n	100d05c <nrf_802154_enh_ack_generator_create+0xdc>
    m_ack[FRAME_TYPE_OFFSET] |= FRAME_TYPE_ACK;
 100cfb0:	f8df 8210 	ldr.w	r8, [pc, #528]	; 100d1c4 <nrf_802154_enh_ack_generator_create+0x244>
 100cfb4:	f898 3001 	ldrb.w	r3, [r8, #1]
 100cfb8:	f043 0202 	orr.w	r2, r3, #2
 100cfbc:	f888 2001 	strb.w	r2, [r8, #1]
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
 100cfc0:	682a      	ldr	r2, [r5, #0]
 100cfc2:	7852      	ldrb	r2, [r2, #1]
    if (nrf_802154_frame_parser_security_enabled_bit_is_set(p_frame_data))
 100cfc4:	0711      	lsls	r1, r2, #28
        m_ack[SECURITY_ENABLED_OFFSET] |= SECURITY_ENABLED_BIT;
 100cfc6:	bf44      	itt	mi
 100cfc8:	f043 030a 	orrmi.w	r3, r3, #10
 100cfcc:	f888 3001 	strbmi.w	r3, [r8, #1]
    return (p_parser_data->p_frame[PAN_ID_COMPR_OFFSET] & PAN_ID_COMPR_MASK) ? true : false;
 100cfd0:	682b      	ldr	r3, [r5, #0]
 100cfd2:	785b      	ldrb	r3, [r3, #1]
    if (nrf_802154_frame_parser_panid_compression_is_set(p_frame_data))
 100cfd4:	065a      	lsls	r2, r3, #25
        m_ack[PAN_ID_COMPR_OFFSET] |= PAN_ID_COMPR_MASK;
 100cfd6:	bf42      	ittt	mi
 100cfd8:	f898 3001 	ldrbmi.w	r3, [r8, #1]
 100cfdc:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 100cfe0:	f888 3001 	strbmi.w	r3, [r8, #1]
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
 100cfe4:	682b      	ldr	r3, [r5, #0]
 100cfe6:	789b      	ldrb	r3, [r3, #2]
    if (nrf_802154_frame_parser_dsn_suppress_bit_is_set(p_frame_data))
 100cfe8:	07db      	lsls	r3, r3, #31
        m_ack[DSN_SUPPRESS_OFFSET] |= DSN_SUPPRESS_BIT;
 100cfea:	bf42      	ittt	mi
 100cfec:	f898 3002 	ldrbmi.w	r3, [r8, #2]
 100cff0:	f043 0301 	orrmi.w	r3, r3, #1
 100cff4:	f888 3002 	strbmi.w	r3, [r8, #2]
    return (p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK) ==
 100cff8:	682b      	ldr	r3, [r5, #0]
 100cffa:	789a      	ldrb	r2, [r3, #2]
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_EXTENDED;
 100cffc:	f898 3002 	ldrb.w	r3, [r8, #2]
 100d000:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    if (nrf_802154_frame_parser_src_addr_is_extended(p_frame_data))
 100d004:	2ac0      	cmp	r2, #192	; 0xc0
 100d006:	d124      	bne.n	100d052 <nrf_802154_enh_ack_generator_create+0xd2>
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_EXTENDED;
 100d008:	f043 030c 	orr.w	r3, r3, #12
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_SHORT;
 100d00c:	f888 3002 	strb.w	r3, [r8, #2]
    m_ack[FRAME_VERSION_OFFSET] |= FRAME_VERSION_2;
 100d010:	f898 3002 	ldrb.w	r3, [r8, #2]
    if (level >= PARSE_LEVEL_FULL)
 100d014:	2e05      	cmp	r6, #5
    m_ack[FRAME_VERSION_OFFSET] |= FRAME_VERSION_2;
 100d016:	f043 0320 	orr.w	r3, r3, #32
 100d01a:	f888 3002 	strb.w	r3, [r8, #2]
    if (level >= PARSE_LEVEL_FULL)
 100d01e:	d902      	bls.n	100d026 <nrf_802154_enh_ack_generator_create+0xa6>
        fcf_frame_pending_set(p_frame_data);
 100d020:	4628      	mov	r0, r5
 100d022:	f7ff ff81 	bl	100cf28 <fcf_frame_pending_set>
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100d026:	f898 1000 	ldrb.w	r1, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d02a:	2201      	movs	r2, #1
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100d02c:	1c8b      	adds	r3, r1, #2
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d02e:	3103      	adds	r1, #3
 100d030:	4863      	ldr	r0, [pc, #396]	; (100d1c0 <nrf_802154_enh_ack_generator_create+0x240>)
 100d032:	b2c9      	uxtb	r1, r1
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100d034:	f888 3000 	strb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d038:	f006 fb38 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
    if ((frame_parse_level >= PARSE_LEVEL_DST_ADDRESSING_END) &&
 100d03c:	2e01      	cmp	r6, #1
 100d03e:	d0b1      	beq.n	100cfa4 <nrf_802154_enh_ack_generator_create+0x24>
    *p_bytes_written   = sequence_number_set(p_frame_data);
 100d040:	682a      	ldr	r2, [r5, #0]
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
 100d042:	f8df 9180 	ldr.w	r9, [pc, #384]	; 100d1c4 <nrf_802154_enh_ack_generator_create+0x244>
 100d046:	7893      	ldrb	r3, [r2, #2]
    if (nrf_802154_frame_parser_dsn_suppress_bit_is_set(p_parser_data))
 100d048:	f013 0f01 	tst.w	r3, #1
 100d04c:	d023      	beq.n	100d096 <nrf_802154_enh_ack_generator_create+0x116>
    return 0U;
 100d04e:	2200      	movs	r2, #0
 100d050:	e025      	b.n	100d09e <nrf_802154_enh_ack_generator_create+0x11e>
    else if (nrf_802154_frame_parser_src_addr_is_short(p_frame_data))
 100d052:	2a80      	cmp	r2, #128	; 0x80
 100d054:	d1dc      	bne.n	100d010 <nrf_802154_enh_ack_generator_create+0x90>
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_SHORT;
 100d056:	f043 0308 	orr.w	r3, r3, #8
 100d05a:	e7d7      	b.n	100d00c <nrf_802154_enh_ack_generator_create+0x8c>
    if ((frame_parse_level >= PARSE_LEVEL_DST_ADDRESSING_END) &&
 100d05c:	2e01      	cmp	r6, #1
 100d05e:	d0a1      	beq.n	100cfa4 <nrf_802154_enh_ack_generator_create+0x24>
 100d060:	2b01      	cmp	r3, #1
 100d062:	d0ed      	beq.n	100d040 <nrf_802154_enh_ack_generator_create+0xc0>
    if ((frame_parse_level >= PARSE_LEVEL_ADDRESSING_END) &&
 100d064:	2e02      	cmp	r6, #2
 100d066:	d09d      	beq.n	100cfa4 <nrf_802154_enh_ack_generator_create+0x24>
 100d068:	2b02      	cmp	r3, #2
 100d06a:	d055      	beq.n	100d118 <nrf_802154_enh_ack_generator_create+0x198>
    if ((frame_parse_level >= PARSE_LEVEL_AUX_SEC_HDR_END) &&
 100d06c:	2e04      	cmp	r6, #4
 100d06e:	d999      	bls.n	100cfa4 <nrf_802154_enh_ack_generator_create+0x24>
 100d070:	2b04      	cmp	r3, #4
 100d072:	f240 809d 	bls.w	100d1b0 <nrf_802154_enh_ack_generator_create+0x230>
    if (frame_parse_level == PARSE_LEVEL_FULL)
 100d076:	2e06      	cmp	r6, #6
 100d078:	d194      	bne.n	100cfa4 <nrf_802154_enh_ack_generator_create+0x24>
        fcf_frame_pending_set(p_frame_data);
 100d07a:	4628      	mov	r0, r5
 100d07c:	f7ff ff54 	bl	100cf28 <fcf_frame_pending_set>
    nrf_802154_encrypt_ack_reset();
 100d080:	f006 f987 	bl	1013392 <nrf_802154_encrypt_ack_reset>
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
 100d084:	6822      	ldr	r2, [r4, #0]
 100d086:	7853      	ldrb	r3, [r2, #1]
    if (nrf_802154_frame_parser_security_enabled_bit_is_set(p_ack_data) == false)
 100d088:	0719      	lsls	r1, r3, #28
 100d08a:	f100 8195 	bmi.w	100d3b8 <nrf_802154_enh_ack_generator_create+0x438>
                ack_state_set(p_ack ? ACK_STATE_COMPLETE : ACK_STATE_INVALID);
 100d08e:	2303      	movs	r3, #3
        return 0U;
 100d090:	484c      	ldr	r0, [pc, #304]	; (100d1c4 <nrf_802154_enh_ack_generator_create+0x244>)
    m_ack_state = state_to_set;
 100d092:	703b      	strb	r3, [r7, #0]
            return processing_done ? p_ack : NULL;
 100d094:	e787      	b.n	100cfa6 <nrf_802154_enh_ack_generator_create+0x26>
        m_ack[DSN_OFFSET] = *p_frame_dsn;
 100d096:	78d2      	ldrb	r2, [r2, #3]
 100d098:	f889 2003 	strb.w	r2, [r9, #3]
        return DSN_SIZE;
 100d09c:	2201      	movs	r2, #1
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100d09e:	f899 1000 	ldrb.w	r1, [r9]
    return p_parser_data->mhr.dst.panid_offset;
 100d0a2:	79a8      	ldrb	r0, [r5, #6]
 100d0a4:	440a      	add	r2, r1
 100d0a6:	f889 2000 	strb.w	r2, [r9]
 100d0aa:	79a2      	ldrb	r2, [r4, #6]
    return p_parser_data->mhr.src.addr_offset;
 100d0ac:	f895 c009 	ldrb.w	ip, [r5, #9]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d0b0:	2aff      	cmp	r2, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100d0b2:	bf16      	itet	ne
 100d0b4:	6821      	ldrne	r1, [r4, #0]
        return NULL;
 100d0b6:	f04f 0800 	moveq.w	r8, #0
    return &p_parser_data->p_frame[offset];
 100d0ba:	eb01 0802 	addne.w	r8, r1, r2
    return p_parser_data->mhr.dst.addr_offset;
 100d0be:	79e2      	ldrb	r2, [r4, #7]
    return p_parser_data->helper.src_addr_size;
 100d0c0:	7cab      	ldrb	r3, [r5, #18]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d0c2:	2aff      	cmp	r2, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100d0c4:	bf16      	itet	ne
 100d0c6:	6821      	ldrne	r1, [r4, #0]
        return NULL;
 100d0c8:	f04f 0b00 	moveq.w	fp, #0
    return &p_parser_data->p_frame[offset];
 100d0cc:	eb01 0b02 	addne.w	fp, r1, r2
    return p_parser_data->mhr.src.panid_offset;
 100d0d0:	7a29      	ldrb	r1, [r5, #8]
    return p_parser_data->helper.src_addr_size;
 100d0d2:	9301      	str	r3, [sp, #4]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d0d4:	29ff      	cmp	r1, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100d0d6:	bf16      	itet	ne
 100d0d8:	682a      	ldrne	r2, [r5, #0]
        return NULL;
 100d0da:	2200      	moveq	r2, #0
    return &p_parser_data->p_frame[offset];
 100d0dc:	1852      	addne	r2, r2, r1
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d0de:	28ff      	cmp	r0, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100d0e0:	bf16      	itet	ne
 100d0e2:	6829      	ldrne	r1, [r5, #0]
        return NULL;
 100d0e4:	2100      	moveq	r1, #0
    return &p_parser_data->p_frame[offset];
 100d0e6:	1809      	addne	r1, r1, r0
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d0e8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 100d0ec:	d11a      	bne.n	100d124 <nrf_802154_enh_ack_generator_create+0x1a4>
    if (p_ack_dst_panid != NULL)
 100d0ee:	f1b8 0f00 	cmp.w	r8, #0
 100d0f2:	d12e      	bne.n	100d152 <nrf_802154_enh_ack_generator_create+0x1d2>
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100d0f4:	f899 2000 	ldrb.w	r2, [r9]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d0f8:	4831      	ldr	r0, [pc, #196]	; (100d1c0 <nrf_802154_enh_ack_generator_create+0x240>)
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100d0fa:	4490      	add	r8, r2
 100d0fc:	fa5f f888 	uxtb.w	r8, r8
 100d100:	f889 8000 	strb.w	r8, [r9]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d104:	f108 0801 	add.w	r8, r8, #1
 100d108:	2202      	movs	r2, #2
 100d10a:	fa5f f188 	uxtb.w	r1, r8
 100d10e:	f006 facd 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
    if ((frame_parse_level >= PARSE_LEVEL_ADDRESSING_END) &&
 100d112:	2e02      	cmp	r6, #2
 100d114:	f67f af46 	bls.w	100cfa4 <nrf_802154_enh_ack_generator_create+0x24>
    return p_parser_data->mhr.src.addr_offset;
 100d118:	7a68      	ldrb	r0, [r5, #9]
    return &p_parser_data->p_frame[offset];
 100d11a:	682b      	ldr	r3, [r5, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d11c:	28ff      	cmp	r0, #255	; 0xff
 100d11e:	d128      	bne.n	100d172 <nrf_802154_enh_ack_generator_create+0x1f2>
        return NULL;
 100d120:	2000      	movs	r0, #0
 100d122:	e027      	b.n	100d174 <nrf_802154_enh_ack_generator_create+0x1f4>
    return &p_parser_data->p_frame[offset];
 100d124:	6828      	ldr	r0, [r5, #0]
 100d126:	eb00 0a0c 	add.w	sl, r0, ip
    if (p_ack_dst_panid != NULL)
 100d12a:	f1b8 0f00 	cmp.w	r8, #0
 100d12e:	d112      	bne.n	100d156 <nrf_802154_enh_ack_generator_create+0x1d6>
    if ((p_ack_dst_addr != NULL) && (p_frame_src_addr != NULL))
 100d130:	f1bb 0f00 	cmp.w	fp, #0
 100d134:	d0de      	beq.n	100d0f4 <nrf_802154_enh_ack_generator_create+0x174>
 100d136:	f1ba 0f00 	cmp.w	sl, #0
 100d13a:	d0db      	beq.n	100d0f4 <nrf_802154_enh_ack_generator_create+0x174>
        memcpy(p_ack_dst_addr, p_frame_src_addr, src_addr_size);
 100d13c:	4658      	mov	r0, fp
 100d13e:	4651      	mov	r1, sl
 100d140:	9a01      	ldr	r2, [sp, #4]
 100d142:	f005 fc5b 	bl	10129fc <memcpy>
        bytes_written += src_addr_size;
 100d146:	f8dd b004 	ldr.w	fp, [sp, #4]
 100d14a:	44c3      	add	fp, r8
 100d14c:	fa5f f88b 	uxtb.w	r8, fp
 100d150:	e7d0      	b.n	100d0f4 <nrf_802154_enh_ack_generator_create+0x174>
        return NULL;
 100d152:	f04f 0a00 	mov.w	sl, #0
        if (p_frame_src_panid != NULL)
 100d156:	b952      	cbnz	r2, 100d16e <nrf_802154_enh_ack_generator_create+0x1ee>
        else if (p_frame_dst_panid != NULL)
 100d158:	b911      	cbnz	r1, 100d160 <nrf_802154_enh_ack_generator_create+0x1e0>
            p_dst_panid = nrf_802154_pib_pan_id_get();
 100d15a:	f7fd f801 	bl	100a160 <nrf_802154_pib_pan_id_get>
 100d15e:	4601      	mov	r1, r0
        memcpy(p_ack_dst_panid, p_dst_panid, PAN_ID_SIZE);
 100d160:	4640      	mov	r0, r8
 100d162:	2202      	movs	r2, #2
 100d164:	f005 fc4a 	bl	10129fc <memcpy>
        bytes_written += PAN_ID_SIZE;
 100d168:	f04f 0802 	mov.w	r8, #2
 100d16c:	e7e0      	b.n	100d130 <nrf_802154_enh_ack_generator_create+0x1b0>
 100d16e:	4611      	mov	r1, r2
 100d170:	e7f6      	b.n	100d160 <nrf_802154_enh_ack_generator_create+0x1e0>
    return &p_parser_data->p_frame[offset];
 100d172:	4418      	add	r0, r3
    return (p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK) ==
 100d174:	7899      	ldrb	r1, [r3, #2]
    mp_ie_data = nrf_802154_ack_data_ie_get(
 100d176:	4a14      	ldr	r2, [pc, #80]	; (100d1c8 <nrf_802154_enh_ack_generator_create+0x248>)
 100d178:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 100d17c:	f1a1 0cc0 	sub.w	ip, r1, #192	; 0xc0
 100d180:	f1dc 0100 	rsbs	r1, ip, #0
 100d184:	eb41 010c 	adc.w	r1, r1, ip
 100d188:	f7ff feaa 	bl	100cee0 <nrf_802154_ack_data_ie_get>
 100d18c:	4b0f      	ldr	r3, [pc, #60]	; (100d1cc <nrf_802154_enh_ack_generator_create+0x24c>)
 100d18e:	6018      	str	r0, [r3, #0]
    if (ie_present)
 100d190:	4b0c      	ldr	r3, [pc, #48]	; (100d1c4 <nrf_802154_enh_ack_generator_create+0x244>)
 100d192:	b118      	cbz	r0, 100d19c <nrf_802154_enh_ack_generator_create+0x21c>
        m_ack[IE_PRESENT_OFFSET] |= IE_PRESENT_BIT;
 100d194:	789a      	ldrb	r2, [r3, #2]
 100d196:	f042 0202 	orr.w	r2, r2, #2
 100d19a:	709a      	strb	r2, [r3, #2]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d19c:	7819      	ldrb	r1, [r3, #0]
 100d19e:	2203      	movs	r2, #3
 100d1a0:	3101      	adds	r1, #1
 100d1a2:	4807      	ldr	r0, [pc, #28]	; (100d1c0 <nrf_802154_enh_ack_generator_create+0x240>)
 100d1a4:	b2c9      	uxtb	r1, r1
 100d1a6:	f006 fa81 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
    if ((frame_parse_level >= PARSE_LEVEL_AUX_SEC_HDR_END) &&
 100d1aa:	2e04      	cmp	r6, #4
 100d1ac:	f67f aefa 	bls.w	100cfa4 <nrf_802154_enh_ack_generator_create+0x24>
    return p_parser_data->helper.addressing_end_offset;
 100d1b0:	7d21      	ldrb	r1, [r4, #20]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d1b2:	29ff      	cmp	r1, #255	; 0xff
 100d1b4:	d10c      	bne.n	100d1d0 <nrf_802154_enh_ack_generator_create+0x250>
 100d1b6:	2100      	movs	r1, #0
 100d1b8:	e03c      	b.n	100d234 <nrf_802154_enh_ack_generator_create+0x2b4>
 100d1ba:	bf00      	nop
 100d1bc:	2100451f 	.word	0x2100451f
 100d1c0:	21003744 	.word	0x21003744
 100d1c4:	2100449f 	.word	0x2100449f
 100d1c8:	2100449e 	.word	0x2100449e
 100d1cc:	21003740 	.word	0x21003740
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100d1d0:	7aab      	ldrb	r3, [r5, #10]
    return &p_parser_data->p_frame[offset];
 100d1d2:	6822      	ldr	r2, [r4, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d1d4:	2bff      	cmp	r3, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100d1d6:	eb02 0a01 	add.w	sl, r2, r1
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d1da:	d0ec      	beq.n	100d1b6 <nrf_802154_enh_ack_generator_create+0x236>
    return &p_parser_data->p_frame[offset];
 100d1dc:	6828      	ldr	r0, [r5, #0]
 100d1de:	eb00 0803 	add.w	r8, r0, r3
    if ((ack_sec_ctrl == NULL) || (frame_sec_ctrl == NULL))
 100d1e2:	f1ba 0f00 	cmp.w	sl, #0
 100d1e6:	d0e6      	beq.n	100d1b6 <nrf_802154_enh_ack_generator_create+0x236>
 100d1e8:	f1b8 0f00 	cmp.w	r8, #0
 100d1ec:	f000 80e0 	beq.w	100d3b0 <nrf_802154_enh_ack_generator_create+0x430>
    *ack_sec_ctrl  = *frame_sec_ctrl;
 100d1f0:	5cc3      	ldrb	r3, [r0, r3]
    result = nrf_802154_frame_parser_valid_data_extend(p_ack_data,
 100d1f2:	487b      	ldr	r0, [pc, #492]	; (100d3e0 <nrf_802154_enh_ack_generator_create+0x460>)
    *ack_sec_ctrl  = *frame_sec_ctrl;
 100d1f4:	5453      	strb	r3, [r2, r1]
    result = nrf_802154_frame_parser_valid_data_extend(p_ack_data,
 100d1f6:	3101      	adds	r1, #1
 100d1f8:	2204      	movs	r2, #4
 100d1fa:	b2c9      	uxtb	r1, r1
 100d1fc:	f006 fa56 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100d200:	7aab      	ldrb	r3, [r5, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d202:	2bff      	cmp	r3, #255	; 0xff
 100d204:	d003      	beq.n	100d20e <nrf_802154_enh_ack_generator_create+0x28e>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 100d206:	6829      	ldr	r1, [r5, #0]
 100d208:	5cca      	ldrb	r2, [r1, r3]
    if (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_frame_data) == SECURITY_LEVEL_NONE)
 100d20a:	0752      	lsls	r2, r2, #29
 100d20c:	d173      	bne.n	100d2f6 <nrf_802154_enh_ack_generator_create+0x376>
    return aux_sec_hdr_end - sec_ctrl_offset;
 100d20e:	f895 9015 	ldrb.w	r9, [r5, #21]
        memcpy(ack_sec_ctrl + SECURITY_CONTROL_SIZE,
 100d212:	f108 0101 	add.w	r1, r8, #1
    return aux_sec_hdr_end - sec_ctrl_offset;
 100d216:	eba9 0903 	sub.w	r9, r9, r3
 100d21a:	fa5f f989 	uxtb.w	r9, r9
        uint8_t sec_hdr_size = security_header_size(p_frame_data) - SECURITY_CONTROL_SIZE;
 100d21e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
        memcpy(ack_sec_ctrl + SECURITY_CONTROL_SIZE,
 100d222:	b2d2      	uxtb	r2, r2
 100d224:	f10a 0001 	add.w	r0, sl, #1
 100d228:	f005 fbe8 	bl	10129fc <memcpy>
    bytes_written   += nrf_802154_frame_parser_mic_size_get(p_ack_data);
 100d22c:	7de3      	ldrb	r3, [r4, #23]
 100d22e:	4499      	add	r9, r3
 100d230:	fa5f f189 	uxtb.w	r1, r9
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100d234:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 100d3e4 <nrf_802154_enh_ack_generator_create+0x464>
    ie_header_set(mp_ie_data, m_ie_data_len, &m_ack_data);
 100d238:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 100d3e8 <nrf_802154_enh_ack_generator_create+0x468>
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100d23c:	f898 3000 	ldrb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d240:	2205      	movs	r2, #5
    m_ack[PHR_OFFSET] += *p_bytes_written;
 100d242:	4419      	add	r1, r3
 100d244:	b2c9      	uxtb	r1, r1
 100d246:	f888 1000 	strb.w	r1, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d24a:	3101      	adds	r1, #1
 100d24c:	b2c9      	uxtb	r1, r1
 100d24e:	4864      	ldr	r0, [pc, #400]	; (100d3e0 <nrf_802154_enh_ack_generator_create+0x460>)
 100d250:	f006 fa2c 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
    ie_header_set(mp_ie_data, m_ie_data_len, &m_ack_data);
 100d254:	f8da 1000 	ldr.w	r1, [sl]
    if (p_ie_data == NULL)
 100d258:	f8df b190 	ldr.w	fp, [pc, #400]	; 100d3ec <nrf_802154_enh_ack_generator_create+0x46c>
 100d25c:	b179      	cbz	r1, 100d27e <nrf_802154_enh_ack_generator_create+0x2fe>
    p_ack_ie = (uint8_t *)p_ack_data->p_frame + ie_offset;
 100d25e:	6822      	ldr	r2, [r4, #0]
 100d260:	7d63      	ldrb	r3, [r4, #21]
 100d262:	eb02 0903 	add.w	r9, r2, r3
    memcpy(p_ack_ie, p_ie_data, ie_data_len);
 100d266:	f89b 2000 	ldrb.w	r2, [fp]
 100d26a:	4648      	mov	r0, r9
 100d26c:	9201      	str	r2, [sp, #4]
 100d26e:	f005 fbc5 	bl	10129fc <memcpy>
    nrf_802154_ie_writer_prepare(p_ack_ie, p_ack_ie + ie_data_len);
 100d272:	9a01      	ldr	r2, [sp, #4]
 100d274:	4648      	mov	r0, r9
 100d276:	eb09 0102 	add.w	r1, r9, r2
 100d27a:	f7ff f87f 	bl	100c37c <nrf_802154_ie_writer_prepare>
    m_ack[PHR_OFFSET] += m_ie_data_len;
 100d27e:	f898 3000 	ldrb.w	r3, [r8]
 100d282:	f89b 9000 	ldrb.w	r9, [fp]
    if (p_ie_data == NULL)
 100d286:	f8da 1000 	ldr.w	r1, [sl]
    m_ack[PHR_OFFSET] += m_ie_data_len;
 100d28a:	444b      	add	r3, r9
 100d28c:	f888 3000 	strb.w	r3, [r8]
    if (p_ie_data == NULL)
 100d290:	b319      	cbz	r1, 100d2da <nrf_802154_enh_ack_generator_create+0x35a>
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
 100d292:	f8d4 a000 	ldr.w	sl, [r4]
 100d296:	f89a 3001 	ldrb.w	r3, [sl, #1]
    if ((nrf_802154_frame_parser_security_enabled_bit_is_set(p_ack_data) == false) ||
 100d29a:	0718      	lsls	r0, r3, #28
 100d29c:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 100d2a0:	d51b      	bpl.n	100d2da <nrf_802154_enh_ack_generator_create+0x35a>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100d2a2:	7aa3      	ldrb	r3, [r4, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d2a4:	2bff      	cmp	r3, #255	; 0xff
 100d2a6:	f000 8085 	beq.w	100d3b4 <nrf_802154_enh_ack_generator_create+0x434>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 100d2aa:	f81a 1003 	ldrb.w	r1, [sl, r3]
 100d2ae:	f011 0107 	ands.w	r1, r1, #7
 100d2b2:	d012      	beq.n	100d2da <nrf_802154_enh_ack_generator_create+0x35a>
    uint8_t * p_ack_ie = (uint8_t *)p_ack_data->p_frame + p_ack_data->helper.aux_sec_hdr_end_offset;
 100d2b4:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 100d2b8:	f894 b015 	ldrb.w	fp, [r4, #21]
    memcpy(p_buffer, &value, sizeof(uint16_t));
 100d2bc:	2202      	movs	r2, #2
 100d2be:	a904      	add	r1, sp, #16
 100d2c0:	a803      	add	r0, sp, #12
 100d2c2:	f8ad 3010 	strh.w	r3, [sp, #16]
 100d2c6:	f005 fb99 	bl	10129fc <memcpy>
    memcpy(p_ack_ie + ie_data_len, ie_hdr_term, sizeof(ie_hdr_term));
 100d2ca:	eb09 000b 	add.w	r0, r9, fp
 100d2ce:	a903      	add	r1, sp, #12
 100d2d0:	2202      	movs	r2, #2
 100d2d2:	4450      	add	r0, sl
 100d2d4:	f005 fb92 	bl	10129fc <memcpy>
    return sizeof(ie_hdr_term);
 100d2d8:	2102      	movs	r1, #2
    m_ack[PHR_OFFSET] += *p_bytes_written + FCS_SIZE;
 100d2da:	f898 3000 	ldrb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d2de:	2206      	movs	r2, #6
    m_ack[PHR_OFFSET] += *p_bytes_written + FCS_SIZE;
 100d2e0:	4419      	add	r1, r3
 100d2e2:	b2c9      	uxtb	r1, r1
 100d2e4:	1c8b      	adds	r3, r1, #2
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d2e6:	3103      	adds	r1, #3
 100d2e8:	b2c9      	uxtb	r1, r1
 100d2ea:	483d      	ldr	r0, [pc, #244]	; (100d3e0 <nrf_802154_enh_ack_generator_create+0x460>)
    m_ack[PHR_OFFSET] += *p_bytes_written + FCS_SIZE;
 100d2ec:	f888 3000 	strb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
 100d2f0:	f006 f9dc 	bl	10136ac <nrf_802154_frame_parser_valid_data_extend>
}
 100d2f4:	e6bf      	b.n	100d076 <nrf_802154_enh_ack_generator_create+0xf6>
    return p_parser_data->mhr.aux_sec_hdr.key_id_offset;
 100d2f6:	7b2b      	ldrb	r3, [r5, #12]
 100d2f8:	7b22      	ldrb	r2, [r4, #12]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d2fa:	2bff      	cmp	r3, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100d2fc:	bf14      	ite	ne
 100d2fe:	18c9      	addne	r1, r1, r3
        return NULL;
 100d300:	2100      	moveq	r1, #0
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d302:	2aff      	cmp	r2, #255	; 0xff
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100d304:	7aa3      	ldrb	r3, [r4, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d306:	d127      	bne.n	100d358 <nrf_802154_enh_ack_generator_create+0x3d8>
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d308:	2bff      	cmp	r3, #255	; 0xff
 100d30a:	d02c      	beq.n	100d366 <nrf_802154_enh_ack_generator_create+0x3e6>
        return NULL;
 100d30c:	2000      	movs	r0, #0
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 100d30e:	6822      	ldr	r2, [r4, #0]
 100d310:	f812 8003 	ldrb.w	r8, [r2, r3]
 100d314:	f3c8 08c1 	ubfx	r8, r8, #3, #2
 100d318:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 100d31c:	2b02      	cmp	r3, #2
 100d31e:	d81f      	bhi.n	100d360 <nrf_802154_enh_ack_generator_create+0x3e0>
 100d320:	ea4f 0888 	mov.w	r8, r8, lsl #2
 100d324:	f1a8 0803 	sub.w	r8, r8, #3
 100d328:	fa5f f888 	uxtb.w	r8, r8
    if ((p_ack_key_id != NULL) && (p_frame_key_id != NULL))
 100d32c:	b118      	cbz	r0, 100d336 <nrf_802154_enh_ack_generator_create+0x3b6>
 100d32e:	b111      	cbz	r1, 100d336 <nrf_802154_enh_ack_generator_create+0x3b6>
        memcpy(p_ack_key_id, p_frame_key_id, key_id_size);
 100d330:	4642      	mov	r2, r8
 100d332:	f005 fb63 	bl	10129fc <memcpy>
    return p_parser_data->mhr.aux_sec_hdr.frame_counter_offset;
 100d336:	f894 900b 	ldrb.w	r9, [r4, #11]
        bytes_written           += security_key_id_set(p_frame_data, p_ack_data);
 100d33a:	f108 0801 	add.w	r8, r8, #1
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d33e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 100d342:	fa5f f888 	uxtb.w	r8, r8
 100d346:	d003      	beq.n	100d350 <nrf_802154_enh_ack_generator_create+0x3d0>
    return &p_parser_data->p_frame[offset];
 100d348:	6823      	ldr	r3, [r4, #0]
    if (p_frame_counter == NULL)
 100d34a:	eb13 0909 	adds.w	r9, r3, r9
 100d34e:	d10d      	bne.n	100d36c <nrf_802154_enh_ack_generator_create+0x3ec>
    bytes_written   += nrf_802154_frame_parser_mic_size_get(p_ack_data);
 100d350:	7de3      	ldrb	r3, [r4, #23]
 100d352:	4443      	add	r3, r8
 100d354:	b2d9      	uxtb	r1, r3
    return security_header_prepared;
 100d356:	e76d      	b.n	100d234 <nrf_802154_enh_ack_generator_create+0x2b4>
    return &p_parser_data->p_frame[offset];
 100d358:	6820      	ldr	r0, [r4, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d35a:	2bff      	cmp	r3, #255	; 0xff
    return &p_parser_data->p_frame[offset];
 100d35c:	4410      	add	r0, r2
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d35e:	d1d6      	bne.n	100d30e <nrf_802154_enh_ack_generator_create+0x38e>
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 100d360:	f04f 0800 	mov.w	r8, #0
 100d364:	e7e2      	b.n	100d32c <nrf_802154_enh_ack_generator_create+0x3ac>
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d366:	f04f 0800 	mov.w	r8, #0
 100d36a:	e7e4      	b.n	100d336 <nrf_802154_enh_ack_generator_create+0x3b6>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100d36c:	7aa2      	ldrb	r2, [r4, #10]
        nrf_802154_security_pib_frame_counter_get_next(&new_fc_value, &ack_key_id))
 100d36e:	a904      	add	r1, sp, #16
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d370:	2aff      	cmp	r2, #255	; 0xff
        return 0;
 100d372:	bf0c      	ite	eq
 100d374:	2200      	moveq	r2, #0
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 100d376:	5c9a      	ldrbne	r2, [r3, r2]
 100d378:	a802      	add	r0, sp, #8
 100d37a:	bf18      	it	ne
 100d37c:	f3c2 02c1 	ubfxne	r2, r2, #3, #2
    ack_key_id.mode     = nrf_802154_frame_parser_sec_ctrl_key_id_mode_get(p_ack_data);
 100d380:	f88d 2010 	strb.w	r2, [sp, #16]
    return p_parser_data->mhr.aux_sec_hdr.key_id_offset;
 100d384:	7b22      	ldrb	r2, [r4, #12]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d386:	2aff      	cmp	r2, #255	; 0xff
        return NULL;
 100d388:	bf0c      	ite	eq
 100d38a:	2300      	moveq	r3, #0
    return &p_parser_data->p_frame[offset];
 100d38c:	189b      	addne	r3, r3, r2
    ack_key_id.p_key_id = (uint8_t *)nrf_802154_frame_parser_key_id_get(p_ack_data);
 100d38e:	9305      	str	r3, [sp, #20]
        nrf_802154_security_pib_frame_counter_get_next(&new_fc_value, &ack_key_id))
 100d390:	f7ff fac0 	bl	100c914 <nrf_802154_security_pib_frame_counter_get_next>
    if (NRF_802154_SECURITY_ERROR_NONE !=
 100d394:	b9f0      	cbnz	r0, 100d3d4 <nrf_802154_enh_ack_generator_create+0x454>
    host_32_to_little(new_fc_value, p_frame_counter);
 100d396:	9b02      	ldr	r3, [sp, #8]
    memcpy(p_buffer, &value, sizeof(uint32_t));
 100d398:	a903      	add	r1, sp, #12
 100d39a:	2204      	movs	r2, #4
 100d39c:	4648      	mov	r0, r9
 100d39e:	9303      	str	r3, [sp, #12]
 100d3a0:	f005 fb2c 	bl	10129fc <memcpy>
    bytes_written   += nrf_802154_frame_parser_mic_size_get(p_ack_data);
 100d3a4:	7de3      	ldrb	r3, [r4, #23]
 100d3a6:	3304      	adds	r3, #4
 100d3a8:	eb08 0103 	add.w	r1, r8, r3
 100d3ac:	b2c9      	uxtb	r1, r1
    return security_header_prepared;
 100d3ae:	e741      	b.n	100d234 <nrf_802154_enh_ack_generator_create+0x2b4>
 100d3b0:	4641      	mov	r1, r8
 100d3b2:	e73f      	b.n	100d234 <nrf_802154_enh_ack_generator_create+0x2b4>
        return 0U;
 100d3b4:	2100      	movs	r1, #0
 100d3b6:	e790      	b.n	100d2da <nrf_802154_enh_ack_generator_create+0x35a>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 100d3b8:	7aa3      	ldrb	r3, [r4, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 100d3ba:	2bff      	cmp	r3, #255	; 0xff
 100d3bc:	f43f ae67 	beq.w	100d08e <nrf_802154_enh_ack_generator_create+0x10e>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 100d3c0:	5cd3      	ldrb	r3, [r2, r3]
    if (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_ack_data) == SECURITY_LEVEL_NONE)
 100d3c2:	075b      	lsls	r3, r3, #29
 100d3c4:	f43f ae63 	beq.w	100d08e <nrf_802154_enh_ack_generator_create+0x10e>
    return nrf_802154_encrypt_ack_prepare(p_ack_data);
 100d3c8:	4805      	ldr	r0, [pc, #20]	; (100d3e0 <nrf_802154_enh_ack_generator_create+0x460>)
 100d3ca:	f005 ffd0 	bl	101336e <nrf_802154_encrypt_ack_prepare>
        if (encryption_process())
 100d3ce:	2800      	cmp	r0, #0
 100d3d0:	f47f ae5d 	bne.w	100d08e <nrf_802154_enh_ack_generator_create+0x10e>
                ack_state_set(p_ack ? ACK_STATE_COMPLETE : ACK_STATE_INVALID);
 100d3d4:	2000      	movs	r0, #0
 100d3d6:	2301      	movs	r3, #1
 100d3d8:	e65b      	b.n	100d092 <nrf_802154_enh_ack_generator_create+0x112>
    switch (ack_state_get())
 100d3da:	4802      	ldr	r0, [pc, #8]	; (100d3e4 <nrf_802154_enh_ack_generator_create+0x464>)
 100d3dc:	e5e3      	b.n	100cfa6 <nrf_802154_enh_ack_generator_create+0x26>
 100d3de:	bf00      	nop
 100d3e0:	21003744 	.word	0x21003744
 100d3e4:	2100449f 	.word	0x2100449f
 100d3e8:	21003740 	.word	0x21003740
 100d3ec:	2100449e 	.word	0x2100449e

0100d3f0 <nrf_802154_imm_ack_generator_init>:
#define IMM_ACK_INITIALIZER {IMM_ACK_LENGTH, ACK_HEADER_WITH_PENDING, 0x00, 0x00, 0x00, 0x00}

static uint8_t m_ack_data[IMM_ACK_LENGTH + PHR_SIZE];

void nrf_802154_imm_ack_generator_init(void)
{
 100d3f0:	b507      	push	{r0, r1, r2, lr}
    const uint8_t ack_data[] = IMM_ACK_INITIALIZER;
 100d3f2:	4b07      	ldr	r3, [pc, #28]	; (100d410 <nrf_802154_imm_ack_generator_init+0x20>)

    memcpy(m_ack_data, ack_data, sizeof(ack_data));
 100d3f4:	2206      	movs	r2, #6
    const uint8_t ack_data[] = IMM_ACK_INITIALIZER;
 100d3f6:	6818      	ldr	r0, [r3, #0]
 100d3f8:	889b      	ldrh	r3, [r3, #4]
 100d3fa:	9000      	str	r0, [sp, #0]
    memcpy(m_ack_data, ack_data, sizeof(ack_data));
 100d3fc:	4669      	mov	r1, sp
 100d3fe:	4805      	ldr	r0, [pc, #20]	; (100d414 <nrf_802154_imm_ack_generator_init+0x24>)
    const uint8_t ack_data[] = IMM_ACK_INITIALIZER;
 100d400:	f8ad 3004 	strh.w	r3, [sp, #4]
    memcpy(m_ack_data, ack_data, sizeof(ack_data));
 100d404:	f005 fafa 	bl	10129fc <memcpy>
}
 100d408:	b003      	add	sp, #12
 100d40a:	f85d fb04 	ldr.w	pc, [sp], #4
 100d40e:	bf00      	nop
 100d410:	010157d6 	.word	0x010157d6
 100d414:	21004520 	.word	0x21004520

0100d418 <nrf_802154_imm_ack_generator_create>:
    // Intentionally empty
}

uint8_t * nrf_802154_imm_ack_generator_create(
    const nrf_802154_frame_parser_data_t * p_frame_data)
{
 100d418:	b510      	push	{r4, lr}
    if (nrf_802154_frame_parser_parse_level_get(p_frame_data) < PARSE_LEVEL_FULL)
 100d41a:	7902      	ldrb	r2, [r0, #4]
 100d41c:	2a05      	cmp	r2, #5
 100d41e:	d90f      	bls.n	100d440 <nrf_802154_imm_ack_generator_create+0x28>
    {
        // The entire frame being acknowledged is necessary to correctly generate Ack
        return NULL;
    }

    const uint8_t * frame_dsn = nrf_802154_frame_parser_dsn_get(p_frame_data);
 100d420:	6803      	ldr	r3, [r0, #0]
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
 100d422:	789a      	ldrb	r2, [r3, #2]
    if (nrf_802154_frame_parser_dsn_suppress_bit_is_set(p_parser_data))
 100d424:	07d2      	lsls	r2, r2, #31
 100d426:	d40b      	bmi.n	100d440 <nrf_802154_imm_ack_generator_create+0x28>
    {
        return NULL;
    }

    // Set valid sequence number in ACK frame.
    m_ack_data[DSN_OFFSET] = *frame_dsn;
 100d428:	78db      	ldrb	r3, [r3, #3]
 100d42a:	4c06      	ldr	r4, [pc, #24]	; (100d444 <nrf_802154_imm_ack_generator_create+0x2c>)
 100d42c:	70e3      	strb	r3, [r4, #3]

    // Set pending bit in ACK frame.
    if (nrf_802154_ack_data_pending_bit_should_be_set(p_frame_data))
 100d42e:	f7ff fd0d 	bl	100ce4c <nrf_802154_ack_data_pending_bit_should_be_set>
 100d432:	2800      	cmp	r0, #0
 100d434:	bf0c      	ite	eq
 100d436:	2302      	moveq	r3, #2
 100d438:	2312      	movne	r3, #18
    else
    {
        m_ack_data[FRAME_PENDING_OFFSET] = ACK_HEADER_WITHOUT_PENDING;
    }

    return m_ack_data;
 100d43a:	4620      	mov	r0, r4
        m_ack_data[FRAME_PENDING_OFFSET] = ACK_HEADER_WITHOUT_PENDING;
 100d43c:	7063      	strb	r3, [r4, #1]
}
 100d43e:	bd10      	pop	{r4, pc}
        return NULL;
 100d440:	2000      	movs	r0, #0
 100d442:	e7fc      	b.n	100d43e <nrf_802154_imm_ack_generator_create+0x26>
 100d444:	21004520 	.word	0x21004520

0100d448 <ntf_push>:
/** @brief Push notification to the queue.
 *
 * @param[in]  slot_id  Identifier of the pool and a slot within.
 */
static void ntf_push(uint8_t slot_id)
{
 100d448:	b570      	push	{r4, r5, r6, lr}
 100d44a:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100d44c:	f3ef 8310 	mrs	r3, PRIMASK
    nrf_802154_mcu_critical_enter(m_mcu_cs);
 100d450:	4d08      	ldr	r5, [pc, #32]	; (100d474 <ntf_push+0x2c>)
 100d452:	602b      	str	r3, [r5, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 100d454:	b672      	cpsid	i
    return nrf_802154_queue_push_begin(&m_notifications_queue);
 100d456:	4e08      	ldr	r6, [pc, #32]	; (100d478 <ntf_push+0x30>)
 100d458:	4630      	mov	r0, r6
 100d45a:	f005 ffe4 	bl	1013426 <nrf_802154_queue_push_begin>
    nrf_802154_queue_entry_t * p_entry = ntf_enter();

    p_entry->id = slot_id;
 100d45e:	7004      	strb	r4, [r0, #0]
    nrf_802154_queue_push_commit(&m_notifications_queue);
 100d460:	4630      	mov	r0, r6
 100d462:	f005 ffe6 	bl	1013432 <nrf_802154_queue_push_commit>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_task)) = 0x1UL;
 100d466:	2201      	movs	r2, #1
 100d468:	4b04      	ldr	r3, [pc, #16]	; (100d47c <ntf_push+0x34>)
 100d46a:	601a      	str	r2, [r3, #0]
    nrf_802154_mcu_critical_exit(m_mcu_cs);
 100d46c:	682b      	ldr	r3, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100d46e:	f383 8810 	msr	PRIMASK, r3
    ntf_exit();
}
 100d472:	bd70      	pop	{r4, r5, r6, pc}
 100d474:	2100375c 	.word	0x2100375c
 100d478:	21003760 	.word	0x21003760
 100d47c:	41014000 	.word	0x41014000

0100d480 <swi_notify_received>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_received(uint8_t * p_data, int8_t power, uint8_t lqi)
{
 100d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d482:	4c0d      	ldr	r4, [pc, #52]	; (100d4b8 <swi_notify_received+0x38>)
{
 100d484:	4607      	mov	r7, r0
 100d486:	460e      	mov	r6, r1
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d488:	4620      	mov	r0, r4
 100d48a:	2115      	movs	r1, #21
{
 100d48c:	4615      	mov	r5, r2
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d48e:	f006 f978 	bl	1013782 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
 100d492:	28ff      	cmp	r0, #255	; 0xff
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d494:	4603      	mov	r3, r0
    if (slot_id == NTF_INVALID_SLOT_ID)
 100d496:	f04f 0000 	mov.w	r0, #0
 100d49a:	d00c      	beq.n	100d4b6 <swi_notify_received+0x36>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                 = NTF_TYPE_RECEIVED;
 100d49c:	2228      	movs	r2, #40	; 0x28
 100d49e:	fb02 4403 	mla	r4, r2, r3, r4
 100d4a2:	7060      	strb	r0, [r4, #1]
    p_slot->data.received.p_data = p_data;
    p_slot->data.received.power  = power;
    p_slot->data.received.lqi    = lqi;

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d4a4:	f063 007f 	orn	r0, r3, #127	; 0x7f
 100d4a8:	b2c0      	uxtb	r0, r0
    p_slot->data.received.p_data = p_data;
 100d4aa:	60a7      	str	r7, [r4, #8]
    p_slot->data.received.power  = power;
 100d4ac:	7326      	strb	r6, [r4, #12]
    p_slot->data.received.lqi    = lqi;
 100d4ae:	7365      	strb	r5, [r4, #13]
    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d4b0:	f7ff ffca 	bl	100d448 <ntf_push>

    return true;
 100d4b4:	2001      	movs	r0, #1
}
 100d4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100d4b8:	210013a8 	.word	0x210013a8

0100d4bc <swi_notify_receive_failed>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_receive_failed(nrf_802154_rx_error_t error, uint32_t id, bool allow_drop)
{
 100d4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!allow_drop)
    {
        // Choose the primary pool for DRX-related errors
        p_pool          = m_primary_ntf_pool;
        pool_len        = NTF_PRIMARY_POOL_SIZE;
        pool_id_bitmask = NTF_PRIMARY_POOL_ID_MASK;
 100d4be:	4b10      	ldr	r3, [pc, #64]	; (100d500 <swi_notify_receive_failed+0x44>)
 100d4c0:	2a00      	cmp	r2, #0
 100d4c2:	4c10      	ldr	r4, [pc, #64]	; (100d504 <swi_notify_receive_failed+0x48>)
 100d4c4:	bf18      	it	ne
 100d4c6:	461c      	movne	r4, r3
{
 100d4c8:	460d      	mov	r5, r1
 100d4ca:	4606      	mov	r6, r0
        p_pool          = m_secondary_ntf_pool;
        pool_len        = NTF_SECONDARY_POOL_SIZE;
        pool_id_bitmask = NTF_SECONDARY_POOL_ID_MASK;
    }

    uint8_t slot_id = ntf_slot_alloc(p_pool, pool_len);
 100d4cc:	bf14      	ite	ne
 100d4ce:	2104      	movne	r1, #4
 100d4d0:	2115      	moveq	r1, #21
 100d4d2:	4620      	mov	r0, r4
        pool_id_bitmask = NTF_PRIMARY_POOL_ID_MASK;
 100d4d4:	bf14      	ite	ne
 100d4d6:	2700      	movne	r7, #0
 100d4d8:	2780      	moveq	r7, #128	; 0x80
    uint8_t slot_id = ntf_slot_alloc(p_pool, pool_len);
 100d4da:	f006 f952 	bl	1013782 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
 100d4de:	28ff      	cmp	r0, #255	; 0xff
 100d4e0:	d00c      	beq.n	100d4fc <swi_notify_receive_failed+0x40>
    {
        // No slots are available.
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &p_pool[slot_id];
 100d4e2:	2328      	movs	r3, #40	; 0x28
 100d4e4:	fb03 4300 	mla	r3, r3, r0, r4

    p_slot->type                      = NTF_TYPE_RECEIVE_FAILED;
 100d4e8:	2401      	movs	r4, #1
    p_slot->data.receive_failed.error = error;
    p_slot->data.receive_failed.id    = id;

    ntf_push(slot_id | pool_id_bitmask);
 100d4ea:	4338      	orrs	r0, r7
 100d4ec:	b2c0      	uxtb	r0, r0
    p_slot->type                      = NTF_TYPE_RECEIVE_FAILED;
 100d4ee:	705c      	strb	r4, [r3, #1]
    p_slot->data.receive_failed.error = error;
 100d4f0:	721e      	strb	r6, [r3, #8]
    p_slot->data.receive_failed.id    = id;
 100d4f2:	60dd      	str	r5, [r3, #12]
    ntf_push(slot_id | pool_id_bitmask);
 100d4f4:	f7ff ffa8 	bl	100d448 <ntf_push>

    return true;
 100d4f8:	4620      	mov	r0, r4
}
 100d4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
 100d4fc:	2000      	movs	r0, #0
 100d4fe:	e7fc      	b.n	100d4fa <swi_notify_receive_failed+0x3e>
 100d500:	21001308 	.word	0x21001308
 100d504:	210013a8 	.word	0x210013a8

0100d508 <swi_notify_transmitted>:
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_transmitted(uint8_t                             * p_frame,
                            nrf_802154_transmit_done_metadata_t * p_metadata)
{
 100d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d50a:	4c10      	ldr	r4, [pc, #64]	; (100d54c <swi_notify_transmitted+0x44>)
{
 100d50c:	4607      	mov	r7, r0
 100d50e:	460d      	mov	r5, r1
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d510:	4620      	mov	r0, r4
 100d512:	2115      	movs	r1, #21
 100d514:	f006 f935 	bl	1013782 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
 100d518:	28ff      	cmp	r0, #255	; 0xff
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d51a:	4606      	mov	r6, r0
    if (slot_id == NTF_INVALID_SLOT_ID)
 100d51c:	d013      	beq.n	100d546 <swi_notify_transmitted+0x3e>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                      = NTF_TYPE_TRANSMITTED;
 100d51e:	2328      	movs	r3, #40	; 0x28
 100d520:	fb03 4400 	mla	r4, r3, r0, r4
 100d524:	2302      	movs	r3, #2
    p_slot->data.transmitted.p_frame  = p_frame;
 100d526:	60a7      	str	r7, [r4, #8]
    p_slot->type                      = NTF_TYPE_TRANSMITTED;
 100d528:	7063      	strb	r3, [r4, #1]
    p_slot->data.transmitted.metadata = *p_metadata;
 100d52a:	3410      	adds	r4, #16
 100d52c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 100d52e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 100d530:	e895 0003 	ldmia.w	r5, {r0, r1}
 100d534:	e884 0003 	stmia.w	r4, {r0, r1}

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d538:	f066 007f 	orn	r0, r6, #127	; 0x7f
 100d53c:	b2c0      	uxtb	r0, r0
 100d53e:	f7ff ff83 	bl	100d448 <ntf_push>

    return true;
 100d542:	2001      	movs	r0, #1
}
 100d544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
 100d546:	2000      	movs	r0, #0
 100d548:	e7fc      	b.n	100d544 <swi_notify_transmitted+0x3c>
 100d54a:	bf00      	nop
 100d54c:	210013a8 	.word	0x210013a8

0100d550 <swi_notify_transmit_failed>:
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_transmit_failed(uint8_t                                   * p_frame,
                                nrf_802154_tx_error_t                       error,
                                const nrf_802154_transmit_done_metadata_t * p_metadata)
{
 100d550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d554:	4c11      	ldr	r4, [pc, #68]	; (100d59c <swi_notify_transmit_failed+0x4c>)
{
 100d556:	4680      	mov	r8, r0
 100d558:	460f      	mov	r7, r1
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d55a:	4620      	mov	r0, r4
 100d55c:	2115      	movs	r1, #21
{
 100d55e:	4615      	mov	r5, r2
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d560:	f006 f90f 	bl	1013782 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
 100d564:	28ff      	cmp	r0, #255	; 0xff
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d566:	4606      	mov	r6, r0
    if (slot_id == NTF_INVALID_SLOT_ID)
 100d568:	d016      	beq.n	100d598 <swi_notify_transmit_failed+0x48>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                          = NTF_TYPE_TRANSMIT_FAILED;
 100d56a:	2328      	movs	r3, #40	; 0x28
 100d56c:	fb03 4400 	mla	r4, r3, r0, r4
 100d570:	2303      	movs	r3, #3
    p_slot->data.transmit_failed.p_frame  = p_frame;
 100d572:	f8c4 8008 	str.w	r8, [r4, #8]
    p_slot->type                          = NTF_TYPE_TRANSMIT_FAILED;
 100d576:	7063      	strb	r3, [r4, #1]
    p_slot->data.transmit_failed.error    = error;
 100d578:	7327      	strb	r7, [r4, #12]
    p_slot->data.transmit_failed.metadata = *p_metadata;
 100d57a:	3410      	adds	r4, #16
 100d57c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 100d57e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 100d580:	e895 0003 	ldmia.w	r5, {r0, r1}
 100d584:	e884 0003 	stmia.w	r4, {r0, r1}

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d588:	f066 007f 	orn	r0, r6, #127	; 0x7f
 100d58c:	b2c0      	uxtb	r0, r0
 100d58e:	f7ff ff5b 	bl	100d448 <ntf_push>

    return true;
 100d592:	2001      	movs	r0, #1
}
 100d594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
 100d598:	2000      	movs	r0, #0
 100d59a:	e7fb      	b.n	100d594 <swi_notify_transmit_failed+0x44>
 100d59c:	210013a8 	.word	0x210013a8

0100d5a0 <swi_notify_energy_detected>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_energy_detected(uint8_t result)
{
 100d5a0:	b538      	push	{r3, r4, r5, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d5a2:	4c0b      	ldr	r4, [pc, #44]	; (100d5d0 <swi_notify_energy_detected+0x30>)
{
 100d5a4:	4605      	mov	r5, r0
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d5a6:	2115      	movs	r1, #21
 100d5a8:	4620      	mov	r0, r4
 100d5aa:	f006 f8ea 	bl	1013782 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
 100d5ae:	28ff      	cmp	r0, #255	; 0xff
 100d5b0:	d00c      	beq.n	100d5cc <swi_notify_energy_detected+0x2c>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                        = NTF_TYPE_ENERGY_DETECTED;
 100d5b2:	2328      	movs	r3, #40	; 0x28
 100d5b4:	fb03 4400 	mla	r4, r3, r0, r4
 100d5b8:	2304      	movs	r3, #4
    p_slot->data.energy_detected.result = result;

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d5ba:	f060 007f 	orn	r0, r0, #127	; 0x7f
 100d5be:	b2c0      	uxtb	r0, r0
    p_slot->type                        = NTF_TYPE_ENERGY_DETECTED;
 100d5c0:	7063      	strb	r3, [r4, #1]
    p_slot->data.energy_detected.result = result;
 100d5c2:	7225      	strb	r5, [r4, #8]
    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d5c4:	f7ff ff40 	bl	100d448 <ntf_push>

    return true;
 100d5c8:	2001      	movs	r0, #1
}
 100d5ca:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 100d5cc:	2000      	movs	r0, #0
 100d5ce:	e7fc      	b.n	100d5ca <swi_notify_energy_detected+0x2a>
 100d5d0:	210013a8 	.word	0x210013a8

0100d5d4 <swi_notify_energy_detection_failed>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_energy_detection_failed(nrf_802154_ed_error_t error)
{
 100d5d4:	b538      	push	{r3, r4, r5, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d5d6:	4c0b      	ldr	r4, [pc, #44]	; (100d604 <swi_notify_energy_detection_failed+0x30>)
{
 100d5d8:	4605      	mov	r5, r0
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d5da:	2115      	movs	r1, #21
 100d5dc:	4620      	mov	r0, r4
 100d5de:	f006 f8d0 	bl	1013782 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
 100d5e2:	28ff      	cmp	r0, #255	; 0xff
 100d5e4:	d00c      	beq.n	100d600 <swi_notify_energy_detection_failed+0x2c>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                               = NTF_TYPE_ENERGY_DETECTION_FAILED;
 100d5e6:	2328      	movs	r3, #40	; 0x28
 100d5e8:	fb03 4400 	mla	r4, r3, r0, r4
 100d5ec:	2305      	movs	r3, #5
    p_slot->data.energy_detection_failed.error = error;

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d5ee:	f060 007f 	orn	r0, r0, #127	; 0x7f
 100d5f2:	b2c0      	uxtb	r0, r0
    p_slot->type                               = NTF_TYPE_ENERGY_DETECTION_FAILED;
 100d5f4:	7063      	strb	r3, [r4, #1]
    p_slot->data.energy_detection_failed.error = error;
 100d5f6:	7225      	strb	r5, [r4, #8]
    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d5f8:	f7ff ff26 	bl	100d448 <ntf_push>

    return true;
 100d5fc:	2001      	movs	r0, #1
}
 100d5fe:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 100d600:	2000      	movs	r0, #0
 100d602:	e7fc      	b.n	100d5fe <swi_notify_energy_detection_failed+0x2a>
 100d604:	210013a8 	.word	0x210013a8

0100d608 <swi_notify_cca>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_cca(bool channel_free)
{
 100d608:	b538      	push	{r3, r4, r5, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d60a:	4c0b      	ldr	r4, [pc, #44]	; (100d638 <swi_notify_cca+0x30>)
{
 100d60c:	4605      	mov	r5, r0
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d60e:	2115      	movs	r1, #21
 100d610:	4620      	mov	r0, r4
 100d612:	f006 f8b6 	bl	1013782 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
 100d616:	28ff      	cmp	r0, #255	; 0xff
 100d618:	d00c      	beq.n	100d634 <swi_notify_cca+0x2c>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type            = NTF_TYPE_CCA;
 100d61a:	2328      	movs	r3, #40	; 0x28
 100d61c:	fb03 4400 	mla	r4, r3, r0, r4
 100d620:	2306      	movs	r3, #6
    p_slot->data.cca.result = channel_free;

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d622:	f060 007f 	orn	r0, r0, #127	; 0x7f
 100d626:	b2c0      	uxtb	r0, r0
    p_slot->type            = NTF_TYPE_CCA;
 100d628:	7063      	strb	r3, [r4, #1]
    p_slot->data.cca.result = channel_free;
 100d62a:	7225      	strb	r5, [r4, #8]
    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d62c:	f7ff ff0c 	bl	100d448 <ntf_push>

    return true;
 100d630:	2001      	movs	r0, #1
}
 100d632:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 100d634:	2000      	movs	r0, #0
 100d636:	e7fc      	b.n	100d632 <swi_notify_cca+0x2a>
 100d638:	210013a8 	.word	0x210013a8

0100d63c <swi_notify_cca_failed>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_cca_failed(nrf_802154_cca_error_t error)
{
 100d63c:	b538      	push	{r3, r4, r5, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d63e:	4c0b      	ldr	r4, [pc, #44]	; (100d66c <swi_notify_cca_failed+0x30>)
{
 100d640:	4605      	mov	r5, r0
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
 100d642:	2115      	movs	r1, #21
 100d644:	4620      	mov	r0, r4
 100d646:	f006 f89c 	bl	1013782 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
 100d64a:	28ff      	cmp	r0, #255	; 0xff
 100d64c:	d00c      	beq.n	100d668 <swi_notify_cca_failed+0x2c>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                  = NTF_TYPE_CCA_FAILED;
 100d64e:	2328      	movs	r3, #40	; 0x28
 100d650:	fb03 4400 	mla	r4, r3, r0, r4
 100d654:	2307      	movs	r3, #7
    p_slot->data.cca_failed.error = error;

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d656:	f060 007f 	orn	r0, r0, #127	; 0x7f
 100d65a:	b2c0      	uxtb	r0, r0
    p_slot->type                  = NTF_TYPE_CCA_FAILED;
 100d65c:	7063      	strb	r3, [r4, #1]
    p_slot->data.cca_failed.error = error;
 100d65e:	7225      	strb	r5, [r4, #8]
    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
 100d660:	f7ff fef2 	bl	100d448 <ntf_push>

    return true;
 100d664:	2001      	movs	r0, #1
}
 100d666:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 100d668:	2000      	movs	r0, #0
 100d66a:	e7fc      	b.n	100d666 <swi_notify_cca_failed+0x2a>
 100d66c:	210013a8 	.word	0x210013a8

0100d670 <nrf_802154_notification_init>:

void nrf_802154_notification_init(void)
{
 100d670:	b508      	push	{r3, lr}
    nrf_802154_queue_init(&m_notifications_queue,
 100d672:	221a      	movs	r2, #26
 100d674:	2301      	movs	r3, #1
 100d676:	4906      	ldr	r1, [pc, #24]	; (100d690 <nrf_802154_notification_init+0x20>)
 100d678:	4806      	ldr	r0, [pc, #24]	; (100d694 <nrf_802154_notification_init+0x24>)
 100d67a:	f005 fecb 	bl	1013414 <nrf_802154_queue_init>
    p_reg->INTENSET = mask;
 100d67e:	2201      	movs	r2, #1
 100d680:	4b05      	ldr	r3, [pc, #20]	; (100d698 <nrf_802154_notification_init+0x28>)
 100d682:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                          sizeof(m_notifications_queue_memory[0]));

    nrf_egu_int_enable(NRF_802154_EGU_INSTANCE, NTF_INT);

    nrf_802154_swi_init();
}
 100d686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_swi_init();
 100d68a:	f7fc be6b 	b.w	100a364 <nrf_802154_swi_init>
 100d68e:	bf00      	nop
 100d690:	21004526 	.word	0x21004526
 100d694:	21003760 	.word	0x21003760
 100d698:	41014000 	.word	0x41014000

0100d69c <nrf_802154_notification_swi_irq_handler>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

void nrf_802154_notification_swi_irq_handler(void)
{
 100d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
 100d69e:	4b2c      	ldr	r3, [pc, #176]	; (100d750 <nrf_802154_notification_swi_irq_handler+0xb4>)
 100d6a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_egu_event_check(NRF_802154_EGU_INSTANCE, NTF_EVENT))
 100d6a4:	b15a      	cbz	r2, 100d6be <nrf_802154_notification_swi_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 100d6a6:	2200      	movs	r2, #0
 100d6a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 100d6ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 * @retval true             When the queue is empty
 * @retval false            When the queue is not empty.
 */
static inline bool nrf_802154_queue_is_empty(const nrf_802154_queue_t * p_queue)
{
    return (p_queue->wridx == p_queue->rdidx);
 100d6b0:	4d28      	ldr	r5, [pc, #160]	; (100d754 <nrf_802154_notification_swi_irq_handler+0xb8>)
            (p_entry->id & NTF_POOL_ID_MASK) ? &m_primary_ntf_pool[slot_id] :
 100d6b2:	4e29      	ldr	r6, [pc, #164]	; (100d758 <nrf_802154_notification_swi_irq_handler+0xbc>)
 100d6b4:	4f29      	ldr	r7, [pc, #164]	; (100d75c <nrf_802154_notification_swi_irq_handler+0xc0>)
 100d6b6:	79aa      	ldrb	r2, [r5, #6]
 100d6b8:	79eb      	ldrb	r3, [r5, #7]
    while (!nrf_802154_queue_is_empty(&m_notifications_queue))
 100d6ba:	429a      	cmp	r2, r3
 100d6bc:	d100      	bne.n	100d6c0 <nrf_802154_notification_swi_irq_handler+0x24>
    {
        nrf_egu_event_clear(NRF_802154_EGU_INSTANCE, NTF_EVENT);

        irq_handler_ntf_event();
    }
}
 100d6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            (nrf_802154_queue_entry_t *)nrf_802154_queue_pop_begin(&m_notifications_queue);
 100d6c0:	4628      	mov	r0, r5
 100d6c2:	f005 febf 	bl	1013444 <nrf_802154_queue_pop_begin>
        uint8_t slot_id = p_entry->id & (~NTF_POOL_ID_MASK);
 100d6c6:	7803      	ldrb	r3, [r0, #0]
 100d6c8:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            (p_entry->id & NTF_POOL_ID_MASK) ? &m_primary_ntf_pool[slot_id] :
 100d6cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 100d6d0:	f04f 0328 	mov.w	r3, #40	; 0x28
 100d6d4:	bf14      	ite	ne
 100d6d6:	fb03 7404 	mlane	r4, r3, r4, r7
 100d6da:	fb03 6404 	mlaeq	r4, r3, r4, r6
        switch (p_slot->type)
 100d6de:	7863      	ldrb	r3, [r4, #1]
 100d6e0:	2b07      	cmp	r3, #7
 100d6e2:	d80b      	bhi.n	100d6fc <nrf_802154_notification_swi_irq_handler+0x60>
 100d6e4:	e8df f003 	tbb	[pc, r3]
 100d6e8:	1d171204 	.word	0x1d171204
 100d6ec:	302c2824 	.word	0x302c2824
                nrf_802154_received_raw(p_slot->data.received.p_data,
 100d6f0:	7b62      	ldrb	r2, [r4, #13]
 100d6f2:	f994 100c 	ldrsb.w	r1, [r4, #12]
 100d6f6:	68a0      	ldr	r0, [r4, #8]
 100d6f8:	f7fa ff66 	bl	10085c8 <nrf_802154_received_raw>
        nrf_802154_queue_pop_commit(&m_notifications_queue);
 100d6fc:	4628      	mov	r0, r5
 100d6fe:	f005 fea7 	bl	1013450 <nrf_802154_queue_pop_commit>
  __ASM volatile ("dmb 0xF":::"memory");
 100d702:	f3bf 8f5f 	dmb	sy
    p_slot->taken = false;
 100d706:	2300      	movs	r3, #0
 100d708:	7023      	strb	r3, [r4, #0]
}
 100d70a:	e7d4      	b.n	100d6b6 <nrf_802154_notification_swi_irq_handler+0x1a>
                nrf_802154_receive_failed(p_slot->data.receive_failed.error,
 100d70c:	68e1      	ldr	r1, [r4, #12]
 100d70e:	7a20      	ldrb	r0, [r4, #8]
 100d710:	f000 fdf2 	bl	100e2f8 <nrf_802154_receive_failed>
                break;
 100d714:	e7f2      	b.n	100d6fc <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_transmitted_raw(p_slot->data.transmitted.p_frame,
 100d716:	68a0      	ldr	r0, [r4, #8]
 100d718:	f104 0110 	add.w	r1, r4, #16
 100d71c:	f000 fe08 	bl	100e330 <nrf_802154_transmitted_raw>
            break;
 100d720:	e7ec      	b.n	100d6fc <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_transmit_failed(p_slot->data.transmit_failed.p_frame,
 100d722:	7b21      	ldrb	r1, [r4, #12]
 100d724:	68a0      	ldr	r0, [r4, #8]
 100d726:	f104 0210 	add.w	r2, r4, #16
 100d72a:	f000 fe5d 	bl	100e3e8 <nrf_802154_transmit_failed>
                break;
 100d72e:	e7e5      	b.n	100d6fc <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_energy_detected(p_slot->data.energy_detected.result);
 100d730:	7a20      	ldrb	r0, [r4, #8]
 100d732:	f000 fd77 	bl	100e224 <nrf_802154_energy_detected>
                break;
 100d736:	e7e1      	b.n	100d6fc <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_energy_detection_failed(
 100d738:	7a20      	ldrb	r0, [r4, #8]
 100d73a:	f000 fd87 	bl	100e24c <nrf_802154_energy_detection_failed>
                break;
 100d73e:	e7dd      	b.n	100d6fc <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_cca_done(p_slot->data.cca.result);
 100d740:	7a20      	ldrb	r0, [r4, #8]
 100d742:	f000 fd47 	bl	100e1d4 <nrf_802154_cca_done>
                break;
 100d746:	e7d9      	b.n	100d6fc <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_cca_failed(p_slot->data.cca_failed.error);
 100d748:	7a20      	ldrb	r0, [r4, #8]
 100d74a:	f000 fd57 	bl	100e1fc <nrf_802154_cca_failed>
                break;
 100d74e:	e7d5      	b.n	100d6fc <nrf_802154_notification_swi_irq_handler+0x60>
 100d750:	41014000 	.word	0x41014000
 100d754:	21003760 	.word	0x21003760
 100d758:	21001308 	.word	0x21001308
 100d75c:	210013a8 	.word	0x210013a8

0100d760 <req_enter>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100d760:	f3ef 8210 	mrs	r2, PRIMASK
 *
 * @return Pointer to an empty slot in the request queue.
 */
static nrf_802154_req_data_t * req_enter(void)
{
    nrf_802154_mcu_critical_enter(m_mcu_cs);
 100d764:	4b02      	ldr	r3, [pc, #8]	; (100d770 <req_enter+0x10>)
 100d766:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 100d768:	b672      	cpsid	i

    assert(!nrf_802154_queue_is_full(&m_requests_queue));

    return (nrf_802154_req_data_t *)nrf_802154_queue_push_begin(&m_requests_queue);
 100d76a:	4802      	ldr	r0, [pc, #8]	; (100d774 <req_enter+0x14>)
 100d76c:	f005 be5b 	b.w	1013426 <nrf_802154_queue_push_begin>
 100d770:	21003768 	.word	0x21003768
 100d774:	2100376c 	.word	0x2100376c

0100d778 <req_exit>:
 *
 * This is a helper function used in all request functions to end atomic slot update
 * and trigger SWI to process the request from the slot.
 */
static void req_exit(void)
{
 100d778:	b508      	push	{r3, lr}
    nrf_802154_queue_push_commit(&m_requests_queue);
 100d77a:	4805      	ldr	r0, [pc, #20]	; (100d790 <req_exit+0x18>)
 100d77c:	f005 fe59 	bl	1013432 <nrf_802154_queue_push_commit>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_task)) = 0x1UL;
 100d780:	2201      	movs	r2, #1
 100d782:	4b04      	ldr	r3, [pc, #16]	; (100d794 <req_exit+0x1c>)
 100d784:	609a      	str	r2, [r3, #8]

    nrf_egu_task_trigger(NRF_802154_EGU_INSTANCE, REQ_TASK);

    nrf_802154_mcu_critical_exit(m_mcu_cs);
 100d786:	4b04      	ldr	r3, [pc, #16]	; (100d798 <req_exit+0x20>)
 100d788:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 100d78a:	f383 8810 	msr	PRIMASK, r3
}
 100d78e:	bd08      	pop	{r3, pc}
 100d790:	2100376c 	.word	0x2100376c
 100d794:	41014000 	.word	0x41014000
 100d798:	21003768 	.word	0x21003768

0100d79c <nrf_802154_request_init>:
    p_slot->data.csma_ca_start.p_result   = p_result;
    req_exit();
}

void nrf_802154_request_init(void)
{
 100d79c:	b508      	push	{r3, lr}
    nrf_802154_queue_init(&m_requests_queue,
 100d79e:	2240      	movs	r2, #64	; 0x40
 100d7a0:	2320      	movs	r3, #32
 100d7a2:	4906      	ldr	r1, [pc, #24]	; (100d7bc <nrf_802154_request_init+0x20>)
 100d7a4:	4806      	ldr	r0, [pc, #24]	; (100d7c0 <nrf_802154_request_init+0x24>)
 100d7a6:	f005 fe35 	bl	1013414 <nrf_802154_queue_init>
    p_reg->INTENSET = mask;
 100d7aa:	2204      	movs	r2, #4
 100d7ac:	4b05      	ldr	r3, [pc, #20]	; (100d7c4 <nrf_802154_request_init+0x28>)
 100d7ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                          sizeof(m_requests_queue_memory[0]));

    nrf_egu_int_enable(NRF_802154_EGU_INSTANCE, REQ_INT);

    nrf_802154_swi_init();
}
 100d7b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_swi_init();
 100d7b6:	f7fc bdd5 	b.w	100a364 <nrf_802154_swi_init>
 100d7ba:	bf00      	nop
 100d7bc:	210016f0 	.word	0x210016f0
 100d7c0:	2100376c 	.word	0x2100376c
 100d7c4:	41014000 	.word	0x41014000

0100d7c8 <nrf_802154_request_swi_irq_handler>:
        nrf_802154_queue_pop_commit(&m_requests_queue);
    }
}

void nrf_802154_request_swi_irq_handler(void)
{
 100d7c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
 100d7ca:	4b49      	ldr	r3, [pc, #292]	; (100d8f0 <nrf_802154_request_swi_irq_handler+0x128>)
 100d7cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    if (nrf_egu_event_check(NRF_802154_EGU_INSTANCE, REQ_EVENT))
 100d7d0:	b14a      	cbz	r2, 100d7e6 <nrf_802154_request_swi_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
 100d7d2:	2200      	movs	r2, #0
 100d7d4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 100d7d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 100d7dc:	4d45      	ldr	r5, [pc, #276]	; (100d8f4 <nrf_802154_request_swi_irq_handler+0x12c>)
 100d7de:	79aa      	ldrb	r2, [r5, #6]
 100d7e0:	79eb      	ldrb	r3, [r5, #7]
    while (!nrf_802154_queue_is_empty(&m_requests_queue))
 100d7e2:	429a      	cmp	r2, r3
 100d7e4:	d101      	bne.n	100d7ea <nrf_802154_request_swi_irq_handler+0x22>
    {
        nrf_egu_event_clear(NRF_802154_EGU_INSTANCE, REQ_EVENT);

        irq_handler_req_event();
    }
}
 100d7e6:	b002      	add	sp, #8
 100d7e8:	bd70      	pop	{r4, r5, r6, pc}
            (nrf_802154_req_data_t *)nrf_802154_queue_pop_begin(&m_requests_queue);
 100d7ea:	4628      	mov	r0, r5
 100d7ec:	f005 fe2a 	bl	1013444 <nrf_802154_queue_pop_begin>
        switch (p_slot->type)
 100d7f0:	7803      	ldrb	r3, [r0, #0]
            (nrf_802154_req_data_t *)nrf_802154_queue_pop_begin(&m_requests_queue);
 100d7f2:	4604      	mov	r4, r0
        switch (p_slot->type)
 100d7f4:	2b11      	cmp	r3, #17
 100d7f6:	d848      	bhi.n	100d88a <nrf_802154_request_swi_irq_handler+0xc2>
 100d7f8:	e8df f003 	tbb	[pc, r3]
 100d7fc:	23190f09 	.word	0x23190f09
 100d800:	39332e29 	.word	0x39332e29
 100d804:	4f4b433e 	.word	0x4f4b433e
 100d808:	65615854 	.word	0x65615854
 100d80c:	746f      	.short	0x746f
                *(p_slot->data.sleep.p_result) =
 100d80e:	68c6      	ldr	r6, [r0, #12]
                    nrf_802154_core_sleep(p_slot->data.sleep.term_lvl);
 100d810:	7a00      	ldrb	r0, [r0, #8]
 100d812:	f7fc f98b 	bl	1009b2c <nrf_802154_core_sleep>
                *(p_slot->data.receive_at_cancel.p_result) =
 100d816:	7030      	strb	r0, [r6, #0]
                break;
 100d818:	e037      	b.n	100d88a <nrf_802154_request_swi_irq_handler+0xc2>
                    nrf_802154_core_receive(p_slot->data.receive.term_lvl,
 100d81a:	6922      	ldr	r2, [r4, #16]
                *(p_slot->data.receive.p_result) =
 100d81c:	6946      	ldr	r6, [r0, #20]
                    nrf_802154_core_receive(p_slot->data.receive.term_lvl,
 100d81e:	7b83      	ldrb	r3, [r0, #14]
 100d820:	7b41      	ldrb	r1, [r0, #13]
 100d822:	7b00      	ldrb	r0, [r0, #12]
 100d824:	9200      	str	r2, [sp, #0]
 100d826:	68a2      	ldr	r2, [r4, #8]
 100d828:	f7fc f9ac 	bl	1009b84 <nrf_802154_core_receive>
 100d82c:	e7f3      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_core_transmit(p_slot->data.transmit.term_lvl,
 100d82e:	68a3      	ldr	r3, [r4, #8]
                *(p_slot->data.transmit.p_result) =
 100d830:	6986      	ldr	r6, [r0, #24]
                    nrf_802154_core_transmit(p_slot->data.transmit.term_lvl,
 100d832:	7b41      	ldrb	r1, [r0, #13]
 100d834:	7b00      	ldrb	r0, [r0, #12]
 100d836:	9300      	str	r3, [sp, #0]
 100d838:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 100d83c:	f7fc f9e2 	bl	1009c04 <nrf_802154_core_transmit>
 100d840:	e7e9      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_core_energy_detection(
 100d842:	e9d0 6103 	ldrd	r6, r1, [r0, #12]
 100d846:	7a00      	ldrb	r0, [r0, #8]
 100d848:	f7fc fa56 	bl	1009cf8 <nrf_802154_core_energy_detection>
 100d84c:	e7e3      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.cca.p_result) = nrf_802154_core_cca(p_slot->data.cca.term_lvl);
 100d84e:	68c6      	ldr	r6, [r0, #12]
 100d850:	7a00      	ldrb	r0, [r0, #8]
 100d852:	f005 fc74 	bl	101313e <nrf_802154_core_cca>
 100d856:	e7de      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.continuous_carrier.p_result) =
 100d858:	68c6      	ldr	r6, [r0, #12]
                    nrf_802154_core_continuous_carrier(
 100d85a:	7a00      	ldrb	r0, [r0, #8]
 100d85c:	f005 fc85 	bl	101316a <nrf_802154_core_continuous_carrier>
 100d860:	e7d9      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_core_modulated_carrier(p_slot->data.modulated_carrier.term_lvl,
 100d862:	e9d0 1603 	ldrd	r1, r6, [r0, #12]
 100d866:	7a00      	ldrb	r0, [r0, #8]
 100d868:	f7fc fa6a 	bl	1009d40 <nrf_802154_core_modulated_carrier>
 100d86c:	e7d3      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_core_notify_buffer_free(p_slot->data.buffer_free.p_data);
 100d86e:	e9d0 0602 	ldrd	r0, r6, [r0, #8]
 100d872:	f7fc fa81 	bl	1009d78 <nrf_802154_core_notify_buffer_free>
 100d876:	e7ce      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.channel_update.p_result) =
 100d878:	68c6      	ldr	r6, [r0, #12]
                    nrf_802154_core_channel_update(p_slot->data.channel_update.req_orig);
 100d87a:	7a00      	ldrb	r0, [r0, #8]
 100d87c:	f7fc fa98 	bl	1009db0 <nrf_802154_core_channel_update>
 100d880:	e7c9      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.cca_cfg_update.p_result) = nrf_802154_core_cca_cfg_update();
 100d882:	6884      	ldr	r4, [r0, #8]
 100d884:	f7fc fac6 	bl	1009e14 <nrf_802154_core_cca_cfg_update>
                *(p_slot->data.transmit_at_cancel.p_result) =
 100d888:	7020      	strb	r0, [r4, #0]
        nrf_802154_queue_pop_commit(&m_requests_queue);
 100d88a:	4628      	mov	r0, r5
 100d88c:	f005 fde0 	bl	1013450 <nrf_802154_queue_pop_commit>
 100d890:	e7a5      	b.n	100d7de <nrf_802154_request_swi_irq_handler+0x16>
                *(p_slot->data.rssi_measure.p_result) = nrf_802154_core_rssi_measure();
 100d892:	6884      	ldr	r4, [r0, #8]
 100d894:	f7fc face 	bl	1009e34 <nrf_802154_core_rssi_measure>
 100d898:	e7f6      	b.n	100d888 <nrf_802154_request_swi_irq_handler+0xc0>
                    nrf_802154_core_last_rssi_measurement_get(p_slot->data.rssi_get.p_rssi);
 100d89a:	e9d0 0602 	ldrd	r0, r6, [r0, #8]
 100d89e:	f7fc fae5 	bl	1009e6c <nrf_802154_core_last_rssi_measurement_get>
 100d8a2:	e7b8      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.antenna_update.p_result) = nrf_802154_core_antenna_update();
 100d8a4:	6884      	ldr	r4, [r0, #8]
 100d8a6:	f7fc fb0f 	bl	1009ec8 <nrf_802154_core_antenna_update>
 100d8aa:	e7ed      	b.n	100d888 <nrf_802154_request_swi_irq_handler+0xc0>
                    nrf_802154_delayed_trx_transmit(p_slot->data.transmit_at.p_data,
 100d8ac:	e9d0 3606 	ldrd	r3, r6, [r0, #24]
 100d8b0:	9300      	str	r3, [sp, #0]
 100d8b2:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 100d8b6:	6880      	ldr	r0, [r0, #8]
 100d8b8:	f7fe f9a6 	bl	100bc08 <nrf_802154_delayed_trx_transmit>
 100d8bc:	e7ab      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.transmit_at_cancel.p_result) =
 100d8be:	6884      	ldr	r4, [r0, #8]
                    nrf_802154_delayed_trx_transmit_cancel();
 100d8c0:	f7fe fa40 	bl	100bd44 <nrf_802154_delayed_trx_transmit_cancel>
 100d8c4:	e7e0      	b.n	100d888 <nrf_802154_request_swi_irq_handler+0xc0>
                    nrf_802154_delayed_trx_receive(p_slot->data.receive_at.rx_time,
 100d8c6:	6982      	ldr	r2, [r0, #24]
                *(p_slot->data.receive_at.p_result) =
 100d8c8:	69c6      	ldr	r6, [r0, #28]
                    nrf_802154_delayed_trx_receive(p_slot->data.receive_at.rx_time,
 100d8ca:	7d03      	ldrb	r3, [r0, #20]
 100d8cc:	9200      	str	r2, [sp, #0]
 100d8ce:	6902      	ldr	r2, [r0, #16]
 100d8d0:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 100d8d4:	f7fe f9f2 	bl	100bcbc <nrf_802154_delayed_trx_receive>
 100d8d8:	e79d      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_delayed_trx_receive_cancel(p_slot->data.receive_at_cancel.id);
 100d8da:	e9d0 0602 	ldrd	r0, r6, [r0, #8]
 100d8de:	f7fe fa45 	bl	100bd6c <nrf_802154_delayed_trx_receive_cancel>
 100d8e2:	e798      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_csma_ca_start(p_slot->data.csma_ca_start.p_data,
 100d8e4:	68c6      	ldr	r6, [r0, #12]
 100d8e6:	6880      	ldr	r0, [r0, #8]
 100d8e8:	4631      	mov	r1, r6
 100d8ea:	f7fd ffcb 	bl	100b884 <nrf_802154_csma_ca_start>
 100d8ee:	e792      	b.n	100d816 <nrf_802154_request_swi_irq_handler+0x4e>
 100d8f0:	41014000 	.word	0x41014000
 100d8f4:	2100376c 	.word	0x2100376c

0100d8f8 <spinel_datatype_vunpack_>:
static spinel_ssize_t spinel_datatype_vunpack_(bool           in_place,
                                               const uint8_t *data_in,
                                               spinel_size_t  data_len,
                                               const char *   pack_format,
                                               va_list_obj *  args)
{
 100d8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    spinel_ssize_t ret = 0;

    // Buffer length sanity check
    require_action(data_len <= SPINEL_MAX_PACK_LENGTH, bail, (ret = -1, errno = EINVAL));
 100d8fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
{
 100d900:	b087      	sub	sp, #28
 100d902:	4681      	mov	r9, r0
 100d904:	460c      	mov	r4, r1
 100d906:	4615      	mov	r5, r2
 100d908:	4698      	mov	r8, r3
 100d90a:	9e10      	ldr	r6, [sp, #64]	; 0x40
    require_action(data_len <= SPINEL_MAX_PACK_LENGTH, bail, (ret = -1, errno = EINVAL));
 100d90c:	f0c0 822c 	bcc.w	100dd68 <spinel_datatype_vunpack_+0x470>
 100d910:	f006 f95b 	bl	1013bca <z_errno>
 100d914:	2316      	movs	r3, #22
            {
                block_len = (uint16_t)data_len;
                pui_len   = 0;
            }

            require_action((spinel_ssize_t)data_len >= (block_len + pui_len), bail, (ret = -1, errno = EOVERFLOW));
 100d916:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

            actual_len = spinel_datatype_vunpack_(false, block_ptr, block_len, pack_format + 2, args);

            require_action(actual_len > -1, bail, (ret = -1, errno = EOVERFLOW));
 100d91a:	6003      	str	r3, [r0, #0]
 100d91c:	e1af      	b.n	100dc7e <spinel_datatype_vunpack_+0x386>
        switch ((spinel_datatype_t)pack_format[0])
 100d91e:	3a53      	subs	r2, #83	; 0x53
 100d920:	2a25      	cmp	r2, #37	; 0x25
 100d922:	d8f5      	bhi.n	100d910 <spinel_datatype_vunpack_+0x18>
 100d924:	a301      	add	r3, pc, #4	; (adr r3, 100d92c <spinel_datatype_vunpack_+0x34>)
 100d926:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 100d92a:	bf00      	nop
 100d92c:	0100da8f 	.word	0x0100da8f
 100d930:	0100dce7 	.word	0x0100dce7
 100d934:	0100db81 	.word	0x0100db81
 100d938:	0100d911 	.word	0x0100d911
 100d93c:	0100d911 	.word	0x0100d911
 100d940:	0100dac7 	.word	0x0100dac7
 100d944:	0100d911 	.word	0x0100d911
 100d948:	0100d911 	.word	0x0100d911
 100d94c:	0100d911 	.word	0x0100d911
 100d950:	0100d911 	.word	0x0100d911
 100d954:	0100d911 	.word	0x0100d911
 100d958:	0100d911 	.word	0x0100d911
 100d95c:	0100d911 	.word	0x0100d911
 100d960:	0100d911 	.word	0x0100d911
 100d964:	0100d911 	.word	0x0100d911
 100d968:	0100d9f9 	.word	0x0100d9f9
 100d96c:	0100da79 	.word	0x0100da79
 100d970:	0100dc2d 	.word	0x0100dc2d
 100d974:	0100db1b 	.word	0x0100db1b
 100d978:	0100d911 	.word	0x0100d911
 100d97c:	0100d911 	.word	0x0100d911
 100d980:	0100d911 	.word	0x0100d911
 100d984:	0100db4b 	.word	0x0100db4b
 100d988:	0100d911 	.word	0x0100d911
 100d98c:	0100d911 	.word	0x0100d911
 100d990:	0100daab 	.word	0x0100daab
 100d994:	0100d911 	.word	0x0100d911
 100d998:	0100d911 	.word	0x0100d911
 100d99c:	0100d911 	.word	0x0100d911
 100d9a0:	0100d911 	.word	0x0100d911
 100d9a4:	0100d911 	.word	0x0100d911
 100d9a8:	0100d911 	.word	0x0100d911
 100d9ac:	0100da8f 	.word	0x0100da8f
 100d9b0:	0100dce7 	.word	0x0100dce7
 100d9b4:	0100d911 	.word	0x0100d911
 100d9b8:	0100d911 	.word	0x0100d911
 100d9bc:	0100d911 	.word	0x0100d911
 100d9c0:	0100dac7 	.word	0x0100dac7
 100d9c4:	3a43      	subs	r2, #67	; 0x43
 100d9c6:	2a09      	cmp	r2, #9
 100d9c8:	d8a2      	bhi.n	100d910 <spinel_datatype_vunpack_+0x18>
 100d9ca:	a301      	add	r3, pc, #4	; (adr r3, 100d9d0 <spinel_datatype_vunpack_+0xd8>)
 100d9cc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 100d9d0:	0100da79 	.word	0x0100da79
 100d9d4:	0100dc2d 	.word	0x0100dc2d
 100d9d8:	0100daf1 	.word	0x0100daf1
 100d9dc:	0100d911 	.word	0x0100d911
 100d9e0:	0100d911 	.word	0x0100d911
 100d9e4:	0100d911 	.word	0x0100d911
 100d9e8:	0100d911 	.word	0x0100d911
 100d9ec:	0100d911 	.word	0x0100d911
 100d9f0:	0100d911 	.word	0x0100d911
 100d9f4:	0100daab 	.word	0x0100daab
            bool *arg_ptr = va_arg(args->obj, bool *);
 100d9f8:	6833      	ldr	r3, [r6, #0]
 100d9fa:	1d1a      	adds	r2, r3, #4
 100d9fc:	6032      	str	r2, [r6, #0]
 100d9fe:	681a      	ldr	r2, [r3, #0]
            require_action(data_len >= sizeof(uint8_t), bail, (ret = -1, errno = EOVERFLOW));
 100da00:	b91d      	cbnz	r5, 100da0a <spinel_datatype_vunpack_+0x112>
            require_action(actual_len > -1, bail, (ret = -1, errno = EOVERFLOW));
 100da02:	f006 f8e2 	bl	1013bca <z_errno>
 100da06:	238b      	movs	r3, #139	; 0x8b
 100da08:	e785      	b.n	100d916 <spinel_datatype_vunpack_+0x1e>
            if (arg_ptr)
 100da0a:	b122      	cbz	r2, 100da16 <spinel_datatype_vunpack_+0x11e>
                *arg_ptr = data_in[0] != 0;
 100da0c:	7823      	ldrb	r3, [r4, #0]
 100da0e:	3b00      	subs	r3, #0
 100da10:	bf18      	it	ne
 100da12:	2301      	movne	r3, #1
 100da14:	7013      	strb	r3, [r2, #0]
            ret += sizeof(uint8_t);
 100da16:	3701      	adds	r7, #1
            data_in += sizeof(uint8_t);
 100da18:	3401      	adds	r4, #1
            data_len -= sizeof(uint8_t);
 100da1a:	3d01      	subs	r5, #1
    for (; *pack_format != 0; pack_format = spinel_next_packed_datatype(pack_format))
 100da1c:	4640      	mov	r0, r8
 100da1e:	f006 f918 	bl	1013c52 <spinel_next_packed_datatype>
 100da22:	4680      	mov	r8, r0
 100da24:	f898 2000 	ldrb.w	r2, [r8]
 100da28:	2a00      	cmp	r2, #0
 100da2a:	f000 8128 	beq.w	100dc7e <spinel_datatype_vunpack_+0x386>
        if (*pack_format == ')')
 100da2e:	2a29      	cmp	r2, #41	; 0x29
 100da30:	f000 8125 	beq.w	100dc7e <spinel_datatype_vunpack_+0x386>
        switch ((spinel_datatype_t)pack_format[0])
 100da34:	2a78      	cmp	r2, #120	; 0x78
 100da36:	f63f af6b 	bhi.w	100d910 <spinel_datatype_vunpack_+0x18>
 100da3a:	2a52      	cmp	r2, #82	; 0x52
 100da3c:	f63f af6f 	bhi.w	100d91e <spinel_datatype_vunpack_+0x26>
 100da40:	2a4c      	cmp	r2, #76	; 0x4c
 100da42:	f63f af65 	bhi.w	100d910 <spinel_datatype_vunpack_+0x18>
 100da46:	2a42      	cmp	r2, #66	; 0x42
 100da48:	d8bc      	bhi.n	100d9c4 <spinel_datatype_vunpack_+0xcc>
 100da4a:	2a2e      	cmp	r2, #46	; 0x2e
 100da4c:	d0e6      	beq.n	100da1c <spinel_datatype_vunpack_+0x124>
 100da4e:	2a36      	cmp	r2, #54	; 0x36
 100da50:	f47f af5e 	bne.w	100d910 <spinel_datatype_vunpack_+0x18>
            require_action(data_len >= sizeof(spinel_ipv6addr_t), bail, (ret = -1, errno = EOVERFLOW));
 100da54:	2d0f      	cmp	r5, #15
 100da56:	d9d4      	bls.n	100da02 <spinel_datatype_vunpack_+0x10a>
            bool *arg_ptr = va_arg(args->obj, bool *);
 100da58:	6833      	ldr	r3, [r6, #0]
                spinel_ipv6addr_t *arg = va_arg(args->obj, spinel_ipv6addr_t *);
 100da5a:	1d1a      	adds	r2, r3, #4
 100da5c:	6032      	str	r2, [r6, #0]
            if (in_place)
 100da5e:	f1b9 0f00 	cmp.w	r9, #0
 100da62:	d040      	beq.n	100dae6 <spinel_datatype_vunpack_+0x1ee>
                spinel_ipv6addr_t *arg = va_arg(args->obj, spinel_ipv6addr_t *);
 100da64:	6818      	ldr	r0, [r3, #0]
                if (arg)
 100da66:	b118      	cbz	r0, 100da70 <spinel_datatype_vunpack_+0x178>
                    memcpy(arg, data_in, sizeof(spinel_ipv6addr_t));
 100da68:	2210      	movs	r2, #16
 100da6a:	4621      	mov	r1, r4
 100da6c:	f004 ffc6 	bl	10129fc <memcpy>
            ret += sizeof(spinel_ipv6addr_t);
 100da70:	3710      	adds	r7, #16
            data_in += sizeof(spinel_ipv6addr_t);
 100da72:	3410      	adds	r4, #16
            data_len -= sizeof(spinel_ipv6addr_t);
 100da74:	3d10      	subs	r5, #16
            break;
 100da76:	e7d1      	b.n	100da1c <spinel_datatype_vunpack_+0x124>
            uint8_t *arg_ptr = va_arg(args->obj, uint8_t *);
 100da78:	6833      	ldr	r3, [r6, #0]
 100da7a:	1d1a      	adds	r2, r3, #4
 100da7c:	6032      	str	r2, [r6, #0]
 100da7e:	681b      	ldr	r3, [r3, #0]
            require_action(data_len >= sizeof(uint8_t), bail, (ret = -1, errno = EOVERFLOW));
 100da80:	2d00      	cmp	r5, #0
 100da82:	d0be      	beq.n	100da02 <spinel_datatype_vunpack_+0x10a>
            if (arg_ptr)
 100da84:	2b00      	cmp	r3, #0
 100da86:	d0c6      	beq.n	100da16 <spinel_datatype_vunpack_+0x11e>
                *arg_ptr = data_in[0];
 100da88:	7822      	ldrb	r2, [r4, #0]
 100da8a:	701a      	strb	r2, [r3, #0]
 100da8c:	e7c3      	b.n	100da16 <spinel_datatype_vunpack_+0x11e>
            uint16_t *arg_ptr = va_arg(args->obj, uint16_t *);
 100da8e:	6833      	ldr	r3, [r6, #0]
            require_action(data_len >= sizeof(uint16_t), bail, (ret = -1, errno = EOVERFLOW));
 100da90:	2d01      	cmp	r5, #1
            uint16_t *arg_ptr = va_arg(args->obj, uint16_t *);
 100da92:	f103 0204 	add.w	r2, r3, #4
 100da96:	6032      	str	r2, [r6, #0]
 100da98:	681b      	ldr	r3, [r3, #0]
            require_action(data_len >= sizeof(uint16_t), bail, (ret = -1, errno = EOVERFLOW));
 100da9a:	d9b2      	bls.n	100da02 <spinel_datatype_vunpack_+0x10a>
            if (arg_ptr)
 100da9c:	b10b      	cbz	r3, 100daa2 <spinel_datatype_vunpack_+0x1aa>
                *arg_ptr = (uint16_t)((data_in[1] << 8) | data_in[0]);
 100da9e:	8822      	ldrh	r2, [r4, #0]
 100daa0:	801a      	strh	r2, [r3, #0]
            ret += sizeof(uint16_t);
 100daa2:	3702      	adds	r7, #2
            data_in += sizeof(uint16_t);
 100daa4:	3402      	adds	r4, #2
            data_len -= sizeof(uint16_t);
 100daa6:	3d02      	subs	r5, #2
            break;
 100daa8:	e7b8      	b.n	100da1c <spinel_datatype_vunpack_+0x124>
            uint32_t *arg_ptr = va_arg(args->obj, uint32_t *);
 100daaa:	6833      	ldr	r3, [r6, #0]
            require_action(data_len >= sizeof(uint32_t), bail, (ret = -1, errno = EOVERFLOW));
 100daac:	2d03      	cmp	r5, #3
            uint32_t *arg_ptr = va_arg(args->obj, uint32_t *);
 100daae:	f103 0204 	add.w	r2, r3, #4
 100dab2:	6032      	str	r2, [r6, #0]
 100dab4:	681b      	ldr	r3, [r3, #0]
            require_action(data_len >= sizeof(uint32_t), bail, (ret = -1, errno = EOVERFLOW));
 100dab6:	d9a4      	bls.n	100da02 <spinel_datatype_vunpack_+0x10a>
            if (arg_ptr)
 100dab8:	b10b      	cbz	r3, 100dabe <spinel_datatype_vunpack_+0x1c6>
                *arg_ptr = (uint32_t)((data_in[3] << 24) | (data_in[2] << 16) | (data_in[1] << 8) | data_in[0]);
 100daba:	6822      	ldr	r2, [r4, #0]
 100dabc:	601a      	str	r2, [r3, #0]
            ret += sizeof(uint32_t);
 100dabe:	3704      	adds	r7, #4
            data_in += sizeof(uint32_t);
 100dac0:	3404      	adds	r4, #4
            data_len -= sizeof(uint32_t);
 100dac2:	3d04      	subs	r5, #4
            break;
 100dac4:	e7aa      	b.n	100da1c <spinel_datatype_vunpack_+0x124>
            uint64_t *arg_ptr = va_arg(args->obj, uint64_t *);
 100dac6:	6833      	ldr	r3, [r6, #0]
            require_action(data_len >= sizeof(uint64_t), bail, (ret = -1, errno = EOVERFLOW));
 100dac8:	2d07      	cmp	r5, #7
            uint64_t *arg_ptr = va_arg(args->obj, uint64_t *);
 100daca:	f103 0204 	add.w	r2, r3, #4
 100dace:	6032      	str	r2, [r6, #0]
 100dad0:	681b      	ldr	r3, [r3, #0]
            require_action(data_len >= sizeof(uint64_t), bail, (ret = -1, errno = EOVERFLOW));
 100dad2:	d996      	bls.n	100da02 <spinel_datatype_vunpack_+0x10a>
            if (arg_ptr)
 100dad4:	b11b      	cbz	r3, 100dade <spinel_datatype_vunpack_+0x1e6>
                *arg_ptr = ((uint64_t)l32) | (((uint64_t)h32) << 32);
 100dad6:	6821      	ldr	r1, [r4, #0]
 100dad8:	6862      	ldr	r2, [r4, #4]
 100dada:	e9c3 1200 	strd	r1, r2, [r3]
            ret += sizeof(spinel_eui64_t);
 100dade:	3708      	adds	r7, #8
            data_in += sizeof(spinel_eui64_t);
 100dae0:	3408      	adds	r4, #8
            data_len -= sizeof(spinel_eui64_t);
 100dae2:	3d08      	subs	r5, #8
            break;
 100dae4:	e79a      	b.n	100da1c <spinel_datatype_vunpack_+0x124>
                const spinel_ipv6addr_t **arg_ptr = va_arg(args->obj, const spinel_ipv6addr_t **);
 100dae6:	681b      	ldr	r3, [r3, #0]
                if (arg_ptr)
 100dae8:	2b00      	cmp	r3, #0
 100daea:	d0c1      	beq.n	100da70 <spinel_datatype_vunpack_+0x178>
                    *arg_ptr = (const spinel_ipv6addr_t *)data_in;
 100daec:	601c      	str	r4, [r3, #0]
 100daee:	e7bf      	b.n	100da70 <spinel_datatype_vunpack_+0x178>
            require_action(data_len >= sizeof(spinel_eui64_t), bail, (ret = -1, errno = EOVERFLOW));
 100daf0:	2d07      	cmp	r5, #7
 100daf2:	d986      	bls.n	100da02 <spinel_datatype_vunpack_+0x10a>
            bool *arg_ptr = va_arg(args->obj, bool *);
 100daf4:	6833      	ldr	r3, [r6, #0]
                spinel_eui64_t *arg = va_arg(args->obj, spinel_eui64_t *);
 100daf6:	1d1a      	adds	r2, r3, #4
 100daf8:	6032      	str	r2, [r6, #0]
            if (in_place)
 100dafa:	f1b9 0f00 	cmp.w	r9, #0
 100dafe:	d007      	beq.n	100db10 <spinel_datatype_vunpack_+0x218>
                spinel_eui64_t *arg = va_arg(args->obj, spinel_eui64_t *);
 100db00:	6818      	ldr	r0, [r3, #0]
                if (arg)
 100db02:	2800      	cmp	r0, #0
 100db04:	d0eb      	beq.n	100dade <spinel_datatype_vunpack_+0x1e6>
                    memcpy(arg, data_in, sizeof(spinel_eui64_t));
 100db06:	2208      	movs	r2, #8
 100db08:	4621      	mov	r1, r4
 100db0a:	f004 ff77 	bl	10129fc <memcpy>
 100db0e:	e7e6      	b.n	100dade <spinel_datatype_vunpack_+0x1e6>
                const spinel_eui64_t **arg_ptr = va_arg(args->obj, const spinel_eui64_t **);
 100db10:	681b      	ldr	r3, [r3, #0]
                if (arg_ptr)
 100db12:	2b00      	cmp	r3, #0
 100db14:	d0e3      	beq.n	100dade <spinel_datatype_vunpack_+0x1e6>
                    *arg_ptr = (const spinel_eui64_t *)data_in;
 100db16:	601c      	str	r4, [r3, #0]
 100db18:	e7e1      	b.n	100dade <spinel_datatype_vunpack_+0x1e6>
            require_action(data_len >= sizeof(spinel_eui48_t), bail, (ret = -1, errno = EOVERFLOW));
 100db1a:	2d05      	cmp	r5, #5
 100db1c:	f67f af71 	bls.w	100da02 <spinel_datatype_vunpack_+0x10a>
            bool *arg_ptr = va_arg(args->obj, bool *);
 100db20:	6833      	ldr	r3, [r6, #0]
                spinel_eui48_t *arg = va_arg(args->obj, spinel_eui48_t *);
 100db22:	1d1a      	adds	r2, r3, #4
 100db24:	6032      	str	r2, [r6, #0]
            if (in_place)
 100db26:	f1b9 0f00 	cmp.w	r9, #0
 100db2a:	d009      	beq.n	100db40 <spinel_datatype_vunpack_+0x248>
                spinel_eui48_t *arg = va_arg(args->obj, spinel_eui48_t *);
 100db2c:	6818      	ldr	r0, [r3, #0]
                if (arg)
 100db2e:	b118      	cbz	r0, 100db38 <spinel_datatype_vunpack_+0x240>
                    memcpy(arg, data_in, sizeof(spinel_eui48_t));
 100db30:	2206      	movs	r2, #6
 100db32:	4621      	mov	r1, r4
 100db34:	f004 ff62 	bl	10129fc <memcpy>
            ret += sizeof(spinel_eui48_t);
 100db38:	3706      	adds	r7, #6
            data_in += sizeof(spinel_eui48_t);
 100db3a:	3406      	adds	r4, #6
            data_len -= sizeof(spinel_eui48_t);
 100db3c:	3d06      	subs	r5, #6
            break;
 100db3e:	e76d      	b.n	100da1c <spinel_datatype_vunpack_+0x124>
                const spinel_eui48_t **arg_ptr = va_arg(args->obj, const spinel_eui48_t **);
 100db40:	681b      	ldr	r3, [r3, #0]
                if (arg_ptr)
 100db42:	2b00      	cmp	r3, #0
 100db44:	d0f8      	beq.n	100db38 <spinel_datatype_vunpack_+0x240>
                    *arg_ptr = (const spinel_eui48_t *)data_in;
 100db46:	601c      	str	r4, [r3, #0]
 100db48:	e7f6      	b.n	100db38 <spinel_datatype_vunpack_+0x240>
            unsigned int * arg_ptr = va_arg(args->obj, unsigned int *);
 100db4a:	6833      	ldr	r3, [r6, #0]
            spinel_ssize_t pui_len = spinel_packed_uint_decode(data_in, data_len, arg_ptr);
 100db4c:	4629      	mov	r1, r5
            unsigned int * arg_ptr = va_arg(args->obj, unsigned int *);
 100db4e:	1d1a      	adds	r2, r3, #4
 100db50:	6032      	str	r2, [r6, #0]
 100db52:	681a      	ldr	r2, [r3, #0]
            spinel_ssize_t pui_len = spinel_packed_uint_decode(data_in, data_len, arg_ptr);
 100db54:	4620      	mov	r0, r4
 100db56:	f006 f83a 	bl	1013bce <spinel_packed_uint_decode>
            require_action(NULL == arg_ptr || (*arg_ptr < SPINEL_MAX_UINT_PACKED), bail, (ret = -1, errno = ERANGE));
 100db5a:	b13a      	cbz	r2, 100db6c <spinel_datatype_vunpack_+0x274>
 100db5c:	6812      	ldr	r2, [r2, #0]
 100db5e:	4b83      	ldr	r3, [pc, #524]	; (100dd6c <spinel_datatype_vunpack_+0x474>)
 100db60:	429a      	cmp	r2, r3
 100db62:	d903      	bls.n	100db6c <spinel_datatype_vunpack_+0x274>
 100db64:	f006 f831 	bl	1013bca <z_errno>
 100db68:	2322      	movs	r3, #34	; 0x22
 100db6a:	e6d4      	b.n	100d916 <spinel_datatype_vunpack_+0x1e>
            require(pui_len > 0, bail);
 100db6c:	2800      	cmp	r0, #0
 100db6e:	f340 8086 	ble.w	100dc7e <spinel_datatype_vunpack_+0x386>
            require(pui_len <= (spinel_ssize_t)data_len, bail);
 100db72:	4285      	cmp	r5, r0
 100db74:	f2c0 8083 	blt.w	100dc7e <spinel_datatype_vunpack_+0x386>
            else
            {
                block_len = (uint16_t)actual_len;
            }

            ret += block_len;
 100db78:	4407      	add	r7, r0
            data_in += block_len;
 100db7a:	4404      	add	r4, r0
            data_len -= block_len;
 100db7c:	1a2d      	subs	r5, r5, r0
            break;
 100db7e:	e74d      	b.n	100da1c <spinel_datatype_vunpack_+0x124>
            require_action(data_len > 0, bail, (ret = -1, errno = EOVERFLOW));
 100db80:	2d00      	cmp	r5, #0
 100db82:	f43f af3e 	beq.w	100da02 <spinel_datatype_vunpack_+0x10a>
    for (ret = 0; (ret < maxlen) && (s[ret] != 0); ret++)
 100db86:	2300      	movs	r3, #0
 100db88:	5ce2      	ldrb	r2, [r4, r3]
 100db8a:	469a      	mov	sl, r3
 100db8c:	3301      	adds	r3, #1
 100db8e:	b932      	cbnz	r2, 100db9e <spinel_datatype_vunpack_+0x2a6>
            len = spinel_strnlen((const char *)data_in, data_len) + 1;
 100db90:	f10a 0a01 	add.w	sl, sl, #1
            require_action(len <= data_len, bail, (ret = -1, errno = EOVERFLOW));
 100db94:	4555      	cmp	r5, sl
 100db96:	f4ff af34 	bcc.w	100da02 <spinel_datatype_vunpack_+0x10a>
 100db9a:	4620      	mov	r0, r4
 100db9c:	e01d      	b.n	100dbda <spinel_datatype_vunpack_+0x2e2>
    for (ret = 0; (ret < maxlen) && (s[ret] != 0); ret++)
 100db9e:	429d      	cmp	r5, r3
 100dba0:	d1f2      	bne.n	100db88 <spinel_datatype_vunpack_+0x290>
 100dba2:	46aa      	mov	sl, r5
 100dba4:	e7f4      	b.n	100db90 <spinel_datatype_vunpack_+0x298>
        if ((byte & 0x80) == 0)
 100dba6:	0618      	lsls	r0, r3, #24
 100dba8:	d518      	bpl.n	100dbdc <spinel_datatype_vunpack_+0x2e4>
        if ((byte & 0x40) == 0) // 10xx-xxxx
 100dbaa:	0659      	lsls	r1, r3, #25
 100dbac:	f57f aeb0 	bpl.w	100d910 <spinel_datatype_vunpack_+0x18>
        else if ((byte & 0x20) == 0) // 110x-xxxx
 100dbb0:	0698      	lsls	r0, r3, #26
 100dbb2:	d529      	bpl.n	100dc08 <spinel_datatype_vunpack_+0x310>
        else if ((byte & 0x10) == 0) // 1110-xxxx
 100dbb4:	06d9      	lsls	r1, r3, #27
 100dbb6:	d529      	bpl.n	100dc0c <spinel_datatype_vunpack_+0x314>
        else if ((byte & 0x08) == 0) // 1111-0xxx
 100dbb8:	071b      	lsls	r3, r3, #28
 100dbba:	f53f aea9 	bmi.w	100d910 <spinel_datatype_vunpack_+0x18>
            continuation_bytes = 3;
 100dbbe:	2303      	movs	r3, #3
 100dbc0:	e004      	b.n	100dbcc <spinel_datatype_vunpack_+0x2d4>
            if ((byte & 0xc0) != 0x80)
 100dbc2:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 100dbc6:	2980      	cmp	r1, #128	; 0x80
 100dbc8:	f47f aea2 	bne.w	100d910 <spinel_datatype_vunpack_+0x18>
        while (continuation_bytes-- != 0)
 100dbcc:	3b01      	subs	r3, #1
 100dbce:	b2db      	uxtb	r3, r3
 100dbd0:	2bff      	cmp	r3, #255	; 0xff
 100dbd2:	4610      	mov	r0, r2
            byte = *string++;
 100dbd4:	f812 1b01 	ldrb.w	r1, [r2], #1
        while (continuation_bytes-- != 0)
 100dbd8:	d1f3      	bne.n	100dbc2 <spinel_datatype_vunpack_+0x2ca>
 100dbda:	4602      	mov	r2, r0
    while ((byte = *string++) != 0)
 100dbdc:	f812 3b01 	ldrb.w	r3, [r2], #1
 100dbe0:	2b00      	cmp	r3, #0
 100dbe2:	d1e0      	bne.n	100dba6 <spinel_datatype_vunpack_+0x2ae>
            bool *arg_ptr = va_arg(args->obj, bool *);
 100dbe4:	6833      	ldr	r3, [r6, #0]
                char * arg     = va_arg(args->obj, char *);
 100dbe6:	1d1a      	adds	r2, r3, #4
 100dbe8:	6032      	str	r2, [r6, #0]
            if (in_place)
 100dbea:	f1b9 0f00 	cmp.w	r9, #0
 100dbee:	d018      	beq.n	100dc22 <spinel_datatype_vunpack_+0x32a>
                char * arg     = va_arg(args->obj, char *);
 100dbf0:	461a      	mov	r2, r3
 100dbf2:	f852 0b08 	ldr.w	r0, [r2], #8
                size_t len_arg = va_arg(args->obj, size_t);
 100dbf6:	6032      	str	r2, [r6, #0]
 100dbf8:	685b      	ldr	r3, [r3, #4]
                if (arg)
 100dbfa:	b168      	cbz	r0, 100dc18 <spinel_datatype_vunpack_+0x320>
                    require_action(len_arg >= len, bail, (ret = -1, errno = ENOMEM));
 100dbfc:	459a      	cmp	sl, r3
 100dbfe:	d907      	bls.n	100dc10 <spinel_datatype_vunpack_+0x318>
 100dc00:	f005 ffe3 	bl	1013bca <z_errno>
 100dc04:	230c      	movs	r3, #12
 100dc06:	e686      	b.n	100d916 <spinel_datatype_vunpack_+0x1e>
            continuation_bytes = 1;
 100dc08:	2301      	movs	r3, #1
 100dc0a:	e7df      	b.n	100dbcc <spinel_datatype_vunpack_+0x2d4>
            continuation_bytes = 2;
 100dc0c:	2302      	movs	r3, #2
 100dc0e:	e7dd      	b.n	100dbcc <spinel_datatype_vunpack_+0x2d4>
                    memcpy(arg, data_in, len);
 100dc10:	4652      	mov	r2, sl
 100dc12:	4621      	mov	r1, r4
 100dc14:	f004 fef2 	bl	10129fc <memcpy>
            ret += (spinel_size_t)len;
 100dc18:	4457      	add	r7, sl
            data_in += len;
 100dc1a:	4454      	add	r4, sl
            data_len -= (spinel_size_t)len;
 100dc1c:	eba5 050a 	sub.w	r5, r5, sl
            break;
 100dc20:	e6fc      	b.n	100da1c <spinel_datatype_vunpack_+0x124>
                const char **arg_ptr = va_arg(args->obj, const char **);
 100dc22:	681b      	ldr	r3, [r3, #0]
                if (arg_ptr)
 100dc24:	2b00      	cmp	r3, #0
 100dc26:	d0f7      	beq.n	100dc18 <spinel_datatype_vunpack_+0x320>
                    *arg_ptr = (const char *)data_in;
 100dc28:	601c      	str	r4, [r3, #0]
 100dc2a:	e7f5      	b.n	100dc18 <spinel_datatype_vunpack_+0x320>
            uint16_t       block_len     = 0;
 100dc2c:	2300      	movs	r3, #0
 100dc2e:	f8ad 3016 	strh.w	r3, [sp, #22]
            void *         arg_ptr       = va_arg(args->obj, void *);
 100dc32:	6833      	ldr	r3, [r6, #0]
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100dc34:	4640      	mov	r0, r8
            void *         arg_ptr       = va_arg(args->obj, void *);
 100dc36:	1d1a      	adds	r2, r3, #4
 100dc38:	6032      	str	r2, [r6, #0]
 100dc3a:	461a      	mov	r2, r3
 100dc3c:	f852 bb08 	ldr.w	fp, [r2], #8
            unsigned int * block_len_ptr = va_arg(args->obj, unsigned int *);
 100dc40:	6032      	str	r2, [r6, #0]
 100dc42:	f8d3 a004 	ldr.w	sl, [r3, #4]
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100dc46:	f006 f804 	bl	1013c52 <spinel_next_packed_datatype>
            if ((pack_format[0] == SPINEL_DATATYPE_DATA_WLEN_C) || ((nextformat != 0) && (nextformat != ')')))
 100dc4a:	f898 2000 	ldrb.w	r2, [r8]
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100dc4e:	7803      	ldrb	r3, [r0, #0]
            if ((pack_format[0] == SPINEL_DATATYPE_DATA_WLEN_C) || ((nextformat != 0) && (nextformat != ')')))
 100dc50:	2a64      	cmp	r2, #100	; 0x64
 100dc52:	d002      	beq.n	100dc5a <spinel_datatype_vunpack_+0x362>
 100dc54:	b1bb      	cbz	r3, 100dc86 <spinel_datatype_vunpack_+0x38e>
 100dc56:	2b29      	cmp	r3, #41	; 0x29
 100dc58:	d015      	beq.n	100dc86 <spinel_datatype_vunpack_+0x38e>
                pui_len = spinel_datatype_unpack(data_in, data_len, SPINEL_DATATYPE_UINT16_S, &block_len);
 100dc5a:	4629      	mov	r1, r5
 100dc5c:	f10d 0316 	add.w	r3, sp, #22
 100dc60:	4620      	mov	r0, r4
 100dc62:	4a43      	ldr	r2, [pc, #268]	; (100dd70 <spinel_datatype_vunpack_+0x478>)
 100dc64:	f006 f81e 	bl	1013ca4 <spinel_datatype_unpack>
                require(pui_len > 0, bail);
 100dc68:	2800      	cmp	r0, #0
                pui_len = spinel_datatype_unpack(data_in, data_len, SPINEL_DATATYPE_UINT16_S, &block_len);
 100dc6a:	4603      	mov	r3, r0
                block_ptr += pui_len;
 100dc6c:	eb04 0100 	add.w	r1, r4, r0
                require(pui_len > 0, bail);
 100dc70:	dd05      	ble.n	100dc7e <spinel_datatype_vunpack_+0x386>
                require(block_len < SPINEL_FRAME_MAX_SIZE, bail);
 100dc72:	f240 5213 	movw	r2, #1299	; 0x513
 100dc76:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 100dc7a:	4290      	cmp	r0, r2
 100dc7c:	d907      	bls.n	100dc8e <spinel_datatype_vunpack_+0x396>

    return ret;

bail:
    return ret;
}
 100dc7e:	4638      	mov	r0, r7
 100dc80:	b007      	add	sp, #28
 100dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                block_len = (uint16_t)data_len;
 100dc86:	4621      	mov	r1, r4
                pui_len   = 0;
 100dc88:	2300      	movs	r3, #0
                block_len = (uint16_t)data_len;
 100dc8a:	f8ad 5016 	strh.w	r5, [sp, #22]
            require_action((spinel_ssize_t)data_len >= (block_len + pui_len), bail, (ret = -1, errno = EOVERFLOW));
 100dc8e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 100dc92:	18d0      	adds	r0, r2, r3
 100dc94:	42a8      	cmp	r0, r5
 100dc96:	f73f aeb4 	bgt.w	100da02 <spinel_datatype_vunpack_+0x10a>
            if (in_place)
 100dc9a:	f1b9 0f00 	cmp.w	r9, #0
 100dc9e:	d012      	beq.n	100dcc6 <spinel_datatype_vunpack_+0x3ce>
                require_action(NULL != block_len_ptr && *block_len_ptr >= block_len, bail, (ret = -1, errno = EINVAL));
 100dca0:	f1ba 0f00 	cmp.w	sl, #0
 100dca4:	f43f ae34 	beq.w	100d910 <spinel_datatype_vunpack_+0x18>
 100dca8:	f8da 0000 	ldr.w	r0, [sl]
 100dcac:	4290      	cmp	r0, r2
 100dcae:	f4ff ae2f 	bcc.w	100d910 <spinel_datatype_vunpack_+0x18>
                memcpy(arg_ptr, block_ptr, block_len);
 100dcb2:	4658      	mov	r0, fp
 100dcb4:	9303      	str	r3, [sp, #12]
 100dcb6:	f004 fea1 	bl	10129fc <memcpy>
            if (NULL != block_len_ptr)
 100dcba:	9b03      	ldr	r3, [sp, #12]
                *block_len_ptr = block_len;
 100dcbc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 100dcc0:	f8ca 2000 	str.w	r2, [sl]
 100dcc4:	e007      	b.n	100dcd6 <spinel_datatype_vunpack_+0x3de>
                if (NULL != block_ptr_ptr)
 100dcc6:	f1bb 0f00 	cmp.w	fp, #0
 100dcca:	d001      	beq.n	100dcd0 <spinel_datatype_vunpack_+0x3d8>
                    *block_ptr_ptr = block_ptr;
 100dccc:	f8cb 1000 	str.w	r1, [fp]
            if (NULL != block_len_ptr)
 100dcd0:	f1ba 0f00 	cmp.w	sl, #0
 100dcd4:	d1f2      	bne.n	100dcbc <spinel_datatype_vunpack_+0x3c4>
            block_len += (uint16_t)pui_len;
 100dcd6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 100dcda:	4413      	add	r3, r2
 100dcdc:	b29b      	uxth	r3, r3
            ret += block_len;
 100dcde:	441f      	add	r7, r3
            data_in += block_len;
 100dce0:	441c      	add	r4, r3
            data_len -= block_len;
 100dce2:	1aed      	subs	r5, r5, r3
            break;
 100dce4:	e69a      	b.n	100da1c <spinel_datatype_vunpack_+0x124>
            uint16_t       block_len  = 0;
 100dce6:	2300      	movs	r3, #0
            char           nextformat = *spinel_next_packed_datatype(pack_format);
 100dce8:	4640      	mov	r0, r8
            uint16_t       block_len  = 0;
 100dcea:	f8ad 3016 	strh.w	r3, [sp, #22]
            char           nextformat = *spinel_next_packed_datatype(pack_format);
 100dcee:	f005 ffb0 	bl	1013c52 <spinel_next_packed_datatype>
            if ((pack_format[0] == SPINEL_DATATYPE_STRUCT_C) || ((nextformat != 0) && (nextformat != ')')))
 100dcf2:	f898 2000 	ldrb.w	r2, [r8]
            char           nextformat = *spinel_next_packed_datatype(pack_format);
 100dcf6:	7803      	ldrb	r3, [r0, #0]
            if ((pack_format[0] == SPINEL_DATATYPE_STRUCT_C) || ((nextformat != 0) && (nextformat != ')')))
 100dcf8:	2a74      	cmp	r2, #116	; 0x74
 100dcfa:	d002      	beq.n	100dd02 <spinel_datatype_vunpack_+0x40a>
 100dcfc:	b363      	cbz	r3, 100dd58 <spinel_datatype_vunpack_+0x460>
 100dcfe:	2b29      	cmp	r3, #41	; 0x29
 100dd00:	d02a      	beq.n	100dd58 <spinel_datatype_vunpack_+0x460>
                pui_len = spinel_datatype_unpack(data_in, data_len, SPINEL_DATATYPE_UINT16_S, &block_len);
 100dd02:	4629      	mov	r1, r5
 100dd04:	4620      	mov	r0, r4
 100dd06:	4a1a      	ldr	r2, [pc, #104]	; (100dd70 <spinel_datatype_vunpack_+0x478>)
 100dd08:	f10d 0316 	add.w	r3, sp, #22
 100dd0c:	f005 ffca 	bl	1013ca4 <spinel_datatype_unpack>
                require(pui_len > 0, bail);
 100dd10:	2800      	cmp	r0, #0
                pui_len = spinel_datatype_unpack(data_in, data_len, SPINEL_DATATYPE_UINT16_S, &block_len);
 100dd12:	4682      	mov	sl, r0
                block_ptr += pui_len;
 100dd14:	eb04 0100 	add.w	r1, r4, r0
                require(pui_len > 0, bail);
 100dd18:	ddb1      	ble.n	100dc7e <spinel_datatype_vunpack_+0x386>
                require(block_len < SPINEL_FRAME_MAX_SIZE, bail);
 100dd1a:	f240 5313 	movw	r3, #1299	; 0x513
 100dd1e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 100dd22:	429a      	cmp	r2, r3
 100dd24:	d8ab      	bhi.n	100dc7e <spinel_datatype_vunpack_+0x386>
            require_action((spinel_ssize_t)data_len >= (block_len + pui_len), bail, (ret = -1, errno = EOVERFLOW));
 100dd26:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 100dd2a:	eb02 030a 	add.w	r3, r2, sl
 100dd2e:	42ab      	cmp	r3, r5
 100dd30:	f73f ae67 	bgt.w	100da02 <spinel_datatype_vunpack_+0x10a>
            actual_len = spinel_datatype_vunpack_(false, block_ptr, block_len, pack_format + 2, args);
 100dd34:	2000      	movs	r0, #0
 100dd36:	9600      	str	r6, [sp, #0]
 100dd38:	f108 0302 	add.w	r3, r8, #2
 100dd3c:	f7ff fddc 	bl	100d8f8 <spinel_datatype_vunpack_>
            require_action(actual_len > -1, bail, (ret = -1, errno = EOVERFLOW));
 100dd40:	2800      	cmp	r0, #0
 100dd42:	f6ff ae5e 	blt.w	100da02 <spinel_datatype_vunpack_+0x10a>
            if (pui_len)
 100dd46:	f1ba 0f00 	cmp.w	sl, #0
 100dd4a:	d00b      	beq.n	100dd64 <spinel_datatype_vunpack_+0x46c>
                block_len += (uint16_t)pui_len;
 100dd4c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 100dd50:	449a      	add	sl, r3
 100dd52:	fa1f f08a 	uxth.w	r0, sl
 100dd56:	e70f      	b.n	100db78 <spinel_datatype_vunpack_+0x280>
                block_len = (uint16_t)data_len;
 100dd58:	4621      	mov	r1, r4
                pui_len   = 0;
 100dd5a:	f04f 0a00 	mov.w	sl, #0
                block_len = (uint16_t)data_len;
 100dd5e:	f8ad 5016 	strh.w	r5, [sp, #22]
                pui_len   = 0;
 100dd62:	e7e0      	b.n	100dd26 <spinel_datatype_vunpack_+0x42e>
                block_len = (uint16_t)actual_len;
 100dd64:	b280      	uxth	r0, r0
 100dd66:	e707      	b.n	100db78 <spinel_datatype_vunpack_+0x280>
    spinel_ssize_t ret = 0;
 100dd68:	2700      	movs	r7, #0
 100dd6a:	e65b      	b.n	100da24 <spinel_datatype_vunpack_+0x12c>
 100dd6c:	001ffffe 	.word	0x001ffffe
 100dd70:	01015d83 	.word	0x01015d83

0100dd74 <spinel_datatype_vpack_>:
                                             va_list_obj * args)
{
    spinel_ssize_t ret = 0;

    // Buffer length sanity check
    require_action(data_len_max <= SPINEL_MAX_PACK_LENGTH, bail, (ret = -1, errno = EINVAL));
 100dd74:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
{
 100dd78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100dd7c:	4605      	mov	r5, r0
 100dd7e:	460c      	mov	r4, r1
 100dd80:	4690      	mov	r8, r2
 100dd82:	461f      	mov	r7, r3
    require_action(data_len_max <= SPINEL_MAX_PACK_LENGTH, bail, (ret = -1, errno = EINVAL));
 100dd84:	d309      	bcc.n	100dd9a <spinel_datatype_vpack_+0x26>
        {
            uint32_t       arg = va_arg(args->obj, uint32_t);
            spinel_ssize_t encoded_size;

            // Range Check
            require_action(arg < SPINEL_MAX_UINT_PACKED, bail, {
 100dd86:	f005 ff20 	bl	1013bca <z_errno>
 100dd8a:	2316      	movs	r3, #22
    require_action(data_len_max <= SPINEL_MAX_PACK_LENGTH, bail, (ret = -1, errno = EINVAL));
 100dd8c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
            require_action(arg < SPINEL_MAX_UINT_PACKED, bail, {
 100dd90:	6003      	str	r3, [r0, #0]
        }
    }

bail:
    return ret;
}
 100dd92:	4630      	mov	r0, r6
 100dd94:	b003      	add	sp, #12
 100dd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        data_len_max = 0;
 100dd9a:	2800      	cmp	r0, #0
 100dd9c:	bf08      	it	eq
 100dd9e:	2400      	moveq	r4, #0
                data_len_max = 0;
 100dda0:	2600      	movs	r6, #0
    for (; *pack_format != 0; pack_format = spinel_next_packed_datatype(pack_format))
 100dda2:	f898 3000 	ldrb.w	r3, [r8]
 100dda6:	2b00      	cmp	r3, #0
 100dda8:	d0f3      	beq.n	100dd92 <spinel_datatype_vpack_+0x1e>
        if (*pack_format == ')')
 100ddaa:	2b29      	cmp	r3, #41	; 0x29
 100ddac:	d0f1      	beq.n	100dd92 <spinel_datatype_vpack_+0x1e>
        switch ((spinel_datatype_t)*pack_format)
 100ddae:	2b78      	cmp	r3, #120	; 0x78
 100ddb0:	d8e9      	bhi.n	100dd86 <spinel_datatype_vpack_+0x12>
 100ddb2:	2b52      	cmp	r3, #82	; 0x52
 100ddb4:	d81e      	bhi.n	100ddf4 <spinel_datatype_vpack_+0x80>
 100ddb6:	2b4c      	cmp	r3, #76	; 0x4c
 100ddb8:	d8e5      	bhi.n	100dd86 <spinel_datatype_vpack_+0x12>
 100ddba:	2b42      	cmp	r3, #66	; 0x42
 100ddbc:	d86c      	bhi.n	100de98 <spinel_datatype_vpack_+0x124>
 100ddbe:	2b2e      	cmp	r3, #46	; 0x2e
 100ddc0:	f000 8092 	beq.w	100dee8 <spinel_datatype_vpack_+0x174>
 100ddc4:	2b36      	cmp	r3, #54	; 0x36
 100ddc6:	d1de      	bne.n	100dd86 <spinel_datatype_vpack_+0x12>
            spinel_ipv6addr_t *arg = va_arg(args->obj, spinel_ipv6addr_t *);
 100ddc8:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(spinel_ipv6addr_t))
 100ddca:	2c0f      	cmp	r4, #15
            spinel_ipv6addr_t *arg = va_arg(args->obj, spinel_ipv6addr_t *);
 100ddcc:	f103 0204 	add.w	r2, r3, #4
 100ddd0:	603a      	str	r2, [r7, #0]
            ret += sizeof(spinel_ipv6addr_t);
 100ddd2:	f106 0610 	add.w	r6, r6, #16
            if (data_len_max >= sizeof(spinel_ipv6addr_t))
 100ddd6:	f240 8194 	bls.w	100e102 <spinel_datatype_vpack_+0x38e>
                *(spinel_ipv6addr_t *)data_out = *arg;
 100ddda:	462a      	mov	r2, r5
            spinel_ipv6addr_t *arg = va_arg(args->obj, spinel_ipv6addr_t *);
 100dddc:	681b      	ldr	r3, [r3, #0]
                *(spinel_ipv6addr_t *)data_out = *arg;
 100ddde:	f103 0110 	add.w	r1, r3, #16
 100dde2:	f853 0b04 	ldr.w	r0, [r3], #4
 100dde6:	428b      	cmp	r3, r1
 100dde8:	f842 0b04 	str.w	r0, [r2], #4
 100ddec:	d1f9      	bne.n	100dde2 <spinel_datatype_vpack_+0x6e>
                data_out += sizeof(spinel_ipv6addr_t);
 100ddee:	3510      	adds	r5, #16
                data_len_max -= sizeof(spinel_ipv6addr_t);
 100ddf0:	3c10      	subs	r4, #16
 100ddf2:	e079      	b.n	100dee8 <spinel_datatype_vpack_+0x174>
        switch ((spinel_datatype_t)*pack_format)
 100ddf4:	3b53      	subs	r3, #83	; 0x53
 100ddf6:	2b25      	cmp	r3, #37	; 0x25
 100ddf8:	d8c5      	bhi.n	100dd86 <spinel_datatype_vpack_+0x12>
 100ddfa:	a201      	add	r2, pc, #4	; (adr r2, 100de00 <spinel_datatype_vpack_+0x8c>)
 100ddfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 100de00:	0100df03 	.word	0x0100df03
 100de04:	0100e095 	.word	0x0100e095
 100de08:	0100dffd 	.word	0x0100dffd
 100de0c:	0100dd87 	.word	0x0100dd87
 100de10:	0100dd87 	.word	0x0100dd87
 100de14:	0100df4d 	.word	0x0100df4d
 100de18:	0100dd87 	.word	0x0100dd87
 100de1c:	0100dd87 	.word	0x0100dd87
 100de20:	0100dd87 	.word	0x0100dd87
 100de24:	0100dd87 	.word	0x0100dd87
 100de28:	0100dd87 	.word	0x0100dd87
 100de2c:	0100dd87 	.word	0x0100dd87
 100de30:	0100dd87 	.word	0x0100dd87
 100de34:	0100dd87 	.word	0x0100dd87
 100de38:	0100dd87 	.word	0x0100dd87
 100de3c:	0100ded1 	.word	0x0100ded1
 100de40:	0100def3 	.word	0x0100def3
 100de44:	0100e033 	.word	0x0100e033
 100de48:	0100df8d 	.word	0x0100df8d
 100de4c:	0100dd87 	.word	0x0100dd87
 100de50:	0100dd87 	.word	0x0100dd87
 100de54:	0100dd87 	.word	0x0100dd87
 100de58:	0100dfd7 	.word	0x0100dfd7
 100de5c:	0100dd87 	.word	0x0100dd87
 100de60:	0100dd87 	.word	0x0100dd87
 100de64:	0100df25 	.word	0x0100df25
 100de68:	0100dd87 	.word	0x0100dd87
 100de6c:	0100dd87 	.word	0x0100dd87
 100de70:	0100dd87 	.word	0x0100dd87
 100de74:	0100dd87 	.word	0x0100dd87
 100de78:	0100dd87 	.word	0x0100dd87
 100de7c:	0100dd87 	.word	0x0100dd87
 100de80:	0100df03 	.word	0x0100df03
 100de84:	0100e095 	.word	0x0100e095
 100de88:	0100dd87 	.word	0x0100dd87
 100de8c:	0100dd87 	.word	0x0100dd87
 100de90:	0100dd87 	.word	0x0100dd87
 100de94:	0100df4d 	.word	0x0100df4d
 100de98:	3b43      	subs	r3, #67	; 0x43
 100de9a:	2b09      	cmp	r3, #9
 100de9c:	f63f af73 	bhi.w	100dd86 <spinel_datatype_vpack_+0x12>
 100dea0:	a201      	add	r2, pc, #4	; (adr r2, 100dea8 <spinel_datatype_vpack_+0x134>)
 100dea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 100dea6:	bf00      	nop
 100dea8:	0100def3 	.word	0x0100def3
 100deac:	0100e033 	.word	0x0100e033
 100deb0:	0100dfb3 	.word	0x0100dfb3
 100deb4:	0100dd87 	.word	0x0100dd87
 100deb8:	0100dd87 	.word	0x0100dd87
 100debc:	0100dd87 	.word	0x0100dd87
 100dec0:	0100dd87 	.word	0x0100dd87
 100dec4:	0100dd87 	.word	0x0100dd87
 100dec8:	0100dd87 	.word	0x0100dd87
 100decc:	0100df25 	.word	0x0100df25
            bool arg = (bool)va_arg(args->obj, int);
 100ded0:	683b      	ldr	r3, [r7, #0]
            ret += sizeof(uint8_t);
 100ded2:	3601      	adds	r6, #1
            bool arg = (bool)va_arg(args->obj, int);
 100ded4:	1d1a      	adds	r2, r3, #4
 100ded6:	603a      	str	r2, [r7, #0]
            if (data_len_max >= sizeof(uint8_t))
 100ded8:	b134      	cbz	r4, 100dee8 <spinel_datatype_vpack_+0x174>
            bool arg = (bool)va_arg(args->obj, int);
 100deda:	681b      	ldr	r3, [r3, #0]
 100dedc:	3b00      	subs	r3, #0
 100dede:	bf18      	it	ne
 100dee0:	2301      	movne	r3, #1
            uint8_t arg = (uint8_t)va_arg(args->obj, int);
 100dee2:	f805 3b01 	strb.w	r3, [r5], #1
                data_len_max -= sizeof(uint8_t);
 100dee6:	3c01      	subs	r4, #1
    for (; *pack_format != 0; pack_format = spinel_next_packed_datatype(pack_format))
 100dee8:	4640      	mov	r0, r8
 100deea:	f005 feb2 	bl	1013c52 <spinel_next_packed_datatype>
 100deee:	4680      	mov	r8, r0
 100def0:	e757      	b.n	100dda2 <spinel_datatype_vpack_+0x2e>
            uint8_t arg = (uint8_t)va_arg(args->obj, int);
 100def2:	683b      	ldr	r3, [r7, #0]
            ret += sizeof(uint8_t);
 100def4:	3601      	adds	r6, #1
            uint8_t arg = (uint8_t)va_arg(args->obj, int);
 100def6:	1d1a      	adds	r2, r3, #4
 100def8:	603a      	str	r2, [r7, #0]
            if (data_len_max >= sizeof(uint8_t))
 100defa:	2c00      	cmp	r4, #0
 100defc:	d0f4      	beq.n	100dee8 <spinel_datatype_vpack_+0x174>
            uint8_t arg = (uint8_t)va_arg(args->obj, int);
 100defe:	681b      	ldr	r3, [r3, #0]
 100df00:	e7ef      	b.n	100dee2 <spinel_datatype_vpack_+0x16e>
            uint16_t arg = (uint16_t)va_arg(args->obj, int);
 100df02:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(uint16_t))
 100df04:	2c01      	cmp	r4, #1
            uint16_t arg = (uint16_t)va_arg(args->obj, int);
 100df06:	f103 0204 	add.w	r2, r3, #4
 100df0a:	603a      	str	r2, [r7, #0]
            ret += sizeof(uint16_t);
 100df0c:	f106 0602 	add.w	r6, r6, #2
            if (data_len_max >= sizeof(uint16_t))
 100df10:	f240 80f7 	bls.w	100e102 <spinel_datatype_vpack_+0x38e>
            uint16_t arg = (uint16_t)va_arg(args->obj, int);
 100df14:	681b      	ldr	r3, [r3, #0]
                data_len_max -= sizeof(uint16_t);
 100df16:	3c02      	subs	r4, #2
                data_out[1] = (arg >> 8) & 0xff;
 100df18:	f3c3 2207 	ubfx	r2, r3, #8, #8
 100df1c:	706a      	strb	r2, [r5, #1]
                data_out[0] = (arg >> 0) & 0xff;
 100df1e:	f805 3b02 	strb.w	r3, [r5], #2
                data_len_max -= sizeof(uint16_t);
 100df22:	e7e1      	b.n	100dee8 <spinel_datatype_vpack_+0x174>
            uint32_t arg = (uint32_t)va_arg(args->obj, int);
 100df24:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(uint32_t))
 100df26:	2c03      	cmp	r4, #3
            uint32_t arg = (uint32_t)va_arg(args->obj, int);
 100df28:	f103 0204 	add.w	r2, r3, #4
 100df2c:	603a      	str	r2, [r7, #0]
            ret += sizeof(uint32_t);
 100df2e:	f106 0604 	add.w	r6, r6, #4
            if (data_len_max >= sizeof(uint32_t))
 100df32:	f240 80e6 	bls.w	100e102 <spinel_datatype_vpack_+0x38e>
            uint32_t arg = (uint32_t)va_arg(args->obj, int);
 100df36:	681b      	ldr	r3, [r3, #0]
                data_len_max -= sizeof(uint32_t);
 100df38:	3c04      	subs	r4, #4
                data_out[3] = (arg >> 24) & 0xff;
 100df3a:	0e1a      	lsrs	r2, r3, #24
 100df3c:	70ea      	strb	r2, [r5, #3]
                data_out[2] = (arg >> 16) & 0xff;
 100df3e:	0c1a      	lsrs	r2, r3, #16
 100df40:	70aa      	strb	r2, [r5, #2]
                data_out[1] = (arg >> 8) & 0xff;
 100df42:	0a1a      	lsrs	r2, r3, #8
 100df44:	706a      	strb	r2, [r5, #1]
                data_out[0] = (arg >> 0) & 0xff;
 100df46:	f805 3b04 	strb.w	r3, [r5], #4
                data_len_max -= sizeof(uint32_t);
 100df4a:	e7cd      	b.n	100dee8 <spinel_datatype_vpack_+0x174>
            uint64_t arg = va_arg(args->obj, uint64_t);
 100df4c:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(uint64_t))
 100df4e:	2c07      	cmp	r4, #7
            uint64_t arg = va_arg(args->obj, uint64_t);
 100df50:	f103 0307 	add.w	r3, r3, #7
 100df54:	f023 0307 	bic.w	r3, r3, #7
 100df58:	f103 0208 	add.w	r2, r3, #8
 100df5c:	603a      	str	r2, [r7, #0]
            ret += sizeof(uint64_t);
 100df5e:	f106 0608 	add.w	r6, r6, #8
            if (data_len_max >= sizeof(uint64_t))
 100df62:	f240 80ce 	bls.w	100e102 <spinel_datatype_vpack_+0x38e>
            uint64_t arg = va_arg(args->obj, uint64_t);
 100df66:	e9d3 2300 	ldrd	r2, r3, [r3]
                data_out[7] = (arg >> 56) & 0xff;
 100df6a:	0e19      	lsrs	r1, r3, #24
 100df6c:	71e9      	strb	r1, [r5, #7]
                data_out[6] = (arg >> 48) & 0xff;
 100df6e:	0c19      	lsrs	r1, r3, #16
 100df70:	71a9      	strb	r1, [r5, #6]
                data_out[4] = (arg >> 32) & 0xff;
 100df72:	712b      	strb	r3, [r5, #4]
                data_out[5] = (arg >> 40) & 0xff;
 100df74:	0a19      	lsrs	r1, r3, #8
                data_out[3] = (arg >> 24) & 0xff;
 100df76:	0e13      	lsrs	r3, r2, #24
 100df78:	70eb      	strb	r3, [r5, #3]
                data_out[2] = (arg >> 16) & 0xff;
 100df7a:	0c13      	lsrs	r3, r2, #16
 100df7c:	70ab      	strb	r3, [r5, #2]
                data_out[1] = (arg >> 8) & 0xff;
 100df7e:	0a13      	lsrs	r3, r2, #8
                data_out[5] = (arg >> 40) & 0xff;
 100df80:	7169      	strb	r1, [r5, #5]
                data_out[1] = (arg >> 8) & 0xff;
 100df82:	706b      	strb	r3, [r5, #1]
                data_out[0] = (arg >> 0) & 0xff;
 100df84:	f805 2b08 	strb.w	r2, [r5], #8
                data_len_max -= sizeof(spinel_eui64_t);
 100df88:	3c08      	subs	r4, #8
 100df8a:	e7ad      	b.n	100dee8 <spinel_datatype_vpack_+0x174>
            spinel_eui48_t *arg = va_arg(args->obj, spinel_eui48_t *);
 100df8c:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(spinel_eui48_t))
 100df8e:	2c05      	cmp	r4, #5
            spinel_eui48_t *arg = va_arg(args->obj, spinel_eui48_t *);
 100df90:	f103 0204 	add.w	r2, r3, #4
 100df94:	603a      	str	r2, [r7, #0]
            ret += sizeof(spinel_eui48_t);
 100df96:	f106 0606 	add.w	r6, r6, #6
            if (data_len_max >= sizeof(spinel_eui48_t))
 100df9a:	f240 80b2 	bls.w	100e102 <spinel_datatype_vpack_+0x38e>
            spinel_eui48_t *arg = va_arg(args->obj, spinel_eui48_t *);
 100df9e:	681b      	ldr	r3, [r3, #0]
                data_out += sizeof(spinel_eui48_t);
 100dfa0:	3506      	adds	r5, #6
                *(spinel_eui48_t *)data_out = *arg;
 100dfa2:	681a      	ldr	r2, [r3, #0]
                data_len_max -= sizeof(spinel_eui48_t);
 100dfa4:	3c06      	subs	r4, #6
                *(spinel_eui48_t *)data_out = *arg;
 100dfa6:	f845 2c06 	str.w	r2, [r5, #-6]
 100dfaa:	889b      	ldrh	r3, [r3, #4]
 100dfac:	f825 3c02 	strh.w	r3, [r5, #-2]
                data_len_max -= sizeof(spinel_eui48_t);
 100dfb0:	e79a      	b.n	100dee8 <spinel_datatype_vpack_+0x174>
            spinel_eui64_t *arg = va_arg(args->obj, spinel_eui64_t *);
 100dfb2:	683b      	ldr	r3, [r7, #0]
            if (data_len_max >= sizeof(spinel_eui64_t))
 100dfb4:	2c07      	cmp	r4, #7
            spinel_eui64_t *arg = va_arg(args->obj, spinel_eui64_t *);
 100dfb6:	f103 0204 	add.w	r2, r3, #4
 100dfba:	603a      	str	r2, [r7, #0]
            ret += sizeof(spinel_eui64_t);
 100dfbc:	f106 0608 	add.w	r6, r6, #8
            if (data_len_max >= sizeof(spinel_eui64_t))
 100dfc0:	f240 809f 	bls.w	100e102 <spinel_datatype_vpack_+0x38e>
            spinel_eui64_t *arg = va_arg(args->obj, spinel_eui64_t *);
 100dfc4:	681a      	ldr	r2, [r3, #0]
                data_out += sizeof(spinel_eui64_t);
 100dfc6:	3508      	adds	r5, #8
                *(spinel_eui64_t *)data_out = *arg;
 100dfc8:	6813      	ldr	r3, [r2, #0]
 100dfca:	f845 3c08 	str.w	r3, [r5, #-8]
 100dfce:	6853      	ldr	r3, [r2, #4]
 100dfd0:	f845 3c04 	str.w	r3, [r5, #-4]
                data_out += sizeof(spinel_eui64_t);
 100dfd4:	e7d8      	b.n	100df88 <spinel_datatype_vpack_+0x214>
            uint32_t       arg = va_arg(args->obj, uint32_t);
 100dfd6:	683b      	ldr	r3, [r7, #0]
 100dfd8:	1d1a      	adds	r2, r3, #4
 100dfda:	603a      	str	r2, [r7, #0]
 100dfdc:	681a      	ldr	r2, [r3, #0]
            require_action(arg < SPINEL_MAX_UINT_PACKED, bail, {
 100dfde:	4b4a      	ldr	r3, [pc, #296]	; (100e108 <spinel_datatype_vpack_+0x394>)
 100dfe0:	429a      	cmp	r2, r3
 100dfe2:	f63f aed0 	bhi.w	100dd86 <spinel_datatype_vpack_+0x12>
            encoded_size = spinel_packed_uint_encode(data_out, data_len_max, arg);
 100dfe6:	4621      	mov	r1, r4
 100dfe8:	4628      	mov	r0, r5
 100dfea:	f005 fe1c 	bl	1013c26 <spinel_packed_uint_encode>
            if ((spinel_ssize_t)data_len_max >= encoded_size)
 100dfee:	4284      	cmp	r4, r0
            ret += encoded_size;
 100dff0:	4406      	add	r6, r0
            if ((spinel_ssize_t)data_len_max >= encoded_size)
 100dff2:	f2c0 8086 	blt.w	100e102 <spinel_datatype_vpack_+0x38e>
                data_out += struct_len;
 100dff6:	4405      	add	r5, r0
                data_len_max -= (spinel_size_t)struct_len;
 100dff8:	1a24      	subs	r4, r4, r0
 100dffa:	e775      	b.n	100dee8 <spinel_datatype_vpack_+0x174>
            const char *string_arg     = va_arg(args->obj, const char *);
 100dffc:	683b      	ldr	r3, [r7, #0]
 100dffe:	1d1a      	adds	r2, r3, #4
 100e000:	603a      	str	r2, [r7, #0]
 100e002:	f8d3 a000 	ldr.w	sl, [r3]
            if (string_arg)
 100e006:	f1ba 0f00 	cmp.w	sl, #0
 100e00a:	d00d      	beq.n	100e028 <spinel_datatype_vpack_+0x2b4>
                string_arg_len = strlen(string_arg) + 1;
 100e00c:	4650      	mov	r0, sl
 100e00e:	f004 fc9f 	bl	1012950 <strlen>
 100e012:	f100 0901 	add.w	r9, r0, #1
            if (data_len_max >= string_arg_len)
 100e016:	454c      	cmp	r4, r9
            ret += (spinel_size_t)string_arg_len;
 100e018:	444e      	add	r6, r9
            if (data_len_max >= string_arg_len)
 100e01a:	d372      	bcc.n	100e102 <spinel_datatype_vpack_+0x38e>
                    memcpy(data_out, arg, data_size_arg);
 100e01c:	464a      	mov	r2, r9
 100e01e:	4651      	mov	r1, sl
 100e020:	4628      	mov	r0, r5
 100e022:	f004 fceb 	bl	10129fc <memcpy>
 100e026:	e031      	b.n	100e08c <spinel_datatype_vpack_+0x318>
                string_arg_len = 1;
 100e028:	f04f 0901 	mov.w	r9, #1
                string_arg     = "";
 100e02c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 100e10c <spinel_datatype_vpack_+0x398>
 100e030:	e7f1      	b.n	100e016 <spinel_datatype_vpack_+0x2a2>
            const uint8_t *arg           = va_arg(args->obj, const uint8_t *);
 100e032:	683b      	ldr	r3, [r7, #0]
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100e034:	4640      	mov	r0, r8
            const uint8_t *arg           = va_arg(args->obj, const uint8_t *);
 100e036:	1d1a      	adds	r2, r3, #4
 100e038:	603a      	str	r2, [r7, #0]
 100e03a:	461a      	mov	r2, r3
 100e03c:	f852 ab08 	ldr.w	sl, [r2], #8
            uint32_t       data_size_arg = va_arg(args->obj, uint32_t);
 100e040:	603a      	str	r2, [r7, #0]
 100e042:	f8d3 9004 	ldr.w	r9, [r3, #4]
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100e046:	f005 fe04 	bl	1013c52 <spinel_next_packed_datatype>
            if ((pack_format[0] == SPINEL_DATATYPE_DATA_WLEN_C) || ((nextformat != 0) && (nextformat != ')')))
 100e04a:	f898 2000 	ldrb.w	r2, [r8]
            char           nextformat    = *spinel_next_packed_datatype(pack_format);
 100e04e:	7803      	ldrb	r3, [r0, #0]
            if ((pack_format[0] == SPINEL_DATATYPE_DATA_WLEN_C) || ((nextformat != 0) && (nextformat != ')')))
 100e050:	2a64      	cmp	r2, #100	; 0x64
 100e052:	d002      	beq.n	100e05a <spinel_datatype_vpack_+0x2e6>
 100e054:	b1ab      	cbz	r3, 100e082 <spinel_datatype_vpack_+0x30e>
 100e056:	2b29      	cmp	r3, #41	; 0x29
 100e058:	d013      	beq.n	100e082 <spinel_datatype_vpack_+0x30e>
                size_len = spinel_datatype_pack(data_out, data_len_max, SPINEL_DATATYPE_UINT16_S, data_size_arg);
 100e05a:	464b      	mov	r3, r9
 100e05c:	4621      	mov	r1, r4
 100e05e:	4628      	mov	r0, r5
 100e060:	4a2b      	ldr	r2, [pc, #172]	; (100e110 <spinel_datatype_vpack_+0x39c>)
 100e062:	f005 fe31 	bl	1013cc8 <spinel_datatype_pack>
                require_action(size_len > 0, bail, {
 100e066:	2800      	cmp	r0, #0
 100e068:	f77f ae8d 	ble.w	100dd86 <spinel_datatype_vpack_+0x12>
            ret += (spinel_size_t)size_len + data_size_arg;
 100e06c:	eb09 0300 	add.w	r3, r9, r0
            if (data_len_max >= (spinel_size_t)size_len + data_size_arg)
 100e070:	429c      	cmp	r4, r3
            ret += (spinel_size_t)size_len + data_size_arg;
 100e072:	441e      	add	r6, r3
            if (data_len_max >= (spinel_size_t)size_len + data_size_arg)
 100e074:	d345      	bcc.n	100e102 <spinel_datatype_vpack_+0x38e>
                data_out += size_len;
 100e076:	4405      	add	r5, r0
                data_len_max -= (spinel_size_t)size_len;
 100e078:	1a24      	subs	r4, r4, r0
                if (data_out && arg)
 100e07a:	f1ba 0f00 	cmp.w	sl, #0
 100e07e:	d1cd      	bne.n	100e01c <spinel_datatype_vpack_+0x2a8>
 100e080:	e004      	b.n	100e08c <spinel_datatype_vpack_+0x318>
            if (data_len_max >= (spinel_size_t)size_len + data_size_arg)
 100e082:	454c      	cmp	r4, r9
            ret += (spinel_size_t)size_len + data_size_arg;
 100e084:	444e      	add	r6, r9
            if (data_len_max >= (spinel_size_t)size_len + data_size_arg)
 100e086:	d33c      	bcc.n	100e102 <spinel_datatype_vpack_+0x38e>
                if (data_out && arg)
 100e088:	2d00      	cmp	r5, #0
 100e08a:	d1f6      	bne.n	100e07a <spinel_datatype_vpack_+0x306>
                data_out += data_size_arg;
 100e08c:	444d      	add	r5, r9
                data_len_max -= data_size_arg;
 100e08e:	eba4 0409 	sub.w	r4, r4, r9
 100e092:	e729      	b.n	100dee8 <spinel_datatype_vpack_+0x174>
            char           nextformat = *spinel_next_packed_datatype(pack_format);
 100e094:	4640      	mov	r0, r8
 100e096:	f005 fddc 	bl	1013c52 <spinel_next_packed_datatype>
            require_action(pack_format[1] == '(', bail, {
 100e09a:	f898 3001 	ldrb.w	r3, [r8, #1]
            char           nextformat = *spinel_next_packed_datatype(pack_format);
 100e09e:	f890 9000 	ldrb.w	r9, [r0]
            require_action(pack_format[1] == '(', bail, {
 100e0a2:	2b28      	cmp	r3, #40	; 0x28
 100e0a4:	f47f ae6f 	bne.w	100dd86 <spinel_datatype_vpack_+0x12>
                struct_len = spinel_datatype_vpack_(NULL, 0, pack_format + 2, &subargs);
 100e0a8:	2100      	movs	r1, #0
                va_copy(subargs.obj, args->obj);
 100e0aa:	683b      	ldr	r3, [r7, #0]
                struct_len = spinel_datatype_vpack_(NULL, 0, pack_format + 2, &subargs);
 100e0ac:	f108 0a02 	add.w	sl, r8, #2
                va_copy(subargs.obj, args->obj);
 100e0b0:	9301      	str	r3, [sp, #4]
                struct_len = spinel_datatype_vpack_(NULL, 0, pack_format + 2, &subargs);
 100e0b2:	4652      	mov	r2, sl
 100e0b4:	ab01      	add	r3, sp, #4
 100e0b6:	4608      	mov	r0, r1
 100e0b8:	f7ff fe5c 	bl	100dd74 <spinel_datatype_vpack_>
            if ((pack_format[0] == SPINEL_DATATYPE_STRUCT_C) || ((nextformat != 0) && (nextformat != ')')))
 100e0bc:	f898 3000 	ldrb.w	r3, [r8]
                struct_len = spinel_datatype_vpack_(NULL, 0, pack_format + 2, &subargs);
 100e0c0:	4683      	mov	fp, r0
            if ((pack_format[0] == SPINEL_DATATYPE_STRUCT_C) || ((nextformat != 0) && (nextformat != ')')))
 100e0c2:	2b74      	cmp	r3, #116	; 0x74
 100e0c4:	d005      	beq.n	100e0d2 <spinel_datatype_vpack_+0x35e>
 100e0c6:	f1b9 0f00 	cmp.w	r9, #0
 100e0ca:	d018      	beq.n	100e0fe <spinel_datatype_vpack_+0x38a>
 100e0cc:	f1b9 0f29 	cmp.w	r9, #41	; 0x29
 100e0d0:	d015      	beq.n	100e0fe <spinel_datatype_vpack_+0x38a>
                size_len = spinel_datatype_pack(data_out, data_len_max, SPINEL_DATATYPE_UINT16_S, struct_len);
 100e0d2:	4621      	mov	r1, r4
 100e0d4:	465b      	mov	r3, fp
 100e0d6:	4628      	mov	r0, r5
 100e0d8:	4a0d      	ldr	r2, [pc, #52]	; (100e110 <spinel_datatype_vpack_+0x39c>)
 100e0da:	f005 fdf5 	bl	1013cc8 <spinel_datatype_pack>
                require_action(size_len > 0, bail, {
 100e0de:	1e01      	subs	r1, r0, #0
 100e0e0:	f77f ae51 	ble.w	100dd86 <spinel_datatype_vpack_+0x12>
            ret += size_len + struct_len;
 100e0e4:	448b      	add	fp, r1
            if (struct_len + size_len <= (spinel_ssize_t)data_len_max)
 100e0e6:	45a3      	cmp	fp, r4
            ret += size_len + struct_len;
 100e0e8:	445e      	add	r6, fp
            if (struct_len + size_len <= (spinel_ssize_t)data_len_max)
 100e0ea:	dc0a      	bgt.n	100e102 <spinel_datatype_vpack_+0x38e>
                data_out += size_len;
 100e0ec:	440d      	add	r5, r1
                data_len_max -= (spinel_size_t)size_len;
 100e0ee:	1a64      	subs	r4, r4, r1
                struct_len = spinel_datatype_vpack_(data_out, data_len_max, pack_format + 2, args);
 100e0f0:	463b      	mov	r3, r7
 100e0f2:	4652      	mov	r2, sl
 100e0f4:	4621      	mov	r1, r4
 100e0f6:	4628      	mov	r0, r5
 100e0f8:	f7ff fe3c 	bl	100dd74 <spinel_datatype_vpack_>
 100e0fc:	e77b      	b.n	100dff6 <spinel_datatype_vpack_+0x282>
            spinel_ssize_t size_len   = 0;
 100e0fe:	2100      	movs	r1, #0
 100e100:	e7f0      	b.n	100e0e4 <spinel_datatype_vpack_+0x370>
                data_len_max = 0;
 100e102:	2400      	movs	r4, #0
 100e104:	e6f0      	b.n	100dee8 <spinel_datatype_vpack_+0x174>
 100e106:	bf00      	nop
 100e108:	001ffffe 	.word	0x001ffffe
 100e10c:	01015d75 	.word	0x01015d75
 100e110:	01015d83 	.word	0x01015d83

0100e114 <nrf_802154_spinel_dst_buffer_mgr_get>:
}

nrf_802154_buffer_mgr_dst_t * nrf_802154_spinel_dst_buffer_mgr_get(void)
{
    return &m_dst_mgr;
}
 100e114:	4800      	ldr	r0, [pc, #0]	; (100e118 <nrf_802154_spinel_dst_buffer_mgr_get+0x4>)
 100e116:	4770      	bx	lr
 100e118:	210039ec 	.word	0x210039ec

0100e11c <nrf_802154_spinel_src_buffer_mgr_get>:

nrf_802154_buffer_mgr_src_t * nrf_802154_spinel_src_buffer_mgr_get(void)
{
    return &m_src_mgr;
}
 100e11c:	4800      	ldr	r0, [pc, #0]	; (100e120 <nrf_802154_spinel_src_buffer_mgr_get+0x4>)
 100e11e:	4770      	bx	lr
 100e120:	210037b4 	.word	0x210037b4

0100e124 <nrf_802154_serialization_init>:

void nrf_802154_serialization_init(void)
{
 100e124:	b507      	push	{r0, r1, r2, lr}
    NRF_802154_BUFFER_MGR_SRC_INIT(m_src_mgr);
 100e126:	2210      	movs	r2, #16
 100e128:	490b      	ldr	r1, [pc, #44]	; (100e158 <nrf_802154_serialization_init+0x34>)
 100e12a:	480c      	ldr	r0, [pc, #48]	; (100e15c <nrf_802154_serialization_init+0x38>)
 100e12c:	f005 fe75 	bl	1013e1a <nrf_802154_buffer_mgr_src_init>
    NRF_802154_BUFFER_MGR_DST_INIT(m_dst_mgr);
 100e130:	2304      	movs	r3, #4
 100e132:	4a0b      	ldr	r2, [pc, #44]	; (100e160 <nrf_802154_serialization_init+0x3c>)
 100e134:	490b      	ldr	r1, [pc, #44]	; (100e164 <nrf_802154_serialization_init+0x40>)
 100e136:	480c      	ldr	r0, [pc, #48]	; (100e168 <nrf_802154_serialization_init+0x44>)
 100e138:	f005 fe2a 	bl	1013d90 <nrf_802154_buffer_mgr_dst_init>
    SERIALIZATION_ERROR_INIT(error);

    buffer_mgr_init();
    nrf_802154_spinel_response_notifier_init();
 100e13c:	f7fa f8c2 	bl	10082c4 <nrf_802154_spinel_response_notifier_init>

    nrf_802154_ser_err_t ret = nrf_802154_backend_init();
 100e140:	f7fa f866 	bl	1008210 <nrf_802154_backend_init>

    SERIALIZATION_ERROR_CHECK(ret, error, bail);
 100e144:	2800      	cmp	r0, #0
 100e146:	da03      	bge.n	100e150 <nrf_802154_serialization_init+0x2c>

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100e148:	9001      	str	r0, [sp, #4]
 100e14a:	a801      	add	r0, sp, #4
 100e14c:	f003 fe57 	bl	1011dfe <nrf_802154_serialization_error>

    return;
}
 100e150:	b003      	add	sp, #12
 100e152:	f85d fb04 	ldr.w	pc, [sp], #4
 100e156:	bf00      	nop
 100e158:	21003774 	.word	0x21003774
 100e15c:	210037b4 	.word	0x210037b4
 100e160:	210037c8 	.word	0x210037c8
 100e164:	210039cc 	.word	0x210039cc
 100e168:	210039ec 	.word	0x210039ec

0100e16c <nrf_802154_spinel_decode_cmd>:
#include "nrf_802154_spinel_dec.h"
#include "nrf_802154_serialization_error.h"

nrf_802154_ser_err_t nrf_802154_spinel_decode_cmd(const void * p_packet_data,
                                                  size_t       packet_data_len)
{
 100e16c:	b500      	push	{lr}
 100e16e:	b089      	sub	sp, #36	; 0x24
    uint8_t          header;
    spinel_command_t cmd;
    const void     * p_cmd_data;
    size_t           cmd_data_len;

    spinel_ssize_t siz = spinel_datatype_unpack(p_packet_data,
 100e170:	ab07      	add	r3, sp, #28
 100e172:	9302      	str	r3, [sp, #8]
 100e174:	ab06      	add	r3, sp, #24
 100e176:	9301      	str	r3, [sp, #4]
 100e178:	ab05      	add	r3, sp, #20
 100e17a:	9300      	str	r3, [sp, #0]
 100e17c:	4a08      	ldr	r2, [pc, #32]	; (100e1a0 <nrf_802154_spinel_decode_cmd+0x34>)
 100e17e:	f10d 0313 	add.w	r3, sp, #19
 100e182:	f005 fd8f 	bl	1013ca4 <spinel_datatype_unpack>
                                                &header,
                                                &cmd,
                                                &p_cmd_data,
                                                &cmd_data_len);

    if (siz < 0)
 100e186:	2800      	cmp	r0, #0
 100e188:	db07      	blt.n	100e19a <nrf_802154_spinel_decode_cmd+0x2e>
    {
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
    }

    return nrf_802154_spinel_dispatch_cmd(cmd, p_cmd_data, cmd_data_len);
 100e18a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 100e18e:	9805      	ldr	r0, [sp, #20]
 100e190:	f005 ff48 	bl	1014024 <nrf_802154_spinel_dispatch_cmd>
}
 100e194:	b009      	add	sp, #36	; 0x24
 100e196:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e19a:	f06f 0002 	mvn.w	r0, #2
 100e19e:	e7f9      	b.n	100e194 <nrf_802154_spinel_decode_cmd+0x28>
 100e1a0:	01015bf0 	.word	0x01015bf0

0100e1a4 <last_tx_ack_started_send>:
     */
    mp_last_tx_ack = p_data;
}

static nrf_802154_ser_err_t last_tx_ack_started_send(void)
{
 100e1a4:	b507      	push	{r0, r1, r2, lr}
    nrf_802154_ser_err_t res           = NRF_802154_SERIALIZATION_ERROR_OK;
    const uint8_t      * p_last_tx_ack = mp_last_tx_ack;
 100e1a6:	4b09      	ldr	r3, [pc, #36]	; (100e1cc <last_tx_ack_started_send+0x28>)
 100e1a8:	6818      	ldr	r0, [r3, #0]

    NRF_802154_SPINEL_LOG_BANNER_CALLING();

    if (p_last_tx_ack != NULL)
 100e1aa:	b158      	cbz	r0, 100e1c4 <last_tx_ack_started_send+0x20>
    {
        mp_last_tx_ack = NULL;
 100e1ac:	2200      	movs	r2, #0
 100e1ae:	601a      	str	r2, [r3, #0]

        res = nrf_802154_spinel_send_cmd_prop_value_is(
 100e1b0:	7803      	ldrb	r3, [r0, #0]
 100e1b2:	2206      	movs	r2, #6
 100e1b4:	e9cd 0300 	strd	r0, r3, [sp]
 100e1b8:	2180      	movs	r1, #128	; 0x80
 100e1ba:	f643 4319 	movw	r3, #15385	; 0x3c19
 100e1be:	4804      	ldr	r0, [pc, #16]	; (100e1d0 <last_tx_ack_started_send+0x2c>)
 100e1c0:	f005 fefb 	bl	1013fba <nrf_802154_spinel_send>
            p_last_tx_ack,
            (size_t)(p_last_tx_ack[0]));
    }

    return res;
}
 100e1c4:	b003      	add	sp, #12
 100e1c6:	f85d fb04 	ldr.w	pc, [sp], #4
 100e1ca:	bf00      	nop
 100e1cc:	21003a08 	.word	0x21003a08
 100e1d0:	01015bf4 	.word	0x01015bf4

0100e1d4 <nrf_802154_cca_done>:
{
 100e1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100e1d6:	f643 4312 	movw	r3, #15378	; 0x3c12
 100e1da:	9000      	str	r0, [sp, #0]
 100e1dc:	2206      	movs	r2, #6
 100e1de:	2180      	movs	r1, #128	; 0x80
 100e1e0:	4805      	ldr	r0, [pc, #20]	; (100e1f8 <nrf_802154_cca_done+0x24>)
 100e1e2:	f005 feea 	bl	1013fba <nrf_802154_spinel_send>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100e1e6:	2800      	cmp	r0, #0
 100e1e8:	da03      	bge.n	100e1f2 <nrf_802154_cca_done+0x1e>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100e1ea:	9003      	str	r0, [sp, #12]
 100e1ec:	a803      	add	r0, sp, #12
 100e1ee:	f003 fe06 	bl	1011dfe <nrf_802154_serialization_error>
}
 100e1f2:	b005      	add	sp, #20
 100e1f4:	f85d fb04 	ldr.w	pc, [sp], #4
 100e1f8:	01015bf9 	.word	0x01015bf9

0100e1fc <nrf_802154_cca_failed>:
{
 100e1fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100e1fe:	f643 4313 	movw	r3, #15379	; 0x3c13
 100e202:	9000      	str	r0, [sp, #0]
 100e204:	2206      	movs	r2, #6
 100e206:	2180      	movs	r1, #128	; 0x80
 100e208:	4805      	ldr	r0, [pc, #20]	; (100e220 <nrf_802154_cca_failed+0x24>)
 100e20a:	f005 fed6 	bl	1013fba <nrf_802154_spinel_send>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100e20e:	2800      	cmp	r0, #0
 100e210:	da03      	bge.n	100e21a <nrf_802154_cca_failed+0x1e>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100e212:	9003      	str	r0, [sp, #12]
 100e214:	a803      	add	r0, sp, #12
 100e216:	f003 fdf2 	bl	1011dfe <nrf_802154_serialization_error>
}
 100e21a:	b005      	add	sp, #20
 100e21c:	f85d fb04 	ldr.w	pc, [sp], #4
 100e220:	01015bfe 	.word	0x01015bfe

0100e224 <nrf_802154_energy_detected>:
{
 100e224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100e226:	f643 4315 	movw	r3, #15381	; 0x3c15
 100e22a:	9000      	str	r0, [sp, #0]
 100e22c:	2206      	movs	r2, #6
 100e22e:	2180      	movs	r1, #128	; 0x80
 100e230:	4805      	ldr	r0, [pc, #20]	; (100e248 <nrf_802154_energy_detected+0x24>)
 100e232:	f005 fec2 	bl	1013fba <nrf_802154_spinel_send>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100e236:	2800      	cmp	r0, #0
 100e238:	da03      	bge.n	100e242 <nrf_802154_energy_detected+0x1e>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100e23a:	9003      	str	r0, [sp, #12]
 100e23c:	a803      	add	r0, sp, #12
 100e23e:	f003 fdde 	bl	1011dfe <nrf_802154_serialization_error>
}
 100e242:	b005      	add	sp, #20
 100e244:	f85d fb04 	ldr.w	pc, [sp], #4
 100e248:	01015bfe 	.word	0x01015bfe

0100e24c <nrf_802154_energy_detection_failed>:
{
 100e24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100e24e:	f643 4316 	movw	r3, #15382	; 0x3c16
 100e252:	9000      	str	r0, [sp, #0]
 100e254:	2206      	movs	r2, #6
 100e256:	2180      	movs	r1, #128	; 0x80
 100e258:	4805      	ldr	r0, [pc, #20]	; (100e270 <nrf_802154_energy_detection_failed+0x24>)
 100e25a:	f005 feae 	bl	1013fba <nrf_802154_spinel_send>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100e25e:	2800      	cmp	r0, #0
 100e260:	da03      	bge.n	100e26a <nrf_802154_energy_detection_failed+0x1e>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100e262:	9003      	str	r0, [sp, #12]
 100e264:	a803      	add	r0, sp, #12
 100e266:	f003 fdca 	bl	1011dfe <nrf_802154_serialization_error>
}
 100e26a:	b005      	add	sp, #20
 100e26c:	f85d fb04 	ldr.w	pc, [sp], #4
 100e270:	01015bfe 	.word	0x01015bfe

0100e274 <nrf_802154_tx_ack_started>:
    mp_last_tx_ack = p_data;
 100e274:	4b01      	ldr	r3, [pc, #4]	; (100e27c <nrf_802154_tx_ack_started+0x8>)
 100e276:	6018      	str	r0, [r3, #0]
}
 100e278:	4770      	bx	lr
 100e27a:	bf00      	nop
 100e27c:	21003a08 	.word	0x21003a08

0100e280 <nrf_802154_received_timestamp_raw>:

void nrf_802154_received_timestamp_raw(uint8_t * p_data,
                                       int8_t    power,
                                       uint8_t   lqi,
                                       uint64_t  time)
{
 100e280:	b5f0      	push	{r4, r5, r6, r7, lr}
 100e282:	b08b      	sub	sp, #44	; 0x2c
 100e284:	4605      	mov	r5, r0
 100e286:	460e      	mov	r6, r1
 100e288:	4617      	mov	r7, r2
    nrf_802154_ser_err_t res;
    uint32_t             local_data_handle;

    SERIALIZATION_ERROR_INIT(error);

    res = last_tx_ack_started_send();
 100e28a:	f7ff ff8b 	bl	100e1a4 <last_tx_ack_started_send>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100e28e:	1e04      	subs	r4, r0, #0
 100e290:	db0b      	blt.n	100e2aa <nrf_802154_received_timestamp_raw+0x2a>

    NRF_802154_SPINEL_LOG_BANNER_CALLING();
    NRF_802154_SPINEL_LOG_BUFF(p_data, p_data[0]);

    // Create a handle to the original frame buffer
    bool handle_added = nrf_802154_buffer_mgr_src_add(nrf_802154_spinel_src_buffer_mgr_get(),
 100e292:	f7ff ff43 	bl	100e11c <nrf_802154_spinel_src_buffer_mgr_get>
 100e296:	4629      	mov	r1, r5
 100e298:	aa08      	add	r2, sp, #32
 100e29a:	f005 fdc8 	bl	1013e2e <nrf_802154_buffer_mgr_src_add>
                                                      (void *)p_data,
                                                      &local_data_handle);

    if (!handle_added)
 100e29e:	b950      	cbnz	r0, 100e2b6 <nrf_802154_received_timestamp_raw+0x36>
    {
        // Handle could not be created. Drop the frame and throw an error
        nrf_802154_buffer_free_raw(p_data);
 100e2a0:	4628      	mov	r0, r5
 100e2a2:	f004 fe59 	bl	1012f58 <nrf_802154_buffer_free_raw>
        SERIALIZATION_ERROR(NRF_802154_SERIALIZATION_ERROR_NO_MEMORY, error, bail);
 100e2a6:	f06f 0408 	mvn.w	r4, #8

        SERIALIZATION_ERROR(res, error, bail);
    }

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100e2aa:	a809      	add	r0, sp, #36	; 0x24
 100e2ac:	9409      	str	r4, [sp, #36]	; 0x24
 100e2ae:	f003 fda6 	bl	1011dfe <nrf_802154_serialization_error>

    return;
}
 100e2b2:	b00b      	add	sp, #44	; 0x2c
 100e2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100e2b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 100e2ba:	e9cd 6703 	strd	r6, r7, [sp, #12]
 100e2be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 100e2c2:	782b      	ldrb	r3, [r5, #0]
 100e2c4:	2206      	movs	r2, #6
 100e2c6:	3304      	adds	r3, #4
 100e2c8:	e9cd 5301 	strd	r5, r3, [sp, #4]
 100e2cc:	9b08      	ldr	r3, [sp, #32]
 100e2ce:	2180      	movs	r1, #128	; 0x80
 100e2d0:	9300      	str	r3, [sp, #0]
 100e2d2:	4808      	ldr	r0, [pc, #32]	; (100e2f4 <nrf_802154_received_timestamp_raw+0x74>)
 100e2d4:	f643 4317 	movw	r3, #15383	; 0x3c17
 100e2d8:	f005 fe6f 	bl	1013fba <nrf_802154_spinel_send>
    if (res < 0)
 100e2dc:	1e04      	subs	r4, r0, #0
 100e2de:	dae8      	bge.n	100e2b2 <nrf_802154_received_timestamp_raw+0x32>
        nrf_802154_buffer_mgr_src_remove_by_buffer_handle(nrf_802154_spinel_src_buffer_mgr_get(),
 100e2e0:	f7ff ff1c 	bl	100e11c <nrf_802154_spinel_src_buffer_mgr_get>
 100e2e4:	9908      	ldr	r1, [sp, #32]
 100e2e6:	f005 fdba 	bl	1013e5e <nrf_802154_buffer_mgr_src_remove_by_buffer_handle>
        nrf_802154_buffer_free_raw(p_data);
 100e2ea:	4628      	mov	r0, r5
 100e2ec:	f004 fe34 	bl	1012f58 <nrf_802154_buffer_free_raw>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100e2f0:	e7db      	b.n	100e2aa <nrf_802154_received_timestamp_raw+0x2a>
 100e2f2:	bf00      	nop
 100e2f4:	01015c03 	.word	0x01015c03

0100e2f8 <nrf_802154_receive_failed>:

void nrf_802154_receive_failed(nrf_802154_rx_error_t error, uint32_t id)
{
 100e2f8:	b530      	push	{r4, r5, lr}
 100e2fa:	b085      	sub	sp, #20
 100e2fc:	4604      	mov	r4, r0
 100e2fe:	460d      	mov	r5, r1
    nrf_802154_ser_err_t res;

    SERIALIZATION_ERROR_INIT(ser_error);

    res = last_tx_ack_started_send();
 100e300:	f7ff ff50 	bl	100e1a4 <last_tx_ack_started_send>
    SERIALIZATION_ERROR_CHECK(res, ser_error, bail);
 100e304:	2800      	cmp	r0, #0
 100e306:	db0a      	blt.n	100e31e <nrf_802154_receive_failed+0x26>

    NRF_802154_SPINEL_LOG_BANNER_CALLING();
    NRF_802154_SPINEL_LOG_VAR("%u", error);

    // Serialize the call
    res = nrf_802154_spinel_send_cmd_prop_value_is(
 100e308:	f643 4318 	movw	r3, #15384	; 0x3c18
 100e30c:	2206      	movs	r2, #6
 100e30e:	2180      	movs	r1, #128	; 0x80
 100e310:	e9cd 4500 	strd	r4, r5, [sp]
 100e314:	4805      	ldr	r0, [pc, #20]	; (100e32c <nrf_802154_receive_failed+0x34>)
 100e316:	f005 fe50 	bl	1013fba <nrf_802154_spinel_send>
        SPINEL_PROP_VENDOR_NORDIC_NRF_802154_RECEIVE_FAILED,
        SPINEL_DATATYPE_NRF_802154_RECEIVE_FAILED,
        error,
        id);

    SERIALIZATION_ERROR_CHECK(res, ser_error, bail);
 100e31a:	2800      	cmp	r0, #0
 100e31c:	da03      	bge.n	100e326 <nrf_802154_receive_failed+0x2e>

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(ser_error);
 100e31e:	9003      	str	r0, [sp, #12]
 100e320:	a803      	add	r0, sp, #12
 100e322:	f003 fd6c 	bl	1011dfe <nrf_802154_serialization_error>
}
 100e326:	b005      	add	sp, #20
 100e328:	bd30      	pop	{r4, r5, pc}
 100e32a:	bf00      	nop
 100e32c:	01015c0f 	.word	0x01015c0f

0100e330 <nrf_802154_transmitted_raw>:

void nrf_802154_transmitted_raw(uint8_t                                   * p_frame,
                                const nrf_802154_transmit_done_metadata_t * p_metadata)
{
 100e330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t  remote_frame_handle;
    uint32_t  ack_handle = 0;
 100e334:	2300      	movs	r3, #0
{
 100e336:	4605      	mov	r5, r0
 100e338:	b092      	sub	sp, #72	; 0x48
 100e33a:	460c      	mov	r4, r1
    uint8_t * p_ack      = p_metadata->data.transmitted.p_ack;
 100e33c:	688e      	ldr	r6, [r1, #8]
    uint32_t  ack_handle = 0;
 100e33e:	9310      	str	r3, [sp, #64]	; 0x40

    NRF_802154_SPINEL_LOG_BANNER_CALLING();
    NRF_802154_SPINEL_LOG_BUFF(p_frame, p_frame[0]);

    // Search for the handle to the original frame buffer based on the local pointer
    bool frame_found = nrf_802154_buffer_mgr_dst_search_by_local_pointer(
 100e340:	f7ff fee8 	bl	100e114 <nrf_802154_spinel_dst_buffer_mgr_get>
 100e344:	4629      	mov	r1, r5
 100e346:	aa0f      	add	r2, sp, #60	; 0x3c
 100e348:	f005 fd4f 	bl	1013dea <nrf_802154_buffer_mgr_dst_search_by_local_pointer>
        nrf_802154_spinel_dst_buffer_mgr_get(),
        (void *)p_frame,
        &remote_frame_handle);

    // The handle is expected to be found, throw an error if it was not found
    SERIALIZATION_ERROR_IF(!frame_found,
 100e34c:	2800      	cmp	r0, #0
 100e34e:	d045      	beq.n	100e3dc <nrf_802154_transmitted_raw+0xac>
                           NRF_802154_SERIALIZATION_ERROR_INVALID_BUFFER,
                           error,
                           bail);

    if (p_ack != NULL)
 100e350:	b186      	cbz	r6, 100e374 <nrf_802154_transmitted_raw+0x44>
    {
        // Create a handle to the original Ack buffer
        bool ack_handle_added = nrf_802154_buffer_mgr_src_add(
 100e352:	f7ff fee3 	bl	100e11c <nrf_802154_spinel_src_buffer_mgr_get>
 100e356:	4631      	mov	r1, r6
 100e358:	aa10      	add	r2, sp, #64	; 0x40
 100e35a:	f005 fd68 	bl	1013e2e <nrf_802154_buffer_mgr_src_add>
            nrf_802154_spinel_src_buffer_mgr_get(),
            (void *)p_ack,
            &ack_handle);

        if (!ack_handle_added)
 100e35e:	b948      	cbnz	r0, 100e374 <nrf_802154_transmitted_raw+0x44>
        {
            // Drop the transmitted frame and throw an error if Ack could not be stored
            local_transmitted_frame_ptr_free((void *)p_frame);
 100e360:	4628      	mov	r0, r5
 100e362:	f005 fe4f 	bl	1014004 <local_transmitted_frame_ptr_free>
            SERIALIZATION_ERROR(NRF_802154_SERIALIZATION_ERROR_NO_MEMORY, error, bail);
 100e366:	f06f 0408 	mvn.w	r4, #8

    // Throw an error if serialization failed
    SERIALIZATION_ERROR_CHECK(res, error, bail);

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100e36a:	a811      	add	r0, sp, #68	; 0x44
 100e36c:	9411      	str	r4, [sp, #68]	; 0x44
 100e36e:	f003 fd46 	bl	1011dfe <nrf_802154_serialization_error>

    return;
 100e372:	e02e      	b.n	100e3d2 <nrf_802154_transmitted_raw+0xa2>
    nrf_802154_ser_err_t res = nrf_802154_spinel_send_cmd_prop_value_is(
 100e374:	782a      	ldrb	r2, [r5, #0]
 100e376:	7827      	ldrb	r7, [r4, #0]
 100e378:	f894 c001 	ldrb.w	ip, [r4, #1]
 100e37c:	f894 e00c 	ldrb.w	lr, [r4, #12]
 100e380:	f994 800d 	ldrsb.w	r8, [r4, #13]
 100e384:	f894 900e 	ldrb.w	r9, [r4, #14]
 100e388:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 100e38c:	68a4      	ldr	r4, [r4, #8]
 100e38e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 100e390:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 100e394:	3205      	adds	r2, #5
 100e396:	b1fc      	cbz	r4, 100e3d8 <nrf_802154_transmitted_raw+0xa8>
 100e398:	7823      	ldrb	r3, [r4, #0]
 100e39a:	3305      	adds	r3, #5
 100e39c:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
 100e3a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 100e3a4:	f643 431d 	movw	r3, #15389	; 0x3c1d
 100e3a8:	2180      	movs	r1, #128	; 0x80
 100e3aa:	e9cd ce04 	strd	ip, lr, [sp, #16]
 100e3ae:	e9cd 2702 	strd	r2, r7, [sp, #8]
 100e3b2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 100e3b6:	2206      	movs	r2, #6
 100e3b8:	e9cd 6500 	strd	r6, r5, [sp]
 100e3bc:	4809      	ldr	r0, [pc, #36]	; (100e3e4 <nrf_802154_transmitted_raw+0xb4>)
 100e3be:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 100e3c2:	f005 fdfa 	bl	1013fba <nrf_802154_spinel_send>
 100e3c6:	4604      	mov	r4, r0
    local_transmitted_frame_ptr_free((void *)p_frame);
 100e3c8:	4628      	mov	r0, r5
 100e3ca:	f005 fe1b 	bl	1014004 <local_transmitted_frame_ptr_free>
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100e3ce:	2c00      	cmp	r4, #0
 100e3d0:	dbcb      	blt.n	100e36a <nrf_802154_transmitted_raw+0x3a>
}
 100e3d2:	b012      	add	sp, #72	; 0x48
 100e3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nrf_802154_ser_err_t res = nrf_802154_spinel_send_cmd_prop_value_is(
 100e3d8:	2304      	movs	r3, #4
 100e3da:	e7df      	b.n	100e39c <nrf_802154_transmitted_raw+0x6c>
    SERIALIZATION_ERROR_IF(!frame_found,
 100e3dc:	f06f 0407 	mvn.w	r4, #7
 100e3e0:	e7c3      	b.n	100e36a <nrf_802154_transmitted_raw+0x3a>
 100e3e2:	bf00      	nop
 100e3e4:	01015c15 	.word	0x01015c15

0100e3e8 <nrf_802154_transmit_failed>:

void nrf_802154_transmit_failed(uint8_t                                   * p_frame,
                                nrf_802154_tx_error_t                       tx_error,
                                const nrf_802154_transmit_done_metadata_t * p_metadata)
{
 100e3e8:	b570      	push	{r4, r5, r6, lr}
 100e3ea:	4604      	mov	r4, r0
 100e3ec:	b088      	sub	sp, #32
 100e3ee:	460e      	mov	r6, r1
 100e3f0:	4615      	mov	r5, r2

    NRF_802154_SPINEL_LOG_BANNER_CALLING();
    NRF_802154_SPINEL_LOG_BUFF(p_frame, p_frame[0]);

    // Search for the handle to the original frame buffer based on the local pointer
    bool frame_found = nrf_802154_buffer_mgr_dst_search_by_local_pointer(
 100e3f2:	f7ff fe8f 	bl	100e114 <nrf_802154_spinel_dst_buffer_mgr_get>
 100e3f6:	4621      	mov	r1, r4
 100e3f8:	aa06      	add	r2, sp, #24
 100e3fa:	f005 fcf6 	bl	1013dea <nrf_802154_buffer_mgr_dst_search_by_local_pointer>
        nrf_802154_spinel_dst_buffer_mgr_get(),
        (void *)p_frame,
        &remote_frame_handle);

    // The handle is expected to be found, throw an error if it was not found
    SERIALIZATION_ERROR_IF(!frame_found,
 100e3fe:	b1e8      	cbz	r0, 100e43c <nrf_802154_transmit_failed+0x54>
                           NRF_802154_SERIALIZATION_ERROR_INVALID_BUFFER,
                           error,
                           bail);

    // Serialize the call
    nrf_802154_ser_err_t res = nrf_802154_spinel_send_cmd_prop_value_is(
 100e400:	786b      	ldrb	r3, [r5, #1]
 100e402:	2206      	movs	r2, #6
 100e404:	9305      	str	r3, [sp, #20]
 100e406:	782b      	ldrb	r3, [r5, #0]
 100e408:	2180      	movs	r1, #128	; 0x80
 100e40a:	e9cd 6303 	strd	r6, r3, [sp, #12]
 100e40e:	7823      	ldrb	r3, [r4, #0]
 100e410:	480c      	ldr	r0, [pc, #48]	; (100e444 <nrf_802154_transmit_failed+0x5c>)
 100e412:	3305      	adds	r3, #5
 100e414:	e9cd 4301 	strd	r4, r3, [sp, #4]
 100e418:	9b06      	ldr	r3, [sp, #24]
 100e41a:	9300      	str	r3, [sp, #0]
 100e41c:	f643 431e 	movw	r3, #15390	; 0x3c1e
 100e420:	f005 fdcb 	bl	1013fba <nrf_802154_spinel_send>
 100e424:	4605      	mov	r5, r0
        SPINEL_PROP_VENDOR_NORDIC_NRF_802154_TRANSMIT_FAILED,
        SPINEL_DATATYPE_NRF_802154_TRANSMIT_FAILED,
        NRF_802154_TRANSMIT_FAILED_ENCODE(remote_frame_handle, p_frame, tx_error, *p_metadata));

    // Free the local frame pointer no matter the result of serialization
    local_transmitted_frame_ptr_free((void *)p_frame);
 100e426:	4620      	mov	r0, r4
 100e428:	f005 fdec 	bl	1014004 <local_transmitted_frame_ptr_free>

    // Throw an error if serialization failed
    SERIALIZATION_ERROR_CHECK(res, error, bail);
 100e42c:	2d00      	cmp	r5, #0
 100e42e:	da03      	bge.n	100e438 <nrf_802154_transmit_failed+0x50>

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 100e430:	a807      	add	r0, sp, #28
 100e432:	9507      	str	r5, [sp, #28]
 100e434:	f003 fce3 	bl	1011dfe <nrf_802154_serialization_error>

    return;
}
 100e438:	b008      	add	sp, #32
 100e43a:	bd70      	pop	{r4, r5, r6, pc}
    SERIALIZATION_ERROR_IF(!frame_found,
 100e43c:	f06f 0507 	mvn.w	r5, #7
 100e440:	e7f6      	b.n	100e430 <nrf_802154_transmit_failed+0x48>
 100e442:	bf00      	nop
 100e444:	01015c29 	.word	0x01015c29

0100e448 <nrf_802154_spinel_decode_cmd_prop_value_set>:

#endif // NRF_802154_DELAYED_TRX_ENABLED && NRF_802154_IE_WRITER_ENABLED

nrf_802154_ser_err_t nrf_802154_spinel_decode_cmd_prop_value_set(const void * p_cmd_data,
                                                                 size_t       cmd_data_len)
{
 100e448:	b530      	push	{r4, r5, lr}
 100e44a:	b0a3      	sub	sp, #140	; 0x8c
    spinel_prop_key_t property;
    const void      * p_property_data;
    size_t            property_data_len;
    spinel_ssize_t    siz;

    siz = spinel_datatype_unpack(p_cmd_data,
 100e44c:	ab0f      	add	r3, sp, #60	; 0x3c
 100e44e:	9301      	str	r3, [sp, #4]
 100e450:	ab0e      	add	r3, sp, #56	; 0x38
 100e452:	9300      	str	r3, [sp, #0]
 100e454:	4aa1      	ldr	r2, [pc, #644]	; (100e6dc <nrf_802154_spinel_decode_cmd_prop_value_set+0x294>)
 100e456:	ab0d      	add	r3, sp, #52	; 0x34
 100e458:	f005 fc24 	bl	1013ca4 <spinel_datatype_unpack>
                                 SPINEL_DATATYPE_UINT_PACKED_S SPINEL_DATATYPE_DATA_S,
                                 &property,
                                 &p_property_data,
                                 &property_data_len);

    if (siz < 0)
 100e45c:	2800      	cmp	r0, #0
 100e45e:	f2c0 85f6 	blt.w	100f04e <nrf_802154_spinel_decode_cmd_prop_value_set+0xc06>
    {
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
    }

    switch (property)
 100e462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100e464:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
 100e468:	3b01      	subs	r3, #1
 100e46a:	2b3e      	cmp	r3, #62	; 0x3e
 100e46c:	f200 85f3 	bhi.w	100f056 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc0e>
 100e470:	e8df f013 	tbh	[pc, r3, lsl #1]
 100e474:	0056003f 	.word	0x0056003f
 100e478:	00a6009b 	.word	0x00a6009b
 100e47c:	023e0255 	.word	0x023e0255
 100e480:	00d400bd 	.word	0x00d400bd
 100e484:	011c00f8 	.word	0x011c00f8
 100e488:	01680146 	.word	0x01680146
 100e48c:	01a40186 	.word	0x01a40186
 100e490:	01d901c2 	.word	0x01d901c2
 100e494:	05f101f0 	.word	0x05f101f0
 100e498:	022705f1 	.word	0x022705f1
 100e49c:	05f105f1 	.word	0x05f105f1
 100e4a0:	05f105f1 	.word	0x05f105f1
 100e4a4:	043905f1 	.word	0x043905f1
 100e4a8:	0260037d 	.word	0x0260037d
 100e4ac:	05f105f1 	.word	0x05f105f1
 100e4b0:	04b50463 	.word	0x04b50463
 100e4b4:	046f04e8 	.word	0x046f04e8
 100e4b8:	0494047c 	.word	0x0494047c
 100e4bc:	041e03bb 	.word	0x041e03bb
 100e4c0:	00840061 	.word	0x00840061
 100e4c4:	052b0513 	.word	0x052b0513
 100e4c8:	057a0559 	.word	0x057a0559
 100e4cc:	02c602ae 	.word	0x02c602ae
 100e4d0:	02e902d1 	.word	0x02e902d1
 100e4d4:	030b02f4 	.word	0x030b02f4
 100e4d8:	01fb05c9 	.word	0x01fb05c9
 100e4dc:	004b0206 	.word	0x004b0206
 100e4e0:	05f105f1 	.word	0x05f105f1
 100e4e4:	032e0316 	.word	0x032e0316
 100e4e8:	03500339 	.word	0x03500339
 100e4ec:	0372035b 	.word	0x0372035b
 100e4f0:	05b0      	.short	0x05b0
    sleep_response = nrf_802154_sleep();
 100e4f2:	f004 fceb 	bl	1012ecc <nrf_802154_sleep>
    return nrf_802154_spinel_send_cmd_prop_value_is(SPINEL_PROP_VENDOR_NORDIC_NRF_802154_SLEEP,
 100e4f6:	f643 4301 	movw	r3, #15361	; 0x3c01
 100e4fa:	9000      	str	r0, [sp, #0]
 100e4fc:	2206      	movs	r2, #6
 100e4fe:	2180      	movs	r1, #128	; 0x80
 100e500:	4877      	ldr	r0, [pc, #476]	; (100e6e0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x298>)
 100e502:	f005 fd5a 	bl	1013fba <nrf_802154_spinel_send>
                                      spinel_prop_key_to_cstr(property),
                                      property);
            return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;

    }
}
 100e506:	b023      	add	sp, #140	; 0x8c
 100e508:	bd30      	pop	{r4, r5, pc}
    nrf_802154_sleep_error_t sleep_response = nrf_802154_sleep_if_idle();
 100e50a:	f004 fce2 	bl	1012ed2 <nrf_802154_sleep_if_idle>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e50e:	f643 4336 	movw	r3, #15414	; 0x3c36
 100e512:	9000      	str	r0, [sp, #0]
 100e514:	2206      	movs	r2, #6
 100e516:	2180      	movs	r1, #128	; 0x80
 100e518:	4872      	ldr	r0, [pc, #456]	; (100e6e4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x29c>)
 100e51a:	f005 fd4e 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_sleep_if_idle(p_property_data, property_data_len);
 100e51e:	e7f2      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    receive_response = nrf_802154_receive();
 100e520:	f004 fcdf 	bl	1012ee2 <nrf_802154_receive>
    return nrf_802154_spinel_send_cmd_prop_value_is(SPINEL_PROP_VENDOR_NORDIC_NRF_802154_RECEIVE,
 100e524:	f643 4302 	movw	r3, #15362	; 0x3c02
 100e528:	9000      	str	r0, [sp, #0]
 100e52a:	2206      	movs	r2, #6
 100e52c:	2180      	movs	r1, #128	; 0x80
 100e52e:	486c      	ldr	r0, [pc, #432]	; (100e6e0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x298>)
 100e530:	f005 fd43 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_receive(p_property_data, property_data_len);
 100e534:	e7e7      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e536:	ab14      	add	r3, sp, #80	; 0x50
 100e538:	9302      	str	r3, [sp, #8]
 100e53a:	ab12      	add	r3, sp, #72	; 0x48
 100e53c:	9301      	str	r3, [sp, #4]
 100e53e:	ab13      	add	r3, sp, #76	; 0x4c
 100e540:	9300      	str	r3, [sp, #0]
 100e542:	4a69      	ldr	r2, [pc, #420]	; (100e6e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2a0>)
 100e544:	ab16      	add	r3, sp, #88	; 0x58
 100e546:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e54a:	f005 fbab 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e54e:	2800      	cmp	r0, #0
 100e550:	db11      	blt.n	100e576 <nrf_802154_spinel_decode_cmd_prop_value_set+0x12e>
    bool result = nrf_802154_receive_at(rx_time, timeout, channel, id);
 100e552:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 100e556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100e558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 100e55a:	9300      	str	r3, [sp, #0]
 100e55c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 100e560:	f004 fcec 	bl	1012f3c <nrf_802154_receive_at>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e564:	f643 4327 	movw	r3, #15399	; 0x3c27
 100e568:	9000      	str	r0, [sp, #0]
 100e56a:	2206      	movs	r2, #6
 100e56c:	2180      	movs	r1, #128	; 0x80
 100e56e:	485c      	ldr	r0, [pc, #368]	; (100e6e0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x298>)
 100e570:	f005 fd23 	bl	1013fba <nrf_802154_spinel_send>
 100e574:	e7c7      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e576:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_receive_at(p_property_data, property_data_len);
 100e57a:	e7c4      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e57c:	4a5b      	ldr	r2, [pc, #364]	; (100e6ec <nrf_802154_spinel_decode_cmd_prop_value_set+0x2a4>)
 100e57e:	ab16      	add	r3, sp, #88	; 0x58
 100e580:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e584:	f005 fb8e 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e588:	2800      	cmp	r0, #0
 100e58a:	db0b      	blt.n	100e5a4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x15c>
    bool result = nrf_802154_receive_at_cancel(id);
 100e58c:	9816      	ldr	r0, [sp, #88]	; 0x58
 100e58e:	f004 fcd7 	bl	1012f40 <nrf_802154_receive_at_cancel>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e592:	f643 4328 	movw	r3, #15400	; 0x3c28
 100e596:	9000      	str	r0, [sp, #0]
 100e598:	2206      	movs	r2, #6
 100e59a:	2180      	movs	r1, #128	; 0x80
 100e59c:	4850      	ldr	r0, [pc, #320]	; (100e6e0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x298>)
 100e59e:	f005 fd0c 	bl	1013fba <nrf_802154_spinel_send>
 100e5a2:	e7b0      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e5a4:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_receive_at_cancel(p_property_data,
 100e5a8:	e7ad      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    uint8_t channel = nrf_802154_channel_get();
 100e5aa:	f004 fc77 	bl	1012e9c <nrf_802154_channel_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e5ae:	f643 4303 	movw	r3, #15363	; 0x3c03
 100e5b2:	9000      	str	r0, [sp, #0]
 100e5b4:	2206      	movs	r2, #6
 100e5b6:	2180      	movs	r1, #128	; 0x80
 100e5b8:	484a      	ldr	r0, [pc, #296]	; (100e6e4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x29c>)
 100e5ba:	f005 fcfe 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_channel_get(p_property_data, property_data_len);
 100e5be:	e7a2      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e5c0:	4a4b      	ldr	r2, [pc, #300]	; (100e6f0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2a8>)
 100e5c2:	ab16      	add	r3, sp, #88	; 0x58
 100e5c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e5c8:	f005 fb6c 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e5cc:	2800      	cmp	r0, #0
 100e5ce:	db0b      	blt.n	100e5e8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x1a0>
    nrf_802154_channel_set(channel);
 100e5d0:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 100e5d4:	f004 fc52 	bl	1012e7c <nrf_802154_channel_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100e5d8:	2300      	movs	r3, #0
 100e5da:	2206      	movs	r2, #6
 100e5dc:	2180      	movs	r1, #128	; 0x80
 100e5de:	9300      	str	r3, [sp, #0]
 100e5e0:	4844      	ldr	r0, [pc, #272]	; (100e6f4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2ac>)
 100e5e2:	f005 fcea 	bl	1013fba <nrf_802154_spinel_send>
 100e5e6:	e78e      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e5e8:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_channel_set(p_property_data, property_data_len);
 100e5ec:	e78b      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e5ee:	4a42      	ldr	r2, [pc, #264]	; (100e6f8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b0>)
 100e5f0:	ab16      	add	r3, sp, #88	; 0x58
 100e5f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e5f6:	f005 fb55 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e5fa:	2800      	cmp	r0, #0
 100e5fc:	db0b      	blt.n	100e616 <nrf_802154_spinel_decode_cmd_prop_value_set+0x1ce>
    nrf_802154_auto_pending_bit_set(enabled);
 100e5fe:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 100e602:	f004 fcbd 	bl	1012f80 <nrf_802154_auto_pending_bit_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100e606:	2300      	movs	r3, #0
 100e608:	2206      	movs	r2, #6
 100e60a:	2180      	movs	r1, #128	; 0x80
 100e60c:	9300      	str	r3, [sp, #0]
 100e60e:	4839      	ldr	r0, [pc, #228]	; (100e6f4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2ac>)
 100e610:	f005 fcd3 	bl	1013fba <nrf_802154_spinel_send>
 100e614:	e777      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e616:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_auto_pending_bit_set(p_property_data,
 100e61a:	e774      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e61c:	ab16      	add	r3, sp, #88	; 0x58
 100e61e:	9300      	str	r3, [sp, #0]
 100e620:	4a36      	ldr	r2, [pc, #216]	; (100e6fc <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b4>)
 100e622:	ab14      	add	r3, sp, #80	; 0x50
 100e624:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e628:	f005 fb3c 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e62c:	2800      	cmp	r0, #0
 100e62e:	db13      	blt.n	100e658 <nrf_802154_spinel_decode_cmd_prop_value_set+0x210>
    if (addr_len == EXTENDED_ADDRESS_SIZE)
 100e630:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100e632:	2b08      	cmp	r3, #8
 100e634:	d00e      	beq.n	100e654 <nrf_802154_spinel_decode_cmd_prop_value_set+0x20c>
    else if (addr_len == SHORT_ADDRESS_SIZE)
 100e636:	2b02      	cmp	r3, #2
 100e638:	d111      	bne.n	100e65e <nrf_802154_spinel_decode_cmd_prop_value_set+0x216>
        extended = false;
 100e63a:	2100      	movs	r1, #0
    result = nrf_802154_pending_bit_for_addr_set(p_addr, extended);
 100e63c:	9814      	ldr	r0, [sp, #80]	; 0x50
 100e63e:	f004 fca1 	bl	1012f84 <nrf_802154_pending_bit_for_addr_set>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e642:	f643 4308 	movw	r3, #15368	; 0x3c08
 100e646:	9000      	str	r0, [sp, #0]
 100e648:	2206      	movs	r2, #6
 100e64a:	2180      	movs	r1, #128	; 0x80
 100e64c:	4824      	ldr	r0, [pc, #144]	; (100e6e0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x298>)
 100e64e:	f005 fcb4 	bl	1013fba <nrf_802154_spinel_send>
 100e652:	e758      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        extended = true;
 100e654:	2101      	movs	r1, #1
 100e656:	e7f1      	b.n	100e63c <nrf_802154_spinel_decode_cmd_prop_value_set+0x1f4>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e658:	f06f 0002 	mvn.w	r0, #2
 100e65c:	e753      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_REQUEST_INVALID;
 100e65e:	f06f 0006 	mvn.w	r0, #6
            return spinel_decode_prop_nrf_802154_pending_bit_for_addr_set(p_property_data,
 100e662:	e750      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e664:	ab16      	add	r3, sp, #88	; 0x58
 100e666:	9300      	str	r3, [sp, #0]
 100e668:	4a24      	ldr	r2, [pc, #144]	; (100e6fc <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b4>)
 100e66a:	ab14      	add	r3, sp, #80	; 0x50
 100e66c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e670:	f005 fb18 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e674:	2800      	cmp	r0, #0
 100e676:	db13      	blt.n	100e6a0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x258>
    if (addr_len == EXTENDED_ADDRESS_SIZE)
 100e678:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100e67a:	2b08      	cmp	r3, #8
 100e67c:	d00e      	beq.n	100e69c <nrf_802154_spinel_decode_cmd_prop_value_set+0x254>
    else if (addr_len == SHORT_ADDRESS_SIZE)
 100e67e:	2b02      	cmp	r3, #2
 100e680:	d111      	bne.n	100e6a6 <nrf_802154_spinel_decode_cmd_prop_value_set+0x25e>
        extended = false;
 100e682:	2100      	movs	r1, #0
    result = nrf_802154_pending_bit_for_addr_clear(p_addr, extended);
 100e684:	9814      	ldr	r0, [sp, #80]	; 0x50
 100e686:	f004 fc86 	bl	1012f96 <nrf_802154_pending_bit_for_addr_clear>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e68a:	f643 4309 	movw	r3, #15369	; 0x3c09
 100e68e:	9000      	str	r0, [sp, #0]
 100e690:	2206      	movs	r2, #6
 100e692:	2180      	movs	r1, #128	; 0x80
 100e694:	4812      	ldr	r0, [pc, #72]	; (100e6e0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x298>)
 100e696:	f005 fc90 	bl	1013fba <nrf_802154_spinel_send>
 100e69a:	e734      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        extended = true;
 100e69c:	2101      	movs	r1, #1
 100e69e:	e7f1      	b.n	100e684 <nrf_802154_spinel_decode_cmd_prop_value_set+0x23c>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e6a0:	f06f 0002 	mvn.w	r0, #2
 100e6a4:	e72f      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_REQUEST_INVALID;
 100e6a6:	f06f 0006 	mvn.w	r0, #6
            return spinel_decode_prop_nrf_802154_pending_bit_for_addr_clear(p_property_data,
 100e6aa:	e72c      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e6ac:	4a12      	ldr	r2, [pc, #72]	; (100e6f8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2b0>)
 100e6ae:	ab16      	add	r3, sp, #88	; 0x58
 100e6b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e6b4:	f005 faf6 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e6b8:	2800      	cmp	r0, #0
 100e6ba:	db0b      	blt.n	100e6d4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x28c>
    nrf_802154_pending_bit_for_addr_reset(extended);
 100e6bc:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 100e6c0:	f004 fc6c 	bl	1012f9c <nrf_802154_pending_bit_for_addr_reset>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100e6c4:	2300      	movs	r3, #0
 100e6c6:	2206      	movs	r2, #6
 100e6c8:	2180      	movs	r1, #128	; 0x80
 100e6ca:	9300      	str	r3, [sp, #0]
 100e6cc:	4809      	ldr	r0, [pc, #36]	; (100e6f4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x2ac>)
 100e6ce:	f005 fc74 	bl	1013fba <nrf_802154_spinel_send>
 100e6d2:	e718      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e6d4:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_pending_bit_for_addr_reset(p_property_data,
 100e6d8:	e715      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
 100e6da:	bf00      	nop
 100e6dc:	01015bf1 	.word	0x01015bf1
 100e6e0:	01015bf9 	.word	0x01015bf9
 100e6e4:	01015bfe 	.word	0x01015bfe
 100e6e8:	01015c35 	.word	0x01015c35
 100e6ec:	01015c38 	.word	0x01015c38
 100e6f0:	01015c71 	.word	0x01015c71
 100e6f4:	01015c3a 	.word	0x01015c3a
 100e6f8:	01015c82 	.word	0x01015c82
 100e6fc:	01015bf2 	.word	0x01015bf2
    siz = spinel_datatype_unpack(p_property_data,
 100e700:	4aaa      	ldr	r2, [pc, #680]	; (100e9ac <nrf_802154_spinel_decode_cmd_prop_value_set+0x564>)
 100e702:	ab16      	add	r3, sp, #88	; 0x58
 100e704:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e708:	f005 facc 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e70c:	2800      	cmp	r0, #0
 100e70e:	db16      	blt.n	100e73e <nrf_802154_spinel_decode_cmd_prop_value_set+0x2f6>
    switch (match_method)
 100e710:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 100e714:	2802      	cmp	r0, #2
 100e716:	d908      	bls.n	100e72a <nrf_802154_spinel_decode_cmd_prop_value_set+0x2e2>
            return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_INVALID_ARGUMENT);
 100e718:	2303      	movs	r3, #3
 100e71a:	2206      	movs	r2, #6
 100e71c:	9300      	str	r3, [sp, #0]
 100e71e:	2180      	movs	r1, #128	; 0x80
 100e720:	2300      	movs	r3, #0
 100e722:	48a3      	ldr	r0, [pc, #652]	; (100e9b0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x568>)
 100e724:	f005 fc49 	bl	1013fba <nrf_802154_spinel_send>
 100e728:	e6ed      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    nrf_802154_src_addr_matching_method_set(match_method);
 100e72a:	f004 fc1b 	bl	1012f64 <nrf_802154_src_addr_matching_method_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100e72e:	2300      	movs	r3, #0
 100e730:	2206      	movs	r2, #6
 100e732:	2180      	movs	r1, #128	; 0x80
 100e734:	9300      	str	r3, [sp, #0]
 100e736:	489e      	ldr	r0, [pc, #632]	; (100e9b0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x568>)
 100e738:	f005 fc3f 	bl	1013fba <nrf_802154_spinel_send>
 100e73c:	e6e3      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e73e:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_src_addr_matching_method_set(p_property_data,
 100e742:	e6e0      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e744:	ab16      	add	r3, sp, #88	; 0x58
 100e746:	9300      	str	r3, [sp, #0]
 100e748:	4a9a      	ldr	r2, [pc, #616]	; (100e9b4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x56c>)
 100e74a:	ab14      	add	r3, sp, #80	; 0x50
 100e74c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e750:	f005 faa8 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e754:	2800      	cmp	r0, #0
 100e756:	db0d      	blt.n	100e774 <nrf_802154_spinel_decode_cmd_prop_value_set+0x32c>
    if (pan_id_len != PAN_ID_SIZE)
 100e758:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100e75a:	2b02      	cmp	r3, #2
 100e75c:	d10d      	bne.n	100e77a <nrf_802154_spinel_decode_cmd_prop_value_set+0x332>
    nrf_802154_pan_id_set((uint8_t *)p_pan_id);
 100e75e:	9814      	ldr	r0, [sp, #80]	; 0x50
 100e760:	f004 fbae 	bl	1012ec0 <nrf_802154_pan_id_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100e764:	2300      	movs	r3, #0
 100e766:	2206      	movs	r2, #6
 100e768:	2180      	movs	r1, #128	; 0x80
 100e76a:	9300      	str	r3, [sp, #0]
 100e76c:	4890      	ldr	r0, [pc, #576]	; (100e9b0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x568>)
 100e76e:	f005 fc24 	bl	1013fba <nrf_802154_spinel_send>
 100e772:	e6c8      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e774:	f06f 0002 	mvn.w	r0, #2
 100e778:	e6c5      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_REQUEST_INVALID;
 100e77a:	f06f 0006 	mvn.w	r0, #6
            return spinel_decode_prop_nrf_802154_pan_id_set(p_property_data, property_data_len);
 100e77e:	e6c2      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e780:	ab16      	add	r3, sp, #88	; 0x58
 100e782:	9300      	str	r3, [sp, #0]
 100e784:	4a8b      	ldr	r2, [pc, #556]	; (100e9b4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x56c>)
 100e786:	ab14      	add	r3, sp, #80	; 0x50
 100e788:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e78c:	f005 fa8a 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e790:	2800      	cmp	r0, #0
 100e792:	db0d      	blt.n	100e7b0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x368>
    if (short_address_len != SHORT_ADDRESS_SIZE)
 100e794:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100e796:	2b02      	cmp	r3, #2
 100e798:	d10d      	bne.n	100e7b6 <nrf_802154_spinel_decode_cmd_prop_value_set+0x36e>
    nrf_802154_short_address_set((uint8_t *)p_short_address);
 100e79a:	9814      	ldr	r0, [sp, #80]	; 0x50
 100e79c:	f004 fb94 	bl	1012ec8 <nrf_802154_short_address_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100e7a0:	2300      	movs	r3, #0
 100e7a2:	2206      	movs	r2, #6
 100e7a4:	2180      	movs	r1, #128	; 0x80
 100e7a6:	9300      	str	r3, [sp, #0]
 100e7a8:	4881      	ldr	r0, [pc, #516]	; (100e9b0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x568>)
 100e7aa:	f005 fc06 	bl	1013fba <nrf_802154_spinel_send>
 100e7ae:	e6aa      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e7b0:	f06f 0002 	mvn.w	r0, #2
 100e7b4:	e6a7      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_REQUEST_INVALID;
 100e7b6:	f06f 0006 	mvn.w	r0, #6
            return spinel_decode_prop_nrf_802154_short_address_set(p_property_data,
 100e7ba:	e6a4      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e7bc:	ab16      	add	r3, sp, #88	; 0x58
 100e7be:	9300      	str	r3, [sp, #0]
 100e7c0:	4a7c      	ldr	r2, [pc, #496]	; (100e9b4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x56c>)
 100e7c2:	ab14      	add	r3, sp, #80	; 0x50
 100e7c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e7c8:	f005 fa6c 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e7cc:	2800      	cmp	r0, #0
 100e7ce:	db0d      	blt.n	100e7ec <nrf_802154_spinel_decode_cmd_prop_value_set+0x3a4>
    if (extended_address_len != EXTENDED_ADDRESS_SIZE)
 100e7d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100e7d2:	2b08      	cmp	r3, #8
 100e7d4:	d10d      	bne.n	100e7f2 <nrf_802154_spinel_decode_cmd_prop_value_set+0x3aa>
    nrf_802154_extended_address_set((uint8_t *)p_extended_address);
 100e7d6:	9814      	ldr	r0, [sp, #80]	; 0x50
 100e7d8:	f004 fb74 	bl	1012ec4 <nrf_802154_extended_address_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100e7dc:	2300      	movs	r3, #0
 100e7de:	2206      	movs	r2, #6
 100e7e0:	2180      	movs	r1, #128	; 0x80
 100e7e2:	9300      	str	r3, [sp, #0]
 100e7e4:	4872      	ldr	r0, [pc, #456]	; (100e9b0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x568>)
 100e7e6:	f005 fbe8 	bl	1013fba <nrf_802154_spinel_send>
 100e7ea:	e68c      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e7ec:	f06f 0002 	mvn.w	r0, #2
 100e7f0:	e689      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_REQUEST_INVALID;
 100e7f2:	f06f 0006 	mvn.w	r0, #6
            return spinel_decode_prop_nrf_802154_extended_address_set(p_property_data,
 100e7f6:	e686      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e7f8:	4a6f      	ldr	r2, [pc, #444]	; (100e9b8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x570>)
 100e7fa:	ab16      	add	r3, sp, #88	; 0x58
 100e7fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e800:	f005 fa50 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e804:	2800      	cmp	r0, #0
 100e806:	db0b      	blt.n	100e820 <nrf_802154_spinel_decode_cmd_prop_value_set+0x3d8>
    nrf_802154_pan_coord_set(enabled);
 100e808:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 100e80c:	f004 fba8 	bl	1012f60 <nrf_802154_pan_coord_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100e810:	2300      	movs	r3, #0
 100e812:	2206      	movs	r2, #6
 100e814:	2180      	movs	r1, #128	; 0x80
 100e816:	9300      	str	r3, [sp, #0]
 100e818:	4865      	ldr	r0, [pc, #404]	; (100e9b0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x568>)
 100e81a:	f005 fbce 	bl	1013fba <nrf_802154_spinel_send>
 100e81e:	e672      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e820:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_pan_coord_set(p_property_data, property_data_len);
 100e824:	e66f      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e826:	4a64      	ldr	r2, [pc, #400]	; (100e9b8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x570>)
 100e828:	ab16      	add	r3, sp, #88	; 0x58
 100e82a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e82e:	f005 fa39 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e832:	2800      	cmp	r0, #0
 100e834:	db0b      	blt.n	100e84e <nrf_802154_spinel_decode_cmd_prop_value_set+0x406>
    nrf_802154_promiscuous_set(enabled);
 100e836:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 100e83a:	f004 fb8f 	bl	1012f5c <nrf_802154_promiscuous_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100e83e:	2300      	movs	r3, #0
 100e840:	2206      	movs	r2, #6
 100e842:	2180      	movs	r1, #128	; 0x80
 100e844:	9300      	str	r3, [sp, #0]
 100e846:	485a      	ldr	r0, [pc, #360]	; (100e9b0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x568>)
 100e848:	f005 fbb7 	bl	1013fba <nrf_802154_spinel_send>
 100e84c:	e65b      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e84e:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_promiscuous_set(p_property_data,
 100e852:	e658      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    bool result = nrf_802154_cca();
 100e854:	f004 fb7a 	bl	1012f4c <nrf_802154_cca>
    return nrf_802154_spinel_send_cmd_prop_value_is(SPINEL_PROP_VENDOR_NORDIC_NRF_802154_CCA,
 100e858:	f643 4311 	movw	r3, #15377	; 0x3c11
 100e85c:	9000      	str	r0, [sp, #0]
 100e85e:	2206      	movs	r2, #6
 100e860:	2180      	movs	r1, #128	; 0x80
 100e862:	4856      	ldr	r0, [pc, #344]	; (100e9bc <nrf_802154_spinel_decode_cmd_prop_value_set+0x574>)
 100e864:	f005 fba9 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_cca(p_property_data, property_data_len);
 100e868:	e64d      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    bool result = nrf_802154_continuous_carrier();
 100e86a:	f004 fb72 	bl	1012f52 <nrf_802154_continuous_carrier>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e86e:	f643 4334 	movw	r3, #15412	; 0x3c34
 100e872:	9000      	str	r0, [sp, #0]
 100e874:	2206      	movs	r2, #6
 100e876:	2180      	movs	r1, #128	; 0x80
 100e878:	4850      	ldr	r0, [pc, #320]	; (100e9bc <nrf_802154_spinel_decode_cmd_prop_value_set+0x574>)
 100e87a:	f005 fb9e 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_continuous_carrier(p_property_data,
 100e87e:	e642      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    spinel_ssize_t siz = spinel_datatype_unpack(
 100e880:	ab16      	add	r3, sp, #88	; 0x58
 100e882:	9300      	str	r3, [sp, #0]
 100e884:	4a4b      	ldr	r2, [pc, #300]	; (100e9b4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x56c>)
 100e886:	ab14      	add	r3, sp, #80	; 0x50
 100e888:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e88c:	f005 fa0a 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e890:	2800      	cmp	r0, #0
 100e892:	db10      	blt.n	100e8b6 <nrf_802154_spinel_decode_cmd_prop_value_set+0x46e>
    if (p_buffer_len != RAW_PAYLOAD_OFFSET + ((uint8_t *)p_buffer)[0])
 100e894:	9814      	ldr	r0, [sp, #80]	; 0x50
 100e896:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100e898:	7803      	ldrb	r3, [r0, #0]
 100e89a:	3301      	adds	r3, #1
 100e89c:	4293      	cmp	r3, r2
 100e89e:	d10d      	bne.n	100e8bc <nrf_802154_spinel_decode_cmd_prop_value_set+0x474>
    bool result = nrf_802154_modulated_carrier(p_buffer);
 100e8a0:	f7f9 fe70 	bl	1008584 <nrf_802154_modulated_carrier>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e8a4:	f643 4335 	movw	r3, #15413	; 0x3c35
 100e8a8:	9000      	str	r0, [sp, #0]
 100e8aa:	2206      	movs	r2, #6
 100e8ac:	2180      	movs	r1, #128	; 0x80
 100e8ae:	4843      	ldr	r0, [pc, #268]	; (100e9bc <nrf_802154_spinel_decode_cmd_prop_value_set+0x574>)
 100e8b0:	f005 fb83 	bl	1013fba <nrf_802154_spinel_send>
 100e8b4:	e627      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e8b6:	f06f 0002 	mvn.w	r0, #2
 100e8ba:	e624      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_REQUEST_INVALID;
 100e8bc:	f06f 0006 	mvn.w	r0, #6
            return spinel_decode_prop_nrf_802154_modulated_carrier(p_property_data,
 100e8c0:	e621      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e8c2:	4a3f      	ldr	r2, [pc, #252]	; (100e9c0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x578>)
 100e8c4:	ab16      	add	r3, sp, #88	; 0x58
 100e8c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e8ca:	f005 f9eb 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e8ce:	2800      	cmp	r0, #0
 100e8d0:	db0b      	blt.n	100e8ea <nrf_802154_spinel_decode_cmd_prop_value_set+0x4a2>
    bool result = nrf_802154_energy_detection(time_us);
 100e8d2:	9816      	ldr	r0, [sp, #88]	; 0x58
 100e8d4:	f004 fb36 	bl	1012f44 <nrf_802154_energy_detection>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e8d8:	f643 4314 	movw	r3, #15380	; 0x3c14
 100e8dc:	9000      	str	r0, [sp, #0]
 100e8de:	2206      	movs	r2, #6
 100e8e0:	2180      	movs	r1, #128	; 0x80
 100e8e2:	4836      	ldr	r0, [pc, #216]	; (100e9bc <nrf_802154_spinel_decode_cmd_prop_value_set+0x574>)
 100e8e4:	f005 fb69 	bl	1013fba <nrf_802154_spinel_send>
 100e8e8:	e60d      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e8ea:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_energy_detection(p_property_data,
 100e8ee:	e60a      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100e8f0:	4a34      	ldr	r2, [pc, #208]	; (100e9c4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x57c>)
 100e8f2:	ab16      	add	r3, sp, #88	; 0x58
 100e8f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e8f8:	f005 f9d4 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e8fc:	2800      	cmp	r0, #0
 100e8fe:	db0b      	blt.n	100e918 <nrf_802154_spinel_decode_cmd_prop_value_set+0x4d0>
    nrf_802154_tx_power_set(power);
 100e900:	f99d 0058 	ldrsb.w	r0, [sp, #88]	; 0x58
 100e904:	f004 facc 	bl	1012ea0 <nrf_802154_tx_power_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100e908:	2300      	movs	r3, #0
 100e90a:	2206      	movs	r2, #6
 100e90c:	2180      	movs	r1, #128	; 0x80
 100e90e:	9300      	str	r3, [sp, #0]
 100e910:	4827      	ldr	r0, [pc, #156]	; (100e9b0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x568>)
 100e912:	f005 fb52 	bl	1013fba <nrf_802154_spinel_send>
 100e916:	e5f6      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e918:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_tx_power_set(p_property_data, property_data_len);
 100e91c:	e5f3      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    power = nrf_802154_tx_power_get();
 100e91e:	f004 fac1 	bl	1012ea4 <nrf_802154_tx_power_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e922:	f643 4305 	movw	r3, #15365	; 0x3c05
 100e926:	9000      	str	r0, [sp, #0]
 100e928:	2206      	movs	r2, #6
 100e92a:	2180      	movs	r1, #128	; 0x80
 100e92c:	4826      	ldr	r0, [pc, #152]	; (100e9c8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x580>)
 100e92e:	f005 fb44 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_tx_power_get(p_property_data, property_data_len);
 100e932:	e5e8      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    spinel_ssize_t siz = spinel_datatype_unpack(
 100e934:	ab13      	add	r3, sp, #76	; 0x4c
 100e936:	9305      	str	r3, [sp, #20]
 100e938:	ab12      	add	r3, sp, #72	; 0x48
 100e93a:	9304      	str	r3, [sp, #16]
 100e93c:	ab11      	add	r3, sp, #68	; 0x44
 100e93e:	9303      	str	r3, [sp, #12]
 100e940:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 100e944:	9302      	str	r3, [sp, #8]
 100e946:	f10d 035a 	add.w	r3, sp, #90	; 0x5a
 100e94a:	9301      	str	r3, [sp, #4]
 100e94c:	f10d 0359 	add.w	r3, sp, #89	; 0x59
 100e950:	9300      	str	r3, [sp, #0]
 100e952:	4a1e      	ldr	r2, [pc, #120]	; (100e9cc <nrf_802154_spinel_decode_cmd_prop_value_set+0x584>)
 100e954:	ab16      	add	r3, sp, #88	; 0x58
 100e956:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e95a:	f005 f9a3 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e95e:	2800      	cmp	r0, #0
 100e960:	db1e      	blt.n	100e9a0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x558>
    bool frame_added = nrf_802154_buffer_mgr_dst_add(
 100e962:	f7ff fbd7 	bl	100e114 <nrf_802154_spinel_dst_buffer_mgr_get>
 100e966:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 100e96a:	ab14      	add	r3, sp, #80	; 0x50
 100e96c:	9300      	str	r3, [sp, #0]
 100e96e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 100e970:	3b04      	subs	r3, #4
 100e972:	f005 fa20 	bl	1013db6 <nrf_802154_buffer_mgr_dst_add>
    if (!frame_added)
 100e976:	b1b0      	cbz	r0, 100e9a6 <nrf_802154_spinel_decode_cmd_prop_value_set+0x55e>
    bool result = nrf_802154_transmit_csma_ca_raw(p_local_frame_ptr, &tx_metadata);
 100e978:	9814      	ldr	r0, [sp, #80]	; 0x50
 100e97a:	a916      	add	r1, sp, #88	; 0x58
 100e97c:	f7f9 fe12 	bl	10085a4 <nrf_802154_transmit_csma_ca_raw>
    if (!result)
 100e980:	4604      	mov	r4, r0
 100e982:	b920      	cbnz	r0, 100e98e <nrf_802154_spinel_decode_cmd_prop_value_set+0x546>
        nrf_802154_buffer_mgr_dst_remove_by_local_pointer(nrf_802154_spinel_dst_buffer_mgr_get(),
 100e984:	f7ff fbc6 	bl	100e114 <nrf_802154_spinel_dst_buffer_mgr_get>
 100e988:	9914      	ldr	r1, [sp, #80]	; 0x50
 100e98a:	f005 fa36 	bl	1013dfa <nrf_802154_buffer_mgr_dst_remove_by_local_pointer>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e98e:	f643 431c 	movw	r3, #15388	; 0x3c1c
 100e992:	2206      	movs	r2, #6
 100e994:	2180      	movs	r1, #128	; 0x80
 100e996:	9400      	str	r4, [sp, #0]
 100e998:	4808      	ldr	r0, [pc, #32]	; (100e9bc <nrf_802154_spinel_decode_cmd_prop_value_set+0x574>)
 100e99a:	f005 fb0e 	bl	1013fba <nrf_802154_spinel_send>
 100e99e:	e5b2      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e9a0:	f06f 0002 	mvn.w	r0, #2
 100e9a4:	e5af      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_NO_MEMORY;
 100e9a6:	f06f 0008 	mvn.w	r0, #8
            return spinel_decode_prop_nrf_802154_transmit_csma_ca_raw(p_property_data,
 100e9aa:	e5ac      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
 100e9ac:	01015c71 	.word	0x01015c71
 100e9b0:	01015c3a 	.word	0x01015c3a
 100e9b4:	01015bf2 	.word	0x01015bf2
 100e9b8:	01015c82 	.word	0x01015c82
 100e9bc:	01015bf9 	.word	0x01015bf9
 100e9c0:	01015c38 	.word	0x01015c38
 100e9c4:	01015c42 	.word	0x01015c42
 100e9c8:	01015c3f 	.word	0x01015c3f
 100e9cc:	01015c4a 	.word	0x01015c4a
    siz = spinel_datatype_unpack(p_property_data,
 100e9d0:	4aae      	ldr	r2, [pc, #696]	; (100ec8c <nrf_802154_spinel_decode_cmd_prop_value_set+0x844>)
 100e9d2:	ab16      	add	r3, sp, #88	; 0x58
 100e9d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100e9d8:	f005 f964 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100e9dc:	2800      	cmp	r0, #0
 100e9de:	db0c      	blt.n	100e9fa <nrf_802154_spinel_decode_cmd_prop_value_set+0x5b2>
    result = nrf_802154_csma_ca_min_be_set(min_be);
 100e9e0:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 100e9e4:	f004 fae6 	bl	1012fb4 <nrf_802154_csma_ca_min_be_set>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100e9e8:	f643 432d 	movw	r3, #15405	; 0x3c2d
 100e9ec:	9000      	str	r0, [sp, #0]
 100e9ee:	2206      	movs	r2, #6
 100e9f0:	2180      	movs	r1, #128	; 0x80
 100e9f2:	48a7      	ldr	r0, [pc, #668]	; (100ec90 <nrf_802154_spinel_decode_cmd_prop_value_set+0x848>)
 100e9f4:	f005 fae1 	bl	1013fba <nrf_802154_spinel_send>
 100e9f8:	e585      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100e9fa:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_csma_ca_min_be_set(p_property_data,
 100e9fe:	e582      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    uint8_t min_be = nrf_802154_csma_ca_min_be_get();
 100ea00:	f004 fada 	bl	1012fb8 <nrf_802154_csma_ca_min_be_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ea04:	f643 432e 	movw	r3, #15406	; 0x3c2e
 100ea08:	9000      	str	r0, [sp, #0]
 100ea0a:	2206      	movs	r2, #6
 100ea0c:	2180      	movs	r1, #128	; 0x80
 100ea0e:	48a1      	ldr	r0, [pc, #644]	; (100ec94 <nrf_802154_spinel_decode_cmd_prop_value_set+0x84c>)
 100ea10:	f005 fad3 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_csma_ca_min_be_get(p_property_data,
 100ea14:	e577      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100ea16:	4a9d      	ldr	r2, [pc, #628]	; (100ec8c <nrf_802154_spinel_decode_cmd_prop_value_set+0x844>)
 100ea18:	ab16      	add	r3, sp, #88	; 0x58
 100ea1a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100ea1e:	f005 f941 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100ea22:	2800      	cmp	r0, #0
 100ea24:	db0c      	blt.n	100ea40 <nrf_802154_spinel_decode_cmd_prop_value_set+0x5f8>
    result = nrf_802154_csma_ca_max_be_set(max_be);
 100ea26:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 100ea2a:	f004 fac7 	bl	1012fbc <nrf_802154_csma_ca_max_be_set>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ea2e:	f643 432f 	movw	r3, #15407	; 0x3c2f
 100ea32:	9000      	str	r0, [sp, #0]
 100ea34:	2206      	movs	r2, #6
 100ea36:	2180      	movs	r1, #128	; 0x80
 100ea38:	4895      	ldr	r0, [pc, #596]	; (100ec90 <nrf_802154_spinel_decode_cmd_prop_value_set+0x848>)
 100ea3a:	f005 fabe 	bl	1013fba <nrf_802154_spinel_send>
 100ea3e:	e562      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100ea40:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_csma_ca_max_be_set(p_property_data,
 100ea44:	e55f      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    uint8_t max_be = nrf_802154_csma_ca_max_be_get();
 100ea46:	f004 fabb 	bl	1012fc0 <nrf_802154_csma_ca_max_be_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ea4a:	f643 4330 	movw	r3, #15408	; 0x3c30
 100ea4e:	9000      	str	r0, [sp, #0]
 100ea50:	2206      	movs	r2, #6
 100ea52:	2180      	movs	r1, #128	; 0x80
 100ea54:	488f      	ldr	r0, [pc, #572]	; (100ec94 <nrf_802154_spinel_decode_cmd_prop_value_set+0x84c>)
 100ea56:	f005 fab0 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_csma_ca_max_be_get(p_property_data,
 100ea5a:	e554      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100ea5c:	4a8b      	ldr	r2, [pc, #556]	; (100ec8c <nrf_802154_spinel_decode_cmd_prop_value_set+0x844>)
 100ea5e:	ab16      	add	r3, sp, #88	; 0x58
 100ea60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100ea64:	f005 f91e 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100ea68:	2800      	cmp	r0, #0
 100ea6a:	db0b      	blt.n	100ea84 <nrf_802154_spinel_decode_cmd_prop_value_set+0x63c>
    nrf_802154_csma_ca_max_backoffs_set(max_backoffs);
 100ea6c:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 100ea70:	f004 faa8 	bl	1012fc4 <nrf_802154_csma_ca_max_backoffs_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100ea74:	2300      	movs	r3, #0
 100ea76:	2206      	movs	r2, #6
 100ea78:	2180      	movs	r1, #128	; 0x80
 100ea7a:	9300      	str	r3, [sp, #0]
 100ea7c:	4886      	ldr	r0, [pc, #536]	; (100ec98 <nrf_802154_spinel_decode_cmd_prop_value_set+0x850>)
 100ea7e:	f005 fa9c 	bl	1013fba <nrf_802154_spinel_send>
 100ea82:	e540      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100ea84:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_csma_ca_max_backoffs_set(p_property_data,
 100ea88:	e53d      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    uint8_t max_backoffs = nrf_802154_csma_ca_max_backoffs_get();
 100ea8a:	f004 fa9d 	bl	1012fc8 <nrf_802154_csma_ca_max_backoffs_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ea8e:	f643 4332 	movw	r3, #15410	; 0x3c32
 100ea92:	9000      	str	r0, [sp, #0]
 100ea94:	2206      	movs	r2, #6
 100ea96:	2180      	movs	r1, #128	; 0x80
 100ea98:	487e      	ldr	r0, [pc, #504]	; (100ec94 <nrf_802154_spinel_decode_cmd_prop_value_set+0x84c>)
 100ea9a:	f005 fa8e 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_csma_ca_max_backoffs_get(p_property_data,
 100ea9e:	e532      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100eaa0:	4a7a      	ldr	r2, [pc, #488]	; (100ec8c <nrf_802154_spinel_decode_cmd_prop_value_set+0x844>)
 100eaa2:	ab16      	add	r3, sp, #88	; 0x58
 100eaa4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100eaa8:	f005 f8fc 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100eaac:	2800      	cmp	r0, #0
 100eaae:	db0c      	blt.n	100eaca <nrf_802154_spinel_decode_cmd_prop_value_set+0x682>
    result = nrf_802154_ifs_mode_set(value);
 100eab0:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 100eab4:	f004 fa8c 	bl	1012fd0 <nrf_802154_ifs_mode_set>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100eab8:	f643 4339 	movw	r3, #15417	; 0x3c39
 100eabc:	9000      	str	r0, [sp, #0]
 100eabe:	2206      	movs	r2, #6
 100eac0:	2180      	movs	r1, #128	; 0x80
 100eac2:	4873      	ldr	r0, [pc, #460]	; (100ec90 <nrf_802154_spinel_decode_cmd_prop_value_set+0x848>)
 100eac4:	f005 fa79 	bl	1013fba <nrf_802154_spinel_send>
 100eac8:	e51d      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100eaca:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_ifs_mode_set(p_property_data,
 100eace:	e51a      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    nrf_802154_ifs_mode_t value = nrf_802154_ifs_mode_get();
 100ead0:	f004 fa7c 	bl	1012fcc <nrf_802154_ifs_mode_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ead4:	f643 433a 	movw	r3, #15418	; 0x3c3a
 100ead8:	9000      	str	r0, [sp, #0]
 100eada:	2206      	movs	r2, #6
 100eadc:	2180      	movs	r1, #128	; 0x80
 100eade:	486d      	ldr	r0, [pc, #436]	; (100ec94 <nrf_802154_spinel_decode_cmd_prop_value_set+0x84c>)
 100eae0:	f005 fa6b 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_ifs_mode_get(p_property_data,
 100eae4:	e50f      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100eae6:	4a6d      	ldr	r2, [pc, #436]	; (100ec9c <nrf_802154_spinel_decode_cmd_prop_value_set+0x854>)
 100eae8:	ab16      	add	r3, sp, #88	; 0x58
 100eaea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100eaee:	f005 f8d9 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100eaf2:	2800      	cmp	r0, #0
 100eaf4:	db0b      	blt.n	100eb0e <nrf_802154_spinel_decode_cmd_prop_value_set+0x6c6>
    nrf_802154_ifs_min_sifs_period_set(value);
 100eaf6:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 100eafa:	f004 fa6d 	bl	1012fd8 <nrf_802154_ifs_min_sifs_period_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100eafe:	2300      	movs	r3, #0
 100eb00:	2206      	movs	r2, #6
 100eb02:	2180      	movs	r1, #128	; 0x80
 100eb04:	9300      	str	r3, [sp, #0]
 100eb06:	4864      	ldr	r0, [pc, #400]	; (100ec98 <nrf_802154_spinel_decode_cmd_prop_value_set+0x850>)
 100eb08:	f005 fa57 	bl	1013fba <nrf_802154_spinel_send>
 100eb0c:	e4fb      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100eb0e:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_ifs_min_sifs_period_set(p_property_data,
 100eb12:	e4f8      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    uint16_t value = nrf_802154_ifs_min_sifs_period_get();
 100eb14:	f004 fa5e 	bl	1012fd4 <nrf_802154_ifs_min_sifs_period_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100eb18:	f643 433c 	movw	r3, #15420	; 0x3c3c
 100eb1c:	9000      	str	r0, [sp, #0]
 100eb1e:	2206      	movs	r2, #6
 100eb20:	2180      	movs	r1, #128	; 0x80
 100eb22:	485f      	ldr	r0, [pc, #380]	; (100eca0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x858>)
 100eb24:	f005 fa49 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_ifs_min_sifs_period_get(p_property_data,
 100eb28:	e4ed      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100eb2a:	4a5c      	ldr	r2, [pc, #368]	; (100ec9c <nrf_802154_spinel_decode_cmd_prop_value_set+0x854>)
 100eb2c:	ab16      	add	r3, sp, #88	; 0x58
 100eb2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100eb32:	f005 f8b7 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100eb36:	2800      	cmp	r0, #0
 100eb38:	db0b      	blt.n	100eb52 <nrf_802154_spinel_decode_cmd_prop_value_set+0x70a>
    nrf_802154_ifs_min_lifs_period_set(value);
 100eb3a:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 100eb3e:	f004 fa4f 	bl	1012fe0 <nrf_802154_ifs_min_lifs_period_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100eb42:	2300      	movs	r3, #0
 100eb44:	2206      	movs	r2, #6
 100eb46:	2180      	movs	r1, #128	; 0x80
 100eb48:	9300      	str	r3, [sp, #0]
 100eb4a:	4853      	ldr	r0, [pc, #332]	; (100ec98 <nrf_802154_spinel_decode_cmd_prop_value_set+0x850>)
 100eb4c:	f005 fa35 	bl	1013fba <nrf_802154_spinel_send>
 100eb50:	e4d9      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100eb52:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_ifs_min_lifs_period_set(p_property_data,
 100eb56:	e4d6      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    uint16_t value = nrf_802154_ifs_min_lifs_period_get();
 100eb58:	f004 fa40 	bl	1012fdc <nrf_802154_ifs_min_lifs_period_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100eb5c:	f643 433e 	movw	r3, #15422	; 0x3c3e
 100eb60:	9000      	str	r0, [sp, #0]
 100eb62:	2206      	movs	r2, #6
 100eb64:	2180      	movs	r1, #128	; 0x80
 100eb66:	484e      	ldr	r0, [pc, #312]	; (100eca0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x858>)
 100eb68:	f005 fa27 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_ifs_min_lifs_period_get(p_property_data,
 100eb6c:	e4cb      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    spinel_ssize_t siz = spinel_datatype_unpack(
 100eb6e:	ab13      	add	r3, sp, #76	; 0x4c
 100eb70:	9306      	str	r3, [sp, #24]
 100eb72:	ab12      	add	r3, sp, #72	; 0x48
 100eb74:	9305      	str	r3, [sp, #20]
 100eb76:	ab11      	add	r3, sp, #68	; 0x44
 100eb78:	9304      	str	r3, [sp, #16]
 100eb7a:	ab17      	add	r3, sp, #92	; 0x5c
 100eb7c:	9303      	str	r3, [sp, #12]
 100eb7e:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 100eb82:	9302      	str	r3, [sp, #8]
 100eb84:	f10d 035a 	add.w	r3, sp, #90	; 0x5a
 100eb88:	9301      	str	r3, [sp, #4]
 100eb8a:	f10d 0359 	add.w	r3, sp, #89	; 0x59
 100eb8e:	9300      	str	r3, [sp, #0]
 100eb90:	4a44      	ldr	r2, [pc, #272]	; (100eca4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x85c>)
 100eb92:	ab16      	add	r3, sp, #88	; 0x58
 100eb94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100eb98:	f005 f884 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100eb9c:	2800      	cmp	r0, #0
 100eb9e:	db1e      	blt.n	100ebde <nrf_802154_spinel_decode_cmd_prop_value_set+0x796>
    bool frame_added = nrf_802154_buffer_mgr_dst_add(
 100eba0:	f7ff fab8 	bl	100e114 <nrf_802154_spinel_dst_buffer_mgr_get>
 100eba4:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 100eba8:	ab14      	add	r3, sp, #80	; 0x50
 100ebaa:	9300      	str	r3, [sp, #0]
 100ebac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 100ebae:	3b04      	subs	r3, #4
 100ebb0:	f005 f901 	bl	1013db6 <nrf_802154_buffer_mgr_dst_add>
    if (!frame_added)
 100ebb4:	b1b0      	cbz	r0, 100ebe4 <nrf_802154_spinel_decode_cmd_prop_value_set+0x79c>
    bool result = nrf_802154_transmit_raw(p_local_frame_ptr, &tx_metadata);
 100ebb6:	9814      	ldr	r0, [sp, #80]	; 0x50
 100ebb8:	a916      	add	r1, sp, #88	; 0x58
 100ebba:	f7f9 fcb5 	bl	1008528 <nrf_802154_transmit_raw>
    if (!result)
 100ebbe:	4604      	mov	r4, r0
 100ebc0:	b920      	cbnz	r0, 100ebcc <nrf_802154_spinel_decode_cmd_prop_value_set+0x784>
        nrf_802154_buffer_mgr_dst_remove_by_local_pointer(nrf_802154_spinel_dst_buffer_mgr_get(),
 100ebc2:	f7ff faa7 	bl	100e114 <nrf_802154_spinel_dst_buffer_mgr_get>
 100ebc6:	9914      	ldr	r1, [sp, #80]	; 0x50
 100ebc8:	f005 f917 	bl	1013dfa <nrf_802154_buffer_mgr_dst_remove_by_local_pointer>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ebcc:	f643 431b 	movw	r3, #15387	; 0x3c1b
 100ebd0:	2206      	movs	r2, #6
 100ebd2:	2180      	movs	r1, #128	; 0x80
 100ebd4:	9400      	str	r4, [sp, #0]
 100ebd6:	482e      	ldr	r0, [pc, #184]	; (100ec90 <nrf_802154_spinel_decode_cmd_prop_value_set+0x848>)
 100ebd8:	f005 f9ef 	bl	1013fba <nrf_802154_spinel_send>
 100ebdc:	e493      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100ebde:	f06f 0002 	mvn.w	r0, #2
 100ebe2:	e490      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_NO_MEMORY;
 100ebe4:	f06f 0008 	mvn.w	r0, #8
            return spinel_decode_prop_nrf_802154_transmit_raw(p_property_data, property_data_len);
 100ebe8:	e48d      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    spinel_ssize_t siz = spinel_datatype_unpack(
 100ebea:	ab12      	add	r3, sp, #72	; 0x48
 100ebec:	9308      	str	r3, [sp, #32]
 100ebee:	ab11      	add	r3, sp, #68	; 0x44
 100ebf0:	9307      	str	r3, [sp, #28]
 100ebf2:	ab10      	add	r3, sp, #64	; 0x40
 100ebf4:	9306      	str	r3, [sp, #24]
 100ebf6:	ab16      	add	r3, sp, #88	; 0x58
 100ebf8:	9305      	str	r3, [sp, #20]
 100ebfa:	f10d 0355 	add.w	r3, sp, #85	; 0x55
 100ebfe:	9304      	str	r3, [sp, #16]
 100ec00:	ab15      	add	r3, sp, #84	; 0x54
 100ec02:	9303      	str	r3, [sp, #12]
 100ec04:	f10d 0353 	add.w	r3, sp, #83	; 0x53
 100ec08:	9302      	str	r3, [sp, #8]
 100ec0a:	f10d 0352 	add.w	r3, sp, #82	; 0x52
 100ec0e:	9301      	str	r3, [sp, #4]
 100ec10:	ac14      	add	r4, sp, #80	; 0x50
 100ec12:	f10d 0351 	add.w	r3, sp, #81	; 0x51
 100ec16:	9300      	str	r3, [sp, #0]
 100ec18:	4a23      	ldr	r2, [pc, #140]	; (100eca8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x860>)
 100ec1a:	4623      	mov	r3, r4
 100ec1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100ec20:	f005 f840 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100ec24:	2800      	cmp	r0, #0
 100ec26:	db2b      	blt.n	100ec80 <nrf_802154_spinel_decode_cmd_prop_value_set+0x838>
    bool frame_added = nrf_802154_buffer_mgr_dst_add(
 100ec28:	f7ff fa74 	bl	100e114 <nrf_802154_spinel_dst_buffer_mgr_get>
 100ec2c:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 100ec30:	ab13      	add	r3, sp, #76	; 0x4c
 100ec32:	9300      	str	r3, [sp, #0]
 100ec34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100ec36:	3b04      	subs	r3, #4
 100ec38:	f005 f8bd 	bl	1013db6 <nrf_802154_buffer_mgr_dst_add>
    if (!frame_added)
 100ec3c:	b318      	cbz	r0, 100ec86 <nrf_802154_spinel_decode_cmd_prop_value_set+0x83e>
    if (0 == tx_metadata.channel)
 100ec3e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 100ec42:	b91b      	cbnz	r3, 100ec4c <nrf_802154_spinel_decode_cmd_prop_value_set+0x804>
        tx_metadata.channel = nrf_802154_channel_get();
 100ec44:	f004 f92a 	bl	1012e9c <nrf_802154_channel_get>
 100ec48:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    bool result = nrf_802154_transmit_raw_at(p_local_frame_ptr, tx_time, &tx_metadata);
 100ec4c:	9400      	str	r4, [sp, #0]
 100ec4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 100ec50:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 100ec54:	f004 f952 	bl	1012efc <nrf_802154_transmit_raw_at>
    if (!result)
 100ec58:	4604      	mov	r4, r0
 100ec5a:	b968      	cbnz	r0, 100ec78 <nrf_802154_spinel_decode_cmd_prop_value_set+0x830>
        nrf_802154_buffer_mgr_dst_remove_by_local_pointer(nrf_802154_spinel_dst_buffer_mgr_get(),
 100ec5c:	f7ff fa5a 	bl	100e114 <nrf_802154_spinel_dst_buffer_mgr_get>
 100ec60:	9913      	ldr	r1, [sp, #76]	; 0x4c
 100ec62:	f005 f8ca 	bl	1013dfa <nrf_802154_buffer_mgr_dst_remove_by_local_pointer>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ec66:	f643 4325 	movw	r3, #15397	; 0x3c25
 100ec6a:	2206      	movs	r2, #6
 100ec6c:	2180      	movs	r1, #128	; 0x80
 100ec6e:	9400      	str	r4, [sp, #0]
 100ec70:	4807      	ldr	r0, [pc, #28]	; (100ec90 <nrf_802154_spinel_decode_cmd_prop_value_set+0x848>)
 100ec72:	f005 f9a2 	bl	1013fba <nrf_802154_spinel_send>
 100ec76:	e446      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        mp_transmit_at_frame = p_local_frame_ptr;
 100ec78:	4b0c      	ldr	r3, [pc, #48]	; (100ecac <nrf_802154_spinel_decode_cmd_prop_value_set+0x864>)
 100ec7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 100ec7c:	601a      	str	r2, [r3, #0]
 100ec7e:	e7f2      	b.n	100ec66 <nrf_802154_spinel_decode_cmd_prop_value_set+0x81e>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100ec80:	f06f 0002 	mvn.w	r0, #2
 100ec84:	e43f      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_NO_MEMORY;
 100ec86:	f06f 0008 	mvn.w	r0, #8
            return spinel_decode_prop_nrf_802154_transmit_raw_at(p_property_data,
 100ec8a:	e43c      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
 100ec8c:	01015c71 	.word	0x01015c71
 100ec90:	01015bf9 	.word	0x01015bf9
 100ec94:	01015bfe 	.word	0x01015bfe
 100ec98:	01015c3a 	.word	0x01015c3a
 100ec9c:	01015d83 	.word	0x01015d83
 100eca0:	01015c44 	.word	0x01015c44
 100eca4:	01015c49 	.word	0x01015c49
 100eca8:	01015c54 	.word	0x01015c54
 100ecac:	21003a0c 	.word	0x21003a0c
    bool result = nrf_802154_transmit_at_cancel();
 100ecb0:	f004 f942 	bl	1012f38 <nrf_802154_transmit_at_cancel>
    if (result)
 100ecb4:	4604      	mov	r4, r0
 100ecb6:	b940      	cbnz	r0, 100ecca <nrf_802154_spinel_decode_cmd_prop_value_set+0x882>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ecb8:	f643 4326 	movw	r3, #15398	; 0x3c26
 100ecbc:	2206      	movs	r2, #6
 100ecbe:	2180      	movs	r1, #128	; 0x80
 100ecc0:	9400      	str	r4, [sp, #0]
 100ecc2:	48b6      	ldr	r0, [pc, #728]	; (100ef9c <nrf_802154_spinel_decode_cmd_prop_value_set+0xb54>)
 100ecc4:	f005 f979 	bl	1013fba <nrf_802154_spinel_send>
 100ecc8:	e41d      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        if (!mp_transmit_at_frame)
 100ecca:	4db5      	ldr	r5, [pc, #724]	; (100efa0 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb58>)
 100eccc:	682b      	ldr	r3, [r5, #0]
 100ecce:	b913      	cbnz	r3, 100ecd6 <nrf_802154_spinel_decode_cmd_prop_value_set+0x88e>
            return NRF_802154_SERIALIZATION_ERROR_INVALID_BUFFER;
 100ecd0:	f06f 0007 	mvn.w	r0, #7
 100ecd4:	e417      	b.n	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        bool removed = nrf_802154_buffer_mgr_dst_remove_by_local_pointer(
 100ecd6:	f7ff fa1d 	bl	100e114 <nrf_802154_spinel_dst_buffer_mgr_get>
 100ecda:	6829      	ldr	r1, [r5, #0]
 100ecdc:	f005 f88d 	bl	1013dfa <nrf_802154_buffer_mgr_dst_remove_by_local_pointer>
        if (!removed)
 100ece0:	2800      	cmp	r0, #0
 100ece2:	d1e9      	bne.n	100ecb8 <nrf_802154_spinel_decode_cmd_prop_value_set+0x870>
 100ece4:	e7f4      	b.n	100ecd0 <nrf_802154_spinel_decode_cmd_prop_value_set+0x888>
    spinel_ssize_t siz = spinel_datatype_unpack(p_property_data,
 100ece6:	4aaf      	ldr	r2, [pc, #700]	; (100efa4 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb5c>)
 100ece8:	ab14      	add	r3, sp, #80	; 0x50
 100ecea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100ecee:	f004 ffd9 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100ecf2:	2800      	cmp	r0, #0
 100ecf4:	db1d      	blt.n	100ed32 <nrf_802154_spinel_decode_cmd_prop_value_set+0x8ea>
    bool ptr_found = nrf_802154_buffer_mgr_src_search_by_buffer_handle(
 100ecf6:	f7ff fa11 	bl	100e11c <nrf_802154_spinel_src_buffer_mgr_get>
 100ecfa:	9914      	ldr	r1, [sp, #80]	; 0x50
 100ecfc:	aa16      	add	r2, sp, #88	; 0x58
 100ecfe:	f005 f8a2 	bl	1013e46 <nrf_802154_buffer_mgr_src_search_by_buffer_handle>
    if (ptr_found)
 100ed02:	b940      	cbnz	r0, 100ed16 <nrf_802154_spinel_decode_cmd_prop_value_set+0x8ce>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100ed04:	2300      	movs	r3, #0
 100ed06:	2206      	movs	r2, #6
 100ed08:	2180      	movs	r1, #128	; 0x80
 100ed0a:	9300      	str	r3, [sp, #0]
 100ed0c:	48a6      	ldr	r0, [pc, #664]	; (100efa8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb60>)
 100ed0e:	f005 f954 	bl	1013fba <nrf_802154_spinel_send>
 100ed12:	f7ff bbf8 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        nrf_802154_buffer_free_raw(p_local_ptr);
 100ed16:	9816      	ldr	r0, [sp, #88]	; 0x58
 100ed18:	f004 f91e 	bl	1012f58 <nrf_802154_buffer_free_raw>
        bool ptr_removed = nrf_802154_buffer_mgr_src_remove_by_buffer_handle(
 100ed1c:	f7ff f9fe 	bl	100e11c <nrf_802154_spinel_src_buffer_mgr_get>
 100ed20:	9914      	ldr	r1, [sp, #80]	; 0x50
 100ed22:	f005 f89c 	bl	1013e5e <nrf_802154_buffer_mgr_src_remove_by_buffer_handle>
        if (!ptr_removed)
 100ed26:	2800      	cmp	r0, #0
 100ed28:	d1ec      	bne.n	100ed04 <nrf_802154_spinel_decode_cmd_prop_value_set+0x8bc>
            return NRF_802154_SERIALIZATION_ERROR_INVALID_BUFFER;
 100ed2a:	f06f 0007 	mvn.w	r0, #7
 100ed2e:	f7ff bbea 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100ed32:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_buffer_free_raw(p_property_data,
 100ed36:	f7ff bbe6 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    caps = nrf_802154_capabilities_get();
 100ed3a:	f004 f953 	bl	1012fe4 <nrf_802154_capabilities_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ed3e:	f643 431f 	movw	r3, #15391	; 0x3c1f
 100ed42:	9000      	str	r0, [sp, #0]
 100ed44:	2206      	movs	r2, #6
 100ed46:	2180      	movs	r1, #128	; 0x80
 100ed48:	4898      	ldr	r0, [pc, #608]	; (100efac <nrf_802154_spinel_decode_cmd_prop_value_set+0xb64>)
 100ed4a:	f005 f936 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_capabilities_get(p_property_data,
 100ed4e:	f7ff bbda 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    time = nrf_802154_time_get();
 100ed52:	f004 f957 	bl	1013004 <nrf_802154_time_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ed56:	f643 4322 	movw	r3, #15394	; 0x3c22
 100ed5a:	e9cd 0100 	strd	r0, r1, [sp]
 100ed5e:	2206      	movs	r2, #6
 100ed60:	2180      	movs	r1, #128	; 0x80
 100ed62:	4893      	ldr	r0, [pc, #588]	; (100efb0 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb68>)
 100ed64:	f005 f929 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_time_get(p_property_data,
 100ed68:	f7ff bbcd 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    nrf_802154_cca_cfg_get(&cfg);
 100ed6c:	a816      	add	r0, sp, #88	; 0x58
 100ed6e:	f004 f91f 	bl	1012fb0 <nrf_802154_cca_cfg_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ed72:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 100ed76:	2206      	movs	r2, #6
 100ed78:	9303      	str	r3, [sp, #12]
 100ed7a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 100ed7e:	2180      	movs	r1, #128	; 0x80
 100ed80:	9302      	str	r3, [sp, #8]
 100ed82:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 100ed86:	488b      	ldr	r0, [pc, #556]	; (100efb4 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb6c>)
 100ed88:	9301      	str	r3, [sp, #4]
 100ed8a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 100ed8e:	9300      	str	r3, [sp, #0]
 100ed90:	f643 4323 	movw	r3, #15395	; 0x3c23
 100ed94:	f005 f911 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_cca_cfg_get(p_property_data, property_data_len);
 100ed98:	f7ff bbb5 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100ed9c:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 100eda0:	9302      	str	r3, [sp, #8]
 100eda2:	f10d 035a 	add.w	r3, sp, #90	; 0x5a
 100eda6:	9301      	str	r3, [sp, #4]
 100eda8:	f10d 0359 	add.w	r3, sp, #89	; 0x59
 100edac:	9300      	str	r3, [sp, #0]
 100edae:	4a82      	ldr	r2, [pc, #520]	; (100efb8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb70>)
 100edb0:	ab16      	add	r3, sp, #88	; 0x58
 100edb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100edb6:	f004 ff75 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100edba:	2800      	cmp	r0, #0
 100edbc:	db0b      	blt.n	100edd6 <nrf_802154_spinel_decode_cmd_prop_value_set+0x98e>
    nrf_802154_cca_cfg_set(&cfg);
 100edbe:	a816      	add	r0, sp, #88	; 0x58
 100edc0:	f004 f8ef 	bl	1012fa2 <nrf_802154_cca_cfg_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100edc4:	2300      	movs	r3, #0
 100edc6:	2206      	movs	r2, #6
 100edc8:	2180      	movs	r1, #128	; 0x80
 100edca:	9300      	str	r3, [sp, #0]
 100edcc:	4876      	ldr	r0, [pc, #472]	; (100efa8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb60>)
 100edce:	f005 f8f4 	bl	1013fba <nrf_802154_spinel_send>
 100edd2:	f7ff bb98 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100edd6:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_cca_cfg_set(p_property_data, property_data_len);
 100edda:	f7ff bb94 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100edde:	ab11      	add	r3, sp, #68	; 0x44
 100ede0:	9303      	str	r3, [sp, #12]
 100ede2:	ab16      	add	r3, sp, #88	; 0x58
 100ede4:	9302      	str	r3, [sp, #8]
 100ede6:	ab14      	add	r3, sp, #80	; 0x50
 100ede8:	9301      	str	r3, [sp, #4]
 100edea:	ab13      	add	r3, sp, #76	; 0x4c
 100edec:	9300      	str	r3, [sp, #0]
 100edee:	4a73      	ldr	r2, [pc, #460]	; (100efbc <nrf_802154_spinel_decode_cmd_prop_value_set+0xb74>)
 100edf0:	ab12      	add	r3, sp, #72	; 0x48
 100edf2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100edf6:	f004 ff55 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100edfa:	2800      	cmp	r0, #0
 100edfc:	db1a      	blt.n	100ee34 <nrf_802154_spinel_decode_cmd_prop_value_set+0x9ec>
    if (addr_len == EXTENDED_ADDRESS_SIZE)
 100edfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 100ee00:	2b08      	cmp	r3, #8
 100ee02:	d015      	beq.n	100ee30 <nrf_802154_spinel_decode_cmd_prop_value_set+0x9e8>
    else if (addr_len == SHORT_ADDRESS_SIZE)
 100ee04:	2b02      	cmp	r3, #2
 100ee06:	d119      	bne.n	100ee3c <nrf_802154_spinel_decode_cmd_prop_value_set+0x9f4>
        extended = false;
 100ee08:	2100      	movs	r1, #0
    bool ack_data_set_res = nrf_802154_ack_data_set(
 100ee0a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 100ee0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 100ee10:	9300      	str	r3, [sp, #0]
 100ee12:	9812      	ldr	r0, [sp, #72]	; 0x48
 100ee14:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 100ee18:	f004 f8a6 	bl	1012f68 <nrf_802154_ack_data_set>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ee1c:	f643 4320 	movw	r3, #15392	; 0x3c20
 100ee20:	9000      	str	r0, [sp, #0]
 100ee22:	2206      	movs	r2, #6
 100ee24:	2180      	movs	r1, #128	; 0x80
 100ee26:	485d      	ldr	r0, [pc, #372]	; (100ef9c <nrf_802154_spinel_decode_cmd_prop_value_set+0xb54>)
 100ee28:	f005 f8c7 	bl	1013fba <nrf_802154_spinel_send>
 100ee2c:	f7ff bb6b 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        extended = true;
 100ee30:	2101      	movs	r1, #1
 100ee32:	e7ea      	b.n	100ee0a <nrf_802154_spinel_decode_cmd_prop_value_set+0x9c2>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100ee34:	f06f 0002 	mvn.w	r0, #2
 100ee38:	f7ff bb65 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_REQUEST_INVALID;
 100ee3c:	f06f 0006 	mvn.w	r0, #6
            return spinel_decode_prop_nrf_802154_ack_data_set(p_property_data,
 100ee40:	f7ff bb61 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100ee44:	ab13      	add	r3, sp, #76	; 0x4c
 100ee46:	9301      	str	r3, [sp, #4]
 100ee48:	ab16      	add	r3, sp, #88	; 0x58
 100ee4a:	9300      	str	r3, [sp, #0]
 100ee4c:	4a5c      	ldr	r2, [pc, #368]	; (100efc0 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb78>)
 100ee4e:	ab14      	add	r3, sp, #80	; 0x50
 100ee50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100ee54:	f004 ff26 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100ee58:	2800      	cmp	r0, #0
 100ee5a:	db16      	blt.n	100ee8a <nrf_802154_spinel_decode_cmd_prop_value_set+0xa42>
    if (addr_len == EXTENDED_ADDRESS_SIZE)
 100ee5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 100ee5e:	2b08      	cmp	r3, #8
 100ee60:	d011      	beq.n	100ee86 <nrf_802154_spinel_decode_cmd_prop_value_set+0xa3e>
    else if (addr_len == SHORT_ADDRESS_SIZE)
 100ee62:	2b02      	cmp	r3, #2
 100ee64:	d115      	bne.n	100ee92 <nrf_802154_spinel_decode_cmd_prop_value_set+0xa4a>
        extended = false;
 100ee66:	2100      	movs	r1, #0
    bool ack_data_clear_res = nrf_802154_ack_data_clear(p_addr, extended, data_type);
 100ee68:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 100ee6c:	9814      	ldr	r0, [sp, #80]	; 0x50
 100ee6e:	f004 f885 	bl	1012f7c <nrf_802154_ack_data_clear>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ee72:	f643 4321 	movw	r3, #15393	; 0x3c21
 100ee76:	9000      	str	r0, [sp, #0]
 100ee78:	2206      	movs	r2, #6
 100ee7a:	2180      	movs	r1, #128	; 0x80
 100ee7c:	4847      	ldr	r0, [pc, #284]	; (100ef9c <nrf_802154_spinel_decode_cmd_prop_value_set+0xb54>)
 100ee7e:	f005 f89c 	bl	1013fba <nrf_802154_spinel_send>
 100ee82:	f7ff bb40 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        extended = true;
 100ee86:	2101      	movs	r1, #1
 100ee88:	e7ee      	b.n	100ee68 <nrf_802154_spinel_decode_cmd_prop_value_set+0xa20>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100ee8a:	f06f 0002 	mvn.w	r0, #2
 100ee8e:	f7ff bb3a 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_REQUEST_INVALID;
 100ee92:	f06f 0006 	mvn.w	r0, #6
            return spinel_decode_prop_nrf_802154_ack_data_clear(p_property_data,
 100ee96:	f7ff bb36 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100ee9a:	4a42      	ldr	r2, [pc, #264]	; (100efa4 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb5c>)
 100ee9c:	ab16      	add	r3, sp, #88	; 0x58
 100ee9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100eea2:	f004 feff 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100eea6:	2800      	cmp	r0, #0
 100eea8:	db0b      	blt.n	100eec2 <nrf_802154_spinel_decode_cmd_prop_value_set+0xa7a>
    nrf_802154_security_global_frame_counter_set(frame_counter);
 100eeaa:	9816      	ldr	r0, [sp, #88]	; 0x58
 100eeac:	f004 f8ac 	bl	1013008 <nrf_802154_security_global_frame_counter_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100eeb0:	2300      	movs	r3, #0
 100eeb2:	2206      	movs	r2, #6
 100eeb4:	2180      	movs	r1, #128	; 0x80
 100eeb6:	9300      	str	r3, [sp, #0]
 100eeb8:	483b      	ldr	r0, [pc, #236]	; (100efa8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb60>)
 100eeba:	f005 f87e 	bl	1013fba <nrf_802154_spinel_send>
 100eebe:	f7ff bb22 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100eec2:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_security_global_frame_counter_set(p_property_data,
 100eec6:	f7ff bb1e 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    nrf_802154_key_t            key = {0};
 100eeca:	2218      	movs	r2, #24
            return spinel_decode_prop_nrf_802154_security_key_store(p_property_data,
 100eecc:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
    nrf_802154_key_t            key = {0};
 100eed0:	2100      	movs	r1, #0
 100eed2:	a816      	add	r0, sp, #88	; 0x58
 100eed4:	f003 fd9d 	bl	1012a12 <memset>
    siz = spinel_datatype_unpack(p_property_data,
 100eed8:	ab1b      	add	r3, sp, #108	; 0x6c
 100eeda:	9306      	str	r3, [sp, #24]
 100eedc:	ab1a      	add	r3, sp, #104	; 0x68
 100eede:	9305      	str	r3, [sp, #20]
 100eee0:	ab19      	add	r3, sp, #100	; 0x64
 100eee2:	9304      	str	r3, [sp, #16]
 100eee4:	ab14      	add	r3, sp, #80	; 0x50
 100eee6:	9303      	str	r3, [sp, #12]
 100eee8:	ab18      	add	r3, sp, #96	; 0x60
 100eeea:	9302      	str	r3, [sp, #8]
 100eeec:	ab17      	add	r3, sp, #92	; 0x5c
 100eeee:	9301      	str	r3, [sp, #4]
 100eef0:	ab13      	add	r3, sp, #76	; 0x4c
 100eef2:	9300      	str	r3, [sp, #0]
 100eef4:	4629      	mov	r1, r5
 100eef6:	4620      	mov	r0, r4
 100eef8:	4a32      	ldr	r2, [pc, #200]	; (100efc4 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb7c>)
 100eefa:	ab16      	add	r3, sp, #88	; 0x58
 100eefc:	f004 fed2 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100ef00:	2800      	cmp	r0, #0
 100ef02:	db0c      	blt.n	100ef1e <nrf_802154_spinel_decode_cmd_prop_value_set+0xad6>
    err = nrf_802154_security_key_store(&key);
 100ef04:	a816      	add	r0, sp, #88	; 0x58
 100ef06:	f004 f881 	bl	101300c <nrf_802154_security_key_store>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ef0a:	f643 432a 	movw	r3, #15402	; 0x3c2a
 100ef0e:	9000      	str	r0, [sp, #0]
 100ef10:	2206      	movs	r2, #6
 100ef12:	2180      	movs	r1, #128	; 0x80
 100ef14:	482c      	ldr	r0, [pc, #176]	; (100efc8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb80>)
 100ef16:	f005 f850 	bl	1013fba <nrf_802154_spinel_send>
 100ef1a:	f7ff baf4 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100ef1e:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_security_key_store(p_property_data,
 100ef22:	f7ff baf0 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    nrf_802154_key_id_t         key_id = {.p_key_id = key_id_data};
 100ef26:	2300      	movs	r3, #0
    siz = spinel_datatype_unpack(p_property_data,
 100ef28:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    nrf_802154_key_id_t         key_id = {.p_key_id = key_id_data};
 100ef2c:	9314      	str	r3, [sp, #80]	; 0x50
 100ef2e:	ab16      	add	r3, sp, #88	; 0x58
 100ef30:	9315      	str	r3, [sp, #84]	; 0x54
    siz = spinel_datatype_unpack(p_property_data,
 100ef32:	ab13      	add	r3, sp, #76	; 0x4c
 100ef34:	9301      	str	r3, [sp, #4]
 100ef36:	ab15      	add	r3, sp, #84	; 0x54
 100ef38:	9300      	str	r3, [sp, #0]
 100ef3a:	4a24      	ldr	r2, [pc, #144]	; (100efcc <nrf_802154_spinel_decode_cmd_prop_value_set+0xb84>)
 100ef3c:	ab14      	add	r3, sp, #80	; 0x50
 100ef3e:	f004 feb1 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100ef42:	2800      	cmp	r0, #0
 100ef44:	db0c      	blt.n	100ef60 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb18>
    err = nrf_802154_security_key_remove(&key_id);
 100ef46:	a814      	add	r0, sp, #80	; 0x50
 100ef48:	f004 f862 	bl	1013010 <nrf_802154_security_key_remove>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100ef4c:	f643 432b 	movw	r3, #15403	; 0x3c2b
 100ef50:	9000      	str	r0, [sp, #0]
 100ef52:	2206      	movs	r2, #6
 100ef54:	2180      	movs	r1, #128	; 0x80
 100ef56:	481c      	ldr	r0, [pc, #112]	; (100efc8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb80>)
 100ef58:	f005 f82f 	bl	1013fba <nrf_802154_spinel_send>
 100ef5c:	f7ff bad3 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100ef60:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_security_key_remove(p_property_data,
 100ef64:	f7ff bacf 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    siz = spinel_datatype_unpack(p_property_data,
 100ef68:	4a19      	ldr	r2, [pc, #100]	; (100efd0 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb88>)
 100ef6a:	ab16      	add	r3, sp, #88	; 0x58
 100ef6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100ef70:	f004 fe98 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100ef74:	2800      	cmp	r0, #0
 100ef76:	db0c      	blt.n	100ef92 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb4a>
    nrf_802154_csl_writer_period_set(csl_period);
 100ef78:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 100ef7c:	f004 f84a 	bl	1013014 <nrf_802154_csl_writer_period_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100ef80:	2300      	movs	r3, #0
 100ef82:	2206      	movs	r2, #6
 100ef84:	2180      	movs	r1, #128	; 0x80
 100ef86:	9300      	str	r3, [sp, #0]
 100ef88:	4807      	ldr	r0, [pc, #28]	; (100efa8 <nrf_802154_spinel_decode_cmd_prop_value_set+0xb60>)
 100ef8a:	f005 f816 	bl	1013fba <nrf_802154_spinel_send>
 100ef8e:	f7ff baba 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100ef92:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_csl_writer_period_set(p_property_data,
 100ef96:	f7ff bab6 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
 100ef9a:	bf00      	nop
 100ef9c:	01015bf9 	.word	0x01015bf9
 100efa0:	21003a0c 	.word	0x21003a0c
 100efa4:	01015c38 	.word	0x01015c38
 100efa8:	01015c3a 	.word	0x01015c3a
 100efac:	01015c61 	.word	0x01015c61
 100efb0:	01015c66 	.word	0x01015c66
 100efb4:	01015c6b 	.word	0x01015c6b
 100efb8:	01015c6e 	.word	0x01015c6e
 100efbc:	01015c73 	.word	0x01015c73
 100efc0:	01015c74 	.word	0x01015c74
 100efc4:	01015c77 	.word	0x01015c77
 100efc8:	01015bfe 	.word	0x01015bfe
 100efcc:	01015c84 	.word	0x01015c84
 100efd0:	01015d83 	.word	0x01015d83
    siz = spinel_datatype_unpack(p_property_data,
 100efd4:	4a22      	ldr	r2, [pc, #136]	; (100f060 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc18>)
 100efd6:	ab16      	add	r3, sp, #88	; 0x58
 100efd8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 100efdc:	f004 fe62 	bl	1013ca4 <spinel_datatype_unpack>
    if (siz < 0)
 100efe0:	2800      	cmp	r0, #0
 100efe2:	db0c      	blt.n	100effe <nrf_802154_spinel_decode_cmd_prop_value_set+0xbb6>
    nrf_802154_csl_writer_anchor_time_set(csl_anchor_time);
 100efe4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 100efe8:	f004 f816 	bl	1013018 <nrf_802154_csl_writer_anchor_time_set>
    return nrf_802154_spinel_send_prop_last_status_is(SPINEL_STATUS_OK);
 100efec:	2300      	movs	r3, #0
 100efee:	2206      	movs	r2, #6
 100eff0:	2180      	movs	r1, #128	; 0x80
 100eff2:	9300      	str	r3, [sp, #0]
 100eff4:	481b      	ldr	r0, [pc, #108]	; (100f064 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc1c>)
 100eff6:	f004 ffe0 	bl	1013fba <nrf_802154_spinel_send>
 100effa:	f7ff ba84 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
        return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
 100effe:	f06f 0002 	mvn.w	r0, #2
            return spinel_decode_prop_nrf_802154_csl_writer_anchor_time_set(p_property_data,
 100f002:	f7ff ba80 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    nrf_802154_stat_timestamps_get(&t);
 100f006:	a816      	add	r0, sp, #88	; 0x58
 100f008:	f7fb f99e 	bl	100a348 <nrf_802154_stat_timestamps_get>
    return nrf_802154_spinel_send_cmd_prop_value_is(
 100f00c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 100f010:	2180      	movs	r1, #128	; 0x80
 100f012:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 100f016:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 100f01a:	4813      	ldr	r0, [pc, #76]	; (100f068 <nrf_802154_spinel_decode_cmd_prop_value_set+0xc20>)
 100f01c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 100f020:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 100f024:	e9cd 2306 	strd	r2, r3, [sp, #24]
 100f028:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 100f02c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 100f030:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 100f034:	e9cd 2302 	strd	r2, r3, [sp, #8]
 100f038:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 100f03c:	e9cd 2300 	strd	r2, r3, [sp]
 100f040:	f643 4333 	movw	r3, #15411	; 0x3c33
 100f044:	2206      	movs	r2, #6
 100f046:	f004 ffb8 	bl	1013fba <nrf_802154_spinel_send>
            return spinel_decode_prop_nrf_802154_stat_timestamps_get(p_property_data,
 100f04a:	f7ff ba5c 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
 100f04e:	f06f 0002 	mvn.w	r0, #2
 100f052:	f7ff ba58 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
    switch (property)
 100f056:	f06f 0002 	mvn.w	r0, #2
 100f05a:	f7ff ba54 	b.w	100e506 <nrf_802154_spinel_decode_cmd_prop_value_set+0xbe>
 100f05e:	bf00      	nop
 100f060:	01015c0d 	.word	0x01015c0d
 100f064:	01015c3a 	.word	0x01015c3a
 100f068:	01015c8a 	.word	0x01015c8a

0100f06c <SystemInit>:
void SystemInit(void)
{
    /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
     until one ADDR is not initialized. */
    uint32_t index = 0;
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100f06c:	2200      	movs	r2, #0
 100f06e:	00d3      	lsls	r3, r2, #3
 100f070:	f103 73ff 	add.w	r3, r3, #33423360	; 0x1fe0000
 100f074:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 100f078:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
 100f07c:	3101      	adds	r1, #1
 100f07e:	d007      	beq.n	100f090 <SystemInit+0x24>
        #if defined ( __ICCARM__ )
            /* IAR will complain about the order of volatile pointer accesses. */
            #pragma diag_suppress=Pa082
        #endif
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 100f080:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100f084:	3201      	adds	r2, #1
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 100f086:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100f08a:	2a20      	cmp	r2, #32
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 100f08c:	600b      	str	r3, [r1, #0]
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100f08e:	d1ee      	bne.n	100f06e <SystemInit+0x2>
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
                #endif
            #elif defined(NRF_NETWORK)
                uint32_t var1 = *(uint32_t *)0x01FF0130ul;
                uint32_t var2 = *(uint32_t *)0x01FF0134ul;
 100f090:	4b14      	ldr	r3, [pc, #80]	; (100f0e4 <SystemInit+0x78>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
 100f092:	e9d3 324c 	ldrd	r3, r2, [r3, #304]	; 0x130
 100f096:	2b07      	cmp	r3, #7
 100f098:	d107      	bne.n	100f0aa <SystemInit+0x3e>
                {
                    switch(var2)
 100f09a:	3a02      	subs	r2, #2
 100f09c:	2a03      	cmp	r2, #3
 100f09e:	4b12      	ldr	r3, [pc, #72]	; (100f0e8 <SystemInit+0x7c>)
 100f0a0:	d90c      	bls.n	100f0bc <SystemInit+0x50>

    /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf53_errata_55())
    {
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
 100f0a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 100f0a6:	07d1      	lsls	r1, r2, #31
 100f0a8:	d416      	bmi.n	100f0d8 <SystemInit+0x6c>
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_NS->APPROTECT.DISABLE = NRF_UICR_NS->APPROTECT;
 100f0aa:	4b10      	ldr	r3, [pc, #64]	; (100f0ec <SystemInit+0x80>)
 100f0ac:	681a      	ldr	r2, [r3, #0]
 100f0ae:	4b10      	ldr	r3, [pc, #64]	; (100f0f0 <SystemInit+0x84>)
 100f0b0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    SystemCoreClock = __SYSTEM_CLOCK;
 100f0b4:	4b0f      	ldr	r3, [pc, #60]	; (100f0f4 <SystemInit+0x88>)
 100f0b6:	4a10      	ldr	r2, [pc, #64]	; (100f0f8 <SystemInit+0x8c>)
 100f0b8:	601a      	str	r2, [r3, #0]

    /* Handle fw-branch APPROTECT setup. */
    nrf53_handle_approtect();

    SystemCoreClockUpdate();
}
 100f0ba:	4770      	bx	lr
    if (nrf53_errata_49())
 100f0bc:	490f      	ldr	r1, [pc, #60]	; (100f0fc <SystemInit+0x90>)
 100f0be:	5c8a      	ldrb	r2, [r1, r2]
 100f0c0:	2a00      	cmp	r2, #0
 100f0c2:	d0ee      	beq.n	100f0a2 <SystemInit+0x36>
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
 100f0c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 100f0c8:	07d2      	lsls	r2, r2, #31
 100f0ca:	d5ea      	bpl.n	100f0a2 <SystemInit+0x36>
            NRF_POWER_NS->EVENTS_SLEEPENTER = 0;
 100f0cc:	2200      	movs	r2, #0
 100f0ce:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_NS->EVENTS_SLEEPEXIT = 0;
 100f0d2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
 100f0d6:	e7e4      	b.n	100f0a2 <SystemInit+0x36>
            NRF_RESET_NS->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
 100f0d8:	f06f 0201 	mvn.w	r2, #1
 100f0dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 100f0e0:	e7e3      	b.n	100f0aa <SystemInit+0x3e>
 100f0e2:	bf00      	nop
 100f0e4:	01ff0000 	.word	0x01ff0000
 100f0e8:	41005000 	.word	0x41005000
 100f0ec:	01ff8000 	.word	0x01ff8000
 100f0f0:	41006000 	.word	0x41006000
 100f0f4:	21000060 	.word	0x21000060
 100f0f8:	03d09000 	.word	0x03d09000
 100f0fc:	01015c94 	.word	0x01015c94

0100f100 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
 100f100:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
 100f102:	2501      	movs	r5, #1
        prev_mask = *p_mask;
 100f104:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
 100f106:	fab2 f382 	clz	r3, r2
 100f10a:	f1c3 031f 	rsb	r3, r3, #31
 100f10e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
 100f110:	fa05 f403 	lsl.w	r4, r5, r3
 100f114:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 100f118:	e8d0 6fef 	ldaex	r6, [r0]
 100f11c:	4296      	cmp	r6, r2
 100f11e:	d104      	bne.n	100f12a <nrfx_flag32_alloc+0x2a>
 100f120:	e8c0 4fec 	stlex	ip, r4, [r0]
 100f124:	f1bc 0f00 	cmp.w	ip, #0
 100f128:	d1f6      	bne.n	100f118 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
 100f12a:	d1eb      	bne.n	100f104 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
 100f12c:	4801      	ldr	r0, [pc, #4]	; (100f134 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
 100f12e:	700b      	strb	r3, [r1, #0]
}
 100f130:	bd70      	pop	{r4, r5, r6, pc}
 100f132:	bf00      	nop
 100f134:	0bad0000 	.word	0x0bad0000

0100f138 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
 100f138:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
 100f13a:	6803      	ldr	r3, [r0, #0]
 100f13c:	40cb      	lsrs	r3, r1
 100f13e:	07db      	lsls	r3, r3, #31
 100f140:	d410      	bmi.n	100f164 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
 100f142:	2301      	movs	r3, #1
 100f144:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
 100f146:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
 100f148:	ea43 0102 	orr.w	r1, r3, r2
 100f14c:	e8d0 4fef 	ldaex	r4, [r0]
 100f150:	4294      	cmp	r4, r2
 100f152:	d104      	bne.n	100f15e <nrfx_flag32_free+0x26>
 100f154:	e8c0 1fec 	stlex	ip, r1, [r0]
 100f158:	f1bc 0f00 	cmp.w	ip, #0
 100f15c:	d1f6      	bne.n	100f14c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
 100f15e:	d1f2      	bne.n	100f146 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
 100f160:	4801      	ldr	r0, [pc, #4]	; (100f168 <nrfx_flag32_free+0x30>)
}
 100f162:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
 100f164:	4801      	ldr	r0, [pc, #4]	; (100f16c <nrfx_flag32_free+0x34>)
 100f166:	e7fc      	b.n	100f162 <nrfx_flag32_free+0x2a>
 100f168:	0bad0000 	.word	0x0bad0000
 100f16c:	0bad0004 	.word	0x0bad0004

0100f170 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
 100f170:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
 100f172:	f003 021f 	and.w	r2, r3, #31
 100f176:	6002      	str	r2, [r0, #0]
}
 100f178:	4a03      	ldr	r2, [pc, #12]	; (100f188 <nrf_gpio_pin_port_decode+0x18>)
 100f17a:	4804      	ldr	r0, [pc, #16]	; (100f18c <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
 100f17c:	095b      	lsrs	r3, r3, #5
}
 100f17e:	2b01      	cmp	r3, #1
 100f180:	bf18      	it	ne
 100f182:	4610      	movne	r0, r2
 100f184:	4770      	bx	lr
 100f186:	bf00      	nop
 100f188:	418c0500 	.word	0x418c0500
 100f18c:	418c0800 	.word	0x418c0800

0100f190 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
 100f190:	4b03      	ldr	r3, [pc, #12]	; (100f1a0 <pin_in_use_by_te+0x10>)
 100f192:	3008      	adds	r0, #8
 100f194:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 100f198:	f3c0 1040 	ubfx	r0, r0, #5, #1
 100f19c:	4770      	bx	lr
 100f19e:	bf00      	nop
 100f1a0:	21000064 	.word	0x21000064

0100f1a4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
 100f1a4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 100f1a6:	4c0d      	ldr	r4, [pc, #52]	; (100f1dc <call_handler+0x38>)
 100f1a8:	f100 0308 	add.w	r3, r0, #8
 100f1ac:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
 100f1b0:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 100f1b2:	05da      	lsls	r2, r3, #23
{
 100f1b4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 100f1b6:	d507      	bpl.n	100f1c8 <call_handler+0x24>
 100f1b8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
 100f1bc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 100f1c0:	6852      	ldr	r2, [r2, #4]
 100f1c2:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
 100f1c6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
 100f1c8:	68a3      	ldr	r3, [r4, #8]
 100f1ca:	b12b      	cbz	r3, 100f1d8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
 100f1cc:	4631      	mov	r1, r6
 100f1ce:	4628      	mov	r0, r5
 100f1d0:	68e2      	ldr	r2, [r4, #12]
    }
}
 100f1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
 100f1d6:	4718      	bx	r3
}
 100f1d8:	bd70      	pop	{r4, r5, r6, pc}
 100f1da:	bf00      	nop
 100f1dc:	21000064 	.word	0x21000064

0100f1e0 <release_handler>:
{
 100f1e0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 100f1e2:	4a12      	ldr	r2, [pc, #72]	; (100f22c <release_handler+0x4c>)
 100f1e4:	3008      	adds	r0, #8
 100f1e6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 100f1ea:	05d9      	lsls	r1, r3, #23
 100f1ec:	d51b      	bpl.n	100f226 <release_handler+0x46>
 100f1ee:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
 100f1f2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 100f1f6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
 100f1fa:	2000      	movs	r0, #0
 100f1fc:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
 100f200:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 100f204:	f413 7f80 	tst.w	r3, #256	; 0x100
 100f208:	d003      	beq.n	100f212 <release_handler+0x32>
 100f20a:	f3c3 2343 	ubfx	r3, r3, #9, #4
 100f20e:	4299      	cmp	r1, r3
 100f210:	d009      	beq.n	100f226 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
 100f212:	3001      	adds	r0, #1
 100f214:	2830      	cmp	r0, #48	; 0x30
 100f216:	d1f3      	bne.n	100f200 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
 100f218:	2300      	movs	r3, #0
 100f21a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
 100f21e:	4804      	ldr	r0, [pc, #16]	; (100f230 <release_handler+0x50>)
}
 100f220:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
 100f222:	f7ff bf89 	b.w	100f138 <nrfx_flag32_free>
}
 100f226:	bc10      	pop	{r4}
 100f228:	4770      	bx	lr
 100f22a:	bf00      	nop
 100f22c:	21000064 	.word	0x21000064
 100f230:	210000d8 	.word	0x210000d8

0100f234 <pin_handler_trigger_uninit>:
{
 100f234:	b538      	push	{r3, r4, r5, lr}
 100f236:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
 100f238:	f7ff ffaa 	bl	100f190 <pin_in_use_by_te>
 100f23c:	4c0b      	ldr	r4, [pc, #44]	; (100f26c <pin_handler_trigger_uninit+0x38>)
 100f23e:	f102 0508 	add.w	r5, r2, #8
 100f242:	b160      	cbz	r0, 100f25e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
 100f244:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 100f246:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
 100f24a:	0b5b      	lsrs	r3, r3, #13
 100f24c:	009b      	lsls	r3, r3, #2
 100f24e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 100f252:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 100f256:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
 100f25a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
 100f25e:	4610      	mov	r0, r2
 100f260:	f7ff ffbe 	bl	100f1e0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
 100f264:	2300      	movs	r3, #0
 100f266:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
 100f26a:	bd38      	pop	{r3, r4, r5, pc}
 100f26c:	21000064 	.word	0x21000064

0100f270 <nrfx_gpiote_input_configure>:
{
 100f270:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 100f274:	4604      	mov	r4, r0
 100f276:	4690      	mov	r8, r2
 100f278:	461d      	mov	r5, r3
    if (p_input_config)
 100f27a:	b301      	cbz	r1, 100f2be <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 100f27c:	4e50      	ldr	r6, [pc, #320]	; (100f3c0 <nrfx_gpiote_input_configure+0x150>)
 100f27e:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
 100f282:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
 100f286:	079b      	lsls	r3, r3, #30
 100f288:	d502      	bpl.n	100f290 <nrfx_gpiote_input_configure+0x20>
 100f28a:	f7ff ff81 	bl	100f190 <pin_in_use_by_te>
 100f28e:	bb28      	cbnz	r0, 100f2dc <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
 100f290:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
 100f292:	4620      	mov	r0, r4
 100f294:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
 100f298:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
 100f29c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
 100f2a0:	f10d 020f 	add.w	r2, sp, #15
 100f2a4:	460b      	mov	r3, r1
 100f2a6:	f10d 010e 	add.w	r1, sp, #14
 100f2aa:	f004 fec6 	bl	101403a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
 100f2ae:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
 100f2b2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
 100f2b6:	f043 0301 	orr.w	r3, r3, #1
 100f2ba:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
 100f2be:	f1b8 0f00 	cmp.w	r8, #0
 100f2c2:	d02d      	beq.n	100f320 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 100f2c4:	4e3e      	ldr	r6, [pc, #248]	; (100f3c0 <nrfx_gpiote_input_configure+0x150>)
 100f2c6:	f104 0708 	add.w	r7, r4, #8
 100f2ca:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
 100f2ce:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
 100f2d2:	0799      	lsls	r1, r3, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
 100f2d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
        if (pin_is_output(pin))
 100f2d8:	d502      	bpl.n	100f2e0 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
 100f2da:	b1ca      	cbz	r2, 100f310 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
 100f2dc:	4839      	ldr	r0, [pc, #228]	; (100f3c4 <nrfx_gpiote_input_configure+0x154>)
 100f2de:	e021      	b.n	100f324 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
 100f2e0:	f023 0320 	bic.w	r3, r3, #32
 100f2e4:	04db      	lsls	r3, r3, #19
 100f2e6:	0cdb      	lsrs	r3, r3, #19
 100f2e8:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
            if (use_evt)
 100f2ec:	b182      	cbz	r2, 100f310 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
 100f2ee:	2803      	cmp	r0, #3
 100f2f0:	d8f4      	bhi.n	100f2dc <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
 100f2f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 100f2f6:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
 100f2fa:	ea4f 028c 	mov.w	r2, ip, lsl #2
 100f2fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
 100f302:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
 100f306:	b980      	cbnz	r0, 100f32a <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
 100f308:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
 100f30c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
 100f310:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
 100f314:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
 100f318:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 100f31c:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
 100f320:	bb1d      	cbnz	r5, 100f36a <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
 100f322:	4829      	ldr	r0, [pc, #164]	; (100f3c8 <nrfx_gpiote_input_configure+0x158>)
}
 100f324:	b004      	add	sp, #16
 100f326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
 100f32a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
 100f32e:	ea43 334c 	orr.w	r3, r3, ip, lsl #13
 100f332:	f021 0103 	bic.w	r1, r1, #3
 100f336:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
 100f33a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
 100f33e:	f043 0320 	orr.w	r3, r3, #32
 100f342:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
 100f346:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 100f34a:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100f34e:	0221      	lsls	r1, r4, #8
 100f350:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
 100f354:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
 100f358:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 100f35c:	ea41 010e 	orr.w	r1, r1, lr
 100f360:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
 100f364:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
 100f368:	e7d2      	b.n	100f310 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
 100f36a:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
 100f36c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
 100f370:	f7ff ff36 	bl	100f1e0 <release_handler>
    if (!handler)
 100f374:	2e00      	cmp	r6, #0
 100f376:	d0d4      	beq.n	100f322 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
 100f378:	4d11      	ldr	r5, [pc, #68]	; (100f3c0 <nrfx_gpiote_input_configure+0x150>)
 100f37a:	e9d5 2300 	ldrd	r2, r3, [r5]
 100f37e:	4296      	cmp	r6, r2
 100f380:	d101      	bne.n	100f386 <nrfx_gpiote_input_configure+0x116>
 100f382:	429f      	cmp	r7, r3
 100f384:	d019      	beq.n	100f3ba <nrfx_gpiote_input_configure+0x14a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
 100f386:	4811      	ldr	r0, [pc, #68]	; (100f3cc <nrfx_gpiote_input_configure+0x15c>)
 100f388:	f10d 010f 	add.w	r1, sp, #15
 100f38c:	f7ff feb8 	bl	100f100 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
 100f390:	4b0d      	ldr	r3, [pc, #52]	; (100f3c8 <nrfx_gpiote_input_configure+0x158>)
 100f392:	4298      	cmp	r0, r3
 100f394:	d1c6      	bne.n	100f324 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
 100f396:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
 100f39a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 100f39e:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
 100f3a2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 100f3a4:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
 100f3a8:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 100f3ac:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 100f3b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 100f3b4:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
 100f3b8:	e7b3      	b.n	100f322 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
 100f3ba:	2200      	movs	r2, #0
 100f3bc:	e7ed      	b.n	100f39a <nrfx_gpiote_input_configure+0x12a>
 100f3be:	bf00      	nop
 100f3c0:	21000064 	.word	0x21000064
 100f3c4:	0bad0004 	.word	0x0bad0004
 100f3c8:	0bad0000 	.word	0x0bad0000
 100f3cc:	210000d8 	.word	0x210000d8

0100f3d0 <nrfx_gpiote_output_configure>:
{
 100f3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 100f3d2:	4604      	mov	r4, r0
 100f3d4:	4616      	mov	r6, r2
 100f3d6:	b085      	sub	sp, #20
    if (p_config)
 100f3d8:	b319      	cbz	r1, 100f422 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 100f3da:	4d34      	ldr	r5, [pc, #208]	; (100f4ac <nrfx_gpiote_output_configure+0xdc>)
 100f3dc:	f100 0708 	add.w	r7, r0, #8
 100f3e0:	f835 2017 	ldrh.w	r2, [r5, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
 100f3e4:	0793      	lsls	r3, r2, #30
 100f3e6:	d403      	bmi.n	100f3f0 <nrfx_gpiote_output_configure+0x20>
 100f3e8:	f7ff fed2 	bl	100f190 <pin_in_use_by_te>
 100f3ec:	2800      	cmp	r0, #0
 100f3ee:	d15a      	bne.n	100f4a6 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
 100f3f0:	f012 0f1c 	tst.w	r2, #28
 100f3f4:	d002      	beq.n	100f3fc <nrfx_gpiote_output_configure+0x2c>
 100f3f6:	784b      	ldrb	r3, [r1, #1]
 100f3f8:	2b01      	cmp	r3, #1
 100f3fa:	d054      	beq.n	100f4a6 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
 100f3fc:	2301      	movs	r3, #1
 100f3fe:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
 100f402:	2300      	movs	r3, #0
 100f404:	1c4a      	adds	r2, r1, #1
 100f406:	e9cd 1300 	strd	r1, r3, [sp]
 100f40a:	4620      	mov	r0, r4
 100f40c:	1c8b      	adds	r3, r1, #2
 100f40e:	f10d 010f 	add.w	r1, sp, #15
 100f412:	f004 fe12 	bl	101403a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
 100f416:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
 100f41a:	f043 0303 	orr.w	r3, r3, #3
 100f41e:	f825 3017 	strh.w	r3, [r5, r7, lsl #1]
    if (p_task_config)
 100f422:	b916      	cbnz	r6, 100f42a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
 100f424:	4822      	ldr	r0, [pc, #136]	; (100f4b0 <nrfx_gpiote_output_configure+0xe0>)
}
 100f426:	b005      	add	sp, #20
 100f428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 100f42a:	4a20      	ldr	r2, [pc, #128]	; (100f4ac <nrfx_gpiote_output_configure+0xdc>)
 100f42c:	f104 0708 	add.w	r7, r4, #8
 100f430:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
        if (pin_is_input(pin))
 100f434:	0783      	lsls	r3, r0, #30
 100f436:	d536      	bpl.n	100f4a6 <nrfx_gpiote_output_configure+0xd6>
    p_reg->CONFIG[idx] = 0;
 100f438:	2300      	movs	r3, #0
        uint32_t ch = p_task_config->task_ch;
 100f43a:	f896 c000 	ldrb.w	ip, [r6]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
 100f43e:	f020 0020 	bic.w	r0, r0, #32
 100f442:	ea4f 018c 	mov.w	r1, ip, lsl #2
 100f446:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
 100f44a:	04c0      	lsls	r0, r0, #19
 100f44c:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
 100f450:	0cc0      	lsrs	r0, r0, #19
 100f452:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
 100f456:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
 100f45a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
 100f45e:	7875      	ldrb	r5, [r6, #1]
 100f460:	2d00      	cmp	r5, #0
 100f462:	d0df      	beq.n	100f424 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
 100f464:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
 100f468:	78b6      	ldrb	r6, [r6, #2]
 100f46a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
 100f46e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 100f472:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100f476:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
 100f47a:	0223      	lsls	r3, r4, #8
 100f47c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
 100f480:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100f482:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
 100f486:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
 100f48a:	0534      	lsls	r4, r6, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100f48c:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
 100f48e:	f404 1480 	and.w	r4, r4, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
 100f492:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100f496:	4323      	orrs	r3, r4
 100f498:	f040 0020 	orr.w	r0, r0, #32
 100f49c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
 100f4a0:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
 100f4a4:	e7be      	b.n	100f424 <nrfx_gpiote_output_configure+0x54>
{
 100f4a6:	4803      	ldr	r0, [pc, #12]	; (100f4b4 <nrfx_gpiote_output_configure+0xe4>)
 100f4a8:	e7bd      	b.n	100f426 <nrfx_gpiote_output_configure+0x56>
 100f4aa:	bf00      	nop
 100f4ac:	21000064 	.word	0x21000064
 100f4b0:	0bad0000 	.word	0x0bad0000
 100f4b4:	0bad0004 	.word	0x0bad0004

0100f4b8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
 100f4b8:	4b01      	ldr	r3, [pc, #4]	; (100f4c0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
 100f4ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
 100f4be:	4770      	bx	lr
 100f4c0:	21000064 	.word	0x21000064

0100f4c4 <nrfx_gpiote_channel_get>:
{
 100f4c4:	b508      	push	{r3, lr}
 100f4c6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
 100f4c8:	f7ff fe62 	bl	100f190 <pin_in_use_by_te>
 100f4cc:	b138      	cbz	r0, 100f4de <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 100f4ce:	4b05      	ldr	r3, [pc, #20]	; (100f4e4 <nrfx_gpiote_channel_get+0x20>)
 100f4d0:	3208      	adds	r2, #8
 100f4d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
 100f4d6:	4804      	ldr	r0, [pc, #16]	; (100f4e8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 100f4d8:	0b5b      	lsrs	r3, r3, #13
 100f4da:	700b      	strb	r3, [r1, #0]
}
 100f4dc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
 100f4de:	4803      	ldr	r0, [pc, #12]	; (100f4ec <nrfx_gpiote_channel_get+0x28>)
 100f4e0:	e7fc      	b.n	100f4dc <nrfx_gpiote_channel_get+0x18>
 100f4e2:	bf00      	nop
 100f4e4:	21000064 	.word	0x21000064
 100f4e8:	0bad0000 	.word	0x0bad0000
 100f4ec:	0bad0004 	.word	0x0bad0004

0100f4f0 <nrfx_gpiote_init>:
{
 100f4f0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 100f4f2:	4c0f      	ldr	r4, [pc, #60]	; (100f530 <nrfx_gpiote_init+0x40>)
 100f4f4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 100f4f8:	b9bd      	cbnz	r5, 100f52a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
 100f4fa:	2260      	movs	r2, #96	; 0x60
 100f4fc:	4629      	mov	r1, r5
 100f4fe:	f104 0010 	add.w	r0, r4, #16
 100f502:	f003 fa86 	bl	1012a12 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
 100f506:	200a      	movs	r0, #10
 100f508:	f7f7 fa20 	bl	100694c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 100f50c:	4b09      	ldr	r3, [pc, #36]	; (100f534 <nrfx_gpiote_init+0x44>)
    return err_code;
 100f50e:	480a      	ldr	r0, [pc, #40]	; (100f538 <nrfx_gpiote_init+0x48>)
 100f510:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
 100f514:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
 100f518:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 100f51c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
 100f520:	2301      	movs	r3, #1
 100f522:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
 100f526:	6763      	str	r3, [r4, #116]	; 0x74
}
 100f528:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
 100f52a:	4804      	ldr	r0, [pc, #16]	; (100f53c <nrfx_gpiote_init+0x4c>)
 100f52c:	e7fc      	b.n	100f528 <nrfx_gpiote_init+0x38>
 100f52e:	bf00      	nop
 100f530:	21000064 	.word	0x21000064
 100f534:	4100a000 	.word	0x4100a000
 100f538:	0bad0000 	.word	0x0bad0000
 100f53c:	0bad0005 	.word	0x0bad0005

0100f540 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
 100f540:	4b03      	ldr	r3, [pc, #12]	; (100f550 <nrfx_gpiote_is_init+0x10>)
 100f542:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
 100f546:	3800      	subs	r0, #0
 100f548:	bf18      	it	ne
 100f54a:	2001      	movne	r0, #1
 100f54c:	4770      	bx	lr
 100f54e:	bf00      	nop
 100f550:	21000064 	.word	0x21000064

0100f554 <nrfx_gpiote_channel_free>:
{
 100f554:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
 100f556:	4801      	ldr	r0, [pc, #4]	; (100f55c <nrfx_gpiote_channel_free+0x8>)
 100f558:	f7ff bdee 	b.w	100f138 <nrfx_flag32_free>
 100f55c:	210000d4 	.word	0x210000d4

0100f560 <nrfx_gpiote_channel_alloc>:
{
 100f560:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
 100f562:	4801      	ldr	r0, [pc, #4]	; (100f568 <nrfx_gpiote_channel_alloc+0x8>)
 100f564:	f7ff bdcc 	b.w	100f100 <nrfx_flag32_alloc>
 100f568:	210000d4 	.word	0x210000d4

0100f56c <nrfx_gpiote_trigger_enable>:
{
 100f56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 100f56e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 100f570:	f7ff fe0e 	bl	100f190 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 100f574:	4b1e      	ldr	r3, [pc, #120]	; (100f5f0 <nrfx_gpiote_trigger_enable+0x84>)
 100f576:	f104 0208 	add.w	r2, r4, #8
 100f57a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 100f57e:	b1e8      	cbz	r0, 100f5bc <nrfx_gpiote_trigger_enable+0x50>
 100f580:	f013 0502 	ands.w	r5, r3, #2
 100f584:	d11a      	bne.n	100f5bc <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 100f586:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
 100f588:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
 100f58a:	f102 4082 	add.w	r0, r2, #1090519040	; 0x41000000
 100f58e:	f500 4021 	add.w	r0, r0, #41216	; 0xa100
 100f592:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 100f596:	6005      	str	r5, [r0, #0]
 100f598:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
 100f59c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
 100f59e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
 100f5a2:	f040 0001 	orr.w	r0, r0, #1
 100f5a6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
 100f5aa:	b129      	cbz	r1, 100f5b8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
 100f5ac:	2201      	movs	r2, #1
 100f5ae:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
 100f5b2:	4a10      	ldr	r2, [pc, #64]	; (100f5f4 <nrfx_gpiote_trigger_enable+0x88>)
 100f5b4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 100f5b8:	b003      	add	sp, #12
 100f5ba:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 100f5bc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
 100f5c0:	2b04      	cmp	r3, #4
 100f5c2:	d011      	beq.n	100f5e8 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
 100f5c4:	2b05      	cmp	r3, #5
 100f5c6:	d011      	beq.n	100f5ec <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 100f5c8:	a801      	add	r0, sp, #4
 100f5ca:	9401      	str	r4, [sp, #4]
 100f5cc:	f7ff fdd0 	bl	100f170 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
 100f5d0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
 100f5d2:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
 100f5d4:	40d9      	lsrs	r1, r3
 100f5d6:	f001 0101 	and.w	r1, r1, #1
 100f5da:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
 100f5dc:	4620      	mov	r0, r4
}
 100f5de:	b003      	add	sp, #12
 100f5e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
 100f5e4:	f004 bd72 	b.w	10140cc <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
 100f5e8:	2103      	movs	r1, #3
 100f5ea:	e7f7      	b.n	100f5dc <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
 100f5ec:	2102      	movs	r1, #2
 100f5ee:	e7f5      	b.n	100f5dc <nrfx_gpiote_trigger_enable+0x70>
 100f5f0:	21000064 	.word	0x21000064
 100f5f4:	4100a000 	.word	0x4100a000

0100f5f8 <nrfx_gpiote_trigger_disable>:
{
 100f5f8:	b508      	push	{r3, lr}
 100f5fa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 100f5fc:	f7ff fdc8 	bl	100f190 <pin_in_use_by_te>
 100f600:	b1c0      	cbz	r0, 100f634 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 100f602:	4b0f      	ldr	r3, [pc, #60]	; (100f640 <nrfx_gpiote_trigger_disable+0x48>)
 100f604:	f102 0108 	add.w	r1, r2, #8
 100f608:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 100f60c:	0799      	lsls	r1, r3, #30
 100f60e:	d411      	bmi.n	100f634 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
 100f610:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 100f612:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
 100f614:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
 100f616:	490b      	ldr	r1, [pc, #44]	; (100f644 <nrfx_gpiote_trigger_disable+0x4c>)
 100f618:	009b      	lsls	r3, r3, #2
 100f61a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 100f61e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
 100f622:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 100f626:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 100f62a:	f022 0203 	bic.w	r2, r2, #3
 100f62e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
 100f632:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 100f634:	2100      	movs	r1, #0
}
 100f636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 100f63a:	4610      	mov	r0, r2
 100f63c:	f004 bd46 	b.w	10140cc <nrf_gpio_cfg_sense_set>
 100f640:	21000064 	.word	0x21000064
 100f644:	4100a000 	.word	0x4100a000

0100f648 <nrfx_gpiote_pin_uninit>:
{
 100f648:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
 100f64a:	4b10      	ldr	r3, [pc, #64]	; (100f68c <nrfx_gpiote_pin_uninit+0x44>)
 100f64c:	f100 0208 	add.w	r2, r0, #8
 100f650:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
 100f654:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
 100f656:	07db      	lsls	r3, r3, #31
 100f658:	d516      	bpl.n	100f688 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
 100f65a:	f7ff ffcd 	bl	100f5f8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
 100f65e:	4620      	mov	r0, r4
 100f660:	f7ff fde8 	bl	100f234 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 100f664:	a801      	add	r0, sp, #4
 100f666:	9401      	str	r4, [sp, #4]
 100f668:	f7ff fd82 	bl	100f170 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 100f66c:	9b01      	ldr	r3, [sp, #4]
 100f66e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 100f672:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 100f676:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
 100f67a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
 100f67e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
 100f682:	4803      	ldr	r0, [pc, #12]	; (100f690 <nrfx_gpiote_pin_uninit+0x48>)
}
 100f684:	b002      	add	sp, #8
 100f686:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
 100f688:	4802      	ldr	r0, [pc, #8]	; (100f694 <nrfx_gpiote_pin_uninit+0x4c>)
 100f68a:	e7fb      	b.n	100f684 <nrfx_gpiote_pin_uninit+0x3c>
 100f68c:	21000064 	.word	0x21000064
 100f690:	0bad0000 	.word	0x0bad0000
 100f694:	0bad0004 	.word	0x0bad0004

0100f698 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
 100f698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
 100f69c:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
 100f69e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 100f6a0:	4634      	mov	r4, r6
{
 100f6a2:	4b65      	ldr	r3, [pc, #404]	; (100f838 <nrfx_gpiote_irq_handler+0x1a0>)
    return p_reg->INTENSET & mask;
 100f6a4:	4865      	ldr	r0, [pc, #404]	; (100f83c <nrfx_gpiote_irq_handler+0x1a4>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 100f6a6:	4966      	ldr	r1, [pc, #408]	; (100f840 <nrfx_gpiote_irq_handler+0x1a8>)
{
 100f6a8:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 100f6aa:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
 100f6ac:	b135      	cbz	r5, 100f6bc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
 100f6ae:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
 100f6b2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 100f6b4:	bf1e      	ittt	ne
 100f6b6:	601c      	strne	r4, [r3, #0]
 100f6b8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
 100f6ba:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 100f6bc:	3304      	adds	r3, #4
 100f6be:	428b      	cmp	r3, r1
        }
        mask <<= 1;
 100f6c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 100f6c4:	d1f1      	bne.n	100f6aa <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 100f6c6:	4b5d      	ldr	r3, [pc, #372]	; (100f83c <nrfx_gpiote_irq_handler+0x1a4>)
 100f6c8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
 100f6cc:	2b00      	cmp	r3, #0
 100f6ce:	f000 8096 	beq.w	100f7fe <nrfx_gpiote_irq_handler+0x166>
        *p_masks = gpio_regs[i]->LATCH;
 100f6d2:	f8df 9170 	ldr.w	r9, [pc, #368]	; 100f844 <nrfx_gpiote_irq_handler+0x1ac>
 100f6d6:	f8df 8170 	ldr.w	r8, [pc, #368]	; 100f848 <nrfx_gpiote_irq_handler+0x1b0>
 100f6da:	f8d9 3020 	ldr.w	r3, [r9, #32]
 100f6de:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
 100f6e0:	f8c9 3020 	str.w	r3, [r9, #32]
        *p_masks = gpio_regs[i]->LATCH;
 100f6e4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 100f6e8:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
 100f6ea:	f8c8 3020 	str.w	r3, [r8, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
 100f6ee:	f04f 0a00 	mov.w	sl, #0
            while (latch[i])
 100f6f2:	f10d 0b10 	add.w	fp, sp, #16
 100f6f6:	ea4f 134a 	mov.w	r3, sl, lsl #5
 100f6fa:	9300      	str	r3, [sp, #0]
 100f6fc:	e048      	b.n	100f790 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
 100f6fe:	fa94 f4a4 	rbit	r4, r4
 100f702:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
 100f706:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 100f708:	4a50      	ldr	r2, [pc, #320]	; (100f84c <nrfx_gpiote_irq_handler+0x1b4>)
                pin += 32 * i;
 100f70a:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 100f70c:	f104 0308 	add.w	r3, r4, #8
 100f710:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
 100f714:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
 100f716:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
 100f718:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
 100f71c:	fa03 f202 	lsl.w	r2, r3, r2
 100f720:	f81b 3000 	ldrb.w	r3, [fp, r0]
 100f724:	9403      	str	r4, [sp, #12]
 100f726:	ea23 0302 	bic.w	r3, r3, r2
 100f72a:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 100f72e:	a803      	add	r0, sp, #12
 100f730:	f7ff fd1e 	bl	100f170 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 100f734:	9b03      	ldr	r3, [sp, #12]
 100f736:	08b9      	lsrs	r1, r7, #2
 100f738:	3380      	adds	r3, #128	; 0x80
 100f73a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 100f73e:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
 100f742:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 100f744:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
 100f746:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
 100f74a:	d52b      	bpl.n	100f7a4 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
 100f74c:	4620      	mov	r0, r4
 100f74e:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 100f750:	b2dd      	uxtb	r5, r3
 100f752:	f7ff fd27 	bl	100f1a4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 100f756:	a803      	add	r0, sp, #12
 100f758:	9403      	str	r4, [sp, #12]
 100f75a:	f7ff fd09 	bl	100f170 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 100f75e:	9b03      	ldr	r3, [sp, #12]
 100f760:	3380      	adds	r3, #128	; 0x80
 100f762:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
 100f766:	f3c3 4301 	ubfx	r3, r3, #16, #2
 100f76a:	429d      	cmp	r5, r3
 100f76c:	d107      	bne.n	100f77e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 100f76e:	2100      	movs	r1, #0
 100f770:	4620      	mov	r0, r4
 100f772:	f004 fcab 	bl	10140cc <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
 100f776:	4629      	mov	r1, r5
 100f778:	4620      	mov	r0, r4
 100f77a:	f004 fca7 	bl	10140cc <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 100f77e:	a803      	add	r0, sp, #12
 100f780:	9403      	str	r4, [sp, #12]
 100f782:	f7ff fcf5 	bl	100f170 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
 100f786:	2201      	movs	r2, #1
 100f788:	9b03      	ldr	r3, [sp, #12]
 100f78a:	fa02 f303 	lsl.w	r3, r2, r3
 100f78e:	6203      	str	r3, [r0, #32]
            while (latch[i])
 100f790:	f85b 402a 	ldr.w	r4, [fp, sl, lsl #2]
 100f794:	2c00      	cmp	r4, #0
 100f796:	d1b2      	bne.n	100f6fe <nrfx_gpiote_irq_handler+0x66>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
 100f798:	f1ba 0f00 	cmp.w	sl, #0
 100f79c:	d11d      	bne.n	100f7da <nrfx_gpiote_irq_handler+0x142>
 100f79e:	f04f 0a01 	mov.w	sl, #1
 100f7a2:	e7a8      	b.n	100f6f6 <nrfx_gpiote_irq_handler+0x5e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
 100f7a4:	2b02      	cmp	r3, #2
 100f7a6:	d10c      	bne.n	100f7c2 <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
 100f7a8:	2103      	movs	r1, #3
 100f7aa:	4620      	mov	r0, r4
 100f7ac:	f004 fc8e 	bl	10140cc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
 100f7b0:	f005 0305 	and.w	r3, r5, #5
 100f7b4:	2b01      	cmp	r3, #1
 100f7b6:	d1e2      	bne.n	100f77e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
 100f7b8:	4639      	mov	r1, r7
 100f7ba:	4620      	mov	r0, r4
 100f7bc:	f7ff fcf2 	bl	100f1a4 <call_handler>
 100f7c0:	e7dd      	b.n	100f77e <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
 100f7c2:	2102      	movs	r1, #2
 100f7c4:	4620      	mov	r0, r4
 100f7c6:	9301      	str	r3, [sp, #4]
 100f7c8:	f004 fc80 	bl	10140cc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
 100f7cc:	2d03      	cmp	r5, #3
 100f7ce:	d0f3      	beq.n	100f7b8 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
 100f7d0:	9b01      	ldr	r3, [sp, #4]
 100f7d2:	2b03      	cmp	r3, #3
 100f7d4:	d1d3      	bne.n	100f77e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
 100f7d6:	2d02      	cmp	r5, #2
 100f7d8:	e7ed      	b.n	100f7b6 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 100f7da:	4b18      	ldr	r3, [pc, #96]	; (100f83c <nrfx_gpiote_irq_handler+0x1a4>)
 100f7dc:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
 100f7e0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
 100f7e4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 100f7e8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
 100f7ea:	f8c9 3020 	str.w	r3, [r9, #32]
        *p_masks = gpio_regs[i]->LATCH;
 100f7ee:	f8d8 2020 	ldr.w	r2, [r8, #32]
        if (latch[port_idx])
 100f7f2:	4313      	orrs	r3, r2
 100f7f4:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
 100f7f6:	f8c8 2020 	str.w	r2, [r8, #32]
 100f7fa:	f47f af78 	bne.w	100f6ee <nrfx_gpiote_irq_handler+0x56>
        mask &= ~NRFX_BIT(ch);
 100f7fe:	2401      	movs	r4, #1
    while (mask)
 100f800:	b916      	cbnz	r6, 100f808 <nrfx_gpiote_irq_handler+0x170>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
 100f802:	b007      	add	sp, #28
 100f804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
 100f808:	fa96 f3a6 	rbit	r3, r6
 100f80c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
 100f810:	fa04 f203 	lsl.w	r2, r4, r3
 100f814:	009b      	lsls	r3, r3, #2
 100f816:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 100f81a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
 100f81e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
 100f822:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
 100f826:	f3c0 2005 	ubfx	r0, r0, #8, #6
 100f82a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
 100f82e:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
 100f832:	f7ff fcb7 	bl	100f1a4 <call_handler>
 100f836:	e7e3      	b.n	100f800 <nrfx_gpiote_irq_handler+0x168>
 100f838:	4100a100 	.word	0x4100a100
 100f83c:	4100a000 	.word	0x4100a000
 100f840:	4100a120 	.word	0x4100a120
 100f844:	418c0500 	.word	0x418c0500
 100f848:	418c0800 	.word	0x418c0800
 100f84c:	21000064 	.word	0x21000064

0100f850 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
 100f850:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 100f852:	4c08      	ldr	r4, [pc, #32]	; (100f874 <nrfx_ipc_init+0x24>)
{
 100f854:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 100f856:	7923      	ldrb	r3, [r4, #4]
{
 100f858:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 100f85a:	b943      	cbnz	r3, 100f86e <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
 100f85c:	2012      	movs	r0, #18
 100f85e:	f7f7 f875 	bl	100694c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
 100f862:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
 100f864:	4804      	ldr	r0, [pc, #16]	; (100f878 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
 100f866:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
 100f868:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
 100f86a:	60a5      	str	r5, [r4, #8]
}
 100f86c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
 100f86e:	4803      	ldr	r0, [pc, #12]	; (100f87c <nrfx_ipc_init+0x2c>)
 100f870:	e7fc      	b.n	100f86c <nrfx_ipc_init+0x1c>
 100f872:	bf00      	nop
 100f874:	21003a10 	.word	0x21003a10
 100f878:	0bad0000 	.word	0x0bad0000
 100f87c:	0bad000c 	.word	0x0bad000c

0100f880 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
 100f880:	2300      	movs	r3, #0
{
 100f882:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
 100f884:	4a0d      	ldr	r2, [pc, #52]	; (100f8bc <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
 100f886:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 100f88a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
 100f88e:	3301      	adds	r3, #1
 100f890:	2b10      	cmp	r3, #16
 100f892:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 100f896:	d1f6      	bne.n	100f886 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
 100f898:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
 100f89a:	4a08      	ldr	r2, [pc, #32]	; (100f8bc <nrfx_ipc_config_load+0x3c>)
 100f89c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 100f8a0:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
 100f8a4:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
 100f8a8:	3301      	adds	r3, #1
 100f8aa:	2b10      	cmp	r3, #16
 100f8ac:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 100f8b0:	d1f6      	bne.n	100f8a0 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
 100f8b2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
 100f8b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 100f8ba:	bd30      	pop	{r4, r5, pc}
 100f8bc:	41012000 	.word	0x41012000

0100f8c0 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
 100f8c0:	2301      	movs	r3, #1
 100f8c2:	4a02      	ldr	r2, [pc, #8]	; (100f8cc <nrfx_ipc_receive_event_enable+0xc>)
 100f8c4:	4083      	lsls	r3, r0
 100f8c6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 100f8ca:	4770      	bx	lr
 100f8cc:	41012000 	.word	0x41012000

0100f8d0 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
 100f8d0:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
 100f8d2:	4a02      	ldr	r2, [pc, #8]	; (100f8dc <nrfx_ipc_receive_event_disable+0xc>)
 100f8d4:	4083      	lsls	r3, r0
 100f8d6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
 100f8da:	4770      	bx	lr
 100f8dc:	41012000 	.word	0x41012000

0100f8e0 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
 100f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
 100f8e2:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100f8e4:	2700      	movs	r7, #0
    return p_reg->INTPEND;
 100f8e6:	4b0b      	ldr	r3, [pc, #44]	; (100f914 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
 100f8e8:	4d0b      	ldr	r5, [pc, #44]	; (100f918 <nrfx_ipc_irq_handler+0x38>)
 100f8ea:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
 100f8ee:	b904      	cbnz	r4, 100f8f2 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
 100f8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
 100f8f2:	fa94 f0a4 	rbit	r0, r4
 100f8f6:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
 100f8fa:	fa06 f300 	lsl.w	r3, r6, r0
 100f8fe:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100f902:	4b06      	ldr	r3, [pc, #24]	; (100f91c <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
 100f904:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100f906:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
 100f908:	682b      	ldr	r3, [r5, #0]
 100f90a:	2b00      	cmp	r3, #0
 100f90c:	d0ef      	beq.n	100f8ee <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
 100f90e:	68a9      	ldr	r1, [r5, #8]
 100f910:	4798      	blx	r3
 100f912:	e7ec      	b.n	100f8ee <nrfx_ipc_irq_handler+0xe>
 100f914:	41012000 	.word	0x41012000
 100f918:	21003a10 	.word	0x21003a10
 100f91c:	41012100 	.word	0x41012100

0100f920 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 100f920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100f924:	460e      	mov	r6, r1
 100f926:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 100f928:	4d0c      	ldr	r5, [pc, #48]	; (100f95c <metal_generic_dev_open+0x3c>)
 100f92a:	f855 4f18 	ldr.w	r4, [r5, #24]!
 100f92e:	42ac      	cmp	r4, r5
 100f930:	d103      	bne.n	100f93a <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
 100f932:	f06f 0012 	mvn.w	r0, #18
 100f936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
 100f93a:	4631      	mov	r1, r6
 100f93c:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
 100f940:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
 100f944:	f003 f814 	bl	1012970 <strcmp>
 100f948:	b930      	cbnz	r0, 100f958 <metal_generic_dev_open+0x38>
			*device = dev;
 100f94a:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
 100f94e:	4640      	mov	r0, r8
}
 100f950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
 100f954:	f004 bcc8 	b.w	10142e8 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 100f958:	6824      	ldr	r4, [r4, #0]
 100f95a:	e7e8      	b.n	100f92e <metal_generic_dev_open+0xe>
 100f95c:	21003a1c 	.word	0x21003a1c

0100f960 <metal_bus_unregister>:
{
 100f960:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
 100f962:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 100f966:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
 100f968:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
 100f96a:	f100 0324 	add.w	r3, r0, #36	; 0x24
 100f96e:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
 100f970:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
 100f974:	6843      	ldr	r3, [r0, #4]
{
 100f976:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
 100f978:	b103      	cbz	r3, 100f97c <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
 100f97a:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 100f97c:	4b05      	ldr	r3, [pc, #20]	; (100f994 <metal_bus_unregister+0x34>)
 100f97e:	781a      	ldrb	r2, [r3, #0]
 100f980:	2a06      	cmp	r2, #6
 100f982:	d905      	bls.n	100f990 <metal_bus_unregister+0x30>
 100f984:	685b      	ldr	r3, [r3, #4]
 100f986:	b11b      	cbz	r3, 100f990 <metal_bus_unregister+0x30>
 100f988:	2007      	movs	r0, #7
 100f98a:	6822      	ldr	r2, [r4, #0]
 100f98c:	4902      	ldr	r1, [pc, #8]	; (100f998 <metal_bus_unregister+0x38>)
 100f98e:	4798      	blx	r3
}
 100f990:	2000      	movs	r0, #0
 100f992:	bd10      	pop	{r4, pc}
 100f994:	21003a1c 	.word	0x21003a1c
 100f998:	01015ca4 	.word	0x01015ca4

0100f99c <metal_bus_find>:
{
 100f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100f9a0:	4607      	mov	r7, r0
 100f9a2:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
 100f9a4:	4e0b      	ldr	r6, [pc, #44]	; (100f9d4 <metal_bus_find+0x38>)
 100f9a6:	f856 4f08 	ldr.w	r4, [r6, #8]!
 100f9aa:	42b4      	cmp	r4, r6
 100f9ac:	d102      	bne.n	100f9b4 <metal_bus_find+0x18>
	return -ENOENT;
 100f9ae:	f06f 0001 	mvn.w	r0, #1
 100f9b2:	e00a      	b.n	100f9ca <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
 100f9b4:	4639      	mov	r1, r7
 100f9b6:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
 100f9ba:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
 100f9be:	f002 ffd7 	bl	1012970 <strcmp>
 100f9c2:	b920      	cbnz	r0, 100f9ce <metal_bus_find+0x32>
 100f9c4:	b11d      	cbz	r5, 100f9ce <metal_bus_find+0x32>
			*result = bus;
 100f9c6:	f8c5 8000 	str.w	r8, [r5]
}
 100f9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
 100f9ce:	6824      	ldr	r4, [r4, #0]
 100f9d0:	e7eb      	b.n	100f9aa <metal_bus_find+0xe>
 100f9d2:	bf00      	nop
 100f9d4:	21003a1c 	.word	0x21003a1c

0100f9d8 <metal_bus_register>:
{
 100f9d8:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
 100f9da:	4604      	mov	r4, r0
 100f9dc:	b910      	cbnz	r0, 100f9e4 <metal_bus_register+0xc>
		return -EINVAL;
 100f9de:	f06f 0015 	mvn.w	r0, #21
}
 100f9e2:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
 100f9e4:	6800      	ldr	r0, [r0, #0]
 100f9e6:	2800      	cmp	r0, #0
 100f9e8:	d0f9      	beq.n	100f9de <metal_bus_register+0x6>
 100f9ea:	f002 ffb1 	bl	1012950 <strlen>
 100f9ee:	2800      	cmp	r0, #0
 100f9f0:	d0f5      	beq.n	100f9de <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
 100f9f2:	2100      	movs	r1, #0
 100f9f4:	6820      	ldr	r0, [r4, #0]
 100f9f6:	f7ff ffd1 	bl	100f99c <metal_bus_find>
 100f9fa:	b1c8      	cbz	r0, 100fa30 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
 100f9fc:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
 100fa00:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
 100fa04:	4b0c      	ldr	r3, [pc, #48]	; (100fa38 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 100fa06:	f104 0224 	add.w	r2, r4, #36	; 0x24
 100fa0a:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
 100fa0c:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
 100fa10:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
 100fa12:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
 100fa14:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
 100fa16:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 100fa18:	781a      	ldrb	r2, [r3, #0]
 100fa1a:	2a06      	cmp	r2, #6
 100fa1c:	d901      	bls.n	100fa22 <metal_bus_register+0x4a>
 100fa1e:	685b      	ldr	r3, [r3, #4]
 100fa20:	b90b      	cbnz	r3, 100fa26 <metal_bus_register+0x4e>
	return 0;
 100fa22:	2000      	movs	r0, #0
 100fa24:	e7dd      	b.n	100f9e2 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 100fa26:	2007      	movs	r0, #7
 100fa28:	6822      	ldr	r2, [r4, #0]
 100fa2a:	4904      	ldr	r1, [pc, #16]	; (100fa3c <metal_bus_register+0x64>)
 100fa2c:	4798      	blx	r3
 100fa2e:	e7f8      	b.n	100fa22 <metal_bus_register+0x4a>
		return -EEXIST;
 100fa30:	f06f 0010 	mvn.w	r0, #16
 100fa34:	e7d5      	b.n	100f9e2 <metal_bus_register+0xa>
 100fa36:	bf00      	nop
 100fa38:	21003a1c 	.word	0x21003a1c
 100fa3c:	01015ca6 	.word	0x01015ca6

0100fa40 <metal_register_generic_device>:
{
 100fa40:	b510      	push	{r4, lr}
 100fa42:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
 100fa44:	6800      	ldr	r0, [r0, #0]
 100fa46:	b910      	cbnz	r0, 100fa4e <metal_register_generic_device+0xe>
		return -EINVAL;
 100fa48:	f06f 0015 	mvn.w	r0, #21
}
 100fa4c:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
 100fa4e:	f002 ff7f 	bl	1012950 <strlen>
 100fa52:	2800      	cmp	r0, #0
 100fa54:	d0f8      	beq.n	100fa48 <metal_register_generic_device+0x8>
 100fa56:	68a3      	ldr	r3, [r4, #8]
 100fa58:	2b01      	cmp	r3, #1
 100fa5a:	d8f5      	bhi.n	100fa48 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
 100fa5c:	4b06      	ldr	r3, [pc, #24]	; (100fa78 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
 100fa5e:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
 100fa62:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
 100fa64:	4b05      	ldr	r3, [pc, #20]	; (100fa7c <metal_register_generic_device+0x3c>)
 100fa66:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
 100fa68:	f103 0018 	add.w	r0, r3, #24
 100fa6c:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
 100fa6e:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
 100fa70:	61d9      	str	r1, [r3, #28]
	return 0;
 100fa72:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
 100fa74:	6011      	str	r1, [r2, #0]
}
 100fa76:	e7e9      	b.n	100fa4c <metal_register_generic_device+0xc>
 100fa78:	210000e0 	.word	0x210000e0
 100fa7c:	21003a1c 	.word	0x21003a1c

0100fa80 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 100fa80:	b538      	push	{r3, r4, r5, lr}
 100fa82:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
 100fa84:	4c0d      	ldr	r4, [pc, #52]	; (100fabc <metal_init+0x3c>)
 100fa86:	2220      	movs	r2, #32
 100fa88:	4620      	mov	r0, r4
 100fa8a:	2100      	movs	r1, #0
 100fa8c:	f002 ffc1 	bl	1012a12 <memset>

	_metal.common.log_handler   = params->log_handler;
 100fa90:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
 100fa92:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
 100fa94:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
 100fa96:	4623      	mov	r3, r4
 100fa98:	792a      	ldrb	r2, [r5, #4]
 100fa9a:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
 100fa9e:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
 100faa2:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
 100faa6:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
 100faaa:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
 100faae:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
 100fab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
 100fab6:	f000 b80f 	b.w	100fad8 <metal_sys_init>
 100faba:	bf00      	nop
 100fabc:	21003a1c 	.word	0x21003a1c

0100fac0 <metal_finish>:

void metal_finish(void)
{
 100fac0:	b508      	push	{r3, lr}
	metal_sys_finish();
 100fac2:	f000 f811 	bl	100fae8 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
 100fac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
 100faca:	2220      	movs	r2, #32
 100facc:	2100      	movs	r1, #0
 100face:	4801      	ldr	r0, [pc, #4]	; (100fad4 <metal_finish+0x14>)
 100fad0:	f002 bf9f 	b.w	1012a12 <memset>
 100fad4:	21003a1c 	.word	0x21003a1c

0100fad8 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 100fad8:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
 100fada:	4802      	ldr	r0, [pc, #8]	; (100fae4 <metal_sys_init+0xc>)
 100fadc:	f7ff ff7c 	bl	100f9d8 <metal_bus_register>
	return 0;
}
 100fae0:	2000      	movs	r0, #0
 100fae2:	bd08      	pop	{r3, pc}
 100fae4:	210000e0 	.word	0x210000e0

0100fae8 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
 100fae8:	4801      	ldr	r0, [pc, #4]	; (100faf0 <metal_sys_finish+0x8>)
 100faea:	f7ff bf39 	b.w	100f960 <metal_bus_unregister>
 100faee:	bf00      	nop
 100faf0:	210000e0 	.word	0x210000e0

0100faf4 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
 100faf4:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
 100faf6:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
 100faf8:	2b06      	cmp	r3, #6
{
 100fafa:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
 100fafc:	bf88      	it	hi
 100fafe:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
 100fb00:	4b09      	ldr	r3, [pc, #36]	; (100fb28 <metal_zephyr_log_handler+0x34>)
{
 100fb02:	ac05      	add	r4, sp, #20
 100fb04:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
 100fb08:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 100fb0c:	4807      	ldr	r0, [pc, #28]	; (100fb2c <metal_zephyr_log_handler+0x38>)
 100fb0e:	f002 f979 	bl	1011e04 <printk>

	va_start(args, format);
	vprintk(format, args);
 100fb12:	4621      	mov	r1, r4
 100fb14:	4628      	mov	r0, r5
	va_start(args, format);
 100fb16:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
 100fb18:	f7f5 fe80 	bl	100581c <vprintk>
	va_end(args);
}
 100fb1c:	b002      	add	sp, #8
 100fb1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 100fb22:	b003      	add	sp, #12
 100fb24:	4770      	bx	lr
 100fb26:	bf00      	nop
 100fb28:	010159c0 	.word	0x010159c0
 100fb2c:	01015cb9 	.word	0x01015cb9

0100fb30 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
 100fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100fb34:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
 100fb36:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 100fb38:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
 100fb3a:	4293      	cmp	r3, r2
{
 100fb3c:	4617      	mov	r7, r2
 100fb3e:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
 100fb40:	d341      	bcc.n	100fbc6 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 100fb42:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
 100fb44:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
 100fb48:	42bd      	cmp	r5, r7
 100fb4a:	d103      	bne.n	100fb54 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
 100fb4c:	2000      	movs	r0, #0
}
 100fb4e:	b007      	add	sp, #28
 100fb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
 100fb54:	fb0b f805 	mul.w	r8, fp, r5
 100fb58:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
 100fb5c:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
 100fb5e:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
 100fb62:	1d23      	adds	r3, r4, #4
 100fb64:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
 100fb66:	b9ca      	cbnz	r2, 100fb9c <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
 100fb68:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
 100fb6a:	6861      	ldr	r1, [r4, #4]
 100fb6c:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
 100fb6e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 100fb72:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
 100fb74:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 100fb76:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
 100fb7a:	1e5c      	subs	r4, r3, #1
 100fb7c:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 100fb80:	425b      	negs	r3, r3
 100fb82:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 100fb86:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
 100fb88:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
 100fb8c:	6884      	ldr	r4, [r0, #8]
 100fb8e:	3306      	adds	r3, #6
 100fb90:	42a1      	cmp	r1, r4
 100fb92:	bf28      	it	cs
 100fb94:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
 100fb98:	f004 fb72 	bl	1014280 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 100fb9c:	f859 3008 	ldr.w	r3, [r9, r8]
 100fba0:	4630      	mov	r0, r6
 100fba2:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
 100fba4:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 100fba6:	b2a9      	uxth	r1, r5
 100fba8:	6a1b      	ldr	r3, [r3, #32]
 100fbaa:	9301      	str	r3, [sp, #4]
 100fbac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100fbae:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 100fbb2:	9300      	str	r3, [sp, #0]
 100fbb4:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 100fbb8:	9b05      	ldr	r3, [sp, #20]
 100fbba:	f004 fbda 	bl	1014372 <virtqueue_create>
		if (ret)
 100fbbe:	2800      	cmp	r0, #0
 100fbc0:	d1c5      	bne.n	100fb4e <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
 100fbc2:	3501      	adds	r5, #1
 100fbc4:	e7c0      	b.n	100fb48 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
 100fbc6:	4801      	ldr	r0, [pc, #4]	; (100fbcc <virtio_create_virtqueues+0x9c>)
 100fbc8:	e7c1      	b.n	100fb4e <virtio_create_virtqueues+0x1e>
 100fbca:	bf00      	nop
 100fbcc:	fffff440 	.word	0xfffff440

0100fbd0 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
 100fbd0:	b510      	push	{r4, lr}
	if (vq) {
 100fbd2:	4604      	mov	r4, r0
 100fbd4:	b190      	cbz	r0, 100fbfc <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
 100fbd6:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 100fbd8:	8943      	ldrh	r3, [r0, #10]
 100fbda:	429a      	cmp	r2, r3
 100fbdc:	d009      	beq.n	100fbf2 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
 100fbde:	4b08      	ldr	r3, [pc, #32]	; (100fc00 <virtqueue_free+0x30>)
 100fbe0:	781a      	ldrb	r2, [r3, #0]
 100fbe2:	2a03      	cmp	r2, #3
 100fbe4:	d905      	bls.n	100fbf2 <virtqueue_free+0x22>
 100fbe6:	685b      	ldr	r3, [r3, #4]
 100fbe8:	b11b      	cbz	r3, 100fbf2 <virtqueue_free+0x22>
 100fbea:	6842      	ldr	r2, [r0, #4]
 100fbec:	4905      	ldr	r1, [pc, #20]	; (100fc04 <virtqueue_free+0x34>)
 100fbee:	2004      	movs	r0, #4
 100fbf0:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
 100fbf2:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
 100fbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100fbf8:	f005 ba1a 	b.w	1015030 <k_free>
 100fbfc:	bd10      	pop	{r4, pc}
 100fbfe:	bf00      	nop
 100fc00:	21003a1c 	.word	0x21003a1c
 100fc04:	01015d54 	.word	0x01015d54

0100fc08 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 100fc08:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
 100fc0a:	8944      	ldrh	r4, [r0, #10]
 100fc0c:	428c      	cmp	r4, r1
 100fc0e:	d912      	bls.n	100fc36 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 100fc10:	6a03      	ldr	r3, [r0, #32]
 100fc12:	3c01      	subs	r4, #1
 100fc14:	885d      	ldrh	r5, [r3, #2]
 100fc16:	402c      	ands	r4, r5
 100fc18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
 100fc1c:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
 100fc1e:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
 100fc20:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 100fc24:	6a02      	ldr	r2, [r0, #32]
 100fc26:	8853      	ldrh	r3, [r2, #2]
 100fc28:	3301      	adds	r3, #1
 100fc2a:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 100fc2c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 100fc2e:	3301      	adds	r3, #1
 100fc30:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 100fc32:	2000      	movs	r0, #0
}
 100fc34:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
 100fc36:	4801      	ldr	r0, [pc, #4]	; (100fc3c <virtqueue_add_consumed_buffer+0x34>)
 100fc38:	e7fc      	b.n	100fc34 <virtqueue_add_consumed_buffer+0x2c>
 100fc3a:	bf00      	nop
 100fc3c:	fffff441 	.word	0xfffff441

0100fc40 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
 100fc40:	b470      	push	{r4, r5, r6}
 100fc42:	9e03      	ldr	r6, [sp, #12]
 100fc44:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
 100fc46:	b158      	cbz	r0, 100fc60 <rpmsg_send_offchannel_raw+0x20>
 100fc48:	6a00      	ldr	r0, [r0, #32]
 100fc4a:	b148      	cbz	r0, 100fc60 <rpmsg_send_offchannel_raw+0x20>
 100fc4c:	b143      	cbz	r3, 100fc60 <rpmsg_send_offchannel_raw+0x20>
 100fc4e:	3401      	adds	r4, #1
 100fc50:	d006      	beq.n	100fc60 <rpmsg_send_offchannel_raw+0x20>
 100fc52:	2e00      	cmp	r6, #0
 100fc54:	db04      	blt.n	100fc60 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
 100fc56:	6f04      	ldr	r4, [r0, #112]	; 0x70
 100fc58:	b114      	cbz	r4, 100fc60 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 100fc5a:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
 100fc5c:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 100fc5e:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
 100fc60:	4801      	ldr	r0, [pc, #4]	; (100fc68 <rpmsg_send_offchannel_raw+0x28>)
}
 100fc62:	bc70      	pop	{r4, r5, r6}
 100fc64:	4770      	bx	lr
 100fc66:	bf00      	nop
 100fc68:	fffff82d 	.word	0xfffff82d

0100fc6c <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
 100fc6c:	b470      	push	{r4, r5, r6}
 100fc6e:	9e03      	ldr	r6, [sp, #12]
 100fc70:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
 100fc72:	b160      	cbz	r0, 100fc8e <rpmsg_send_offchannel_nocopy+0x22>
 100fc74:	6a00      	ldr	r0, [r0, #32]
 100fc76:	b150      	cbz	r0, 100fc8e <rpmsg_send_offchannel_nocopy+0x22>
 100fc78:	b14b      	cbz	r3, 100fc8e <rpmsg_send_offchannel_nocopy+0x22>
 100fc7a:	3401      	adds	r4, #1
 100fc7c:	d007      	beq.n	100fc8e <rpmsg_send_offchannel_nocopy+0x22>
 100fc7e:	2e00      	cmp	r6, #0
 100fc80:	db05      	blt.n	100fc8e <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
 100fc82:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 100fc86:	b114      	cbz	r4, 100fc8e <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
 100fc88:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
 100fc8a:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
 100fc8c:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
 100fc8e:	4801      	ldr	r0, [pc, #4]	; (100fc94 <rpmsg_send_offchannel_nocopy+0x28>)
}
 100fc90:	bc70      	pop	{r4, r5, r6}
 100fc92:	4770      	bx	lr
 100fc94:	fffff82d 	.word	0xfffff82d

0100fc98 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
 100fc98:	b570      	push	{r4, r5, r6, lr}
 100fc9a:	460c      	mov	r4, r1
 100fc9c:	4611      	mov	r1, r2
 100fc9e:	4605      	mov	r5, r0
 100fca0:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
 100fca2:	4b0c      	ldr	r3, [pc, #48]	; (100fcd4 <rpmsg_register_endpoint+0x3c>)
 100fca4:	2220      	movs	r2, #32
 100fca6:	2900      	cmp	r1, #0
 100fca8:	bf08      	it	eq
 100fcaa:	4619      	moveq	r1, r3
 100fcac:	4620      	mov	r0, r4
 100fcae:	f002 fe3b 	bl	1012928 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
 100fcb2:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
 100fcb4:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
 100fcb6:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
 100fcb8:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
 100fcba:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
 100fcbc:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 100fcbe:	9b06      	ldr	r3, [sp, #24]
 100fcc0:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
 100fcc2:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
 100fcc4:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
 100fcc8:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
 100fccc:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
 100fcce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 100fcd0:	6013      	str	r3, [r2, #0]
}
 100fcd2:	bd70      	pop	{r4, r5, r6, pc}
 100fcd4:	01015d75 	.word	0x01015d75

0100fcd8 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 100fcd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 100fcdc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 100fce0:	460d      	mov	r5, r1
 100fce2:	4692      	mov	sl, r2
 100fce4:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
 100fce6:	4606      	mov	r6, r0
 100fce8:	2800      	cmp	r0, #0
 100fcea:	d06c      	beq.n	100fdc6 <rpmsg_create_ept+0xee>
 100fcec:	2900      	cmp	r1, #0
 100fcee:	d06a      	beq.n	100fdc6 <rpmsg_create_ept+0xee>
 100fcf0:	f1b9 0f00 	cmp.w	r9, #0
 100fcf4:	d067      	beq.n	100fdc6 <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
 100fcf6:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
 100fcfa:	4640      	mov	r0, r8
 100fcfc:	f004 fca2 	bl	1014644 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
 100fd00:	1c78      	adds	r0, r7, #1
 100fd02:	d140      	bne.n	100fd86 <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 100fd04:	6cac      	ldr	r4, [r5, #72]	; 0x48
 100fd06:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 100fd0a:	f014 0401 	ands.w	r4, r4, #1
 100fd0e:	d00b      	beq.n	100fd28 <rpmsg_create_ept+0x50>
	for (bit = start;
 100fd10:	2400      	movs	r4, #0
	     bit++)
 100fd12:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 100fd14:	2c80      	cmp	r4, #128	; 0x80
 100fd16:	d054      	beq.n	100fdc2 <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 100fd18:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
 100fd1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 100fd1e:	f004 011f 	and.w	r1, r4, #31
 100fd22:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 100fd24:	07d1      	lsls	r1, r2, #31
 100fd26:	d4f4      	bmi.n	100fd12 <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 100fd28:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 100fd2a:	0960      	lsrs	r0, r4, #5
 100fd2c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
 100fd30:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 100fd34:	f004 041f 	and.w	r4, r4, #31
 100fd38:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 100fd3a:	430a      	orrs	r2, r1
 100fd3c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
 100fd40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100fd42:	4652      	mov	r2, sl
 100fd44:	e9cd 9301 	strd	r9, r3, [sp, #4]
 100fd48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100fd4a:	4631      	mov	r1, r6
 100fd4c:	9300      	str	r3, [sp, #0]
 100fd4e:	4628      	mov	r0, r5
 100fd50:	463b      	mov	r3, r7
 100fd52:	f7ff ffa1 	bl	100fc98 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
 100fd56:	4640      	mov	r0, r8
 100fd58:	f000 fc30 	bl	10105bc <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
 100fd5c:	7834      	ldrb	r4, [r6, #0]
 100fd5e:	b174      	cbz	r4, 100fd7e <rpmsg_create_ept+0xa6>
 100fd60:	f895 4088 	ldrb.w	r4, [r5, #136]	; 0x88
 100fd64:	b15c      	cbz	r4, 100fd7e <rpmsg_create_ept+0xa6>
 100fd66:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 100fd68:	3301      	adds	r3, #1
 100fd6a:	d12e      	bne.n	100fdca <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 100fd6c:	2100      	movs	r1, #0
 100fd6e:	4630      	mov	r0, r6
 100fd70:	f004 fc97 	bl	10146a2 <rpmsg_send_ns_message>

	if (status)
 100fd74:	4604      	mov	r4, r0
 100fd76:	b110      	cbz	r0, 100fd7e <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
 100fd78:	4630      	mov	r0, r6
 100fd7a:	f004 fc69 	bl	1014650 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
 100fd7e:	4620      	mov	r0, r4
 100fd80:	b004      	add	sp, #16
 100fd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
 100fd86:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 100fd8a:	d3d9      	bcc.n	100fd40 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
 100fd8c:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
 100fd90:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
 100fd92:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
 100fd96:	d80f      	bhi.n	100fdb8 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 100fd98:	0958      	lsrs	r0, r3, #5
 100fd9a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
 100fd9e:	f003 031f 	and.w	r3, r3, #31
 100fda2:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
 100fda6:	07d2      	lsls	r2, r2, #31
 100fda8:	d40b      	bmi.n	100fdc2 <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 100fdaa:	2201      	movs	r2, #1
 100fdac:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 100fdb0:	4323      	orrs	r3, r4
 100fdb2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
 100fdb6:	e7c3      	b.n	100fd40 <rpmsg_create_ept+0x68>
 100fdb8:	4c05      	ldr	r4, [pc, #20]	; (100fdd0 <rpmsg_create_ept+0xf8>)
 100fdba:	4640      	mov	r0, r8
 100fdbc:	f000 fbfe 	bl	10105bc <z_impl_k_sem_give>
}
 100fdc0:	e7dd      	b.n	100fd7e <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
 100fdc2:	4c04      	ldr	r4, [pc, #16]	; (100fdd4 <rpmsg_create_ept+0xfc>)
 100fdc4:	e7f9      	b.n	100fdba <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
 100fdc6:	4c02      	ldr	r4, [pc, #8]	; (100fdd0 <rpmsg_create_ept+0xf8>)
 100fdc8:	e7d9      	b.n	100fd7e <rpmsg_create_ept+0xa6>
 100fdca:	2400      	movs	r4, #0
 100fdcc:	e7d7      	b.n	100fd7e <rpmsg_create_ept+0xa6>
 100fdce:	bf00      	nop
 100fdd0:	fffff82d 	.word	0xfffff82d
 100fdd4:	fffff829 	.word	0xfffff829

0100fdd8 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
 100fdd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 100fddc:	b085      	sub	sp, #20
 100fdde:	460f      	mov	r7, r1
 100fde0:	4690      	mov	r8, r2

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
 100fde2:	a903      	add	r1, sp, #12
 100fde4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
 100fde6:	4605      	mov	r5, r0
 100fde8:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
 100fdea:	f004 fe68 	bl	1014abe <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
 100fdee:	4604      	mov	r4, r0
 100fdf0:	b1e0      	cbz	r0, 100fe2c <rpmsg_virtio_send_offchannel_raw+0x54>
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
 100fdf2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 100fdf4:	9b03      	ldr	r3, [sp, #12]
		len = buff_len;
	io = rvdev->shbuf_io;
 100fdf6:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 100fdfa:	429e      	cmp	r6, r3
 100fdfc:	bfa8      	it	ge
 100fdfe:	461e      	movge	r6, r3
 100fe00:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 100fe02:	f8d0 c008 	ldr.w	ip, [r0, #8]
 100fe06:	1a61      	subs	r1, r4, r1
 100fe08:	4633      	mov	r3, r6
 100fe0a:	464a      	mov	r2, r9
 100fe0c:	4561      	cmp	r1, ip
 100fe0e:	bf28      	it	cs
 100fe10:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
 100fe14:	f004 f9fa 	bl	101420c <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
 100fe18:	4623      	mov	r3, r4
 100fe1a:	4642      	mov	r2, r8
 100fe1c:	4639      	mov	r1, r7
 100fe1e:	4628      	mov	r0, r5
 100fe20:	9600      	str	r6, [sp, #0]
 100fe22:	f004 fdec 	bl	10149fe <rpmsg_virtio_send_offchannel_nocopy>
}
 100fe26:	b005      	add	sp, #20
 100fe28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
 100fe2c:	4800      	ldr	r0, [pc, #0]	; (100fe30 <rpmsg_virtio_send_offchannel_raw+0x58>)
 100fe2e:	e7fa      	b.n	100fe26 <rpmsg_virtio_send_offchannel_raw+0x4e>
 100fe30:	fffff82e 	.word	0xfffff82e

0100fe34 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
 100fe34:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
 100fe36:	4604      	mov	r4, r0
 100fe38:	b1e0      	cbz	r0, 100fe74 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
 100fe3a:	f100 0558 	add.w	r5, r0, #88	; 0x58
 100fe3e:	4628      	mov	r0, r5
 100fe40:	f004 fcbd 	bl	10147be <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
 100fe44:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 100fe48:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
 100fe4a:	b953      	cbnz	r3, 100fe62 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
 100fe4c:	f8d4 408c 	ldr.w	r4, [r4, #140]	; 0x8c
 100fe50:	3c10      	subs	r4, #16
	if (length <= 0) {
 100fe52:	2c00      	cmp	r4, #0
 100fe54:	dc00      	bgt.n	100fe58 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
 100fe56:	4c08      	ldr	r4, [pc, #32]	; (100fe78 <rpmsg_virtio_get_buffer_size+0x44>)
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
 100fe58:	4628      	mov	r0, r5
 100fe5a:	f004 fcae 	bl	10147ba <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
 100fe5e:	4620      	mov	r0, r4
 100fe60:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
 100fe62:	2b01      	cmp	r3, #1
 100fe64:	d1f7      	bne.n	100fe56 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 100fe66:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 100fe6a:	f004 fbd3 	bl	1014614 <virtqueue_get_desc_size>
 100fe6e:	f1a0 0410 	sub.w	r4, r0, #16
 100fe72:	e7ee      	b.n	100fe52 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
 100fe74:	4c01      	ldr	r4, [pc, #4]	; (100fe7c <rpmsg_virtio_get_buffer_size+0x48>)
 100fe76:	e7f2      	b.n	100fe5e <rpmsg_virtio_get_buffer_size+0x2a>
 100fe78:	fffff82e 	.word	0xfffff82e
 100fe7c:	fffff82d 	.word	0xfffff82d

0100fe80 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
 100fe80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 100fe84:	b08a      	sub	sp, #40	; 0x28
 100fe86:	460d      	mov	r5, r1
 100fe88:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
 100fe8c:	4690      	mov	r8, r2
 100fe8e:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
 100fe90:	4604      	mov	r4, r0
 100fe92:	b920      	cbnz	r0, 100fe9e <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
 100fe94:	4f80      	ldr	r7, [pc, #512]	; (1010098 <rpmsg_init_vdev_with_config+0x218>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
 100fe96:	4638      	mov	r0, r7
 100fe98:	b00a      	add	sp, #40	; 0x28
 100fe9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
 100fe9e:	2900      	cmp	r1, #0
 100fea0:	d0f8      	beq.n	100fe94 <rpmsg_init_vdev_with_config+0x14>
 100fea2:	2b00      	cmp	r3, #0
 100fea4:	d0f6      	beq.n	100fe94 <rpmsg_init_vdev_with_config+0x14>
	memset(rdev, 0, sizeof(*rdev));
 100fea6:	228c      	movs	r2, #140	; 0x8c
 100fea8:	2100      	movs	r1, #0
 100feaa:	f002 fdb2 	bl	1012a12 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
 100feae:	2201      	movs	r2, #1
 100feb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 100feb4:	4611      	mov	r1, r2
 100feb6:	f004 fee0 	bl	1014c7a <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 100feba:	4b78      	ldr	r3, [pc, #480]	; (101009c <rpmsg_init_vdev_with_config+0x21c>)
	rvdev->vdev = vdev;
 100febc:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	rdev->ns_bind_cb = ns_bind_cb;
 100fec0:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
	vdev->priv = rvdev;
 100fec4:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 100fec6:	6723      	str	r3, [r4, #112]	; 0x70
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
 100fec8:	4b75      	ldr	r3, [pc, #468]	; (10100a0 <rpmsg_init_vdev_with_config+0x220>)
 100feca:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
 100fecc:	4b75      	ldr	r3, [pc, #468]	; (10100a4 <rpmsg_init_vdev_with_config+0x224>)
 100fece:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
 100fed0:	4b75      	ldr	r3, [pc, #468]	; (10100a8 <rpmsg_init_vdev_with_config+0x228>)
 100fed2:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
 100fed4:	4b75      	ldr	r3, [pc, #468]	; (10100ac <rpmsg_init_vdev_with_config+0x22c>)
 100fed6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
 100feda:	4b75      	ldr	r3, [pc, #468]	; (10100b0 <rpmsg_init_vdev_with_config+0x230>)
 100fedc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 100fee0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 100fee4:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
 100fee8:	f1b8 0f00 	cmp.w	r8, #0
 100feec:	d16e      	bne.n	100ffcc <rpmsg_init_vdev_with_config+0x14c>
		if (config == NULL) {
 100feee:	2f00      	cmp	r7, #0
 100fef0:	d0d0      	beq.n	100fe94 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
 100fef2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 100fef6:	f104 038c 	add.w	r3, r4, #140	; 0x8c
 100fefa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
 100fefe:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
 100ff02:	6a03      	ldr	r3, [r0, #32]
 100ff04:	689b      	ldr	r3, [r3, #8]
 100ff06:	4798      	blx	r3
 100ff08:	2300      	movs	r3, #0
 100ff0a:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
 100ff0c:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
 100ff10:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
 100ff12:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
	if (role == RPMSG_HOST) {
 100ff16:	f1b8 0f00 	cmp.w	r8, #0
 100ff1a:	d16d      	bne.n	100fff8 <rpmsg_init_vdev_with_config+0x178>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
 100ff1c:	7a3b      	ldrb	r3, [r7, #8]
 100ff1e:	2b00      	cmp	r3, #0
 100ff20:	d068      	beq.n	100fff4 <rpmsg_init_vdev_with_config+0x174>
 100ff22:	f109 030c 	add.w	r3, r9, #12
 100ff26:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		if (!shpool)
 100ff2a:	f1b9 0f00 	cmp.w	r9, #0
 100ff2e:	d0b1      	beq.n	100fe94 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
 100ff30:	f8d9 2008 	ldr.w	r2, [r9, #8]
 100ff34:	2a00      	cmp	r2, #0
 100ff36:	f000 80ad 	beq.w	1010094 <rpmsg_init_vdev_with_config+0x214>
 100ff3a:	689b      	ldr	r3, [r3, #8]
 100ff3c:	2b00      	cmp	r3, #0
 100ff3e:	f000 80a9 	beq.w	1010094 <rpmsg_init_vdev_with_config+0x214>
		vq_names[0] = "rx_vq";
 100ff42:	4b5c      	ldr	r3, [pc, #368]	; (10100b4 <rpmsg_init_vdev_with_config+0x234>)
 100ff44:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
 100ff46:	4b5c      	ldr	r3, [pc, #368]	; (10100b8 <rpmsg_init_vdev_with_config+0x238>)
 100ff48:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
 100ff4a:	4b5c      	ldr	r3, [pc, #368]	; (10100bc <rpmsg_init_vdev_with_config+0x23c>)
 100ff4c:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 100ff4e:	4b5c      	ldr	r3, [pc, #368]	; (10100c0 <rpmsg_init_vdev_with_config+0x240>)
 100ff50:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 100ff52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 100ff54:	681b      	ldr	r3, [r3, #0]
 100ff56:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		rvdev->svq  = vdev->vrings_info[1].vq;
 100ff5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 100ff5c:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
 100ff5e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_list_init(&rvdev->reclaimer);
 100ff62:	f104 03ac 	add.w	r3, r4, #172	; 0xac
	list->next = list;
 100ff66:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 100ff6a:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
 100ff6c:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 100ff70:	9300      	str	r3, [sp, #0]
 100ff72:	2202      	movs	r2, #2
 100ff74:	2100      	movs	r1, #0
 100ff76:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 100ff7a:	ab04      	add	r3, sp, #16
 100ff7c:	f7ff fdd8 	bl	100fb30 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
 100ff80:	4607      	mov	r7, r0
 100ff82:	2800      	cmp	r0, #0
 100ff84:	d187      	bne.n	100fe96 <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
 100ff86:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 100ff8a:	f004 fade 	bl	101454a <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
 100ff8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 100ff90:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
 100ff92:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
 100ff94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 100ff96:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
 100ff98:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
 100ff9a:	f1b8 0f00 	cmp.w	r8, #0
 100ff9e:	d161      	bne.n	1010064 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 100ffa0:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
 100ffa2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 100ffa6:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 100ffa8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 100ffac:	895b      	ldrh	r3, [r3, #10]
 100ffae:	4553      	cmp	r3, sl
 100ffb0:	d834      	bhi.n	101001c <rpmsg_init_vdev_with_config+0x19c>
	if (rdev->support_ns) {
 100ffb2:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 100ffb6:	e9c4 4400 	strd	r4, r4, [r4]
 100ffba:	2b00      	cmp	r3, #0
 100ffbc:	d159      	bne.n	1010072 <rpmsg_init_vdev_with_config+0x1f2>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 100ffbe:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 100ffc2:	2104      	movs	r1, #4
 100ffc4:	6a03      	ldr	r3, [r0, #32]
 100ffc6:	685b      	ldr	r3, [r3, #4]
 100ffc8:	4798      	blx	r3
}
 100ffca:	e764      	b.n	100fe96 <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
 100ffcc:	f1b8 0f01 	cmp.w	r8, #1
 100ffd0:	d195      	bne.n	100fefe <rpmsg_init_vdev_with_config+0x7e>
		status = rpmsg_virtio_get_status(rvdev);
 100ffd2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
	return rvdev->vdev->func->get_status(rvdev->vdev);
 100ffd6:	6a03      	ldr	r3, [r0, #32]
 100ffd8:	681b      	ldr	r3, [r3, #0]
 100ffda:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 100ffdc:	0642      	lsls	r2, r0, #25
 100ffde:	d506      	bpl.n	100ffee <rpmsg_init_vdev_with_config+0x16e>
			rpmsg_virtio_set_status(rvdev, 0);
 100ffe0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 100ffe4:	2100      	movs	r1, #0
 100ffe6:	6a03      	ldr	r3, [r0, #32]
 100ffe8:	685b      	ldr	r3, [r3, #4]
 100ffea:	4798      	blx	r3
}
 100ffec:	e7f1      	b.n	100ffd2 <rpmsg_init_vdev_with_config+0x152>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 100ffee:	0743      	lsls	r3, r0, #29
 100fff0:	d5ef      	bpl.n	100ffd2 <rpmsg_init_vdev_with_config+0x152>
 100fff2:	e784      	b.n	100fefe <rpmsg_init_vdev_with_config+0x7e>
 100fff4:	464b      	mov	r3, r9
 100fff6:	e796      	b.n	100ff26 <rpmsg_init_vdev_with_config+0xa6>
	if (role == RPMSG_REMOTE) {
 100fff8:	f1b8 0f01 	cmp.w	r8, #1
 100fffc:	d1b1      	bne.n	100ff62 <rpmsg_init_vdev_with_config+0xe2>
		vq_names[0] = "tx_vq";
 100fffe:	4b2e      	ldr	r3, [pc, #184]	; (10100b8 <rpmsg_init_vdev_with_config+0x238>)
 1010000:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
 1010002:	4b2c      	ldr	r3, [pc, #176]	; (10100b4 <rpmsg_init_vdev_with_config+0x234>)
 1010004:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
 1010006:	4b2e      	ldr	r3, [pc, #184]	; (10100c0 <rpmsg_init_vdev_with_config+0x240>)
 1010008:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
 101000a:	4b2c      	ldr	r3, [pc, #176]	; (10100bc <rpmsg_init_vdev_with_config+0x23c>)
 101000c:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 101000e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 1010010:	699b      	ldr	r3, [r3, #24]
 1010012:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		rvdev->svq  = vdev->vrings_info[0].vq;
 1010016:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 1010018:	681b      	ldr	r3, [r3, #0]
 101001a:	e7a0      	b.n	100ff5e <rpmsg_init_vdev_with_config+0xde>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 101001c:	4648      	mov	r0, r9
 101001e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 1010022:	f004 fd3d 	bl	1014aa0 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
 1010026:	4605      	mov	r5, r0
 1010028:	b1c8      	cbz	r0, 101005e <rpmsg_init_vdev_with_config+0x1de>
 101002a:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
 101002c:	9008      	str	r0, [sp, #32]
 101002e:	1a41      	subs	r1, r0, r1

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 1010030:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
 1010032:	2200      	movs	r2, #0
 1010034:	4281      	cmp	r1, r0
 1010036:	bf28      	it	cs
 1010038:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
 101003c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 1010040:	4630      	mov	r0, r6
 1010042:	f004 f91d 	bl	1014280 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 1010046:	9500      	str	r5, [sp, #0]
 1010048:	2301      	movs	r3, #1
 101004a:	2200      	movs	r2, #0
 101004c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 1010050:	a908      	add	r1, sp, #32
 1010052:	f004 f9bb 	bl	10143cc <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
 1010056:	b918      	cbnz	r0, 1010060 <rpmsg_init_vdev_with_config+0x1e0>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 1010058:	f10a 0a01 	add.w	sl, sl, #1
 101005c:	e7a4      	b.n	100ffa8 <rpmsg_init_vdev_with_config+0x128>
				return RPMSG_ERR_NO_BUFF;
 101005e:	4819      	ldr	r0, [pc, #100]	; (10100c4 <rpmsg_init_vdev_with_config+0x244>)
 1010060:	4607      	mov	r7, r0
 1010062:	e718      	b.n	100fe96 <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
 1010064:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 1010068:	e9c4 4400 	strd	r4, r4, [r4]
 101006c:	2b00      	cmp	r3, #0
 101006e:	f43f af12 	beq.w	100fe96 <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
 1010072:	2300      	movs	r3, #0
 1010074:	9302      	str	r3, [sp, #8]
 1010076:	4b14      	ldr	r3, [pc, #80]	; (10100c8 <rpmsg_init_vdev_with_config+0x248>)
 1010078:	4620      	mov	r0, r4
 101007a:	9301      	str	r3, [sp, #4]
 101007c:	2335      	movs	r3, #53	; 0x35
 101007e:	4a13      	ldr	r2, [pc, #76]	; (10100cc <rpmsg_init_vdev_with_config+0x24c>)
 1010080:	9300      	str	r3, [sp, #0]
 1010082:	f104 0108 	add.w	r1, r4, #8
 1010086:	f7ff fe07 	bl	100fc98 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
 101008a:	f1b8 0f00 	cmp.w	r8, #0
 101008e:	f47f af02 	bne.w	100fe96 <rpmsg_init_vdev_with_config+0x16>
 1010092:	e794      	b.n	100ffbe <rpmsg_init_vdev_with_config+0x13e>
			return RPMSG_ERR_NO_BUFF;
 1010094:	4f0b      	ldr	r7, [pc, #44]	; (10100c4 <rpmsg_init_vdev_with_config+0x244>)
 1010096:	e6fe      	b.n	100fe96 <rpmsg_init_vdev_with_config+0x16>
 1010098:	fffff82d 	.word	0xfffff82d
 101009c:	0100fdd9 	.word	0x0100fdd9
 10100a0:	010147ab 	.word	0x010147ab
 10100a4:	010149bf 	.word	0x010149bf
 10100a8:	01014abf 	.word	0x01014abf
 10100ac:	010149ff 	.word	0x010149ff
 10100b0:	010147cb 	.word	0x010147cb
 10100b4:	01015d76 	.word	0x01015d76
 10100b8:	01015d7c 	.word	0x01015d7c
 10100bc:	0101490b 	.word	0x0101490b
 10100c0:	010147b9 	.word	0x010147b9
 10100c4:	fffff82e 	.word	0xfffff82e
 10100c8:	0101480d 	.word	0x0101480d
 10100cc:	01015d82 	.word	0x01015d82

010100d0 <rpmsg_init_vdev>:
{
 10100d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 10100d2:	4605      	mov	r5, r0
 10100d4:	460e      	mov	r6, r1
 10100d6:	4617      	mov	r7, r2
 10100d8:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
 10100da:	4a07      	ldr	r2, [pc, #28]	; (10100f8 <rpmsg_init_vdev+0x28>)
 10100dc:	ac03      	add	r4, sp, #12
 10100de:	ca07      	ldmia	r2, {r0, r1, r2}
 10100e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
 10100e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 10100e6:	4631      	mov	r1, r6
 10100e8:	9200      	str	r2, [sp, #0]
 10100ea:	4628      	mov	r0, r5
 10100ec:	463a      	mov	r2, r7
 10100ee:	9401      	str	r4, [sp, #4]
 10100f0:	f7ff fec6 	bl	100fe80 <rpmsg_init_vdev_with_config>
}
 10100f4:	b007      	add	sp, #28
 10100f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10100f8:	01015668 	.word	0x01015668

010100fc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 10100fc:	4b01      	ldr	r3, [pc, #4]	; (1010104 <z_impl_z_errno+0x8>)
 10100fe:	6898      	ldr	r0, [r3, #8]
}
 1010100:	3060      	adds	r0, #96	; 0x60
 1010102:	4770      	bx	lr
 1010104:	21003a3c 	.word	0x21003a3c

01010108 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 1010108:	4b0f      	ldr	r3, [pc, #60]	; (1010148 <z_sys_init_run_level+0x40>)
{
 101010a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 101010c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 1010110:	3001      	adds	r0, #1
 1010112:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 1010116:	42a6      	cmp	r6, r4
 1010118:	d800      	bhi.n	101011c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 101011a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 101011c:	e9d4 3500 	ldrd	r3, r5, [r4]
 1010120:	4628      	mov	r0, r5
 1010122:	4798      	blx	r3
		if (dev != NULL) {
 1010124:	b16d      	cbz	r5, 1010142 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 1010126:	b138      	cbz	r0, 1010138 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 1010128:	2800      	cmp	r0, #0
 101012a:	bfb8      	it	lt
 101012c:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
 101012e:	28ff      	cmp	r0, #255	; 0xff
 1010130:	bfa8      	it	ge
 1010132:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 1010134:	68eb      	ldr	r3, [r5, #12]
 1010136:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 1010138:	68ea      	ldr	r2, [r5, #12]
 101013a:	7853      	ldrb	r3, [r2, #1]
 101013c:	f043 0301 	orr.w	r3, r3, #1
 1010140:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 1010142:	3408      	adds	r4, #8
 1010144:	e7e7      	b.n	1010116 <z_sys_init_run_level+0xe>
 1010146:	bf00      	nop
 1010148:	010159e4 	.word	0x010159e4

0101014c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 101014c:	2201      	movs	r2, #1
{
 101014e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 1010150:	4b09      	ldr	r3, [pc, #36]	; (1010178 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 1010152:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 1010154:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 1010156:	f7ff ffd7 	bl	1010108 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 101015a:	f001 f90b 	bl	1011374 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 101015e:	2004      	movs	r0, #4
 1010160:	f7ff ffd2 	bl	1010108 <z_sys_init_run_level>

	z_init_static_threads();
 1010164:	f000 f918 	bl	1010398 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 1010168:	f004 ff6d 	bl	1015046 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 101016c:	4a03      	ldr	r2, [pc, #12]	; (101017c <bg_thread_main+0x30>)
 101016e:	7b13      	ldrb	r3, [r2, #12]
 1010170:	f023 0301 	bic.w	r3, r3, #1
 1010174:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 1010176:	bd08      	pop	{r3, pc}
 1010178:	21004540 	.word	0x21004540
 101017c:	210017b0 	.word	0x210017b0

01010180 <z_bss_zero>:
{
 1010180:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 1010182:	4803      	ldr	r0, [pc, #12]	; (1010190 <z_bss_zero+0x10>)
 1010184:	4a03      	ldr	r2, [pc, #12]	; (1010194 <z_bss_zero+0x14>)
 1010186:	2100      	movs	r1, #0
 1010188:	1a12      	subs	r2, r2, r0
 101018a:	f004 fd4c 	bl	1014c26 <z_early_memset>
}
 101018e:	bd08      	pop	{r3, pc}
 1010190:	21000260 	.word	0x21000260
 1010194:	21004550 	.word	0x21004550

01010198 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 1010198:	2300      	movs	r3, #0
 101019a:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 101019c:	b570      	push	{r4, r5, r6, lr}
 101019e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 10101a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 10101a4:	220f      	movs	r2, #15
 10101a6:	9301      	str	r3, [sp, #4]
 10101a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 10101ac:	2318      	movs	r3, #24
 10101ae:	4d0f      	ldr	r5, [pc, #60]	; (10101ec <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
 10101b0:	4e0f      	ldr	r6, [pc, #60]	; (10101f0 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 10101b2:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 10101b6:	490f      	ldr	r1, [pc, #60]	; (10101f4 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
 10101b8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 10101bc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 10101be:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 10101c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 10101c6:	4630      	mov	r0, r6
 10101c8:	4b0b      	ldr	r3, [pc, #44]	; (10101f8 <z_init_cpu+0x60>)
 10101ca:	9500      	str	r5, [sp, #0]
 10101cc:	f000 f888 	bl	10102e0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 10101d0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
 10101d2:	752c      	strb	r4, [r5, #20]
 10101d4:	f023 0304 	bic.w	r3, r3, #4
 10101d8:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 10101da:	4b08      	ldr	r3, [pc, #32]	; (10101fc <z_init_cpu+0x64>)
 10101dc:	3401      	adds	r4, #1
 10101de:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 10101e2:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 10101e4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 10101e6:	b006      	add	sp, #24
 10101e8:	bd70      	pop	{r4, r5, r6, pc}
 10101ea:	bf00      	nop
 10101ec:	21003a3c 	.word	0x21003a3c
 10101f0:	21001730 	.word	0x21001730
 10101f4:	21005950 	.word	0x21005950
 10101f8:	01014c45 	.word	0x01014c45
 10101fc:	21005150 	.word	0x21005150

01010200 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 1010200:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 1010202:	2000      	movs	r0, #0
{
 1010204:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 1010206:	f7ff ff7f 	bl	1010108 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
 101020a:	4b2e      	ldr	r3, [pc, #184]	; (10102c4 <z_cstart+0xc4>)
	uint32_t msp =
 101020c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 1010210:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 1010214:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1010218:	23e0      	movs	r3, #224	; 0xe0
 101021a:	4d2b      	ldr	r5, [pc, #172]	; (10102c8 <z_cstart+0xc8>)
 101021c:	2400      	movs	r4, #0
 101021e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 1010222:	2320      	movs	r3, #32
 1010224:	77eb      	strb	r3, [r5, #31]
 1010226:	762c      	strb	r4, [r5, #24]
 1010228:	766c      	strb	r4, [r5, #25]
 101022a:	76ac      	strb	r4, [r5, #26]
 101022c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 1010230:	6a6b      	ldr	r3, [r5, #36]	; 0x24

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 1010232:	4e26      	ldr	r6, [pc, #152]	; (10102cc <z_cstart+0xcc>)
 1010234:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 1010238:	626b      	str	r3, [r5, #36]	; 0x24
 101023a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 101023e:	f7f6 fd69 	bl	1006d14 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 1010242:	f7f6 fb57 	bl	10068f4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 1010246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 101024a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 101024c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 101024e:	f7f6 ff6b 	bl	1007128 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 1010252:	f7f6 fe11 	bl	1006e78 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 1010256:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
 101025a:	ad06      	add	r5, sp, #24
 101025c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
 101025e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
 1010262:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
 1010266:	f001 f87f 	bl	1011368 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
 101026a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 101026c:	f004 feed 	bl	101504a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 1010270:	2001      	movs	r0, #1
 1010272:	f7ff ff49 	bl	1010108 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 1010276:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 1010278:	4d15      	ldr	r5, [pc, #84]	; (10102d0 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 101027a:	f7ff ff45 	bl	1010108 <z_sys_init_run_level>
	z_sched_init();
 101027e:	f000 fdef 	bl	1010e60 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 1010282:	4b14      	ldr	r3, [pc, #80]	; (10102d4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
 1010284:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 1010286:	9305      	str	r3, [sp, #20]
 1010288:	2301      	movs	r3, #1
 101028a:	4f13      	ldr	r7, [pc, #76]	; (10102d8 <z_cstart+0xd8>)
 101028c:	4913      	ldr	r1, [pc, #76]	; (10102dc <z_cstart+0xdc>)
 101028e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 1010292:	e9cd 4303 	strd	r4, r3, [sp, #12]
 1010296:	4628      	mov	r0, r5
 1010298:	463b      	mov	r3, r7
 101029a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 101029e:	9400      	str	r4, [sp, #0]
 10102a0:	f000 f81e 	bl	10102e0 <z_setup_new_thread>
 10102a4:	4606      	mov	r6, r0
 10102a6:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
 10102a8:	4628      	mov	r0, r5
 10102aa:	f022 0204 	bic.w	r2, r2, #4
 10102ae:	736a      	strb	r2, [r5, #13]
 10102b0:	f004 fdca 	bl	1014e48 <z_ready_thread>
	z_init_cpu(0);
 10102b4:	4620      	mov	r0, r4
 10102b6:	f7ff ff6f 	bl	1010198 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 10102ba:	463a      	mov	r2, r7
 10102bc:	4631      	mov	r1, r6
 10102be:	4628      	mov	r0, r5
 10102c0:	f7f6 fc1a 	bl	1006af8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 10102c4:	21005150 	.word	0x21005150
 10102c8:	e000ed00 	.word	0xe000ed00
 10102cc:	21003a3c 	.word	0x21003a3c
 10102d0:	210017b0 	.word	0x210017b0
 10102d4:	01015d85 	.word	0x01015d85
 10102d8:	0101014d 	.word	0x0101014d
 10102dc:	21005a50 	.word	0x21005a50

010102e0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 10102e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 10102e4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 10102e6:	f100 0558 	add.w	r5, r0, #88	; 0x58
 10102ea:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 10102ec:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 10102ee:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 10102f2:	2500      	movs	r5, #0
{
 10102f4:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
 10102f6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 10102f8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 10102fa:	e9c0 5506 	strd	r5, r5, [r0, #24]
 10102fe:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 1010300:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1010302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 1010304:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
 1010308:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 101030c:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 101030e:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 1010310:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1010312:	9202      	str	r2, [sp, #8]
 1010314:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
 1010316:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 101031a:	9201      	str	r2, [sp, #4]
 101031c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 101031e:	9200      	str	r2, [sp, #0]
 1010320:	4642      	mov	r2, r8
 1010322:	f7f6 fbcd 	bl	1006ac0 <arch_new_thread>
	if (!_current) {
 1010326:	4b05      	ldr	r3, [pc, #20]	; (101033c <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
 1010328:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 101032a:	689b      	ldr	r3, [r3, #8]
 101032c:	b103      	cbz	r3, 1010330 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
 101032e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 1010330:	4640      	mov	r0, r8
 1010332:	6723      	str	r3, [r4, #112]	; 0x70
 1010334:	b004      	add	sp, #16
 1010336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101033a:	bf00      	nop
 101033c:	21003a3c 	.word	0x21003a3c

01010340 <z_impl_k_thread_create>:
{
 1010340:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 1010342:	2500      	movs	r5, #0
{
 1010344:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 1010346:	9505      	str	r5, [sp, #20]
 1010348:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
 101034a:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 101034e:	9504      	str	r5, [sp, #16]
 1010350:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
 1010352:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 1010354:	9503      	str	r5, [sp, #12]
 1010356:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 1010358:	9502      	str	r5, [sp, #8]
 101035a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 101035c:	9501      	str	r5, [sp, #4]
 101035e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 1010360:	9500      	str	r5, [sp, #0]
 1010362:	f7ff ffbd 	bl	10102e0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 1010366:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 101036a:	bf08      	it	eq
 101036c:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 1010370:	d005      	beq.n	101037e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 1010372:	ea56 0307 	orrs.w	r3, r6, r7
 1010376:	d105      	bne.n	1010384 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 1010378:	4620      	mov	r0, r4
 101037a:	f000 fcf1 	bl	1010d60 <z_sched_start>
}
 101037e:	4620      	mov	r0, r4
 1010380:	b007      	add	sp, #28
 1010382:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 1010384:	463a      	mov	r2, r7
 1010386:	4633      	mov	r3, r6
 1010388:	4902      	ldr	r1, [pc, #8]	; (1010394 <z_impl_k_thread_create+0x54>)
 101038a:	f104 0018 	add.w	r0, r4, #24
 101038e:	f000 feef 	bl	1011170 <z_add_timeout>
 1010392:	e7f4      	b.n	101037e <z_impl_k_thread_create+0x3e>
 1010394:	01014db5 	.word	0x01014db5

01010398 <z_init_static_threads>:
{
 1010398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 101039c:	4c29      	ldr	r4, [pc, #164]	; (1010444 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
 101039e:	4d2a      	ldr	r5, [pc, #168]	; (1010448 <z_init_static_threads+0xb0>)
{
 10103a0:	b087      	sub	sp, #28
 10103a2:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 10103a4:	42ae      	cmp	r6, r5
 10103a6:	f104 0430 	add.w	r4, r4, #48	; 0x30
 10103aa:	d30f      	bcc.n	10103cc <z_init_static_threads+0x34>
	k_sched_lock();
 10103ac:	f000 fd28 	bl	1010e00 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
 10103b0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 10103b4:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
 10103b8:	4c22      	ldr	r4, [pc, #136]	; (1010444 <z_init_static_threads+0xac>)
 10103ba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 101044c <z_init_static_threads+0xb4>
 10103be:	42ac      	cmp	r4, r5
 10103c0:	d320      	bcc.n	1010404 <z_init_static_threads+0x6c>
}
 10103c2:	b007      	add	sp, #28
 10103c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
 10103c8:	f000 bd2e 	b.w	1010e28 <k_sched_unlock>
		z_setup_new_thread(
 10103cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 10103d0:	9305      	str	r3, [sp, #20]
 10103d2:	f854 3c10 	ldr.w	r3, [r4, #-16]
 10103d6:	9304      	str	r3, [sp, #16]
 10103d8:	f854 3c14 	ldr.w	r3, [r4, #-20]
 10103dc:	9303      	str	r3, [sp, #12]
 10103de:	f854 3c18 	ldr.w	r3, [r4, #-24]
 10103e2:	9302      	str	r3, [sp, #8]
 10103e4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 10103e8:	9301      	str	r3, [sp, #4]
 10103ea:	f854 3c20 	ldr.w	r3, [r4, #-32]
 10103ee:	9300      	str	r3, [sp, #0]
 10103f0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 10103f4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 10103f8:	f7ff ff72 	bl	10102e0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 10103fc:	f854 3c30 	ldr.w	r3, [r4, #-48]
 1010400:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 1010402:	e7ce      	b.n	10103a2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 1010404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1010406:	1c5a      	adds	r2, r3, #1
 1010408:	d00d      	beq.n	1010426 <z_init_static_threads+0x8e>
 101040a:	2100      	movs	r1, #0
 101040c:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
 101040e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1010412:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 1010416:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
 101041a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 101041e:	d104      	bne.n	101042a <z_init_static_threads+0x92>
	z_sched_start(thread);
 1010420:	4640      	mov	r0, r8
 1010422:	f000 fc9d 	bl	1010d60 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 1010426:	3430      	adds	r4, #48	; 0x30
 1010428:	e7c9      	b.n	10103be <z_init_static_threads+0x26>
 101042a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 101042e:	2300      	movs	r3, #0
 1010430:	f7ef fe92 	bl	1000158 <__aeabi_uldivmod>
 1010434:	4602      	mov	r2, r0
 1010436:	460b      	mov	r3, r1
 1010438:	f108 0018 	add.w	r0, r8, #24
 101043c:	4649      	mov	r1, r9
 101043e:	f000 fe97 	bl	1011170 <z_add_timeout>
 1010442:	e7f0      	b.n	1010426 <z_init_static_threads+0x8e>
 1010444:	01015580 	.word	0x01015580
 1010448:	010155b0 	.word	0x010155b0
 101044c:	01014db5 	.word	0x01014db5

01010450 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 1010450:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 1010454:	4604      	mov	r4, r0
 1010456:	4617      	mov	r7, r2
 1010458:	461e      	mov	r6, r3
 101045a:	f04f 0340 	mov.w	r3, #64	; 0x40
 101045e:	f3ef 8811 	mrs	r8, BASEPRI
 1010462:	f383 8812 	msr	BASEPRI_MAX, r3
 1010466:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 101046a:	68c3      	ldr	r3, [r0, #12]
 101046c:	4a33      	ldr	r2, [pc, #204]	; (101053c <z_impl_k_mutex_lock+0xec>)
 101046e:	b17b      	cbz	r3, 1010490 <z_impl_k_mutex_lock+0x40>
 1010470:	6880      	ldr	r0, [r0, #8]
 1010472:	6891      	ldr	r1, [r2, #8]
 1010474:	4288      	cmp	r0, r1
 1010476:	d019      	beq.n	10104ac <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 1010478:	ea57 0306 	orrs.w	r3, r7, r6
 101047c:	d118      	bne.n	10104b0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 101047e:	f388 8811 	msr	BASEPRI, r8
 1010482:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 1010486:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 101048a:	b002      	add	sp, #8
 101048c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 1010490:	6891      	ldr	r1, [r2, #8]
 1010492:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
 1010496:	3301      	adds	r3, #1
 1010498:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 101049a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 101049c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
 101049e:	60a3      	str	r3, [r4, #8]
 10104a0:	f388 8811 	msr	BASEPRI, r8
 10104a4:	f3bf 8f6f 	isb	sy
		return 0;
 10104a8:	2000      	movs	r0, #0
 10104aa:	e7ee      	b.n	101048a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
 10104ac:	6921      	ldr	r1, [r4, #16]
 10104ae:	e7f2      	b.n	1010496 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 10104b0:	f991 100e 	ldrsb.w	r1, [r1, #14]
 10104b4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 10104b8:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 10104bc:	4299      	cmp	r1, r3
 10104be:	bfa8      	it	ge
 10104c0:	4619      	movge	r1, r3
 10104c2:	4291      	cmp	r1, r2
 10104c4:	bfb8      	it	lt
 10104c6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 10104c8:	428b      	cmp	r3, r1
 10104ca:	dd2e      	ble.n	101052a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 10104cc:	f004 fbc6 	bl	1014c5c <adjust_owner_prio.isra.0>
 10104d0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 10104d2:	4622      	mov	r2, r4
 10104d4:	4641      	mov	r1, r8
 10104d6:	e9cd 7600 	strd	r7, r6, [sp]
 10104da:	4819      	ldr	r0, [pc, #100]	; (1010540 <z_impl_k_mutex_lock+0xf0>)
 10104dc:	f000 fbca 	bl	1010c74 <z_pend_curr>
	if (got_mutex == 0) {
 10104e0:	2800      	cmp	r0, #0
 10104e2:	d0e1      	beq.n	10104a8 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
 10104e4:	f04f 0340 	mov.w	r3, #64	; 0x40
 10104e8:	f3ef 8611 	mrs	r6, BASEPRI
 10104ec:	f383 8812 	msr	BASEPRI_MAX, r3
 10104f0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
 10104f4:	68a0      	ldr	r0, [r4, #8]
 10104f6:	b1d0      	cbz	r0, 101052e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 10104f8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 10104fa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10104fc:	429c      	cmp	r4, r3
 10104fe:	d00a      	beq.n	1010516 <z_impl_k_mutex_lock+0xc6>
 1010500:	b14b      	cbz	r3, 1010516 <z_impl_k_mutex_lock+0xc6>
 1010502:	f993 300e 	ldrsb.w	r3, [r3, #14]
 1010506:	4299      	cmp	r1, r3
 1010508:	bfa8      	it	ge
 101050a:	4619      	movge	r1, r3
 101050c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 1010510:	4299      	cmp	r1, r3
 1010512:	bfb8      	it	lt
 1010514:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 1010516:	f004 fba1 	bl	1014c5c <adjust_owner_prio.isra.0>
 101051a:	b140      	cbz	r0, 101052e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 101051c:	4631      	mov	r1, r6
 101051e:	4808      	ldr	r0, [pc, #32]	; (1010540 <z_impl_k_mutex_lock+0xf0>)
 1010520:	f000 fc0c 	bl	1010d3c <z_reschedule>
	return -EAGAIN;
 1010524:	f06f 000a 	mvn.w	r0, #10
 1010528:	e7af      	b.n	101048a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
 101052a:	2500      	movs	r5, #0
 101052c:	e7d1      	b.n	10104d2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
 101052e:	2d00      	cmp	r5, #0
 1010530:	d1f4      	bne.n	101051c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
 1010532:	f386 8811 	msr	BASEPRI, r6
 1010536:	f3bf 8f6f 	isb	sy
 101053a:	e7f3      	b.n	1010524 <z_impl_k_mutex_lock+0xd4>
 101053c:	21003a3c 	.word	0x21003a3c
 1010540:	21004541 	.word	0x21004541

01010544 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 1010544:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 1010546:	6883      	ldr	r3, [r0, #8]
{
 1010548:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 101054a:	b36b      	cbz	r3, 10105a8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 101054c:	4a19      	ldr	r2, [pc, #100]	; (10105b4 <z_impl_k_mutex_unlock+0x70>)
 101054e:	6892      	ldr	r2, [r2, #8]
 1010550:	4293      	cmp	r3, r2
 1010552:	d12c      	bne.n	10105ae <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 1010554:	68c3      	ldr	r3, [r0, #12]
 1010556:	2b01      	cmp	r3, #1
 1010558:	d903      	bls.n	1010562 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
 101055a:	3b01      	subs	r3, #1
 101055c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 101055e:	2000      	movs	r0, #0
}
 1010560:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 1010562:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010566:	f3ef 8511 	mrs	r5, BASEPRI
 101056a:	f383 8812 	msr	BASEPRI_MAX, r3
 101056e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 1010572:	6901      	ldr	r1, [r0, #16]
 1010574:	6880      	ldr	r0, [r0, #8]
 1010576:	f004 fb71 	bl	1014c5c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 101057a:	4620      	mov	r0, r4
 101057c:	f004 fc74 	bl	1014e68 <z_unpend_first_thread>
	mutex->owner = new_owner;
 1010580:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 1010582:	b158      	cbz	r0, 101059c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
 1010584:	f990 200e 	ldrsb.w	r2, [r0, #14]
 1010588:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 101058a:	2200      	movs	r2, #0
 101058c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 101058e:	f004 fc5b 	bl	1014e48 <z_ready_thread>
		z_reschedule(&lock, key);
 1010592:	4629      	mov	r1, r5
 1010594:	4808      	ldr	r0, [pc, #32]	; (10105b8 <z_impl_k_mutex_unlock+0x74>)
 1010596:	f000 fbd1 	bl	1010d3c <z_reschedule>
 101059a:	e7e0      	b.n	101055e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
 101059c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 101059e:	f385 8811 	msr	BASEPRI, r5
 10105a2:	f3bf 8f6f 	isb	sy
 10105a6:	e7da      	b.n	101055e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
 10105a8:	f06f 0015 	mvn.w	r0, #21
 10105ac:	e7d8      	b.n	1010560 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
 10105ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 10105b2:	e7d5      	b.n	1010560 <z_impl_k_mutex_unlock+0x1c>
 10105b4:	21003a3c 	.word	0x21003a3c
 10105b8:	21004541 	.word	0x21004541

010105bc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 10105bc:	b538      	push	{r3, r4, r5, lr}
 10105be:	4604      	mov	r4, r0
	__asm__ volatile(
 10105c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 10105c4:	f3ef 8511 	mrs	r5, BASEPRI
 10105c8:	f383 8812 	msr	BASEPRI_MAX, r3
 10105cc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 10105d0:	f004 fc4a 	bl	1014e68 <z_unpend_first_thread>

	if (thread != NULL) {
 10105d4:	b148      	cbz	r0, 10105ea <z_impl_k_sem_give+0x2e>
 10105d6:	2200      	movs	r2, #0
 10105d8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 10105da:	f004 fc35 	bl	1014e48 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 10105de:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 10105e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 10105e4:	4804      	ldr	r0, [pc, #16]	; (10105f8 <z_impl_k_sem_give+0x3c>)
 10105e6:	f000 bba9 	b.w	1010d3c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 10105ea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 10105ee:	429a      	cmp	r2, r3
 10105f0:	bf18      	it	ne
 10105f2:	3301      	addne	r3, #1
 10105f4:	60a3      	str	r3, [r4, #8]
}
 10105f6:	e7f2      	b.n	10105de <z_impl_k_sem_give+0x22>
 10105f8:	21004541 	.word	0x21004541

010105fc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 10105fc:	b513      	push	{r0, r1, r4, lr}
 10105fe:	f04f 0440 	mov.w	r4, #64	; 0x40
 1010602:	f3ef 8111 	mrs	r1, BASEPRI
 1010606:	f384 8812 	msr	BASEPRI_MAX, r4
 101060a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 101060e:	6884      	ldr	r4, [r0, #8]
 1010610:	b144      	cbz	r4, 1010624 <z_impl_k_sem_take+0x28>
		sem->count--;
 1010612:	3c01      	subs	r4, #1
 1010614:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 1010616:	f381 8811 	msr	BASEPRI, r1
 101061a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 101061e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 1010620:	b002      	add	sp, #8
 1010622:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 1010624:	ea52 0403 	orrs.w	r4, r2, r3
 1010628:	d106      	bne.n	1010638 <z_impl_k_sem_take+0x3c>
 101062a:	f381 8811 	msr	BASEPRI, r1
 101062e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 1010632:	f06f 000f 	mvn.w	r0, #15
 1010636:	e7f3      	b.n	1010620 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 1010638:	e9cd 2300 	strd	r2, r3, [sp]
 101063c:	4602      	mov	r2, r0
 101063e:	4802      	ldr	r0, [pc, #8]	; (1010648 <z_impl_k_sem_take+0x4c>)
 1010640:	f000 fb18 	bl	1010c74 <z_pend_curr>
	return ret;
 1010644:	e7ec      	b.n	1010620 <z_impl_k_sem_take+0x24>
 1010646:	bf00      	nop
 1010648:	21004541 	.word	0x21004541

0101064c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 101064c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1010650:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 1010652:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 1010656:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	return list->head;
 101065a:	4e48      	ldr	r6, [pc, #288]	; (101077c <work_queue_main+0x130>)
{
 101065c:	b085      	sub	sp, #20
	__asm__ volatile(
 101065e:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010662:	f3ef 8711 	mrs	r7, BASEPRI
 1010666:	f383 8812 	msr	BASEPRI_MAX, r3
 101066a:	f3bf 8f6f 	isb	sy
 101066e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 1010672:	b98d      	cbnz	r5, 1010698 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 1010674:	2102      	movs	r1, #2
 1010676:	f104 0098 	add.w	r0, r4, #152	; 0x98
 101067a:	f004 fb0a 	bl	1014c92 <flag_test_and_clear>
 101067e:	2800      	cmp	r0, #0
 1010680:	d143      	bne.n	101070a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 1010682:	2300      	movs	r3, #0
 1010684:	4639      	mov	r1, r7
 1010686:	e9cd 8900 	strd	r8, r9, [sp]
 101068a:	9302      	str	r3, [sp, #8]
 101068c:	f104 0288 	add.w	r2, r4, #136	; 0x88
 1010690:	483b      	ldr	r0, [pc, #236]	; (1010780 <work_queue_main+0x134>)
 1010692:	f000 fcf3 	bl	101107c <z_sched_wait>
			continue;
 1010696:	e7e2      	b.n	101065e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 1010698:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
 101069c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 101069e:	4295      	cmp	r5, r2
	list->head = node;
 10106a0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	list->tail = node;
 10106a4:	bf08      	it	eq
 10106a6:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
 10106aa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 10106ae:	f043 0302 	orr.w	r3, r3, #2
 10106b2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
 10106b6:	68eb      	ldr	r3, [r5, #12]
 10106b8:	f023 0304 	bic.w	r3, r3, #4
 10106bc:	f043 0301 	orr.w	r3, r3, #1
 10106c0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 10106c2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
 10106c4:	f387 8811 	msr	BASEPRI, r7
 10106c8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 10106cc:	4628      	mov	r0, r5
 10106ce:	4798      	blx	r3
	__asm__ volatile(
 10106d0:	f04f 0340 	mov.w	r3, #64	; 0x40
 10106d4:	f3ef 8b11 	mrs	fp, BASEPRI
 10106d8:	f383 8812 	msr	BASEPRI_MAX, r3
 10106dc:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 10106e0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 10106e2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 10106e4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 10106e8:	d419      	bmi.n	101071e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
 10106ea:	60ea      	str	r2, [r5, #12]
 10106ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 10106f0:	f023 0302 	bic.w	r3, r3, #2
 10106f4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
 10106f8:	f38b 8811 	msr	BASEPRI, fp
 10106fc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 1010700:	05db      	lsls	r3, r3, #23
 1010702:	d4ac      	bmi.n	101065e <work_queue_main+0x12>
	z_impl_k_yield();
 1010704:	f000 fbb8 	bl	1010e78 <z_impl_k_yield>
}
 1010708:	e7a9      	b.n	101065e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 101070a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 101070e:	2200      	movs	r2, #0
 1010710:	2101      	movs	r1, #1
 1010712:	4628      	mov	r0, r5
 1010714:	f004 fbfe 	bl	1014f14 <z_sched_wake>
 1010718:	2800      	cmp	r0, #0
 101071a:	d1f8      	bne.n	101070e <work_queue_main+0xc2>
 101071c:	e7b1      	b.n	1010682 <work_queue_main+0x36>
	return list->head;
 101071e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 1010720:	f023 0303 	bic.w	r3, r3, #3
 1010724:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 1010726:	2800      	cmp	r0, #0
 1010728:	d0e0      	beq.n	10106ec <work_queue_main+0xa0>
	return node->next;
 101072a:	2700      	movs	r7, #0
	parent->next = child;
 101072c:	463b      	mov	r3, r7
	return node->next;
 101072e:	f8d0 a000 	ldr.w	sl, [r0]
 1010732:	2800      	cmp	r0, #0
 1010734:	d0da      	beq.n	10106ec <work_queue_main+0xa0>
		if (wc->work == work) {
 1010736:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 1010738:	4601      	mov	r1, r0
		if (wc->work == work) {
 101073a:	4295      	cmp	r5, r2
 101073c:	d10c      	bne.n	1010758 <work_queue_main+0x10c>
 101073e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 1010740:	b99f      	cbnz	r7, 101076a <work_queue_main+0x11e>
 1010742:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 1010744:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 1010746:	4282      	cmp	r2, r0
 1010748:	d100      	bne.n	101074c <work_queue_main+0x100>
	list->tail = node;
 101074a:	6071      	str	r1, [r6, #4]
	parent->next = child;
 101074c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 1010750:	f7ff ff34 	bl	10105bc <z_impl_k_sem_give>
}
 1010754:	4639      	mov	r1, r7
 1010756:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 1010758:	f1ba 0f00 	cmp.w	sl, #0
 101075c:	d00b      	beq.n	1010776 <work_queue_main+0x12a>
	return node->next;
 101075e:	f8da 2000 	ldr.w	r2, [sl]
 1010762:	4650      	mov	r0, sl
 1010764:	460f      	mov	r7, r1
 1010766:	4692      	mov	sl, r2
 1010768:	e7e3      	b.n	1010732 <work_queue_main+0xe6>
	parent->next = child;
 101076a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 101076c:	6872      	ldr	r2, [r6, #4]
 101076e:	4282      	cmp	r2, r0
	list->tail = node;
 1010770:	bf08      	it	eq
 1010772:	6077      	streq	r7, [r6, #4]
}
 1010774:	e7ea      	b.n	101074c <work_queue_main+0x100>
 1010776:	4652      	mov	r2, sl
 1010778:	e7f3      	b.n	1010762 <work_queue_main+0x116>
 101077a:	bf00      	nop
 101077c:	21003a60 	.word	0x21003a60
 1010780:	21004541 	.word	0x21004541

01010784 <submit_to_queue_locked>:
{
 1010784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 1010786:	68c3      	ldr	r3, [r0, #12]
{
 1010788:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 101078a:	079a      	lsls	r2, r3, #30
{
 101078c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 101078e:	f3c3 0640 	ubfx	r6, r3, #1, #1
 1010792:	d42c      	bmi.n	10107ee <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 1010794:	075b      	lsls	r3, r3, #29
 1010796:	d41a      	bmi.n	10107ce <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
 1010798:	680b      	ldr	r3, [r1, #0]
 101079a:	b90b      	cbnz	r3, 10107a0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 101079c:	6883      	ldr	r3, [r0, #8]
 101079e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
 10107a0:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 10107a2:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
 10107a4:	bf42      	ittt	mi
 10107a6:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
 10107a8:	2602      	movmi	r6, #2
			*queuep = work->queue;
 10107aa:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
 10107ac:	683d      	ldr	r5, [r7, #0]
		ret = 1;
 10107ae:	bf58      	it	pl
 10107b0:	2601      	movpl	r6, #1
	if (queue == NULL) {
 10107b2:	2d00      	cmp	r5, #0
 10107b4:	d03a      	beq.n	101082c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 10107b6:	4b1f      	ldr	r3, [pc, #124]	; (1010834 <submit_to_queue_locked+0xb0>)
 10107b8:	689b      	ldr	r3, [r3, #8]
 10107ba:	42ab      	cmp	r3, r5
 10107bc:	d00a      	beq.n	10107d4 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
 10107be:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 10107c2:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 10107c4:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 10107c8:	d414      	bmi.n	10107f4 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
 10107ca:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
 10107ce:	2300      	movs	r3, #0
 10107d0:	603b      	str	r3, [r7, #0]
	return ret;
 10107d2:	e025      	b.n	1010820 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 10107d4:	f004 fa2b 	bl	1014c2e <k_is_in_isr>
 10107d8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 10107dc:	2800      	cmp	r0, #0
 10107de:	d1f0      	bne.n	10107c2 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 10107e0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 10107e2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 10107e6:	d5f0      	bpl.n	10107ca <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
 10107e8:	b152      	cbz	r2, 1010800 <submit_to_queue_locked+0x7c>
 10107ea:	075b      	lsls	r3, r3, #29
 10107ec:	d408      	bmi.n	1010800 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
 10107ee:	f06f 060f 	mvn.w	r6, #15
 10107f2:	e7ec      	b.n	10107ce <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
 10107f4:	2a00      	cmp	r2, #0
 10107f6:	d1fa      	bne.n	10107ee <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
 10107f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
 10107fc:	2b00      	cmp	r3, #0
 10107fe:	d1f6      	bne.n	10107ee <submit_to_queue_locked+0x6a>
	parent->next = child;
 1010800:	2300      	movs	r3, #0
 1010802:	6023      	str	r3, [r4, #0]
	return list->tail;
 1010804:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
 1010808:	b963      	cbnz	r3, 1010824 <submit_to_queue_locked+0xa0>
	list->head = node;
 101080a:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
 101080e:	4628      	mov	r0, r5
 1010810:	f004 fa58 	bl	1014cc4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 1010814:	68e3      	ldr	r3, [r4, #12]
 1010816:	f043 0304 	orr.w	r3, r3, #4
 101081a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 101081c:	683b      	ldr	r3, [r7, #0]
 101081e:	60a3      	str	r3, [r4, #8]
}
 1010820:	4630      	mov	r0, r6
 1010822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 1010824:	601c      	str	r4, [r3, #0]
	list->tail = node;
 1010826:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
 101082a:	e7f0      	b.n	101080e <submit_to_queue_locked+0x8a>
		return -EINVAL;
 101082c:	f06f 0615 	mvn.w	r6, #21
 1010830:	e7cd      	b.n	10107ce <submit_to_queue_locked+0x4a>
 1010832:	bf00      	nop
 1010834:	21003a3c 	.word	0x21003a3c

01010838 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 1010838:	b5f0      	push	{r4, r5, r6, r7, lr}
 101083a:	4604      	mov	r4, r0
	list->head = NULL;
 101083c:	2000      	movs	r0, #0
 101083e:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
 1010840:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
 1010844:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 1010846:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
 101084a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
 101084e:	f104 0090 	add.w	r0, r4, #144	; 0x90
 1010852:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 1010856:	b31d      	cbz	r5, 10108a0 <k_work_queue_start+0x68>
 1010858:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 101085a:	2800      	cmp	r0, #0
 101085c:	f240 1001 	movw	r0, #257	; 0x101
 1010860:	bf08      	it	eq
 1010862:	2001      	moveq	r0, #1
	*flagp = flags;
 1010864:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 1010868:	2000      	movs	r0, #0
 101086a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 101086e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 1010872:	e9cd 3003 	strd	r3, r0, [sp, #12]
 1010876:	e9cd 0001 	strd	r0, r0, [sp, #4]
 101087a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 101087e:	4620      	mov	r0, r4
 1010880:	4b08      	ldr	r3, [pc, #32]	; (10108a4 <k_work_queue_start+0x6c>)
 1010882:	9400      	str	r4, [sp, #0]
 1010884:	f7ff fd5c 	bl	1010340 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 1010888:	b125      	cbz	r5, 1010894 <k_work_queue_start+0x5c>
 101088a:	6829      	ldr	r1, [r5, #0]
 101088c:	b111      	cbz	r1, 1010894 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 101088e:	4620      	mov	r0, r4
 1010890:	f004 f9d3 	bl	1014c3a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 1010894:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 1010896:	b009      	add	sp, #36	; 0x24
 1010898:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 101089c:	f004 b9d0 	b.w	1014c40 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 10108a0:	2001      	movs	r0, #1
 10108a2:	e7df      	b.n	1010864 <k_work_queue_start+0x2c>
 10108a4:	0101064d 	.word	0x0101064d

010108a8 <k_work_queue_drain>:

int k_work_queue_drain(struct k_work_q *queue,
		       bool plug)
{
 10108a8:	b530      	push	{r4, r5, lr}
 10108aa:	460a      	mov	r2, r1
 10108ac:	4604      	mov	r4, r0
 10108ae:	b085      	sub	sp, #20
	__asm__ volatile(
 10108b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 10108b4:	f3ef 8511 	mrs	r5, BASEPRI
 10108b8:	f383 8812 	msr	BASEPRI_MAX, r3
 10108bc:	f3bf 8f6f 	isb	sy
	return *flagp;
 10108c0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work_queue, drain, queue);

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (((flags_get(&queue->flags)
 10108c4:	f013 0f06 	tst.w	r3, #6
 10108c8:	d11d      	bne.n	1010906 <k_work_queue_drain+0x5e>
	      & (K_WORK_QUEUE_BUSY | K_WORK_QUEUE_DRAIN)) != 0U)
	    || plug
 10108ca:	b1b1      	cbz	r1, 10108fa <k_work_queue_drain+0x52>
	*flagp |= BIT(bit);
 10108cc:	f043 030c 	orr.w	r3, r3, #12
 10108d0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		flag_set(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
		if (plug) {
			flag_set(&queue->flags, K_WORK_QUEUE_PLUGGED_BIT);
		}

		notify_queue_locked(queue);
 10108d4:	4620      	mov	r0, r4
 10108d6:	f004 f9f5 	bl	1014cc4 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
 10108da:	2300      	movs	r3, #0
 10108dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 10108e0:	9302      	str	r3, [sp, #8]
 10108e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 10108e6:	4629      	mov	r1, r5
 10108e8:	e9cd 2300 	strd	r2, r3, [sp]
 10108ec:	480c      	ldr	r0, [pc, #48]	; (1010920 <k_work_queue_drain+0x78>)
 10108ee:	f104 0290 	add.w	r2, r4, #144	; 0x90
 10108f2:	f000 fbc3 	bl	101107c <z_sched_wait>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, drain, queue, ret);

	return ret;
}
 10108f6:	b005      	add	sp, #20
 10108f8:	bd30      	pop	{r4, r5, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
 10108fa:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 10108fe:	b148      	cbz	r0, 1010914 <k_work_queue_drain+0x6c>
	*flagp |= BIT(bit);
 1010900:	f043 0304 	orr.w	r3, r3, #4
 1010904:	e7e4      	b.n	10108d0 <k_work_queue_drain+0x28>
 1010906:	f043 0104 	orr.w	r1, r3, #4
 101090a:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
		if (plug) {
 101090e:	2a00      	cmp	r2, #0
 1010910:	d0e0      	beq.n	10108d4 <k_work_queue_drain+0x2c>
 1010912:	e7db      	b.n	10108cc <k_work_queue_drain+0x24>
	__asm__ volatile(
 1010914:	f385 8811 	msr	BASEPRI, r5
 1010918:	f3bf 8f6f 	isb	sy
	return ret;
 101091c:	e7eb      	b.n	10108f6 <k_work_queue_drain+0x4e>
 101091e:	bf00      	nop
 1010920:	21004541 	.word	0x21004541

01010924 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
 1010924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 1010926:	9001      	str	r0, [sp, #4]
 1010928:	4608      	mov	r0, r1
	__asm__ volatile(
 101092a:	f04f 0140 	mov.w	r1, #64	; 0x40
 101092e:	f3ef 8411 	mrs	r4, BASEPRI
 1010932:	f381 8812 	msr	BASEPRI_MAX, r1
 1010936:	f3bf 8f6f 	isb	sy
	return *flagp;
 101093a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
 101093c:	f011 0f0e 	tst.w	r1, #14
 1010940:	d116      	bne.n	1010970 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 1010942:	ea53 0502 	orrs.w	r5, r3, r2
 1010946:	d108      	bne.n	101095a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
 1010948:	a901      	add	r1, sp, #4
 101094a:	f7ff ff1b 	bl	1010784 <submit_to_queue_locked>
	__asm__ volatile(
 101094e:	f384 8811 	msr	BASEPRI, r4
 1010952:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
 1010956:	b003      	add	sp, #12
 1010958:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
 101095a:	f041 0108 	orr.w	r1, r1, #8
 101095e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
 1010960:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 1010962:	3010      	adds	r0, #16
	dwork->queue = *queuep;
 1010964:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 1010966:	4903      	ldr	r1, [pc, #12]	; (1010974 <k_work_schedule_for_queue+0x50>)
 1010968:	f000 fc02 	bl	1011170 <z_add_timeout>
	return ret;
 101096c:	2001      	movs	r0, #1
 101096e:	e7ee      	b.n	101094e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
 1010970:	2000      	movs	r0, #0
 1010972:	e7ec      	b.n	101094e <k_work_schedule_for_queue+0x2a>
 1010974:	01014cd3 	.word	0x01014cd3

01010978 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
 1010978:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
 101097a:	4801      	ldr	r0, [pc, #4]	; (1010980 <k_work_schedule+0x8>)
 101097c:	f7ff bfd2 	b.w	1010924 <k_work_schedule_for_queue>
 1010980:	21001838 	.word	0x21001838

01010984 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
 1010984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1010986:	460c      	mov	r4, r1
 1010988:	4616      	mov	r6, r2
 101098a:	461d      	mov	r5, r3
 101098c:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 101098e:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010992:	f3ef 8711 	mrs	r7, BASEPRI
 1010996:	f383 8812 	msr	BASEPRI_MAX, r3
 101099a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
 101099e:	4608      	mov	r0, r1
 10109a0:	f004 f982 	bl	1014ca8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 10109a4:	ea55 0306 	orrs.w	r3, r5, r6
 10109a8:	d109      	bne.n	10109be <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
 10109aa:	4620      	mov	r0, r4
 10109ac:	a901      	add	r1, sp, #4
 10109ae:	f7ff fee9 	bl	1010784 <submit_to_queue_locked>
	__asm__ volatile(
 10109b2:	f387 8811 	msr	BASEPRI, r7
 10109b6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
 10109ba:	b003      	add	sp, #12
 10109bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
 10109be:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 10109c0:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
 10109c4:	f043 0308 	orr.w	r3, r3, #8
 10109c8:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
 10109ca:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 10109cc:	4632      	mov	r2, r6
	dwork->queue = *queuep;
 10109ce:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 10109d0:	4902      	ldr	r1, [pc, #8]	; (10109dc <k_work_reschedule_for_queue+0x58>)
 10109d2:	462b      	mov	r3, r5
 10109d4:	f000 fbcc 	bl	1011170 <z_add_timeout>
	return ret;
 10109d8:	2001      	movs	r0, #1
 10109da:	e7ea      	b.n	10109b2 <k_work_reschedule_for_queue+0x2e>
 10109dc:	01014cd3 	.word	0x01014cd3

010109e0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 10109e0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 10109e2:	4801      	ldr	r0, [pc, #4]	; (10109e8 <k_work_reschedule+0x8>)
 10109e4:	f7ff bfce 	b.w	1010984 <k_work_reschedule_for_queue>
 10109e8:	21001838 	.word	0x21001838

010109ec <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 10109ec:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 10109ee:	4d07      	ldr	r5, [pc, #28]	; (1010a0c <z_reset_time_slice+0x20>)
 10109f0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 10109f2:	b154      	cbz	r4, 1010a0a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 10109f4:	f7f7 fa34 	bl	1007e60 <sys_clock_elapsed>
 10109f8:	4b05      	ldr	r3, [pc, #20]	; (1010a10 <z_reset_time_slice+0x24>)
 10109fa:	4404      	add	r4, r0
 10109fc:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 10109fe:	6828      	ldr	r0, [r5, #0]
 1010a00:	2100      	movs	r1, #0
	}
}
 1010a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 1010a06:	f004 babe 	b.w	1014f86 <z_set_timeout_expiry>
}
 1010a0a:	bd38      	pop	{r3, r4, r5, pc}
 1010a0c:	21003a70 	.word	0x21003a70
 1010a10:	21003a3c 	.word	0x21003a3c

01010a14 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 1010a14:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 1010a16:	4d0d      	ldr	r5, [pc, #52]	; (1010a4c <update_cache+0x38>)
 1010a18:	462b      	mov	r3, r5
 1010a1a:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1010a1e:	429c      	cmp	r4, r3
 1010a20:	d000      	beq.n	1010a24 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 1010a22:	b904      	cbnz	r4, 1010a26 <update_cache+0x12>
 1010a24:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 1010a26:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 1010a28:	b938      	cbnz	r0, 1010a3a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 1010a2a:	7b5a      	ldrb	r2, [r3, #13]
 1010a2c:	06d2      	lsls	r2, r2, #27
 1010a2e:	d104      	bne.n	1010a3a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 1010a30:	69a2      	ldr	r2, [r4, #24]
 1010a32:	b912      	cbnz	r2, 1010a3a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 1010a34:	89da      	ldrh	r2, [r3, #14]
 1010a36:	2a7f      	cmp	r2, #127	; 0x7f
 1010a38:	d805      	bhi.n	1010a46 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 1010a3a:	429c      	cmp	r4, r3
 1010a3c:	d002      	beq.n	1010a44 <update_cache+0x30>
			z_reset_time_slice(thread);
 1010a3e:	4620      	mov	r0, r4
 1010a40:	f7ff ffd4 	bl	10109ec <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 1010a44:	4623      	mov	r3, r4
 1010a46:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 1010a48:	bd38      	pop	{r3, r4, r5, pc}
 1010a4a:	bf00      	nop
 1010a4c:	21003a3c 	.word	0x21003a3c

01010a50 <move_thread_to_end_of_prio_q>:
{
 1010a50:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 1010a52:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 1010a56:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 1010a58:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 1010a5a:	7b43      	ldrb	r3, [r0, #13]
 1010a5c:	da04      	bge.n	1010a68 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1010a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1010a62:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 1010a64:	f004 f994 	bl	1014d90 <sys_dlist_remove>
	return list->head == list;
 1010a68:	4a15      	ldr	r2, [pc, #84]	; (1010ac0 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
 1010a6a:	7b4b      	ldrb	r3, [r1, #13]
 1010a6c:	4610      	mov	r0, r2
 1010a6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 1010a72:	734b      	strb	r3, [r1, #13]
 1010a74:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 1010a78:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1010a7a:	4283      	cmp	r3, r0
 1010a7c:	bf08      	it	eq
 1010a7e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1010a80:	b923      	cbnz	r3, 1010a8c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 1010a82:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 1010a86:	6021      	str	r1, [r4, #0]
	list->tail = node;
 1010a88:	6211      	str	r1, [r2, #32]
}
 1010a8a:	e00c      	b.n	1010aa6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 1010a8c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 1010a90:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 1010a94:	42b5      	cmp	r5, r6
 1010a96:	d00e      	beq.n	1010ab6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 1010a98:	42ae      	cmp	r6, r5
 1010a9a:	dd0c      	ble.n	1010ab6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 1010a9c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 1010a9e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 1010aa2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 1010aa4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 1010aa6:	6890      	ldr	r0, [r2, #8]
}
 1010aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 1010aac:	1a43      	subs	r3, r0, r1
 1010aae:	4258      	negs	r0, r3
 1010ab0:	4158      	adcs	r0, r3
 1010ab2:	f7ff bfaf 	b.w	1010a14 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 1010ab6:	429c      	cmp	r4, r3
 1010ab8:	d0e3      	beq.n	1010a82 <move_thread_to_end_of_prio_q+0x32>
 1010aba:	681b      	ldr	r3, [r3, #0]
 1010abc:	e7e0      	b.n	1010a80 <move_thread_to_end_of_prio_q+0x30>
 1010abe:	bf00      	nop
 1010ac0:	21003a3c 	.word	0x21003a3c

01010ac4 <ready_thread>:
{
 1010ac4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 1010ac6:	f990 300d 	ldrsb.w	r3, [r0, #13]
 1010aca:	7b42      	ldrb	r2, [r0, #13]
 1010acc:	2b00      	cmp	r3, #0
 1010ace:	db29      	blt.n	1010b24 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 1010ad0:	06d3      	lsls	r3, r2, #27
 1010ad2:	d127      	bne.n	1010b24 <ready_thread+0x60>
	return node->next != NULL;
 1010ad4:	6983      	ldr	r3, [r0, #24]
 1010ad6:	bb2b      	cbnz	r3, 1010b24 <ready_thread+0x60>
	return list->head == list;
 1010ad8:	4913      	ldr	r1, [pc, #76]	; (1010b28 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 1010ada:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1010ade:	7342      	strb	r2, [r0, #13]
 1010ae0:	460a      	mov	r2, r1
 1010ae2:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1010ae6:	4294      	cmp	r4, r2
 1010ae8:	bf18      	it	ne
 1010aea:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 1010aec:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1010aee:	b923      	cbnz	r3, 1010afa <ready_thread+0x36>
	node->prev = tail;
 1010af0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 1010af4:	6020      	str	r0, [r4, #0]
	list->tail = node;
 1010af6:	6208      	str	r0, [r1, #32]
}
 1010af8:	e00c      	b.n	1010b14 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 1010afa:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 1010afe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 1010b02:	42b5      	cmp	r5, r6
 1010b04:	d00a      	beq.n	1010b1c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 1010b06:	42ae      	cmp	r6, r5
 1010b08:	dd08      	ble.n	1010b1c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 1010b0a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 1010b0c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 1010b10:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 1010b12:	6058      	str	r0, [r3, #4]
		update_cache(0);
 1010b14:	2000      	movs	r0, #0
}
 1010b16:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 1010b18:	f7ff bf7c 	b.w	1010a14 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 1010b1c:	42a3      	cmp	r3, r4
 1010b1e:	d0e7      	beq.n	1010af0 <ready_thread+0x2c>
 1010b20:	681b      	ldr	r3, [r3, #0]
 1010b22:	e7e4      	b.n	1010aee <ready_thread+0x2a>
}
 1010b24:	bc70      	pop	{r4, r5, r6}
 1010b26:	4770      	bx	lr
 1010b28:	21003a3c 	.word	0x21003a3c

01010b2c <unready_thread>:
{
 1010b2c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 1010b2e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 1010b32:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 1010b34:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 1010b36:	7b43      	ldrb	r3, [r0, #13]
 1010b38:	da04      	bge.n	1010b44 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1010b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1010b3e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1010b40:	f004 f926 	bl	1014d90 <sys_dlist_remove>
	update_cache(thread == _current);
 1010b44:	4b04      	ldr	r3, [pc, #16]	; (1010b58 <unready_thread+0x2c>)
 1010b46:	6898      	ldr	r0, [r3, #8]
 1010b48:	1a43      	subs	r3, r0, r1
 1010b4a:	4258      	negs	r0, r3
 1010b4c:	4158      	adcs	r0, r3
}
 1010b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 1010b52:	f7ff bf5f 	b.w	1010a14 <update_cache>
 1010b56:	bf00      	nop
 1010b58:	21003a3c 	.word	0x21003a3c

01010b5c <pend_locked>:
{
 1010b5c:	b570      	push	{r4, r5, r6, lr}
 1010b5e:	4615      	mov	r5, r2
 1010b60:	461c      	mov	r4, r3
 1010b62:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 1010b64:	f004 f948 	bl	1014df8 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1010b68:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 1010b6c:	bf08      	it	eq
 1010b6e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 1010b72:	d008      	beq.n	1010b86 <pend_locked+0x2a>
 1010b74:	462a      	mov	r2, r5
 1010b76:	4623      	mov	r3, r4
 1010b78:	f106 0018 	add.w	r0, r6, #24
 1010b7c:	4902      	ldr	r1, [pc, #8]	; (1010b88 <pend_locked+0x2c>)
}
 1010b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 1010b82:	f000 baf5 	b.w	1011170 <z_add_timeout>
 1010b86:	bd70      	pop	{r4, r5, r6, pc}
 1010b88:	01014db5 	.word	0x01014db5

01010b8c <k_sched_time_slice_set>:
{
 1010b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1010b8e:	4604      	mov	r4, r0
 1010b90:	460d      	mov	r5, r1
	__asm__ volatile(
 1010b92:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010b96:	f3ef 8711 	mrs	r7, BASEPRI
 1010b9a:	f383 8812 	msr	BASEPRI_MAX, r3
 1010b9e:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
 1010ba2:	2600      	movs	r6, #0
 1010ba4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 1010ba8:	f240 30e7 	movw	r0, #999	; 0x3e7
 1010bac:	4631      	mov	r1, r6
 1010bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 1010bb2:	2300      	movs	r3, #0
 1010bb4:	fbe4 010c 	umlal	r0, r1, r4, ip
 1010bb8:	f7ef face 	bl	1000158 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 1010bbc:	42b4      	cmp	r4, r6
 1010bbe:	dd02      	ble.n	1010bc6 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
 1010bc0:	2802      	cmp	r0, #2
 1010bc2:	bfb8      	it	lt
 1010bc4:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 1010bc6:	4a07      	ldr	r2, [pc, #28]	; (1010be4 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
 1010bc8:	4b07      	ldr	r3, [pc, #28]	; (1010be8 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 1010bca:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
 1010bcc:	4a07      	ldr	r2, [pc, #28]	; (1010bec <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
 1010bce:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
 1010bd0:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
 1010bd2:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
 1010bd4:	f7ff ff0a 	bl	10109ec <z_reset_time_slice>
	__asm__ volatile(
 1010bd8:	f387 8811 	msr	BASEPRI, r7
 1010bdc:	f3bf 8f6f 	isb	sy
}
 1010be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1010be2:	bf00      	nop
 1010be4:	21003a70 	.word	0x21003a70
 1010be8:	21003a3c 	.word	0x21003a3c
 1010bec:	21003a6c 	.word	0x21003a6c

01010bf0 <z_time_slice>:
{
 1010bf0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 1010bf2:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010bf6:	f3ef 8511 	mrs	r5, BASEPRI
 1010bfa:	f383 8812 	msr	BASEPRI_MAX, r3
 1010bfe:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 1010c02:	4b17      	ldr	r3, [pc, #92]	; (1010c60 <z_time_slice+0x70>)
 1010c04:	4a17      	ldr	r2, [pc, #92]	; (1010c64 <z_time_slice+0x74>)
 1010c06:	689c      	ldr	r4, [r3, #8]
 1010c08:	6811      	ldr	r1, [r2, #0]
 1010c0a:	428c      	cmp	r4, r1
 1010c0c:	d107      	bne.n	1010c1e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 1010c0e:	4620      	mov	r0, r4
 1010c10:	f7ff feec 	bl	10109ec <z_reset_time_slice>
	__asm__ volatile(
 1010c14:	f385 8811 	msr	BASEPRI, r5
 1010c18:	f3bf 8f6f 	isb	sy
}
 1010c1c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 1010c1e:	2100      	movs	r1, #0
 1010c20:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 1010c22:	4a11      	ldr	r2, [pc, #68]	; (1010c68 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 1010c24:	6812      	ldr	r2, [r2, #0]
 1010c26:	b1c2      	cbz	r2, 1010c5a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 1010c28:	89e2      	ldrh	r2, [r4, #14]
 1010c2a:	2a7f      	cmp	r2, #127	; 0x7f
 1010c2c:	d815      	bhi.n	1010c5a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 1010c2e:	7b62      	ldrb	r2, [r4, #13]
 1010c30:	06d2      	lsls	r2, r2, #27
 1010c32:	d112      	bne.n	1010c5a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 1010c34:	4a0d      	ldr	r2, [pc, #52]	; (1010c6c <z_time_slice+0x7c>)
 1010c36:	f994 100e 	ldrsb.w	r1, [r4, #14]
 1010c3a:	6812      	ldr	r2, [r2, #0]
 1010c3c:	4291      	cmp	r1, r2
 1010c3e:	db0c      	blt.n	1010c5a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 1010c40:	4a0b      	ldr	r2, [pc, #44]	; (1010c70 <z_time_slice+0x80>)
 1010c42:	4294      	cmp	r4, r2
 1010c44:	d009      	beq.n	1010c5a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 1010c46:	691a      	ldr	r2, [r3, #16]
 1010c48:	4282      	cmp	r2, r0
 1010c4a:	dc03      	bgt.n	1010c54 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 1010c4c:	4620      	mov	r0, r4
 1010c4e:	f7ff feff 	bl	1010a50 <move_thread_to_end_of_prio_q>
 1010c52:	e7dc      	b.n	1010c0e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 1010c54:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 1010c56:	611a      	str	r2, [r3, #16]
 1010c58:	e7dc      	b.n	1010c14 <z_time_slice+0x24>
 1010c5a:	2200      	movs	r2, #0
 1010c5c:	e7fb      	b.n	1010c56 <z_time_slice+0x66>
 1010c5e:	bf00      	nop
 1010c60:	21003a3c 	.word	0x21003a3c
 1010c64:	21003a68 	.word	0x21003a68
 1010c68:	21003a70 	.word	0x21003a70
 1010c6c:	21003a6c 	.word	0x21003a6c
 1010c70:	21001730 	.word	0x21001730

01010c74 <z_pend_curr>:
{
 1010c74:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 1010c76:	480c      	ldr	r0, [pc, #48]	; (1010ca8 <z_pend_curr+0x34>)
 1010c78:	4d0c      	ldr	r5, [pc, #48]	; (1010cac <z_pend_curr+0x38>)
 1010c7a:	6886      	ldr	r6, [r0, #8]
{
 1010c7c:	460c      	mov	r4, r1
	pending_current = _current;
 1010c7e:	602e      	str	r6, [r5, #0]
{
 1010c80:	4611      	mov	r1, r2
 1010c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 1010c86:	f04f 0640 	mov.w	r6, #64	; 0x40
 1010c8a:	f3ef 8511 	mrs	r5, BASEPRI
 1010c8e:	f386 8812 	msr	BASEPRI_MAX, r6
 1010c92:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 1010c96:	6880      	ldr	r0, [r0, #8]
 1010c98:	f7ff ff60 	bl	1010b5c <pend_locked>
	ret = arch_swap(key);
 1010c9c:	4620      	mov	r0, r4
}
 1010c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 1010ca2:	f7f5 beb7 	b.w	1006a14 <arch_swap>
 1010ca6:	bf00      	nop
 1010ca8:	21003a3c 	.word	0x21003a3c
 1010cac:	21003a68 	.word	0x21003a68

01010cb0 <z_set_prio>:
{
 1010cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1010cb2:	4604      	mov	r4, r0
 1010cb4:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010cb8:	f3ef 8611 	mrs	r6, BASEPRI
 1010cbc:	f383 8812 	msr	BASEPRI_MAX, r3
 1010cc0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 1010cc4:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
 1010cc6:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 1010cc8:	06da      	lsls	r2, r3, #27
 1010cca:	d119      	bne.n	1010d00 <z_set_prio+0x50>
	return node->next != NULL;
 1010ccc:	6985      	ldr	r5, [r0, #24]
 1010cce:	b9bd      	cbnz	r5, 1010d00 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1010cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1010cd4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1010cd6:	f004 f85b 	bl	1014d90 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 1010cda:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 1010cdc:	4a16      	ldr	r2, [pc, #88]	; (1010d38 <z_set_prio+0x88>)
 1010cde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 1010ce2:	7343      	strb	r3, [r0, #13]
 1010ce4:	4613      	mov	r3, r2
				thread->base.prio = prio;
 1010ce6:	7381      	strb	r1, [r0, #14]
 1010ce8:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1010cec:	4298      	cmp	r0, r3
 1010cee:	bf18      	it	ne
 1010cf0:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
 1010cf2:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1010cf4:	b95d      	cbnz	r5, 1010d0e <z_set_prio+0x5e>
	node->prev = tail;
 1010cf6:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
 1010cfa:	6004      	str	r4, [r0, #0]
	list->tail = node;
 1010cfc:	6214      	str	r4, [r2, #32]
}
 1010cfe:	e011      	b.n	1010d24 <z_set_prio+0x74>
 1010d00:	2000      	movs	r0, #0
			thread->base.prio = prio;
 1010d02:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
 1010d04:	f386 8811 	msr	BASEPRI, r6
 1010d08:	f3bf 8f6f 	isb	sy
}
 1010d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
 1010d0e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
 1010d12:	42b9      	cmp	r1, r7
 1010d14:	d00b      	beq.n	1010d2e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 1010d16:	428f      	cmp	r7, r1
 1010d18:	dd09      	ble.n	1010d2e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
 1010d1a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
 1010d1c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
 1010d20:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 1010d22:	606c      	str	r4, [r5, #4]
			update_cache(1);
 1010d24:	2001      	movs	r0, #1
 1010d26:	f7ff fe75 	bl	1010a14 <update_cache>
 1010d2a:	2001      	movs	r0, #1
 1010d2c:	e7ea      	b.n	1010d04 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
 1010d2e:	42a8      	cmp	r0, r5
 1010d30:	d0e1      	beq.n	1010cf6 <z_set_prio+0x46>
 1010d32:	682d      	ldr	r5, [r5, #0]
 1010d34:	e7de      	b.n	1010cf4 <z_set_prio+0x44>
 1010d36:	bf00      	nop
 1010d38:	21003a3c 	.word	0x21003a3c

01010d3c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 1010d3c:	b949      	cbnz	r1, 1010d52 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 1010d3e:	f3ef 8005 	mrs	r0, IPSR
 1010d42:	b930      	cbnz	r0, 1010d52 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 1010d44:	4b05      	ldr	r3, [pc, #20]	; (1010d5c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 1010d46:	699a      	ldr	r2, [r3, #24]
 1010d48:	689b      	ldr	r3, [r3, #8]
 1010d4a:	429a      	cmp	r2, r3
 1010d4c:	d001      	beq.n	1010d52 <z_reschedule+0x16>
 1010d4e:	f7f5 be61 	b.w	1006a14 <arch_swap>
 1010d52:	f381 8811 	msr	BASEPRI, r1
 1010d56:	f3bf 8f6f 	isb	sy
}
 1010d5a:	4770      	bx	lr
 1010d5c:	21003a3c 	.word	0x21003a3c

01010d60 <z_sched_start>:
{
 1010d60:	b510      	push	{r4, lr}
	__asm__ volatile(
 1010d62:	f04f 0240 	mov.w	r2, #64	; 0x40
 1010d66:	f3ef 8411 	mrs	r4, BASEPRI
 1010d6a:	f382 8812 	msr	BASEPRI_MAX, r2
 1010d6e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 1010d72:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 1010d74:	0751      	lsls	r1, r2, #29
 1010d76:	d404      	bmi.n	1010d82 <z_sched_start+0x22>
	__asm__ volatile(
 1010d78:	f384 8811 	msr	BASEPRI, r4
 1010d7c:	f3bf 8f6f 	isb	sy
}
 1010d80:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 1010d82:	f022 0204 	bic.w	r2, r2, #4
 1010d86:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 1010d88:	f7ff fe9c 	bl	1010ac4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 1010d8c:	4621      	mov	r1, r4
}
 1010d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 1010d92:	4801      	ldr	r0, [pc, #4]	; (1010d98 <z_sched_start+0x38>)
 1010d94:	f7ff bfd2 	b.w	1010d3c <z_reschedule>
 1010d98:	21004541 	.word	0x21004541

01010d9c <z_impl_k_thread_suspend>:
{
 1010d9c:	b570      	push	{r4, r5, r6, lr}
 1010d9e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 1010da0:	3018      	adds	r0, #24
 1010da2:	f004 f8da 	bl	1014f5a <z_abort_timeout>
	__asm__ volatile(
 1010da6:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010daa:	f3ef 8611 	mrs	r6, BASEPRI
 1010dae:	f383 8812 	msr	BASEPRI_MAX, r3
 1010db2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 1010db6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 1010dba:	7b63      	ldrb	r3, [r4, #13]
 1010dbc:	2a00      	cmp	r2, #0
 1010dbe:	da05      	bge.n	1010dcc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1010dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
 1010dc4:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1010dc6:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1010dc8:	f003 ffe2 	bl	1014d90 <sys_dlist_remove>
		update_cache(thread == _current);
 1010dcc:	4d0b      	ldr	r5, [pc, #44]	; (1010dfc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 1010dce:	7b63      	ldrb	r3, [r4, #13]
 1010dd0:	68a8      	ldr	r0, [r5, #8]
 1010dd2:	f043 0310 	orr.w	r3, r3, #16
 1010dd6:	7363      	strb	r3, [r4, #13]
 1010dd8:	1b03      	subs	r3, r0, r4
 1010dda:	4258      	negs	r0, r3
 1010ddc:	4158      	adcs	r0, r3
 1010dde:	f7ff fe19 	bl	1010a14 <update_cache>
	__asm__ volatile(
 1010de2:	f386 8811 	msr	BASEPRI, r6
 1010de6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 1010dea:	68ab      	ldr	r3, [r5, #8]
 1010dec:	42a3      	cmp	r3, r4
 1010dee:	d103      	bne.n	1010df8 <z_impl_k_thread_suspend+0x5c>
}
 1010df0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 1010df4:	f004 b874 	b.w	1014ee0 <z_reschedule_unlocked>
}
 1010df8:	bd70      	pop	{r4, r5, r6, pc}
 1010dfa:	bf00      	nop
 1010dfc:	21003a3c 	.word	0x21003a3c

01010e00 <k_sched_lock>:
	__asm__ volatile(
 1010e00:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010e04:	f3ef 8111 	mrs	r1, BASEPRI
 1010e08:	f383 8812 	msr	BASEPRI_MAX, r3
 1010e0c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 1010e10:	4b04      	ldr	r3, [pc, #16]	; (1010e24 <k_sched_lock+0x24>)
 1010e12:	689a      	ldr	r2, [r3, #8]
 1010e14:	7bd3      	ldrb	r3, [r2, #15]
 1010e16:	3b01      	subs	r3, #1
 1010e18:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 1010e1a:	f381 8811 	msr	BASEPRI, r1
 1010e1e:	f3bf 8f6f 	isb	sy
}
 1010e22:	4770      	bx	lr
 1010e24:	21003a3c 	.word	0x21003a3c

01010e28 <k_sched_unlock>:
{
 1010e28:	b510      	push	{r4, lr}
	__asm__ volatile(
 1010e2a:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010e2e:	f3ef 8411 	mrs	r4, BASEPRI
 1010e32:	f383 8812 	msr	BASEPRI_MAX, r3
 1010e36:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 1010e3a:	4b08      	ldr	r3, [pc, #32]	; (1010e5c <k_sched_unlock+0x34>)
		update_cache(0);
 1010e3c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 1010e3e:	689a      	ldr	r2, [r3, #8]
 1010e40:	7bd3      	ldrb	r3, [r2, #15]
 1010e42:	3301      	adds	r3, #1
 1010e44:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 1010e46:	f7ff fde5 	bl	1010a14 <update_cache>
	__asm__ volatile(
 1010e4a:	f384 8811 	msr	BASEPRI, r4
 1010e4e:	f3bf 8f6f 	isb	sy
}
 1010e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 1010e56:	f004 b843 	b.w	1014ee0 <z_reschedule_unlocked>
 1010e5a:	bf00      	nop
 1010e5c:	21003a3c 	.word	0x21003a3c

01010e60 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 1010e60:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
 1010e62:	4b04      	ldr	r3, [pc, #16]	; (1010e74 <z_sched_init+0x14>)
 1010e64:	4608      	mov	r0, r1
 1010e66:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 1010e6a:	e9c3 2207 	strd	r2, r2, [r3, #28]
 1010e6e:	f7ff be8d 	b.w	1010b8c <k_sched_time_slice_set>
 1010e72:	bf00      	nop
 1010e74:	21003a3c 	.word	0x21003a3c

01010e78 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 1010e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 1010e7a:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010e7e:	f3ef 8511 	mrs	r5, BASEPRI
 1010e82:	f383 8812 	msr	BASEPRI_MAX, r3
 1010e86:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 1010e8a:	4919      	ldr	r1, [pc, #100]	; (1010ef0 <z_impl_k_yield+0x78>)
 1010e8c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1010e8e:	7b43      	ldrb	r3, [r0, #13]
 1010e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1010e94:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1010e96:	f003 ff7b 	bl	1014d90 <sys_dlist_remove>
	return list->head == list;
 1010e9a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
 1010e9c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 1010e9e:	7b5a      	ldrb	r2, [r3, #13]
 1010ea0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1010ea4:	735a      	strb	r2, [r3, #13]
 1010ea6:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
 1010eaa:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1010eac:	4282      	cmp	r2, r0
 1010eae:	bf08      	it	eq
 1010eb0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1010eb2:	b922      	cbnz	r2, 1010ebe <z_impl_k_yield+0x46>
	node->prev = tail;
 1010eb4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 1010eb8:	6023      	str	r3, [r4, #0]
	list->tail = node;
 1010eba:	620b      	str	r3, [r1, #32]
}
 1010ebc:	e00c      	b.n	1010ed8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 1010ebe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 1010ec2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 1010ec6:	42be      	cmp	r6, r7
 1010ec8:	d00e      	beq.n	1010ee8 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 1010eca:	42b7      	cmp	r7, r6
 1010ecc:	dd0c      	ble.n	1010ee8 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 1010ece:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 1010ed0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 1010ed4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 1010ed6:	6053      	str	r3, [r2, #4]
	update_cache(1);
 1010ed8:	2001      	movs	r0, #1
 1010eda:	f7ff fd9b 	bl	1010a14 <update_cache>
 1010ede:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 1010ee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1010ee4:	f7f5 bd96 	b.w	1006a14 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 1010ee8:	42a2      	cmp	r2, r4
 1010eea:	d0e3      	beq.n	1010eb4 <z_impl_k_yield+0x3c>
 1010eec:	6812      	ldr	r2, [r2, #0]
 1010eee:	e7e0      	b.n	1010eb2 <z_impl_k_yield+0x3a>
 1010ef0:	21003a3c 	.word	0x21003a3c

01010ef4 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 1010ef4:	ea50 0301 	orrs.w	r3, r0, r1
{
 1010ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1010efc:	4605      	mov	r5, r0
 1010efe:	460e      	mov	r6, r1
	if (ticks == 0) {
 1010f00:	d103      	bne.n	1010f0a <z_tick_sleep+0x16>
	z_impl_k_yield();
 1010f02:	f7ff ffb9 	bl	1010e78 <z_impl_k_yield>
		k_yield();
		return 0;
 1010f06:	2000      	movs	r0, #0
 1010f08:	e02c      	b.n	1010f64 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 1010f0a:	1c83      	adds	r3, r0, #2
 1010f0c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 1010f10:	db2a      	blt.n	1010f68 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 1010f12:	f004 f854 	bl	1014fbe <sys_clock_tick_get_32>
 1010f16:	182c      	adds	r4, r5, r0
 1010f18:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010f1c:	f3ef 8811 	mrs	r8, BASEPRI
 1010f20:	f383 8812 	msr	BASEPRI_MAX, r3
 1010f24:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 1010f28:	4f11      	ldr	r7, [pc, #68]	; (1010f70 <z_tick_sleep+0x7c>)
 1010f2a:	4b12      	ldr	r3, [pc, #72]	; (1010f74 <z_tick_sleep+0x80>)
 1010f2c:	68b8      	ldr	r0, [r7, #8]
 1010f2e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 1010f30:	f7ff fdfc 	bl	1010b2c <unready_thread>
	z_add_thread_timeout(_current, timeout);
 1010f34:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 1010f36:	4910      	ldr	r1, [pc, #64]	; (1010f78 <z_tick_sleep+0x84>)
 1010f38:	462a      	mov	r2, r5
 1010f3a:	4633      	mov	r3, r6
 1010f3c:	3018      	adds	r0, #24
 1010f3e:	f000 f917 	bl	1011170 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 1010f42:	68ba      	ldr	r2, [r7, #8]
 1010f44:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
 1010f46:	7b53      	ldrb	r3, [r2, #13]
 1010f48:	f043 0310 	orr.w	r3, r3, #16
 1010f4c:	7353      	strb	r3, [r2, #13]
 1010f4e:	f7f5 fd61 	bl	1006a14 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 1010f52:	f004 f834 	bl	1014fbe <sys_clock_tick_get_32>
 1010f56:	1a20      	subs	r0, r4, r0
 1010f58:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 1010f5c:	2801      	cmp	r0, #1
 1010f5e:	f173 0300 	sbcs.w	r3, r3, #0
 1010f62:	dbd0      	blt.n	1010f06 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 1010f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 1010f68:	f06f 0401 	mvn.w	r4, #1
 1010f6c:	1a24      	subs	r4, r4, r0
 1010f6e:	e7d3      	b.n	1010f18 <z_tick_sleep+0x24>
 1010f70:	21003a3c 	.word	0x21003a3c
 1010f74:	21003a68 	.word	0x21003a68
 1010f78:	01014db5 	.word	0x01014db5

01010f7c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1010f7c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 1010f80:	bf08      	it	eq
 1010f82:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 1010f86:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1010f88:	d106      	bne.n	1010f98 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 1010f8a:	4b08      	ldr	r3, [pc, #32]	; (1010fac <z_impl_k_sleep+0x30>)
 1010f8c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 1010f8e:	f7ff ff05 	bl	1010d9c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 1010f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 1010f96:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 1010f98:	f7ff ffac 	bl	1010ef4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
 1010f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 1010fa0:	fb80 0303 	smull	r0, r3, r0, r3
 1010fa4:	0bc0      	lsrs	r0, r0, #15
 1010fa6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
 1010faa:	e7f4      	b.n	1010f96 <z_impl_k_sleep+0x1a>
 1010fac:	21003a3c 	.word	0x21003a3c

01010fb0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 1010fb0:	4b01      	ldr	r3, [pc, #4]	; (1010fb8 <z_impl_z_current_get+0x8>)
 1010fb2:	6898      	ldr	r0, [r3, #8]
 1010fb4:	4770      	bx	lr
 1010fb6:	bf00      	nop
 1010fb8:	21003a3c 	.word	0x21003a3c

01010fbc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 1010fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1010fc0:	4604      	mov	r4, r0
 1010fc2:	f04f 0340 	mov.w	r3, #64	; 0x40
 1010fc6:	f3ef 8611 	mrs	r6, BASEPRI
 1010fca:	f383 8812 	msr	BASEPRI_MAX, r3
 1010fce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 1010fd2:	7b03      	ldrb	r3, [r0, #12]
 1010fd4:	07d9      	lsls	r1, r3, #31
 1010fd6:	d50b      	bpl.n	1010ff0 <z_thread_abort+0x34>
	__asm__ volatile(
 1010fd8:	f386 8811 	msr	BASEPRI, r6
 1010fdc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 1010fe0:	4040      	eors	r0, r0
 1010fe2:	f380 8811 	msr	BASEPRI, r0
 1010fe6:	f04f 0004 	mov.w	r0, #4
 1010fea:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 1010fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 1010ff0:	7b43      	ldrb	r3, [r0, #13]
 1010ff2:	071a      	lsls	r2, r3, #28
 1010ff4:	d504      	bpl.n	1011000 <z_thread_abort+0x44>
 1010ff6:	f386 8811 	msr	BASEPRI, r6
 1010ffa:	f3bf 8f6f 	isb	sy
 1010ffe:	e7f5      	b.n	1010fec <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 1011000:	f023 0220 	bic.w	r2, r3, #32
 1011004:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 1011008:	09d2      	lsrs	r2, r2, #7
 101100a:	d120      	bne.n	101104e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 101100c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 101100e:	68a3      	ldr	r3, [r4, #8]
 1011010:	b113      	cbz	r3, 1011018 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 1011012:	4620      	mov	r0, r4
 1011014:	f003 fec4 	bl	1014da0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 1011018:	f104 0018 	add.w	r0, r4, #24
 101101c:	f003 ff9d 	bl	1014f5a <z_abort_timeout>
 1011020:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 1011024:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
 1011028:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 101102a:	42bd      	cmp	r5, r7
 101102c:	d000      	beq.n	1011030 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 101102e:	b9b5      	cbnz	r5, 101105e <z_thread_abort+0xa2>
		update_cache(1);
 1011030:	2001      	movs	r0, #1
 1011032:	f7ff fcef 	bl	1010a14 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 1011036:	4b10      	ldr	r3, [pc, #64]	; (1011078 <z_thread_abort+0xbc>)
 1011038:	689b      	ldr	r3, [r3, #8]
 101103a:	42a3      	cmp	r3, r4
 101103c:	d1db      	bne.n	1010ff6 <z_thread_abort+0x3a>
 101103e:	f3ef 8305 	mrs	r3, IPSR
 1011042:	2b00      	cmp	r3, #0
 1011044:	d1d7      	bne.n	1010ff6 <z_thread_abort+0x3a>
 1011046:	4630      	mov	r0, r6
 1011048:	f7f5 fce4 	bl	1006a14 <arch_swap>
	return ret;
 101104c:	e7d3      	b.n	1010ff6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 101104e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 1011052:	f043 0308 	orr.w	r3, r3, #8
 1011056:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1011058:	f003 fe9a 	bl	1014d90 <sys_dlist_remove>
}
 101105c:	e7d7      	b.n	101100e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 101105e:	4628      	mov	r0, r5
 1011060:	f003 fe9e 	bl	1014da0 <unpend_thread_no_timeout>
 1011064:	f105 0018 	add.w	r0, r5, #24
 1011068:	f003 ff77 	bl	1014f5a <z_abort_timeout>
		ready_thread(thread);
 101106c:	4628      	mov	r0, r5
 101106e:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 1011072:	f7ff fd27 	bl	1010ac4 <ready_thread>
 1011076:	e7d7      	b.n	1011028 <z_thread_abort+0x6c>
 1011078:	21003a3c 	.word	0x21003a3c

0101107c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 101107c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 101107e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 1011082:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 1011084:	e9cd 6700 	strd	r6, r7, [sp]
 1011088:	f7ff fdf4 	bl	1010c74 <z_pend_curr>

	if (data != NULL) {
 101108c:	b11c      	cbz	r4, 1011096 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 101108e:	4b03      	ldr	r3, [pc, #12]	; (101109c <z_sched_wait+0x20>)
 1011090:	689b      	ldr	r3, [r3, #8]
 1011092:	695b      	ldr	r3, [r3, #20]
 1011094:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 1011096:	b002      	add	sp, #8
 1011098:	bdd0      	pop	{r4, r6, r7, pc}
 101109a:	bf00      	nop
 101109c:	21003a3c 	.word	0x21003a3c

010110a0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 10110a0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 10110a2:	4806      	ldr	r0, [pc, #24]	; (10110bc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 10110a4:	4a06      	ldr	r2, [pc, #24]	; (10110c0 <z_data_copy+0x20>)
 10110a6:	4907      	ldr	r1, [pc, #28]	; (10110c4 <z_data_copy+0x24>)
 10110a8:	1a12      	subs	r2, r2, r0
 10110aa:	f003 fdbe 	bl	1014c2a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 10110ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 10110b2:	4a05      	ldr	r2, [pc, #20]	; (10110c8 <z_data_copy+0x28>)
 10110b4:	4905      	ldr	r1, [pc, #20]	; (10110cc <z_data_copy+0x2c>)
 10110b6:	4806      	ldr	r0, [pc, #24]	; (10110d0 <z_data_copy+0x30>)
 10110b8:	f003 bdb7 	b.w	1014c2a <z_early_memcpy>
 10110bc:	21000000 	.word	0x21000000
 10110c0:	21000260 	.word	0x21000260
 10110c4:	01015dc4 	.word	0x01015dc4
 10110c8:	00000000 	.word	0x00000000
 10110cc:	01015dc4 	.word	0x01015dc4
 10110d0:	21000000 	.word	0x21000000

010110d4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 10110d4:	4b03      	ldr	r3, [pc, #12]	; (10110e4 <elapsed+0x10>)
 10110d6:	681b      	ldr	r3, [r3, #0]
 10110d8:	b90b      	cbnz	r3, 10110de <elapsed+0xa>
 10110da:	f7f6 bec1 	b.w	1007e60 <sys_clock_elapsed>
}
 10110de:	2000      	movs	r0, #0
 10110e0:	4770      	bx	lr
 10110e2:	bf00      	nop
 10110e4:	21003a74 	.word	0x21003a74

010110e8 <next_timeout>:

static int32_t next_timeout(void)
{
 10110e8:	b510      	push	{r4, lr}
	return list->head == list;
 10110ea:	4b11      	ldr	r3, [pc, #68]	; (1011130 <next_timeout+0x48>)
 10110ec:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10110ee:	429c      	cmp	r4, r3
 10110f0:	d10a      	bne.n	1011108 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 10110f2:	f7ff ffef 	bl	10110d4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 10110f6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 10110fa:	4b0e      	ldr	r3, [pc, #56]	; (1011134 <next_timeout+0x4c>)
 10110fc:	691b      	ldr	r3, [r3, #16]
 10110fe:	b113      	cbz	r3, 1011106 <next_timeout+0x1e>
 1011100:	4298      	cmp	r0, r3
 1011102:	bfa8      	it	ge
 1011104:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 1011106:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 1011108:	f7ff ffe4 	bl	10110d4 <elapsed>
	if ((to == NULL) ||
 101110c:	2c00      	cmp	r4, #0
 101110e:	d0f2      	beq.n	10110f6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 1011110:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 1011114:	1a1b      	subs	r3, r3, r0
 1011116:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 101111a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 101111e:	f172 0100 	sbcs.w	r1, r2, #0
 1011122:	dae8      	bge.n	10110f6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 1011124:	2a00      	cmp	r2, #0
 1011126:	bfac      	ite	ge
 1011128:	4618      	movge	r0, r3
 101112a:	2000      	movlt	r0, #0
 101112c:	e7e5      	b.n	10110fa <next_timeout+0x12>
 101112e:	bf00      	nop
 1011130:	2100010c 	.word	0x2100010c
 1011134:	21003a3c 	.word	0x21003a3c

01011138 <remove_timeout>:
{
 1011138:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 101113a:	b170      	cbz	r0, 101115a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 101113c:	4b0b      	ldr	r3, [pc, #44]	; (101116c <remove_timeout+0x34>)
 101113e:	685b      	ldr	r3, [r3, #4]
 1011140:	4298      	cmp	r0, r3
 1011142:	d00a      	beq.n	101115a <remove_timeout+0x22>
 1011144:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 1011146:	b143      	cbz	r3, 101115a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 1011148:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 101114c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 1011150:	1912      	adds	r2, r2, r4
 1011152:	eb41 0105 	adc.w	r1, r1, r5
 1011156:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 101115a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 101115e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 1011160:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 1011162:	2300      	movs	r3, #0
	node->prev = NULL;
 1011164:	e9c0 3300 	strd	r3, r3, [r0]
}
 1011168:	bd30      	pop	{r4, r5, pc}
 101116a:	bf00      	nop
 101116c:	2100010c 	.word	0x2100010c

01011170 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1011170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 1011174:	bf08      	it	eq
 1011176:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 101117a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 101117c:	4604      	mov	r4, r0
 101117e:	461d      	mov	r5, r3
 1011180:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1011182:	d061      	beq.n	1011248 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 1011184:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 1011186:	f04f 0340 	mov.w	r3, #64	; 0x40
 101118a:	f3ef 8711 	mrs	r7, BASEPRI
 101118e:	f383 8812 	msr	BASEPRI_MAX, r3
 1011192:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 1011196:	3201      	adds	r2, #1
 1011198:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 101119c:	da24      	bge.n	10111e8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 101119e:	f06f 0301 	mvn.w	r3, #1
 10111a2:	492f      	ldr	r1, [pc, #188]	; (1011260 <z_add_timeout+0xf0>)
 10111a4:	e9d1 2000 	ldrd	r2, r0, [r1]
 10111a8:	1a9b      	subs	r3, r3, r2
 10111aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 10111ae:	eb62 0000 	sbc.w	r0, r2, r0
 10111b2:	1b9e      	subs	r6, r3, r6
 10111b4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 10111b8:	2e01      	cmp	r6, #1
 10111ba:	f170 0300 	sbcs.w	r3, r0, #0
 10111be:	da01      	bge.n	10111c4 <z_add_timeout+0x54>
 10111c0:	2601      	movs	r6, #1
 10111c2:	2000      	movs	r0, #0
 10111c4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 10111c8:	4e26      	ldr	r6, [pc, #152]	; (1011264 <z_add_timeout+0xf4>)
 10111ca:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 10111ce:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10111d0:	45b4      	cmp	ip, r6
 10111d2:	bf08      	it	eq
 10111d4:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 10111d8:	f1bc 0f00 	cmp.w	ip, #0
 10111dc:	d10d      	bne.n	10111fa <z_add_timeout+0x8a>
	node->prev = tail;
 10111de:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 10111e2:	602c      	str	r4, [r5, #0]
	list->tail = node;
 10111e4:	6074      	str	r4, [r6, #4]
}
 10111e6:	e01c      	b.n	1011222 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 10111e8:	f7ff ff74 	bl	10110d4 <elapsed>
 10111ec:	3601      	adds	r6, #1
 10111ee:	f145 0500 	adc.w	r5, r5, #0
 10111f2:	1836      	adds	r6, r6, r0
 10111f4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 10111f8:	e7e4      	b.n	10111c4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 10111fa:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 10111fe:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 1011202:	4293      	cmp	r3, r2
 1011204:	eb71 0e00 	sbcs.w	lr, r1, r0
 1011208:	da1f      	bge.n	101124a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 101120a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 101120c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 1011210:	eb60 0001 	sbc.w	r0, r0, r1
 1011214:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 1011218:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 101121c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 101121e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 1011222:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1011224:	42b3      	cmp	r3, r6
 1011226:	d00b      	beq.n	1011240 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 1011228:	429c      	cmp	r4, r3
 101122a:	d109      	bne.n	1011240 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 101122c:	f7ff ff5c 	bl	10110e8 <next_timeout>

			if (next_time == 0 ||
 1011230:	b118      	cbz	r0, 101123a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 1011232:	4b0d      	ldr	r3, [pc, #52]	; (1011268 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 1011234:	691b      	ldr	r3, [r3, #16]
 1011236:	4283      	cmp	r3, r0
 1011238:	d002      	beq.n	1011240 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 101123a:	2100      	movs	r1, #0
 101123c:	f7f6 fdde 	bl	1007dfc <sys_clock_set_timeout>
	__asm__ volatile(
 1011240:	f387 8811 	msr	BASEPRI, r7
 1011244:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 1011248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 101124a:	1a9b      	subs	r3, r3, r2
 101124c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 1011250:	45ac      	cmp	ip, r5
 1011252:	e9c4 3104 	strd	r3, r1, [r4, #16]
 1011256:	d0c2      	beq.n	10111de <z_add_timeout+0x6e>
 1011258:	f8dc c000 	ldr.w	ip, [ip]
 101125c:	e7bc      	b.n	10111d8 <z_add_timeout+0x68>
 101125e:	bf00      	nop
 1011260:	21001830 	.word	0x21001830
 1011264:	2100010c 	.word	0x2100010c
 1011268:	21003a3c 	.word	0x21003a3c

0101126c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 101126c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1011270:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 1011272:	f7ff fcbd 	bl	1010bf0 <z_time_slice>
	__asm__ volatile(
 1011276:	f04f 0340 	mov.w	r3, #64	; 0x40
 101127a:	f3ef 8611 	mrs	r6, BASEPRI
 101127e:	f383 8812 	msr	BASEPRI_MAX, r3
 1011282:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 1011286:	4f24      	ldr	r7, [pc, #144]	; (1011318 <sys_clock_announce+0xac>)
	return list->head == list;
 1011288:	f8df 8090 	ldr.w	r8, [pc, #144]	; 101131c <sys_clock_announce+0xb0>
 101128c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 1011290:	4a23      	ldr	r2, [pc, #140]	; (1011320 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1011292:	4540      	cmp	r0, r8
	announce_remaining = ticks;
 1011294:	603c      	str	r4, [r7, #0]
	return list->head == list;
 1011296:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
 101129a:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 101129e:	d00b      	beq.n	10112b8 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 10112a0:	b150      	cbz	r0, 10112b8 <sys_clock_announce+0x4c>
 10112a2:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
 10112a6:	42ac      	cmp	r4, r5
 10112a8:	eb71 090c 	sbcs.w	r9, r1, ip
 10112ac:	da17      	bge.n	10112de <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 10112ae:	1b2d      	subs	r5, r5, r4
 10112b0:	eb6c 0c01 	sbc.w	ip, ip, r1
 10112b4:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 10112b8:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
 10112ba:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 10112be:	eb4e 0101 	adc.w	r1, lr, r1
 10112c2:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
 10112c6:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
 10112c8:	f7ff ff0e 	bl	10110e8 <next_timeout>
 10112cc:	4621      	mov	r1, r4
 10112ce:	f7f6 fd95 	bl	1007dfc <sys_clock_set_timeout>
	__asm__ volatile(
 10112d2:	f386 8811 	msr	BASEPRI, r6
 10112d6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 10112da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 10112de:	18eb      	adds	r3, r5, r3
 10112e0:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
 10112e4:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
 10112e8:	2200      	movs	r2, #0
 10112ea:	2300      	movs	r3, #0
 10112ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
 10112f0:	f7ff ff22 	bl	1011138 <remove_timeout>
 10112f4:	f386 8811 	msr	BASEPRI, r6
 10112f8:	f3bf 8f6f 	isb	sy
		t->fn(t);
 10112fc:	6883      	ldr	r3, [r0, #8]
 10112fe:	4798      	blx	r3
	__asm__ volatile(
 1011300:	f04f 0340 	mov.w	r3, #64	; 0x40
 1011304:	f3ef 8611 	mrs	r6, BASEPRI
 1011308:	f383 8812 	msr	BASEPRI_MAX, r3
 101130c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 1011310:	683c      	ldr	r4, [r7, #0]
 1011312:	1b64      	subs	r4, r4, r5
 1011314:	e7ba      	b.n	101128c <sys_clock_announce+0x20>
 1011316:	bf00      	nop
 1011318:	21003a74 	.word	0x21003a74
 101131c:	2100010c 	.word	0x2100010c
 1011320:	21001830 	.word	0x21001830

01011324 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 1011324:	b510      	push	{r4, lr}
 1011326:	f04f 0340 	mov.w	r3, #64	; 0x40
 101132a:	f3ef 8411 	mrs	r4, BASEPRI
 101132e:	f383 8812 	msr	BASEPRI_MAX, r3
 1011332:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 1011336:	f7ff fecd 	bl	10110d4 <elapsed>
 101133a:	4603      	mov	r3, r0
 101133c:	4a05      	ldr	r2, [pc, #20]	; (1011354 <sys_clock_tick_get+0x30>)
 101133e:	e9d2 0100 	ldrd	r0, r1, [r2]
 1011342:	1818      	adds	r0, r3, r0
 1011344:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 1011348:	f384 8811 	msr	BASEPRI, r4
 101134c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 1011350:	bd10      	pop	{r4, pc}
 1011352:	bf00      	nop
 1011354:	21001830 	.word	0x21001830

01011358 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
 1011358:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
 101135a:	4601      	mov	r1, r0
 101135c:	4801      	ldr	r0, [pc, #4]	; (1011364 <k_aligned_alloc+0xc>)
 101135e:	f003 be54 	b.w	101500a <z_heap_aligned_alloc>
 1011362:	bf00      	nop
 1011364:	21000218 	.word	0x21000218

01011368 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
 1011368:	4b01      	ldr	r3, [pc, #4]	; (1011370 <k_thread_system_pool_assign+0x8>)
 101136a:	6703      	str	r3, [r0, #112]	; 0x70
}
 101136c:	4770      	bx	lr
 101136e:	bf00      	nop
 1011370:	21000218 	.word	0x21000218

01011374 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 1011374:	4801      	ldr	r0, [pc, #4]	; (101137c <boot_banner+0x8>)
 1011376:	f000 bd45 	b.w	1011e04 <printk>
 101137a:	bf00      	nop
 101137c:	01015d8d 	.word	0x01015d8d

01011380 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 1011380:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 1011382:	4c06      	ldr	r4, [pc, #24]	; (101139c <statics_init+0x1c>)
 1011384:	4d06      	ldr	r5, [pc, #24]	; (10113a0 <statics_init+0x20>)
 1011386:	42ac      	cmp	r4, r5
 1011388:	d301      	bcc.n	101138e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 101138a:	2000      	movs	r0, #0
 101138c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 101138e:	4620      	mov	r0, r4
 1011390:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 1011394:	f003 fe5a 	bl	101504c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 1011398:	3414      	adds	r4, #20
 101139a:	e7f4      	b.n	1011386 <statics_init+0x6>
 101139c:	21000218 	.word	0x21000218
 10113a0:	2100022c 	.word	0x2100022c

010113a4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 10113a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 10113a6:	2400      	movs	r4, #0
 10113a8:	4b08      	ldr	r3, [pc, #32]	; (10113cc <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 10113aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
 10113ae:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
 10113b0:	ab02      	add	r3, sp, #8
 10113b2:	9300      	str	r3, [sp, #0]
 10113b4:	4906      	ldr	r1, [pc, #24]	; (10113d0 <k_sys_work_q_init+0x2c>)
 10113b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 10113ba:	4806      	ldr	r0, [pc, #24]	; (10113d4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 10113bc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 10113c0:	f7ff fa3a 	bl	1010838 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 10113c4:	4620      	mov	r0, r4
 10113c6:	b004      	add	sp, #16
 10113c8:	bd10      	pop	{r4, pc}
 10113ca:	bf00      	nop
 10113cc:	01015dbb 	.word	0x01015dbb
 10113d0:	21006e50 	.word	0x21006e50
 10113d4:	21001838 	.word	0x21001838

010113d8 <nrf_802154_sl_crit_sect_init>:
 10113d8:	4b01      	ldr	r3, [pc, #4]	; (10113e0 <nrf_802154_sl_crit_sect_init+0x8>)
 10113da:	6018      	str	r0, [r3, #0]
 10113dc:	4770      	bx	lr
 10113de:	bf00      	nop
 10113e0:	21003a78 	.word	0x21003a78

010113e4 <dly_ts_by_id_search>:
 10113e4:	4602      	mov	r2, r0
 10113e6:	2300      	movs	r3, #0
 10113e8:	b510      	push	{r4, lr}
 10113ea:	4905      	ldr	r1, [pc, #20]	; (1011400 <dly_ts_by_id_search+0x1c>)
 10113ec:	f851 0b04 	ldr.w	r0, [r1], #4
 10113f0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 10113f2:	4294      	cmp	r4, r2
 10113f4:	d003      	beq.n	10113fe <dly_ts_by_id_search+0x1a>
 10113f6:	3301      	adds	r3, #1
 10113f8:	2b04      	cmp	r3, #4
 10113fa:	d1f7      	bne.n	10113ec <dly_ts_by_id_search+0x8>
 10113fc:	2000      	movs	r0, #0
 10113fe:	bd10      	pop	{r4, pc}
 1011400:	21003a7c 	.word	0x21003a7c

01011404 <all_prec_update>:
 1011404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1011408:	4d2a      	ldr	r5, [pc, #168]	; (10114b4 <all_prec_update+0xb0>)
 101140a:	4e2b      	ldr	r6, [pc, #172]	; (10114b8 <all_prec_update+0xb4>)
 101140c:	4628      	mov	r0, r5
 101140e:	f003 fff3 	bl	10153f8 <nrf_802154_sl_mutex_try_acquire>
 1011412:	2800      	cmp	r0, #0
 1011414:	d045      	beq.n	10114a2 <all_prec_update+0x9e>
 1011416:	7837      	ldrb	r7, [r6, #0]
 1011418:	f003 ff6e 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
 101141c:	2200      	movs	r2, #0
 101141e:	4694      	mov	ip, r2
 1011420:	f8df 8098 	ldr.w	r8, [pc, #152]	; 10114bc <all_prec_update+0xb8>
 1011424:	f858 9b04 	ldr.w	r9, [r8], #4
 1011428:	f899 e030 	ldrb.w	lr, [r9, #48]	; 0x30
 101142c:	e9d9 340a 	ldrd	r3, r4, [r9, #40]	; 0x28
 1011430:	f899 9032 	ldrb.w	r9, [r9, #50]	; 0x32
 1011434:	f1b9 0f01 	cmp.w	r9, #1
 1011438:	d109      	bne.n	101144e <all_prec_update+0x4a>
 101143a:	f5b3 73f0 	subs.w	r3, r3, #480	; 0x1e0
 101143e:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
 1011442:	4298      	cmp	r0, r3
 1011444:	eb71 0404 	sbcs.w	r4, r1, r4
 1011448:	bf38      	it	cc
 101144a:	f04f 0e00 	movcc.w	lr, #0
 101144e:	4572      	cmp	r2, lr
 1011450:	f10c 0c01 	add.w	ip, ip, #1
 1011454:	bf38      	it	cc
 1011456:	4672      	movcc	r2, lr
 1011458:	f1bc 0f04 	cmp.w	ip, #4
 101145c:	d1e2      	bne.n	1011424 <all_prec_update+0x20>
 101145e:	4b18      	ldr	r3, [pc, #96]	; (10114c0 <all_prec_update+0xbc>)
 1011460:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10114c4 <all_prec_update+0xc0>
 1011464:	781c      	ldrb	r4, [r3, #0]
 1011466:	4294      	cmp	r4, r2
 1011468:	bf38      	it	cc
 101146a:	4614      	movcc	r4, r2
 101146c:	b2e4      	uxtb	r4, r4
 101146e:	42a7      	cmp	r7, r4
 1011470:	d00c      	beq.n	101148c <all_prec_update+0x88>
 1011472:	7034      	strb	r4, [r6, #0]
 1011474:	b9bc      	cbnz	r4, 10114a6 <all_prec_update+0xa2>
 1011476:	f7f6 fe07 	bl	1008088 <nrf_802154_clock_hfclk_stop>
 101147a:	4620      	mov	r0, r4
 101147c:	f888 4000 	strb.w	r4, [r8]
 1011480:	f000 fc88 	bl	1011d94 <nrf_802154_wifi_coex_prio_request>
 1011484:	f7f2 fb34 	bl	1003af0 <nrf_raal_continuous_mode_exit>
 1011488:	f888 4001 	strb.w	r4, [r8, #1]
 101148c:	f898 3001 	ldrb.w	r3, [r8, #1]
 1011490:	b113      	cbz	r3, 1011498 <all_prec_update+0x94>
 1011492:	4620      	mov	r0, r4
 1011494:	f000 fc7e 	bl	1011d94 <nrf_802154_wifi_coex_prio_request>
 1011498:	4628      	mov	r0, r5
 101149a:	f003 ffbc 	bl	1015416 <nrf_802154_sl_mutex_release>
 101149e:	2800      	cmp	r0, #0
 10114a0:	d1b4      	bne.n	101140c <all_prec_update+0x8>
 10114a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 10114a6:	2f00      	cmp	r7, #0
 10114a8:	d1f0      	bne.n	101148c <all_prec_update+0x88>
 10114aa:	f7f6 fdd9 	bl	1008060 <nrf_802154_clock_hfclk_start>
 10114ae:	f7f2 fb89 	bl	1003bc4 <nrf_raal_continuous_mode_enter>
 10114b2:	e7eb      	b.n	101148c <all_prec_update+0x88>
 10114b4:	21003a8c 	.word	0x21003a8c
 10114b8:	21004544 	.word	0x21004544
 10114bc:	21003a7c 	.word	0x21003a7c
 10114c0:	21004543 	.word	0x21004543
 10114c4:	21004545 	.word	0x21004545

010114c8 <delayed_timeslot_prec_request>:
 10114c8:	b510      	push	{r4, lr}
 10114ca:	6984      	ldr	r4, [r0, #24]
 10114cc:	f7ff ff9a 	bl	1011404 <all_prec_update>
 10114d0:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 10114d4:	e9c4 2304 	strd	r2, r3, [r4, #16]
 10114d8:	2301      	movs	r3, #1
 10114da:	7723      	strb	r3, [r4, #28]
 10114dc:	4b03      	ldr	r3, [pc, #12]	; (10114ec <delayed_timeslot_prec_request+0x24>)
 10114de:	4620      	mov	r0, r4
 10114e0:	61a4      	str	r4, [r4, #24]
 10114e2:	6223      	str	r3, [r4, #32]
 10114e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 10114e8:	f000 b9fc 	b.w	10118e4 <nrf_802154_sl_timer_add>
 10114ec:	010151f3 	.word	0x010151f3

010114f0 <nrf_802154_rsch_init>:
 10114f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10114f2:	2400      	movs	r4, #0
 10114f4:	f7f2 fac6 	bl	1003a84 <nrf_raal_init>
 10114f8:	481f      	ldr	r0, [pc, #124]	; (1011578 <nrf_802154_rsch_init+0x88>)
 10114fa:	f003 ff7a 	bl	10153f2 <nrf_802154_sl_mutex_init>
 10114fe:	481f      	ldr	r0, [pc, #124]	; (101157c <nrf_802154_rsch_init+0x8c>)
 1011500:	f003 ff77 	bl	10153f2 <nrf_802154_sl_mutex_init>
 1011504:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 1011508:	2202      	movs	r2, #2
 101150a:	4b1d      	ldr	r3, [pc, #116]	; (1011580 <nrf_802154_rsch_init+0x90>)
 101150c:	481d      	ldr	r0, [pc, #116]	; (1011584 <nrf_802154_rsch_init+0x94>)
 101150e:	701c      	strb	r4, [r3, #0]
 1011510:	4b1d      	ldr	r3, [pc, #116]	; (1011588 <nrf_802154_rsch_init+0x98>)
 1011512:	4e1e      	ldr	r6, [pc, #120]	; (101158c <nrf_802154_rsch_init+0x9c>)
 1011514:	701c      	strb	r4, [r3, #0]
 1011516:	4b1e      	ldr	r3, [pc, #120]	; (1011590 <nrf_802154_rsch_init+0xa0>)
 1011518:	4d1e      	ldr	r5, [pc, #120]	; (1011594 <nrf_802154_rsch_init+0xa4>)
 101151a:	701c      	strb	r4, [r3, #0]
 101151c:	4b1e      	ldr	r3, [pc, #120]	; (1011598 <nrf_802154_rsch_init+0xa8>)
 101151e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
 1011522:	701c      	strb	r4, [r3, #0]
 1011524:	6387      	str	r7, [r0, #56]	; 0x38
 1011526:	705c      	strb	r4, [r3, #1]
 1011528:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
 101152c:	709a      	strb	r2, [r3, #2]
 101152e:	6030      	str	r0, [r6, #0]
 1011530:	f003 fee9 	bl	1015306 <nrf_802154_sl_timer_init>
 1011534:	4628      	mov	r0, r5
 1011536:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
 101153a:	63af      	str	r7, [r5, #56]	; 0x38
 101153c:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
 1011540:	6075      	str	r5, [r6, #4]
 1011542:	f003 fee0 	bl	1015306 <nrf_802154_sl_timer_init>
 1011546:	f105 0048 	add.w	r0, r5, #72	; 0x48
 101154a:	60b0      	str	r0, [r6, #8]
 101154c:	f885 4078 	strb.w	r4, [r5, #120]	; 0x78
 1011550:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
 1011554:	f885 4088 	strb.w	r4, [r5, #136]	; 0x88
 1011558:	f003 fed5 	bl	1015306 <nrf_802154_sl_timer_init>
 101155c:	480f      	ldr	r0, [pc, #60]	; (101159c <nrf_802154_rsch_init+0xac>)
 101155e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
 1011562:	6387      	str	r7, [r0, #56]	; 0x38
 1011564:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
 1011568:	60f0      	str	r0, [r6, #12]
 101156a:	f003 fecc 	bl	1015306 <nrf_802154_sl_timer_init>
 101156e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1011572:	f000 bc03 	b.w	1011d7c <nrf_802154_wifi_coex_init>
 1011576:	bf00      	nop
 1011578:	21003a90 	.word	0x21003a90
 101157c:	21003a8c 	.word	0x21003a8c
 1011580:	21004548 	.word	0x21004548
 1011584:	210019b0 	.word	0x210019b0
 1011588:	21004543 	.word	0x21004543
 101158c:	21003a7c 	.word	0x21003a7c
 1011590:	21004544 	.word	0x21004544
 1011594:	21001920 	.word	0x21001920
 1011598:	21004545 	.word	0x21004545
 101159c:	210018d8 	.word	0x210018d8

010115a0 <nrf_802154_rsch_continuous_ended>:
 10115a0:	2200      	movs	r2, #0
 10115a2:	4b04      	ldr	r3, [pc, #16]	; (10115b4 <nrf_802154_rsch_continuous_ended+0x14>)
 10115a4:	701a      	strb	r2, [r3, #0]
 10115a6:	4b04      	ldr	r3, [pc, #16]	; (10115b8 <nrf_802154_rsch_continuous_ended+0x18>)
 10115a8:	7819      	ldrb	r1, [r3, #0]
 10115aa:	b111      	cbz	r1, 10115b2 <nrf_802154_rsch_continuous_ended+0x12>
 10115ac:	701a      	strb	r2, [r3, #0]
 10115ae:	f7f2 bac3 	b.w	1003b38 <nrf_raal_continuous_ended>
 10115b2:	4770      	bx	lr
 10115b4:	21004541 	.word	0x21004541
 10115b8:	21004542 	.word	0x21004542

010115bc <notify_core>:
 10115bc:	b538      	push	{r3, r4, r5, lr}
 10115be:	4d1c      	ldr	r5, [pc, #112]	; (1011630 <notify_core+0x74>)
 10115c0:	4c1c      	ldr	r4, [pc, #112]	; (1011634 <notify_core+0x78>)
 10115c2:	4628      	mov	r0, r5
 10115c4:	f003 ff18 	bl	10153f8 <nrf_802154_sl_mutex_try_acquire>
 10115c8:	b318      	cbz	r0, 1011612 <notify_core+0x56>
 10115ca:	7823      	ldrb	r3, [r4, #0]
 10115cc:	2b03      	cmp	r3, #3
 10115ce:	bf8c      	ite	hi
 10115d0:	2004      	movhi	r0, #4
 10115d2:	7820      	ldrbls	r0, [r4, #0]
 10115d4:	7863      	ldrb	r3, [r4, #1]
 10115d6:	bf98      	it	ls
 10115d8:	b2c0      	uxtbls	r0, r0
 10115da:	4298      	cmp	r0, r3
 10115dc:	bf88      	it	hi
 10115de:	7860      	ldrbhi	r0, [r4, #1]
 10115e0:	78a3      	ldrb	r3, [r4, #2]
 10115e2:	bf88      	it	hi
 10115e4:	b2c0      	uxtbhi	r0, r0
 10115e6:	4283      	cmp	r3, r0
 10115e8:	4b13      	ldr	r3, [pc, #76]	; (1011638 <notify_core+0x7c>)
 10115ea:	bf38      	it	cc
 10115ec:	78a0      	ldrbcc	r0, [r4, #2]
 10115ee:	781a      	ldrb	r2, [r3, #0]
 10115f0:	bf38      	it	cc
 10115f2:	b2c0      	uxtbcc	r0, r0
 10115f4:	4282      	cmp	r2, r0
 10115f6:	d00d      	beq.n	1011614 <notify_core+0x58>
 10115f8:	7018      	strb	r0, [r3, #0]
 10115fa:	fab0 f380 	clz	r3, r0
 10115fe:	4a0f      	ldr	r2, [pc, #60]	; (101163c <notify_core+0x80>)
 1011600:	095b      	lsrs	r3, r3, #5
 1011602:	7013      	strb	r3, [r2, #0]
 1011604:	f000 f902 	bl	101180c <nrf_802154_rsch_continuous_prio_changed>
 1011608:	4628      	mov	r0, r5
 101160a:	f003 ff04 	bl	1015416 <nrf_802154_sl_mutex_release>
 101160e:	2800      	cmp	r0, #0
 1011610:	d1d7      	bne.n	10115c2 <notify_core+0x6>
 1011612:	bd38      	pop	{r3, r4, r5, pc}
 1011614:	781b      	ldrb	r3, [r3, #0]
 1011616:	2b00      	cmp	r3, #0
 1011618:	d1f6      	bne.n	1011608 <notify_core+0x4c>
 101161a:	4b08      	ldr	r3, [pc, #32]	; (101163c <notify_core+0x80>)
 101161c:	781b      	ldrb	r3, [r3, #0]
 101161e:	2b00      	cmp	r3, #0
 1011620:	d1f2      	bne.n	1011608 <notify_core+0x4c>
 1011622:	4b07      	ldr	r3, [pc, #28]	; (1011640 <notify_core+0x84>)
 1011624:	781b      	ldrb	r3, [r3, #0]
 1011626:	2b00      	cmp	r3, #0
 1011628:	d0ee      	beq.n	1011608 <notify_core+0x4c>
 101162a:	f7ff ffb9 	bl	10115a0 <nrf_802154_rsch_continuous_ended>
 101162e:	e7eb      	b.n	1011608 <notify_core+0x4c>
 1011630:	21003a90 	.word	0x21003a90
 1011634:	21004545 	.word	0x21004545
 1011638:	21004548 	.word	0x21004548
 101163c:	21004541 	.word	0x21004541
 1011640:	21004542 	.word	0x21004542

01011644 <nrf_802154_rsch_continuous_mode_priority_set>:
 1011644:	b508      	push	{r3, lr}
 1011646:	4b05      	ldr	r3, [pc, #20]	; (101165c <nrf_802154_rsch_continuous_mode_priority_set+0x18>)
 1011648:	7018      	strb	r0, [r3, #0]
 101164a:	f3bf 8f5f 	dmb	sy
 101164e:	f7ff fed9 	bl	1011404 <all_prec_update>
 1011652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1011656:	f7ff bfb1 	b.w	10115bc <notify_core>
 101165a:	bf00      	nop
 101165c:	21004543 	.word	0x21004543

01011660 <nrf_802154_rsch_delayed_timeslot_request>:
 1011660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1011664:	7a43      	ldrb	r3, [r0, #9]
 1011666:	4605      	mov	r5, r0
 1011668:	2b01      	cmp	r3, #1
 101166a:	d035      	beq.n	10116d8 <nrf_802154_rsch_delayed_timeslot_request+0x78>
 101166c:	2b02      	cmp	r3, #2
 101166e:	d036      	beq.n	10116de <nrf_802154_rsch_delayed_timeslot_request+0x7e>
 1011670:	2b00      	cmp	r3, #0
 1011672:	d167      	bne.n	1011744 <nrf_802154_rsch_delayed_timeslot_request+0xe4>
 1011674:	2101      	movs	r1, #1
 1011676:	4834      	ldr	r0, [pc, #208]	; (1011748 <nrf_802154_rsch_delayed_timeslot_request+0xe8>)
 1011678:	f003 fd85 	bl	1015186 <dly_ts_from_pool_alloc>
 101167c:	4604      	mov	r4, r0
 101167e:	2800      	cmp	r0, #0
 1011680:	d060      	beq.n	1011744 <nrf_802154_rsch_delayed_timeslot_request+0xe4>
 1011682:	f895 800a 	ldrb.w	r8, [r5, #10]
 1011686:	f1b8 0f00 	cmp.w	r8, #0
 101168a:	d046      	beq.n	101171a <nrf_802154_rsch_delayed_timeslot_request+0xba>
 101168c:	f1b8 0f01 	cmp.w	r8, #1
 1011690:	d154      	bne.n	101173c <nrf_802154_rsch_delayed_timeslot_request+0xdc>
 1011692:	f003 fe31 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
 1011696:	e9d5 3200 	ldrd	r3, r2, [r5]
 101169a:	f5b3 7cf0 	subs.w	ip, r3, #480	; 0x1e0
 101169e:	f142 37ff 	adc.w	r7, r2, #4294967295	; 0xffffffff
 10116a2:	4560      	cmp	r0, ip
 10116a4:	eb71 0607 	sbcs.w	r6, r1, r7
 10116a8:	d21c      	bcs.n	10116e4 <nrf_802154_rsch_delayed_timeslot_request+0x84>
 10116aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 10116ac:	f104 0628 	add.w	r6, r4, #40	; 0x28
 10116b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 10116b2:	4b26      	ldr	r3, [pc, #152]	; (101174c <nrf_802154_rsch_delayed_timeslot_request+0xec>)
 10116b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 10116b8:	e886 0003 	stmia.w	r6, {r0, r1}
 10116bc:	e9c4 c704 	strd	ip, r7, [r4, #16]
 10116c0:	61a4      	str	r4, [r4, #24]
 10116c2:	f884 801c 	strb.w	r8, [r4, #28]
 10116c6:	6223      	str	r3, [r4, #32]
 10116c8:	4620      	mov	r0, r4
 10116ca:	f000 f90b 	bl	10118e4 <nrf_802154_sl_timer_add>
 10116ce:	2800      	cmp	r0, #0
 10116d0:	d134      	bne.n	101173c <nrf_802154_rsch_delayed_timeslot_request+0xdc>
 10116d2:	2001      	movs	r0, #1
 10116d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10116d8:	2102      	movs	r1, #2
 10116da:	481d      	ldr	r0, [pc, #116]	; (1011750 <nrf_802154_rsch_delayed_timeslot_request+0xf0>)
 10116dc:	e7cc      	b.n	1011678 <nrf_802154_rsch_delayed_timeslot_request+0x18>
 10116de:	2101      	movs	r1, #1
 10116e0:	481c      	ldr	r0, [pc, #112]	; (1011754 <nrf_802154_rsch_delayed_timeslot_request+0xf4>)
 10116e2:	e7c9      	b.n	1011678 <nrf_802154_rsch_delayed_timeslot_request+0x18>
 10116e4:	4e1c      	ldr	r6, [pc, #112]	; (1011758 <nrf_802154_rsch_delayed_timeslot_request+0xf8>)
 10116e6:	7836      	ldrb	r6, [r6, #0]
 10116e8:	b346      	cbz	r6, 101173c <nrf_802154_rsch_delayed_timeslot_request+0xdc>
 10116ea:	4298      	cmp	r0, r3
 10116ec:	4191      	sbcs	r1, r2
 10116ee:	d225      	bcs.n	101173c <nrf_802154_rsch_delayed_timeslot_request+0xdc>
 10116f0:	462f      	mov	r7, r5
 10116f2:	f104 0628 	add.w	r6, r4, #40	; 0x28
 10116f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 10116f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 10116fa:	e897 0003 	ldmia.w	r7, {r0, r1}
 10116fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 1011702:	e886 0003 	stmia.w	r6, {r0, r1}
 1011706:	e9c4 2304 	strd	r2, r3, [r4, #16]
 101170a:	61a4      	str	r4, [r4, #24]
 101170c:	f884 801c 	strb.w	r8, [r4, #28]
 1011710:	4b12      	ldr	r3, [pc, #72]	; (101175c <nrf_802154_rsch_delayed_timeslot_request+0xfc>)
 1011712:	6223      	str	r3, [r4, #32]
 1011714:	f7ff fe76 	bl	1011404 <all_prec_update>
 1011718:	e7d6      	b.n	10116c8 <nrf_802154_rsch_delayed_timeslot_request+0x68>
 101171a:	462f      	mov	r7, r5
 101171c:	f100 0628 	add.w	r6, r0, #40	; 0x28
 1011720:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 1011722:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 1011724:	e897 0003 	ldmia.w	r7, {r0, r1}
 1011728:	e9d5 2300 	ldrd	r2, r3, [r5]
 101172c:	e886 0003 	stmia.w	r6, {r0, r1}
 1011730:	e9c4 2304 	strd	r2, r3, [r4, #16]
 1011734:	2301      	movs	r3, #1
 1011736:	61a4      	str	r4, [r4, #24]
 1011738:	7723      	strb	r3, [r4, #28]
 101173a:	e7e9      	b.n	1011710 <nrf_802154_rsch_delayed_timeslot_request+0xb0>
 101173c:	2101      	movs	r1, #1
 101173e:	4620      	mov	r0, r4
 1011740:	f003 fd3c 	bl	10151bc <dly_ts_release>
 1011744:	2000      	movs	r0, #0
 1011746:	e7c5      	b.n	10116d4 <nrf_802154_rsch_delayed_timeslot_request+0x74>
 1011748:	210019b0 	.word	0x210019b0
 101174c:	010114c9 	.word	0x010114c9
 1011750:	21001920 	.word	0x21001920
 1011754:	210018d8 	.word	0x210018d8
 1011758:	21004544 	.word	0x21004544
 101175c:	010151f3 	.word	0x010151f3

01011760 <nrf_802154_rsch_prec_is_approved>:
 1011760:	4b03      	ldr	r3, [pc, #12]	; (1011770 <nrf_802154_rsch_prec_is_approved+0x10>)
 1011762:	5c18      	ldrb	r0, [r3, r0]
 1011764:	4288      	cmp	r0, r1
 1011766:	bf34      	ite	cc
 1011768:	2000      	movcc	r0, #0
 101176a:	2001      	movcs	r0, #1
 101176c:	4770      	bx	lr
 101176e:	bf00      	nop
 1011770:	21004545 	.word	0x21004545

01011774 <nrf_raal_timeslot_started>:
 1011774:	b508      	push	{r3, lr}
 1011776:	f000 fb35 	bl	1011de4 <nrf_802154_wifi_coex_on_raal_timeslot_started>
 101177a:	2204      	movs	r2, #4
 101177c:	4b04      	ldr	r3, [pc, #16]	; (1011790 <nrf_raal_timeslot_started+0x1c>)
 101177e:	705a      	strb	r2, [r3, #1]
 1011780:	f7ff fe40 	bl	1011404 <all_prec_update>
 1011784:	f7ff ff1a 	bl	10115bc <notify_core>
 1011788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 101178c:	f7ff be3a 	b.w	1011404 <all_prec_update>
 1011790:	21004545 	.word	0x21004545

01011794 <nrf_raal_timeslot_ended>:
 1011794:	2201      	movs	r2, #1
 1011796:	b508      	push	{r3, lr}
 1011798:	4b05      	ldr	r3, [pc, #20]	; (10117b0 <nrf_raal_timeslot_ended+0x1c>)
 101179a:	701a      	strb	r2, [r3, #0]
 101179c:	f003 fdb6 	bl	101530c <nrf_802154_wifi_coex_on_raal_timeslot_ended>
 10117a0:	2200      	movs	r2, #0
 10117a2:	4b04      	ldr	r3, [pc, #16]	; (10117b4 <nrf_raal_timeslot_ended+0x20>)
 10117a4:	705a      	strb	r2, [r3, #1]
 10117a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 10117aa:	f7ff bf07 	b.w	10115bc <notify_core>
 10117ae:	bf00      	nop
 10117b0:	21004542 	.word	0x21004542
 10117b4:	21004545 	.word	0x21004545

010117b8 <nrf_802154_clock_hfclk_ready>:
 10117b8:	2204      	movs	r2, #4
 10117ba:	b508      	push	{r3, lr}
 10117bc:	4b03      	ldr	r3, [pc, #12]	; (10117cc <nrf_802154_clock_hfclk_ready+0x14>)
 10117be:	701a      	strb	r2, [r3, #0]
 10117c0:	f7ff fe20 	bl	1011404 <all_prec_update>
 10117c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 10117c8:	f7ff bef8 	b.w	10115bc <notify_core>
 10117cc:	21004545 	.word	0x21004545

010117d0 <nrf_802154_wifi_coex_granted>:
 10117d0:	2204      	movs	r2, #4
 10117d2:	b508      	push	{r3, lr}
 10117d4:	4b03      	ldr	r3, [pc, #12]	; (10117e4 <nrf_802154_wifi_coex_granted+0x14>)
 10117d6:	709a      	strb	r2, [r3, #2]
 10117d8:	f7ff fe14 	bl	1011404 <all_prec_update>
 10117dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 10117e0:	f7ff beec 	b.w	10115bc <notify_core>
 10117e4:	21004545 	.word	0x21004545

010117e8 <nrf_802154_wifi_coex_denied>:
 10117e8:	2202      	movs	r2, #2
 10117ea:	b508      	push	{r3, lr}
 10117ec:	4b03      	ldr	r3, [pc, #12]	; (10117fc <nrf_802154_wifi_coex_denied+0x14>)
 10117ee:	709a      	strb	r2, [r3, #2]
 10117f0:	f7ff fe08 	bl	1011404 <all_prec_update>
 10117f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 10117f8:	f7ff bee0 	b.w	10115bc <notify_core>
 10117fc:	21004545 	.word	0x21004545

01011800 <nrf_802154_rsch_crit_sect_init>:
 1011800:	22ff      	movs	r2, #255	; 0xff
 1011802:	4b01      	ldr	r3, [pc, #4]	; (1011808 <nrf_802154_rsch_crit_sect_init+0x8>)
 1011804:	701a      	strb	r2, [r3, #0]
 1011806:	4770      	bx	lr
 1011808:	21004549 	.word	0x21004549

0101180c <nrf_802154_rsch_continuous_prio_changed>:
 101180c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 101180e:	4d11      	ldr	r5, [pc, #68]	; (1011854 <nrf_802154_rsch_continuous_prio_changed+0x48>)
 1011810:	4604      	mov	r4, r0
 1011812:	682b      	ldr	r3, [r5, #0]
 1011814:	681b      	ldr	r3, [r3, #0]
 1011816:	4798      	blx	r3
 1011818:	4b0f      	ldr	r3, [pc, #60]	; (1011858 <nrf_802154_rsch_continuous_prio_changed+0x4c>)
 101181a:	b158      	cbz	r0, 1011834 <nrf_802154_rsch_continuous_prio_changed+0x28>
 101181c:	781a      	ldrb	r2, [r3, #0]
 101181e:	2aff      	cmp	r2, #255	; 0xff
 1011820:	d108      	bne.n	1011834 <nrf_802154_rsch_continuous_prio_changed+0x28>
 1011822:	4620      	mov	r0, r4
 1011824:	f7f7 fc46 	bl	10090b4 <nrf_802154_rsch_crit_sect_prio_changed>
 1011828:	682b      	ldr	r3, [r5, #0]
 101182a:	685b      	ldr	r3, [r3, #4]
 101182c:	b003      	add	sp, #12
 101182e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 1011832:	4718      	bx	r3
 1011834:	e8d3 2f4f 	ldrexb	r2, [r3]
 1011838:	b2d2      	uxtb	r2, r2
 101183a:	f88d 2007 	strb.w	r2, [sp, #7]
 101183e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 1011842:	e8c3 4f42 	strexb	r2, r4, [r3]
 1011846:	2a00      	cmp	r2, #0
 1011848:	d1f4      	bne.n	1011834 <nrf_802154_rsch_continuous_prio_changed+0x28>
 101184a:	2800      	cmp	r0, #0
 101184c:	d1ec      	bne.n	1011828 <nrf_802154_rsch_continuous_prio_changed+0x1c>
 101184e:	b003      	add	sp, #12
 1011850:	bd30      	pop	{r4, r5, pc}
 1011852:	bf00      	nop
 1011854:	21003a78 	.word	0x21003a78
 1011858:	21004549 	.word	0x21004549

0101185c <nrf_802154_critical_section_rsch_process_pending>:
 101185c:	23ff      	movs	r3, #255	; 0xff
 101185e:	4a06      	ldr	r2, [pc, #24]	; (1011878 <nrf_802154_critical_section_rsch_process_pending+0x1c>)
 1011860:	e8d2 0f4f 	ldrexb	r0, [r2]
 1011864:	e8c2 3f41 	strexb	r1, r3, [r2]
 1011868:	2900      	cmp	r1, #0
 101186a:	d1f9      	bne.n	1011860 <nrf_802154_critical_section_rsch_process_pending+0x4>
 101186c:	b2c0      	uxtb	r0, r0
 101186e:	28ff      	cmp	r0, #255	; 0xff
 1011870:	d001      	beq.n	1011876 <nrf_802154_critical_section_rsch_process_pending+0x1a>
 1011872:	f7f7 bc1f 	b.w	10090b4 <nrf_802154_rsch_crit_sect_prio_changed>
 1011876:	4770      	bx	lr
 1011878:	21004549 	.word	0x21004549

0101187c <nrf_802154_critical_section_rsch_event_is_pending>:
 101187c:	4b02      	ldr	r3, [pc, #8]	; (1011888 <nrf_802154_critical_section_rsch_event_is_pending+0xc>)
 101187e:	7818      	ldrb	r0, [r3, #0]
 1011880:	38ff      	subs	r0, #255	; 0xff
 1011882:	bf18      	it	ne
 1011884:	2001      	movne	r0, #1
 1011886:	4770      	bx	lr
 1011888:	21004549 	.word	0x21004549

0101188c <lptimer_schedule_at_head.constprop.0>:
 101188c:	b538      	push	{r3, r4, r5, lr}
 101188e:	4c0c      	ldr	r4, [pc, #48]	; (10118c0 <lptimer_schedule_at_head.constprop.0+0x34>)
 1011890:	f1a4 0508 	sub.w	r5, r4, #8
 1011894:	4620      	mov	r0, r4
 1011896:	f003 fdaf 	bl	10153f8 <nrf_802154_sl_mutex_try_acquire>
 101189a:	b160      	cbz	r0, 10118b6 <lptimer_schedule_at_head.constprop.0+0x2a>
 101189c:	4628      	mov	r0, r5
 101189e:	f003 fda6 	bl	10153ee <nrf_802154_sl_atomic_list_head_peek>
 10118a2:	b148      	cbz	r0, 10118b8 <lptimer_schedule_at_head.constprop.0+0x2c>
 10118a4:	e9d0 0100 	ldrd	r0, r1, [r0]
 10118a8:	f7f6 fd9e 	bl	10083e8 <nrf_802154_platform_sl_lptimer_schedule_at>
 10118ac:	4620      	mov	r0, r4
 10118ae:	f003 fdb2 	bl	1015416 <nrf_802154_sl_mutex_release>
 10118b2:	2800      	cmp	r0, #0
 10118b4:	d1ee      	bne.n	1011894 <lptimer_schedule_at_head.constprop.0+0x8>
 10118b6:	bd38      	pop	{r3, r4, r5, pc}
 10118b8:	f7f6 fd9e 	bl	10083f8 <nrf_802154_platform_sl_lptimer_disable>
 10118bc:	e7f6      	b.n	10118ac <lptimer_schedule_at_head.constprop.0+0x20>
 10118be:	bf00      	nop
 10118c0:	21003a9c 	.word	0x21003a9c

010118c4 <nrf_802154_sl_timer_module_init>:
 10118c4:	b510      	push	{r4, lr}
 10118c6:	4c06      	ldr	r4, [pc, #24]	; (10118e0 <nrf_802154_sl_timer_module_init+0x1c>)
 10118c8:	4620      	mov	r0, r4
 10118ca:	f003 fd21 	bl	1015310 <nrf_802154_sl_atomic_list_init>
 10118ce:	f104 0008 	add.w	r0, r4, #8
 10118d2:	f003 fd8e 	bl	10153f2 <nrf_802154_sl_mutex_init>
 10118d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 10118da:	f7f6 bd5f 	b.w	100839c <nrf_802154_platform_sl_lp_timer_init>
 10118de:	bf00      	nop
 10118e0:	21003a94 	.word	0x21003a94

010118e4 <nrf_802154_sl_timer_add>:
 10118e4:	b510      	push	{r4, lr}
 10118e6:	4604      	mov	r4, r0
 10118e8:	b1a0      	cbz	r0, 1011914 <nrf_802154_sl_timer_add+0x30>
 10118ea:	7f02      	ldrb	r2, [r0, #28]
 10118ec:	2a01      	cmp	r2, #1
 10118ee:	d111      	bne.n	1011914 <nrf_802154_sl_timer_add+0x30>
 10118f0:	6a03      	ldr	r3, [r0, #32]
 10118f2:	b18b      	cbz	r3, 1011918 <nrf_802154_sl_timer_add+0x34>
 10118f4:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 10118f8:	f001 faac 	bl	1012e54 <nrf_802154_platform_sl_lptimer_us_to_lpticks_convert>
 10118fc:	2208      	movs	r2, #8
 10118fe:	e9c4 0100 	strd	r0, r1, [r4]
 1011902:	4b06      	ldr	r3, [pc, #24]	; (101191c <nrf_802154_sl_timer_add+0x38>)
 1011904:	4806      	ldr	r0, [pc, #24]	; (1011920 <nrf_802154_sl_timer_add+0x3c>)
 1011906:	4621      	mov	r1, r4
 1011908:	f003 fd06 	bl	1015318 <nrf_802154_sl_atomic_list_insert_ordered>
 101190c:	f7ff ffbe 	bl	101188c <lptimer_schedule_at_head.constprop.0>
 1011910:	2000      	movs	r0, #0
 1011912:	bd10      	pop	{r4, pc}
 1011914:	2001      	movs	r0, #1
 1011916:	e7fc      	b.n	1011912 <nrf_802154_sl_timer_add+0x2e>
 1011918:	4610      	mov	r0, r2
 101191a:	e7fa      	b.n	1011912 <nrf_802154_sl_timer_add+0x2e>
 101191c:	010152bf 	.word	0x010152bf
 1011920:	21003a94 	.word	0x21003a94

01011924 <nrf_802154_sl_timer_remove>:
 1011924:	4601      	mov	r1, r0
 1011926:	b508      	push	{r3, lr}
 1011928:	b140      	cbz	r0, 101193c <nrf_802154_sl_timer_remove+0x18>
 101192a:	2208      	movs	r2, #8
 101192c:	4805      	ldr	r0, [pc, #20]	; (1011944 <nrf_802154_sl_timer_remove+0x20>)
 101192e:	f003 fd1b 	bl	1015368 <nrf_802154_sl_atomic_list_remove>
 1011932:	b128      	cbz	r0, 1011940 <nrf_802154_sl_timer_remove+0x1c>
 1011934:	f7ff ffaa 	bl	101188c <lptimer_schedule_at_head.constprop.0>
 1011938:	2000      	movs	r0, #0
 101193a:	bd08      	pop	{r3, pc}
 101193c:	2001      	movs	r0, #1
 101193e:	e7fc      	b.n	101193a <nrf_802154_sl_timer_remove+0x16>
 1011940:	2004      	movs	r0, #4
 1011942:	e7fa      	b.n	101193a <nrf_802154_sl_timer_remove+0x16>
 1011944:	21003a94 	.word	0x21003a94

01011948 <nrf_802154_sl_timer_handler>:
 1011948:	b513      	push	{r0, r1, r4, lr}
 101194a:	4a0a      	ldr	r2, [pc, #40]	; (1011974 <nrf_802154_sl_timer_handler+0x2c>)
 101194c:	e9cd 0100 	strd	r0, r1, [sp]
 1011950:	466b      	mov	r3, sp
 1011952:	2108      	movs	r1, #8
 1011954:	4808      	ldr	r0, [pc, #32]	; (1011978 <nrf_802154_sl_timer_handler+0x30>)
 1011956:	f003 fd27 	bl	10153a8 <nrf_802154_sl_atomic_list_remove_head_if_criteria_met>
 101195a:	4604      	mov	r4, r0
 101195c:	f7ff ff96 	bl	101188c <lptimer_schedule_at_head.constprop.0>
 1011960:	b12c      	cbz	r4, 101196e <nrf_802154_sl_timer_handler+0x26>
 1011962:	7f23      	ldrb	r3, [r4, #28]
 1011964:	07db      	lsls	r3, r3, #31
 1011966:	d502      	bpl.n	101196e <nrf_802154_sl_timer_handler+0x26>
 1011968:	4620      	mov	r0, r4
 101196a:	6a23      	ldr	r3, [r4, #32]
 101196c:	4798      	blx	r3
 101196e:	b002      	add	sp, #8
 1011970:	bd10      	pop	{r4, pc}
 1011972:	bf00      	nop
 1011974:	010152e3 	.word	0x010152e3
 1011978:	21003a94 	.word	0x21003a94

0101197c <NRF_802154_SL_US_TO_RTC_TICKS>:
 101197c:	f643 5c09 	movw	ip, #15625	; 0x3d09
 1011980:	b5f0      	push	{r4, r5, r6, r7, lr}
 1011982:	0b43      	lsrs	r3, r0, #13
 1011984:	4d15      	ldr	r5, [pc, #84]	; (10119dc <NRF_802154_SL_US_TO_RTC_TICKS+0x60>)
 1011986:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 101198a:	fba3 3405 	umull	r3, r4, r3, r5
 101198e:	0b4e      	lsrs	r6, r1, #13
 1011990:	fb05 4406 	mla	r4, r5, r6, r4
 1011994:	0f1b      	lsrs	r3, r3, #28
 1011996:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 101199a:	0f24      	lsrs	r4, r4, #28
 101199c:	0265      	lsls	r5, r4, #9
 101199e:	ea45 55d3 	orr.w	r5, r5, r3, lsr #23
 10119a2:	025e      	lsls	r6, r3, #9
 10119a4:	fba3 370c 	umull	r3, r7, r3, ip
 10119a8:	fb0c 7404 	mla	r4, ip, r4, r7
 10119ac:	1ac0      	subs	r0, r0, r3
 10119ae:	eb61 0404 	sbc.w	r4, r1, r4
 10119b2:	f240 4131 	movw	r1, #1073	; 0x431
 10119b6:	4341      	muls	r1, r0
 10119b8:	4b09      	ldr	r3, [pc, #36]	; (10119e0 <NRF_802154_SL_US_TO_RTC_TICKS+0x64>)
 10119ba:	fb03 1104 	mla	r1, r3, r4, r1
 10119be:	fba0 0303 	umull	r0, r3, r0, r3
 10119c2:	440b      	add	r3, r1
 10119c4:	b122      	cbz	r2, 10119d0 <NRF_802154_SL_US_TO_RTC_TICKS+0x54>
 10119c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 10119ca:	3801      	subs	r0, #1
 10119cc:	eb43 0302 	adc.w	r3, r3, r2
 10119d0:	0bdb      	lsrs	r3, r3, #15
 10119d2:	1998      	adds	r0, r3, r6
 10119d4:	f145 0100 	adc.w	r1, r5, #0
 10119d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10119da:	bf00      	nop
 10119dc:	08637bd0 	.word	0x08637bd0
 10119e0:	bde82d7b 	.word	0xbde82d7b

010119e4 <sync_hardware_reset>:
 10119e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 10119e8:	4b06      	ldr	r3, [pc, #24]	; (1011a04 <sync_hardware_reset+0x20>)
 10119ea:	b510      	push	{r4, lr}
 10119ec:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 10119f0:	f7f6 fc94 	bl	100831c <nrf_802154_hp_timer_sync_task_get>
 10119f4:	2400      	movs	r4, #0
 10119f6:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 10119fa:	f7f6 fd5b 	bl	10084b4 <nrf_802154_platform_sl_lptimer_sync_event_get>
 10119fe:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 1011a02:	bd10      	pop	{r4, pc}
 1011a04:	4100f000 	.word	0x4100f000

01011a08 <timestamp_hardware_reset>:
 1011a08:	b508      	push	{r3, lr}
 1011a0a:	4b0e      	ldr	r3, [pc, #56]	; (1011a44 <timestamp_hardware_reset+0x3c>)
 1011a0c:	791a      	ldrb	r2, [r3, #4]
 1011a0e:	b192      	cbz	r2, 1011a36 <timestamp_hardware_reset+0x2e>
 1011a10:	2200      	movs	r2, #0
 1011a12:	4b0d      	ldr	r3, [pc, #52]	; (1011a48 <timestamp_hardware_reset+0x40>)
 1011a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 1011a18:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 1011a1c:	f7f6 fca2 	bl	1008364 <nrf_802154_hp_timer_timestamp_task_get>
 1011a20:	2200      	movs	r2, #0
 1011a22:	4b0a      	ldr	r3, [pc, #40]	; (1011a4c <timestamp_hardware_reset+0x44>)
 1011a24:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 1011a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 1011a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 1011a30:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 1011a34:	bd08      	pop	{r3, pc}
 1011a36:	681b      	ldr	r3, [r3, #0]
 1011a38:	2b00      	cmp	r3, #0
 1011a3a:	d0ef      	beq.n	1011a1c <timestamp_hardware_reset+0x14>
 1011a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 1011a40:	e7ec      	b.n	1011a1c <timestamp_hardware_reset+0x14>
 1011a42:	bf00      	nop
 1011a44:	21003aa0 	.word	0x21003aa0
 1011a48:	41014000 	.word	0x41014000
 1011a4c:	4100f000 	.word	0x4100f000

01011a50 <nrf_802154_timer_coord_init>:
 1011a50:	b508      	push	{r3, lr}
 1011a52:	2300      	movs	r3, #0
 1011a54:	4a07      	ldr	r2, [pc, #28]	; (1011a74 <nrf_802154_timer_coord_init+0x24>)
 1011a56:	7013      	strb	r3, [r2, #0]
 1011a58:	4a07      	ldr	r2, [pc, #28]	; (1011a78 <nrf_802154_timer_coord_init+0x28>)
 1011a5a:	6013      	str	r3, [r2, #0]
 1011a5c:	4a07      	ldr	r2, [pc, #28]	; (1011a7c <nrf_802154_timer_coord_init+0x2c>)
 1011a5e:	7013      	strb	r3, [r2, #0]
 1011a60:	f7f6 fc3c 	bl	10082dc <nrf_802154_hp_timer_init>
 1011a64:	4a06      	ldr	r2, [pc, #24]	; (1011a80 <nrf_802154_timer_coord_init+0x30>)
 1011a66:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 1011a6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 1011a6e:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 1011a72:	bd08      	pop	{r3, pc}
 1011a74:	2100454c 	.word	0x2100454c
 1011a78:	21003aa8 	.word	0x21003aa8
 1011a7c:	2100454a 	.word	0x2100454a
 1011a80:	4100f000 	.word	0x4100f000

01011a84 <nrf_802154_timer_coord_start>:
 1011a84:	b510      	push	{r4, lr}
 1011a86:	f7f6 fd15 	bl	10084b4 <nrf_802154_platform_sl_lptimer_sync_event_get>
 1011a8a:	4604      	mov	r4, r0
 1011a8c:	f7f6 fc46 	bl	100831c <nrf_802154_hp_timer_sync_task_get>
 1011a90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 1011a94:	4b0a      	ldr	r3, [pc, #40]	; (1011ac0 <nrf_802154_timer_coord_start+0x3c>)
 1011a96:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 1011a9a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 1011a9e:	4b09      	ldr	r3, [pc, #36]	; (1011ac4 <nrf_802154_timer_coord_start+0x40>)
 1011aa0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
 1011aa4:	2200      	movs	r2, #0
 1011aa6:	4b08      	ldr	r3, [pc, #32]	; (1011ac8 <nrf_802154_timer_coord_start+0x44>)
 1011aa8:	701a      	strb	r2, [r3, #0]
 1011aaa:	f7f6 fc2b 	bl	1008304 <nrf_802154_hp_timer_start>
 1011aae:	f7f6 fc39 	bl	1008324 <nrf_802154_hp_timer_sync_prepare>
 1011ab2:	f7f6 fce3 	bl	100847c <nrf_802154_platform_sl_lptimer_sync_schedule_now>
 1011ab6:	2201      	movs	r2, #1
 1011ab8:	4b04      	ldr	r3, [pc, #16]	; (1011acc <nrf_802154_timer_coord_start+0x48>)
 1011aba:	701a      	strb	r2, [r3, #0]
 1011abc:	bd10      	pop	{r4, pc}
 1011abe:	bf00      	nop
 1011ac0:	8000000d 	.word	0x8000000d
 1011ac4:	4100f000 	.word	0x4100f000
 1011ac8:	2100454b 	.word	0x2100454b
 1011acc:	2100454c 	.word	0x2100454c

01011ad0 <nrf_802154_timer_coord_stop>:
 1011ad0:	2200      	movs	r2, #0
 1011ad2:	b508      	push	{r3, lr}
 1011ad4:	4b05      	ldr	r3, [pc, #20]	; (1011aec <nrf_802154_timer_coord_stop+0x1c>)
 1011ad6:	701a      	strb	r2, [r3, #0]
 1011ad8:	f7f6 fc1a 	bl	1008310 <nrf_802154_hp_timer_stop>
 1011adc:	f7f6 fce4 	bl	10084a8 <nrf_802154_platform_sl_lptimer_sync_abort>
 1011ae0:	f7ff ff92 	bl	1011a08 <timestamp_hardware_reset>
 1011ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1011ae8:	f7ff bf7c 	b.w	10119e4 <sync_hardware_reset>
 1011aec:	2100454c 	.word	0x2100454c

01011af0 <nrf_802154_timer_coord_timestamp_prepare>:
 1011af0:	b508      	push	{r3, lr}
 1011af2:	4603      	mov	r3, r0
 1011af4:	4a0f      	ldr	r2, [pc, #60]	; (1011b34 <nrf_802154_timer_coord_timestamp_prepare+0x44>)
 1011af6:	6859      	ldr	r1, [r3, #4]
 1011af8:	6800      	ldr	r0, [r0, #0]
 1011afa:	c203      	stmia	r2!, {r0, r1}
 1011afc:	7919      	ldrb	r1, [r3, #4]
 1011afe:	4a0e      	ldr	r2, [pc, #56]	; (1011b38 <nrf_802154_timer_coord_timestamp_prepare+0x48>)
 1011b00:	b1a1      	cbz	r1, 1011b2c <nrf_802154_timer_coord_timestamp_prepare+0x3c>
 1011b02:	781b      	ldrb	r3, [r3, #0]
 1011b04:	490d      	ldr	r1, [pc, #52]	; (1011b3c <nrf_802154_timer_coord_timestamp_prepare+0x4c>)
 1011b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 1011b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 1011b0e:	f8c1 2190 	str.w	r2, [r1, #400]	; 0x190
 1011b12:	f7f6 fc27 	bl	1008364 <nrf_802154_hp_timer_timestamp_task_get>
 1011b16:	4a08      	ldr	r2, [pc, #32]	; (1011b38 <nrf_802154_timer_coord_timestamp_prepare+0x48>)
 1011b18:	4b09      	ldr	r3, [pc, #36]	; (1011b40 <nrf_802154_timer_coord_timestamp_prepare+0x50>)
 1011b1a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 1011b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 1011b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 1011b26:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
 1011b2a:	bd08      	pop	{r3, pc}
 1011b2c:	681b      	ldr	r3, [r3, #0]
 1011b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 1011b32:	e7ee      	b.n	1011b12 <nrf_802154_timer_coord_timestamp_prepare+0x22>
 1011b34:	21003aa0 	.word	0x21003aa0
 1011b38:	8000000b 	.word	0x8000000b
 1011b3c:	41014000 	.word	0x41014000
 1011b40:	4100f000 	.word	0x4100f000

01011b44 <nrf_802154_timer_coord_timestamp_get>:
 1011b44:	4b27      	ldr	r3, [pc, #156]	; (1011be4 <nrf_802154_timer_coord_timestamp_get+0xa0>)
 1011b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1011b4a:	781b      	ldrb	r3, [r3, #0]
 1011b4c:	4606      	mov	r6, r0
 1011b4e:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 1011b52:	2b00      	cmp	r3, #0
 1011b54:	d037      	beq.n	1011bc6 <nrf_802154_timer_coord_timestamp_get+0x82>
 1011b56:	f7f6 fc09 	bl	100836c <nrf_802154_hp_timer_timestamp_get>
 1011b5a:	4f23      	ldr	r7, [pc, #140]	; (1011be8 <nrf_802154_timer_coord_timestamp_get+0xa4>)
 1011b5c:	68bb      	ldr	r3, [r7, #8]
 1011b5e:	1ac5      	subs	r5, r0, r3
 1011b60:	4b22      	ldr	r3, [pc, #136]	; (1011bec <nrf_802154_timer_coord_timestamp_get+0xa8>)
 1011b62:	7818      	ldrb	r0, [r3, #0]
 1011b64:	b328      	cbz	r0, 1011bb2 <nrf_802154_timer_coord_timestamp_get+0x6e>
 1011b66:	4b22      	ldr	r3, [pc, #136]	; (1011bf0 <nrf_802154_timer_coord_timestamp_get+0xac>)
 1011b68:	6819      	ldr	r1, [r3, #0]
 1011b6a:	fba5 ec01 	umull	lr, ip, r5, r1
 1011b6e:	17cb      	asrs	r3, r1, #31
 1011b70:	f511 0280 	adds.w	r2, r1, #4194304	; 0x400000
 1011b74:	fb05 cc03 	mla	ip, r5, r3, ip
 1011b78:	f143 0300 	adc.w	r3, r3, #0
 1011b7c:	f511 0f80 	cmn.w	r1, #4194304	; 0x400000
 1011b80:	bfac      	ite	ge
 1011b82:	2100      	movge	r1, #0
 1011b84:	2101      	movlt	r1, #1
 1011b86:	ebb1 7fdc 	cmp.w	r1, ip, lsr #31
 1011b8a:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 1011b8e:	d01d      	beq.n	1011bcc <nrf_802154_timer_coord_timestamp_get+0x88>
 1011b90:	18a4      	adds	r4, r4, r2
 1011b92:	f143 0100 	adc.w	r1, r3, #0
 1011b96:	0864      	lsrs	r4, r4, #1
 1011b98:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
 1011b9c:	4264      	negs	r4, r4
 1011b9e:	ea4f 0161 	mov.w	r1, r1, asr #1
 1011ba2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 1011ba6:	eb14 000e 	adds.w	r0, r4, lr
 1011baa:	eb4c 0101 	adc.w	r1, ip, r1
 1011bae:	f7ee fa83 	bl	10000b8 <__aeabi_ldivmod>
 1011bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 1011bb6:	18ad      	adds	r5, r5, r2
 1011bb8:	f143 0300 	adc.w	r3, r3, #0
 1011bbc:	1a2d      	subs	r5, r5, r0
 1011bbe:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 1011bc2:	e9c6 5300 	strd	r5, r3, [r6]
 1011bc6:	4640      	mov	r0, r8
 1011bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1011bcc:	18a4      	adds	r4, r4, r2
 1011bce:	f143 0100 	adc.w	r1, r3, #0
 1011bd2:	0864      	lsrs	r4, r4, #1
 1011bd4:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
 1011bd8:	eb14 000e 	adds.w	r0, r4, lr
 1011bdc:	eb4c 0161 	adc.w	r1, ip, r1, asr #1
 1011be0:	e7e5      	b.n	1011bae <nrf_802154_timer_coord_timestamp_get+0x6a>
 1011be2:	bf00      	nop
 1011be4:	2100454b 	.word	0x2100454b
 1011be8:	210019f8 	.word	0x210019f8
 1011bec:	2100454a 	.word	0x2100454a
 1011bf0:	21003aa8 	.word	0x21003aa8

01011bf4 <nrf_802154_sl_timestamper_synchronized>:
 1011bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 1011bf8:	466d      	mov	r5, sp
 1011bfa:	2210      	movs	r2, #16
 1011bfc:	2100      	movs	r1, #0
 1011bfe:	4628      	mov	r0, r5
 1011c00:	f000 ff07 	bl	1012a12 <memset>
 1011c04:	4b40      	ldr	r3, [pc, #256]	; (1011d08 <nrf_802154_sl_timestamper_synchronized+0x114>)
 1011c06:	781b      	ldrb	r3, [r3, #0]
 1011c08:	2b00      	cmp	r3, #0
 1011c0a:	d077      	beq.n	1011cfc <nrf_802154_sl_timestamper_synchronized+0x108>
 1011c0c:	a802      	add	r0, sp, #8
 1011c0e:	f7f6 fb99 	bl	1008344 <nrf_802154_hp_timer_sync_time_get>
 1011c12:	2800      	cmp	r0, #0
 1011c14:	d075      	beq.n	1011d02 <nrf_802154_sl_timestamper_synchronized+0x10e>
 1011c16:	4e3d      	ldr	r6, [pc, #244]	; (1011d0c <nrf_802154_sl_timestamper_synchronized+0x118>)
 1011c18:	4c3d      	ldr	r4, [pc, #244]	; (1011d10 <nrf_802154_sl_timestamper_synchronized+0x11c>)
 1011c1a:	7833      	ldrb	r3, [r6, #0]
 1011c1c:	2b00      	cmp	r3, #0
 1011c1e:	bf0c      	ite	eq
 1011c20:	f44f 0780 	moveq.w	r7, #4194304	; 0x400000
 1011c24:	f04f 7780 	movne.w	r7, #16777216	; 0x1000000
 1011c28:	f7f6 fc4a 	bl	10084c0 <nrf_802154_platform_sl_lptimer_sync_lpticks_get>
 1011c2c:	f001 f914 	bl	1012e58 <nrf_802154_platform_sl_lptimer_lpticks_to_us_convert>
 1011c30:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 1011d14 <nrf_802154_sl_timestamper_synchronized+0x120>
 1011c34:	e9cd 0100 	strd	r0, r1, [sp]
 1011c38:	f89c 3000 	ldrb.w	r3, [ip]
 1011c3c:	b32b      	cbz	r3, 1011c8a <nrf_802154_sl_timestamper_synchronized+0x96>
 1011c3e:	6822      	ldr	r2, [r4, #0]
 1011c40:	68a1      	ldr	r1, [r4, #8]
 1011c42:	f5c2 1e00 	rsb	lr, r2, #2097152	; 0x200000
 1011c46:	1a52      	subs	r2, r2, r1
 1011c48:	9902      	ldr	r1, [sp, #8]
 1011c4a:	4486      	add	lr, r0
 1011c4c:	440a      	add	r2, r1
 1011c4e:	1a10      	subs	r0, r2, r0
 1011c50:	ea90 529e 	eors.w	r2, r0, lr, lsr #22
 1011c54:	ea4f 539e 	mov.w	r3, lr, lsr #22
 1011c58:	ea4f 5ede 	mov.w	lr, lr, lsr #23
 1011c5c:	bf4b      	itete	mi
 1011c5e:	eba0 000e 	submi.w	r0, r0, lr
 1011c62:	4486      	addpl	lr, r0
 1011c64:	fb90 f0f3 	sdivmi	r0, r0, r3
 1011c68:	fb9e f0f3 	sdivpl	r0, lr, r3
 1011c6c:	7833      	ldrb	r3, [r6, #0]
 1011c6e:	4a2a      	ldr	r2, [pc, #168]	; (1011d18 <nrf_802154_sl_timestamper_synchronized+0x124>)
 1011c70:	b143      	cbz	r3, 1011c84 <nrf_802154_sl_timestamper_synchronized+0x90>
 1011c72:	6813      	ldr	r3, [r2, #0]
 1011c74:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 1011c78:	1818      	adds	r0, r3, r0
 1011c7a:	d52b      	bpl.n	1011cd4 <nrf_802154_sl_timestamper_synchronized+0xe0>
 1011c7c:	1f03      	subs	r3, r0, #4
 1011c7e:	bf48      	it	mi
 1011c80:	1cc3      	addmi	r3, r0, #3
 1011c82:	10d8      	asrs	r0, r3, #3
 1011c84:	2301      	movs	r3, #1
 1011c86:	6010      	str	r0, [r2, #0]
 1011c88:	7033      	strb	r3, [r6, #0]
 1011c8a:	f04f 0800 	mov.w	r8, #0
 1011c8e:	f88c 8000 	strb.w	r8, [ip]
 1011c92:	f3bf 8f5f 	dmb	sy
 1011c96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 1011c9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 1011c9e:	f3bf 8f5f 	dmb	sy
 1011ca2:	f04f 0901 	mov.w	r9, #1
 1011ca6:	f88c 9000 	strb.w	r9, [ip]
 1011caa:	f7f6 fb3b 	bl	1008324 <nrf_802154_hp_timer_sync_prepare>
 1011cae:	f003 fb23 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
 1011cb2:	e9d4 3200 	ldrd	r3, r2, [r4]
 1011cb6:	ebb0 0a03 	subs.w	sl, r0, r3
 1011cba:	eb61 0502 	sbc.w	r5, r1, r2
 1011cbe:	f001 f8db 	bl	1012e78 <nrf_802154_platform_sl_lptimer_granularity_get>
 1011cc2:	eba7 0740 	sub.w	r7, r7, r0, lsl #1
 1011cc6:	4557      	cmp	r7, sl
 1011cc8:	eb78 0505 	sbcs.w	r5, r8, r5
 1011ccc:	d205      	bcs.n	1011cda <nrf_802154_sl_timestamper_synchronized+0xe6>
 1011cce:	f7f6 fbd5 	bl	100847c <nrf_802154_platform_sl_lptimer_sync_schedule_now>
 1011cd2:	e013      	b.n	1011cfc <nrf_802154_sl_timestamper_synchronized+0x108>
 1011cd4:	3004      	adds	r0, #4
 1011cd6:	10c0      	asrs	r0, r0, #3
 1011cd8:	e7d4      	b.n	1011c84 <nrf_802154_sl_timestamper_synchronized+0x90>
 1011cda:	7833      	ldrb	r3, [r6, #0]
 1011cdc:	e9d4 0100 	ldrd	r0, r1, [r4]
 1011ce0:	2b00      	cmp	r3, #0
 1011ce2:	bf0c      	ite	eq
 1011ce4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 1011ce8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 1011cec:	18c0      	adds	r0, r0, r3
 1011cee:	464a      	mov	r2, r9
 1011cf0:	f141 0100 	adc.w	r1, r1, #0
 1011cf4:	f001 f8ae 	bl	1012e54 <nrf_802154_platform_sl_lptimer_us_to_lpticks_convert>
 1011cf8:	f7f6 fbce 	bl	1008498 <nrf_802154_platform_sl_lptimer_sync_schedule_at>
 1011cfc:	b004      	add	sp, #16
 1011cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1011d02:	f7f6 fb0f 	bl	1008324 <nrf_802154_hp_timer_sync_prepare>
 1011d06:	e7e2      	b.n	1011cce <nrf_802154_sl_timestamper_synchronized+0xda>
 1011d08:	2100454c 	.word	0x2100454c
 1011d0c:	2100454a 	.word	0x2100454a
 1011d10:	210019f8 	.word	0x210019f8
 1011d14:	2100454b 	.word	0x2100454b
 1011d18:	21003aa8 	.word	0x21003aa8

01011d1c <cb>:
 1011d1c:	2300      	movs	r3, #0
 1011d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 1011d20:	4d13      	ldr	r5, [pc, #76]	; (1011d70 <cb+0x54>)
 1011d22:	4c14      	ldr	r4, [pc, #80]	; (1011d74 <cb+0x58>)
 1011d24:	4e14      	ldr	r6, [pc, #80]	; (1011d78 <cb+0x5c>)
 1011d26:	f88d 3007 	strb.w	r3, [sp, #7]
 1011d2a:	4628      	mov	r0, r5
 1011d2c:	f003 fb64 	bl	10153f8 <nrf_802154_sl_mutex_try_acquire>
 1011d30:	b1a0      	cbz	r0, 1011d5c <cb+0x40>
 1011d32:	f10d 0007 	add.w	r0, sp, #7
 1011d36:	f7f1 fdcf 	bl	10038d8 <mpsl_cx_granted_ops_get>
 1011d3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 1011d3e:	f013 0304 	ands.w	r3, r3, #4
 1011d42:	d00d      	beq.n	1011d60 <cb+0x44>
 1011d44:	7823      	ldrb	r3, [r4, #0]
 1011d46:	b923      	cbnz	r3, 1011d52 <cb+0x36>
 1011d48:	2301      	movs	r3, #1
 1011d4a:	7830      	ldrb	r0, [r6, #0]
 1011d4c:	7023      	strb	r3, [r4, #0]
 1011d4e:	f7ff fd3f 	bl	10117d0 <nrf_802154_wifi_coex_granted>
 1011d52:	4628      	mov	r0, r5
 1011d54:	f003 fb5f 	bl	1015416 <nrf_802154_sl_mutex_release>
 1011d58:	2800      	cmp	r0, #0
 1011d5a:	d1e6      	bne.n	1011d2a <cb+0xe>
 1011d5c:	b002      	add	sp, #8
 1011d5e:	bd70      	pop	{r4, r5, r6, pc}
 1011d60:	7822      	ldrb	r2, [r4, #0]
 1011d62:	2a00      	cmp	r2, #0
 1011d64:	d0f5      	beq.n	1011d52 <cb+0x36>
 1011d66:	7830      	ldrb	r0, [r6, #0]
 1011d68:	7023      	strb	r3, [r4, #0]
 1011d6a:	f7ff fd3d 	bl	10117e8 <nrf_802154_wifi_coex_denied>
 1011d6e:	e7f0      	b.n	1011d52 <cb+0x36>
 1011d70:	21003aac 	.word	0x21003aac
 1011d74:	2100454d 	.word	0x2100454d
 1011d78:	2100454e 	.word	0x2100454e

01011d7c <nrf_802154_wifi_coex_init>:
 1011d7c:	b508      	push	{r3, lr}
 1011d7e:	4803      	ldr	r0, [pc, #12]	; (1011d8c <nrf_802154_wifi_coex_init+0x10>)
 1011d80:	f003 fb37 	bl	10153f2 <nrf_802154_sl_mutex_init>
 1011d84:	2000      	movs	r0, #0
 1011d86:	4b02      	ldr	r3, [pc, #8]	; (1011d90 <nrf_802154_wifi_coex_init+0x14>)
 1011d88:	7018      	strb	r0, [r3, #0]
 1011d8a:	bd08      	pop	{r3, pc}
 1011d8c:	21003aac 	.word	0x21003aac
 1011d90:	2100454d 	.word	0x2100454d

01011d94 <nrf_802154_wifi_coex_prio_request>:
 1011d94:	2803      	cmp	r0, #3
 1011d96:	b507      	push	{r0, r1, r2, lr}
 1011d98:	4a11      	ldr	r2, [pc, #68]	; (1011de0 <nrf_802154_wifi_coex_prio_request+0x4c>)
 1011d9a:	d809      	bhi.n	1011db0 <nrf_802154_wifi_coex_prio_request+0x1c>
 1011d9c:	2801      	cmp	r0, #1
 1011d9e:	d80b      	bhi.n	1011db8 <nrf_802154_wifi_coex_prio_request+0x24>
 1011da0:	d01b      	beq.n	1011dda <nrf_802154_wifi_coex_prio_request+0x46>
 1011da2:	2300      	movs	r3, #0
 1011da4:	7013      	strb	r3, [r2, #0]
 1011da6:	b003      	add	sp, #12
 1011da8:	f85d eb04 	ldr.w	lr, [sp], #4
 1011dac:	f7f1 bd8e 	b.w	10038cc <mpsl_cx_release>
 1011db0:	2804      	cmp	r0, #4
 1011db2:	d1f6      	bne.n	1011da2 <nrf_802154_wifi_coex_prio_request+0xe>
 1011db4:	2302      	movs	r3, #2
 1011db6:	e001      	b.n	1011dbc <nrf_802154_wifi_coex_prio_request+0x28>
 1011db8:	2301      	movs	r3, #1
 1011dba:	2002      	movs	r0, #2
 1011dbc:	7013      	strb	r3, [r2, #0]
 1011dbe:	2301      	movs	r3, #1
 1011dc0:	f88d 3005 	strb.w	r3, [sp, #5]
 1011dc4:	2300      	movs	r3, #0
 1011dc6:	f88d 0004 	strb.w	r0, [sp, #4]
 1011dca:	a801      	add	r0, sp, #4
 1011dcc:	f88d 3006 	strb.w	r3, [sp, #6]
 1011dd0:	f7f1 fd76 	bl	10038c0 <mpsl_cx_request>
 1011dd4:	b003      	add	sp, #12
 1011dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 1011dda:	4603      	mov	r3, r0
 1011ddc:	e7ee      	b.n	1011dbc <nrf_802154_wifi_coex_prio_request+0x28>
 1011dde:	bf00      	nop
 1011de0:	2100454e 	.word	0x2100454e

01011de4 <nrf_802154_wifi_coex_on_raal_timeslot_started>:
 1011de4:	b508      	push	{r3, lr}
 1011de6:	4804      	ldr	r0, [pc, #16]	; (1011df8 <nrf_802154_wifi_coex_on_raal_timeslot_started+0x14>)
 1011de8:	f7f1 fd7c 	bl	10038e4 <mpsl_cx_register_callback>
 1011dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1011df0:	2000      	movs	r0, #0
 1011df2:	f7ff bf93 	b.w	1011d1c <cb>
 1011df6:	bf00      	nop
 1011df8:	01011d1d 	.word	0x01011d1d

01011dfc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 1011dfc:	4770      	bx	lr

01011dfe <nrf_802154_serialization_error>:

void nrf_802154_serialization_error(const nrf_802154_ser_err_data_t *err)
{
	(void)err;
	__ASSERT(false, "802.15.4 serialization error");
}
 1011dfe:	4770      	bx	lr

01011e00 <arch_printk_char_out>:
}
 1011e00:	2000      	movs	r0, #0
 1011e02:	4770      	bx	lr

01011e04 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 1011e04:	b40f      	push	{r0, r1, r2, r3}
 1011e06:	b507      	push	{r0, r1, r2, lr}
 1011e08:	a904      	add	r1, sp, #16
 1011e0a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 1011e0e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 1011e10:	f7f3 fd04 	bl	100581c <vprintk>

	va_end(ap);
}
 1011e14:	b003      	add	sp, #12
 1011e16:	f85d eb04 	ldr.w	lr, [sp], #4
 1011e1a:	b004      	add	sp, #16
 1011e1c:	4770      	bx	lr

01011e1e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 1011e1e:	4604      	mov	r4, r0
 1011e20:	b508      	push	{r3, lr}
 1011e22:	4608      	mov	r0, r1
 1011e24:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 1011e26:	461a      	mov	r2, r3
 1011e28:	47a0      	blx	r4
	return z_impl_z_current_get();
 1011e2a:	f7ff f8c1 	bl	1010fb0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 1011e2e:	f7f5 f80d 	bl	1006e4c <z_impl_k_thread_abort>

01011e32 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 1011e32:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 1011e36:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
 1011e38:	0840      	lsrs	r0, r0, #1
 1011e3a:	4770      	bx	lr

01011e3c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 1011e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1011e3e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 1011e40:	f7ff fff7 	bl	1011e32 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 1011e44:	fab0 f080 	clz	r0, r0
 1011e48:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 1011e4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 1011e50:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
 1011e54:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
 1011e56:	1d17      	adds	r7, r2, #4
{
 1011e58:	460c      	mov	r4, r1
 1011e5a:	3206      	adds	r2, #6
 1011e5c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
 1011e5e:	b956      	cbnz	r6, 1011e76 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 1011e60:	2101      	movs	r1, #1
 1011e62:	fa01 f000 	lsl.w	r0, r1, r0
 1011e66:	68d9      	ldr	r1, [r3, #12]
 1011e68:	4301      	orrs	r1, r0
 1011e6a:	60d9      	str	r1, [r3, #12]
		b->next = c;
 1011e6c:	f8cc 4010 	str.w	r4, [ip, #16]
 1011e70:	53dd      	strh	r5, [r3, r7]
 1011e72:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
 1011e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 1011e76:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 1011e78:	3104      	adds	r1, #4
 1011e7a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 1011e7c:	53d8      	strh	r0, [r3, r7]
 1011e7e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 1011e82:	529e      	strh	r6, [r3, r2]
 1011e84:	80c5      	strh	r5, [r0, #6]
 1011e86:	525d      	strh	r5, [r3, r1]
 1011e88:	e7f4      	b.n	1011e74 <free_list_add+0x38>

01011e8a <free_list_remove_bidx>:
{
 1011e8a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
 1011e8c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 1011e90:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
 1011e92:	4299      	cmp	r1, r3
 1011e94:	f102 0104 	add.w	r1, r2, #4
 1011e98:	d10a      	bne.n	1011eb0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
 1011e9a:	2301      	movs	r3, #1
 1011e9c:	fa03 f202 	lsl.w	r2, r3, r2
 1011ea0:	68c3      	ldr	r3, [r0, #12]
 1011ea2:	ea23 0302 	bic.w	r3, r3, r2
 1011ea6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
 1011ea8:	2300      	movs	r3, #0
 1011eaa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 1011eae:	bd10      	pop	{r4, pc}
 1011eb0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
 1011eb2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
 1011eb6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 1011eba:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 1011ebe:	80cb      	strh	r3, [r1, #6]
 1011ec0:	8082      	strh	r2, [r0, #4]
}
 1011ec2:	e7f4      	b.n	1011eae <free_list_remove_bidx+0x24>

01011ec4 <free_list_remove>:
{
 1011ec4:	b508      	push	{r3, lr}
 1011ec6:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
 1011ec8:	f7ff ffb3 	bl	1011e32 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
 1011ecc:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
 1011ed0:	4618      	mov	r0, r3
}
 1011ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
 1011ed6:	f1c2 021f 	rsb	r2, r2, #31
 1011eda:	f7ff bfd6 	b.w	1011e8a <free_list_remove_bidx>

01011ede <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 1011ede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1011ee2:	fab1 f581 	clz	r5, r1
 1011ee6:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 1011eea:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 1011eee:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
 1011ef2:	4603      	mov	r3, r0
 1011ef4:	460e      	mov	r6, r1
	if (b->next) {
 1011ef6:	b1c2      	cbz	r2, 1011f2a <alloc_chunk+0x4c>
 1011ef8:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
 1011efa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
 1011efe:	4618      	mov	r0, r3
 1011f00:	4621      	mov	r1, r4
 1011f02:	f7ff ff96 	bl	1011e32 <chunk_size>
 1011f06:	42b0      	cmp	r0, r6
 1011f08:	d306      	bcc.n	1011f18 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
 1011f0a:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
 1011f0c:	4618      	mov	r0, r3
 1011f0e:	f7ff ffbc 	bl	1011e8a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 1011f12:	4620      	mov	r0, r4
 1011f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
 1011f18:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 1011f1c:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
 1011f1e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
 1011f20:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
 1011f24:	d001      	beq.n	1011f2a <alloc_chunk+0x4c>
 1011f26:	4282      	cmp	r2, r0
 1011f28:	d1e7      	bne.n	1011efa <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
 1011f2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 1011f2e:	f1c5 0220 	rsb	r2, r5, #32
 1011f32:	4094      	lsls	r4, r2
 1011f34:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
 1011f36:	4014      	ands	r4, r2
 1011f38:	d0eb      	beq.n	1011f12 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
 1011f3a:	fa94 f2a4 	rbit	r2, r4
 1011f3e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 1011f42:	1d11      	adds	r1, r2, #4
 1011f44:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 1011f48:	4621      	mov	r1, r4
 1011f4a:	e7df      	b.n	1011f0c <alloc_chunk+0x2e>

01011f4c <merge_chunks>:
{
 1011f4c:	b538      	push	{r3, r4, r5, lr}
 1011f4e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 1011f50:	f7ff ff6f 	bl	1011e32 <chunk_size>
{
 1011f54:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 1011f56:	4604      	mov	r4, r0
 1011f58:	4611      	mov	r1, r2
 1011f5a:	4618      	mov	r0, r3
 1011f5c:	f7ff ff69 	bl	1011e32 <chunk_size>
 1011f60:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 1011f62:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
 1011f64:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 1011f68:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
 1011f6a:	4618      	mov	r0, r3
 1011f6c:	f7ff ff61 	bl	1011e32 <chunk_size>
	void *cmem = &buf[c];
 1011f70:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
 1011f72:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
 1011f76:	bd38      	pop	{r3, r4, r5, pc}

01011f78 <split_chunks>:
{
 1011f78:	b538      	push	{r3, r4, r5, lr}
 1011f7a:	460c      	mov	r4, r1
 1011f7c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
 1011f7e:	f7ff ff58 	bl	1011e32 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
 1011f82:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
 1011f84:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
 1011f86:	4405      	add	r5, r0
 1011f88:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 1011f8c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
 1011f8e:	8060      	strh	r0, [r4, #2]
 1011f90:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 1011f94:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
 1011f96:	8044      	strh	r4, [r0, #2]
 1011f98:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
 1011f9c:	4618      	mov	r0, r3
 1011f9e:	4611      	mov	r1, r2
 1011fa0:	f7ff ff47 	bl	1011e32 <chunk_size>
	void *cmem = &buf[c];
 1011fa4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
 1011fa6:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
 1011faa:	bd38      	pop	{r3, r4, r5, pc}

01011fac <free_chunk>:
{
 1011fac:	b538      	push	{r3, r4, r5, lr}
 1011fae:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
 1011fb0:	f7ff ff3f 	bl	1011e32 <chunk_size>
 1011fb4:	460c      	mov	r4, r1
 1011fb6:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
 1011fb8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 1011fbc:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
 1011fbe:	07da      	lsls	r2, r3, #31
 1011fc0:	d40a      	bmi.n	1011fd8 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
 1011fc2:	4628      	mov	r0, r5
 1011fc4:	f7ff ff7e 	bl	1011ec4 <free_list_remove>
	return c + chunk_size(h, c);
 1011fc8:	4621      	mov	r1, r4
 1011fca:	4628      	mov	r0, r5
 1011fcc:	f7ff ff31 	bl	1011e32 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
 1011fd0:	1822      	adds	r2, r4, r0
 1011fd2:	4628      	mov	r0, r5
 1011fd4:	f7ff ffba 	bl	1011f4c <merge_chunks>
		return ((uint16_t *)cmem)[f];
 1011fd8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
 1011fdc:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
 1011fde:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 1011fe2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
 1011fe4:	07db      	lsls	r3, r3, #31
 1011fe6:	d40c      	bmi.n	1012002 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
 1011fe8:	4628      	mov	r0, r5
 1011fea:	f7ff ff6b 	bl	1011ec4 <free_list_remove>
		return ((uint16_t *)cmem)[f];
 1011fee:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
 1011ff2:	4622      	mov	r2, r4
 1011ff4:	1a61      	subs	r1, r4, r1
 1011ff6:	4628      	mov	r0, r5
 1011ff8:	f7ff ffa8 	bl	1011f4c <merge_chunks>
 1011ffc:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
 1012000:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
 1012002:	4621      	mov	r1, r4
 1012004:	4628      	mov	r0, r5
}
 1012006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
 101200a:	f7ff bf17 	b.w	1011e3c <free_list_add>

0101200e <sys_heap_free>:
	if (mem == NULL) {
 101200e:	b161      	cbz	r1, 101202a <sys_heap_free+0x1c>
 1012010:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 1012012:	3904      	subs	r1, #4
 1012014:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
 1012016:	f021 0307 	bic.w	r3, r1, #7
 101201a:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 101201c:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
 101201e:	08c9      	lsrs	r1, r1, #3
 1012020:	f022 0201 	bic.w	r2, r2, #1
 1012024:	805a      	strh	r2, [r3, #2]
 1012026:	f7ff bfc1 	b.w	1011fac <free_chunk>
}
 101202a:	4770      	bx	lr

0101202c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 101202c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 101202e:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
 1012030:	b909      	cbnz	r1, 1012036 <sys_heap_alloc+0xa>
		return NULL;
 1012032:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
 1012034:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
 1012036:	68ab      	ldr	r3, [r5, #8]
 1012038:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 101203c:	d9f9      	bls.n	1012032 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 101203e:	310b      	adds	r1, #11
 1012040:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
 1012042:	4621      	mov	r1, r4
 1012044:	4628      	mov	r0, r5
 1012046:	f7ff ff4a 	bl	1011ede <alloc_chunk>
	if (c == 0U) {
 101204a:	4606      	mov	r6, r0
 101204c:	2800      	cmp	r0, #0
 101204e:	d0f0      	beq.n	1012032 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 1012050:	4601      	mov	r1, r0
 1012052:	4628      	mov	r0, r5
 1012054:	f7ff feed 	bl	1011e32 <chunk_size>
 1012058:	42a0      	cmp	r0, r4
 101205a:	d907      	bls.n	101206c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
 101205c:	4628      	mov	r0, r5
 101205e:	1932      	adds	r2, r6, r4
 1012060:	f7ff ff8a 	bl	1011f78 <split_chunks>
		free_list_add(h, c + chunk_sz);
 1012064:	4611      	mov	r1, r2
 1012066:	4628      	mov	r0, r5
 1012068:	f7ff fee8 	bl	1011e3c <free_list_add>
	void *cmem = &buf[c];
 101206c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 1012070:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 1012072:	8853      	ldrh	r3, [r2, #2]
 1012074:	3004      	adds	r0, #4
 1012076:	f043 0301 	orr.w	r3, r3, #1
 101207a:	8053      	strh	r3, [r2, #2]
	return mem;
 101207c:	e7da      	b.n	1012034 <sys_heap_alloc+0x8>

0101207e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 101207e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1012082:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
 1012086:	ea19 0901 	ands.w	r9, r9, r1
{
 101208a:	460f      	mov	r7, r1
 101208c:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
 101208e:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
 1012090:	d00c      	beq.n	10120ac <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
 1012092:	424b      	negs	r3, r1
 1012094:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
 1012096:	2b04      	cmp	r3, #4
 1012098:	461a      	mov	r2, r3
 101209a:	464f      	mov	r7, r9
 101209c:	bf28      	it	cs
 101209e:	2204      	movcs	r2, #4
	rew = align & -align;
 10120a0:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 10120a2:	b964      	cbnz	r4, 10120be <sys_heap_aligned_alloc+0x40>
		return NULL;
 10120a4:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
 10120a6:	4628      	mov	r0, r5
 10120a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
 10120ac:	2904      	cmp	r1, #4
 10120ae:	d804      	bhi.n	10120ba <sys_heap_aligned_alloc+0x3c>
}
 10120b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
 10120b4:	4611      	mov	r1, r2
 10120b6:	f7ff bfb9 	b.w	101202c <sys_heap_alloc>
		gap = chunk_header_bytes(h);
 10120ba:	2204      	movs	r2, #4
 10120bc:	e7f1      	b.n	10120a2 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
 10120be:	68b3      	ldr	r3, [r6, #8]
 10120c0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
 10120c4:	d9ee      	bls.n	10120a4 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 10120c6:	f104 010b 	add.w	r1, r4, #11
 10120ca:	4439      	add	r1, r7
 10120cc:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 10120ce:	4630      	mov	r0, r6
 10120d0:	08c9      	lsrs	r1, r1, #3
 10120d2:	f7ff ff04 	bl	1011ede <alloc_chunk>
	if (c0 == 0) {
 10120d6:	4680      	mov	r8, r0
 10120d8:	2800      	cmp	r0, #0
 10120da:	d0e3      	beq.n	10120a4 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 10120dc:	f109 0504 	add.w	r5, r9, #4
 10120e0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 10120e4:	1e7b      	subs	r3, r7, #1
 10120e6:	4435      	add	r5, r6
 10120e8:	441d      	add	r5, r3
 10120ea:	427f      	negs	r7, r7
 10120ec:	403d      	ands	r5, r7
 10120ee:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 10120f2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 10120f4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 10120f6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 10120f8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 10120fa:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
 10120fe:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
 1012100:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 1012104:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
 1012108:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 101210c:	d208      	bcs.n	1012120 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
 101210e:	4601      	mov	r1, r0
 1012110:	463a      	mov	r2, r7
 1012112:	4630      	mov	r0, r6
 1012114:	f7ff ff30 	bl	1011f78 <split_chunks>
		free_list_add(h, c0);
 1012118:	4641      	mov	r1, r8
 101211a:	4630      	mov	r0, r6
 101211c:	f7ff fe8e 	bl	1011e3c <free_list_add>
	return c + chunk_size(h, c);
 1012120:	4639      	mov	r1, r7
 1012122:	4630      	mov	r0, r6
 1012124:	f7ff fe85 	bl	1011e32 <chunk_size>
 1012128:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 101212a:	4284      	cmp	r4, r0
 101212c:	d207      	bcs.n	101213e <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
 101212e:	4630      	mov	r0, r6
 1012130:	4622      	mov	r2, r4
 1012132:	f7ff ff21 	bl	1011f78 <split_chunks>
		free_list_add(h, c_end);
 1012136:	4621      	mov	r1, r4
 1012138:	4630      	mov	r0, r6
 101213a:	f7ff fe7f 	bl	1011e3c <free_list_add>
	void *cmem = &buf[c];
 101213e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 1012142:	8873      	ldrh	r3, [r6, #2]
 1012144:	f043 0301 	orr.w	r3, r3, #1
 1012148:	8073      	strh	r3, [r6, #2]
 101214a:	e7ac      	b.n	10120a6 <sys_heap_aligned_alloc+0x28>

0101214c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 101214c:	b4f0      	push	{r4, r5, r6, r7}
 101214e:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 1012150:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 1012152:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 1012154:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 1012156:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 101215a:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 101215e:	1a0e      	subs	r6, r1, r0
 1012160:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
 1012162:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 1012166:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 1012168:	2700      	movs	r7, #0
 101216a:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 101216c:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
 1012170:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
 1012172:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 1012174:	3507      	adds	r5, #7
	h->avail_buckets = 0;
 1012176:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 101217a:	f1c2 0220 	rsb	r2, r2, #32
 101217e:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 1012180:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
 1012184:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
 1012188:	4294      	cmp	r4, r2
 101218a:	d1fb      	bne.n	1012184 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 101218c:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 101218e:	f042 0201 	orr.w	r2, r2, #1
 1012192:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 1012194:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 1012196:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
 1012198:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 101219c:	8007      	strh	r7, [r0, #0]
 101219e:	8065      	strh	r5, [r4, #2]
 10121a0:	1984      	adds	r4, r0, r6
 10121a2:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
 10121a6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
 10121aa:	8067      	strh	r7, [r4, #2]
 10121ac:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 10121ae:	885a      	ldrh	r2, [r3, #2]
 10121b0:	f042 0201 	orr.w	r2, r2, #1
 10121b4:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 10121b6:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
 10121b8:	f7ff be40 	b.w	1011e3c <free_list_add>

010121bc <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 10121bc:	2200      	movs	r2, #0
	return list->head;
 10121be:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 10121c0:	b90b      	cbnz	r3, 10121c6 <sys_slist_find_and_remove+0xa>
 10121c2:	4618      	mov	r0, r3
 10121c4:	4770      	bx	lr
 10121c6:	428b      	cmp	r3, r1
 10121c8:	d110      	bne.n	10121ec <sys_slist_find_and_remove+0x30>
	return node->next;
 10121ca:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 10121cc:	b942      	cbnz	r2, 10121e0 <sys_slist_find_and_remove+0x24>
 10121ce:	6842      	ldr	r2, [r0, #4]
	list->head = node;
 10121d0:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 10121d2:	4291      	cmp	r1, r2
 10121d4:	d100      	bne.n	10121d8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
 10121d6:	6043      	str	r3, [r0, #4]
	parent->next = child;
 10121d8:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 10121da:	2001      	movs	r0, #1
	parent->next = child;
 10121dc:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 10121de:	4770      	bx	lr
	parent->next = child;
 10121e0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 10121e2:	6843      	ldr	r3, [r0, #4]
 10121e4:	4299      	cmp	r1, r3
	list->tail = node;
 10121e6:	bf08      	it	eq
 10121e8:	6042      	streq	r2, [r0, #4]
}
 10121ea:	e7f5      	b.n	10121d8 <sys_slist_find_and_remove+0x1c>
	return node->next;
 10121ec:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 10121ee:	681b      	ldr	r3, [r3, #0]
 10121f0:	e7e6      	b.n	10121c0 <sys_slist_find_and_remove+0x4>

010121f2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 10121f2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
 10121f4:	f013 0307 	ands.w	r3, r3, #7
 10121f8:	d105      	bne.n	1012206 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
 10121fa:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
 10121fc:	2b00      	cmp	r3, #0
 10121fe:	bf0c      	ite	eq
 1012200:	2000      	moveq	r0, #0
 1012202:	2003      	movne	r0, #3
 1012204:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
 1012206:	2b02      	cmp	r3, #2
 1012208:	d105      	bne.n	1012216 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
 101220a:	8b40      	ldrh	r0, [r0, #26]
 101220c:	fab0 f080 	clz	r0, r0
 1012210:	0940      	lsrs	r0, r0, #5
 1012212:	0080      	lsls	r0, r0, #2
 1012214:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
 1012216:	2b01      	cmp	r3, #1
 1012218:	d105      	bne.n	1012226 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
 101221a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
 101221c:	2b00      	cmp	r3, #0
 101221e:	bf0c      	ite	eq
 1012220:	2000      	moveq	r0, #0
 1012222:	2005      	movne	r0, #5
 1012224:	4770      	bx	lr
	int evt = EVT_NOP;
 1012226:	2000      	movs	r0, #0
}
 1012228:	4770      	bx	lr

0101222a <validate_args>:
{
 101222a:	b510      	push	{r4, lr}
 101222c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
 101222e:	b100      	cbz	r0, 1012232 <validate_args+0x8>
 1012230:	b911      	cbnz	r1, 1012238 <validate_args+0xe>
		return -EINVAL;
 1012232:	f06f 0015 	mvn.w	r0, #21
}
 1012236:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
 1012238:	1d08      	adds	r0, r1, #4
 101223a:	f000 f8d6 	bl	10123ea <sys_notify_validate>
	if ((rv == 0)
 101223e:	2800      	cmp	r0, #0
 1012240:	d1f9      	bne.n	1012236 <validate_args+0xc>
	    && ((cli->notify.flags
 1012242:	68a3      	ldr	r3, [r4, #8]
 1012244:	2b03      	cmp	r3, #3
 1012246:	d9f6      	bls.n	1012236 <validate_args+0xc>
 1012248:	e7f3      	b.n	1012232 <validate_args+0x8>

0101224a <notify_one>:
{
 101224a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 101224e:	460d      	mov	r5, r1
 1012250:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 1012252:	4619      	mov	r1, r3
 1012254:	1d28      	adds	r0, r5, #4
{
 1012256:	4690      	mov	r8, r2
 1012258:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 101225a:	f000 f8d7 	bl	101240c <sys_notify_finalize>
	if (cb) {
 101225e:	4604      	mov	r4, r0
 1012260:	b138      	cbz	r0, 1012272 <notify_one+0x28>
		cb(mgr, cli, state, res);
 1012262:	4633      	mov	r3, r6
 1012264:	4642      	mov	r2, r8
 1012266:	4629      	mov	r1, r5
 1012268:	4638      	mov	r0, r7
 101226a:	46a4      	mov	ip, r4
}
 101226c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
 1012270:	4760      	bx	ip
}
 1012272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01012276 <transition_complete>:
{
 1012276:	b410      	push	{r4}
	__asm__ volatile(
 1012278:	f04f 0440 	mov.w	r4, #64	; 0x40
 101227c:	f3ef 8211 	mrs	r2, BASEPRI
 1012280:	f384 8812 	msr	BASEPRI_MAX, r4
 1012284:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
 1012288:	6141      	str	r1, [r0, #20]
}
 101228a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
 101228c:	2101      	movs	r1, #1
 101228e:	f7f3 bad3 	b.w	1005838 <process_event>

01012292 <onoff_manager_init>:
{
 1012292:	b538      	push	{r3, r4, r5, lr}
 1012294:	460c      	mov	r4, r1
	if ((mgr == NULL)
 1012296:	4605      	mov	r5, r0
 1012298:	b158      	cbz	r0, 10122b2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
 101229a:	b151      	cbz	r1, 10122b2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
 101229c:	680b      	ldr	r3, [r1, #0]
 101229e:	b143      	cbz	r3, 10122b2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
 10122a0:	684b      	ldr	r3, [r1, #4]
 10122a2:	b133      	cbz	r3, 10122b2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 10122a4:	221c      	movs	r2, #28
 10122a6:	2100      	movs	r1, #0
 10122a8:	f000 fbb3 	bl	1012a12 <memset>
	return 0;
 10122ac:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 10122ae:	612c      	str	r4, [r5, #16]
}
 10122b0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 10122b2:	f06f 0015 	mvn.w	r0, #21
 10122b6:	e7fb      	b.n	10122b0 <onoff_manager_init+0x1e>

010122b8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
 10122b8:	b570      	push	{r4, r5, r6, lr}
 10122ba:	4605      	mov	r5, r0
 10122bc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
 10122be:	f7ff ffb4 	bl	101222a <validate_args>

	if (rv < 0) {
 10122c2:	1e04      	subs	r4, r0, #0
 10122c4:	db15      	blt.n	10122f2 <onoff_request+0x3a>
 10122c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 10122ca:	f3ef 8211 	mrs	r2, BASEPRI
 10122ce:	f383 8812 	msr	BASEPRI_MAX, r3
 10122d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
 10122d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 10122da:	8b6b      	ldrh	r3, [r5, #26]
 10122dc:	8b2c      	ldrh	r4, [r5, #24]
 10122de:	428b      	cmp	r3, r1
 10122e0:	f004 0407 	and.w	r4, r4, #7
 10122e4:	d107      	bne.n	10122f6 <onoff_request+0x3e>
	__asm__ volatile(
 10122e6:	f382 8811 	msr	BASEPRI, r2
 10122ea:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
 10122ee:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
 10122f2:	4620      	mov	r0, r4
 10122f4:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
 10122f6:	2c02      	cmp	r4, #2
 10122f8:	d10c      	bne.n	1012314 <onoff_request+0x5c>
		mgr->refs += 1U;
 10122fa:	3301      	adds	r3, #1
 10122fc:	836b      	strh	r3, [r5, #26]
 10122fe:	f382 8811 	msr	BASEPRI, r2
 1012302:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
 1012306:	2300      	movs	r3, #0
 1012308:	4622      	mov	r2, r4
 101230a:	4631      	mov	r1, r6
 101230c:	4628      	mov	r0, r5
 101230e:	f7ff ff9c 	bl	101224a <notify_one>
 1012312:	e7ee      	b.n	10122f2 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
 1012314:	2c06      	cmp	r4, #6
 1012316:	d814      	bhi.n	1012342 <onoff_request+0x8a>
 1012318:	e8df f004 	tbb	[pc, r4]
 101231c:	13131304 	.word	0x13131304
 1012320:	1a04      	.short	0x1a04
 1012322:	04          	.byte	0x04
 1012323:	00          	.byte	0x00
	parent->next = child;
 1012324:	2300      	movs	r3, #0
 1012326:	6033      	str	r3, [r6, #0]
	return list->tail;
 1012328:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
 101232a:	b93b      	cbnz	r3, 101233c <onoff_request+0x84>
	list->head = node;
 101232c:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
 1012330:	b9ac      	cbnz	r4, 101235e <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
 1012332:	2102      	movs	r1, #2
 1012334:	4628      	mov	r0, r5
 1012336:	f7f3 fa7f 	bl	1005838 <process_event>
 101233a:	e7da      	b.n	10122f2 <onoff_request+0x3a>
	parent->next = child;
 101233c:	601e      	str	r6, [r3, #0]
	list->tail = node;
 101233e:	606e      	str	r6, [r5, #4]
}
 1012340:	e7f6      	b.n	1012330 <onoff_request+0x78>
 1012342:	f382 8811 	msr	BASEPRI, r2
 1012346:	f3bf 8f6f 	isb	sy
		rv = -EIO;
 101234a:	f06f 0404 	mvn.w	r4, #4
 101234e:	e7d0      	b.n	10122f2 <onoff_request+0x3a>
 1012350:	f382 8811 	msr	BASEPRI, r2
 1012354:	f3bf 8f6f 	isb	sy
 1012358:	f06f 0485 	mvn.w	r4, #133	; 0x85
 101235c:	e7c9      	b.n	10122f2 <onoff_request+0x3a>
 101235e:	f382 8811 	msr	BASEPRI, r2
 1012362:	f3bf 8f6f 	isb	sy
		if (notify) {
 1012366:	e7c4      	b.n	10122f2 <onoff_request+0x3a>

01012368 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
 1012368:	b510      	push	{r4, lr}
	__asm__ volatile(
 101236a:	f04f 0340 	mov.w	r3, #64	; 0x40
 101236e:	f3ef 8211 	mrs	r2, BASEPRI
 1012372:	f383 8812 	msr	BASEPRI_MAX, r3
 1012376:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 101237a:	8b04      	ldrh	r4, [r0, #24]
 101237c:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
 1012380:	2c02      	cmp	r4, #2
 1012382:	d00a      	beq.n	101239a <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
 1012384:	2c01      	cmp	r4, #1
 1012386:	bf0c      	ite	eq
 1012388:	f06f 0004 	mvneq.w	r0, #4
 101238c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
 1012390:	f382 8811 	msr	BASEPRI, r2
 1012394:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
 1012398:	e008      	b.n	10123ac <onoff_release+0x44>
	mgr->refs -= 1U;
 101239a:	8b43      	ldrh	r3, [r0, #26]
 101239c:	3b01      	subs	r3, #1
 101239e:	b29b      	uxth	r3, r3
 10123a0:	8343      	strh	r3, [r0, #26]
	if (stop) {
 10123a2:	b923      	cbnz	r3, 10123ae <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
 10123a4:	4621      	mov	r1, r4
 10123a6:	f7f3 fa47 	bl	1005838 <process_event>
	int rv = state;
 10123aa:	4620      	mov	r0, r4
}
 10123ac:	bd10      	pop	{r4, pc}
	int rv = state;
 10123ae:	4620      	mov	r0, r4
 10123b0:	e7ee      	b.n	1012390 <onoff_release+0x28>

010123b2 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
 10123b2:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
 10123b4:	b1b0      	cbz	r0, 10123e4 <onoff_cancel+0x32>
 10123b6:	b1a9      	cbz	r1, 10123e4 <onoff_cancel+0x32>
	__asm__ volatile(
 10123b8:	f04f 0240 	mov.w	r2, #64	; 0x40
 10123bc:	f3ef 8511 	mrs	r5, BASEPRI
 10123c0:	f382 8812 	msr	BASEPRI_MAX, r2
 10123c4:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 10123c8:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
 10123ca:	f7ff fef7 	bl	10121bc <sys_slist_find_and_remove>
 10123ce:	b130      	cbz	r0, 10123de <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
 10123d0:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
 10123d4:	f385 8811 	msr	BASEPRI, r5
 10123d8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
 10123dc:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
 10123de:	f06f 0077 	mvn.w	r0, #119	; 0x77
 10123e2:	e7f7      	b.n	10123d4 <onoff_cancel+0x22>
		return -EINVAL;
 10123e4:	f06f 0015 	mvn.w	r0, #21
 10123e8:	e7f8      	b.n	10123dc <onoff_cancel+0x2a>

010123ea <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
 10123ea:	4603      	mov	r3, r0
 10123ec:	b158      	cbz	r0, 1012406 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 10123ee:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
 10123f0:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
 10123f4:	2a01      	cmp	r2, #1
 10123f6:	d003      	beq.n	1012400 <sys_notify_validate+0x16>
 10123f8:	2a03      	cmp	r2, #3
 10123fa:	d104      	bne.n	1012406 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
 10123fc:	6802      	ldr	r2, [r0, #0]
 10123fe:	b112      	cbz	r2, 1012406 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
 1012400:	2000      	movs	r0, #0
 1012402:	6098      	str	r0, [r3, #8]
 1012404:	4770      	bx	lr
 1012406:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
 101240a:	4770      	bx	lr

0101240c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 101240c:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
 101240e:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
 1012410:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
 1012414:	2a03      	cmp	r2, #3
 1012416:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
 101241a:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
 101241c:	bf14      	ite	ne
 101241e:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
 1012420:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
 1012422:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
 1012424:	4770      	bx	lr

01012426 <encode_uint>:
{
 1012426:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101242a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 101242c:	78d3      	ldrb	r3, [r2, #3]
{
 101242e:	4680      	mov	r8, r0
	switch (specifier) {
 1012430:	2b6f      	cmp	r3, #111	; 0x6f
{
 1012432:	460f      	mov	r7, r1
 1012434:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 1012436:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 101243a:	d029      	beq.n	1012490 <encode_uint+0x6a>
 101243c:	d824      	bhi.n	1012488 <encode_uint+0x62>
		return 10;
 101243e:	2b58      	cmp	r3, #88	; 0x58
 1012440:	bf0c      	ite	eq
 1012442:	2610      	moveq	r6, #16
 1012444:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 1012446:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 101244a:	4632      	mov	r2, r6
 101244c:	2300      	movs	r3, #0
 101244e:	4640      	mov	r0, r8
 1012450:	4639      	mov	r1, r7
 1012452:	f7ed fe81 	bl	1000158 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1012456:	2a09      	cmp	r2, #9
 1012458:	b2d4      	uxtb	r4, r2
 101245a:	d81e      	bhi.n	101249a <encode_uint+0x74>
 101245c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 101245e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1012460:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 1012462:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1012466:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 101246a:	d301      	bcc.n	1012470 <encode_uint+0x4a>
 101246c:	45d1      	cmp	r9, sl
 101246e:	d811      	bhi.n	1012494 <encode_uint+0x6e>
	if (conv->flag_hash) {
 1012470:	782b      	ldrb	r3, [r5, #0]
 1012472:	069b      	lsls	r3, r3, #26
 1012474:	d505      	bpl.n	1012482 <encode_uint+0x5c>
		if (radix == 8) {
 1012476:	2e08      	cmp	r6, #8
 1012478:	d115      	bne.n	10124a6 <encode_uint+0x80>
			conv->altform_0 = true;
 101247a:	78ab      	ldrb	r3, [r5, #2]
 101247c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 1012480:	70ab      	strb	r3, [r5, #2]
}
 1012482:	4648      	mov	r0, r9
 1012484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 1012488:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 101248c:	2b70      	cmp	r3, #112	; 0x70
 101248e:	e7d7      	b.n	1012440 <encode_uint+0x1a>
	switch (specifier) {
 1012490:	2608      	movs	r6, #8
 1012492:	e7d8      	b.n	1012446 <encode_uint+0x20>
		value /= radix;
 1012494:	4680      	mov	r8, r0
 1012496:	460f      	mov	r7, r1
 1012498:	e7d7      	b.n	101244a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 101249a:	f1bb 0f19 	cmp.w	fp, #25
 101249e:	bf94      	ite	ls
 10124a0:	3437      	addls	r4, #55	; 0x37
 10124a2:	3457      	addhi	r4, #87	; 0x57
 10124a4:	e7db      	b.n	101245e <encode_uint+0x38>
		} else if (radix == 16) {
 10124a6:	2e10      	cmp	r6, #16
 10124a8:	d1eb      	bne.n	1012482 <encode_uint+0x5c>
			conv->altform_0c = true;
 10124aa:	78ab      	ldrb	r3, [r5, #2]
 10124ac:	f043 0310 	orr.w	r3, r3, #16
 10124b0:	e7e6      	b.n	1012480 <encode_uint+0x5a>

010124b2 <outs>:
{
 10124b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 10124b6:	4607      	mov	r7, r0
 10124b8:	4688      	mov	r8, r1
 10124ba:	4615      	mov	r5, r2
 10124bc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 10124be:	4614      	mov	r4, r2
 10124c0:	42b4      	cmp	r4, r6
 10124c2:	d305      	bcc.n	10124d0 <outs+0x1e>
 10124c4:	b10e      	cbz	r6, 10124ca <outs+0x18>
	return (int)count;
 10124c6:	1b60      	subs	r0, r4, r5
 10124c8:	e008      	b.n	10124dc <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 10124ca:	7823      	ldrb	r3, [r4, #0]
 10124cc:	2b00      	cmp	r3, #0
 10124ce:	d0fa      	beq.n	10124c6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 10124d0:	4641      	mov	r1, r8
 10124d2:	f814 0b01 	ldrb.w	r0, [r4], #1
 10124d6:	47b8      	blx	r7
		if (rc < 0) {
 10124d8:	2800      	cmp	r0, #0
 10124da:	daf1      	bge.n	10124c0 <outs+0xe>
}
 10124dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

010124e0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 10124e0:	4770      	bx	lr

010124e2 <ipc_service_open_instance>:

int ipc_service_open_instance(const struct device *instance)
{
	const struct ipc_service_backend *backend;

	if (!instance) {
 10124e2:	b120      	cbz	r0, 10124ee <ipc_service_open_instance+0xc>
		LOG_ERR("Invalid instance");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
 10124e4:	6883      	ldr	r3, [r0, #8]

	if (!backend) {
 10124e6:	b12b      	cbz	r3, 10124f4 <ipc_service_open_instance+0x12>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	if (!backend->open_instance) {
 10124e8:	681b      	ldr	r3, [r3, #0]
 10124ea:	b133      	cbz	r3, 10124fa <ipc_service_open_instance+0x18>
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
 10124ec:	4718      	bx	r3
		return -EINVAL;
 10124ee:	f06f 0015 	mvn.w	r0, #21
 10124f2:	4770      	bx	lr
		return -EIO;
 10124f4:	f06f 0004 	mvn.w	r0, #4
 10124f8:	4770      	bx	lr
		return 0;
 10124fa:	4618      	mov	r0, r3
}
 10124fc:	4770      	bx	lr

010124fe <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
 10124fe:	b430      	push	{r4, r5}
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
 1012500:	b150      	cbz	r0, 1012518 <ipc_service_register_endpoint+0x1a>
 1012502:	b149      	cbz	r1, 1012518 <ipc_service_register_endpoint+0x1a>
 1012504:	b142      	cbz	r2, 1012518 <ipc_service_register_endpoint+0x1a>
		LOG_ERR("Invalid instance, endpoint or configuration");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
 1012506:	6884      	ldr	r4, [r0, #8]

	if (!backend || !backend->register_endpoint) {
 1012508:	b154      	cbz	r4, 1012520 <ipc_service_register_endpoint+0x22>
 101250a:	68e5      	ldr	r5, [r4, #12]
 101250c:	b145      	cbz	r5, 1012520 <ipc_service_register_endpoint+0x22>
		return -EIO;
	}

	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;
 101250e:	f841 0b04 	str.w	r0, [r1], #4

	return backend->register_endpoint(instance, &ept->token, cfg);
 1012512:	68e3      	ldr	r3, [r4, #12]
}
 1012514:	bc30      	pop	{r4, r5}
	return backend->register_endpoint(instance, &ept->token, cfg);
 1012516:	4718      	bx	r3
		return -EINVAL;
 1012518:	f06f 0015 	mvn.w	r0, #21
}
 101251c:	bc30      	pop	{r4, r5}
 101251e:	4770      	bx	lr
		return -EIO;
 1012520:	f06f 0004 	mvn.w	r0, #4
 1012524:	e7fa      	b.n	101251c <ipc_service_register_endpoint+0x1e>

01012526 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
 1012526:	b430      	push	{r4, r5}
 1012528:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
 101252a:	4604      	mov	r4, r0
 101252c:	b150      	cbz	r0, 1012544 <ipc_service_send+0x1e>
		LOG_ERR("Invalid endpoint");
		return -EINVAL;
	}

	if (!ept->instance) {
 101252e:	6800      	ldr	r0, [r0, #0]
 1012530:	b160      	cbz	r0, 101254c <ipc_service_send+0x26>
		LOG_ERR("Endpoint not registered\n");
		return -ENOENT;
	}

	backend = ept->instance->api;
 1012532:	6882      	ldr	r2, [r0, #8]

	if (!backend || !backend->send) {
 1012534:	b16a      	cbz	r2, 1012552 <ipc_service_send+0x2c>
 1012536:	6895      	ldr	r5, [r2, #8]
 1012538:	b15d      	cbz	r5, 1012552 <ipc_service_send+0x2c>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
 101253a:	460a      	mov	r2, r1
 101253c:	46ac      	mov	ip, r5
 101253e:	6861      	ldr	r1, [r4, #4]
}
 1012540:	bc30      	pop	{r4, r5}
	return backend->send(ept->instance, ept->token, data, len);
 1012542:	4760      	bx	ip
		return -EINVAL;
 1012544:	f06f 0015 	mvn.w	r0, #21
}
 1012548:	bc30      	pop	{r4, r5}
 101254a:	4770      	bx	lr
		return -ENOENT;
 101254c:	f06f 0001 	mvn.w	r0, #1
 1012550:	e7fa      	b.n	1012548 <ipc_service_send+0x22>
		return -EIO;
 1012552:	f06f 0004 	mvn.w	r0, #4
 1012556:	e7f7      	b.n	1012548 <ipc_service_send+0x22>

01012558 <get_tx_buffer_size>:

static int get_tx_buffer_size(const struct device *instance, void *token)
{
	struct backend_data_t *data = instance->data;

	return data->tx_buffer_size;
 1012558:	6903      	ldr	r3, [r0, #16]
}
 101255a:	f8d3 0360 	ldr.w	r0, [r3, #864]	; 0x360
 101255e:	4770      	bx	lr

01012560 <drop_tx_buffer>:
static int drop_tx_buffer(const struct device *instance, void *token,
			  const void *data)
{
	/* Not yet supported by OpenAMP */
	return -ENOTSUP;
}
 1012560:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1012564:	4770      	bx	lr

01012566 <release_rx_buffer>:
{
 1012566:	4608      	mov	r0, r1
 1012568:	b508      	push	{r3, lr}
 101256a:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
 101256c:	b118      	cbz	r0, 1012576 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
 101256e:	f002 f8b9 	bl	10146e4 <rpmsg_release_rx_buffer>
	return 0;
 1012572:	2000      	movs	r0, #0
}
 1012574:	bd08      	pop	{r3, pc}
		return -ENOENT;
 1012576:	f06f 0001 	mvn.w	r0, #1
 101257a:	e7fb      	b.n	1012574 <release_rx_buffer+0xe>

0101257c <hold_rx_buffer>:
{
 101257c:	4608      	mov	r0, r1
 101257e:	b508      	push	{r3, lr}
 1012580:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
 1012582:	b118      	cbz	r0, 101258c <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
 1012584:	f002 f8a6 	bl	10146d4 <rpmsg_hold_rx_buffer>
	return 0;
 1012588:	2000      	movs	r0, #0
}
 101258a:	bd08      	pop	{r3, pc}
		return -ENOENT;
 101258c:	f06f 0001 	mvn.w	r0, #1
 1012590:	e7fb      	b.n	101258a <hold_rx_buffer+0xe>

01012592 <send_nocopy>:
{
 1012592:	b513      	push	{r0, r1, r4, lr}
 1012594:	4604      	mov	r4, r0
 1012596:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 1012598:	6921      	ldr	r1, [r4, #16]
 101259a:	f501 7157 	add.w	r1, r1, #860	; 0x35c
 101259e:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
 10125a2:	2902      	cmp	r1, #2
 10125a4:	d109      	bne.n	10125ba <send_nocopy+0x28>
	if (len == 0) {
 10125a6:	b15b      	cbz	r3, 10125c0 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
 10125a8:	b168      	cbz	r0, 10125c6 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
 10125aa:	9300      	str	r3, [sp, #0]
 10125ac:	4613      	mov	r3, r2
 10125ae:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 10125b2:	f7fd fb5b 	bl	100fc6c <rpmsg_send_offchannel_nocopy>
}
 10125b6:	b002      	add	sp, #8
 10125b8:	bd10      	pop	{r4, pc}
		return -EBUSY;
 10125ba:	f06f 000f 	mvn.w	r0, #15
 10125be:	e7fa      	b.n	10125b6 <send_nocopy+0x24>
		return -EBADMSG;
 10125c0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
 10125c4:	e7f7      	b.n	10125b6 <send_nocopy+0x24>
		return -ENOENT;
 10125c6:	f06f 0001 	mvn.w	r0, #1
 10125ca:	e7f4      	b.n	10125b6 <send_nocopy+0x24>

010125cc <get_tx_buffer>:
{
 10125cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 10125d0:	461c      	mov	r4, r3
 10125d2:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
 10125d6:	4616      	mov	r6, r2
 10125d8:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
 10125da:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
 10125dc:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
 10125de:	b339      	cbz	r1, 1012630 <get_tx_buffer+0x64>
	if (!r_data || !size) {
 10125e0:	b34a      	cbz	r2, 1012636 <get_tx_buffer+0x6a>
 10125e2:	b344      	cbz	r4, 1012636 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
 10125e4:	1c6a      	adds	r2, r5, #1
 10125e6:	f143 0300 	adc.w	r3, r3, #0
 10125ea:	2a02      	cmp	r2, #2
 10125ec:	f173 0300 	sbcs.w	r3, r3, #0
 10125f0:	d224      	bcs.n	101263c <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
 10125f2:	6822      	ldr	r2, [r4, #0]
 10125f4:	b142      	cbz	r2, 1012608 <get_tx_buffer+0x3c>
 10125f6:	f8d0 3360 	ldr.w	r3, [r0, #864]	; 0x360
 10125fa:	429a      	cmp	r2, r3
 10125fc:	d904      	bls.n	1012608 <get_tx_buffer+0x3c>
		return -ENOMEM;
 10125fe:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
 1012602:	6023      	str	r3, [r4, #0]
}
 1012604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
 1012608:	ea05 0908 	and.w	r9, r5, r8
 101260c:	f109 0301 	add.w	r3, r9, #1
 1012610:	425a      	negs	r2, r3
 1012612:	415a      	adcs	r2, r3
 1012614:	4621      	mov	r1, r4
 1012616:	4638      	mov	r0, r7
 1012618:	f002 f86c 	bl	10146f4 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
 101261c:	b988      	cbnz	r0, 1012642 <get_tx_buffer+0x76>
 101261e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 1012622:	bf08      	it	eq
 1012624:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 1012628:	d0f0      	beq.n	101260c <get_tx_buffer+0x40>
		return -ENOBUFS;
 101262a:	f06f 0068 	mvn.w	r0, #104	; 0x68
 101262e:	e7e9      	b.n	1012604 <get_tx_buffer+0x38>
		return -ENOENT;
 1012630:	f06f 0001 	mvn.w	r0, #1
 1012634:	e7e6      	b.n	1012604 <get_tx_buffer+0x38>
		return -EINVAL;
 1012636:	f06f 0015 	mvn.w	r0, #21
 101263a:	e7e3      	b.n	1012604 <get_tx_buffer+0x38>
		return -ENOTSUP;
 101263c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1012640:	e7e0      	b.n	1012604 <get_tx_buffer+0x38>
	(*r_data) = payload;
 1012642:	6030      	str	r0, [r6, #0]
	return 0;
 1012644:	2000      	movs	r0, #0
 1012646:	e7dd      	b.n	1012604 <get_tx_buffer+0x38>

01012648 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
 1012648:	f002 b898 	b.w	101477c <rpmsg_destroy_ept>

0101264c <get_ept_slot_with_name>:
{
 101264c:	b538      	push	{r3, r4, r5, lr}
 101264e:	460d      	mov	r5, r1
 1012650:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
 1012652:	f100 0140 	add.w	r1, r0, #64	; 0x40
 1012656:	4628      	mov	r0, r5
 1012658:	f000 f98a 	bl	1012970 <strcmp>
 101265c:	b130      	cbz	r0, 101266c <get_ept_slot_with_name+0x20>
 101265e:	4628      	mov	r0, r5
 1012660:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 1012664:	f000 f984 	bl	1012970 <strcmp>
 1012668:	b920      	cbnz	r0, 1012674 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
 101266a:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
 101266c:	2370      	movs	r3, #112	; 0x70
 101266e:	fb03 4000 	mla	r0, r3, r0, r4
}
 1012672:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
 1012674:	2000      	movs	r0, #0
 1012676:	e7fc      	b.n	1012672 <get_ept_slot_with_name+0x26>

01012678 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
 1012678:	f502 712a 	add.w	r1, r2, #680	; 0x2a8
 101267c:	f502 702e 	add.w	r0, r2, #696	; 0x2b8
 1012680:	f002 bb63 	b.w	1014d4a <k_work_submit_to_queue>

01012684 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
 1012684:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
	virtqueue_notification(data->vr.vq[vq_id]);
 1012688:	f5a0 702a 	sub.w	r0, r0, #680	; 0x2a8
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
 101268c:	3b00      	subs	r3, #0
 101268e:	bf18      	it	ne
 1012690:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
 1012692:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 1012696:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 101269a:	f001 bfcd 	b.w	1014638 <virtqueue_notification>

0101269e <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
 101269e:	68cb      	ldr	r3, [r1, #12]
 10126a0:	b133      	cbz	r3, 10126b0 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
 10126a2:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
 10126a4:	6883      	ldr	r3, [r0, #8]
 10126a6:	681b      	ldr	r3, [r3, #0]
 10126a8:	b113      	cbz	r3, 10126b0 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
 10126aa:	2200      	movs	r2, #0
 10126ac:	6909      	ldr	r1, [r1, #16]
 10126ae:	4718      	bx	r3
}
 10126b0:	4770      	bx	lr

010126b2 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 10126b2:	f7fd bf47 	b.w	1010544 <z_impl_k_mutex_unlock>

010126b6 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 10126b6:	e8d0 3fef 	ldaex	r3, [r0]
 10126ba:	e8c0 1fe2 	stlex	r2, r1, [r0]
 10126be:	2a00      	cmp	r2, #0
 10126c0:	d1f9      	bne.n	10126b6 <atomic_set.isra.0>
}
 10126c2:	4770      	bx	lr

010126c4 <backend_init>:
	.hold_rx_buffer = hold_rx_buffer,
	.release_rx_buffer = release_rx_buffer,
};

static int backend_init(const struct device *instance)
{
 10126c4:	b510      	push	{r4, lr}
	const struct backend_config_t *conf = instance->config;
	struct backend_data_t *data = instance->data;

	data->role = conf->role;
 10126c6:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
 10126c8:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
 10126ca:	681b      	ldr	r3, [r3, #0]
 10126cc:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
	return z_impl_k_mutex_init(mutex);
 10126d0:	f504 70d4 	add.w	r0, r4, #424	; 0x1a8
 10126d4:	f002 faca 	bl	1014c6c <z_impl_k_mutex_init>

	k_mutex_init(&data->rpmsg_inst.mtx);
	atomic_set(&data->state, STATE_READY);
 10126d8:	2100      	movs	r1, #0
 10126da:	f504 7057 	add.w	r0, r4, #860	; 0x35c
 10126de:	f7ff ffea 	bl	10126b6 <atomic_set.isra.0>

	return 0;
}
 10126e2:	4608      	mov	r0, r1
 10126e4:	bd10      	pop	{r4, pc}

010126e6 <ns_bind_cb>:
{
 10126e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 10126ea:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
 10126ec:	460d      	mov	r5, r1
 10126ee:	b379      	cbz	r1, 1012750 <ns_bind_cb+0x6a>
 10126f0:	780b      	ldrb	r3, [r1, #0]
 10126f2:	b36b      	cbz	r3, 1012750 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
 10126f4:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 10126f8:	f5a4 78ca 	sub.w	r8, r4, #404	; 0x194
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
 10126fc:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
 10126fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1012702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1012706:	4620      	mov	r0, r4
 1012708:	f7fd fea2 	bl	1010450 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
 101270c:	462a      	mov	r2, r5
 101270e:	4640      	mov	r0, r8
 1012710:	a901      	add	r1, sp, #4
 1012712:	f7f3 fdd7 	bl	10062c4 <get_ept>
	if (rpmsg_ept == NULL) {
 1012716:	9e01      	ldr	r6, [sp, #4]
 1012718:	b92e      	cbnz	r6, 1012726 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
 101271a:	4620      	mov	r0, r4
}
 101271c:	b002      	add	sp, #8
 101271e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
 1012722:	f7ff bfc6 	b.w	10126b2 <k_mutex_unlock.isra.0>
	if (ept_cached) {
 1012726:	b158      	cbz	r0, 1012740 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
 1012728:	4620      	mov	r0, r4
 101272a:	f7ff ffc2 	bl	10126b2 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
 101272e:	463b      	mov	r3, r7
 1012730:	462a      	mov	r2, r5
 1012732:	4631      	mov	r1, r6
 1012734:	4640      	mov	r0, r8
}
 1012736:	b002      	add	sp, #8
 1012738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
 101273c:	f7f3 bda0 	b.w	1006280 <advertise_ept>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
 1012740:	2220      	movs	r2, #32
 1012742:	4629      	mov	r1, r5
 1012744:	f106 0040 	add.w	r0, r6, #64	; 0x40
 1012748:	f000 f8ee 	bl	1012928 <strncpy>
		rpmsg_ept->dest = dest;
 101274c:	6637      	str	r7, [r6, #96]	; 0x60
 101274e:	e7e4      	b.n	101271a <ns_bind_cb+0x34>
}
 1012750:	b002      	add	sp, #8
 1012752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01012756 <ept_cb>:
{
 1012756:	b510      	push	{r4, lr}
 1012758:	4608      	mov	r0, r1
 101275a:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
 101275c:	4611      	mov	r1, r2
 101275e:	b952      	cbnz	r2, 1012776 <ept_cb+0x20>
		if (!ept->bound) {
 1012760:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 1012764:	b92a      	cbnz	r2, 1012772 <ept_cb+0x1c>
			ept->bound = true;
 1012766:	2201      	movs	r2, #1
			bound_cb(ept);
 1012768:	4618      	mov	r0, r3
			ept->bound = true;
 101276a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
 101276e:	f7f3 fefb 	bl	1006568 <bound_cb>
}
 1012772:	2000      	movs	r0, #0
 1012774:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
 1012776:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 1012778:	6854      	ldr	r4, [r2, #4]
 101277a:	2c00      	cmp	r4, #0
 101277c:	d0f9      	beq.n	1012772 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
 101277e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 1012780:	47a0      	blx	r4
 1012782:	e7f6      	b.n	1012772 <ept_cb+0x1c>

01012784 <deregister_ept>:
{
 1012784:	b510      	push	{r4, lr}
 1012786:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 1012788:	6903      	ldr	r3, [r0, #16]
 101278a:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 101278e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
 1012792:	2b02      	cmp	r3, #2
 1012794:	d10a      	bne.n	10127ac <deregister_ept+0x28>
	if (!rpmsg_ept) {
 1012796:	b161      	cbz	r1, 10127b2 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
 1012798:	4608      	mov	r0, r1
 101279a:	f001 ffef 	bl	101477c <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
 101279e:	2270      	movs	r2, #112	; 0x70
 10127a0:	2100      	movs	r1, #0
 10127a2:	4620      	mov	r0, r4
 10127a4:	f000 f935 	bl	1012a12 <memset>
	return 0;
 10127a8:	2000      	movs	r0, #0
}
 10127aa:	bd10      	pop	{r4, pc}
		return -EBUSY;
 10127ac:	f06f 000f 	mvn.w	r0, #15
 10127b0:	e7fb      	b.n	10127aa <deregister_ept+0x26>
		return -ENOENT;
 10127b2:	f06f 0001 	mvn.w	r0, #1
 10127b6:	e7f8      	b.n	10127aa <deregister_ept+0x26>

010127b8 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
 10127b8:	f001 bfe0 	b.w	101477c <rpmsg_destroy_ept>

010127bc <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
 10127bc:	b538      	push	{r3, r4, r5, lr}
 10127be:	460d      	mov	r5, r1
	if (!instance) {
 10127c0:	4604      	mov	r4, r0
 10127c2:	b160      	cbz	r0, 10127de <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
 10127c4:	30e0      	adds	r0, #224	; 0xe0
 10127c6:	f002 fa05 	bl	1014bd4 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
 10127ca:	b10d      	cbz	r5, 10127d0 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
 10127cc:	2000      	movs	r0, #0
}
 10127ce:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
 10127d0:	220c      	movs	r2, #12
 10127d2:	4629      	mov	r1, r5
 10127d4:	f504 70ca 	add.w	r0, r4, #404	; 0x194
 10127d8:	f000 f91b 	bl	1012a12 <memset>
 10127dc:	e7f6      	b.n	10127cc <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
 10127de:	f06f 0015 	mvn.w	r0, #21
 10127e2:	e7f4      	b.n	10127ce <ipc_rpmsg_deinit+0x12>

010127e4 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
 10127e4:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
 10127e6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 10127ea:	b113      	cbz	r3, 10127f2 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
 10127ec:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
 10127f0:	4718      	bx	r3
}
 10127f2:	4770      	bx	lr

010127f4 <virtio_set_features>:
}
 10127f4:	4770      	bx	lr

010127f6 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
 10127f6:	6983      	ldr	r3, [r0, #24]
 10127f8:	b913      	cbnz	r3, 1012800 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
 10127fa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 10127fe:	7019      	strb	r1, [r3, #0]
}
 1012800:	4770      	bx	lr

01012802 <virtio_get_features>:
}
 1012802:	2001      	movs	r0, #1
 1012804:	4770      	bx	lr

01012806 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
 1012806:	6983      	ldr	r3, [r0, #24]
 1012808:	2b01      	cmp	r3, #1
 101280a:	d104      	bne.n	1012816 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
 101280c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 1012810:	7818      	ldrb	r0, [r3, #0]
 1012812:	b2c0      	uxtb	r0, r0
 1012814:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
 1012816:	2004      	movs	r0, #4
}
 1012818:	4770      	bx	lr

0101281a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 101281a:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
 101281c:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
 101281e:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
 1012820:	4620      	mov	r0, r4
 1012822:	f002 fc0c 	bl	101503e <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
 1012826:	4605      	mov	r5, r0
 1012828:	b118      	cbz	r0, 1012832 <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
 101282a:	4622      	mov	r2, r4
 101282c:	2100      	movs	r1, #0
 101282e:	f000 f8f0 	bl	1012a12 <memset>
	}

	return vqs;
}
 1012832:	4628      	mov	r0, r5
 1012834:	bd38      	pop	{r3, r4, r5, pc}

01012836 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
 1012836:	b538      	push	{r3, r4, r5, lr}
 1012838:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
 101283a:	2230      	movs	r2, #48	; 0x30
 101283c:	2100      	movs	r1, #0
 101283e:	f000 f8e8 	bl	1012a12 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
 1012842:	2218      	movs	r2, #24
 1012844:	2100      	movs	r1, #0
 1012846:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 101284a:	f000 f8e2 	bl	1012a12 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
 101284e:	2218      	movs	r2, #24
 1012850:	2100      	movs	r1, #0
 1012852:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 1012856:	f000 f8dc 	bl	1012a12 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
 101285a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 101285e:	f7fd f9b7 	bl	100fbd0 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
 1012862:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 1012866:	f7fd f9b3 	bl	100fbd0 <virtqueue_free>
	vr->shm_io = 0;
 101286a:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
 101286c:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
 1012870:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
 1012874:	f001 fc61 	bl	101413a <metal_device_close>
	metal_finish();
 1012878:	f7fd f922 	bl	100fac0 <metal_finish>
	if (io->ops.close)
 101287c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
 101287e:	f104 0540 	add.w	r5, r4, #64	; 0x40
 1012882:	b10b      	cbz	r3, 1012888 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
 1012884:	4628      	mov	r0, r5
 1012886:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
 1012888:	2238      	movs	r2, #56	; 0x38
 101288a:	2100      	movs	r1, #0
 101288c:	4628      	mov	r0, r5
 101288e:	f000 f8c0 	bl	1012a12 <memset>

	return 0;
}
 1012892:	2000      	movs	r0, #0
 1012894:	bd38      	pop	{r3, r4, r5, pc}

01012896 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 1012896:	f002 b9ab 	b.w	1014bf0 <z_fatal_error>

0101289a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 101289a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 101289c:	6800      	ldr	r0, [r0, #0]
 101289e:	f002 b9a7 	b.w	1014bf0 <z_fatal_error>

010128a2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 10128a2:	2100      	movs	r1, #0
 10128a4:	2001      	movs	r0, #1
 10128a6:	f7ff bff6 	b.w	1012896 <z_arm_fatal_error>

010128aa <arch_irq_connect_dynamic>:
#ifdef CONFIG_DYNAMIC_INTERRUPTS
#ifdef CONFIG_GEN_ISR_TABLES
int arch_irq_connect_dynamic(unsigned int irq, unsigned int priority,
			     void (*routine)(const void *parameter),
			     const void *parameter, uint32_t flags)
{
 10128aa:	b538      	push	{r3, r4, r5, lr}
 10128ac:	4604      	mov	r4, r0
 10128ae:	460d      	mov	r5, r1
 10128b0:	4611      	mov	r1, r2
	z_isr_install(irq, routine, parameter);
 10128b2:	461a      	mov	r2, r3
 10128b4:	f7f4 f814 	bl	10068e0 <z_isr_install>
	z_arm_irq_priority_set(irq, priority, flags);
 10128b8:	4620      	mov	r0, r4
 10128ba:	4629      	mov	r1, r5
 10128bc:	9a04      	ldr	r2, [sp, #16]
 10128be:	f7f4 f875 	bl	10069ac <z_arm_irq_priority_set>
	return irq;
}
 10128c2:	4620      	mov	r0, r4
 10128c4:	bd38      	pop	{r3, r4, r5, pc}

010128c6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 10128c6:	b508      	push	{r3, lr}
	handler();
 10128c8:	f7f4 f88a 	bl	10069e0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 10128cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 10128d0:	f7f4 b93a 	b.w	1006b48 <z_arm_exc_exit>

010128d4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 10128d4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 10128d6:	f383 880b 	msr	PSPLIM, r3
}
 10128da:	4770      	bx	lr

010128dc <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
 10128dc:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
 10128e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 10128e4:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
 10128e6:	bf08      	it	eq
 10128e8:	f06f 0015 	mvneq.w	r0, #21
 10128ec:	4770      	bx	lr

010128ee <mpu_configure_region>:
{
 10128ee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
 10128f0:	890a      	ldrh	r2, [r1, #8]
 10128f2:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
 10128f4:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
 10128f6:	684d      	ldr	r5, [r1, #4]
 10128f8:	f002 021f 	and.w	r2, r2, #31
 10128fc:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
 1012900:	9300      	str	r3, [sp, #0]
 1012902:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
 1012906:	f023 031f 	bic.w	r3, r3, #31
 101290a:	1e6a      	subs	r2, r5, #1
 101290c:	4413      	add	r3, r2
 101290e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
 1012912:	2807      	cmp	r0, #7
 1012914:	9303      	str	r3, [sp, #12]
 1012916:	d804      	bhi.n	1012922 <mpu_configure_region+0x34>
	region_init(index, region_conf);
 1012918:	4669      	mov	r1, sp
 101291a:	f7f4 fac9 	bl	1006eb0 <region_init>
}
 101291e:	b004      	add	sp, #16
 1012920:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 1012922:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
 1012926:	e7fa      	b.n	101291e <mpu_configure_region+0x30>

01012928 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
 1012928:	4603      	mov	r3, r0
{
 101292a:	b510      	push	{r4, lr}
 101292c:	3901      	subs	r1, #1
	while ((n > 0) && *s != '\0') {
 101292e:	b922      	cbnz	r2, 101293a <strncpy+0x12>
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
 1012930:	2100      	movs	r1, #0
 1012932:	441a      	add	r2, r3
	while (n > 0) {
 1012934:	4293      	cmp	r3, r2
 1012936:	d108      	bne.n	101294a <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
 1012938:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
 101293a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 101293e:	2c00      	cmp	r4, #0
 1012940:	d0f6      	beq.n	1012930 <strncpy+0x8>
		*d = *s;
 1012942:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
 1012946:	3a01      	subs	r2, #1
 1012948:	e7f1      	b.n	101292e <strncpy+0x6>
		*d = '\0';
 101294a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 101294e:	e7f1      	b.n	1012934 <strncpy+0xc>

01012950 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 1012950:	4603      	mov	r3, r0
	size_t n = 0;
 1012952:	2000      	movs	r0, #0

	while (*s != '\0') {
 1012954:	5c1a      	ldrb	r2, [r3, r0]
 1012956:	b902      	cbnz	r2, 101295a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 1012958:	4770      	bx	lr
		n++;
 101295a:	3001      	adds	r0, #1
 101295c:	e7fa      	b.n	1012954 <strlen+0x4>

0101295e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 101295e:	4603      	mov	r3, r0
	size_t n = 0;
 1012960:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 1012962:	5c1a      	ldrb	r2, [r3, r0]
 1012964:	b10a      	cbz	r2, 101296a <strnlen+0xc>
 1012966:	4288      	cmp	r0, r1
 1012968:	d100      	bne.n	101296c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 101296a:	4770      	bx	lr
		n++;
 101296c:	3001      	adds	r0, #1
 101296e:	e7f8      	b.n	1012962 <strnlen+0x4>

01012970 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 1012970:	1e43      	subs	r3, r0, #1
 1012972:	3901      	subs	r1, #1
 1012974:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 1012978:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 101297c:	4282      	cmp	r2, r0
 101297e:	d101      	bne.n	1012984 <strcmp+0x14>
 1012980:	2a00      	cmp	r2, #0
 1012982:	d1f7      	bne.n	1012974 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 1012984:	1a10      	subs	r0, r2, r0
 1012986:	4770      	bx	lr

01012988 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
 1012988:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 101298a:	460b      	mov	r3, r1
 101298c:	4605      	mov	r5, r0
 101298e:	b162      	cbz	r2, 10129aa <strncmp+0x22>
 1012990:	f810 6b01 	ldrb.w	r6, [r0], #1
 1012994:	781c      	ldrb	r4, [r3, #0]
 1012996:	3101      	adds	r1, #1
 1012998:	42b4      	cmp	r4, r6
 101299a:	d100      	bne.n	101299e <strncmp+0x16>
 101299c:	b91c      	cbnz	r4, 10129a6 <strncmp+0x1e>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
 101299e:	782a      	ldrb	r2, [r5, #0]
 10129a0:	781b      	ldrb	r3, [r3, #0]
 10129a2:	1ad0      	subs	r0, r2, r3
 10129a4:	e002      	b.n	10129ac <strncmp+0x24>
		n--;
 10129a6:	3a01      	subs	r2, #1
 10129a8:	e7ef      	b.n	101298a <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
 10129aa:	4610      	mov	r0, r2
}
 10129ac:	bd70      	pop	{r4, r5, r6, pc}

010129ae <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
 10129ae:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
 10129b0:	b15a      	cbz	r2, 10129ca <memcmp+0x1c>
 10129b2:	3901      	subs	r1, #1
 10129b4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
 10129b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 10129ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 10129be:	42a0      	cmp	r0, r4
 10129c0:	d001      	beq.n	10129c6 <memcmp+0x18>
 10129c2:	429a      	cmp	r2, r3
 10129c4:	d0f7      	beq.n	10129b6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
 10129c6:	1ad0      	subs	r0, r2, r3
}
 10129c8:	bd10      	pop	{r4, pc}
		return 0;
 10129ca:	4610      	mov	r0, r2
 10129cc:	e7fc      	b.n	10129c8 <memcmp+0x1a>

010129ce <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
 10129ce:	1a43      	subs	r3, r0, r1
 10129d0:	4293      	cmp	r3, r2
{
 10129d2:	b510      	push	{r4, lr}
 10129d4:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
 10129d8:	d308      	bcc.n	10129ec <memmove+0x1e>
	char *dest = d;
 10129da:	4602      	mov	r2, r0
 10129dc:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
 10129de:	429a      	cmp	r2, r3
 10129e0:	d00b      	beq.n	10129fa <memmove+0x2c>
			*dest = *src;
 10129e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 10129e6:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
 10129ea:	e7f8      	b.n	10129de <memmove+0x10>
 10129ec:	440a      	add	r2, r1
			dest[n] = src[n];
 10129ee:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
 10129f2:	428a      	cmp	r2, r1
			dest[n] = src[n];
 10129f4:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
 10129f8:	d1f9      	bne.n	10129ee <memmove+0x20>
		}
	}

	return d;
}
 10129fa:	bd10      	pop	{r4, pc}

010129fc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 10129fc:	b510      	push	{r4, lr}
 10129fe:	1e43      	subs	r3, r0, #1
 1012a00:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 1012a02:	4291      	cmp	r1, r2
 1012a04:	d100      	bne.n	1012a08 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 1012a06:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 1012a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 1012a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 1012a10:	e7f7      	b.n	1012a02 <memcpy+0x6>

01012a12 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
 1012a12:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
 1012a14:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 1012a16:	4402      	add	r2, r0
 1012a18:	4293      	cmp	r3, r2
 1012a1a:	d100      	bne.n	1012a1e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 1012a1c:	4770      	bx	lr
		*(d_byte++) = c_byte;
 1012a1e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 1012a22:	e7f9      	b.n	1012a18 <memset+0x6>

01012a24 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
 1012a24:	220c      	movs	r2, #12
 1012a26:	6903      	ldr	r3, [r0, #16]
 1012a28:	b2c9      	uxtb	r1, r1
 1012a2a:	fb01 3302 	mla	r3, r1, r2, r3
 1012a2e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 1012a30:	f000 0007 	and.w	r0, r0, #7
 1012a34:	4770      	bx	lr

01012a36 <set_on_state>:
	__asm__ volatile(
 1012a36:	f04f 0340 	mov.w	r3, #64	; 0x40
 1012a3a:	f3ef 8211 	mrs	r2, BASEPRI
 1012a3e:	f383 8812 	msr	BASEPRI_MAX, r3
 1012a42:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
 1012a46:	6803      	ldr	r3, [r0, #0]
 1012a48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 1012a4c:	f043 0302 	orr.w	r3, r3, #2
 1012a50:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
 1012a52:	f382 8811 	msr	BASEPRI, r2
 1012a56:	f3bf 8f6f 	isb	sy
}
 1012a5a:	4770      	bx	lr

01012a5c <stop>:
{
 1012a5c:	b570      	push	{r4, r5, r6, lr}
 1012a5e:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
 1012a60:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
 1012a62:	f04f 0440 	mov.w	r4, #64	; 0x40
 1012a66:	f3ef 8511 	mrs	r5, BASEPRI
 1012a6a:	f384 8812 	msr	BASEPRI_MAX, r4
 1012a6e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 1012a72:	260c      	movs	r6, #12
 1012a74:	fb06 3401 	mla	r4, r6, r1, r3
 1012a78:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
 1012a7a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
 1012a7e:	d008      	beq.n	1012a92 <stop+0x36>
 1012a80:	42a2      	cmp	r2, r4
 1012a82:	d006      	beq.n	1012a92 <stop+0x36>
	__asm__ volatile(
 1012a84:	f385 8811 	msr	BASEPRI, r5
 1012a88:	f3bf 8f6f 	isb	sy
		err = -EPERM;
 1012a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 1012a90:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
 1012a92:	2201      	movs	r2, #1
 1012a94:	fb06 3301 	mla	r3, r6, r1, r3
 1012a98:	641a      	str	r2, [r3, #64]	; 0x40
 1012a9a:	f385 8811 	msr	BASEPRI, r5
 1012a9e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
 1012aa2:	6843      	ldr	r3, [r0, #4]
 1012aa4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 1012aa8:	685b      	ldr	r3, [r3, #4]
 1012aaa:	4798      	blx	r3
	return 0;
 1012aac:	2000      	movs	r0, #0
 1012aae:	e7ef      	b.n	1012a90 <stop+0x34>

01012ab0 <api_stop>:
	return stop(dev, subsys, CTX_API);
 1012ab0:	2280      	movs	r2, #128	; 0x80
 1012ab2:	f7ff bfd3 	b.w	1012a5c <stop>

01012ab6 <async_start>:
{
 1012ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1012ab8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
 1012aba:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
 1012abc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
 1012abe:	f04f 0540 	mov.w	r5, #64	; 0x40
 1012ac2:	f3ef 8611 	mrs	r6, BASEPRI
 1012ac6:	f385 8812 	msr	BASEPRI_MAX, r5
 1012aca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 1012ace:	250c      	movs	r5, #12
 1012ad0:	fb05 4401 	mla	r4, r5, r1, r4
 1012ad4:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
 1012ad6:	f005 0c07 	and.w	ip, r5, #7
 1012ada:	f1bc 0f01 	cmp.w	ip, #1
 1012ade:	d10c      	bne.n	1012afa <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
 1012ae0:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
 1012ae2:	f386 8811 	msr	BASEPRI, r6
 1012ae6:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
 1012aea:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
 1012aee:	6843      	ldr	r3, [r0, #4]
 1012af0:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 1012af4:	4798      	blx	r3
	return 0;
 1012af6:	2000      	movs	r0, #0
}
 1012af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
 1012afa:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
 1012afe:	42af      	cmp	r7, r5
 1012b00:	f386 8811 	msr	BASEPRI, r6
 1012b04:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
 1012b08:	bf0c      	ite	eq
 1012b0a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
 1012b0e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 1012b12:	e7f1      	b.n	1012af8 <async_start+0x42>

01012b14 <api_start>:
{
 1012b14:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
 1012b16:	2480      	movs	r4, #128	; 0x80
 1012b18:	9400      	str	r4, [sp, #0]
 1012b1a:	f7ff ffcc 	bl	1012ab6 <async_start>
}
 1012b1e:	b002      	add	sp, #8
 1012b20:	bd10      	pop	{r4, pc}

01012b22 <onoff_started_callback>:
{
 1012b22:	b410      	push	{r4}
	notify(mgr, 0);
 1012b24:	241c      	movs	r4, #28
	return &data->mgr[type];
 1012b26:	6900      	ldr	r0, [r0, #16]
 1012b28:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
 1012b2a:	fb03 0004 	mla	r0, r3, r4, r0
 1012b2e:	2100      	movs	r1, #0
}
 1012b30:	bc10      	pop	{r4}
	notify(mgr, 0);
 1012b32:	4710      	bx	r2

01012b34 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
 1012b34:	2000      	movs	r0, #0
 1012b36:	f7f5 ba3d 	b.w	1007fb4 <nrfx_clock_start>

01012b3a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
 1012b3a:	2000      	movs	r0, #0
 1012b3c:	f000 b92b 	b.w	1012d96 <nrfx_clock_stop>

01012b40 <blocking_start_callback>:
{
 1012b40:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
 1012b42:	f7fd bd3b 	b.w	10105bc <z_impl_k_sem_give>

01012b46 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1012b46:	6843      	ldr	r3, [r0, #4]
}
 1012b48:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1012b4a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
 1012b4c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
 1012b4e:	600b      	str	r3, [r1, #0]
}
 1012b50:	4770      	bx	lr

01012b52 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1012b52:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
 1012b54:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1012b58:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
 1012b5a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
 1012b5e:	6098      	str	r0, [r3, #8]
}
 1012b60:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
 1012b62:	60d9      	str	r1, [r3, #12]
 1012b64:	4770      	bx	lr

01012b66 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1012b66:	6843      	ldr	r3, [r0, #4]
}
 1012b68:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1012b6a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
 1012b6c:	6099      	str	r1, [r3, #8]
}
 1012b6e:	4770      	bx	lr

01012b70 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1012b70:	6843      	ldr	r3, [r0, #4]
}
 1012b72:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1012b74:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
 1012b76:	60d9      	str	r1, [r3, #12]
}
 1012b78:	4770      	bx	lr

01012b7a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1012b7a:	6843      	ldr	r3, [r0, #4]
 1012b7c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
 1012b7e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
 1012b80:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
 1012b84:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
 1012b86:	6090      	str	r0, [r2, #8]
}
 1012b88:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
 1012b8a:	60d3      	str	r3, [r2, #12]
 1012b8c:	4770      	bx	lr

01012b8e <gpio_nrfx_manage_callback>:
{
 1012b8e:	b510      	push	{r4, lr}
	return port->data;
 1012b90:	6903      	ldr	r3, [r0, #16]
	return list->head;
 1012b92:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
 1012b94:	b1f8      	cbz	r0, 1012bd6 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 1012b96:	4288      	cmp	r0, r1
 1012b98:	d119      	bne.n	1012bce <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 1012b9a:	689c      	ldr	r4, [r3, #8]
	return node->next;
 1012b9c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 1012b9e:	42a1      	cmp	r1, r4
	list->head = node;
 1012ba0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 1012ba2:	d100      	bne.n	1012ba6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
 1012ba4:	6098      	str	r0, [r3, #8]
	parent->next = child;
 1012ba6:	2000      	movs	r0, #0
 1012ba8:	6008      	str	r0, [r1, #0]
	if (set) {
 1012baa:	b12a      	cbz	r2, 1012bb8 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
 1012bac:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 1012bae:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 1012bb0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 1012bb2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 1012bb4:	b902      	cbnz	r2, 1012bb8 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
 1012bb6:	6099      	str	r1, [r3, #8]
	return 0;
 1012bb8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
 1012bba:	e010      	b.n	1012bde <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 1012bbc:	4281      	cmp	r1, r0
 1012bbe:	d106      	bne.n	1012bce <gpio_nrfx_manage_callback+0x40>
	return node->next;
 1012bc0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 1012bc2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 1012bc4:	6898      	ldr	r0, [r3, #8]
 1012bc6:	4281      	cmp	r1, r0
 1012bc8:	d1ed      	bne.n	1012ba6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
 1012bca:	609c      	str	r4, [r3, #8]
}
 1012bcc:	e7eb      	b.n	1012ba6 <gpio_nrfx_manage_callback+0x18>
	return node->next;
 1012bce:	4604      	mov	r4, r0
 1012bd0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 1012bd2:	2800      	cmp	r0, #0
 1012bd4:	d1f2      	bne.n	1012bbc <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
 1012bd6:	2a00      	cmp	r2, #0
 1012bd8:	d1e8      	bne.n	1012bac <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
 1012bda:	f06f 0015 	mvn.w	r0, #21
}
 1012bde:	bd10      	pop	{r4, pc}

01012be0 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1012be0:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
 1012be2:	f100 0350 	add.w	r3, r0, #80	; 0x50
 1012be6:	009b      	lsls	r3, r3, #2
 1012be8:	b29b      	uxth	r3, r3
 1012bea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1012bee:	f503 33b0 	add.w	r3, r3, #90112	; 0x16000
 1012bf2:	601a      	str	r2, [r3, #0]
 1012bf4:	681b      	ldr	r3, [r3, #0]
}
 1012bf6:	4770      	bx	lr

01012bf8 <z_nrf_rtc_timer_compare_int_lock>:
	return compare_int_lock(chan);
 1012bf8:	f7f4 beca 	b.w	1007990 <compare_int_lock>

01012bfc <z_nrf_rtc_timer_compare_int_unlock>:
	compare_int_unlock(chan, key);
 1012bfc:	f7f4 bf0c 	b.w	1007a18 <compare_int_unlock>

01012c00 <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
 1012c00:	f7f4 bf86 	b.w	1007b10 <compare_set>

01012c04 <sys_clock_cycle_get_32>:
{
 1012c04:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
 1012c06:	f7f4 ff61 	bl	1007acc <z_nrf_rtc_timer_read>
}
 1012c0a:	bd08      	pop	{r3, pc}

01012c0c <mbox_dispatcher>:
{
 1012c0c:	b430      	push	{r4, r5}
	if (data->cb[channel] != NULL) {
 1012c0e:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
{
 1012c12:	460c      	mov	r4, r1
 1012c14:	eb01 0280 	add.w	r2, r1, r0, lsl #2
	if (data->cb[channel] != NULL) {
 1012c18:	b13d      	cbz	r5, 1012c2a <mbox_dispatcher+0x1e>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
 1012c1a:	4601      	mov	r1, r0
 1012c1c:	46ac      	mov	ip, r5
 1012c1e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 1012c22:	2300      	movs	r3, #0
}
 1012c24:	bc30      	pop	{r4, r5}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
 1012c26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 1012c28:	4760      	bx	ip
}
 1012c2a:	bc30      	pop	{r4, r5}
 1012c2c:	4770      	bx	lr

01012c2e <mbox_nrf_register_callback>:
{
 1012c2e:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
 1012c30:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
 1012c32:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
 1012c34:	bf9f      	itttt	ls
 1012c36:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
 1012c3a:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
 1012c3e:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
 1012c40:	2000      	movls	r0, #0
		return -EINVAL;
 1012c42:	bf88      	it	hi
 1012c44:	f06f 0015 	mvnhi.w	r0, #21
}
 1012c48:	bd10      	pop	{r4, pc}

01012c4a <mbox_nrf_mtu_get>:
}
 1012c4a:	2000      	movs	r0, #0
 1012c4c:	4770      	bx	lr

01012c4e <mbox_nrf_max_channels_get>:
}
 1012c4e:	2010      	movs	r0, #16
 1012c50:	4770      	bx	lr

01012c52 <mbox_nrf_send>:
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
 1012c52:	290f      	cmp	r1, #15
 1012c54:	d80e      	bhi.n	1012c74 <mbox_nrf_send+0x22>
 1012c56:	6843      	ldr	r3, [r0, #4]
 1012c58:	685b      	ldr	r3, [r3, #4]
 1012c5a:	40cb      	lsrs	r3, r1
 1012c5c:	07db      	lsls	r3, r3, #31
 1012c5e:	d509      	bpl.n	1012c74 <mbox_nrf_send+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1012c60:	2201      	movs	r2, #1
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
 1012c62:	008b      	lsls	r3, r1, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1012c64:	b2db      	uxtb	r3, r3
 1012c66:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1012c6a:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
	return 0;
 1012c6e:	2000      	movs	r0, #0
 1012c70:	601a      	str	r2, [r3, #0]

NRFX_STATIC_INLINE void nrfx_ipc_signal(uint8_t send_index)
{
    NRFX_ASSERT(send_index < IPC_CONF_NUM);
    nrf_ipc_task_trigger(NRF_IPC, nrf_ipc_send_task_get(send_index));
}
 1012c72:	4770      	bx	lr
		return -EINVAL;
 1012c74:	f06f 0015 	mvn.w	r0, #21
}
 1012c78:	4770      	bx	lr

01012c7a <mbox_nrf_set_enabled>:
{
 1012c7a:	b538      	push	{r3, r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
 1012c7c:	290f      	cmp	r1, #15
{
 1012c7e:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
 1012c80:	6905      	ldr	r5, [r0, #16]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
 1012c82:	d833      	bhi.n	1012cec <mbox_nrf_set_enabled+0x72>
 1012c84:	6843      	ldr	r3, [r0, #4]
 1012c86:	681b      	ldr	r3, [r3, #0]
 1012c88:	40cb      	lsrs	r3, r1
 1012c8a:	07db      	lsls	r3, r3, #31
 1012c8c:	d52e      	bpl.n	1012cec <mbox_nrf_set_enabled+0x72>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
 1012c8e:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 1012c92:	fa21 f304 	lsr.w	r3, r1, r4
 1012c96:	f003 0301 	and.w	r3, r3, #1
 1012c9a:	b91a      	cbnz	r2, 1012ca4 <mbox_nrf_set_enabled+0x2a>
 1012c9c:	b99b      	cbnz	r3, 1012cc6 <mbox_nrf_set_enabled+0x4c>
		return -EALREADY;
 1012c9e:	f06f 0077 	mvn.w	r0, #119	; 0x77
 1012ca2:	e022      	b.n	1012cea <mbox_nrf_set_enabled+0x70>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
 1012ca4:	2b00      	cmp	r3, #0
 1012ca6:	d1fa      	bne.n	1012c9e <mbox_nrf_set_enabled+0x24>
	if (enable && data->enabled_mask == 0) {
 1012ca8:	b911      	cbnz	r1, 1012cb0 <mbox_nrf_set_enabled+0x36>
		irq_enable(DT_INST_IRQN(0));
 1012caa:	2012      	movs	r0, #18
 1012cac:	f7f3 fe4e 	bl	100694c <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
 1012cb0:	2201      	movs	r2, #1
 1012cb2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 1012cb6:	40a2      	lsls	r2, r4
 1012cb8:	4313      	orrs	r3, r2
 1012cba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
 1012cbe:	b2e0      	uxtb	r0, r4
 1012cc0:	f7fc fdfe 	bl	100f8c0 <nrfx_ipc_receive_event_enable>
 1012cc4:	e00a      	b.n	1012cdc <mbox_nrf_set_enabled+0x62>
		nrfx_ipc_receive_event_disable(channel);
 1012cc6:	b2e0      	uxtb	r0, r4
 1012cc8:	f7fc fe02 	bl	100f8d0 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
 1012ccc:	2201      	movs	r2, #1
 1012cce:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 1012cd2:	40a2      	lsls	r2, r4
 1012cd4:	ea23 0302 	bic.w	r3, r3, r2
 1012cd8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
 1012cdc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 1012ce0:	b913      	cbnz	r3, 1012ce8 <mbox_nrf_set_enabled+0x6e>
		irq_disable(DT_INST_IRQN(0));
 1012ce2:	2012      	movs	r0, #18
 1012ce4:	f7f3 fe40 	bl	1006968 <arch_irq_disable>
	return 0;
 1012ce8:	2000      	movs	r0, #0
}
 1012cea:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 1012cec:	f06f 0015 	mvn.w	r0, #21
 1012cf0:	e7fb      	b.n	1012cea <mbox_nrf_set_enabled+0x70>

01012cf2 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
 1012cf2:	2000      	movs	r0, #0
{
 1012cf4:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
 1012cf6:	f7f4 f85f 	bl	1006db8 <sys_arch_reboot>

01012cfa <m_assert_handler>:
	k_oops();
 1012cfa:	4040      	eors	r0, r0
 1012cfc:	f380 8811 	msr	BASEPRI, r0
 1012d00:	f04f 0003 	mov.w	r0, #3
 1012d04:	df02      	svc	2
}
 1012d06:	4770      	bx	lr

01012d08 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
 1012d08:	4668      	mov	r0, sp
 1012d0a:	f020 0107 	bic.w	r1, r0, #7
 1012d0e:	468d      	mov	sp, r1
 1012d10:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
 1012d12:	f7ef ff27 	bl	1002b64 <MPSL_IRQ_TIMER0_Handler>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
 1012d16:	f7f3 ff17 	bl	1006b48 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
 1012d1a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 1012d1e:	4685      	mov	sp, r0
 1012d20:	4770      	bx	lr

01012d22 <mpsl_low_prio_work_handler>:
{
 1012d22:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
 1012d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 1012d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1012d2c:	f7f5 f8d8 	bl	1007ee0 <multithreading_lock_acquire>
	mpsl_low_priority_process();
 1012d30:	f7f2 fbb7 	bl	10054a2 <mpsl_low_priority_process>
}
 1012d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
 1012d38:	f7f5 b8da 	b.w	1007ef0 <multithreading_lock_release>

01012d3c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
 1012d3c:	4668      	mov	r0, sp
 1012d3e:	f020 0107 	bic.w	r1, r0, #7
 1012d42:	468d      	mov	sp, r1
 1012d44:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
 1012d46:	f7ef fe7d 	bl	1002a44 <MPSL_IRQ_RTC0_Handler>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
 1012d4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 1012d4e:	4685      	mov	sp, r0
 1012d50:	4770      	bx	lr

01012d52 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
 1012d52:	4668      	mov	r0, sp
 1012d54:	f020 0107 	bic.w	r1, r0, #7
 1012d58:	468d      	mov	sp, r1
 1012d5a:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
 1012d5c:	f7ef f802 	bl	1001d64 <MPSL_IRQ_RADIO_Handler>
 1012d60:	f7f3 fef2 	bl	1006b48 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
 1012d64:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 1012d68:	4685      	mov	sp, r0
 1012d6a:	4770      	bx	lr

01012d6c <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
 1012d6c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
 1012d6e:	f7f2 fc7d 	bl	100566c <mpsl_fem_init>

	return 0;
}
 1012d72:	2000      	movs	r0, #0
 1012d74:	bd08      	pop	{r3, pc}

01012d76 <nrf_802154_configure>:

	nrf_802154_cca_cfg_set(&cca_cfg);
}

static int nrf_802154_configure(const struct device *dev)
{
 1012d76:	b507      	push	{r0, r1, r2, lr}
	nrf_802154_cca_cfg_get(&cca_cfg);
 1012d78:	a801      	add	r0, sp, #4
 1012d7a:	f000 f919 	bl	1012fb0 <nrf_802154_cca_cfg_get>
	cca_cfg.ed_threshold = NRF_802154_CCA_ED_THRESHOLD_DEFAULT + LNA_GAIN;
 1012d7e:	232d      	movs	r3, #45	; 0x2d
	nrf_802154_cca_cfg_set(&cca_cfg);
 1012d80:	a801      	add	r0, sp, #4
	cca_cfg.ed_threshold = NRF_802154_CCA_ED_THRESHOLD_DEFAULT + LNA_GAIN;
 1012d82:	f88d 3005 	strb.w	r3, [sp, #5]
	cca_cfg.corr_threshold = NRF_802154_CCA_CORR_THRESHOLD_DEFAULT + LNA_GAIN;
 1012d86:	f88d 3006 	strb.w	r3, [sp, #6]
	nrf_802154_cca_cfg_set(&cca_cfg);
 1012d8a:	f000 f90a 	bl	1012fa2 <nrf_802154_cca_cfg_set>
	ARG_UNUSED(dev);

	ccaed_threshold_configure();

	return 0;
}
 1012d8e:	2000      	movs	r0, #0
 1012d90:	b003      	add	sp, #12
 1012d92:	f85d fb04 	ldr.w	pc, [sp], #4

01012d96 <nrfx_clock_stop>:
	switch (domain) {
 1012d96:	2801      	cmp	r0, #1
 1012d98:	d101      	bne.n	1012d9e <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
 1012d9a:	f7f0 b9e1 	b.w	1003160 <mpsl_clock_hfclk_release>
}
 1012d9e:	4770      	bx	lr

01012da0 <nrfx_clock_enable>:
}
 1012da0:	4770      	bx	lr

01012da2 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
 1012da2:	f7f0 ba2d 	b.w	1003200 <MPSL_IRQ_CLOCK_Handler>

01012da6 <temp_nrf5_mpsl_init>:
	(void)dev;

	LOG_DBG("");

	return 0;
}
 1012da6:	2000      	movs	r0, #0
 1012da8:	4770      	bx	lr

01012daa <temp_nrf5_mpsl_sample_fetch>:
{
 1012daa:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
 1012dac:	2939      	cmp	r1, #57	; 0x39
	struct temp_nrf5_mpsl_data *data = dev->data;
 1012dae:	6904      	ldr	r4, [r0, #16]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
 1012db0:	d001      	beq.n	1012db6 <temp_nrf5_mpsl_sample_fetch+0xc>
 1012db2:	290c      	cmp	r1, #12
 1012db4:	d104      	bne.n	1012dc0 <temp_nrf5_mpsl_sample_fetch+0x16>
	data->sample = mpsl_temperature_get();
 1012db6:	f7f0 fc75 	bl	10036a4 <mpsl_temperature_get>
 1012dba:	6020      	str	r0, [r4, #0]
	return 0;
 1012dbc:	2000      	movs	r0, #0
}
 1012dbe:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 1012dc0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1012dc4:	e7fb      	b.n	1012dbe <temp_nrf5_mpsl_sample_fetch+0x14>

01012dc6 <nrf_802154_clock_init>:
}
 1012dc6:	4770      	bx	lr

01012dc8 <nrf_802154_irq_init>:
{
 1012dc8:	b513      	push	{r0, r1, r4, lr}
	if (prio < 0) {
 1012dca:	2900      	cmp	r1, #0
		flags |= IRQ_ZERO_LATENCY;
 1012dcc:	bfae      	itee	ge
 1012dce:	2400      	movge	r4, #0
 1012dd0:	2401      	movlt	r4, #1
 1012dd2:	2100      	movlt	r1, #0
static inline int
irq_connect_dynamic(unsigned int irq, unsigned int priority,
		    void (*routine)(const void *parameter),
		    const void *parameter, uint32_t flags)
{
	return arch_irq_connect_dynamic(irq, priority, routine, parameter,
 1012dd4:	2300      	movs	r3, #0
 1012dd6:	9400      	str	r4, [sp, #0]
 1012dd8:	f7ff fd67 	bl	10128aa <arch_irq_connect_dynamic>
}
 1012ddc:	b002      	add	sp, #8
 1012dde:	bd10      	pop	{r4, pc}

01012de0 <nrf_802154_irq_enable>:
	irq_enable(irqn);
 1012de0:	f7f3 bdb4 	b.w	100694c <arch_irq_enable>

01012de4 <nrf_802154_irq_disable>:
	irq_disable(irqn);
 1012de4:	f7f3 bdc0 	b.w	1006968 <arch_irq_disable>

01012de8 <nrf_802154_temperature_init>:
}
 1012de8:	4770      	bx	lr

01012dea <nrf_802154_serialization_crit_sect_enter>:
	__asm__ volatile(
 1012dea:	f04f 0240 	mov.w	r2, #64	; 0x40
 1012dee:	f3ef 8311 	mrs	r3, BASEPRI
 1012df2:	f382 8812 	msr	BASEPRI_MAX, r2
 1012df6:	f3bf 8f6f 	isb	sy
#endif

void nrf_802154_serialization_crit_sect_enter(uint32_t *p_critical_section)
{
#ifndef TEST
	*p_critical_section = irq_lock();
 1012dfa:	6003      	str	r3, [r0, #0]
#else
	(void)p_critical_section;
#endif
}
 1012dfc:	4770      	bx	lr

01012dfe <nrf_802154_serialization_crit_sect_exit>:
	__asm__ volatile(
 1012dfe:	f380 8811 	msr	BASEPRI, r0
 1012e02:	f3bf 8f6f 	isb	sy
#ifndef TEST
	irq_unlock(critical_section);
#else
	(void)critical_section;
#endif
}
 1012e06:	4770      	bx	lr

01012e08 <endpoint_received>:
	nrf_802154_spinel_encoded_packet_received(data, len);
 1012e08:	f001 b8f0 	b.w	1013fec <nrf_802154_spinel_encoded_packet_received>

01012e0c <serialization_init>:

#include "nrf_802154.h"
#include "nrf_802154_serialization.h"

static int serialization_init(const struct device *dev)
{
 1012e0c:	b508      	push	{r3, lr}
	/* On NET core we don't use Zephyr's shim layer so we have to call inits manually */
	nrf_802154_init();
 1012e0e:	f7f5 fb5d 	bl	10084cc <nrf_802154_init>

	nrf_802154_serialization_init();
 1012e12:	f7fb f987 	bl	100e124 <nrf_802154_serialization_init>

	return 0;
}
 1012e16:	2000      	movs	r0, #0
 1012e18:	bd08      	pop	{r3, pc}

01012e1a <timer_handler>:
{
 1012e1a:	b508      	push	{r3, lr}
	uint64_t curr_time = z_nrf_rtc_timer_read();
 1012e1c:	f7f4 fe56 	bl	1007acc <z_nrf_rtc_timer_read>
}
 1012e20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	nrf_802154_sl_timer_handler(curr_time);
 1012e24:	f7fe bd90 	b.w	1011948 <nrf_802154_sl_timer_handler>

01012e28 <timer_start_at>:
{
 1012e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
	z_nrf_rtc_timer_set(timer->chan, target_time, timer->handler, NULL);
 1012e2a:	2100      	movs	r1, #0
 1012e2c:	9101      	str	r1, [sp, #4]
 1012e2e:	6801      	ldr	r1, [r0, #0]
{
 1012e30:	4604      	mov	r4, r0
	z_nrf_rtc_timer_set(timer->chan, target_time, timer->handler, NULL);
 1012e32:	9100      	str	r1, [sp, #0]
 1012e34:	6900      	ldr	r0, [r0, #16]
{
 1012e36:	4616      	mov	r6, r2
 1012e38:	461d      	mov	r5, r3
	z_nrf_rtc_timer_set(timer->chan, target_time, timer->handler, NULL);
 1012e3a:	f7ff fee1 	bl	1012c00 <z_nrf_rtc_timer_set>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1012e3e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 1012e42:	b672      	cpsid	i
	timer->target_time = target_time;
 1012e44:	e9c4 6502 	strd	r6, r5, [r4, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1012e48:	f383 8810 	msr	PRIMASK, r3
}
 1012e4c:	b002      	add	sp, #8
 1012e4e:	bd70      	pop	{r4, r5, r6, pc}

01012e50 <nrf_802154_platform_sl_lptimer_current_lpticks_get>:
	return z_nrf_rtc_timer_read();
 1012e50:	f7f4 be3c 	b.w	1007acc <z_nrf_rtc_timer_read>

01012e54 <nrf_802154_platform_sl_lptimer_us_to_lpticks_convert>:
	return NRF_802154_SL_US_TO_RTC_TICKS(us, round_up);
 1012e54:	f7fe bd92 	b.w	101197c <NRF_802154_SL_US_TO_RTC_TICKS>

01012e58 <nrf_802154_platform_sl_lptimer_lpticks_to_us_convert>:
	return NRF_802154_SL_RTC_TICKS_TO_US(lpticks);
 1012e58:	f643 5209 	movw	r2, #15625	; 0x3d09
 1012e5c:	fba0 0302 	umull	r0, r3, r0, r2
 1012e60:	fb02 3101 	mla	r1, r2, r1, r3
 1012e64:	f240 13ff 	movw	r3, #511	; 0x1ff
 1012e68:	18c0      	adds	r0, r0, r3
 1012e6a:	f141 0100 	adc.w	r1, r1, #0
 1012e6e:	0a40      	lsrs	r0, r0, #9
}
 1012e70:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 1012e74:	0a49      	lsrs	r1, r1, #9
 1012e76:	4770      	bx	lr

01012e78 <nrf_802154_platform_sl_lptimer_granularity_get>:
}
 1012e78:	201f      	movs	r0, #31
 1012e7a:	4770      	bx	lr

01012e7c <nrf_802154_channel_set>:
{
 1012e7c:	b538      	push	{r3, r4, r5, lr}
 1012e7e:	4604      	mov	r4, r0
    bool changed = nrf_802154_pib_channel_get() != channel;
 1012e80:	f7f7 f954 	bl	100a12c <nrf_802154_pib_channel_get>
 1012e84:	4605      	mov	r5, r0
    nrf_802154_pib_channel_set(channel);
 1012e86:	4620      	mov	r0, r4
 1012e88:	f7f7 f956 	bl	100a138 <nrf_802154_pib_channel_set>
    if (changed)
 1012e8c:	42a5      	cmp	r5, r4
 1012e8e:	d004      	beq.n	1012e9a <nrf_802154_channel_set+0x1e>
}
 1012e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (void)nrf_802154_request_channel_update(REQ_ORIG_HIGHER_LAYER);
 1012e94:	2000      	movs	r0, #0
 1012e96:	f000 bdbb 	b.w	1013a10 <nrf_802154_request_channel_update>
}
 1012e9a:	bd38      	pop	{r3, r4, r5, pc}

01012e9c <nrf_802154_channel_get>:
    return nrf_802154_pib_channel_get();
 1012e9c:	f7f7 b946 	b.w	100a12c <nrf_802154_pib_channel_get>

01012ea0 <nrf_802154_tx_power_set>:
    nrf_802154_pib_tx_power_set(power);
 1012ea0:	f7f7 b958 	b.w	100a154 <nrf_802154_pib_tx_power_set>

01012ea4 <nrf_802154_tx_power_get>:
    nrf_802154_fal_tx_power_split_t split_power = {0};
 1012ea4:	2300      	movs	r3, #0
{
 1012ea6:	b507      	push	{r0, r1, r2, lr}
    return nrf_802154_tx_power_split_pib_power_get(&split_power);
 1012ea8:	a801      	add	r0, sp, #4
    nrf_802154_fal_tx_power_split_t split_power = {0};
 1012eaa:	f8ad 3004 	strh.w	r3, [sp, #4]
 1012eae:	f88d 3006 	strb.w	r3, [sp, #6]
    return nrf_802154_tx_power_split_pib_power_get(&split_power);
 1012eb2:	f000 fb3a 	bl	101352a <nrf_802154_tx_power_split_pib_power_get>
}
 1012eb6:	b003      	add	sp, #12
 1012eb8:	f85d fb04 	ldr.w	pc, [sp], #4

01012ebc <nrf_802154_temperature_changed>:
    nrf_802154_request_cca_cfg_update();
 1012ebc:	f000 bdc4 	b.w	1013a48 <nrf_802154_request_cca_cfg_update>

01012ec0 <nrf_802154_pan_id_set>:
    nrf_802154_pib_pan_id_set(p_pan_id);
 1012ec0:	f7f7 b952 	b.w	100a168 <nrf_802154_pib_pan_id_set>

01012ec4 <nrf_802154_extended_address_set>:
    nrf_802154_pib_extended_address_set(p_extended_address);
 1012ec4:	f7f7 b95c 	b.w	100a180 <nrf_802154_pib_extended_address_set>

01012ec8 <nrf_802154_short_address_set>:
    nrf_802154_pib_short_address_set(p_short_address);
 1012ec8:	f7f7 b966 	b.w	100a198 <nrf_802154_pib_short_address_set>

01012ecc <nrf_802154_sleep>:
    result = nrf_802154_request_sleep(NRF_802154_TERM_802154);
 1012ecc:	2001      	movs	r0, #1
 1012ece:	f000 bc98 	b.w	1013802 <nrf_802154_request_sleep>

01012ed2 <nrf_802154_sleep_if_idle>:
{
 1012ed2:	b508      	push	{r3, lr}
        nrf_802154_request_sleep(NRF_802154_TERM_NONE) ? NRF_802154_SLEEP_ERROR_NONE :
 1012ed4:	2000      	movs	r0, #0
 1012ed6:	f000 fc94 	bl	1013802 <nrf_802154_request_sleep>
 1012eda:	f080 0001 	eor.w	r0, r0, #1
}
 1012ede:	b2c0      	uxtb	r0, r0
 1012ee0:	bd08      	pop	{r3, pc}

01012ee2 <nrf_802154_receive>:
    result = nrf_802154_request_receive(NRF_802154_TERM_802154,
 1012ee2:	f06f 0301 	mvn.w	r3, #1
{
 1012ee6:	b507      	push	{r0, r1, r2, lr}
    result = nrf_802154_request_receive(NRF_802154_TERM_802154,
 1012ee8:	2200      	movs	r2, #0
 1012eea:	9300      	str	r3, [sp, #0]
 1012eec:	2301      	movs	r3, #1
 1012eee:	4611      	mov	r1, r2
 1012ef0:	4618      	mov	r0, r3
 1012ef2:	f000 fca2 	bl	101383a <nrf_802154_request_receive>
}
 1012ef6:	b003      	add	sp, #12
 1012ef8:	f85d fb04 	ldr.w	pc, [sp], #4

01012efc <nrf_802154_transmit_raw_at>:
{
 1012efc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 1012efe:	461d      	mov	r5, r3
    nrf_802154_transmit_at_metadata_t metadata_default =
 1012f00:	2300      	movs	r3, #0
 1012f02:	9302      	str	r3, [sp, #8]
 1012f04:	f8ad 300c 	strh.w	r3, [sp, #12]
 1012f08:	2301      	movs	r3, #1
{
 1012f0a:	9908      	ldr	r1, [sp, #32]
 1012f0c:	4604      	mov	r4, r0
 1012f0e:	4616      	mov	r6, r2
    nrf_802154_transmit_at_metadata_t metadata_default =
 1012f10:	f88d 300a 	strb.w	r3, [sp, #10]
    if (p_metadata == NULL)
 1012f14:	b921      	cbnz	r1, 1012f20 <nrf_802154_transmit_raw_at+0x24>
    return nrf_802154_pib_channel_get();
 1012f16:	f7f7 f909 	bl	100a12c <nrf_802154_pib_channel_get>
        p_metadata               = &metadata_default;
 1012f1a:	a902      	add	r1, sp, #8
        metadata_default.channel = nrf_802154_channel_get();
 1012f1c:	f88d 000b 	strb.w	r0, [sp, #11]
    result = are_frame_properties_valid(&p_metadata->frame_props);
 1012f20:	7848      	ldrb	r0, [r1, #1]
    return p_props->dynamic_data_is_set || !(p_props->is_secured);
 1012f22:	780b      	ldrb	r3, [r1, #0]
 1012f24:	b900      	cbnz	r0, 1012f28 <nrf_802154_transmit_raw_at+0x2c>
 1012f26:	b92b      	cbnz	r3, 1012f34 <nrf_802154_transmit_raw_at+0x38>
        result = nrf_802154_request_transmit_raw_at(p_data, tx_time, p_metadata);
 1012f28:	4632      	mov	r2, r6
 1012f2a:	462b      	mov	r3, r5
 1012f2c:	4620      	mov	r0, r4
 1012f2e:	9100      	str	r1, [sp, #0]
 1012f30:	f000 fda4 	bl	1013a7c <nrf_802154_request_transmit_raw_at>
}
 1012f34:	b004      	add	sp, #16
 1012f36:	bd70      	pop	{r4, r5, r6, pc}

01012f38 <nrf_802154_transmit_at_cancel>:
    result = nrf_802154_request_transmit_at_cancel();
 1012f38:	f000 bdc6 	b.w	1013ac8 <nrf_802154_request_transmit_at_cancel>

01012f3c <nrf_802154_receive_at>:
    result = nrf_802154_request_receive_at(rx_time, timeout, channel, id);
 1012f3c:	f000 bdde 	b.w	1013afc <nrf_802154_request_receive_at>

01012f40 <nrf_802154_receive_at_cancel>:
    result = nrf_802154_request_receive_at_cancel(id);
 1012f40:	f000 be08 	b.w	1013b54 <nrf_802154_request_receive_at_cancel>

01012f44 <nrf_802154_energy_detection>:
{
 1012f44:	4601      	mov	r1, r0
    result = nrf_802154_request_energy_detection(NRF_802154_TERM_NONE, time_us);
 1012f46:	2000      	movs	r0, #0
 1012f48:	f000 bcd1 	b.w	10138ee <nrf_802154_request_energy_detection>

01012f4c <nrf_802154_cca>:
    result = nrf_802154_request_cca(NRF_802154_TERM_NONE);
 1012f4c:	2000      	movs	r0, #0
 1012f4e:	f000 bced 	b.w	101392c <nrf_802154_request_cca>

01012f52 <nrf_802154_continuous_carrier>:
    result = nrf_802154_request_continuous_carrier(NRF_802154_TERM_NONE);
 1012f52:	2000      	movs	r0, #0
 1012f54:	f000 bd06 	b.w	1013964 <nrf_802154_request_continuous_carrier>

01012f58 <nrf_802154_buffer_free_raw>:
    result = nrf_802154_request_buffer_free(p_data);
 1012f58:	f000 bd3f 	b.w	10139da <nrf_802154_request_buffer_free>

01012f5c <nrf_802154_promiscuous_set>:
    nrf_802154_pib_promiscuous_set(enabled);
 1012f5c:	f7f7 b8c6 	b.w	100a0ec <nrf_802154_pib_promiscuous_set>

01012f60 <nrf_802154_pan_coord_set>:
    nrf_802154_pib_pan_coord_set(enabled);
 1012f60:	f7f7 b8dc 	b.w	100a11c <nrf_802154_pib_pan_coord_set>

01012f64 <nrf_802154_src_addr_matching_method_set>:
    nrf_802154_ack_data_src_addr_matching_method_set(match_method);
 1012f64:	f7f9 bf6a 	b.w	100ce3c <nrf_802154_ack_data_src_addr_matching_method_set>

01012f68 <nrf_802154_ack_data_set>:
{
 1012f68:	b410      	push	{r4}
 1012f6a:	4614      	mov	r4, r2
    return nrf_802154_ack_data_for_addr_set(p_addr, extended, data_type, p_data, length);
 1012f6c:	b2db      	uxtb	r3, r3
{
 1012f6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    return nrf_802154_ack_data_for_addr_set(p_addr, extended, data_type, p_data, length);
 1012f72:	9301      	str	r3, [sp, #4]
 1012f74:	4623      	mov	r3, r4
}
 1012f76:	bc10      	pop	{r4}
    return nrf_802154_ack_data_for_addr_set(p_addr, extended, data_type, p_data, length);
 1012f78:	f7f9 be90 	b.w	100cc9c <nrf_802154_ack_data_for_addr_set>

01012f7c <nrf_802154_ack_data_clear>:
    return nrf_802154_ack_data_for_addr_clear(p_addr, extended, data_type);
 1012f7c:	f7f9 bf02 	b.w	100cd84 <nrf_802154_ack_data_for_addr_clear>

01012f80 <nrf_802154_auto_pending_bit_set>:
    nrf_802154_ack_data_enable(enabled);
 1012f80:	f7f9 be86 	b.w	100cc90 <nrf_802154_ack_data_enable>

01012f84 <nrf_802154_pending_bit_for_addr_set>:
    return nrf_802154_ack_data_for_addr_set(p_addr,
 1012f84:	2300      	movs	r3, #0
{
 1012f86:	b507      	push	{r0, r1, r2, lr}
    return nrf_802154_ack_data_for_addr_set(p_addr,
 1012f88:	461a      	mov	r2, r3
 1012f8a:	9300      	str	r3, [sp, #0]
 1012f8c:	f7f9 fe86 	bl	100cc9c <nrf_802154_ack_data_for_addr_set>
}
 1012f90:	b003      	add	sp, #12
 1012f92:	f85d fb04 	ldr.w	pc, [sp], #4

01012f96 <nrf_802154_pending_bit_for_addr_clear>:
    return nrf_802154_ack_data_for_addr_clear(p_addr, extended, NRF_802154_ACK_DATA_PENDING_BIT);
 1012f96:	2200      	movs	r2, #0
 1012f98:	f7f9 bef4 	b.w	100cd84 <nrf_802154_ack_data_for_addr_clear>

01012f9c <nrf_802154_pending_bit_for_addr_reset>:
    nrf_802154_ack_data_reset(extended, NRF_802154_ACK_DATA_PENDING_BIT);
 1012f9c:	2100      	movs	r1, #0
 1012f9e:	f7f9 bf33 	b.w	100ce08 <nrf_802154_ack_data_reset>

01012fa2 <nrf_802154_cca_cfg_set>:
{
 1012fa2:	b508      	push	{r3, lr}
    nrf_802154_pib_cca_cfg_set(p_cca_cfg);
 1012fa4:	f7f7 f900 	bl	100a1a8 <nrf_802154_pib_cca_cfg_set>
}
 1012fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_request_cca_cfg_update();
 1012fac:	f000 bd4c 	b.w	1013a48 <nrf_802154_request_cca_cfg_update>

01012fb0 <nrf_802154_cca_cfg_get>:
    nrf_802154_pib_cca_cfg_get(p_cca_cfg);
 1012fb0:	f7f7 b918 	b.w	100a1e4 <nrf_802154_pib_cca_cfg_get>

01012fb4 <nrf_802154_csma_ca_min_be_set>:
    return nrf_802154_pib_csmaca_min_be_set(min_be);
 1012fb4:	f7f7 b928 	b.w	100a208 <nrf_802154_pib_csmaca_min_be_set>

01012fb8 <nrf_802154_csma_ca_min_be_get>:
    return nrf_802154_pib_csmaca_min_be_get();
 1012fb8:	f7f7 b930 	b.w	100a21c <nrf_802154_pib_csmaca_min_be_get>

01012fbc <nrf_802154_csma_ca_max_be_set>:
    return nrf_802154_pib_csmaca_max_be_set(max_be);
 1012fbc:	f7f7 b934 	b.w	100a228 <nrf_802154_pib_csmaca_max_be_set>

01012fc0 <nrf_802154_csma_ca_max_be_get>:
    return nrf_802154_pib_csmaca_max_be_get();
 1012fc0:	f7f7 b93c 	b.w	100a23c <nrf_802154_pib_csmaca_max_be_get>

01012fc4 <nrf_802154_csma_ca_max_backoffs_set>:
    nrf_802154_pib_csmaca_max_backoffs_set(max_backoffs);
 1012fc4:	f7f7 b940 	b.w	100a248 <nrf_802154_pib_csmaca_max_backoffs_set>

01012fc8 <nrf_802154_csma_ca_max_backoffs_get>:
    return nrf_802154_pib_csmaca_max_backoffs_get();
 1012fc8:	f7f7 b944 	b.w	100a254 <nrf_802154_pib_csmaca_max_backoffs_get>

01012fcc <nrf_802154_ifs_mode_get>:
    return nrf_802154_pib_ifs_mode_get();
 1012fcc:	f7f7 b948 	b.w	100a260 <nrf_802154_pib_ifs_mode_get>

01012fd0 <nrf_802154_ifs_mode_set>:
    return nrf_802154_pib_ifs_mode_set(mode);
 1012fd0:	f7f7 b94c 	b.w	100a26c <nrf_802154_pib_ifs_mode_set>

01012fd4 <nrf_802154_ifs_min_sifs_period_get>:
    return nrf_802154_pib_ifs_min_sifs_period_get();
 1012fd4:	f7f7 b954 	b.w	100a280 <nrf_802154_pib_ifs_min_sifs_period_get>

01012fd8 <nrf_802154_ifs_min_sifs_period_set>:
    nrf_802154_pib_ifs_min_sifs_period_set(period);
 1012fd8:	f7f7 b958 	b.w	100a28c <nrf_802154_pib_ifs_min_sifs_period_set>

01012fdc <nrf_802154_ifs_min_lifs_period_get>:
    return nrf_802154_pib_ifs_min_lifs_period_get();
 1012fdc:	f7f7 b95c 	b.w	100a298 <nrf_802154_pib_ifs_min_lifs_period_get>

01012fe0 <nrf_802154_ifs_min_lifs_period_set>:
    nrf_802154_pib_ifs_min_lifs_period_set(period);
 1012fe0:	f7f7 b960 	b.w	100a2a4 <nrf_802154_pib_ifs_min_lifs_period_set>

01012fe4 <nrf_802154_capabilities_get>:
{
 1012fe4:	b508      	push	{r3, lr}
    nrf_802154_sl_capabilities_t caps_sl  = nrf_802154_sl_capabilities_get();
 1012fe6:	f002 f8b5 	bl	1015154 <nrf_802154_sl_capabilities_get>
                NRF_802154_CAPABILITY_ANT_DIVERSITY : 0UL;
 1012fea:	0043      	lsls	r3, r0, #1
    caps_drv |= (NRF_802154_SL_CAPABILITY_DELAYED_RX & caps_sl) ?
 1012fec:	f000 0207 	and.w	r2, r0, #7
    caps_drv |= (NRF_802154_SL_CAPABILITY_TIMESTAMP & caps_sl) ?
 1012ff0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 1012ff4:	4313      	orrs	r3, r2
    if (NRF_802154_SL_CAPABILITY_MULTITIMER & caps_sl)
 1012ff6:	06c2      	lsls	r2, r0, #27
    caps_drv |= ((NRF_802154_SECURITY_WRITER_ENABLED && NRF_802154_ENCRYPTION_ENABLED) ?
 1012ff8:	bf54      	ite	pl
 1012ffa:	f043 0088 	orrpl.w	r0, r3, #136	; 0x88
        caps_drv |= (NRF_802154_IFS_ENABLED ?
 1012ffe:	f043 00a8 	orrmi.w	r0, r3, #168	; 0xa8
}
 1013002:	bd08      	pop	{r3, pc}

01013004 <nrf_802154_time_get>:
    return nrf_802154_sl_timer_current_time_get();
 1013004:	f002 b978 	b.w	10152f8 <nrf_802154_sl_timer_current_time_get>

01013008 <nrf_802154_security_global_frame_counter_set>:
    nrf_802154_security_pib_global_frame_counter_set(frame_counter);
 1013008:	f7f9 bc7e 	b.w	100c908 <nrf_802154_security_pib_global_frame_counter_set>

0101300c <nrf_802154_security_key_store>:
    return nrf_802154_security_pib_key_store(p_key);
 101300c:	f7f9 bbee 	b.w	100c7ec <nrf_802154_security_pib_key_store>

01013010 <nrf_802154_security_key_remove>:
    return nrf_802154_security_pib_key_remove(p_id);
 1013010:	f7f9 bc46 	b.w	100c8a0 <nrf_802154_security_pib_key_remove>

01013014 <nrf_802154_csl_writer_period_set>:
    nrf_802154_ie_writer_csl_period_set(period);
 1013014:	f7f9 ba66 	b.w	100c4e4 <nrf_802154_ie_writer_csl_period_set>

01013018 <nrf_802154_csl_writer_anchor_time_set>:
    nrf_802154_ie_writer_csl_anchor_time_set(anchor_time);
 1013018:	f7f9 ba6a 	b.w	100c4f0 <nrf_802154_ie_writer_csl_anchor_time_set>

0101301c <nrf_802154_custom_part_of_radio_init>:
}
 101301c:	4770      	bx	lr

0101301e <nrf_802154_tx_started>:
{
    (void)error;
    (void)id;
}

__WEAK void nrf_802154_tx_started(const uint8_t * p_frame)
 101301e:	4770      	bx	lr

01013020 <two_blocks_xor>:
{
 1013020:	b510      	push	{r4, lr}
 1013022:	3801      	subs	r0, #1
 1013024:	440a      	add	r2, r1
    for (uint8_t i = 0; i < len; i++)
 1013026:	4291      	cmp	r1, r2
 1013028:	d100      	bne.n	101302c <two_blocks_xor+0xc>
}
 101302a:	bd10      	pop	{r4, pc}
        p_first[i] ^= p_second[i];
 101302c:	f811 3b01 	ldrb.w	r3, [r1], #1
 1013030:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 1013034:	4063      	eors	r3, r4
 1013036:	7003      	strb	r3, [r0, #0]
    for (uint8_t i = 0; i < len; i++)
 1013038:	e7f5      	b.n	1013026 <two_blocks_xor+0x6>

0101303a <request_preconditions_for_state>:
{
 101303a:	b508      	push	{r3, lr}
    nrf_802154_rsch_crit_sect_prio_request(min_required_rsch_prio(state));
 101303c:	f7f5 fd40 	bl	1008ac0 <min_required_rsch_prio>
}
 1013040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_rsch_crit_sect_prio_request(min_required_rsch_prio(state));
 1013044:	f002 b939 	b.w	10152ba <nrf_802154_rsch_crit_sect_prio_request>

01013048 <transmit_failed_notify>:
{
 1013048:	b570      	push	{r4, r5, r6, lr}
 101304a:	4604      	mov	r4, r0
 101304c:	460d      	mov	r5, r1
 101304e:	4616      	mov	r6, r2
    if (nrf_802154_core_hooks_tx_failed(p_frame, error))
 1013050:	f7f6 ff76 	bl	1009f40 <nrf_802154_core_hooks_tx_failed>
 1013054:	b130      	cbz	r0, 1013064 <transmit_failed_notify+0x1c>
        nrf_802154_notify_transmit_failed(p_frame, error, p_meta);
 1013056:	4632      	mov	r2, r6
 1013058:	4629      	mov	r1, r5
 101305a:	4620      	mov	r0, r4
}
 101305c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        nrf_802154_notify_transmit_failed(p_frame, error, p_meta);
 1013060:	f000 bbb9 	b.w	10137d6 <nrf_802154_notify_transmit_failed>
}
 1013064:	bd70      	pop	{r4, r5, r6, pc}

01013066 <ack_is_requested>:
{
 1013066:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bool result = nrf_802154_frame_parser_data_init(p_frame,
 1013068:	7801      	ldrb	r1, [r0, #0]
 101306a:	466b      	mov	r3, sp
 101306c:	3101      	adds	r1, #1
 101306e:	2201      	movs	r2, #1
 1013070:	b2c9      	uxtb	r1, r1
 1013072:	f000 fafb 	bl	101366c <nrf_802154_frame_parser_data_init>
    return result && nrf_802154_frame_parser_ar_bit_is_set(&frame_data);
 1013076:	b118      	cbz	r0, 1013080 <ack_is_requested+0x1a>
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
 1013078:	9b00      	ldr	r3, [sp, #0]
 101307a:	7858      	ldrb	r0, [r3, #1]
 101307c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
 1013080:	b007      	add	sp, #28
 1013082:	f85d fb04 	ldr.w	pc, [sp], #4

01013086 <rssi_last_measurement_get>:
{
 1013086:	b508      	push	{r3, lr}
    uint8_t rssi_sample = nrf_802154_trx_rssi_last_sample_get();
 1013088:	f7f7 fd5e 	bl	100ab48 <nrf_802154_trx_rssi_last_sample_get>
    rssi_sample = nrf_802154_rssi_sample_corrected_get(rssi_sample);
 101308c:	f000 f9e9 	bl	1013462 <nrf_802154_rssi_sample_corrected_get>
    return -((int8_t)rssi_sample);
 1013090:	4240      	negs	r0, r0
}
 1013092:	b240      	sxtb	r0, r0
 1013094:	bd08      	pop	{r3, pc}

01013096 <timer_coord_timestamp_get>:
{
 1013096:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint64_t timestamp          = NRF_802154_NO_TIMESTAMP;
 1013098:	2400      	movs	r4, #0
 101309a:	2500      	movs	r5, #0
    bool     timestamp_received = nrf_802154_timer_coord_timestamp_get(&timestamp);
 101309c:	4668      	mov	r0, sp
    uint64_t timestamp          = NRF_802154_NO_TIMESTAMP;
 101309e:	e9cd 4500 	strd	r4, r5, [sp]
    bool     timestamp_received = nrf_802154_timer_coord_timestamp_get(&timestamp);
 10130a2:	f7fe fd4f 	bl	1011b44 <nrf_802154_timer_coord_timestamp_get>
    if (!timestamp_received)
 10130a6:	b928      	cbnz	r0, 10130b4 <timer_coord_timestamp_get+0x1e>
        timestamp = NRF_802154_NO_TIMESTAMP;
 10130a8:	e9cd 4500 	strd	r4, r5, [sp]
}
 10130ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 10130b0:	b003      	add	sp, #12
 10130b2:	bd30      	pop	{r4, r5, pc}
    else if (timestamp == NRF_802154_NO_TIMESTAMP)
 10130b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 10130b8:	4313      	orrs	r3, r2
 10130ba:	d1f7      	bne.n	10130ac <timer_coord_timestamp_get+0x16>
        timestamp++;
 10130bc:	2201      	movs	r2, #1
 10130be:	2300      	movs	r3, #0
 10130c0:	e9cd 2300 	strd	r2, r3, [sp]
 10130c4:	e7f2      	b.n	10130ac <timer_coord_timestamp_get+0x16>

010130c6 <critical_section_enter_and_verify_timeslot_length>:
{
 10130c6:	b508      	push	{r3, lr}
    bool result = nrf_802154_critical_section_enter();
 10130c8:	f000 f87f 	bl	10131ca <nrf_802154_critical_section_enter>
    if (result)
 10130cc:	b120      	cbz	r0, 10130d8 <critical_section_enter_and_verify_timeslot_length+0x12>
        if (!critical_section_can_be_processed_now())
 10130ce:	f7f5 fdd9 	bl	1008c84 <critical_section_can_be_processed_now>
 10130d2:	b910      	cbnz	r0, 10130da <critical_section_enter_and_verify_timeslot_length+0x14>
            nrf_802154_critical_section_exit();
 10130d4:	f7f6 ff66 	bl	1009fa4 <nrf_802154_critical_section_exit>
    bool result = nrf_802154_critical_section_enter();
 10130d8:	2000      	movs	r0, #0
}
 10130da:	bd08      	pop	{r3, pc}

010130dc <trx_abort>:
{
 10130dc:	b510      	push	{r4, lr}
    trx_state_t trx_state       = nrf_802154_trx_state_get();
 10130de:	f7f7 ff13 	bl	100af08 <nrf_802154_trx_state_get>
    switch (trx_state)
 10130e2:	2803      	cmp	r0, #3
    trx_state_t trx_state       = nrf_802154_trx_state_get();
 10130e4:	4604      	mov	r4, r0
    switch (trx_state)
 10130e6:	d001      	beq.n	10130ec <trx_abort+0x10>
 10130e8:	2805      	cmp	r0, #5
 10130ea:	d109      	bne.n	1013100 <trx_abort+0x24>
    nrf_802154_trx_abort();
 10130ec:	f7f7 fe54 	bl	100ad98 <nrf_802154_trx_abort>
        uint32_t timestamp = nrf_802154_hp_timer_current_time_get();
 10130f0:	f7f5 f942 	bl	1008378 <nrf_802154_hp_timer_current_time_get>
 10130f4:	4601      	mov	r1, r0
        operation_terminated_update_total_times(trx_state, timestamp);
 10130f6:	4620      	mov	r0, r4
}
 10130f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        operation_terminated_update_total_times(trx_state, timestamp);
 10130fc:	f7f5 be2a 	b.w	1008d54 <operation_terminated_update_total_times>
}
 1013100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_trx_abort();
 1013104:	f7f7 be48 	b.w	100ad98 <nrf_802154_trx_abort>

01013108 <nrf_802154_trx_receive_ack_started>:
    nrf_802154_core_hooks_rx_ack_started();
 1013108:	f000 b854 	b.w	10131b4 <nrf_802154_core_hooks_rx_ack_started>

0101310c <nrf_802154_trx_go_idle_finished>:
{
 101310c:	b508      	push	{r3, lr}
    sleep_init();
 101310e:	f7f5 fd29 	bl	1008b64 <sleep_init>
}
 1013112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    state_set(RADIO_STATE_SLEEP);
 1013116:	2000      	movs	r0, #0
 1013118:	f7f5 bd50 	b.w	1008bbc <state_set>

0101311c <nrf_802154_trx_standalone_cca_finished>:
{
 101311c:	b510      	push	{r4, lr}
 101311e:	4604      	mov	r4, r0
    state_set(RADIO_STATE_RX);
 1013120:	2002      	movs	r0, #2
 1013122:	f7f5 fd4b 	bl	1008bbc <state_set>
    rx_init();
 1013126:	f7f5 fe2f 	bl	1008d88 <rx_init>
    nrf_802154_critical_section_nesting_allow();
 101312a:	f7f6 ffa1 	bl	100a070 <nrf_802154_critical_section_nesting_allow>
    nrf_802154_notify_cca(result);
 101312e:	4620      	mov	r0, r4
 1013130:	f000 fb57 	bl	10137e2 <nrf_802154_notify_cca>
}
 1013134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_nesting_deny();
 1013138:	f7f6 bf56 	b.w	1009fe8 <nrf_802154_critical_section_nesting_deny>

0101313c <nrf_802154_trx_transmit_frame_ccastarted>:
}
 101313c:	4770      	bx	lr

0101313e <nrf_802154_core_cca>:
{
 101313e:	b538      	push	{r3, r4, r5, lr}
 1013140:	4605      	mov	r5, r0
    bool result = critical_section_enter_and_verify_timeslot_length();
 1013142:	f7ff ffc0 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>
    if (result)
 1013146:	4604      	mov	r4, r0
 1013148:	b168      	cbz	r0, 1013166 <nrf_802154_core_cca+0x28>
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
 101314a:	2201      	movs	r2, #1
 101314c:	4628      	mov	r0, r5
 101314e:	4611      	mov	r1, r2
 1013150:	f7f5 ff68 	bl	1009024 <current_operation_terminate>
        if (result)
 1013154:	4604      	mov	r4, r0
 1013156:	b120      	cbz	r0, 1013162 <nrf_802154_core_cca+0x24>
            state_set(RADIO_STATE_CCA);
 1013158:	2008      	movs	r0, #8
 101315a:	f7f5 fd2f 	bl	1008bbc <state_set>
            cca_init();
 101315e:	f7f5 fe73 	bl	1008e48 <cca_init>
        nrf_802154_critical_section_exit();
 1013162:	f7f6 ff1f 	bl	1009fa4 <nrf_802154_critical_section_exit>
}
 1013166:	4620      	mov	r0, r4
 1013168:	bd38      	pop	{r3, r4, r5, pc}

0101316a <nrf_802154_core_continuous_carrier>:
{
 101316a:	b538      	push	{r3, r4, r5, lr}
 101316c:	4605      	mov	r5, r0
    bool result = critical_section_enter_and_verify_timeslot_length();
 101316e:	f7ff ffaa 	bl	10130c6 <critical_section_enter_and_verify_timeslot_length>
    if (result)
 1013172:	4604      	mov	r4, r0
 1013174:	b168      	cbz	r0, 1013192 <nrf_802154_core_continuous_carrier+0x28>
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
 1013176:	2201      	movs	r2, #1
 1013178:	4628      	mov	r0, r5
 101317a:	4611      	mov	r1, r2
 101317c:	f7f5 ff52 	bl	1009024 <current_operation_terminate>
        if (result)
 1013180:	4604      	mov	r4, r0
 1013182:	b120      	cbz	r0, 101318e <nrf_802154_core_continuous_carrier+0x24>
            state_set(RADIO_STATE_CONTINUOUS_CARRIER);
 1013184:	2009      	movs	r0, #9
 1013186:	f7f5 fd19 	bl	1008bbc <state_set>
            continuous_carrier_init();
 101318a:	f7f5 fe6f 	bl	1008e6c <continuous_carrier_init>
        nrf_802154_critical_section_exit();
 101318e:	f7f6 ff09 	bl	1009fa4 <nrf_802154_critical_section_exit>
}
 1013192:	4620      	mov	r0, r4
 1013194:	bd38      	pop	{r3, r4, r5, pc}

01013196 <nrf_802154_core_hooks_pre_transmission>:
        result = m_pre_transmission_hooks[i](p_frame, p_params, notify_function);
 1013196:	f7f9 ba1d 	b.w	100c5d4 <nrf_802154_ifs_pretransmission>

0101319a <nrf_802154_core_hooks_transmitted>:
{
 101319a:	b510      	push	{r4, lr}
 101319c:	4604      	mov	r4, r0
        m_transmitted_hooks[i](p_frame);
 101319e:	f000 fac6 	bl	101372e <nrf_802154_ack_timeout_transmitted_hook>
 10131a2:	4620      	mov	r0, r4
}
 10131a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_transmitted_hooks[i](p_frame);
 10131a8:	f7f9 baaa 	b.w	100c700 <nrf_802154_ifs_transmitted_hook>

010131ac <nrf_802154_core_hooks_tx_ack_failed>:
        m_tx_ack_failed_hooks[i](p_ack, error);
 10131ac:	f000 b930 	b.w	1013410 <nrf_802154_encrypt_tx_ack_failed_hook>

010131b0 <nrf_802154_core_hooks_rx_started>:
        if (m_rx_started_hooks[i] == NULL)
        {
            break;
        }

        m_rx_started_hooks[i](p_frame);
 10131b0:	f7f8 be0e 	b.w	100bdd0 <nrf_802154_delayed_trx_rx_started_hook>

010131b4 <nrf_802154_core_hooks_rx_ack_started>:
        if (m_rx_ack_started_hooks[i] == NULL)
        {
            break;
        }

        m_rx_ack_started_hooks[i]();
 10131b4:	f000 babd 	b.w	1013732 <nrf_802154_ack_timeout_rx_ack_started_hook>

010131b8 <nrf_802154_core_hooks_tx_ack_started>:
    }
}

void nrf_802154_core_hooks_tx_ack_started(uint8_t * p_ack)
{
 10131b8:	b510      	push	{r4, lr}
 10131ba:	4604      	mov	r4, r0
        if (m_tx_ack_started_hooks[i] == NULL)
        {
            break;
        }

        m_tx_ack_started_hooks[i](p_ack);
 10131bc:	f7f9 f970 	bl	100c4a0 <nrf_802154_ie_writer_tx_ack_started_hook>
 10131c0:	4620      	mov	r0, r4
    }
}
 10131c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_tx_ack_started_hooks[i](p_ack);
 10131c6:	f000 b91c 	b.w	1013402 <nrf_802154_encrypt_tx_ack_started_hook>

010131ca <nrf_802154_critical_section_enter>:
    result = critical_section_enter(false);
 10131ca:	2000      	movs	r0, #0
 10131cc:	f7f6 bf20 	b.w	100a010 <critical_section_enter>

010131d0 <nrf_802154_critical_section_forcefully_enter>:
    critical_section_entered = critical_section_enter(true);
 10131d0:	2001      	movs	r0, #1
 10131d2:	f7f6 bf1d 	b.w	100a010 <critical_section_enter>

010131d6 <nrf_802154_debug_init>:
#if ENABLE_DEBUG_LOG
#warning attempt to use deprecated ENABLE_DEBUG_LOG switch
// When linking with SL use NRF_802154_SL_ENABLE_DEBUG_LOG instead
#endif // ENABLE_DEBUG_LOG

    nrf_802154_sl_log_init();
 10131d6:	f001 bfbf 	b.w	1015158 <nrf_802154_sl_log_init>

010131da <aes_ccm_data_key_prepare>:
 * @param[in]   p_frame_data     Pointer to the frame parser data.
 * @param[out]  p_aes_ccm_data   Pointer to AES CCM transformation data to be filled.
 */
bool aes_ccm_data_key_prepare(const nrf_802154_frame_parser_data_t * p_frame_data,
                              nrf_802154_aes_ccm_data_t            * p_aes_ccm_data)
{
 10131da:	b507      	push	{r0, r1, r2, lr}
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 10131dc:	7a83      	ldrb	r3, [r0, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 10131de:	2bff      	cmp	r3, #255	; 0xff
        return 0;
 10131e0:	bf0e      	itee	eq
 10131e2:	2300      	moveq	r3, #0
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 10131e4:	6802      	ldrne	r2, [r0, #0]
 10131e6:	5cd3      	ldrbne	r3, [r2, r3]
    return p_parser_data->mhr.aux_sec_hdr.key_id_offset;
 10131e8:	7b02      	ldrb	r2, [r0, #12]
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
 10131ea:	bf18      	it	ne
 10131ec:	f3c3 03c1 	ubfxne	r3, r3, #3, #2
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 10131f0:	2aff      	cmp	r2, #255	; 0xff
    nrf_802154_key_id_t key_id =
 10131f2:	f88d 3000 	strb.w	r3, [sp]
        return NULL;
 10131f6:	bf0c      	ite	eq
 10131f8:	2300      	moveq	r3, #0
    return &p_parser_data->p_frame[offset];
 10131fa:	6803      	ldrne	r3, [r0, #0]
        .mode     = nrf_802154_frame_parser_sec_ctrl_key_id_mode_get(p_frame_data),
        .p_key_id = (uint8_t *)nrf_802154_frame_parser_key_id_get(p_frame_data),
    };

    return NRF_802154_SECURITY_ERROR_NONE ==
           nrf_802154_security_pib_key_use(&key_id, p_aes_ccm_data->key);
 10131fc:	4668      	mov	r0, sp
 10131fe:	bf18      	it	ne
 1013200:	189b      	addne	r3, r3, r2
    nrf_802154_key_id_t key_id =
 1013202:	9301      	str	r3, [sp, #4]
           nrf_802154_security_pib_key_use(&key_id, p_aes_ccm_data->key);
 1013204:	f7f9 fb66 	bl	100c8d4 <nrf_802154_security_pib_key_use>
}
 1013208:	fab0 f080 	clz	r0, r0
 101320c:	0940      	lsrs	r0, r0, #5
 101320e:	b003      	add	sp, #12
 1013210:	f85d fb04 	ldr.w	pc, [sp], #4

01013214 <aes_ccm_nonce_generate>:
 * @retval  true   Nonce was generated successfully.
 * @retval  false  Nonce could not be generated.
 */
bool aes_ccm_nonce_generate(const nrf_802154_frame_parser_data_t * p_frame_data,
                            uint8_t                              * p_nonce)
{
 1013214:	b538      	push	{r3, r4, r5, lr}
 1013216:	460c      	mov	r4, r1
    if ((p_frame_data == NULL) || (p_nonce == NULL))
 1013218:	4605      	mov	r5, r0
 101321a:	b318      	cbz	r0, 1013264 <aes_ccm_nonce_generate+0x50>
 101321c:	b319      	cbz	r1, 1013266 <aes_ccm_nonce_generate+0x52>
    {
        return false;
    }

    const uint8_t * p_src_addr = nrf_802154_pib_extended_address_get();
 101321e:	f7f6 ffab 	bl	100a178 <nrf_802154_pib_extended_address_get>
    for (size_t i = 0; i < n; i++)
 1013222:	1e62      	subs	r2, r4, #1
 1013224:	f100 0308 	add.w	r3, r0, #8
        *((uint8_t *)p_dst + i) = *((uint8_t *)p_src + n - 1 - i);
 1013228:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    for (size_t i = 0; i < n; i++)
 101322c:	4283      	cmp	r3, r0
        *((uint8_t *)p_dst + i) = *((uint8_t *)p_src + n - 1 - i);
 101322e:	f802 1f01 	strb.w	r1, [r2, #1]!
    for (size_t i = 0; i < n; i++)
 1013232:	d1f9      	bne.n	1013228 <aes_ccm_nonce_generate+0x14>
    return p_parser_data->mhr.aux_sec_hdr.frame_counter_offset;
 1013234:	7aea      	ldrb	r2, [r5, #11]
    memcpy_rev((p_nonce + offset),
               nrf_802154_frame_parser_frame_counter_get(p_frame_data),
               FRAME_COUNTER_SIZE);
    offset += FRAME_COUNTER_SIZE;

    p_nonce[offset] = nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_frame_data);
 1013236:	2001      	movs	r0, #1
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1013238:	2aff      	cmp	r2, #255	; 0xff
        return NULL;
 101323a:	bf0e      	itee	eq
 101323c:	2300      	moveq	r3, #0
    return &p_parser_data->p_frame[offset];
 101323e:	682b      	ldrne	r3, [r5, #0]
 1013240:	189b      	addne	r3, r3, r2
        *((uint8_t *)p_dst + i) = *((uint8_t *)p_src + n - 1 - i);
 1013242:	78da      	ldrb	r2, [r3, #3]
 1013244:	7222      	strb	r2, [r4, #8]
 1013246:	789a      	ldrb	r2, [r3, #2]
 1013248:	7262      	strb	r2, [r4, #9]
 101324a:	785a      	ldrb	r2, [r3, #1]
 101324c:	72a2      	strb	r2, [r4, #10]
 101324e:	781b      	ldrb	r3, [r3, #0]
 1013250:	72e3      	strb	r3, [r4, #11]
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 1013252:	7aab      	ldrb	r3, [r5, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1013254:	2bff      	cmp	r3, #255	; 0xff
        return 0;
 1013256:	bf0f      	iteee	eq
 1013258:	2300      	moveq	r3, #0
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 101325a:	682a      	ldrne	r2, [r5, #0]
 101325c:	5cd3      	ldrbne	r3, [r2, r3]
 101325e:	f003 0307 	andne.w	r3, r3, #7
    p_nonce[offset] = nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_frame_data);
 1013262:	7323      	strb	r3, [r4, #12]

    return true;
}
 1013264:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 1013266:	4608      	mov	r0, r1
 1013268:	e7fc      	b.n	1013264 <aes_ccm_nonce_generate+0x50>

0101326a <aes_ccm_data_a_data_and_m_data_prepare>:
 * @retval  false  Data could not be prepared.
 */
bool aes_ccm_data_a_data_and_m_data_prepare(
    const nrf_802154_frame_parser_data_t * p_frame_data,
    nrf_802154_aes_ccm_data_t            * p_aes_ccm_data)
{
 101326a:	b5f0      	push	{r4, r5, r6, r7, lr}
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
 101326c:	6807      	ldr	r7, [r0, #0]
 101326e:	4602      	mov	r2, r0
 1013270:	787b      	ldrb	r3, [r7, #1]
 1013272:	f003 0307 	and.w	r3, r3, #7
    bool result;

    switch (nrf_802154_frame_parser_frame_type_get(p_frame_data))
 1013276:	1e58      	subs	r0, r3, #1
 1013278:	2802      	cmp	r0, #2
 101327a:	d841      	bhi.n	1013300 <aes_ccm_data_a_data_and_m_data_prepare+0x96>
    return &p_parser_data->p_frame[PSDU_OFFSET];
 101327c:	463c      	mov	r4, r7
    if ((nrf_802154_frame_parser_frame_type_get(p_frame_data) == FRAME_TYPE_COMMAND) &&
 101327e:	2b03      	cmp	r3, #3
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 1013280:	bf14      	ite	ne
 1013282:	2500      	movne	r5, #0
    switch (nrf_802154_frame_parser_frame_version_get(p_frame_data))
 1013284:	78bd      	ldrbeq	r5, [r7, #2]
    return p_parser_data->mac_payload.mac_payload_offset;
 1013286:	f892 c010 	ldrb.w	ip, [r2, #16]
 101328a:	bf08      	it	eq
 101328c:	f085 0520 	eoreq.w	r5, r5, #32
    return p_parser_data->p_frame[PHR_OFFSET];
 1013290:	f814 3b01 	ldrb.w	r3, [r4], #1
 1013294:	bf08      	it	eq
 1013296:	f3c5 1540 	ubfxeq	r5, r5, #5, #1
    if (mhr_end == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 101329a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    return mhr_end - mhr_start;
 101329e:	bf08      	it	eq
 10132a0:	1e98      	subeq	r0, r3, #2
    return p_parser_data->helper.mic_size;
 10132a2:	f892 e017 	ldrb.w	lr, [r2, #23]
    return payload_end - payload_start;
 10132a6:	eba3 030c 	sub.w	r3, r3, ip
    return mhr_end - mhr_start;
 10132aa:	bf18      	it	ne
 10132ac:	f10c 30ff 	addne.w	r0, ip, #4294967295	; 0xffffffff
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 10132b0:	7a92      	ldrb	r2, [r2, #10]
    return payload_end - payload_start;
 10132b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    uint8_t   mac_hdr_len =
 10132b6:	bf0c      	ite	eq
 10132b8:	1940      	addeq	r0, r0, r5
 10132ba:	1940      	addne	r0, r0, r5
        nrf_802154_frame_parser_mac_payload_length_get(p_frame_data) - mic_len - open_payload_len;
 10132bc:	eba3 030e 	sub.w	r3, r3, lr
        return NULL;
 10132c0:	bf07      	ittee	eq
 10132c2:	2600      	moveq	r6, #0
    uint8_t   mac_hdr_len =
 10132c4:	b2c0      	uxtbeq	r0, r0
 10132c6:	b2c0      	uxtbne	r0, r0
    return &p_parser_data->p_frame[offset];
 10132c8:	eb07 060c 	addne.w	r6, r7, ip
    uint8_t mac_payload_len =
 10132cc:	1b5b      	subs	r3, r3, r5
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 10132ce:	2aff      	cmp	r2, #255	; 0xff
 10132d0:	b2db      	uxtb	r3, r3
 10132d2:	d01d      	beq.n	1013310 <aes_ccm_data_a_data_and_m_data_prepare+0xa6>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 10132d4:	5cbf      	ldrb	r7, [r7, r2]
 10132d6:	f007 0207 	and.w	r2, r7, #7
    switch (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_frame_data))
 10132da:	f017 0704 	ands.w	r7, r7, #4
 10132de:	d10c      	bne.n	10132fa <aes_ccm_data_a_data_and_m_data_prepare+0x90>
 10132e0:	b982      	cbnz	r2, 1013304 <aes_ccm_data_a_data_and_m_data_prepare+0x9a>
 10132e2:	4614      	mov	r4, r2
 10132e4:	4610      	mov	r0, r2
 10132e6:	4694      	mov	ip, r2
 10132e8:	4615      	mov	r5, r2
            p_aes_ccm_data->auth_data_len       = mac_hdr_len + mac_payload_len;
 10132ea:	e9c1 0c06 	strd	r0, ip, [r1, #24]
    bool result = true;
 10132ee:	2001      	movs	r0, #1
            p_aes_ccm_data->auth_data           = p_mac_hdr;
 10132f0:	610c      	str	r4, [r1, #16]
            p_aes_ccm_data->plain_text_data     = NULL;
 10132f2:	620d      	str	r5, [r1, #32]
            p_aes_ccm_data->plain_text_data_len = 0;
 10132f4:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
            assert(false);
            break;
    }

    return result;
}
 10132f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_frame_data))
 10132fa:	3a05      	subs	r2, #5
 10132fc:	2a02      	cmp	r2, #2
 10132fe:	d90d      	bls.n	101331c <aes_ccm_data_a_data_and_m_data_prepare+0xb2>
            result = false;
 1013300:	2000      	movs	r0, #0
 1013302:	e7f9      	b.n	10132f8 <aes_ccm_data_a_data_and_m_data_prepare+0x8e>
            p_aes_ccm_data->auth_data_len       = mac_hdr_len + mac_payload_len;
 1013304:	f04f 0c00 	mov.w	ip, #0
            break;
 1013308:	463a      	mov	r2, r7
 101330a:	463d      	mov	r5, r7
            p_aes_ccm_data->auth_data_len       = mac_hdr_len + mac_payload_len;
 101330c:	4418      	add	r0, r3
            break;
 101330e:	e7ec      	b.n	10132ea <aes_ccm_data_a_data_and_m_data_prepare+0x80>
 1013310:	2400      	movs	r4, #0
 1013312:	4620      	mov	r0, r4
 1013314:	46a4      	mov	ip, r4
 1013316:	4625      	mov	r5, r4
 1013318:	4622      	mov	r2, r4
 101331a:	e7e6      	b.n	10132ea <aes_ccm_data_a_data_and_m_data_prepare+0x80>
            p_aes_ccm_data->auth_data_len       = mac_hdr_len;
 101331c:	f04f 0c00 	mov.w	ip, #0
            break;
 1013320:	461a      	mov	r2, r3
    uint8_t * p_mac_payload =
 1013322:	4435      	add	r5, r6
            break;
 1013324:	e7e1      	b.n	10132ea <aes_ccm_data_a_data_and_m_data_prepare+0x80>

01013326 <aes_ccm_data_content_prepare>:
 * @retval  true    AES CCM transformation data was prepared successfully.
 * @retval  false   AES CCM transformation could not be prepared.
 */
static bool aes_ccm_data_content_prepare(const nrf_802154_frame_parser_data_t * p_frame_data,
                                         nrf_802154_aes_ccm_data_t            * p_aes_ccm_data)
{
 1013326:	b538      	push	{r3, r4, r5, lr}
 1013328:	4604      	mov	r4, r0
 101332a:	460d      	mov	r5, r1
    bool retval = false;

    do
    {
        if (!aes_ccm_data_key_prepare(p_frame_data, p_aes_ccm_data))
 101332c:	f7ff ff55 	bl	10131da <aes_ccm_data_key_prepare>
 1013330:	b908      	cbnz	r0, 1013336 <aes_ccm_data_content_prepare+0x10>
    bool retval = false;
 1013332:	2000      	movs	r0, #0
        retval = true;
    }
    while (0);

    return retval;
}
 1013334:	bd38      	pop	{r3, r4, r5, pc}
        if (!aes_ccm_nonce_generate(p_frame_data, p_aes_ccm_data->nonce))
 1013336:	4620      	mov	r0, r4
 1013338:	f105 0125 	add.w	r1, r5, #37	; 0x25
 101333c:	f7ff ff6a 	bl	1013214 <aes_ccm_nonce_generate>
 1013340:	2800      	cmp	r0, #0
 1013342:	d0f6      	beq.n	1013332 <aes_ccm_data_content_prepare+0xc>
        if (!aes_ccm_data_a_data_and_m_data_prepare(p_frame_data, p_aes_ccm_data))
 1013344:	4629      	mov	r1, r5
 1013346:	4620      	mov	r0, r4
 1013348:	f7ff ff8f 	bl	101326a <aes_ccm_data_a_data_and_m_data_prepare>
 101334c:	2800      	cmp	r0, #0
 101334e:	d0f0      	beq.n	1013332 <aes_ccm_data_content_prepare+0xc>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 1013350:	7aa3      	ldrb	r3, [r4, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1013352:	2bff      	cmp	r3, #255	; 0xff
        return 0;
 1013354:	bf0f      	iteee	eq
 1013356:	2300      	moveq	r3, #0
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 1013358:	6822      	ldrne	r2, [r4, #0]
 101335a:	5cd3      	ldrbne	r3, [r2, r3]
 101335c:	f003 0307 	andne.w	r3, r3, #7
    return security_level & SECURITY_LEVEL_MIC_LEVEL_MASK;
 1013360:	f003 0303 	and.w	r3, r3, #3
        p_aes_ccm_data->mic_level = mic_level_from_security_level_get(
 1013364:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
        p_aes_ccm_data->raw_frame = (uint8_t *)p_frame_data->p_frame;
 1013368:	6823      	ldr	r3, [r4, #0]
 101336a:	636b      	str	r3, [r5, #52]	; 0x34
    return retval;
 101336c:	e7e2      	b.n	1013334 <aes_ccm_data_content_prepare+0xe>

0101336e <nrf_802154_encrypt_ack_prepare>:

bool nrf_802154_encrypt_ack_prepare(const nrf_802154_frame_parser_data_t * p_ack_data)
{
 101336e:	b500      	push	{lr}
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
 1013370:	6803      	ldr	r3, [r0, #0]
 1013372:	b08f      	sub	sp, #60	; 0x3c
 1013374:	785b      	ldrb	r3, [r3, #1]
    nrf_802154_aes_ccm_data_t aes_ccm_data;
    bool                      success = false;

    if (!nrf_802154_frame_parser_security_enabled_bit_is_set(p_ack_data))
 1013376:	071b      	lsls	r3, r3, #28
 1013378:	d509      	bpl.n	101338e <nrf_802154_encrypt_ack_prepare+0x20>
    {
        success = true;
    }
    else if (aes_ccm_data_content_prepare(p_ack_data, &aes_ccm_data))
 101337a:	4669      	mov	r1, sp
 101337c:	f7ff ffd3 	bl	1013326 <aes_ccm_data_content_prepare>
 1013380:	b110      	cbz	r0, 1013388 <nrf_802154_encrypt_ack_prepare+0x1a>
    {
        // Algorithm's inputs prepared. Schedule transformation
        success = nrf_802154_aes_ccm_transform_prepare(&aes_ccm_data);
 1013382:	4668      	mov	r0, sp
 1013384:	f7f5 fa96 	bl	10088b4 <nrf_802154_aes_ccm_transform_prepare>
    {
        // Intentionally empty
    }

    return success;
}
 1013388:	b00f      	add	sp, #60	; 0x3c
 101338a:	f85d fb04 	ldr.w	pc, [sp], #4
        success = true;
 101338e:	2001      	movs	r0, #1
 1013390:	e7fa      	b.n	1013388 <nrf_802154_encrypt_ack_prepare+0x1a>

01013392 <nrf_802154_encrypt_ack_reset>:

void nrf_802154_encrypt_ack_reset(void)
{
    nrf_802154_aes_ccm_transform_reset();
 1013392:	f7f5 ba89 	b.w	10088a8 <nrf_802154_aes_ccm_transform_reset>

01013396 <nrf_802154_encrypt_tx_setup>:

bool nrf_802154_encrypt_tx_setup(
    uint8_t                                 * p_frame,
    nrf_802154_transmit_params_t            * p_params,
    nrf_802154_transmit_failed_notification_t notify_function)
{
 1013396:	b5f0      	push	{r4, r5, r6, r7, lr}
 1013398:	460d      	mov	r5, r1
 101339a:	b09b      	sub	sp, #108	; 0x6c
 101339c:	4604      	mov	r4, r0
 101339e:	4617      	mov	r7, r2
    nrf_802154_aes_ccm_transform_reset();
 10133a0:	f7f5 fa82 	bl	10088a8 <nrf_802154_aes_ccm_transform_reset>

    if (p_params->frame_props.is_secured)
 10133a4:	782e      	ldrb	r6, [r5, #0]
 10133a6:	b11e      	cbz	r6, 10133b0 <nrf_802154_encrypt_tx_setup+0x1a>
    {
        // The frame is already secured. Pass.
        return true;
 10133a8:	2601      	movs	r6, #1
        metadata.frame_props = p_params->frame_props;
        notify_function(p_frame, NRF_802154_TX_ERROR_KEY_ID_INVALID, &metadata);
    }

    return success;
}
 10133aa:	4630      	mov	r0, r6
 10133ac:	b01b      	add	sp, #108	; 0x6c
 10133ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    success = nrf_802154_frame_parser_data_init(p_frame,
 10133b0:	7821      	ldrb	r1, [r4, #0]
 10133b2:	ab06      	add	r3, sp, #24
 10133b4:	3101      	adds	r1, #1
 10133b6:	2206      	movs	r2, #6
 10133b8:	4620      	mov	r0, r4
 10133ba:	b2c9      	uxtb	r1, r1
 10133bc:	f000 f956 	bl	101366c <nrf_802154_frame_parser_data_init>
 10133c0:	9b06      	ldr	r3, [sp, #24]
 10133c2:	785b      	ldrb	r3, [r3, #1]
    if (!nrf_802154_frame_parser_security_enabled_bit_is_set(&frame_data))
 10133c4:	071b      	lsls	r3, r3, #28
 10133c6:	d5ef      	bpl.n	10133a8 <nrf_802154_encrypt_tx_setup+0x12>
    else if (aes_ccm_data_content_prepare(&frame_data, &aes_ccm_data))
 10133c8:	a90c      	add	r1, sp, #48	; 0x30
 10133ca:	a806      	add	r0, sp, #24
 10133cc:	f7ff ffab 	bl	1013326 <aes_ccm_data_content_prepare>
 10133d0:	b960      	cbnz	r0, 10133ec <nrf_802154_encrypt_tx_setup+0x56>
        nrf_802154_transmit_done_metadata_t metadata = {};
 10133d2:	2218      	movs	r2, #24
 10133d4:	2100      	movs	r1, #0
 10133d6:	4668      	mov	r0, sp
 10133d8:	f7ff fb1b 	bl	1012a12 <memset>
        metadata.frame_props = p_params->frame_props;
 10133dc:	882b      	ldrh	r3, [r5, #0]
        notify_function(p_frame, NRF_802154_TX_ERROR_KEY_ID_INVALID, &metadata);
 10133de:	466a      	mov	r2, sp
 10133e0:	2108      	movs	r1, #8
 10133e2:	4620      	mov	r0, r4
        metadata.frame_props = p_params->frame_props;
 10133e4:	f8ad 3000 	strh.w	r3, [sp]
        notify_function(p_frame, NRF_802154_TX_ERROR_KEY_ID_INVALID, &metadata);
 10133e8:	47b8      	blx	r7
 10133ea:	e7de      	b.n	10133aa <nrf_802154_encrypt_tx_setup+0x14>
        success = nrf_802154_aes_ccm_transform_prepare(&aes_ccm_data);
 10133ec:	a80c      	add	r0, sp, #48	; 0x30
 10133ee:	f7f5 fa61 	bl	10088b4 <nrf_802154_aes_ccm_transform_prepare>
    if (!success)
 10133f2:	2800      	cmp	r0, #0
 10133f4:	d1d8      	bne.n	10133a8 <nrf_802154_encrypt_tx_setup+0x12>
 10133f6:	e7ec      	b.n	10133d2 <nrf_802154_encrypt_tx_setup+0x3c>

010133f8 <nrf_802154_encrypt_tx_started_hook>:

bool nrf_802154_encrypt_tx_started_hook(uint8_t * p_frame)
{
 10133f8:	b508      	push	{r3, lr}
    // The provided pointer is the original buffer. It doesn't need to be changed,
    // because the AES-CCM* module is aware of two separate buffers (original vs work buffer)
    nrf_802154_aes_ccm_transform_start(p_frame);
 10133fa:	f7f5 fa9d 	bl	1008938 <nrf_802154_aes_ccm_transform_start>

    return true;
}
 10133fe:	2001      	movs	r0, #1
 1013400:	bd08      	pop	{r3, pc}

01013402 <nrf_802154_encrypt_tx_ack_started_hook>:

void nrf_802154_encrypt_tx_ack_started_hook(uint8_t * p_ack)
{
    nrf_802154_aes_ccm_transform_start(p_ack);
 1013402:	f7f5 ba99 	b.w	1008938 <nrf_802154_aes_ccm_transform_start>

01013406 <nrf_802154_encrypt_tx_failed_hook>:
}

bool nrf_802154_encrypt_tx_failed_hook(uint8_t * p_frame, nrf_802154_tx_error_t error)
{
 1013406:	b508      	push	{r3, lr}
    (void)error;

    nrf_802154_aes_ccm_transform_abort(p_frame);
 1013408:	f7f5 fb2e 	bl	1008a68 <nrf_802154_aes_ccm_transform_abort>

    return true;
}
 101340c:	2001      	movs	r0, #1
 101340e:	bd08      	pop	{r3, pc}

01013410 <nrf_802154_encrypt_tx_ack_failed_hook>:

void nrf_802154_encrypt_tx_ack_failed_hook(uint8_t * p_ack, nrf_802154_tx_error_t error)
{
    (void)error;

    nrf_802154_aes_ccm_transform_abort(p_ack);
 1013410:	f7f5 bb2a 	b.w	1008a68 <nrf_802154_aes_ccm_transform_abort>

01013414 <nrf_802154_queue_init>:
    assert(item_size != 0U);

    /* Due uint8_t type of nrf_802154_queue_t::item_size */
    assert(item_size <= UINT8_MAX);

    size_t capacity = memory_size / item_size;
 1013414:	fbb2 f2f3 	udiv	r2, r2, r3
    /* Due uint8_t type of nrf_802154_queue_t::capacity */
    assert(capacity <= UINT8_MAX);

    p_queue->p_memory  = p_memory;
    p_queue->capacity  = capacity;
    p_queue->item_size = item_size;
 1013418:	7103      	strb	r3, [r0, #4]
    p_queue->wridx     = 0U;
 101341a:	2300      	movs	r3, #0
    p_queue->p_memory  = p_memory;
 101341c:	6001      	str	r1, [r0, #0]
    p_queue->wridx     = 0U;
 101341e:	7183      	strb	r3, [r0, #6]
    p_queue->capacity  = capacity;
 1013420:	7142      	strb	r2, [r0, #5]
    p_queue->rdidx     = 0U;
 1013422:	71c3      	strb	r3, [r0, #7]
}
 1013424:	4770      	bx	lr

01013426 <nrf_802154_queue_push_begin>:

void * nrf_802154_queue_push_begin(const nrf_802154_queue_t * p_queue)
{
    return idx2ptr(p_queue, p_queue->wridx);
 1013426:	7981      	ldrb	r1, [r0, #6]
    return ((uint8_t *)(p_queue->p_memory)) + idx * p_queue->item_size;
 1013428:	7902      	ldrb	r2, [r0, #4]
 101342a:	6800      	ldr	r0, [r0, #0]
}
 101342c:	fb01 0002 	mla	r0, r1, r2, r0
 1013430:	4770      	bx	lr

01013432 <nrf_802154_queue_push_commit>:

void nrf_802154_queue_push_commit(nrf_802154_queue_t * p_queue)
{
    p_queue->wridx = increment_modulo(p_queue->wridx, p_queue->capacity);
 1013432:	7983      	ldrb	r3, [r0, #6]
    if (v >= wrap_at_value)
 1013434:	7942      	ldrb	r2, [r0, #5]
    v++;
 1013436:	3301      	adds	r3, #1
 1013438:	b2db      	uxtb	r3, r3
        v = 0U;
 101343a:	429a      	cmp	r2, r3
 101343c:	bf98      	it	ls
 101343e:	2300      	movls	r3, #0
    p_queue->wridx = increment_modulo(p_queue->wridx, p_queue->capacity);
 1013440:	7183      	strb	r3, [r0, #6]
}
 1013442:	4770      	bx	lr

01013444 <nrf_802154_queue_pop_begin>:

void * nrf_802154_queue_pop_begin(const nrf_802154_queue_t * p_queue)
{
    return idx2ptr(p_queue, p_queue->rdidx);
 1013444:	79c1      	ldrb	r1, [r0, #7]
    return ((uint8_t *)(p_queue->p_memory)) + idx * p_queue->item_size;
 1013446:	7902      	ldrb	r2, [r0, #4]
 1013448:	6800      	ldr	r0, [r0, #0]
}
 101344a:	fb01 0002 	mla	r0, r1, r2, r0
 101344e:	4770      	bx	lr

01013450 <nrf_802154_queue_pop_commit>:

void nrf_802154_queue_pop_commit(nrf_802154_queue_t * p_queue)
{
    p_queue->rdidx = increment_modulo(p_queue->rdidx, p_queue->capacity);
 1013450:	79c3      	ldrb	r3, [r0, #7]
    if (v >= wrap_at_value)
 1013452:	7942      	ldrb	r2, [r0, #5]
    v++;
 1013454:	3301      	adds	r3, #1
 1013456:	b2db      	uxtb	r3, r3
        v = 0U;
 1013458:	429a      	cmp	r2, r3
 101345a:	bf98      	it	ls
 101345c:	2300      	movls	r3, #0
    p_queue->rdidx = increment_modulo(p_queue->rdidx, p_queue->capacity);
 101345e:	71c3      	strb	r3, [r0, #7]
}
 1013460:	4770      	bx	lr

01013462 <nrf_802154_rssi_sample_corrected_get>:
#else
#error Unsupported chip family
#endif

uint8_t nrf_802154_rssi_sample_corrected_get(uint8_t rssi_sample)
{
 1013462:	b510      	push	{r4, lr}
 1013464:	4604      	mov	r4, r0
    return rssi_sample + nrf_802154_rssi_sample_temp_corr_value_get(rssi_sample);
 1013466:	f7f6 ff23 	bl	100a2b0 <nrf_802154_rssi_sample_temp_corr_value_get>
 101346a:	4420      	add	r0, r4
}
 101346c:	b2c0      	uxtb	r0, r0
 101346e:	bd10      	pop	{r4, pc}

01013470 <nrf_802154_rssi_lqi_corrected_get>:

uint8_t nrf_802154_rssi_lqi_corrected_get(uint8_t lqi)
{
 1013470:	b510      	push	{r4, lr}
 1013472:	4604      	mov	r4, r0
    return lqi - nrf_802154_rssi_sample_temp_corr_value_get(lqi);
 1013474:	f7f6 ff1c 	bl	100a2b0 <nrf_802154_rssi_sample_temp_corr_value_get>
 1013478:	1a20      	subs	r0, r4, r0
}
 101347a:	b2c0      	uxtb	r0, r0
 101347c:	bd10      	pop	{r4, pc}

0101347e <nrf_802154_rssi_ed_corrected_get>:

int16_t nrf_802154_rssi_ed_corrected_get(int16_t ed)
{
 101347e:	b510      	push	{r4, lr}
 1013480:	4604      	mov	r4, r0
    return ed - nrf_802154_rssi_sample_temp_corr_value_get(ed);
 1013482:	b2c0      	uxtb	r0, r0
 1013484:	f7f6 ff14 	bl	100a2b0 <nrf_802154_rssi_sample_temp_corr_value_get>
 1013488:	1a20      	subs	r0, r4, r0
}
 101348a:	b200      	sxth	r0, r0
 101348c:	bd10      	pop	{r4, pc}

0101348e <nrf_802154_rssi_cca_ed_threshold_corrected_get>:

uint8_t nrf_802154_rssi_cca_ed_threshold_corrected_get(uint8_t cca_ed)
 101348e:	f7ff bfef 	b.w	1013470 <nrf_802154_rssi_lqi_corrected_get>

01013492 <nrf_802154_rssi_ed_sample_convert>:
{
    return cca_ed - nrf_802154_rssi_sample_temp_corr_value_get(cca_ed);
}

uint8_t nrf_802154_rssi_ed_sample_convert(uint8_t ed_sample)
{
 1013492:	b508      	push	{r3, lr}
    int16_t result;

    result = nrf_802154_rssi_ed_corrected_get(ed_sample);
 1013494:	f7ff fff3 	bl	101347e <nrf_802154_rssi_ed_corrected_get>
    result = ED_RESULT_MAX * (result - EDSAMPLE_MIN_REPORTED_VALUE) /
 1013498:	2321      	movs	r3, #33	; 0x21
 101349a:	3812      	subs	r0, #18
 101349c:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 10134a0:	fb90 f0f3 	sdiv	r0, r0, r3
    if (result < 0)
    {
        result = 0;
    }

    if (result > ED_RESULT_MAX)
 10134a4:	b200      	sxth	r0, r0
    {
        result = ED_RESULT_MAX;
    }

    return (uint8_t)result;
 10134a6:	f380 0008 	usat	r0, #8, r0
}
 10134aa:	b2c0      	uxtb	r0, r0
 10134ac:	bd08      	pop	{r3, pc}

010134ae <swi_irq_handler>:
{
 10134ae:	b508      	push	{r3, lr}
    nrf_802154_trx_swi_irq_handler();
 10134b0:	f7f7 ff68 	bl	100b384 <nrf_802154_trx_swi_irq_handler>
    nrf_802154_notification_swi_irq_handler();
 10134b4:	f7fa f8f2 	bl	100d69c <nrf_802154_notification_swi_irq_handler>
    nrf_802154_request_swi_irq_handler();
 10134b8:	f7fa f986 	bl	100d7c8 <nrf_802154_request_swi_irq_handler>
}
 10134bc:	bd08      	pop	{r3, pc}

010134be <txframe_finish_disable_ppis>:
    nrf_802154_trx_ppi_for_ramp_up_clear(cca ? NRF_RADIO_TASK_RXEN : NRF_RADIO_TASK_TXEN, false);
 10134be:	0080      	lsls	r0, r0, #2
 10134c0:	2100      	movs	r1, #0
 10134c2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 10134c6:	f7f7 bfe7 	b.w	100b498 <nrf_802154_trx_ppi_for_ramp_up_clear>

010134ca <rxframe_finish_disable_ppis>:
{
 10134ca:	b508      	push	{r3, lr}
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, true);
 10134cc:	2004      	movs	r0, #4
 10134ce:	2101      	movs	r1, #1
 10134d0:	f7f7 ffe2 	bl	100b498 <nrf_802154_trx_ppi_for_ramp_up_clear>
}
 10134d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_trx_ppi_for_radio_sync_clear(EGU_SYNC_TASK);
 10134d8:	200c      	movs	r0, #12
 10134da:	f7f8 b861 	b.w	100b5a0 <nrf_802154_trx_ppi_for_radio_sync_clear>

010134de <nrf_802154_trx_init>:
{
 10134de:	b508      	push	{r3, lr}
    nrf_802154_trx_module_reset();
 10134e0:	f7f7 f8b0 	bl	100a644 <nrf_802154_trx_module_reset>
}
 10134e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_swi_init();
 10134e8:	f7f6 bf3c 	b.w	100a364 <nrf_802154_swi_init>

010134ec <nrf_802154_trx_channel_set>:
    channel_set(channel);
 10134ec:	f7f7 b83e 	b.w	100a56c <channel_set>

010134f0 <nrf_802154_trx_cca_configuration_update>:
    cca_configuration_update();
 10134f0:	f7f7 b820 	b.w	100a534 <cca_configuration_update>

010134f4 <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>:
    __ASM("nop");
 10134f4:	bf00      	nop
    __ASM("nop");
 10134f6:	bf00      	nop
    __ASM("nop");
 10134f8:	bf00      	nop
    __ASM("nop");
 10134fa:	bf00      	nop
    __ASM("nop");
 10134fc:	bf00      	nop
    __ASM("nop");
 10134fe:	bf00      	nop
}
 1013500:	4770      	bx	lr

01013502 <nrf_802154_tx_power_convert_metadata_to_tx_power_split>:

int8_t nrf_802154_tx_power_convert_metadata_to_tx_power_split(
    uint8_t                                 channel,
    nrf_802154_tx_power_metadata_t          tx_power,
    nrf_802154_fal_tx_power_split_t * const p_tx_power_split)
{
 1013502:	b537      	push	{r0, r1, r2, r4, r5, lr}
 1013504:	f8ad 1004 	strh.w	r1, [sp, #4]
    int8_t power_unconstrained =
 1013508:	b2c9      	uxtb	r1, r1
{
 101350a:	4604      	mov	r4, r0
 101350c:	4615      	mov	r5, r2
    int8_t power_unconstrained =
 101350e:	b141      	cbz	r1, 1013522 <nrf_802154_tx_power_convert_metadata_to_tx_power_split+0x20>
 1013510:	f99d 1005 	ldrsb.w	r1, [sp, #5]
        tx_power.use_metadata_value ? tx_power.power : nrf_802154_pib_tx_power_get();

    return nrf_802154_fal_tx_power_split(channel, power_unconstrained, p_tx_power_split);
 1013514:	462a      	mov	r2, r5
 1013516:	4620      	mov	r0, r4
}
 1013518:	b003      	add	sp, #12
 101351a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return nrf_802154_fal_tx_power_split(channel, power_unconstrained, p_tx_power_split);
 101351e:	f7f2 b81d 	b.w	100555c <nrf_802154_fal_tx_power_split>
        tx_power.use_metadata_value ? tx_power.power : nrf_802154_pib_tx_power_get();
 1013522:	f7f6 fe11 	bl	100a148 <nrf_802154_pib_tx_power_get>
 1013526:	4601      	mov	r1, r0
 1013528:	e7f4      	b.n	1013514 <nrf_802154_tx_power_convert_metadata_to_tx_power_split+0x12>

0101352a <nrf_802154_tx_power_split_pib_power_get>:

int8_t nrf_802154_tx_power_split_pib_power_get(
    nrf_802154_fal_tx_power_split_t * const p_split_power)
{
 101352a:	b538      	push	{r3, r4, r5, lr}
 101352c:	4605      	mov	r5, r0
    return nrf_802154_fal_tx_power_split(nrf_802154_pib_channel_get(),
 101352e:	f7f6 fdfd 	bl	100a12c <nrf_802154_pib_channel_get>
 1013532:	4604      	mov	r4, r0
 1013534:	f7f6 fe08 	bl	100a148 <nrf_802154_pib_tx_power_get>
 1013538:	462a      	mov	r2, r5
 101353a:	4601      	mov	r1, r0
 101353c:	4620      	mov	r0, r4
                                         nrf_802154_pib_tx_power_get(),
                                         p_split_power);
}
 101353e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return nrf_802154_fal_tx_power_split(nrf_802154_pib_channel_get(),
 1013542:	f7f2 b80b 	b.w	100555c <nrf_802154_fal_tx_power_split>

01013546 <dly_op_state_set>:
    switch (p_dly_op_data->op)
 1013546:	7a03      	ldrb	r3, [r0, #8]
 1013548:	2b01      	cmp	r3, #1
 101354a:	d901      	bls.n	1013550 <dly_op_state_set+0xa>
    bool result = false;
 101354c:	2000      	movs	r0, #0
 101354e:	4770      	bx	lr
  __ASM volatile ("dmb 0xF":::"memory");
 1013550:	f3bf 8f5f 	dmb	sy
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 1013554:	e8d0 3f4f 	ldrexb	r3, [r0]
        if ( old_val != *p_expected)
 1013558:	b2db      	uxtb	r3, r3
 101355a:	428b      	cmp	r3, r1
 101355c:	d002      	beq.n	1013564 <dly_op_state_set+0x1e>
  __ASM volatile ("clrex" ::: "memory");
 101355e:	f3bf 8f2f 	clrex
            return false;
 1013562:	e7f3      	b.n	101354c <dly_op_state_set+0x6>
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 1013564:	e8c0 2f43 	strexb	r3, r2, [r0]
    while (__STREXB(desired, (volatile uint8_t *)p_obj));
 1013568:	2b00      	cmp	r3, #0
 101356a:	d1f3      	bne.n	1013554 <dly_op_state_set+0xe>
  __ASM volatile ("dmb 0xF":::"memory");
 101356c:	f3bf 8f5f 	dmb	sy
    return true;
 1013570:	2001      	movs	r0, #1
}
 1013572:	4770      	bx	lr

01013574 <available_dly_ts_slot_from_pool_get>:
    for (uint32_t i = 0; i < pool_len; i++)
 1013574:	2358      	movs	r3, #88	; 0x58
{
 1013576:	b570      	push	{r4, r5, r6, lr}
 1013578:	4604      	mov	r4, r0
 101357a:	fb03 0501 	mla	r5, r3, r1, r0
    for (uint32_t i = 0; i < pool_len; i++)
 101357e:	42ac      	cmp	r4, r5
 1013580:	d101      	bne.n	1013586 <available_dly_ts_slot_from_pool_get+0x12>
    return NULL;
 1013582:	2600      	movs	r6, #0
 1013584:	e008      	b.n	1013598 <available_dly_ts_slot_from_pool_get+0x24>
        if (dly_op_state_set(&p_dly_op_data_pool[i],
 1013586:	4620      	mov	r0, r4
 1013588:	2202      	movs	r2, #2
 101358a:	2101      	movs	r1, #1
 101358c:	f7ff ffdb 	bl	1013546 <dly_op_state_set>
 1013590:	4626      	mov	r6, r4
 1013592:	3458      	adds	r4, #88	; 0x58
 1013594:	2800      	cmp	r0, #0
 1013596:	d0f2      	beq.n	101357e <available_dly_ts_slot_from_pool_get+0xa>
}
 1013598:	4630      	mov	r0, r6
 101359a:	bd70      	pop	{r4, r5, r6, pc}

0101359c <notify_rx_timeout>:
{
 101359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dly_op_data_t * p_dly_op_data = (dly_op_data_t *)(p_timer->user_data.p_pointer);
 101359e:	6984      	ldr	r4, [r0, #24]
    uint64_t        now           = nrf_802154_sl_timer_current_time_get();
 10135a0:	f001 feaa 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
    uint64_t        sof_timestamp = p_dly_op_data->rx.extension_frame.sof_timestamp;
 10135a4:	e9d4 6710 	ldrd	r6, r7, [r4, #64]	; 0x40
 10135a8:	f3bf 8f5f 	dmb	sy
    uint8_t  psdu_length   = p_dly_op_data->rx.extension_frame.psdu_length;
 10135ac:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    bool     ack_requested = p_dly_op_data->rx.extension_frame.ack_requested;
 10135b0:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
 10135b4:	3301      	adds	r3, #1
 10135b6:	015b      	lsls	r3, r3, #5
    if (ack_requested)
 10135b8:	b97a      	cbnz	r2, 10135da <notify_rx_timeout+0x3e>
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SHR_SYMBOLS);
 10135ba:	33a0      	adds	r3, #160	; 0xa0
    if (nrf_802154_sl_time64_is_in_future(now, sof_timestamp + frame_length))
 10135bc:	199d      	adds	r5, r3, r6
 10135be:	f147 0200 	adc.w	r2, r7, #0
 10135c2:	42a8      	cmp	r0, r5
 10135c4:	4191      	sbcs	r1, r2
 10135c6:	d20b      	bcs.n	10135e0 <notify_rx_timeout+0x44>
        p_dly_op_data->rx.timeout_timer.trigger_time = sof_timestamp + frame_length;
 10135c8:	e9c4 5208 	strd	r5, r2, [r4, #32]
    uint32_t frame_length  = nrf_802154_rx_duration_get(psdu_length, ack_requested);
 10135cc:	63a3      	str	r3, [r4, #56]	; 0x38
        ret = nrf_802154_sl_timer_add(&p_dly_op_data->rx.timeout_timer);
 10135ce:	f104 0010 	add.w	r0, r4, #16
}
 10135d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        ret = nrf_802154_sl_timer_add(&p_dly_op_data->rx.timeout_timer);
 10135d6:	f7fe b985 	b.w	10118e4 <nrf_802154_sl_timer_add>
        us_time += PHY_US_TIME_FROM_SYMBOLS(A_TURNAROUND_TIME_SYMBOLS +
 10135da:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 10135de:	e7ed      	b.n	10135bc <notify_rx_timeout+0x20>
        bool notified = nrf_802154_notify_receive_failed(
 10135e0:	6861      	ldr	r1, [r4, #4]
 10135e2:	2200      	movs	r2, #0
 10135e4:	2008      	movs	r0, #8
 10135e6:	f000 f8e9 	bl	10137bc <nrf_802154_notify_receive_failed>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
 10135ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 10135ee:	6063      	str	r3, [r4, #4]
        bool result = dly_op_state_set(p_dly_op_data,
 10135f0:	4620      	mov	r0, r4
}
 10135f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        bool result = dly_op_state_set(p_dly_op_data,
 10135f6:	2201      	movs	r2, #1
 10135f8:	2104      	movs	r1, #4
 10135fa:	f7ff bfa4 	b.w	1013546 <dly_op_state_set>

010135fe <nrf_802154_frame_parser_ie_iterator_end>:
    return (p_ie_iterator[IE_ID_OFFSET_0] >> 7) | (p_ie_iterator[IE_ID_OFFSET_1] << 1);
 10135fe:	7803      	ldrb	r3, [r0, #0]
           || (p_ie_iterator >= p_end_addr);
 1013600:	065a      	lsls	r2, r3, #25
 1013602:	d107      	bne.n	1013614 <nrf_802154_frame_parser_ie_iterator_end+0x16>
    return (p_ie_iterator[IE_ID_OFFSET_0] >> 7) | (p_ie_iterator[IE_ID_OFFSET_1] << 1);
 1013604:	7842      	ldrb	r2, [r0, #1]
 1013606:	09db      	lsrs	r3, r3, #7
 1013608:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
            ((ie_id == IE_HT1) || (ie_id == IE_HT2)))
 101360c:	3b7e      	subs	r3, #126	; 0x7e
    return ((nrf_802154_frame_parser_ie_length_get(p_ie_iterator) == 0) &&
 101360e:	b2db      	uxtb	r3, r3
 1013610:	2b01      	cmp	r3, #1
 1013612:	d904      	bls.n	101361e <nrf_802154_frame_parser_ie_iterator_end+0x20>
           || (p_ie_iterator >= p_end_addr);
 1013614:	4288      	cmp	r0, r1
 1013616:	bf34      	ite	cc
 1013618:	2000      	movcc	r0, #0
 101361a:	2001      	movcs	r0, #1
 101361c:	4770      	bx	lr
 101361e:	2001      	movs	r0, #1
}
 1013620:	4770      	bx	lr

01013622 <mic_size_get>:
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
 1013622:	7a83      	ldrb	r3, [r0, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 1013624:	2bff      	cmp	r3, #255	; 0xff
 1013626:	d012      	beq.n	101364e <mic_size_get+0x2c>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
 1013628:	6802      	ldr	r2, [r0, #0]
 101362a:	5cd2      	ldrb	r2, [r2, r3]
 101362c:	2301      	movs	r3, #1
    switch (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_parser_data))
 101362e:	f002 0207 	and.w	r2, r2, #7
 1013632:	4093      	lsls	r3, r2
 1013634:	f013 0f22 	tst.w	r3, #34	; 0x22
 1013638:	d10b      	bne.n	1013652 <mic_size_get+0x30>
 101363a:	f013 0f44 	tst.w	r3, #68	; 0x44
 101363e:	d10a      	bne.n	1013656 <mic_size_get+0x34>
 1013640:	f013 0f88 	tst.w	r3, #136	; 0x88
 1013644:	bf14      	ite	ne
 1013646:	2001      	movne	r0, #1
 1013648:	2000      	moveq	r0, #0
 101364a:	0100      	lsls	r0, r0, #4
 101364c:	4770      	bx	lr
            return 0;
 101364e:	2000      	movs	r0, #0
 1013650:	4770      	bx	lr
            return MIC_32_SIZE;
 1013652:	2004      	movs	r0, #4
 1013654:	4770      	bx	lr
    switch (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_parser_data))
 1013656:	2008      	movs	r0, #8
}
 1013658:	4770      	bx	lr

0101365a <key_source_size_get>:
    switch (key_id_mode)
 101365a:	2802      	cmp	r0, #2
 101365c:	d004      	beq.n	1013668 <key_source_size_get+0xe>
 101365e:	1ec3      	subs	r3, r0, #3
 1013660:	4258      	negs	r0, r3
 1013662:	4158      	adcs	r0, r3
 1013664:	00c0      	lsls	r0, r0, #3
 1013666:	4770      	bx	lr
 1013668:	2004      	movs	r0, #4
}
 101366a:	4770      	bx	lr

0101366c <nrf_802154_frame_parser_data_init>:

bool nrf_802154_frame_parser_data_init(const uint8_t                  * p_frame,
                                       uint8_t                          valid_data_len,
                                       nrf_802154_frame_parser_level_t  requested_parse_level,
                                       nrf_802154_frame_parser_data_t * p_parser_data)
{
 101366c:	b538      	push	{r3, r4, r5, lr}
 101366e:	4615      	mov	r5, r2
 1013670:	461c      	mov	r4, r3
    if (p_frame == NULL)
 1013672:	b1d0      	cbz	r0, 10136aa <nrf_802154_frame_parser_data_init+0x3e>
    {
        return false;
    }

    p_parser_data->p_frame        = p_frame;
 1013674:	6018      	str	r0, [r3, #0]
    p_parser_data->valid_data_len = valid_data_len;
 1013676:	7159      	strb	r1, [r3, #5]
    p_parser_data->parse_level    = PARSE_LEVEL_NONE;
 1013678:	2300      	movs	r3, #0

    memset(&p_parser_data->mhr, NRF_802154_FRAME_PARSER_INVALID_OFFSET, sizeof(p_parser_data->mhr));
 101367a:	220a      	movs	r2, #10
    p_parser_data->parse_level    = PARSE_LEVEL_NONE;
 101367c:	7123      	strb	r3, [r4, #4]
    memset(&p_parser_data->mhr, NRF_802154_FRAME_PARSER_INVALID_OFFSET, sizeof(p_parser_data->mhr));
 101367e:	21ff      	movs	r1, #255	; 0xff
 1013680:	1da0      	adds	r0, r4, #6
 1013682:	f7ff f9c6 	bl	1012a12 <memset>
    memset(&p_parser_data->mac_payload,
 1013686:	2201      	movs	r2, #1
 1013688:	21ff      	movs	r1, #255	; 0xff
 101368a:	f104 0010 	add.w	r0, r4, #16
 101368e:	f7ff f9c0 	bl	1012a12 <memset>
           NRF_802154_FRAME_PARSER_INVALID_OFFSET,
           sizeof(p_parser_data->mac_payload));
    memset(&p_parser_data->helper,
 1013692:	21ff      	movs	r1, #255	; 0xff
 1013694:	f104 0011 	add.w	r0, r4, #17
 1013698:	2207      	movs	r2, #7
 101369a:	f7ff f9ba 	bl	1012a12 <memset>
           NRF_802154_FRAME_PARSER_INVALID_OFFSET,
           sizeof(p_parser_data->helper));

    return parse_state_advance(p_parser_data, requested_parse_level);
 101369e:	4629      	mov	r1, r5
 10136a0:	4620      	mov	r0, r4
}
 10136a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return parse_state_advance(p_parser_data, requested_parse_level);
 10136a6:	f7f8 bc97 	b.w	100bfd8 <parse_state_advance>
}
 10136aa:	bd38      	pop	{r3, r4, r5, pc}

010136ac <nrf_802154_frame_parser_valid_data_extend>:

bool nrf_802154_frame_parser_valid_data_extend(nrf_802154_frame_parser_data_t * p_parser_data,
                                               uint8_t                          valid_data_len,
                                               nrf_802154_frame_parser_level_t  requested_parse_level)
{
 10136ac:	460b      	mov	r3, r1
 10136ae:	4611      	mov	r1, r2
    if (valid_data_len > p_parser_data->valid_data_len)
 10136b0:	7942      	ldrb	r2, [r0, #5]
 10136b2:	429a      	cmp	r2, r3
    {
        p_parser_data->valid_data_len = valid_data_len;
 10136b4:	bf38      	it	cc
 10136b6:	7143      	strbcc	r3, [r0, #5]
    }

    return parse_state_advance(p_parser_data, requested_parse_level);
 10136b8:	f7f8 bc8e 	b.w	100bfd8 <parse_state_advance>

010136bc <nrf_802154_ie_writer_tx_setup>:
{
 10136bc:	b510      	push	{r4, lr}
    if (p_params->frame_props.dynamic_data_is_set)
 10136be:	784c      	ldrb	r4, [r1, #1]
{
 10136c0:	b086      	sub	sp, #24
    if (p_params->frame_props.dynamic_data_is_set)
 10136c2:	b9ac      	cbnz	r4, 10136f0 <nrf_802154_ie_writer_tx_setup+0x34>
    bool result = nrf_802154_frame_parser_data_init(p_frame,
 10136c4:	7801      	ldrb	r1, [r0, #0]
 10136c6:	466b      	mov	r3, sp
 10136c8:	3101      	adds	r1, #1
 10136ca:	2206      	movs	r2, #6
 10136cc:	b2c9      	uxtb	r1, r1
 10136ce:	f7ff ffcd 	bl	101366c <nrf_802154_frame_parser_data_init>
    return p_parser_data->mhr.header_ie_offset;
 10136d2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 10136d6:	28ff      	cmp	r0, #255	; 0xff
 10136d8:	d00a      	beq.n	10136f0 <nrf_802154_ie_writer_tx_setup+0x34>
    return &p_parser_data->p_frame[offset];
 10136da:	9900      	ldr	r1, [sp, #0]
    return nrf_802154_frame_parser_frame_length_get(p_parser_data) - FCS_SIZE + PHR_SIZE;
 10136dc:	780b      	ldrb	r3, [r1, #0]
    return &p_parser_data->p_frame[offset];
 10136de:	4408      	add	r0, r1
    return nrf_802154_frame_parser_frame_length_get(p_parser_data) - FCS_SIZE + PHR_SIZE;
 10136e0:	3b01      	subs	r3, #1
 10136e2:	b2db      	uxtb	r3, r3
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
 10136e4:	2bff      	cmp	r3, #255	; 0xff
        return NULL;
 10136e6:	bf0c      	ite	eq
 10136e8:	4621      	moveq	r1, r4
    return &p_parser_data->p_frame[offset];
 10136ea:	18c9      	addne	r1, r1, r3
    nrf_802154_ie_writer_prepare(p_ie_header, p_mfr_addr);
 10136ec:	f7f8 fe46 	bl	100c37c <nrf_802154_ie_writer_prepare>
}
 10136f0:	2001      	movs	r0, #1
 10136f2:	b006      	add	sp, #24
 10136f4:	bd10      	pop	{r4, pc}

010136f6 <key_matches>:
{
 10136f6:	b510      	push	{r4, lr}
 10136f8:	4603      	mov	r3, r0
    if (!p_key->taken)
 10136fa:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 10136fe:	b198      	cbz	r0, 1013728 <key_matches+0x32>
    if (p_key->mode != p_id->mode)
 1013700:	780c      	ldrb	r4, [r1, #0]
 1013702:	7e5a      	ldrb	r2, [r3, #25]
 1013704:	42a2      	cmp	r2, r4
 1013706:	d110      	bne.n	101372a <key_matches+0x34>
    if (p_id->mode == KEY_ID_MODE_0)
 1013708:	b172      	cbz	r2, 1013728 <key_matches+0x32>
    else if ((p_id->p_key_id == NULL) ||
 101370a:	6848      	ldr	r0, [r1, #4]
 101370c:	b160      	cbz	r0, 1013728 <key_matches+0x32>
             (memcmp(p_id->p_key_id, p_key->id, id_length_get(p_id->mode)) != 0))
 101370e:	f103 0110 	add.w	r1, r3, #16
 1013712:	1e53      	subs	r3, r2, #1
 1013714:	2b02      	cmp	r3, #2
 1013716:	bf96      	itet	ls
 1013718:	0092      	lslls	r2, r2, #2
 101371a:	2200      	movhi	r2, #0
 101371c:	3a03      	subls	r2, #3
 101371e:	f7ff f946 	bl	10129ae <memcmp>
    else if ((p_id->p_key_id == NULL) ||
 1013722:	fab0 f080 	clz	r0, r0
 1013726:	0940      	lsrs	r0, r0, #5
}
 1013728:	bd10      	pop	{r4, pc}
        return false;
 101372a:	2000      	movs	r0, #0
 101372c:	e7fc      	b.n	1013728 <key_matches+0x32>

0101372e <nrf_802154_ack_timeout_transmitted_hook>:

void nrf_802154_ack_timeout_transmitted_hook(const uint8_t * p_frame)
{
    assert((p_frame == mp_frame) || (!m_procedure_is_active));

    timeout_timer_stop();
 101372e:	f7f9 b99f 	b.w	100ca70 <timeout_timer_stop>

01013732 <nrf_802154_ack_timeout_rx_ack_started_hook>:

void nrf_802154_ack_timeout_rx_ack_started_hook(void)
{
    assert(m_procedure_is_active);

    timeout_timer_stop();
 1013732:	f7f9 b99d 	b.w	100ca70 <timeout_timer_stop>

01013736 <nrf_802154_ack_timeout_tx_failed_hook>:
}

bool nrf_802154_ack_timeout_tx_failed_hook(uint8_t * p_frame, nrf_802154_tx_error_t error)
{
 1013736:	b508      	push	{r3, lr}
    (void)error;
    assert((p_frame == mp_frame) || (!m_procedure_is_active));

    timeout_timer_stop();
 1013738:	f7f9 f99a 	bl	100ca70 <timeout_timer_stop>

    return true;
}
 101373c:	2001      	movs	r0, #1
 101373e:	bd08      	pop	{r3, pc}

01013740 <nrf_802154_ack_generator_init>:
            return FRAME_VERSION_INVALID;
    }
}

void nrf_802154_ack_generator_init(void)
{
 1013740:	b508      	push	{r3, lr}
    // Both generators are initialized to enable sending both Imm-Acks and Enh-Acks.
    nrf_802154_imm_ack_generator_init();
 1013742:	f7f9 fe55 	bl	100d3f0 <nrf_802154_imm_ack_generator_init>
    nrf_802154_enh_ack_generator_init();
}
 1013746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_enh_ack_generator_init();
 101374a:	f000 b818 	b.w	101377e <nrf_802154_enh_ack_generator_init>

0101374e <nrf_802154_ack_generator_reset>:

void nrf_802154_ack_generator_reset(void)
{
 101374e:	b508      	push	{r3, lr}
    // Both generators are reset to enable sending both Imm-Ack and Enh-Ack.
    nrf_802154_imm_ack_generator_reset();
 1013750:	f000 f816 	bl	1013780 <nrf_802154_imm_ack_generator_reset>
    nrf_802154_enh_ack_generator_reset();
}
 1013754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_enh_ack_generator_reset();
 1013758:	f7f9 bbf2 	b.w	100cf40 <nrf_802154_enh_ack_generator_reset>

0101375c <nrf_802154_ack_generator_create>:
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
 101375c:	6803      	ldr	r3, [r0, #0]

uint8_t * nrf_802154_ack_generator_create(const nrf_802154_frame_parser_data_t * p_frame_data)
{
 101375e:	4602      	mov	r2, r0
 1013760:	789b      	ldrb	r3, [r3, #2]
 1013762:	f003 0330 	and.w	r3, r3, #48	; 0x30
    switch (nrf_802154_frame_parser_frame_version_get(p_frame_data))
 1013766:	2b10      	cmp	r3, #16
 1013768:	d002      	beq.n	1013770 <nrf_802154_ack_generator_create+0x14>
 101376a:	2b20      	cmp	r3, #32
 101376c:	d003      	beq.n	1013776 <nrf_802154_ack_generator_create+0x1a>
 101376e:	b923      	cbnz	r3, 101377a <nrf_802154_ack_generator_create+0x1e>
    assert(nrf_802154_frame_parser_ar_bit_is_set(p_frame_data));

    switch (frame_version_is_2015_or_above(p_frame_data))
    {
        case FRAME_VERSION_BELOW_2015:
            return nrf_802154_imm_ack_generator_create(p_frame_data);
 1013770:	4610      	mov	r0, r2
 1013772:	f7f9 be51 	b.w	100d418 <nrf_802154_imm_ack_generator_create>

        case FRAME_VERSION_2015_OR_ABOVE:
            return nrf_802154_enh_ack_generator_create(p_frame_data);
 1013776:	f7f9 bc03 	b.w	100cf80 <nrf_802154_enh_ack_generator_create>

        default:
            return NULL;
    }
}
 101377a:	2000      	movs	r0, #0
 101377c:	4770      	bx	lr

0101377e <nrf_802154_enh_ack_generator_init>:
}
 101377e:	4770      	bx	lr

01013780 <nrf_802154_imm_ack_generator_reset>:
}
 1013780:	4770      	bx	lr

01013782 <ntf_slot_alloc>:
{
 1013782:	b570      	push	{r4, r5, r6, lr}
    for (size_t i = 0; i < pool_len; i++)
 1013784:	2300      	movs	r3, #0
            uint8_t taken = __LDREXB(&p_pool[i].taken);
 1013786:	2628      	movs	r6, #40	; 0x28
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 1013788:	2401      	movs	r4, #1
 101378a:	fb06 0503 	mla	r5, r6, r3, r0
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 101378e:	e8d5 2f4f 	ldrexb	r2, [r5]
            if (taken)
 1013792:	b2d2      	uxtb	r2, r2
 1013794:	b142      	cbz	r2, 10137a8 <ntf_slot_alloc+0x26>
  __ASM volatile ("clrex" ::: "memory");
 1013796:	f3bf 8f2f 	clrex
  __ASM volatile ("dmb 0xF":::"memory");
 101379a:	f3bf 8f5f 	dmb	sy
    for (size_t i = 0; i < pool_len; i++)
 101379e:	3301      	adds	r3, #1
 10137a0:	4299      	cmp	r1, r3
 10137a2:	d1f2      	bne.n	101378a <ntf_slot_alloc+0x8>
    return NTF_INVALID_SLOT_ID;
 10137a4:	20ff      	movs	r0, #255	; 0xff
}
 10137a6:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 10137a8:	e8c5 4f42 	strexb	r2, r4, [r5]
        while (__STREXB(true, &p_pool[i].taken));
 10137ac:	2a00      	cmp	r2, #0
 10137ae:	d1ee      	bne.n	101378e <ntf_slot_alloc+0xc>
  __ASM volatile ("dmb 0xF":::"memory");
 10137b0:	f3bf 8f5f 	dmb	sy
            return i;
 10137b4:	b2d8      	uxtb	r0, r3
 10137b6:	e7f6      	b.n	10137a6 <ntf_slot_alloc+0x24>

010137b8 <nrf_802154_notify_received>:
    bool notified = swi_notify_received(p_data, power, lqi);
 10137b8:	f7f9 be62 	b.w	100d480 <swi_notify_received>

010137bc <nrf_802154_notify_receive_failed>:
    bool notified = swi_notify_receive_failed(error, id, allow_drop);
 10137bc:	f7f9 be7e 	b.w	100d4bc <swi_notify_receive_failed>

010137c0 <nrf_802154_notify_transmitted>:
{
 10137c0:	b538      	push	{r3, r4, r5, lr}
 10137c2:	4604      	mov	r4, r0
 10137c4:	460d      	mov	r5, r1
    nrf_802154_tx_work_buffer_original_frame_update(p_frame,
 10137c6:	f7f7 ff29 	bl	100b61c <nrf_802154_tx_work_buffer_original_frame_update>
    bool notified = swi_notify_transmitted(p_frame, p_metadata);
 10137ca:	4629      	mov	r1, r5
 10137cc:	4620      	mov	r0, r4
}
 10137ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bool notified = swi_notify_transmitted(p_frame, p_metadata);
 10137d2:	f7f9 be99 	b.w	100d508 <swi_notify_transmitted>

010137d6 <nrf_802154_notify_transmit_failed>:
    bool notified = swi_notify_transmit_failed(p_frame, error, p_metadata);
 10137d6:	f7f9 bebb 	b.w	100d550 <swi_notify_transmit_failed>

010137da <nrf_802154_notify_energy_detected>:
    bool notified = swi_notify_energy_detected(result);
 10137da:	f7f9 bee1 	b.w	100d5a0 <swi_notify_energy_detected>

010137de <nrf_802154_notify_energy_detection_failed>:
    bool notified = swi_notify_energy_detection_failed(error);
 10137de:	f7f9 bef9 	b.w	100d5d4 <swi_notify_energy_detection_failed>

010137e2 <nrf_802154_notify_cca>:
    bool notified = swi_notify_cca(is_free);
 10137e2:	f7f9 bf11 	b.w	100d608 <swi_notify_cca>

010137e6 <nrf_802154_notify_cca_failed>:
    bool notified = swi_notify_cca_failed(error);
 10137e6:	f7f9 bf29 	b.w	100d63c <swi_notify_cca_failed>

010137ea <active_vector_priority_is_high>:
{
 10137ea:	b510      	push	{r4, lr}
    return nrf_802154_critical_section_active_vector_priority_get() <=
 10137ec:	f7f6 fc02 	bl	1009ff4 <nrf_802154_critical_section_active_vector_priority_get>
 10137f0:	4604      	mov	r4, r0
           nrf_802154_irq_priority_get(NRF_802154_EGU_IRQN);
 10137f2:	2014      	movs	r0, #20
 10137f4:	f7f4 fc88 	bl	1008108 <nrf_802154_irq_priority_get>
}
 10137f8:	4284      	cmp	r4, r0
 10137fa:	bf8c      	ite	hi
 10137fc:	2000      	movhi	r0, #0
 10137fe:	2001      	movls	r0, #1
 1013800:	bd10      	pop	{r4, pc}

01013802 <nrf_802154_request_sleep>:
    REQUEST_FUNCTION(nrf_802154_core_sleep, swi_sleep, term_lvl)
 1013802:	2300      	movs	r3, #0
{
 1013804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 1013806:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_sleep, swi_sleep, term_lvl)
 1013808:	f88d 3007 	strb.w	r3, [sp, #7]
 101380c:	f7ff ffed 	bl	10137ea <active_vector_priority_is_high>
 1013810:	4605      	mov	r5, r0
 1013812:	b140      	cbz	r0, 1013826 <nrf_802154_request_sleep+0x24>
 1013814:	4620      	mov	r0, r4
 1013816:	f7f6 f989 	bl	1009b2c <nrf_802154_core_sleep>
 101381a:	f88d 0007 	strb.w	r0, [sp, #7]
}
 101381e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1013822:	b003      	add	sp, #12
 1013824:	bd30      	pop	{r4, r5, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 1013826:	f7f9 ff9b 	bl	100d760 <req_enter>
    p_slot->data.sleep.p_result = p_result;
 101382a:	f10d 0207 	add.w	r2, sp, #7
    p_slot->type                = REQ_TYPE_SLEEP;
 101382e:	7005      	strb	r5, [r0, #0]
    p_slot->data.sleep.term_lvl = term_lvl;
 1013830:	7204      	strb	r4, [r0, #8]
    p_slot->data.sleep.p_result = p_result;
 1013832:	60c2      	str	r2, [r0, #12]
    req_exit();
 1013834:	f7f9 ffa0 	bl	100d778 <req_exit>
}
 1013838:	e7f1      	b.n	101381e <nrf_802154_request_sleep+0x1c>

0101383a <nrf_802154_request_receive>:
{
 101383a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 101383e:	461c      	mov	r4, r3
    REQUEST_FUNCTION(nrf_802154_core_receive,
 1013840:	2300      	movs	r3, #0
{
 1013842:	4607      	mov	r7, r0
 1013844:	460e      	mov	r6, r1
 1013846:	4615      	mov	r5, r2
 1013848:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    REQUEST_FUNCTION(nrf_802154_core_receive,
 101384c:	f88d 300f 	strb.w	r3, [sp, #15]
 1013850:	f7ff ffcb 	bl	10137ea <active_vector_priority_is_high>
 1013854:	b170      	cbz	r0, 1013874 <nrf_802154_request_receive+0x3a>
 1013856:	4623      	mov	r3, r4
 1013858:	462a      	mov	r2, r5
 101385a:	4631      	mov	r1, r6
 101385c:	4638      	mov	r0, r7
 101385e:	f8cd 8000 	str.w	r8, [sp]
 1013862:	f7f6 f98f 	bl	1009b84 <nrf_802154_core_receive>
 1013866:	f88d 000f 	strb.w	r0, [sp, #15]
}
 101386a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 101386e:	b004      	add	sp, #16
 1013870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 1013874:	f7f9 ff74 	bl	100d760 <req_enter>
    p_slot->type                     = REQ_TYPE_RECEIVE;
 1013878:	2301      	movs	r3, #1
 101387a:	7003      	strb	r3, [r0, #0]
    p_slot->data.receive.p_result    = p_result;
 101387c:	f10d 030f 	add.w	r3, sp, #15
    p_slot->data.receive.term_lvl    = term_lvl;
 1013880:	7307      	strb	r7, [r0, #12]
    p_slot->data.receive.req_orig    = req_orig;
 1013882:	7346      	strb	r6, [r0, #13]
    p_slot->data.receive.notif_func  = notify_function;
 1013884:	6085      	str	r5, [r0, #8]
    p_slot->data.receive.notif_abort = notify_abort;
 1013886:	7384      	strb	r4, [r0, #14]
    p_slot->data.receive.id          = id;
 1013888:	f8c0 8010 	str.w	r8, [r0, #16]
    p_slot->data.receive.p_result    = p_result;
 101388c:	6143      	str	r3, [r0, #20]
    req_exit();
 101388e:	f7f9 ff73 	bl	100d778 <req_exit>
}
 1013892:	e7ea      	b.n	101386a <nrf_802154_request_receive+0x30>

01013894 <nrf_802154_request_transmit>:
{
 1013894:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1013898:	461c      	mov	r4, r3
    REQUEST_FUNCTION(nrf_802154_core_transmit,
 101389a:	2300      	movs	r3, #0
{
 101389c:	4607      	mov	r7, r0
 101389e:	460e      	mov	r6, r1
 10138a0:	4615      	mov	r5, r2
 10138a2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    REQUEST_FUNCTION(nrf_802154_core_transmit,
 10138a6:	f88d 300f 	strb.w	r3, [sp, #15]
 10138aa:	f7ff ff9e 	bl	10137ea <active_vector_priority_is_high>
 10138ae:	b170      	cbz	r0, 10138ce <nrf_802154_request_transmit+0x3a>
 10138b0:	4623      	mov	r3, r4
 10138b2:	462a      	mov	r2, r5
 10138b4:	4631      	mov	r1, r6
 10138b6:	4638      	mov	r0, r7
 10138b8:	f8cd 8000 	str.w	r8, [sp]
 10138bc:	f7f6 f9a2 	bl	1009c04 <nrf_802154_core_transmit>
 10138c0:	f88d 000f 	strb.w	r0, [sp, #15]
}
 10138c4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 10138c8:	b004      	add	sp, #16
 10138ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 10138ce:	f7f9 ff47 	bl	100d760 <req_enter>
    p_slot->type                     = REQ_TYPE_TRANSMIT;
 10138d2:	2302      	movs	r3, #2
 10138d4:	7003      	strb	r3, [r0, #0]
    p_slot->data.transmit.p_result   = p_result;
 10138d6:	f10d 030f 	add.w	r3, sp, #15
    p_slot->data.transmit.p_params   = p_params;
 10138da:	e9c0 5404 	strd	r5, r4, [r0, #16]
    p_slot->data.transmit.term_lvl   = term_lvl;
 10138de:	7307      	strb	r7, [r0, #12]
    p_slot->data.transmit.req_orig   = req_orig;
 10138e0:	7346      	strb	r6, [r0, #13]
    p_slot->data.transmit.notif_func = notify_function;
 10138e2:	f8c0 8008 	str.w	r8, [r0, #8]
    p_slot->data.transmit.p_result   = p_result;
 10138e6:	6183      	str	r3, [r0, #24]
    req_exit();
 10138e8:	f7f9 ff46 	bl	100d778 <req_exit>
}
 10138ec:	e7ea      	b.n	10138c4 <nrf_802154_request_transmit+0x30>

010138ee <nrf_802154_request_energy_detection>:
    REQUEST_FUNCTION(nrf_802154_core_energy_detection,
 10138ee:	2300      	movs	r3, #0
{
 10138f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 10138f2:	4605      	mov	r5, r0
 10138f4:	460c      	mov	r4, r1
    REQUEST_FUNCTION(nrf_802154_core_energy_detection,
 10138f6:	f88d 3007 	strb.w	r3, [sp, #7]
 10138fa:	f7ff ff76 	bl	10137ea <active_vector_priority_is_high>
 10138fe:	b148      	cbz	r0, 1013914 <nrf_802154_request_energy_detection+0x26>
 1013900:	4621      	mov	r1, r4
 1013902:	4628      	mov	r0, r5
 1013904:	f7f6 f9f8 	bl	1009cf8 <nrf_802154_core_energy_detection>
 1013908:	f88d 0007 	strb.w	r0, [sp, #7]
}
 101390c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1013910:	b003      	add	sp, #12
 1013912:	bd30      	pop	{r4, r5, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 1013914:	f7f9 ff24 	bl	100d760 <req_enter>
    p_slot->type                           = REQ_TYPE_ENERGY_DETECTION;
 1013918:	2303      	movs	r3, #3
 101391a:	7003      	strb	r3, [r0, #0]
    p_slot->data.energy_detection.p_result = p_result;
 101391c:	f10d 0307 	add.w	r3, sp, #7
    p_slot->data.energy_detection.term_lvl = term_lvl;
 1013920:	7205      	strb	r5, [r0, #8]
    p_slot->data.energy_detection.time_us  = time_us;
 1013922:	6104      	str	r4, [r0, #16]
    p_slot->data.energy_detection.p_result = p_result;
 1013924:	60c3      	str	r3, [r0, #12]
    req_exit();
 1013926:	f7f9 ff27 	bl	100d778 <req_exit>
}
 101392a:	e7ef      	b.n	101390c <nrf_802154_request_energy_detection+0x1e>

0101392c <nrf_802154_request_cca>:
    REQUEST_FUNCTION(nrf_802154_core_cca, swi_cca, term_lvl)
 101392c:	2300      	movs	r3, #0
{
 101392e:	b513      	push	{r0, r1, r4, lr}
 1013930:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_cca, swi_cca, term_lvl)
 1013932:	f88d 3007 	strb.w	r3, [sp, #7]
 1013936:	f7ff ff58 	bl	10137ea <active_vector_priority_is_high>
 101393a:	b140      	cbz	r0, 101394e <nrf_802154_request_cca+0x22>
 101393c:	4620      	mov	r0, r4
 101393e:	f7ff fbfe 	bl	101313e <nrf_802154_core_cca>
 1013942:	f88d 0007 	strb.w	r0, [sp, #7]
}
 1013946:	f89d 0007 	ldrb.w	r0, [sp, #7]
 101394a:	b002      	add	sp, #8
 101394c:	bd10      	pop	{r4, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 101394e:	f7f9 ff07 	bl	100d760 <req_enter>
    p_slot->type              = REQ_TYPE_CCA;
 1013952:	2304      	movs	r3, #4
 1013954:	7003      	strb	r3, [r0, #0]
    p_slot->data.cca.p_result = p_result;
 1013956:	f10d 0307 	add.w	r3, sp, #7
    p_slot->data.cca.term_lvl = term_lvl;
 101395a:	7204      	strb	r4, [r0, #8]
    p_slot->data.cca.p_result = p_result;
 101395c:	60c3      	str	r3, [r0, #12]
    req_exit();
 101395e:	f7f9 ff0b 	bl	100d778 <req_exit>
}
 1013962:	e7f0      	b.n	1013946 <nrf_802154_request_cca+0x1a>

01013964 <nrf_802154_request_continuous_carrier>:
    REQUEST_FUNCTION(nrf_802154_core_continuous_carrier,
 1013964:	2300      	movs	r3, #0
{
 1013966:	b513      	push	{r0, r1, r4, lr}
 1013968:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_continuous_carrier,
 101396a:	f88d 3007 	strb.w	r3, [sp, #7]
 101396e:	f7ff ff3c 	bl	10137ea <active_vector_priority_is_high>
 1013972:	b140      	cbz	r0, 1013986 <nrf_802154_request_continuous_carrier+0x22>
 1013974:	4620      	mov	r0, r4
 1013976:	f7ff fbf8 	bl	101316a <nrf_802154_core_continuous_carrier>
 101397a:	f88d 0007 	strb.w	r0, [sp, #7]
}
 101397e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1013982:	b002      	add	sp, #8
 1013984:	bd10      	pop	{r4, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 1013986:	f7f9 feeb 	bl	100d760 <req_enter>
    p_slot->type                             = REQ_TYPE_CONTINUOUS_CARRIER;
 101398a:	2305      	movs	r3, #5
 101398c:	7003      	strb	r3, [r0, #0]
    p_slot->data.continuous_carrier.p_result = p_result;
 101398e:	f10d 0307 	add.w	r3, sp, #7
    p_slot->data.continuous_carrier.term_lvl = term_lvl;
 1013992:	7204      	strb	r4, [r0, #8]
    p_slot->data.continuous_carrier.p_result = p_result;
 1013994:	60c3      	str	r3, [r0, #12]
    req_exit();
 1013996:	f7f9 feef 	bl	100d778 <req_exit>
}
 101399a:	e7f0      	b.n	101397e <nrf_802154_request_continuous_carrier+0x1a>

0101399c <nrf_802154_request_modulated_carrier>:
    REQUEST_FUNCTION(nrf_802154_core_modulated_carrier,
 101399c:	2300      	movs	r3, #0
{
 101399e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 10139a0:	4605      	mov	r5, r0
 10139a2:	460c      	mov	r4, r1
    REQUEST_FUNCTION(nrf_802154_core_modulated_carrier,
 10139a4:	f88d 3007 	strb.w	r3, [sp, #7]
 10139a8:	f7ff ff1f 	bl	10137ea <active_vector_priority_is_high>
 10139ac:	b148      	cbz	r0, 10139c2 <nrf_802154_request_modulated_carrier+0x26>
 10139ae:	4621      	mov	r1, r4
 10139b0:	4628      	mov	r0, r5
 10139b2:	f7f6 f9c5 	bl	1009d40 <nrf_802154_core_modulated_carrier>
 10139b6:	f88d 0007 	strb.w	r0, [sp, #7]
}
 10139ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 10139be:	b003      	add	sp, #12
 10139c0:	bd30      	pop	{r4, r5, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 10139c2:	f7f9 fecd 	bl	100d760 <req_enter>
    p_slot->type                            = REQ_TYPE_MODULATED_CARRIER;
 10139c6:	2306      	movs	r3, #6
 10139c8:	7003      	strb	r3, [r0, #0]
    p_slot->data.modulated_carrier.p_result = p_result;
 10139ca:	f10d 0307 	add.w	r3, sp, #7
    p_slot->data.modulated_carrier.term_lvl = term_lvl;
 10139ce:	7205      	strb	r5, [r0, #8]
    p_slot->data.modulated_carrier.p_data   = p_data;
 10139d0:	60c4      	str	r4, [r0, #12]
    p_slot->data.modulated_carrier.p_result = p_result;
 10139d2:	6103      	str	r3, [r0, #16]
    req_exit();
 10139d4:	f7f9 fed0 	bl	100d778 <req_exit>
}
 10139d8:	e7ef      	b.n	10139ba <nrf_802154_request_modulated_carrier+0x1e>

010139da <nrf_802154_request_buffer_free>:
    REQUEST_FUNCTION(nrf_802154_core_notify_buffer_free, swi_buffer_free, p_data)
 10139da:	2300      	movs	r3, #0
{
 10139dc:	b513      	push	{r0, r1, r4, lr}
 10139de:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_notify_buffer_free, swi_buffer_free, p_data)
 10139e0:	f88d 3007 	strb.w	r3, [sp, #7]
 10139e4:	f7ff ff01 	bl	10137ea <active_vector_priority_is_high>
 10139e8:	b140      	cbz	r0, 10139fc <nrf_802154_request_buffer_free+0x22>
 10139ea:	4620      	mov	r0, r4
 10139ec:	f7f6 f9c4 	bl	1009d78 <nrf_802154_core_notify_buffer_free>
 10139f0:	f88d 0007 	strb.w	r0, [sp, #7]
}
 10139f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 10139f8:	b002      	add	sp, #8
 10139fa:	bd10      	pop	{r4, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 10139fc:	f7f9 feb0 	bl	100d760 <req_enter>
    p_slot->type                      = REQ_TYPE_BUFFER_FREE;
 1013a00:	2307      	movs	r3, #7
 1013a02:	7003      	strb	r3, [r0, #0]
    p_slot->data.buffer_free.p_result = p_result;
 1013a04:	446b      	add	r3, sp
    p_slot->data.buffer_free.p_data   = p_data;
 1013a06:	6084      	str	r4, [r0, #8]
    p_slot->data.buffer_free.p_result = p_result;
 1013a08:	60c3      	str	r3, [r0, #12]
    req_exit();
 1013a0a:	f7f9 feb5 	bl	100d778 <req_exit>
}
 1013a0e:	e7f1      	b.n	10139f4 <nrf_802154_request_buffer_free+0x1a>

01013a10 <nrf_802154_request_channel_update>:
    REQUEST_FUNCTION(nrf_802154_core_channel_update, swi_channel_update, req_orig)
 1013a10:	2300      	movs	r3, #0
{
 1013a12:	b513      	push	{r0, r1, r4, lr}
 1013a14:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_channel_update, swi_channel_update, req_orig)
 1013a16:	f88d 3007 	strb.w	r3, [sp, #7]
 1013a1a:	f7ff fee6 	bl	10137ea <active_vector_priority_is_high>
 1013a1e:	b140      	cbz	r0, 1013a32 <nrf_802154_request_channel_update+0x22>
 1013a20:	4620      	mov	r0, r4
 1013a22:	f7f6 f9c5 	bl	1009db0 <nrf_802154_core_channel_update>
 1013a26:	f88d 0007 	strb.w	r0, [sp, #7]
}
 1013a2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1013a2e:	b002      	add	sp, #8
 1013a30:	bd10      	pop	{r4, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 1013a32:	f7f9 fe95 	bl	100d760 <req_enter>
    p_slot->type                         = REQ_TYPE_CHANNEL_UPDATE;
 1013a36:	2308      	movs	r3, #8
 1013a38:	7003      	strb	r3, [r0, #0]
    p_slot->data.channel_update.p_result = p_result;
 1013a3a:	f10d 0307 	add.w	r3, sp, #7
 1013a3e:	60c3      	str	r3, [r0, #12]
    p_slot->data.channel_update.req_orig = req_orig;
 1013a40:	7204      	strb	r4, [r0, #8]
    req_exit();
 1013a42:	f7f9 fe99 	bl	100d778 <req_exit>
}
 1013a46:	e7f0      	b.n	1013a2a <nrf_802154_request_channel_update+0x1a>

01013a48 <nrf_802154_request_cca_cfg_update>:
    REQUEST_FUNCTION_NO_ARGS(nrf_802154_core_cca_cfg_update, swi_cca_cfg_update)
 1013a48:	2300      	movs	r3, #0
{
 1013a4a:	b507      	push	{r0, r1, r2, lr}
    REQUEST_FUNCTION_NO_ARGS(nrf_802154_core_cca_cfg_update, swi_cca_cfg_update)
 1013a4c:	f88d 3007 	strb.w	r3, [sp, #7]
 1013a50:	f7ff fecb 	bl	10137ea <active_vector_priority_is_high>
 1013a54:	b140      	cbz	r0, 1013a68 <nrf_802154_request_cca_cfg_update+0x20>
 1013a56:	f7f6 f9dd 	bl	1009e14 <nrf_802154_core_cca_cfg_update>
 1013a5a:	f88d 0007 	strb.w	r0, [sp, #7]
}
 1013a5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1013a62:	b003      	add	sp, #12
 1013a64:	f85d fb04 	ldr.w	pc, [sp], #4
    nrf_802154_req_data_t * p_slot = req_enter();
 1013a68:	f7f9 fe7a 	bl	100d760 <req_enter>
    p_slot->type                         = REQ_TYPE_CCA_CFG_UPDATE;
 1013a6c:	2309      	movs	r3, #9
 1013a6e:	7003      	strb	r3, [r0, #0]
    p_slot->data.cca_cfg_update.p_result = p_result;
 1013a70:	f10d 0307 	add.w	r3, sp, #7
 1013a74:	6083      	str	r3, [r0, #8]
    req_exit();
 1013a76:	f7f9 fe7f 	bl	100d778 <req_exit>
}
 1013a7a:	e7f0      	b.n	1013a5e <nrf_802154_request_cca_cfg_update+0x16>

01013a7c <nrf_802154_request_transmit_raw_at>:
{
 1013a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 1013a7e:	461c      	mov	r4, r3
    REQUEST_FUNCTION(nrf_802154_delayed_trx_transmit, swi_transmit_at, p_data, tx_time, p_metadata);
 1013a80:	2300      	movs	r3, #0
{
 1013a82:	b085      	sub	sp, #20
 1013a84:	4606      	mov	r6, r0
 1013a86:	4615      	mov	r5, r2
 1013a88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    REQUEST_FUNCTION(nrf_802154_delayed_trx_transmit, swi_transmit_at, p_data, tx_time, p_metadata);
 1013a8a:	f88d 300f 	strb.w	r3, [sp, #15]
 1013a8e:	f7ff feac 	bl	10137ea <active_vector_priority_is_high>
 1013a92:	b158      	cbz	r0, 1013aac <nrf_802154_request_transmit_raw_at+0x30>
 1013a94:	462a      	mov	r2, r5
 1013a96:	4623      	mov	r3, r4
 1013a98:	4630      	mov	r0, r6
 1013a9a:	9700      	str	r7, [sp, #0]
 1013a9c:	f7f8 f8b4 	bl	100bc08 <nrf_802154_delayed_trx_transmit>
 1013aa0:	f88d 000f 	strb.w	r0, [sp, #15]
}
 1013aa4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 1013aa8:	b005      	add	sp, #20
 1013aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 1013aac:	f7f9 fe58 	bl	100d760 <req_enter>
    p_slot->type                        = REQ_TYPE_TRANSMIT_AT;
 1013ab0:	230d      	movs	r3, #13
 1013ab2:	7003      	strb	r3, [r0, #0]
    p_slot->data.transmit_at.p_result   = p_result;
 1013ab4:	f10d 030f 	add.w	r3, sp, #15
    p_slot->data.transmit_at.tx_time    = tx_time;
 1013ab8:	e9c0 5404 	strd	r5, r4, [r0, #16]
    p_slot->data.transmit_at.p_data     = p_data;
 1013abc:	6086      	str	r6, [r0, #8]
    p_slot->data.transmit_at.p_metadata = p_metadata;
 1013abe:	6187      	str	r7, [r0, #24]
    p_slot->data.transmit_at.p_result   = p_result;
 1013ac0:	61c3      	str	r3, [r0, #28]
    req_exit();
 1013ac2:	f7f9 fe59 	bl	100d778 <req_exit>
}
 1013ac6:	e7ed      	b.n	1013aa4 <nrf_802154_request_transmit_raw_at+0x28>

01013ac8 <nrf_802154_request_transmit_at_cancel>:
    REQUEST_FUNCTION_NO_ARGS(nrf_802154_delayed_trx_transmit_cancel, swi_transmit_at_cancel);
 1013ac8:	2300      	movs	r3, #0
{
 1013aca:	b507      	push	{r0, r1, r2, lr}
    REQUEST_FUNCTION_NO_ARGS(nrf_802154_delayed_trx_transmit_cancel, swi_transmit_at_cancel);
 1013acc:	f88d 3007 	strb.w	r3, [sp, #7]
 1013ad0:	f7ff fe8b 	bl	10137ea <active_vector_priority_is_high>
 1013ad4:	b140      	cbz	r0, 1013ae8 <nrf_802154_request_transmit_at_cancel+0x20>
 1013ad6:	f7f8 f935 	bl	100bd44 <nrf_802154_delayed_trx_transmit_cancel>
 1013ada:	f88d 0007 	strb.w	r0, [sp, #7]
}
 1013ade:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1013ae2:	b003      	add	sp, #12
 1013ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    nrf_802154_req_data_t * p_slot = req_enter();
 1013ae8:	f7f9 fe3a 	bl	100d760 <req_enter>
    p_slot->type                             = REQ_TYPE_TRANSMIT_AT_CANCEL;
 1013aec:	230e      	movs	r3, #14
 1013aee:	7003      	strb	r3, [r0, #0]
    p_slot->data.transmit_at_cancel.p_result = p_result;
 1013af0:	f10d 0307 	add.w	r3, sp, #7
 1013af4:	6083      	str	r3, [r0, #8]
    req_exit();
 1013af6:	f7f9 fe3f 	bl	100d778 <req_exit>
}
 1013afa:	e7f0      	b.n	1013ade <nrf_802154_request_transmit_at_cancel+0x16>

01013afc <nrf_802154_request_receive_at>:
{
 1013afc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1013b00:	461c      	mov	r4, r3
    REQUEST_FUNCTION(nrf_802154_delayed_trx_receive, swi_receive_at, rx_time, timeout, channel, id);
 1013b02:	2300      	movs	r3, #0
{
 1013b04:	4607      	mov	r7, r0
 1013b06:	460e      	mov	r6, r1
 1013b08:	4615      	mov	r5, r2
 1013b0a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    REQUEST_FUNCTION(nrf_802154_delayed_trx_receive, swi_receive_at, rx_time, timeout, channel, id);
 1013b0e:	f88d 300f 	strb.w	r3, [sp, #15]
 1013b12:	f7ff fe6a 	bl	10137ea <active_vector_priority_is_high>
 1013b16:	b170      	cbz	r0, 1013b36 <nrf_802154_request_receive_at+0x3a>
 1013b18:	4623      	mov	r3, r4
 1013b1a:	462a      	mov	r2, r5
 1013b1c:	4638      	mov	r0, r7
 1013b1e:	4631      	mov	r1, r6
 1013b20:	f8cd 8000 	str.w	r8, [sp]
 1013b24:	f7f8 f8ca 	bl	100bcbc <nrf_802154_delayed_trx_receive>
 1013b28:	f88d 000f 	strb.w	r0, [sp, #15]
}
 1013b2c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 1013b30:	b004      	add	sp, #16
 1013b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 1013b36:	f7f9 fe13 	bl	100d760 <req_enter>
    p_slot->type                     = REQ_TYPE_RECEIVE_AT;
 1013b3a:	230f      	movs	r3, #15
 1013b3c:	7003      	strb	r3, [r0, #0]
    p_slot->data.receive_at.p_result = p_result;
 1013b3e:	446b      	add	r3, sp
    p_slot->data.receive_at.rx_time  = rx_time;
 1013b40:	e9c0 7602 	strd	r7, r6, [r0, #8]
    p_slot->data.receive_at.timeout  = timeout;
 1013b44:	6105      	str	r5, [r0, #16]
    p_slot->data.receive_at.channel  = channel;
 1013b46:	7504      	strb	r4, [r0, #20]
    p_slot->data.receive_at.id       = id;
 1013b48:	f8c0 8018 	str.w	r8, [r0, #24]
    p_slot->data.receive_at.p_result = p_result;
 1013b4c:	61c3      	str	r3, [r0, #28]
    req_exit();
 1013b4e:	f7f9 fe13 	bl	100d778 <req_exit>
}
 1013b52:	e7eb      	b.n	1013b2c <nrf_802154_request_receive_at+0x30>

01013b54 <nrf_802154_request_receive_at_cancel>:
    REQUEST_FUNCTION(nrf_802154_delayed_trx_receive_cancel, swi_receive_at_cancel, id);
 1013b54:	2300      	movs	r3, #0
{
 1013b56:	b513      	push	{r0, r1, r4, lr}
 1013b58:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_delayed_trx_receive_cancel, swi_receive_at_cancel, id);
 1013b5a:	f88d 3007 	strb.w	r3, [sp, #7]
 1013b5e:	f7ff fe44 	bl	10137ea <active_vector_priority_is_high>
 1013b62:	b140      	cbz	r0, 1013b76 <nrf_802154_request_receive_at_cancel+0x22>
 1013b64:	4620      	mov	r0, r4
 1013b66:	f7f8 f901 	bl	100bd6c <nrf_802154_delayed_trx_receive_cancel>
 1013b6a:	f88d 0007 	strb.w	r0, [sp, #7]
}
 1013b6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1013b72:	b002      	add	sp, #8
 1013b74:	bd10      	pop	{r4, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 1013b76:	f7f9 fdf3 	bl	100d760 <req_enter>
    p_slot->type                            = REQ_TYPE_RECEIVE_AT_CANCEL;
 1013b7a:	2310      	movs	r3, #16
 1013b7c:	7003      	strb	r3, [r0, #0]
    p_slot->data.receive_at_cancel.p_result = p_result;
 1013b7e:	f10d 0307 	add.w	r3, sp, #7
    p_slot->data.receive_at_cancel.id       = id;
 1013b82:	6084      	str	r4, [r0, #8]
    p_slot->data.receive_at_cancel.p_result = p_result;
 1013b84:	60c3      	str	r3, [r0, #12]
    req_exit();
 1013b86:	f7f9 fdf7 	bl	100d778 <req_exit>
}
 1013b8a:	e7f0      	b.n	1013b6e <nrf_802154_request_receive_at_cancel+0x1a>

01013b8c <nrf_802154_request_csma_ca_start>:
    REQUEST_FUNCTION(nrf_802154_csma_ca_start,
 1013b8c:	2300      	movs	r3, #0
{
 1013b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 1013b90:	4605      	mov	r5, r0
 1013b92:	460c      	mov	r4, r1
    REQUEST_FUNCTION(nrf_802154_csma_ca_start,
 1013b94:	f88d 3007 	strb.w	r3, [sp, #7]
 1013b98:	f7ff fe27 	bl	10137ea <active_vector_priority_is_high>
 1013b9c:	b148      	cbz	r0, 1013bb2 <nrf_802154_request_csma_ca_start+0x26>
 1013b9e:	4621      	mov	r1, r4
 1013ba0:	4628      	mov	r0, r5
 1013ba2:	f7f7 fe6f 	bl	100b884 <nrf_802154_csma_ca_start>
 1013ba6:	f88d 0007 	strb.w	r0, [sp, #7]
}
 1013baa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1013bae:	b003      	add	sp, #12
 1013bb0:	bd30      	pop	{r4, r5, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
 1013bb2:	f7f9 fdd5 	bl	100d760 <req_enter>
    p_slot->type                          = REQ_TYPE_CSMA_CA_START;
 1013bb6:	2311      	movs	r3, #17
 1013bb8:	7003      	strb	r3, [r0, #0]
    p_slot->data.csma_ca_start.p_result   = p_result;
 1013bba:	f10d 0307 	add.w	r3, sp, #7
    p_slot->data.csma_ca_start.p_metadata = p_metadata;
 1013bbe:	e9c0 5402 	strd	r5, r4, [r0, #8]
    p_slot->data.csma_ca_start.p_result   = p_result;
 1013bc2:	6103      	str	r3, [r0, #16]
    req_exit();
 1013bc4:	f7f9 fdd8 	bl	100d778 <req_exit>
}
 1013bc8:	e7ef      	b.n	1013baa <nrf_802154_request_csma_ca_start+0x1e>

01013bca <z_errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 1013bca:	f7fc ba97 	b.w	10100fc <z_impl_z_errno>

01013bce <spinel_packed_uint_decode>:
    unsigned int   value = 0;
 1013bce:	2300      	movs	r3, #0
{
 1013bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 1013bd2:	4605      	mov	r5, r0
    spinel_ssize_t ret   = 0;
 1013bd4:	4618      	mov	r0, r3
        if ((len < sizeof(uint8_t)) || (i >= sizeof(unsigned int) * CHAR_BIT))
 1013bd6:	4288      	cmp	r0, r1
 1013bd8:	ebc0 07c0 	rsb	r7, r0, r0, lsl #3
 1013bdc:	d00c      	beq.n	1013bf8 <spinel_packed_uint_decode+0x2a>
 1013bde:	2805      	cmp	r0, #5
 1013be0:	d00a      	beq.n	1013bf8 <spinel_packed_uint_decode+0x2a>
        value |= (unsigned int)(bytes[0] & 0x7F) << i;
 1013be2:	5c2e      	ldrb	r6, [r5, r0]
        ret += sizeof(uint8_t);
 1013be4:	3001      	adds	r0, #1
        value |= (unsigned int)(bytes[0] & 0x7F) << i;
 1013be6:	f006 047f 	and.w	r4, r6, #127	; 0x7f
 1013bea:	40bc      	lsls	r4, r7
 1013bec:	4323      	orrs	r3, r4
    } while ((bytes[-1] & 0x80) == 0x80);
 1013bee:	0634      	lsls	r4, r6, #24
 1013bf0:	d4f1      	bmi.n	1013bd6 <spinel_packed_uint_decode+0x8>
    if ((ret > 0) && (value_ptr != NULL))
 1013bf2:	b102      	cbz	r2, 1013bf6 <spinel_packed_uint_decode+0x28>
        *value_ptr = value;
 1013bf4:	6013      	str	r3, [r2, #0]
}
 1013bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1013bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ret;
 1013bfc:	e7fb      	b.n	1013bf6 <spinel_packed_uint_decode+0x28>

01013bfe <spinel_packed_uint_size>:
    if (value < (1 << 7))
 1013bfe:	287f      	cmp	r0, #127	; 0x7f
 1013c00:	d90b      	bls.n	1013c1a <spinel_packed_uint_size+0x1c>
    else if (value < (1 << 14))
 1013c02:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 1013c06:	d30a      	bcc.n	1013c1e <spinel_packed_uint_size+0x20>
    else if (value < (1 << 21))
 1013c08:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 1013c0c:	d309      	bcc.n	1013c22 <spinel_packed_uint_size+0x24>
        ret = 4;
 1013c0e:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 1013c12:	bf2c      	ite	cs
 1013c14:	2005      	movcs	r0, #5
 1013c16:	2004      	movcc	r0, #4
 1013c18:	4770      	bx	lr
        ret = 1;
 1013c1a:	2001      	movs	r0, #1
 1013c1c:	4770      	bx	lr
        ret = 2;
 1013c1e:	2002      	movs	r0, #2
 1013c20:	4770      	bx	lr
        ret = 3;
 1013c22:	2003      	movs	r0, #3
}
 1013c24:	4770      	bx	lr

01013c26 <spinel_packed_uint_encode>:
{
 1013c26:	4603      	mov	r3, r0
 1013c28:	b510      	push	{r4, lr}
    const spinel_ssize_t encoded_size = spinel_packed_uint_size(value);
 1013c2a:	4610      	mov	r0, r2
 1013c2c:	f7ff ffe7 	bl	1013bfe <spinel_packed_uint_size>
    if ((spinel_ssize_t)len >= encoded_size)
 1013c30:	4281      	cmp	r1, r0
 1013c32:	db07      	blt.n	1013c44 <spinel_packed_uint_encode+0x1e>
 1013c34:	1e44      	subs	r4, r0, #1
 1013c36:	441c      	add	r4, r3
        for (i = 0; i != encoded_size - 1; ++i)
 1013c38:	42a3      	cmp	r3, r4
            *bytes++ = (value & 0x7F) | 0x80;
 1013c3a:	b2d1      	uxtb	r1, r2
        for (i = 0; i != encoded_size - 1; ++i)
 1013c3c:	d103      	bne.n	1013c46 <spinel_packed_uint_encode+0x20>
        *bytes++ = (value & 0x7F);
 1013c3e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 1013c42:	7019      	strb	r1, [r3, #0]
}
 1013c44:	bd10      	pop	{r4, pc}
            *bytes++ = (value & 0x7F) | 0x80;
 1013c46:	f061 017f 	orn	r1, r1, #127	; 0x7f
 1013c4a:	f803 1b01 	strb.w	r1, [r3], #1
            value    = (value >> 7);
 1013c4e:	09d2      	lsrs	r2, r2, #7
        for (i = 0; i != encoded_size - 1; ++i)
 1013c50:	e7f2      	b.n	1013c38 <spinel_packed_uint_encode+0x12>

01013c52 <spinel_next_packed_datatype>:
    int depth = 0;
 1013c52:	2100      	movs	r1, #0
{
 1013c54:	b510      	push	{r4, lr}
        switch (*++pack_format)
 1013c56:	7842      	ldrb	r2, [r0, #1]
 1013c58:	1c43      	adds	r3, r0, #1
 1013c5a:	2a28      	cmp	r2, #40	; 0x28
 1013c5c:	d004      	beq.n	1013c68 <spinel_next_packed_datatype+0x16>
 1013c5e:	2a29      	cmp	r2, #41	; 0x29
 1013c60:	d00d      	beq.n	1013c7e <spinel_next_packed_datatype+0x2c>
 1013c62:	4618      	mov	r0, r3
    } while ((depth > 0) && *pack_format != 0);
 1013c64:	b9c9      	cbnz	r1, 1013c9a <spinel_next_packed_datatype+0x48>
 1013c66:	e01c      	b.n	1013ca2 <spinel_next_packed_datatype+0x50>
    int depth = 0;
 1013c68:	4618      	mov	r0, r3
            depth++;
 1013c6a:	4604      	mov	r4, r0
        switch (*++pack_format)
 1013c6c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
            depth++;
 1013c70:	3101      	adds	r1, #1
        switch (*++pack_format)
 1013c72:	2a28      	cmp	r2, #40	; 0x28
 1013c74:	d0f9      	beq.n	1013c6a <spinel_next_packed_datatype+0x18>
 1013c76:	2a29      	cmp	r2, #41	; 0x29
 1013c78:	d10f      	bne.n	1013c9a <spinel_next_packed_datatype+0x48>
 1013c7a:	4603      	mov	r3, r0
 1013c7c:	4620      	mov	r0, r4
 1013c7e:	4604      	mov	r4, r0
            depth--;
 1013c80:	3901      	subs	r1, #1
            if (depth == 0)
 1013c82:	2900      	cmp	r1, #0
        switch (*++pack_format)
 1013c84:	4618      	mov	r0, r3
            if (depth == 0)
 1013c86:	d00b      	beq.n	1013ca0 <spinel_next_packed_datatype+0x4e>
    } while ((depth > 0) && *pack_format != 0);
 1013c88:	dd0b      	ble.n	1013ca2 <spinel_next_packed_datatype+0x50>
        switch (*++pack_format)
 1013c8a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 1013c8e:	2a28      	cmp	r2, #40	; 0x28
 1013c90:	d0ea      	beq.n	1013c68 <spinel_next_packed_datatype+0x16>
 1013c92:	2a29      	cmp	r2, #41	; 0x29
 1013c94:	4604      	mov	r4, r0
 1013c96:	d0f3      	beq.n	1013c80 <spinel_next_packed_datatype+0x2e>
 1013c98:	4618      	mov	r0, r3
    } while ((depth > 0) && *pack_format != 0);
 1013c9a:	2a00      	cmp	r2, #0
 1013c9c:	d1db      	bne.n	1013c56 <spinel_next_packed_datatype+0x4>
 1013c9e:	e000      	b.n	1013ca2 <spinel_next_packed_datatype+0x50>
                pack_format++;
 1013ca0:	1ca0      	adds	r0, r4, #2
}
 1013ca2:	bd10      	pop	{r4, pc}

01013ca4 <spinel_datatype_unpack>:
{
 1013ca4:	b40c      	push	{r2, r3}
 1013ca6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 1013ca8:	ac06      	add	r4, sp, #24
 1013caa:	f854 3b04 	ldr.w	r3, [r4], #4
 1013cae:	460a      	mov	r2, r1
    ret = spinel_datatype_vunpack_(false, data_in, data_len, pack_format, &args);
 1013cb0:	a903      	add	r1, sp, #12
 1013cb2:	9100      	str	r1, [sp, #0]
 1013cb4:	4601      	mov	r1, r0
 1013cb6:	2000      	movs	r0, #0
    va_start(args.obj, pack_format);
 1013cb8:	9403      	str	r4, [sp, #12]
    ret = spinel_datatype_vunpack_(false, data_in, data_len, pack_format, &args);
 1013cba:	f7f9 fe1d 	bl	100d8f8 <spinel_datatype_vunpack_>
}
 1013cbe:	b004      	add	sp, #16
 1013cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1013cc4:	b002      	add	sp, #8
 1013cc6:	4770      	bx	lr

01013cc8 <spinel_datatype_pack>:

spinel_ssize_t spinel_datatype_pack(uint8_t *data_out, spinel_size_t data_len_max, const char *pack_format, ...)
{
 1013cc8:	b40c      	push	{r2, r3}
 1013cca:	b507      	push	{r0, r1, r2, lr}
 1013ccc:	ab04      	add	r3, sp, #16
 1013cce:	f853 2b04 	ldr.w	r2, [r3], #4
    int         ret;
    va_list_obj args;
    va_start(args.obj, pack_format);
 1013cd2:	9301      	str	r3, [sp, #4]

    ret = spinel_datatype_vpack_(data_out, data_len_max, pack_format, &args);
 1013cd4:	ab01      	add	r3, sp, #4
 1013cd6:	f7fa f84d 	bl	100dd74 <spinel_datatype_vpack_>

    va_end(args.obj);
    return ret;
}
 1013cda:	b003      	add	sp, #12
 1013cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 1013ce0:	b002      	add	sp, #8
 1013ce2:	4770      	bx	lr

01013ce4 <spinel_datatype_vpack>:

spinel_ssize_t spinel_datatype_vpack(uint8_t *     data_out,
                                     spinel_size_t data_len_max,
                                     const char *  pack_format,
                                     va_list       args)
{
 1013ce4:	b507      	push	{r0, r1, r2, lr}
    int         ret;
    va_list_obj args_obj;
    va_copy(args_obj.obj, args);
 1013ce6:	9301      	str	r3, [sp, #4]

    ret = spinel_datatype_vpack_(data_out, data_len_max, pack_format, &args_obj);
 1013ce8:	ab01      	add	r3, sp, #4
 1013cea:	f7fa f843 	bl	100dd74 <spinel_datatype_vpack_>

    va_end(args_obj.obj);
    return ret;
}
 1013cee:	b003      	add	sp, #12
 1013cf0:	f85d fb04 	ldr.w	pc, [sp], #4

01013cf4 <nrf_802154_buffer_allocator_init>:

void nrf_802154_buffer_allocator_init(nrf_802154_buffer_allocator_t * p_obj,
                                      void                          * p_memory,
                                      size_t                          memsize)
{
    size_t capacity = memsize / sizeof(nrf_802154_buffer_t);
 1013cf4:	2381      	movs	r3, #129	; 0x81
 1013cf6:	fbb2 f2f3 	udiv	r2, r2, r3
    p_obj->p_memory = p_memory;
    p_obj->capacity = capacity;

    nrf_802154_buffer_t * p_buffer = (nrf_802154_buffer_t *)p_obj->p_memory;

    for (size_t i = 0; i < p_obj->capacity; i++)
 1013cfa:	2300      	movs	r3, #0
{
 1013cfc:	b510      	push	{r4, lr}
    {
        p_buffer[i].taken = false;
 1013cfe:	461c      	mov	r4, r3
    p_obj->p_memory = p_memory;
 1013d00:	6001      	str	r1, [r0, #0]
    p_obj->capacity = capacity;
 1013d02:	6042      	str	r2, [r0, #4]
    for (size_t i = 0; i < p_obj->capacity; i++)
 1013d04:	6842      	ldr	r2, [r0, #4]
 1013d06:	429a      	cmp	r2, r3
 1013d08:	d800      	bhi.n	1013d0c <nrf_802154_buffer_allocator_init+0x18>
    }
}
 1013d0a:	bd10      	pop	{r4, pc}
        p_buffer[i].taken = false;
 1013d0c:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
 1013d10:	440a      	add	r2, r1
 1013d12:	f882 4080 	strb.w	r4, [r2, #128]	; 0x80
    for (size_t i = 0; i < p_obj->capacity; i++)
 1013d16:	3301      	adds	r3, #1
 1013d18:	e7f4      	b.n	1013d04 <nrf_802154_buffer_allocator_init+0x10>

01013d1a <nrf_802154_buffer_allocator_alloc>:
    uint32_t              crit_sect = 0UL;
 1013d1a:	2300      	movs	r3, #0

void * nrf_802154_buffer_allocator_alloc(const nrf_802154_buffer_allocator_t * p_obj)
{
 1013d1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t              crit_sect = 0UL;
 1013d1e:	9301      	str	r3, [sp, #4]
    return buffer_alloc((nrf_802154_buffer_t *)p_obj->p_memory, p_obj->capacity);
 1013d20:	e9d0 6500 	ldrd	r6, r5, [r0]
        for (uint32_t i = 0; i < buffer_pool_len; i++)
 1013d24:	2300      	movs	r3, #0
 1013d26:	429d      	cmp	r5, r3
 1013d28:	d101      	bne.n	1013d2e <nrf_802154_buffer_allocator_alloc+0x14>
    return success ? p_buffer->data : NULL;
 1013d2a:	2000      	movs	r0, #0
    return buffer_alloc((nrf_802154_buffer_t *)p_obj->p_memory, p_obj->capacity);
 1013d2c:	e012      	b.n	1013d54 <nrf_802154_buffer_allocator_alloc+0x3a>
            p_buffer = &p_buffer_pool[i];
 1013d2e:	eb03 14c3 	add.w	r4, r3, r3, lsl #7
 1013d32:	4434      	add	r4, r6
            if (!p_buffer->taken)
 1013d34:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 1013d38:	b992      	cbnz	r2, 1013d60 <nrf_802154_buffer_allocator_alloc+0x46>
                nrf_802154_serialization_crit_sect_enter(&crit_sect);
 1013d3a:	a801      	add	r0, sp, #4
 1013d3c:	f7ff f855 	bl	1012dea <nrf_802154_serialization_crit_sect_enter>
                if (p_buffer->taken)
 1013d40:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 1013d44:	b943      	cbnz	r3, 1013d58 <nrf_802154_buffer_allocator_alloc+0x3e>
                    p_buffer->taken = true;
 1013d46:	2301      	movs	r3, #1
                nrf_802154_serialization_crit_sect_exit(crit_sect);
 1013d48:	9801      	ldr	r0, [sp, #4]
                    p_buffer->taken = true;
 1013d4a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
                nrf_802154_serialization_crit_sect_exit(crit_sect);
 1013d4e:	f7ff f856 	bl	1012dfe <nrf_802154_serialization_crit_sect_exit>
    return success ? p_buffer->data : NULL;
 1013d52:	4620      	mov	r0, r4
}
 1013d54:	b002      	add	sp, #8
 1013d56:	bd70      	pop	{r4, r5, r6, pc}
                nrf_802154_serialization_crit_sect_exit(crit_sect);
 1013d58:	9801      	ldr	r0, [sp, #4]
 1013d5a:	f7ff f850 	bl	1012dfe <nrf_802154_serialization_crit_sect_exit>
    while (retry);
 1013d5e:	e7e1      	b.n	1013d24 <nrf_802154_buffer_allocator_alloc+0xa>
        for (uint32_t i = 0; i < buffer_pool_len; i++)
 1013d60:	3301      	adds	r3, #1
 1013d62:	e7e0      	b.n	1013d26 <nrf_802154_buffer_allocator_alloc+0xc>

01013d64 <nrf_802154_buffer_allocator_free>:

void nrf_802154_buffer_allocator_free(const nrf_802154_buffer_allocator_t * p_obj,
                                      void                                * p_buffer)
{
 1013d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t crit_sect = 0UL;
 1013d66:	2600      	movs	r6, #0
    buffer_free(p_buffer, (nrf_802154_buffer_t *)p_obj->p_memory, p_obj->capacity);
 1013d68:	6805      	ldr	r5, [r0, #0]
{
 1013d6a:	460c      	mov	r4, r1
    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 1013d6c:	a801      	add	r0, sp, #4
    uint32_t crit_sect = 0UL;
 1013d6e:	9601      	str	r6, [sp, #4]
    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 1013d70:	f7ff f83b 	bl	1012dea <nrf_802154_serialization_crit_sect_enter>
    p_buffer_pool[idx].taken = false;
 1013d74:	2381      	movs	r3, #129	; 0x81
        ((uintptr_t)p_buffer_to_free - (uintptr_t)p_buffer_pool) / sizeof(nrf_802154_buffer_t);
 1013d76:	1b61      	subs	r1, r4, r5
    p_buffer_pool[idx].taken = false;
 1013d78:	fbb1 f1f3 	udiv	r1, r1, r3
 1013d7c:	eb01 11c1 	add.w	r1, r1, r1, lsl #7
 1013d80:	440d      	add	r5, r1
    nrf_802154_serialization_crit_sect_exit(crit_sect);
 1013d82:	9801      	ldr	r0, [sp, #4]
    p_buffer_pool[idx].taken = false;
 1013d84:	f885 6080 	strb.w	r6, [r5, #128]	; 0x80
    nrf_802154_serialization_crit_sect_exit(crit_sect);
 1013d88:	f7ff f839 	bl	1012dfe <nrf_802154_serialization_crit_sect_exit>
}
 1013d8c:	b002      	add	sp, #8
 1013d8e:	bd70      	pop	{r4, r5, r6, pc}

01013d90 <nrf_802154_buffer_mgr_dst_init>:
void nrf_802154_buffer_mgr_dst_init(
    nrf_802154_buffer_mgr_dst_t * p_obj,
    void                        * p_map_memory,
    void                        * p_allocator_memory,
    size_t                        buffers_count)
{
 1013d90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 1013d92:	461c      	mov	r4, r3
    nrf_802154_kvmap_init(&p_obj->map,
 1013d94:	2304      	movs	r3, #4
{
 1013d96:	4616      	mov	r6, r2
 1013d98:	4605      	mov	r5, r0
    nrf_802154_kvmap_init(&p_obj->map,
 1013d9a:	00e2      	lsls	r2, r4, #3
 1013d9c:	9300      	str	r3, [sp, #0]
 1013d9e:	f000 f87f 	bl	1013ea0 <nrf_802154_kvmap_init>
                          p_map_memory,
                          NRF_802154_BUFFER_MGR_DST_MAP_MEMSIZE(buffers_count),
                          sizeof(void *),
                          sizeof(uint32_t));

    nrf_802154_buffer_allocator_init(&p_obj->allocator,
 1013da2:	4631      	mov	r1, r6
 1013da4:	eb04 12c4 	add.w	r2, r4, r4, lsl #7
 1013da8:	f105 0014 	add.w	r0, r5, #20
                                     p_allocator_memory,
                                     NRF_802154_BUFFER_ALLOCATOR_MEMORY_SIZE(buffers_count));
}
 1013dac:	b002      	add	sp, #8
 1013dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    nrf_802154_buffer_allocator_init(&p_obj->allocator,
 1013db2:	f7ff bf9f 	b.w	1013cf4 <nrf_802154_buffer_allocator_init>

01013db6 <nrf_802154_buffer_mgr_dst_add>:
    nrf_802154_buffer_mgr_dst_t * p_obj,
    uint32_t                      buffer_handle,
    const void                  * p_data,
    size_t                        data_size,
    void                       ** pp_local_pointer)
{
 1013db6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 1013dba:	4605      	mov	r5, r0
    bool result = false;

    *pp_local_pointer = nrf_802154_buffer_allocator_alloc(&p_obj->allocator);
 1013dbc:	3014      	adds	r0, #20
{
 1013dbe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 1013dc2:	4616      	mov	r6, r2
 1013dc4:	461f      	mov	r7, r3
 1013dc6:	9101      	str	r1, [sp, #4]
    *pp_local_pointer = nrf_802154_buffer_allocator_alloc(&p_obj->allocator);
 1013dc8:	f7ff ffa7 	bl	1013d1a <nrf_802154_buffer_allocator_alloc>
 1013dcc:	f8c8 0000 	str.w	r0, [r8]

    if (*pp_local_pointer != NULL)
 1013dd0:	b140      	cbz	r0, 1013de4 <nrf_802154_buffer_mgr_dst_add+0x2e>
    {
        memcpy(*pp_local_pointer, p_data, data_size);
 1013dd2:	463a      	mov	r2, r7
 1013dd4:	4631      	mov	r1, r6
 1013dd6:	f7fe fe11 	bl	10129fc <memcpy>
        result = nrf_802154_kvmap_add(&p_obj->map, pp_local_pointer, &buffer_handle);
 1013dda:	4641      	mov	r1, r8
 1013ddc:	4628      	mov	r0, r5
 1013dde:	aa01      	add	r2, sp, #4
 1013de0:	f000 f86a 	bl	1013eb8 <nrf_802154_kvmap_add>
         */
        assert(result);
    }

    return result;
}
 1013de4:	b002      	add	sp, #8
 1013de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01013dea <nrf_802154_buffer_mgr_dst_search_by_local_pointer>:

bool nrf_802154_buffer_mgr_dst_search_by_local_pointer(
    nrf_802154_buffer_mgr_dst_t * p_obj,
    void                        * p_local_pointer,
    uint32_t                    * p_buffer_handle)
{
 1013dea:	b507      	push	{r0, r1, r2, lr}
 1013dec:	9101      	str	r1, [sp, #4]
    return nrf_802154_kvmap_search(&p_obj->map, &p_local_pointer, p_buffer_handle);
 1013dee:	a901      	add	r1, sp, #4
 1013df0:	f000 f8c0 	bl	1013f74 <nrf_802154_kvmap_search>
}
 1013df4:	b003      	add	sp, #12
 1013df6:	f85d fb04 	ldr.w	pc, [sp], #4

01013dfa <nrf_802154_buffer_mgr_dst_remove_by_local_pointer>:

bool nrf_802154_buffer_mgr_dst_remove_by_local_pointer(
    nrf_802154_buffer_mgr_dst_t * p_obj,
    void                        * p_local_pointer)
{
 1013dfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 1013dfc:	9101      	str	r1, [sp, #4]
    bool result;

    result = nrf_802154_kvmap_remove(&p_obj->map, &p_local_pointer);
 1013dfe:	a901      	add	r1, sp, #4
{
 1013e00:	4605      	mov	r5, r0
    result = nrf_802154_kvmap_remove(&p_obj->map, &p_local_pointer);
 1013e02:	f000 f893 	bl	1013f2c <nrf_802154_kvmap_remove>
    if (result)
 1013e06:	4604      	mov	r4, r0
 1013e08:	b120      	cbz	r0, 1013e14 <nrf_802154_buffer_mgr_dst_remove_by_local_pointer+0x1a>
    {
        nrf_802154_buffer_allocator_free(&p_obj->allocator, p_local_pointer);
 1013e0a:	9901      	ldr	r1, [sp, #4]
 1013e0c:	f105 0014 	add.w	r0, r5, #20
 1013e10:	f7ff ffa8 	bl	1013d64 <nrf_802154_buffer_allocator_free>
    }

    return result;
}
 1013e14:	4620      	mov	r0, r4
 1013e16:	b003      	add	sp, #12
 1013e18:	bd30      	pop	{r4, r5, pc}

01013e1a <nrf_802154_buffer_mgr_src_init>:
    /* Implementation is for 32-bit architectures only
     * When this is not true we need mapping uint32->void*
     * When this is true only presence of buffer handle can be checked */
    assert(sizeof(void *) == sizeof(uint32_t) );

    nrf_802154_kvmap_init(&p_obj->map,
 1013e1a:	2300      	movs	r3, #0
{
 1013e1c:	b507      	push	{r0, r1, r2, lr}
    nrf_802154_kvmap_init(&p_obj->map,
 1013e1e:	0092      	lsls	r2, r2, #2
 1013e20:	9300      	str	r3, [sp, #0]
 1013e22:	2304      	movs	r3, #4
 1013e24:	f000 f83c 	bl	1013ea0 <nrf_802154_kvmap_init>
                          p_map_memory,
                          NRF_802154_BUFFER_MGR_SRC_MAP_MEMSIZE(buffers_count),
                          sizeof(uint32_t),
                          0U);
}
 1013e28:	b003      	add	sp, #12
 1013e2a:	f85d fb04 	ldr.w	pc, [sp], #4

01013e2e <nrf_802154_buffer_mgr_src_add>:

bool nrf_802154_buffer_mgr_src_add(
    nrf_802154_buffer_mgr_src_t * p_obj,
    const void                  * p_buffer,
    uint32_t                    * p_buffer_handle)
{
 1013e2e:	b513      	push	{r0, r1, r4, lr}
 1013e30:	4614      	mov	r4, r2
    bool     result;
    uint32_t buffer_handle = (uintptr_t)p_buffer;
 1013e32:	9101      	str	r1, [sp, #4]

    result = nrf_802154_kvmap_add(&p_obj->map, &buffer_handle, NULL);
 1013e34:	2200      	movs	r2, #0
 1013e36:	a901      	add	r1, sp, #4
 1013e38:	f000 f83e 	bl	1013eb8 <nrf_802154_kvmap_add>
    if (result)
 1013e3c:	b108      	cbz	r0, 1013e42 <nrf_802154_buffer_mgr_src_add+0x14>
    {
        *p_buffer_handle = buffer_handle;
 1013e3e:	9b01      	ldr	r3, [sp, #4]
 1013e40:	6023      	str	r3, [r4, #0]
    }

    return result;
}
 1013e42:	b002      	add	sp, #8
 1013e44:	bd10      	pop	{r4, pc}

01013e46 <nrf_802154_buffer_mgr_src_search_by_buffer_handle>:

bool nrf_802154_buffer_mgr_src_search_by_buffer_handle(
    nrf_802154_buffer_mgr_src_t * p_obj,
    uint32_t                      buffer_handle,
    void                       ** pp_buffer)
{
 1013e46:	b513      	push	{r0, r1, r4, lr}
 1013e48:	4614      	mov	r4, r2
 1013e4a:	9101      	str	r1, [sp, #4]
    bool result = false;

    if (nrf_802154_kvmap_search(&p_obj->map, &buffer_handle, NULL))
 1013e4c:	2200      	movs	r2, #0
 1013e4e:	a901      	add	r1, sp, #4
 1013e50:	f000 f890 	bl	1013f74 <nrf_802154_kvmap_search>
 1013e54:	b108      	cbz	r0, 1013e5a <nrf_802154_buffer_mgr_src_search_by_buffer_handle+0x14>
    {
        *pp_buffer = (void *)buffer_handle;
 1013e56:	9b01      	ldr	r3, [sp, #4]
 1013e58:	6023      	str	r3, [r4, #0]
        result     = true;
    }
    return result;
}
 1013e5a:	b002      	add	sp, #8
 1013e5c:	bd10      	pop	{r4, pc}

01013e5e <nrf_802154_buffer_mgr_src_remove_by_buffer_handle>:

bool nrf_802154_buffer_mgr_src_remove_by_buffer_handle(
    nrf_802154_buffer_mgr_src_t * p_obj,
    uint32_t                      buffer_handle)
{
 1013e5e:	b507      	push	{r0, r1, r2, lr}
 1013e60:	9101      	str	r1, [sp, #4]
    return nrf_802154_kvmap_remove(&p_obj->map, &buffer_handle);
 1013e62:	a901      	add	r1, sp, #4
 1013e64:	f000 f862 	bl	1013f2c <nrf_802154_kvmap_remove>
}
 1013e68:	b003      	add	sp, #12
 1013e6a:	f85d fb04 	ldr.w	pc, [sp], #4

01013e6e <item_idx_by_key_search>:
        memcpy(p_item + p_kvmap->key_size, p_value, p_kvmap->val_size);
    }
}

static size_t item_idx_by_key_search(const nrf_802154_kvmap_t * p_kvmap, const void * p_key)
{
 1013e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1013e72:	4604      	mov	r4, r0
    size_t    item_size = NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size);
 1013e74:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
{
 1013e78:	4688      	mov	r8, r1
    uint8_t * p_item    = p_kvmap->p_memory;
    size_t    idx;

    /* Linear search */
    for (idx = 0U; idx < p_kvmap->count; ++idx, p_item += item_size)
 1013e7a:	2500      	movs	r5, #0
    uint8_t * p_item    = p_kvmap->p_memory;
 1013e7c:	6806      	ldr	r6, [r0, #0]
    size_t    item_size = NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size);
 1013e7e:	189f      	adds	r7, r3, r2
    for (idx = 0U; idx < p_kvmap->count; ++idx, p_item += item_size)
 1013e80:	68a3      	ldr	r3, [r4, #8]
 1013e82:	42ab      	cmp	r3, r5
 1013e84:	d802      	bhi.n	1013e8c <item_idx_by_key_search+0x1e>
            break;
        }
    }

    return idx;
}
 1013e86:	4628      	mov	r0, r5
 1013e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (memcmp(p_item, p_key, p_kvmap->key_size) == 0)
 1013e8c:	4641      	mov	r1, r8
 1013e8e:	4630      	mov	r0, r6
 1013e90:	68e2      	ldr	r2, [r4, #12]
 1013e92:	f7fe fd8c 	bl	10129ae <memcmp>
 1013e96:	2800      	cmp	r0, #0
 1013e98:	d0f5      	beq.n	1013e86 <item_idx_by_key_search+0x18>
    for (idx = 0U; idx < p_kvmap->count; ++idx, p_item += item_size)
 1013e9a:	3501      	adds	r5, #1
 1013e9c:	443e      	add	r6, r7
 1013e9e:	e7ef      	b.n	1013e80 <item_idx_by_key_search+0x12>

01013ea0 <nrf_802154_kvmap_init>:
void nrf_802154_kvmap_init(nrf_802154_kvmap_t * p_kvmap,
                           void               * p_memory,
                           size_t               memsize,
                           size_t               key_size,
                           size_t               val_size)
{
 1013ea0:	b510      	push	{r4, lr}
 1013ea2:	9c02      	ldr	r4, [sp, #8]
    p_kvmap->p_memory = p_memory;
 1013ea4:	6001      	str	r1, [r0, #0]
    p_kvmap->capacity = memsize / NRF_802154_KVMAP_ITEMSIZE(key_size, val_size);
 1013ea6:	1919      	adds	r1, r3, r4
 1013ea8:	fbb2 f2f1 	udiv	r2, r2, r1
    p_kvmap->key_size = key_size;
    p_kvmap->val_size = val_size;
 1013eac:	e9c0 3403 	strd	r3, r4, [r0, #12]
    p_kvmap->count    = 0U;
 1013eb0:	2300      	movs	r3, #0
    p_kvmap->capacity = memsize / NRF_802154_KVMAP_ITEMSIZE(key_size, val_size);
 1013eb2:	6042      	str	r2, [r0, #4]
    p_kvmap->count    = 0U;
 1013eb4:	6083      	str	r3, [r0, #8]
}
 1013eb6:	bd10      	pop	{r4, pc}

01013eb8 <nrf_802154_kvmap_add>:

bool nrf_802154_kvmap_add(nrf_802154_kvmap_t * p_kvmap, const void * p_key, const void * p_value)
{
 1013eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1013eba:	4604      	mov	r4, r0
 1013ebc:	460f      	mov	r7, r1
    uint32_t crit_sect = 0UL;
 1013ebe:	2500      	movs	r5, #0
    size_t   idx;
    bool     success = true;

    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 1013ec0:	a801      	add	r0, sp, #4
{
 1013ec2:	4616      	mov	r6, r2
    uint32_t crit_sect = 0UL;
 1013ec4:	9501      	str	r5, [sp, #4]
    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 1013ec6:	f7fe ff90 	bl	1012dea <nrf_802154_serialization_crit_sect_enter>

    idx = item_idx_by_key_search(p_kvmap, p_key);
 1013eca:	4639      	mov	r1, r7
 1013ecc:	4620      	mov	r0, r4
 1013ece:	f7ff ffce 	bl	1013e6e <item_idx_by_key_search>
    if (idx < p_kvmap->count)
 1013ed2:	68a1      	ldr	r1, [r4, #8]
 1013ed4:	4281      	cmp	r1, r0
 1013ed6:	d911      	bls.n	1013efc <nrf_802154_kvmap_add+0x44>
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 1013ed8:	6922      	ldr	r2, [r4, #16]
    if (p_kvmap->val_size != 0U)
 1013eda:	b142      	cbz	r2, 1013eee <nrf_802154_kvmap_add+0x36>
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 1013edc:	68e3      	ldr	r3, [r4, #12]
 1013ede:	1899      	adds	r1, r3, r2
        memcpy(p_item + p_kvmap->key_size, p_value, p_kvmap->val_size);
 1013ee0:	fb00 3301 	mla	r3, r0, r1, r3
 1013ee4:	6820      	ldr	r0, [r4, #0]
 1013ee6:	4631      	mov	r1, r6
 1013ee8:	4418      	add	r0, r3
 1013eea:	f7fe fd87 	bl	10129fc <memcpy>
    bool     success = true;
 1013eee:	2501      	movs	r5, #1
        item_value_write(p_kvmap, p_item, p_value);

        p_kvmap->count++;
    }

    nrf_802154_serialization_crit_sect_exit(crit_sect);
 1013ef0:	9801      	ldr	r0, [sp, #4]
 1013ef2:	f7fe ff84 	bl	1012dfe <nrf_802154_serialization_crit_sect_exit>

    return success;
}
 1013ef6:	4628      	mov	r0, r5
 1013ef8:	b003      	add	sp, #12
 1013efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (p_kvmap->count >= p_kvmap->capacity)
 1013efc:	6863      	ldr	r3, [r4, #4]
 1013efe:	4299      	cmp	r1, r3
 1013f00:	d2f6      	bcs.n	1013ef0 <nrf_802154_kvmap_add+0x38>
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 1013f02:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    return ((uint8_t *)(p_kvmap->p_memory)) +
 1013f06:	6825      	ldr	r5, [r4, #0]
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 1013f08:	4413      	add	r3, r2
    return ((uint8_t *)(p_kvmap->p_memory)) +
 1013f0a:	fb01 5503 	mla	r5, r1, r3, r5
        memcpy(p_item, p_key, p_kvmap->key_size);
 1013f0e:	4639      	mov	r1, r7
 1013f10:	4628      	mov	r0, r5
 1013f12:	f7fe fd73 	bl	10129fc <memcpy>
    if (p_kvmap->val_size != 0U)
 1013f16:	6922      	ldr	r2, [r4, #16]
 1013f18:	b122      	cbz	r2, 1013f24 <nrf_802154_kvmap_add+0x6c>
        memcpy(p_item + p_kvmap->key_size, p_value, p_kvmap->val_size);
 1013f1a:	68e0      	ldr	r0, [r4, #12]
 1013f1c:	4631      	mov	r1, r6
 1013f1e:	4428      	add	r0, r5
 1013f20:	f7fe fd6c 	bl	10129fc <memcpy>
        p_kvmap->count++;
 1013f24:	68a3      	ldr	r3, [r4, #8]
 1013f26:	3301      	adds	r3, #1
 1013f28:	60a3      	str	r3, [r4, #8]
 1013f2a:	e7e0      	b.n	1013eee <nrf_802154_kvmap_add+0x36>

01013f2c <nrf_802154_kvmap_remove>:

bool nrf_802154_kvmap_remove(nrf_802154_kvmap_t * p_kvmap, const void * p_key)
{
 1013f2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 1013f2e:	4604      	mov	r4, r0
 1013f30:	460e      	mov	r6, r1
    uint32_t crit_sect = 0UL;
 1013f32:	2500      	movs	r5, #0
    size_t   idx;
    bool     success = true;

    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 1013f34:	a801      	add	r0, sp, #4
    uint32_t crit_sect = 0UL;
 1013f36:	9501      	str	r5, [sp, #4]
    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 1013f38:	f7fe ff57 	bl	1012dea <nrf_802154_serialization_crit_sect_enter>

    idx = item_idx_by_key_search(p_kvmap, p_key);
 1013f3c:	4631      	mov	r1, r6
 1013f3e:	4620      	mov	r0, r4
 1013f40:	f7ff ff95 	bl	1013e6e <item_idx_by_key_search>
    if (idx >= p_kvmap->count)
 1013f44:	68a1      	ldr	r1, [r4, #8]
 1013f46:	4281      	cmp	r1, r0
 1013f48:	d90e      	bls.n	1013f68 <nrf_802154_kvmap_remove+0x3c>
        /* Key not found */
        success = false;
    }
    else
    {
        p_kvmap->count--;
 1013f4a:	3901      	subs	r1, #1
        if (idx < p_kvmap->count)
 1013f4c:	4281      	cmp	r1, r0
        p_kvmap->count--;
 1013f4e:	60a1      	str	r1, [r4, #8]
        if (idx < p_kvmap->count)
 1013f50:	d909      	bls.n	1013f66 <nrf_802154_kvmap_remove+0x3a>
    return ((uint8_t *)(p_kvmap->p_memory)) +
 1013f52:	6823      	ldr	r3, [r4, #0]
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 1013f54:	e9d4 2403 	ldrd	r2, r4, [r4, #12]
 1013f58:	4422      	add	r2, r4
        {
            const uint8_t * p_last_item = item_ptr_by_idx_get(p_kvmap, p_kvmap->count);
            uint8_t       * p_item      = item_ptr_by_idx_get(p_kvmap, idx);

            memcpy(p_item,
 1013f5a:	fb02 3101 	mla	r1, r2, r1, r3
 1013f5e:	fb02 3000 	mla	r0, r2, r0, r3
 1013f62:	f7fe fd4b 	bl	10129fc <memcpy>
    bool     success = true;
 1013f66:	2501      	movs	r5, #1
        {
            /* We hit last item, no item move necessary */
        }
    }

    nrf_802154_serialization_crit_sect_exit(crit_sect);
 1013f68:	9801      	ldr	r0, [sp, #4]
 1013f6a:	f7fe ff48 	bl	1012dfe <nrf_802154_serialization_crit_sect_exit>

    return success;
}
 1013f6e:	4628      	mov	r0, r5
 1013f70:	b002      	add	sp, #8
 1013f72:	bd70      	pop	{r4, r5, r6, pc}

01013f74 <nrf_802154_kvmap_search>:

bool nrf_802154_kvmap_search(const nrf_802154_kvmap_t * p_kvmap,
                             const void               * p_key,
                             void                     * p_value)
{
 1013f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1013f76:	4604      	mov	r4, r0
 1013f78:	460f      	mov	r7, r1
    uint32_t crit_sect = 0UL;
 1013f7a:	2500      	movs	r5, #0
    size_t   idx;
    bool     success = true;

    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 1013f7c:	a801      	add	r0, sp, #4
{
 1013f7e:	4616      	mov	r6, r2
    uint32_t crit_sect = 0UL;
 1013f80:	9501      	str	r5, [sp, #4]
    nrf_802154_serialization_crit_sect_enter(&crit_sect);
 1013f82:	f7fe ff32 	bl	1012dea <nrf_802154_serialization_crit_sect_enter>

    idx = item_idx_by_key_search(p_kvmap, p_key);
 1013f86:	4639      	mov	r1, r7
 1013f88:	4620      	mov	r0, r4
 1013f8a:	f7ff ff70 	bl	1013e6e <item_idx_by_key_search>
    if (idx >= p_kvmap->count)
 1013f8e:	68a3      	ldr	r3, [r4, #8]
 1013f90:	4283      	cmp	r3, r0
 1013f92:	d90c      	bls.n	1013fae <nrf_802154_kvmap_search+0x3a>
    else
    {
        const uint8_t * p_item = item_ptr_by_idx_get(p_kvmap, idx);

        /* Copy value associated with the key if requested and values are present */
        if ((p_value != NULL) && (p_kvmap->val_size != 0U))
 1013f94:	b156      	cbz	r6, 1013fac <nrf_802154_kvmap_search+0x38>
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 1013f96:	6922      	ldr	r2, [r4, #16]
        if ((p_value != NULL) && (p_kvmap->val_size != 0U))
 1013f98:	b142      	cbz	r2, 1013fac <nrf_802154_kvmap_search+0x38>
           (idx * NRF_802154_KVMAP_ITEMSIZE(p_kvmap->key_size, p_kvmap->val_size));
 1013f9a:	68e1      	ldr	r1, [r4, #12]
 1013f9c:	188b      	adds	r3, r1, r2
        {
            memcpy(p_value, p_item + p_kvmap->key_size, p_kvmap->val_size);
 1013f9e:	fb00 1103 	mla	r1, r0, r3, r1
 1013fa2:	6823      	ldr	r3, [r4, #0]
 1013fa4:	4630      	mov	r0, r6
 1013fa6:	4419      	add	r1, r3
 1013fa8:	f7fe fd28 	bl	10129fc <memcpy>
    bool     success = true;
 1013fac:	2501      	movs	r5, #1
        }
    }

    nrf_802154_serialization_crit_sect_exit(crit_sect);
 1013fae:	9801      	ldr	r0, [sp, #4]
 1013fb0:	f7fe ff25 	bl	1012dfe <nrf_802154_serialization_crit_sect_exit>

    return success;
}
 1013fb4:	4628      	mov	r0, r5
 1013fb6:	b003      	add	sp, #12
 1013fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

01013fba <nrf_802154_spinel_send>:

nrf_802154_ser_err_t nrf_802154_spinel_send(const char * p_fmt, ...)
{
 1013fba:	b40f      	push	{r0, r1, r2, r3}
 1013fbc:	b500      	push	{lr}
 1013fbe:	b0cd      	sub	sp, #308	; 0x134
 1013fc0:	ab4e      	add	r3, sp, #312	; 0x138
 1013fc2:	f853 2b04 	ldr.w	r2, [r3], #4

    va_list args;

    va_start(args, p_fmt);

    siz = spinel_datatype_vpack(command_buff, sizeof(command_buff), p_fmt, args);
 1013fc6:	f44f 7194 	mov.w	r1, #296	; 0x128
 1013fca:	a802      	add	r0, sp, #8
    va_start(args, p_fmt);
 1013fcc:	9301      	str	r3, [sp, #4]
    siz = spinel_datatype_vpack(command_buff, sizeof(command_buff), p_fmt, args);
 1013fce:	f7ff fe89 	bl	1013ce4 <spinel_datatype_vpack>

    va_end(args);

    if (siz < 0)
 1013fd2:	1e01      	subs	r1, r0, #0
 1013fd4:	db07      	blt.n	1013fe6 <nrf_802154_spinel_send+0x2c>
    }

    NRF_802154_SPINEL_LOG_RAW("Sending spinel frame\n");
    NRF_802154_SPINEL_LOG_BUFF_NAMED(command_buff, siz, "data");

    return nrf_802154_spinel_encoded_packet_send(command_buff, (size_t)siz);
 1013fd6:	a802      	add	r0, sp, #8
 1013fd8:	f7f4 f93e 	bl	1008258 <nrf_802154_spinel_encoded_packet_send>
}
 1013fdc:	b04d      	add	sp, #308	; 0x134
 1013fde:	f85d eb04 	ldr.w	lr, [sp], #4
 1013fe2:	b004      	add	sp, #16
 1013fe4:	4770      	bx	lr
        return NRF_802154_SERIALIZATION_ERROR_ENCODING_FAILURE;
 1013fe6:	f06f 0001 	mvn.w	r0, #1
 1013fea:	e7f7      	b.n	1013fdc <nrf_802154_spinel_send+0x22>

01013fec <nrf_802154_spinel_encoded_packet_received>:

void nrf_802154_spinel_encoded_packet_received(const void * p_data, size_t data_len)
{
 1013fec:	b507      	push	{r0, r1, r2, lr}
    NRF_802154_SPINEL_LOG_RAW("Received spinel frame\n");
    NRF_802154_SPINEL_LOG_BUFF_NAMED(p_data, data_len, "data");

    SERIALIZATION_ERROR_INIT(error);

    nrf_802154_ser_err_t err = nrf_802154_spinel_decode_cmd(p_data, data_len);
 1013fee:	f7fa f8bd 	bl	100e16c <nrf_802154_spinel_decode_cmd>

    SERIALIZATION_ERROR_CHECK(err, error, bail);
 1013ff2:	2800      	cmp	r0, #0
 1013ff4:	da03      	bge.n	1013ffe <nrf_802154_spinel_encoded_packet_received+0x12>

bail:
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 1013ff6:	9001      	str	r0, [sp, #4]
 1013ff8:	a801      	add	r0, sp, #4
 1013ffa:	f7fd ff00 	bl	1011dfe <nrf_802154_serialization_error>

    return;
}
 1013ffe:	b003      	add	sp, #12
 1014000:	f85d fb04 	ldr.w	pc, [sp], #4

01014004 <local_transmitted_frame_ptr_free>:
{
 1014004:	b513      	push	{r0, r1, r4, lr}
 1014006:	4604      	mov	r4, r0
    bool frame_found = nrf_802154_buffer_mgr_dst_remove_by_local_pointer(
 1014008:	f7fa f884 	bl	100e114 <nrf_802154_spinel_dst_buffer_mgr_get>
 101400c:	4621      	mov	r1, r4
 101400e:	f7ff fef4 	bl	1013dfa <nrf_802154_buffer_mgr_dst_remove_by_local_pointer>
    SERIALIZATION_ERROR_IF(!frame_found,
 1014012:	b928      	cbnz	r0, 1014020 <local_transmitted_frame_ptr_free+0x1c>
    SERIALIZATION_ERROR_RAISE_IF_FAILED(error);
 1014014:	f06f 0307 	mvn.w	r3, #7
 1014018:	a801      	add	r0, sp, #4
 101401a:	9301      	str	r3, [sp, #4]
 101401c:	f7fd feef 	bl	1011dfe <nrf_802154_serialization_error>
}
 1014020:	b002      	add	sp, #8
 1014022:	bd10      	pop	{r4, pc}

01014024 <nrf_802154_spinel_dispatch_cmd>:

nrf_802154_ser_err_t nrf_802154_spinel_dispatch_cmd(spinel_command_t cmd,
                                                    const void     * p_cmd_data,
                                                    size_t           cmd_data_len)
{
 1014024:	4603      	mov	r3, r0
    switch (cmd)
 1014026:	2b03      	cmp	r3, #3
{
 1014028:	4608      	mov	r0, r1
 101402a:	4611      	mov	r1, r2
    switch (cmd)
 101402c:	d101      	bne.n	1014032 <nrf_802154_spinel_dispatch_cmd+0xe>
    {
        case SPINEL_CMD_PROP_VALUE_SET:
            return nrf_802154_spinel_decode_cmd_prop_value_set(p_cmd_data, cmd_data_len);
 101402e:	f7fa ba0b 	b.w	100e448 <nrf_802154_spinel_decode_cmd_prop_value_set>
            NRF_802154_SPINEL_LOG_RAW("Unsupported command: %s(%u)\n",
                                      spinel_command_to_cstr(cmd),
                                      cmd);
            return NRF_802154_SERIALIZATION_ERROR_DECODING_FAILURE;
    }
}
 1014032:	f06f 0002 	mvn.w	r0, #2
 1014036:	4770      	bx	lr

01014038 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
 1014038:	4700      	bx	r0

0101403a <nrf_gpio_reconfigure>:
{
 101403a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 101403c:	4616      	mov	r6, r2
 101403e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
 1014042:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1014044:	a801      	add	r0, sp, #4
{
 1014046:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1014048:	f7fb f892 	bl	100f170 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
 101404c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
 101404e:	f1b6 0c00 	subs.w	ip, r6, #0
 1014052:	bf18      	it	ne
 1014054:	f04f 0c01 	movne.w	ip, #1
 1014058:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
 101405c:	1e0b      	subs	r3, r1, #0
 101405e:	bf18      	it	ne
 1014060:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
 1014062:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
 1014064:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
 1014068:	bf14      	ite	ne
 101406a:	f04f 0c0c 	movne.w	ip, #12
 101406e:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
 1014072:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
 1014074:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
 1014078:	bf14      	ite	ne
 101407a:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
 101407e:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
 1014082:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
 1014084:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
 1014088:	bf14      	ite	ne
 101408a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
 101408e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
 1014092:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
 1014096:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
 101409a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
 101409e:	b101      	cbz	r1, 10140a2 <nrf_gpio_reconfigure+0x68>
 10140a0:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
 10140a2:	b10e      	cbz	r6, 10140a8 <nrf_gpio_reconfigure+0x6e>
 10140a4:	7836      	ldrb	r6, [r6, #0]
 10140a6:	0076      	lsls	r6, r6, #1
 10140a8:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
 10140aa:	b10d      	cbz	r5, 10140b0 <nrf_gpio_reconfigure+0x76>
 10140ac:	782d      	ldrb	r5, [r5, #0]
 10140ae:	00ad      	lsls	r5, r5, #2
 10140b0:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
 10140b2:	b10c      	cbz	r4, 10140b8 <nrf_gpio_reconfigure+0x7e>
 10140b4:	7824      	ldrb	r4, [r4, #0]
 10140b6:	0224      	lsls	r4, r4, #8
 10140b8:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
 10140ba:	b10f      	cbz	r7, 10140c0 <nrf_gpio_reconfigure+0x86>
 10140bc:	783f      	ldrb	r7, [r7, #0]
 10140be:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
 10140c0:	430c      	orrs	r4, r1
 10140c2:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
 10140c4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
 10140c8:	b003      	add	sp, #12
 10140ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

010140cc <nrf_gpio_cfg_sense_set>:
{
 10140cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
 10140ce:	f10d 030f 	add.w	r3, sp, #15
 10140d2:	9301      	str	r3, [sp, #4]
 10140d4:	2300      	movs	r3, #0
{
 10140d6:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
 10140da:	461a      	mov	r2, r3
 10140dc:	4619      	mov	r1, r3
 10140de:	9300      	str	r3, [sp, #0]
 10140e0:	f7ff ffab 	bl	101403a <nrf_gpio_reconfigure>
}
 10140e4:	b005      	add	sp, #20
 10140e6:	f85d fb04 	ldr.w	pc, [sp], #4

010140ea <metal_device_open>:
{
 10140ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 10140ec:	460c      	mov	r4, r1
 10140ee:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
 10140f0:	4606      	mov	r6, r0
 10140f2:	b918      	cbnz	r0, 10140fc <metal_device_open+0x12>
		return -EINVAL;
 10140f4:	f06f 0015 	mvn.w	r0, #21
}
 10140f8:	b002      	add	sp, #8
 10140fa:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
 10140fc:	f7fe fc28 	bl	1012950 <strlen>
 1014100:	2800      	cmp	r0, #0
 1014102:	d0f7      	beq.n	10140f4 <metal_device_open+0xa>
 1014104:	2c00      	cmp	r4, #0
 1014106:	d0f5      	beq.n	10140f4 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
 1014108:	4620      	mov	r0, r4
 101410a:	f7fe fc21 	bl	1012950 <strlen>
 101410e:	2800      	cmp	r0, #0
 1014110:	d0f0      	beq.n	10140f4 <metal_device_open+0xa>
 1014112:	2d00      	cmp	r5, #0
 1014114:	d0ee      	beq.n	10140f4 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
 1014116:	4630      	mov	r0, r6
 1014118:	a901      	add	r1, sp, #4
 101411a:	f7fb fc3f 	bl	100f99c <metal_bus_find>
	if (error)
 101411e:	2800      	cmp	r0, #0
 1014120:	d1ea      	bne.n	10140f8 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
 1014122:	9801      	ldr	r0, [sp, #4]
 1014124:	6883      	ldr	r3, [r0, #8]
 1014126:	b12b      	cbz	r3, 1014134 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
 1014128:	462a      	mov	r2, r5
 101412a:	4621      	mov	r1, r4
}
 101412c:	b002      	add	sp, #8
 101412e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
 1014132:	4718      	bx	r3
		return -ENODEV;
 1014134:	f06f 0012 	mvn.w	r0, #18
 1014138:	e7de      	b.n	10140f8 <metal_device_open+0xe>

0101413a <metal_device_close>:
{
 101413a:	4601      	mov	r1, r0
	if (device->bus->ops.dev_close)
 101413c:	6840      	ldr	r0, [r0, #4]
 101413e:	68c3      	ldr	r3, [r0, #12]
 1014140:	b103      	cbz	r3, 1014144 <metal_device_close+0xa>
		device->bus->ops.dev_close(device->bus, device);
 1014142:	4718      	bx	r3
}
 1014144:	4770      	bx	lr

01014146 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 1014146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 101414a:	b089      	sub	sp, #36	; 0x24
 101414c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 101414e:	4604      	mov	r4, r0
 1014150:	4689      	mov	r9, r1
 1014152:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
 1014154:	2100      	movs	r1, #0
 1014156:	2220      	movs	r2, #32
 1014158:	4668      	mov	r0, sp
{
 101415a:	461f      	mov	r7, r3
 101415c:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
 101415e:	f7fe fc58 	bl	1012a12 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 1014162:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 1014164:	bf97      	itett	ls
 1014166:	2301      	movls	r3, #1
		io->page_mask = -1UL;
 1014168:	f04f 33ff 	movhi.w	r3, #4294967295	; 0xffffffff
		io->page_mask = (1UL << page_shift) - 1UL;
 101416c:	40b3      	lslls	r3, r6
 101416e:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
 1014172:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
 1014174:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
 1014176:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
 101417a:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
 101417e:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
 1014180:	3418      	adds	r4, #24
 1014182:	b145      	cbz	r5, 1014196 <metal_io_init+0x50>
 1014184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 1014186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 1014188:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 101418c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
 1014190:	b009      	add	sp, #36	; 0x24
 1014192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
 1014196:	466d      	mov	r5, sp
 1014198:	e7f4      	b.n	1014184 <metal_io_init+0x3e>

0101419a <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 101419a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
 101419c:	6804      	ldr	r4, [r0, #0]
		: NULL);
 101419e:	1c66      	adds	r6, r4, #1
 10141a0:	d031      	beq.n	1014206 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
 10141a2:	6885      	ldr	r5, [r0, #8]
 10141a4:	42a9      	cmp	r1, r5
 10141a6:	d22e      	bcs.n	1014206 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
 10141a8:	1864      	adds	r4, r4, r1
 10141aa:	d02c      	beq.n	1014206 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
 10141ac:	185e      	adds	r6, r3, r1
 10141ae:	42ae      	cmp	r6, r5
		len = io->size - offset;
 10141b0:	bf88      	it	hi
 10141b2:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
 10141b4:	6a05      	ldr	r5, [r0, #32]
 10141b6:	b135      	cbz	r5, 10141c6 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
 10141b8:	9300      	str	r3, [sp, #0]
 10141ba:	2305      	movs	r3, #5
 10141bc:	47a8      	blx	r5
 10141be:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
 10141c0:	4618      	mov	r0, r3
 10141c2:	b002      	add	sp, #8
 10141c4:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
 10141c6:	f3bf 8f5b 	dmb	ish
		while ( len && (
 10141ca:	4619      	mov	r1, r3
 10141cc:	1aa4      	subs	r4, r4, r2
 10141ce:	1910      	adds	r0, r2, r4
 10141d0:	b119      	cbz	r1, 10141da <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
 10141d2:	ea40 0502 	orr.w	r5, r0, r2
 10141d6:	07ad      	lsls	r5, r5, #30
 10141d8:	d10a      	bne.n	10141f0 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 10141da:	2903      	cmp	r1, #3
 10141dc:	dc0d      	bgt.n	10141fa <metal_io_block_read+0x60>
 10141de:	3801      	subs	r0, #1
 10141e0:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
 10141e2:	428a      	cmp	r2, r1
 10141e4:	d0ec      	beq.n	10141c0 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
 10141e6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
 10141ea:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
 10141ee:	e7f8      	b.n	10141e2 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
 10141f0:	7800      	ldrb	r0, [r0, #0]
			len--;
 10141f2:	3901      	subs	r1, #1
			*(unsigned char *)dest =
 10141f4:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
 10141f8:	e7e9      	b.n	10141ce <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 10141fa:	f850 4b04 	ldr.w	r4, [r0], #4
 10141fe:	3904      	subs	r1, #4
 1014200:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
 1014204:	e7e9      	b.n	10141da <metal_io_block_read+0x40>
		return -ERANGE;
 1014206:	f06f 0321 	mvn.w	r3, #33	; 0x21
 101420a:	e7d9      	b.n	10141c0 <metal_io_block_read+0x26>

0101420c <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 101420c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 101420e:	6804      	ldr	r4, [r0, #0]
		: NULL);
 1014210:	1c65      	adds	r5, r4, #1
 1014212:	d032      	beq.n	101427a <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
 1014214:	6885      	ldr	r5, [r0, #8]
 1014216:	42a9      	cmp	r1, r5
 1014218:	d22f      	bcs.n	101427a <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
 101421a:	1864      	adds	r4, r4, r1
 101421c:	d02d      	beq.n	101427a <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
 101421e:	185e      	adds	r6, r3, r1
 1014220:	42ae      	cmp	r6, r5
		len = io->size - offset;
 1014222:	bf88      	it	hi
 1014224:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
 1014226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 1014228:	b1cd      	cbz	r5, 101425e <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
 101422a:	9300      	str	r3, [sp, #0]
 101422c:	2305      	movs	r3, #5
 101422e:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
 1014230:	b002      	add	sp, #8
 1014232:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
 1014234:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
 1014238:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
 101423a:	7005      	strb	r5, [r0, #0]
			len--;
 101423c:	4615      	mov	r5, r2
 101423e:	18a0      	adds	r0, r4, r2
		while ( len && (
 1014240:	b119      	cbz	r1, 101424a <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
 1014242:	ea40 0602 	orr.w	r6, r0, r2
 1014246:	07b6      	lsls	r6, r6, #30
 1014248:	d1f4      	bne.n	1014234 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 101424a:	2903      	cmp	r1, #3
 101424c:	dc0a      	bgt.n	1014264 <metal_io_block_write+0x58>
 101424e:	3d01      	subs	r5, #1
 1014250:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
 1014252:	4288      	cmp	r0, r1
 1014254:	d10c      	bne.n	1014270 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
 1014256:	f3bf 8f5b 	dmb	ish
	retlen = len;
 101425a:	4618      	mov	r0, r3
 101425c:	e7e8      	b.n	1014230 <metal_io_block_write+0x24>
 101425e:	4619      	mov	r1, r3
 1014260:	1aa4      	subs	r4, r4, r2
 1014262:	e7eb      	b.n	101423c <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
 1014264:	f855 2b04 	ldr.w	r2, [r5], #4
 1014268:	3904      	subs	r1, #4
 101426a:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
 101426e:	e7ec      	b.n	101424a <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
 1014270:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
 1014274:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
 1014278:	e7eb      	b.n	1014252 <metal_io_block_write+0x46>
		return -ERANGE;
 101427a:	f06f 0021 	mvn.w	r0, #33	; 0x21
 101427e:	e7d7      	b.n	1014230 <metal_io_block_write+0x24>

01014280 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 1014280:	b573      	push	{r0, r1, r4, r5, r6, lr}
 1014282:	6804      	ldr	r4, [r0, #0]
 1014284:	461d      	mov	r5, r3
		: NULL);
 1014286:	1c66      	adds	r6, r4, #1
 1014288:	d02b      	beq.n	10142e2 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
 101428a:	6883      	ldr	r3, [r0, #8]
 101428c:	4299      	cmp	r1, r3
 101428e:	d228      	bcs.n	10142e2 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
 1014290:	1864      	adds	r4, r4, r1
 1014292:	d026      	beq.n	10142e2 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
 1014294:	186e      	adds	r6, r5, r1
 1014296:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
 1014298:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
 101429a:	bf88      	it	hi
 101429c:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
 101429e:	b12e      	cbz	r6, 10142ac <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
 10142a0:	2305      	movs	r3, #5
 10142a2:	9500      	str	r5, [sp, #0]
 10142a4:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
 10142a6:	4628      	mov	r0, r5
}
 10142a8:	b002      	add	sp, #8
 10142aa:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
 10142ac:	4621      	mov	r1, r4
 10142ae:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 10142b0:	b94b      	cbnz	r3, 10142c6 <metal_io_block_set+0x46>
 10142b2:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
 10142b4:	4299      	cmp	r1, r3
 10142b6:	d111      	bne.n	10142dc <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
 10142b8:	f3bf 8f5b 	dmb	ish
 10142bc:	e7f3      	b.n	10142a6 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
 10142be:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 10142c2:	3b01      	subs	r3, #1
 10142c4:	e7f4      	b.n	10142b0 <metal_io_block_set+0x30>
 10142c6:	0788      	lsls	r0, r1, #30
 10142c8:	d1f9      	bne.n	10142be <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
 10142ca:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
 10142ce:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 10142d0:	2b03      	cmp	r3, #3
 10142d2:	ddee      	ble.n	10142b2 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
 10142d4:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 10142d8:	3b04      	subs	r3, #4
 10142da:	e7f9      	b.n	10142d0 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
 10142dc:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
 10142e0:	e7e8      	b.n	10142b4 <metal_io_block_set+0x34>
		return -ERANGE;
 10142e2:	f06f 0021 	mvn.w	r0, #33	; 0x21
 10142e6:	e7df      	b.n	10142a8 <metal_io_block_set+0x28>

010142e8 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
 10142e8:	2000      	movs	r0, #0
 10142ea:	4770      	bx	lr

010142ec <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
 10142ec:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
 10142ee:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
 10142f0:	4602      	mov	r2, r0
 10142f2:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
 10142f4:	b984      	cbnz	r4, 1014318 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
 10142f6:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
 10142f8:	291f      	cmp	r1, #31
 10142fa:	bf98      	it	ls
 10142fc:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
 1014300:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 1014302:	b161      	cbz	r1, 101431e <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
 1014304:	6880      	ldr	r0, [r0, #8]
 1014306:	4283      	cmp	r3, r0
 1014308:	d209      	bcs.n	101431e <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
 101430a:	6910      	ldr	r0, [r2, #16]
 101430c:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
 101430e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 1014312:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
 1014314:	bc10      	pop	{r4}
 1014316:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
 1014318:	4623      	mov	r3, r4
}
 101431a:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
 101431c:	4718      	bx	r3
			: METAL_BAD_PHYS);
 101431e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1014322:	e7f7      	b.n	1014314 <metal_io_phys+0x28>

01014324 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
 1014324:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
 1014326:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 1014328:	4605      	mov	r5, r0
 101432a:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
 101432c:	b9e3      	cbnz	r3, 1014368 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
 101432e:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
 1014330:	1c62      	adds	r2, r4, #1
 1014332:	bf09      	itett	eq
 1014334:	6843      	ldreq	r3, [r0, #4]
 1014336:	400c      	andne	r4, r1
 1014338:	681c      	ldreq	r4, [r3, #0]
 101433a:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
 101433c:	4621      	mov	r1, r4
 101433e:	4628      	mov	r0, r5
 1014340:	f7ff ffd4 	bl	10142ec <metal_io_phys>
 1014344:	4286      	cmp	r6, r0
 1014346:	d007      	beq.n	1014358 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
 1014348:	692b      	ldr	r3, [r5, #16]
 101434a:	3301      	adds	r3, #1
 101434c:	441c      	add	r4, r3
		} while (offset < io->size);
 101434e:	68ab      	ldr	r3, [r5, #8]
 1014350:	429c      	cmp	r4, r3
 1014352:	d3f3      	bcc.n	101433c <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
 1014354:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return (io->virt != METAL_BAD_VA && offset < io->size
 1014358:	6828      	ldr	r0, [r5, #0]
		: NULL);
 101435a:	1c43      	adds	r3, r0, #1
 101435c:	d007      	beq.n	101436e <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
 101435e:	68ab      	ldr	r3, [r5, #8]
 1014360:	42a3      	cmp	r3, r4
 1014362:	d904      	bls.n	101436e <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
 1014364:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
 1014366:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
 1014368:	4798      	blx	r3
 101436a:	4604      	mov	r4, r0
 101436c:	e7f4      	b.n	1014358 <metal_io_phys_to_virt+0x34>
		: NULL);
 101436e:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 1014370:	e7f9      	b.n	1014366 <metal_io_phys_to_virt+0x42>

01014372 <virtqueue_create>:
{
 1014372:	b530      	push	{r4, r5, lr}
 1014374:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
 1014376:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
 101437a:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
 101437c:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
 101437e:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
 1014380:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
 1014382:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
 1014384:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 1014386:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
 1014388:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
 101438a:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 101438e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
 1014392:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 1014396:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 1014398:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 101439a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
 101439e:	1c6a      	adds	r2, r5, #1
 10143a0:	4413      	add	r3, r2
 10143a2:	426d      	negs	r5, r5
 10143a4:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
 10143a6:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
 10143a8:	6983      	ldr	r3, [r0, #24]
 10143aa:	b953      	cbnz	r3, 10143c2 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
 10143ac:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
 10143ae:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
 10143b0:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
 10143b2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
 10143b6:	db06      	blt.n	10143c6 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 10143b8:	2300      	movs	r3, #0
 10143ba:	7393      	strb	r3, [r2, #14]
 10143bc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 10143c0:	73d3      	strb	r3, [r2, #15]
}
 10143c2:	2000      	movs	r0, #0
 10143c4:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
 10143c6:	3301      	adds	r3, #1
 10143c8:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
 10143ca:	e7f0      	b.n	10143ae <virtqueue_create+0x3c>

010143cc <virtqueue_add_buffer>:
{
 10143cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
 10143d0:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
 10143d4:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 10143d6:	4655      	mov	r5, sl
 10143d8:	2600      	movs	r6, #0
{
 10143da:	b085      	sub	sp, #20
	needed = readable + writable;
 10143dc:	eb02 0803 	add.w	r8, r2, r3
{
 10143e0:	4691      	mov	r9, r2
		dxp->cookie = cookie;
 10143e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 10143e4:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
 10143e8:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
 10143ec:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
 10143ee:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
 10143f2:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 10143f6:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 10143f8:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
 10143fa:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 10143fc:	45b0      	cmp	r8, r6
 10143fe:	dc1a      	bgt.n	1014436 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
 1014400:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
 1014402:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
 1014404:	eba3 030b 	sub.w	r3, r3, fp
 1014408:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 101440a:	69e3      	ldr	r3, [r4, #28]
 101440c:	8961      	ldrh	r1, [r4, #10]
 101440e:	885a      	ldrh	r2, [r3, #2]
 1014410:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 1014412:	400a      	ands	r2, r1
 1014414:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 1014418:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
 101441c:	f3bf 8f5b 	dmb	ish
}
 1014420:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
 1014422:	69e2      	ldr	r2, [r4, #28]
 1014424:	8853      	ldrh	r3, [r2, #2]
 1014426:	3301      	adds	r3, #1
 1014428:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 101442a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 101442c:	3301      	adds	r3, #1
 101442e:	84e3      	strh	r3, [r4, #38]	; 0x26
}
 1014430:	b005      	add	sp, #20
 1014432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
 1014436:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 1014438:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
 101443a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 101443e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 1014442:	9302      	str	r3, [sp, #8]
 1014444:	6803      	ldr	r3, [r0, #0]
 1014446:	9203      	str	r2, [sp, #12]
 1014448:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 101444a:	6883      	ldr	r3, [r0, #8]
 101444c:	3708      	adds	r7, #8
 101444e:	4299      	cmp	r1, r3
 1014450:	bf28      	it	cs
 1014452:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
 1014456:	f7ff ff49 	bl	10142ec <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 101445a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 101445e:	5098      	str	r0, [r3, r2]
 1014460:	2200      	movs	r2, #0
 1014462:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
 1014464:	f857 2c08 	ldr.w	r2, [r7, #-8]
 1014468:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
 101446a:	9a01      	ldr	r2, [sp, #4]
 101446c:	4296      	cmp	r6, r2
 101446e:	bfac      	ite	ge
 1014470:	2200      	movge	r2, #0
 1014472:	2201      	movlt	r2, #1
		if (i >= readable)
 1014474:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
 1014476:	bfd8      	it	le
 1014478:	f042 0202 	orrle.w	r2, r2, #2
 101447c:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 101447e:	3601      	adds	r6, #1
 1014480:	89ed      	ldrh	r5, [r5, #14]
 1014482:	e7bb      	b.n	10143fc <virtqueue_add_buffer+0x30>

01014484 <virtqueue_get_buffer>:
{
 1014484:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 1014486:	b350      	cbz	r0, 10144de <virtqueue_get_buffer+0x5a>
 1014488:	6a05      	ldr	r5, [r0, #32]
 101448a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 101448c:	886b      	ldrh	r3, [r5, #2]
 101448e:	42a3      	cmp	r3, r4
 1014490:	d030      	beq.n	10144f4 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 1014492:	1c63      	adds	r3, r4, #1
 1014494:	85c3      	strh	r3, [r0, #46]	; 0x2e
 1014496:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
 1014498:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 101449c:	3b01      	subs	r3, #1
 101449e:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
 10144a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 10144a4:	686b      	ldr	r3, [r5, #4]
 10144a6:	b29e      	uxth	r6, r3
	if (len)
 10144a8:	b109      	cbz	r1, 10144ae <virtqueue_get_buffer+0x2a>
		*len = uep->len;
 10144aa:	68ad      	ldr	r5, [r5, #8]
 10144ac:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
 10144ae:	f8d0 c018 	ldr.w	ip, [r0, #24]
 10144b2:	b29b      	uxth	r3, r3
 10144b4:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
 10144b8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 10144bc:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
 10144be:	8c87      	ldrh	r7, [r0, #36]	; 0x24
 10144c0:	442f      	add	r7, r5
	dxp->ndescs--;
 10144c2:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
 10144c4:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
 10144c6:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 10144c8:	898d      	ldrh	r5, [r1, #12]
 10144ca:	076f      	lsls	r7, r5, #29
 10144cc:	d50e      	bpl.n	10144ec <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
 10144ce:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
 10144d0:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
 10144d2:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
 10144d4:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
 10144d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
 10144d8:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
 10144da:	b102      	cbz	r2, 10144de <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
 10144dc:	8014      	strh	r4, [r2, #0]
}
 10144de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
 10144e0:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
 10144e2:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
 10144e4:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
 10144e6:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
 10144ea:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
 10144ec:	898d      	ldrh	r5, [r1, #12]
 10144ee:	07ed      	lsls	r5, r5, #31
 10144f0:	d4f6      	bmi.n	10144e0 <virtqueue_get_buffer+0x5c>
 10144f2:	e7ec      	b.n	10144ce <virtqueue_get_buffer+0x4a>
		return NULL;
 10144f4:	2000      	movs	r0, #0
 10144f6:	e7f2      	b.n	10144de <virtqueue_get_buffer+0x5a>

010144f8 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
 10144f8:	6983      	ldr	r3, [r0, #24]
 10144fa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
 10144fe:	6898      	ldr	r0, [r3, #8]
 1014500:	4770      	bx	lr

01014502 <virtqueue_get_available_buffer>:
{
 1014502:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
 1014504:	f3bf 8f5b 	dmb	ish
{
 1014508:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 101450a:	69c1      	ldr	r1, [r0, #28]
{
 101450c:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 101450e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 1014510:	884a      	ldrh	r2, [r1, #2]
{
 1014512:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 1014514:	429a      	cmp	r2, r3
 1014516:	d016      	beq.n	1014546 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 1014518:	1c5a      	adds	r2, r3, #1
 101451a:	8602      	strh	r2, [r0, #48]	; 0x30
 101451c:	8942      	ldrh	r2, [r0, #10]
 101451e:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 1014520:	4013      	ands	r3, r2
 1014522:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 1014526:	888a      	ldrh	r2, [r1, #4]
 1014528:	802a      	strh	r2, [r5, #0]
 101452a:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 101452c:	6982      	ldr	r2, [r0, #24]
 101452e:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
 1014530:	58d1      	ldr	r1, [r2, r3]
 1014532:	6a80      	ldr	r0, [r0, #40]	; 0x28
 1014534:	f7ff fef6 	bl	1014324 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
 1014538:	882a      	ldrh	r2, [r5, #0]
 101453a:	69a3      	ldr	r3, [r4, #24]
 101453c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 1014540:	689b      	ldr	r3, [r3, #8]
 1014542:	6033      	str	r3, [r6, #0]
}
 1014544:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 1014546:	2000      	movs	r0, #0
 1014548:	e7fc      	b.n	1014544 <virtqueue_get_available_buffer+0x42>

0101454a <virtqueue_disable_cb>:
{
 101454a:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 101454c:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
 101454e:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 1014550:	6912      	ldr	r2, [r2, #16]
 1014552:	0092      	lsls	r2, r2, #2
 1014554:	d517      	bpl.n	1014586 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
 1014556:	b943      	cbnz	r3, 101456a <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 1014558:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
 101455a:	69c2      	ldr	r2, [r0, #28]
 101455c:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 101455e:	8944      	ldrh	r4, [r0, #10]
 1014560:	3b01      	subs	r3, #1
 1014562:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
 1014564:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 1014568:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
 101456a:	6803      	ldr	r3, [r0, #0]
 101456c:	699b      	ldr	r3, [r3, #24]
 101456e:	2b01      	cmp	r3, #1
 1014570:	d108      	bne.n	1014584 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
 1014572:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
 1014574:	6a02      	ldr	r2, [r0, #32]
 1014576:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
 1014578:	8940      	ldrh	r0, [r0, #10]
 101457a:	3b01      	subs	r3, #1
 101457c:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
 101457e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 1014582:	8093      	strh	r3, [r2, #4]
}
 1014584:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
 1014586:	b923      	cbnz	r3, 1014592 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 1014588:	69c2      	ldr	r2, [r0, #28]
 101458a:	8813      	ldrh	r3, [r2, #0]
 101458c:	f043 0301 	orr.w	r3, r3, #1
 1014590:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
 1014592:	6803      	ldr	r3, [r0, #0]
 1014594:	699b      	ldr	r3, [r3, #24]
 1014596:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
 1014598:	bf01      	itttt	eq
 101459a:	6a02      	ldreq	r2, [r0, #32]
 101459c:	8813      	ldrheq	r3, [r2, #0]
 101459e:	f043 0301 	orreq.w	r3, r3, #1
 10145a2:	8013      	strheq	r3, [r2, #0]
}
 10145a4:	e7ee      	b.n	1014584 <virtqueue_disable_cb+0x3a>

010145a6 <virtqueue_kick>:
{
 10145a6:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
 10145a8:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 10145ac:	6803      	ldr	r3, [r0, #0]
{
 10145ae:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 10145b0:	691a      	ldr	r2, [r3, #16]
 10145b2:	699b      	ldr	r3, [r3, #24]
 10145b4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 10145b8:	d01a      	beq.n	10145f0 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
 10145ba:	b97b      	cbnz	r3, 10145dc <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
 10145bc:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
 10145be:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
 10145c0:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
 10145c2:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
 10145c4:	3b01      	subs	r3, #1
 10145c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
 10145ca:	8892      	ldrh	r2, [r2, #4]
 10145cc:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
 10145ce:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 10145d0:	b29b      	uxth	r3, r3
 10145d2:	429a      	cmp	r2, r3
 10145d4:	d814      	bhi.n	1014600 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
 10145d6:	2300      	movs	r3, #0
 10145d8:	84e3      	strh	r3, [r4, #38]	; 0x26
}
 10145da:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
 10145dc:	2b01      	cmp	r3, #1
 10145de:	d1fa      	bne.n	10145d6 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
 10145e0:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
 10145e2:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
 10145e4:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
 10145e6:	6941      	ldr	r1, [r0, #20]
 10145e8:	3b01      	subs	r3, #1
 10145ea:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 10145ee:	e7ec      	b.n	10145ca <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
 10145f0:	b963      	cbnz	r3, 101460c <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
 10145f2:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
 10145f4:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
 10145f6:	43db      	mvns	r3, r3
 10145f8:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
 10145fc:	2b00      	cmp	r3, #0
 10145fe:	d0ea      	beq.n	10145d6 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
 1014600:	6923      	ldr	r3, [r4, #16]
 1014602:	2b00      	cmp	r3, #0
 1014604:	d0e7      	beq.n	10145d6 <virtqueue_kick+0x30>
		vq->notify(vq);
 1014606:	4620      	mov	r0, r4
 1014608:	4798      	blx	r3
 101460a:	e7e4      	b.n	10145d6 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
 101460c:	2b01      	cmp	r3, #1
 101460e:	d1e2      	bne.n	10145d6 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
 1014610:	69c3      	ldr	r3, [r0, #28]
 1014612:	e7ef      	b.n	10145f4 <virtqueue_kick+0x4e>

01014614 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 1014614:	69c3      	ldr	r3, [r0, #28]
 1014616:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 1014618:	8859      	ldrh	r1, [r3, #2]
 101461a:	4291      	cmp	r1, r2
 101461c:	d00a      	beq.n	1014634 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 101461e:	8941      	ldrh	r1, [r0, #10]
 1014620:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 1014622:	400a      	ands	r2, r1
 1014624:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
 1014628:	889a      	ldrh	r2, [r3, #4]
 101462a:	6983      	ldr	r3, [r0, #24]
 101462c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 1014630:	6898      	ldr	r0, [r3, #8]
	return len;
 1014632:	4770      	bx	lr
		return 0;
 1014634:	2000      	movs	r0, #0
}
 1014636:	4770      	bx	lr

01014638 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
 1014638:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 101463c:	68c3      	ldr	r3, [r0, #12]
 101463e:	b103      	cbz	r3, 1014642 <virtqueue_notification+0xa>
		vq->callback(vq);
 1014640:	4718      	bx	r3
}
 1014642:	4770      	bx	lr

01014644 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
 1014644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1014648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 101464c:	f7fb bfd6 	b.w	10105fc <z_impl_k_sem_take>

01014650 <rpmsg_unregister_endpoint>:
{
 1014650:	b570      	push	{r4, r5, r6, lr}
 1014652:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
 1014654:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
 1014656:	f105 0658 	add.w	r6, r5, #88	; 0x58
 101465a:	4630      	mov	r0, r6
 101465c:	f7ff fff2 	bl	1014644 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
 1014660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1014662:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 1014666:	2b7f      	cmp	r3, #127	; 0x7f
 1014668:	d80b      	bhi.n	1014682 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 101466a:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 101466c:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 101466e:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 1014670:	f003 031f 	and.w	r3, r3, #31
 1014674:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 1014676:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 101467a:	ea23 0302 	bic.w	r3, r3, r2
 101467e:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
 1014682:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 1014686:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
 1014688:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
 101468a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 101468e:	6011      	str	r1, [r2, #0]
	node->next = node;
 1014690:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
 1014694:	2300      	movs	r3, #0
 1014696:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
 1014698:	4630      	mov	r0, r6
}
 101469a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 101469e:	f7fb bf8d 	b.w	10105bc <z_impl_k_sem_give>

010146a2 <rpmsg_send_ns_message>:
{
 10146a2:	b510      	push	{r4, lr}
 10146a4:	b08c      	sub	sp, #48	; 0x30
	ns_msg.addr = ept->addr;
 10146a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 10146a8:	4604      	mov	r4, r0
	ns_msg.flags = flags;
 10146aa:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 10146ac:	2220      	movs	r2, #32
 10146ae:	4601      	mov	r1, r0
 10146b0:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
 10146b2:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 10146b4:	f7fe f938 	bl	1012928 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 10146b8:	2328      	movs	r3, #40	; 0x28
 10146ba:	2201      	movs	r2, #1
 10146bc:	e9cd 3200 	strd	r3, r2, [sp]
 10146c0:	4620      	mov	r0, r4
 10146c2:	2235      	movs	r2, #53	; 0x35
 10146c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 10146c6:	ab02      	add	r3, sp, #8
 10146c8:	f7fb faba 	bl	100fc40 <rpmsg_send_offchannel_raw>
}
 10146cc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 10146d0:	b00c      	add	sp, #48	; 0x30
 10146d2:	bd10      	pop	{r4, pc}

010146d4 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
 10146d4:	b128      	cbz	r0, 10146e2 <rpmsg_hold_rx_buffer+0xe>
 10146d6:	6a00      	ldr	r0, [r0, #32]
 10146d8:	b118      	cbz	r0, 10146e2 <rpmsg_hold_rx_buffer+0xe>
 10146da:	b111      	cbz	r1, 10146e2 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
 10146dc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 10146de:	b103      	cbz	r3, 10146e2 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
 10146e0:	4718      	bx	r3
}
 10146e2:	4770      	bx	lr

010146e4 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
 10146e4:	b128      	cbz	r0, 10146f2 <rpmsg_release_rx_buffer+0xe>
 10146e6:	6a00      	ldr	r0, [r0, #32]
 10146e8:	b118      	cbz	r0, 10146f2 <rpmsg_release_rx_buffer+0xe>
 10146ea:	b111      	cbz	r1, 10146f2 <rpmsg_release_rx_buffer+0xe>
	if (rdev->ops.release_rx_buffer)
 10146ec:	6f83      	ldr	r3, [r0, #120]	; 0x78
 10146ee:	b103      	cbz	r3, 10146f2 <rpmsg_release_rx_buffer+0xe>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
 10146f0:	4718      	bx	r3
}
 10146f2:	4770      	bx	lr

010146f4 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
 10146f4:	b128      	cbz	r0, 1014702 <rpmsg_get_tx_payload_buffer+0xe>
 10146f6:	6a00      	ldr	r0, [r0, #32]
 10146f8:	b118      	cbz	r0, 1014702 <rpmsg_get_tx_payload_buffer+0xe>
 10146fa:	b111      	cbz	r1, 1014702 <rpmsg_get_tx_payload_buffer+0xe>
	if (rdev->ops.get_tx_payload_buffer)
 10146fc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 10146fe:	b103      	cbz	r3, 1014702 <rpmsg_get_tx_payload_buffer+0xe>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
 1014700:	4718      	bx	r3
}
 1014702:	2000      	movs	r0, #0
 1014704:	4770      	bx	lr

01014706 <rpmsg_get_endpoint>:
{
 1014706:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 101470a:	4606      	mov	r6, r0
 101470c:	4688      	mov	r8, r1
 101470e:	4617      	mov	r7, r2
 1014710:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
 1014712:	6804      	ldr	r4, [r0, #0]
 1014714:	42a6      	cmp	r6, r4
 1014716:	d101      	bne.n	101471c <rpmsg_get_endpoint+0x16>
	return NULL;
 1014718:	2500      	movs	r5, #0
 101471a:	e023      	b.n	1014764 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 101471c:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 101471e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 1014722:	d002      	beq.n	101472a <rpmsg_get_endpoint+0x24>
 1014724:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 1014726:	42bb      	cmp	r3, r7
 1014728:	d01c      	beq.n	1014764 <rpmsg_get_endpoint+0x5e>
		if (name)
 101472a:	f1b8 0f00 	cmp.w	r8, #0
 101472e:	d101      	bne.n	1014734 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
 1014730:	6824      	ldr	r4, [r4, #0]
 1014732:	e7ef      	b.n	1014714 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
 1014734:	2220      	movs	r2, #32
 1014736:	4641      	mov	r1, r8
 1014738:	4628      	mov	r0, r5
 101473a:	f7fe f925 	bl	1012988 <strncmp>
		if (!name || !name_match)
 101473e:	2800      	cmp	r0, #0
 1014740:	d1f6      	bne.n	1014730 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 1014742:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 1014746:	d002      	beq.n	101474e <rpmsg_get_endpoint+0x48>
 1014748:	6aab      	ldr	r3, [r5, #40]	; 0x28
 101474a:	454b      	cmp	r3, r9
 101474c:	d00a      	beq.n	1014764 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 101474e:	1c7b      	adds	r3, r7, #1
 1014750:	d00b      	beq.n	101476a <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
 1014752:	6824      	ldr	r4, [r4, #0]
 1014754:	42b4      	cmp	r4, r6
 1014756:	d0df      	beq.n	1014718 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 1014758:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 101475c:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 1014760:	429f      	cmp	r7, r3
 1014762:	d1e7      	bne.n	1014734 <rpmsg_get_endpoint+0x2e>
}
 1014764:	4628      	mov	r0, r5
 1014766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 101476a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 101476c:	3301      	adds	r3, #1
 101476e:	d0f9      	beq.n	1014764 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
 1014770:	6824      	ldr	r4, [r4, #0]
 1014772:	42b4      	cmp	r4, r6
 1014774:	d0d0      	beq.n	1014718 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 1014776:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 101477a:	e7d6      	b.n	101472a <rpmsg_get_endpoint+0x24>

0101477c <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 101477c:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
 101477e:	4604      	mov	r4, r0
 1014780:	b190      	cbz	r0, 10147a8 <rpmsg_destroy_ept+0x2c>
 1014782:	6a03      	ldr	r3, [r0, #32]
 1014784:	b183      	cbz	r3, 10147a8 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
 1014786:	7802      	ldrb	r2, [r0, #0]
 1014788:	b14a      	cbz	r2, 101479e <rpmsg_destroy_ept+0x22>
 101478a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 101478e:	b133      	cbz	r3, 101479e <rpmsg_destroy_ept+0x22>
 1014790:	6a43      	ldr	r3, [r0, #36]	; 0x24
 1014792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 1014796:	d302      	bcc.n	101479e <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 1014798:	2101      	movs	r1, #1
 101479a:	f7ff ff82 	bl	10146a2 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
 101479e:	4620      	mov	r0, r4
}
 10147a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
 10147a4:	f7ff bf54 	b.w	1014650 <rpmsg_unregister_endpoint>
}
 10147a8:	bd10      	pop	{r4, pc}

010147aa <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
 10147aa:	f851 3c08 	ldr.w	r3, [r1, #-8]
 10147ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 10147b2:	f841 3c08 	str.w	r3, [r1, #-8]
}
 10147b6:	4770      	bx	lr

010147b8 <rpmsg_virtio_tx_callback>:
}
 10147b8:	4770      	bx	lr

010147ba <k_sem_give>:
 10147ba:	f7fb beff 	b.w	10105bc <z_impl_k_sem_give>

010147be <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
 10147be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 10147c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 10147c6:	f7fb bf19 	b.w	10105fc <z_impl_k_sem_take>

010147ca <rpmsg_virtio_release_tx_buffer>:
{
 10147ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10147cc:	460c      	mov	r4, r1
 10147ce:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
 10147d0:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
 10147d4:	f100 0758 	add.w	r7, r0, #88	; 0x58
 10147d8:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
 10147da:	b2b6      	uxth	r6, r6
 10147dc:	f7ff ffef 	bl	10147be <__metal_mutex_acquire>
	r_desc->idx = idx;
 10147e0:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
 10147e4:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
 10147e8:	f1a4 0310 	sub.w	r3, r4, #16
 10147ec:	f844 2c0c 	str.w	r2, [r4, #-12]
 10147f0:	f105 02ac 	add.w	r2, r5, #172	; 0xac
	new_node->next = node;
 10147f4:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
 10147f8:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	new_node->prev->next = new_node;
 10147fc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 1014800:	4638      	mov	r0, r7
 1014802:	6013      	str	r3, [r2, #0]
 1014804:	f7ff ffd9 	bl	10147ba <k_sem_give>
}
 1014808:	2000      	movs	r0, #0
 101480a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0101480c <rpmsg_virtio_ns_callback>:
{
 101480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
 1014810:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
 1014812:	2a28      	cmp	r2, #40	; 0x28
{
 1014814:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
 1014816:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
{
 101481a:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
 101481c:	d126      	bne.n	101486c <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
 101481e:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 1014820:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
 1014822:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
 1014824:	42a1      	cmp	r1, r4
 1014826:	bf28      	it	cs
 1014828:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
 101482c:	2320      	movs	r3, #32
 101482e:	466a      	mov	r2, sp
 1014830:	f7ff fcb3 	bl	101419a <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
 1014834:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
 1014838:	f8d7 8020 	ldr.w	r8, [r7, #32]
 101483c:	4630      	mov	r0, r6
 101483e:	f7ff ffbe 	bl	10147be <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 1014842:	4643      	mov	r3, r8
 1014844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1014848:	4669      	mov	r1, sp
 101484a:	4628      	mov	r0, r5
 101484c:	f7ff ff5b 	bl	1014706 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 1014850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 1014852:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 1014854:	07db      	lsls	r3, r3, #31
 1014856:	d519      	bpl.n	101488c <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
 1014858:	b960      	cbnz	r0, 1014874 <rpmsg_virtio_ns_callback+0x68>
 101485a:	4630      	mov	r0, r6
 101485c:	f7ff ffad 	bl	10147ba <k_sem_give>
		if (rdev->ns_unbind_cb)
 1014860:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
			if (rdev->ns_bind_cb)
 1014862:	b11b      	cbz	r3, 101486c <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
 1014864:	4642      	mov	r2, r8
 1014866:	4669      	mov	r1, sp
 1014868:	4628      	mov	r0, r5
 101486a:	4798      	blx	r3
}
 101486c:	2000      	movs	r0, #0
 101486e:	b008      	add	sp, #32
 1014870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
 1014874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1014878:	6283      	str	r3, [r0, #40]	; 0x28
 101487a:	4630      	mov	r0, r6
 101487c:	f7ff ff9d 	bl	10147ba <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
 1014880:	6b23      	ldr	r3, [r4, #48]	; 0x30
 1014882:	2b00      	cmp	r3, #0
 1014884:	d0ec      	beq.n	1014860 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
 1014886:	4620      	mov	r0, r4
 1014888:	4798      	blx	r3
 101488a:	e7e9      	b.n	1014860 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
 101488c:	b920      	cbnz	r0, 1014898 <rpmsg_virtio_ns_callback+0x8c>
 101488e:	4630      	mov	r0, r6
 1014890:	f7ff ff93 	bl	10147ba <k_sem_give>
			if (rdev->ns_bind_cb)
 1014894:	6eab      	ldr	r3, [r5, #104]	; 0x68
 1014896:	e7e4      	b.n	1014862 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
 1014898:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
 101489c:	4630      	mov	r0, r6
 101489e:	f7ff ff8c 	bl	10147ba <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
 10148a2:	e7e3      	b.n	101486c <rpmsg_virtio_ns_callback+0x60>

010148a4 <rpmsg_virtio_get_rx_buffer>:
{
 10148a4:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
 10148a6:	f8d0 5098 	ldr.w	r5, [r0, #152]	; 0x98
 10148aa:	4613      	mov	r3, r2
 10148ac:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
 10148ae:	b925      	cbnz	r5, 10148ba <rpmsg_virtio_get_rx_buffer+0x16>
}
 10148b0:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
 10148b2:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 10148b6:	f7ff bde5 	b.w	1014484 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
 10148ba:	2d01      	cmp	r5, #1
 10148bc:	d106      	bne.n	10148cc <rpmsg_virtio_get_rx_buffer+0x28>
}
 10148be:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
 10148c0:	460a      	mov	r2, r1
 10148c2:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 10148c6:	4619      	mov	r1, r3
 10148c8:	f7ff be1b 	b.w	1014502 <virtqueue_get_available_buffer>
}
 10148cc:	2000      	movs	r0, #0
 10148ce:	bc30      	pop	{r4, r5}
 10148d0:	4770      	bx	lr

010148d2 <rpmsg_virtio_return_buffer>:
{
 10148d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 10148d4:	460c      	mov	r4, r1
 10148d6:	4619      	mov	r1, r3
 10148d8:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 10148dc:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
 10148de:	b95d      	cbnz	r5, 10148f8 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 10148e0:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
 10148e2:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 10148e6:	2301      	movs	r3, #1
 10148e8:	462a      	mov	r2, r5
 10148ea:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 10148ee:	a902      	add	r1, sp, #8
 10148f0:	f7ff fd6c 	bl	10143cc <virtqueue_add_buffer>
}
 10148f4:	b004      	add	sp, #16
 10148f6:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
 10148f8:	2d01      	cmp	r5, #1
 10148fa:	d1fb      	bne.n	10148f4 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 10148fc:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
}
 1014900:	b004      	add	sp, #16
 1014902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 1014906:	f7fb b97f 	b.w	100fc08 <virtqueue_add_consumed_buffer>

0101490a <rpmsg_virtio_rx_callback>:
{
 101490a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 101490e:	6803      	ldr	r3, [r0, #0]
 1014910:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
 1014912:	f107 0658 	add.w	r6, r7, #88	; 0x58
	__metal_mutex_acquire(mutex);
 1014916:	4630      	mov	r0, r6
 1014918:	f7ff ff51 	bl	10147be <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 101491c:	4638      	mov	r0, r7
 101491e:	f10d 020a 	add.w	r2, sp, #10
 1014922:	a903      	add	r1, sp, #12
 1014924:	f7ff ffbe 	bl	10148a4 <rpmsg_virtio_get_rx_buffer>
 1014928:	4604      	mov	r4, r0
 101492a:	4630      	mov	r0, r6
 101492c:	f7ff ff45 	bl	10147ba <k_sem_give>
	while (rp_hdr) {
 1014930:	2c00      	cmp	r4, #0
 1014932:	d041      	beq.n	10149b8 <rpmsg_virtio_rx_callback+0xae>
		rp_hdr->reserved = idx;
 1014934:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 1014938:	4630      	mov	r0, r6
 101493a:	60a3      	str	r3, [r4, #8]
 101493c:	f7ff ff3f 	bl	10147be <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 1014940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1014944:	2100      	movs	r1, #0
 1014946:	4638      	mov	r0, r7
 1014948:	6862      	ldr	r2, [r4, #4]
 101494a:	f7ff fedc 	bl	1014706 <rpmsg_get_endpoint>
 101494e:	4605      	mov	r5, r0
 1014950:	4630      	mov	r0, r6
 1014952:	f7ff ff32 	bl	10147ba <k_sem_give>
		if (ept) {
 1014956:	b17d      	cbz	r5, 1014978 <rpmsg_virtio_rx_callback+0x6e>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
 1014958:	6aab      	ldr	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
 101495a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
 101495c:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
 101495e:	bf08      	it	eq
 1014960:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
 1014962:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
 1014964:	bf08      	it	eq
 1014966:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
 1014968:	6823      	ldr	r3, [r4, #0]
 101496a:	89a2      	ldrh	r2, [r4, #12]
 101496c:	9100      	str	r1, [sp, #0]
 101496e:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
 1014972:	f104 0110 	add.w	r1, r4, #16
 1014976:	47c0      	blx	r8
 1014978:	4630      	mov	r0, r6
 101497a:	f7ff ff20 	bl	10147be <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
 101497e:	68a3      	ldr	r3, [r4, #8]
 1014980:	2b00      	cmp	r3, #0
 1014982:	db06      	blt.n	1014992 <rpmsg_virtio_rx_callback+0x88>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 1014984:	4621      	mov	r1, r4
 1014986:	4638      	mov	r0, r7
 1014988:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 101498c:	9a03      	ldr	r2, [sp, #12]
 101498e:	f7ff ffa0 	bl	10148d2 <rpmsg_virtio_return_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 1014992:	4638      	mov	r0, r7
 1014994:	f10d 020a 	add.w	r2, sp, #10
 1014998:	a903      	add	r1, sp, #12
 101499a:	f7ff ff83 	bl	10148a4 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
 101499e:	4604      	mov	r4, r0
 10149a0:	b118      	cbz	r0, 10149aa <rpmsg_virtio_rx_callback+0xa0>
 10149a2:	4630      	mov	r0, r6
 10149a4:	f7ff ff09 	bl	10147ba <k_sem_give>
	while (rp_hdr) {
 10149a8:	e7c4      	b.n	1014934 <rpmsg_virtio_rx_callback+0x2a>
			virtqueue_kick(rvdev->rvq);
 10149aa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 10149ae:	f7ff fdfa 	bl	10145a6 <virtqueue_kick>
 10149b2:	4630      	mov	r0, r6
 10149b4:	f7ff ff01 	bl	10147ba <k_sem_give>
}
 10149b8:	b004      	add	sp, #16
 10149ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

010149be <rpmsg_virtio_release_rx_buffer>:
{
 10149be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10149c0:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
 10149c2:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
 10149c6:	f100 0758 	add.w	r7, r0, #88	; 0x58
 10149ca:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
 10149cc:	b2b6      	uxth	r6, r6
{
 10149ce:	460d      	mov	r5, r1
 10149d0:	f7ff fef5 	bl	10147be <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
 10149d4:	4631      	mov	r1, r6
 10149d6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 10149da:	f7ff fd8d 	bl	10144f8 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 10149de:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
 10149e0:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 10149e2:	f1a5 0110 	sub.w	r1, r5, #16
 10149e6:	4620      	mov	r0, r4
 10149e8:	f7ff ff73 	bl	10148d2 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
 10149ec:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 10149f0:	f7ff fdd9 	bl	10145a6 <virtqueue_kick>
 10149f4:	4638      	mov	r0, r7
}
 10149f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 10149fa:	f7ff bede 	b.w	10147ba <k_sem_give>

010149fe <rpmsg_virtio_send_offchannel_nocopy>:
{
 10149fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	hdr = RPMSG_LOCATE_HDR(data);
 1014a02:	f1a3 0610 	sub.w	r6, r3, #16
	idx = hdr->reserved;
 1014a06:	f853 5c08 	ldr.w	r5, [r3, #-8]
	rp_hdr.reserved = 0;
 1014a0a:	2300      	movs	r3, #0
{
 1014a0c:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
 1014a0e:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
 1014a10:	f8ad 301e 	strh.w	r3, [sp, #30]
{
 1014a14:	4604      	mov	r4, r0
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
 1014a16:	2310      	movs	r3, #16
	rp_hdr.src = src;
 1014a18:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
 1014a1c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	io = rvdev->shbuf_io;
 1014a1e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
	rp_hdr.len = len;
 1014a22:	f8ad 701c 	strh.w	r7, [sp, #28]
 1014a26:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
 1014a28:	f8d0 c008 	ldr.w	ip, [r0, #8]
 1014a2c:	1a71      	subs	r1, r6, r1
 1014a2e:	eb0d 0203 	add.w	r2, sp, r3
 1014a32:	4561      	cmp	r1, ip
 1014a34:	bf28      	it	cs
 1014a36:	f04f 31ff 	movcs.w	r1, #4294967295	; 0xffffffff
	metal_mutex_acquire(&rdev->lock);
 1014a3a:	f104 0858 	add.w	r8, r4, #88	; 0x58
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
 1014a3e:	f7ff fbe5 	bl	101420c <metal_io_block_write>
 1014a42:	4640      	mov	r0, r8
 1014a44:	f7ff febb 	bl	10147be <__metal_mutex_acquire>
 1014a48:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	idx = hdr->reserved;
 1014a4c:	b2ad      	uxth	r5, r5
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
 1014a4e:	699b      	ldr	r3, [r3, #24]
 1014a50:	b9cb      	cbnz	r3, 1014a86 <rpmsg_virtio_send_offchannel_nocopy+0x88>
		buff_len = rvdev->config.h2r_buf_size;
 1014a52:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 1014a56:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
 1014a5a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 1014a5e:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
 1014a60:	b9c3      	cbnz	r3, 1014a94 <rpmsg_virtio_send_offchannel_nocopy+0x96>
		vqbuf.len = len;
 1014a62:	e9cd 6202 	strd	r6, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
 1014a66:	9600      	str	r6, [sp, #0]
 1014a68:	2201      	movs	r2, #1
 1014a6a:	a902      	add	r1, sp, #8
 1014a6c:	f7ff fcae 	bl	10143cc <virtqueue_add_buffer>
	virtqueue_kick(rvdev->svq);
 1014a70:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 1014a74:	f7ff fd97 	bl	10145a6 <virtqueue_kick>
 1014a78:	4640      	mov	r0, r8
 1014a7a:	f7ff fe9e 	bl	10147ba <k_sem_give>
}
 1014a7e:	4638      	mov	r0, r7
 1014a80:	b008      	add	sp, #32
 1014a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
 1014a86:	4629      	mov	r1, r5
 1014a88:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 1014a8c:	f7ff fd34 	bl	10144f8 <virtqueue_get_buffer_length>
 1014a90:	4602      	mov	r2, r0
 1014a92:	e7e0      	b.n	1014a56 <rpmsg_virtio_send_offchannel_nocopy+0x58>
	if (role == RPMSG_REMOTE) {
 1014a94:	2b01      	cmp	r3, #1
 1014a96:	d1eb      	bne.n	1014a70 <rpmsg_virtio_send_offchannel_nocopy+0x72>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 1014a98:	4629      	mov	r1, r5
 1014a9a:	f7fb f8b5 	bl	100fc08 <virtqueue_add_consumed_buffer>
 1014a9e:	e7e7      	b.n	1014a70 <rpmsg_virtio_send_offchannel_nocopy+0x72>

01014aa0 <rpmsg_virtio_shm_pool_get_buffer>:
{
 1014aa0:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
 1014aa2:	b148      	cbz	r0, 1014ab8 <rpmsg_virtio_shm_pool_get_buffer+0x18>
 1014aa4:	b149      	cbz	r1, 1014aba <rpmsg_virtio_shm_pool_get_buffer+0x1a>
 1014aa6:	6843      	ldr	r3, [r0, #4]
 1014aa8:	428b      	cmp	r3, r1
 1014aaa:	d306      	bcc.n	1014aba <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
 1014aac:	6882      	ldr	r2, [r0, #8]
 1014aae:	6804      	ldr	r4, [r0, #0]
 1014ab0:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
 1014ab2:	1a5b      	subs	r3, r3, r1
 1014ab4:	6043      	str	r3, [r0, #4]
	return buffer;
 1014ab6:	18a0      	adds	r0, r4, r2
}
 1014ab8:	bd10      	pop	{r4, pc}
		return NULL;
 1014aba:	2000      	movs	r0, #0
 1014abc:	e7fc      	b.n	1014ab8 <rpmsg_virtio_shm_pool_get_buffer+0x18>

01014abe <rpmsg_virtio_get_tx_payload_buffer>:
{
 1014abe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 1014ac2:	4605      	mov	r5, r0
 1014ac4:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 1014ac8:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
 1014aca:	6a03      	ldr	r3, [r0, #32]
 1014acc:	4617      	mov	r7, r2
 1014ace:	681b      	ldr	r3, [r3, #0]
 1014ad0:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
 1014ad2:	0743      	lsls	r3, r0, #29
 1014ad4:	d403      	bmi.n	1014ade <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
 1014ad6:	2000      	movs	r0, #0
}
 1014ad8:	b002      	add	sp, #8
 1014ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 1014ade:	f643 2398 	movw	r3, #15000	; 0x3a98
 1014ae2:	2f00      	cmp	r7, #0
 1014ae4:	bf18      	it	ne
 1014ae6:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
 1014ae8:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
 1014aec:	f105 0aac 	add.w	sl, r5, #172	; 0xac
 1014af0:	4640      	mov	r0, r8
 1014af2:	f7ff fe64 	bl	10147be <__metal_mutex_acquire>
	return list->next == list;
 1014af6:	f8d5 40ac 	ldr.w	r4, [r5, #172]	; 0xac
	return rvdev->vdev->role;
 1014afa:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
 1014afe:	4554      	cmp	r4, sl
 1014b00:	f8d3 9018 	ldr.w	r9, [r3, #24]
 1014b04:	d025      	beq.n	1014b52 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
 1014b06:	b324      	cbz	r4, 1014b52 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
 1014b08:	e9d4 2300 	ldrd	r2, r3, [r4]
 1014b0c:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
 1014b0e:	6822      	ldr	r2, [r4, #0]
 1014b10:	601a      	str	r2, [r3, #0]
	node->next = node;
 1014b12:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
 1014b16:	f1b9 0f00 	cmp.w	r9, #0
 1014b1a:	d10e      	bne.n	1014b3a <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
 1014b1c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 1014b20:	6033      	str	r3, [r6, #0]
 1014b22:	4640      	mov	r0, r8
 1014b24:	f7ff fe49 	bl	10147ba <k_sem_give>
	rp_hdr->reserved = idx;
 1014b28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
 1014b2c:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
 1014b30:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
 1014b32:	6833      	ldr	r3, [r6, #0]
 1014b34:	3b10      	subs	r3, #16
 1014b36:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
 1014b38:	e7ce      	b.n	1014ad8 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
 1014b3a:	f1b9 0f01 	cmp.w	r9, #1
 1014b3e:	d1f0      	bne.n	1014b22 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
 1014b40:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
 1014b42:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
			*idx = r_desc->idx;
 1014b46:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
 1014b4a:	f7ff fcd5 	bl	10144f8 <virtqueue_get_buffer_length>
 1014b4e:	6030      	str	r0, [r6, #0]
 1014b50:	e7e7      	b.n	1014b22 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
 1014b52:	f1b9 0f00 	cmp.w	r9, #0
 1014b56:	d12a      	bne.n	1014bae <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
 1014b58:	4631      	mov	r1, r6
 1014b5a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 1014b5e:	f10d 0206 	add.w	r2, sp, #6
 1014b62:	f7ff fc8f 	bl	1014484 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
 1014b66:	4604      	mov	r4, r0
 1014b68:	2800      	cmp	r0, #0
 1014b6a:	d1da      	bne.n	1014b22 <rpmsg_virtio_get_tx_payload_buffer+0x64>
 1014b6c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 1014b70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 1014b72:	b953      	cbnz	r3, 1014b8a <rpmsg_virtio_get_tx_payload_buffer+0xcc>
 1014b74:	4640      	mov	r0, r8
 1014b76:	f7ff fe20 	bl	10147ba <k_sem_give>
		if (rp_hdr || !tick_count)
 1014b7a:	2f00      	cmp	r7, #0
 1014b7c:	d0ab      	beq.n	1014ad6 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
 1014b7e:	2021      	movs	r0, #33	; 0x21
 1014b80:	2100      	movs	r1, #0
 1014b82:	f7fc f9fb 	bl	1010f7c <z_impl_k_sleep>
		tick_count--;
 1014b86:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
 1014b88:	e7b2      	b.n	1014af0 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 1014b8a:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 1014b8e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
 1014b92:	f7ff ff85 	bl	1014aa0 <rpmsg_virtio_shm_pool_get_buffer>
 1014b96:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
 1014b98:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
			*idx = 0;
 1014b9c:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
 1014ba0:	6033      	str	r3, [r6, #0]
 1014ba2:	4640      	mov	r0, r8
 1014ba4:	f7ff fe09 	bl	10147ba <k_sem_give>
		if (rp_hdr || !tick_count)
 1014ba8:	2c00      	cmp	r4, #0
 1014baa:	d0e6      	beq.n	1014b7a <rpmsg_virtio_get_tx_payload_buffer+0xbc>
 1014bac:	e7bc      	b.n	1014b28 <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
 1014bae:	f1b9 0f01 	cmp.w	r9, #1
 1014bb2:	d1df      	bne.n	1014b74 <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
 1014bb4:	4632      	mov	r2, r6
 1014bb6:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 1014bba:	f10d 0106 	add.w	r1, sp, #6
 1014bbe:	f7ff fca0 	bl	1014502 <virtqueue_get_available_buffer>
 1014bc2:	4604      	mov	r4, r0
 1014bc4:	e7ed      	b.n	1014ba2 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

01014bc6 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
 1014bc6:	b120      	cbz	r0, 1014bd2 <rpmsg_virtio_init_shm_pool+0xc>
 1014bc8:	b119      	cbz	r1, 1014bd2 <rpmsg_virtio_init_shm_pool+0xc>
 1014bca:	b112      	cbz	r2, 1014bd2 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
 1014bcc:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
 1014bd0:	6001      	str	r1, [r0, #0]
}
 1014bd2:	4770      	bx	lr

01014bd4 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 1014bd4:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
 1014bd6:	4604      	mov	r4, r0
 1014bd8:	b918      	cbnz	r0, 1014be2 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
 1014bda:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
 1014bdc:	3834      	subs	r0, #52	; 0x34
 1014bde:	f7ff fdcd 	bl	101477c <rpmsg_destroy_ept>
	return list->next == list;
 1014be2:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
 1014be4:	4284      	cmp	r4, r0
 1014be6:	d1f9      	bne.n	1014bdc <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
 1014be8:	2300      	movs	r3, #0
		rvdev->svq = 0;
 1014bea:	e9c4 3327 	strd	r3, r3, [r4, #156]	; 0x9c
}
 1014bee:	e7f4      	b.n	1014bda <rpmsg_deinit_vdev+0x6>

01014bf0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 1014bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1014bf2:	4605      	mov	r5, r0
 1014bf4:	460e      	mov	r6, r1
	__asm__ volatile(
 1014bf6:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014bfa:	f3ef 8711 	mrs	r7, BASEPRI
 1014bfe:	f383 8812 	msr	BASEPRI_MAX, r3
 1014c02:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 1014c06:	f7fc f9d3 	bl	1010fb0 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 1014c0a:	4631      	mov	r1, r6
 1014c0c:	4604      	mov	r4, r0
 1014c0e:	4628      	mov	r0, r5
 1014c10:	f7fe f86f 	bl	1012cf2 <k_sys_fatal_error_handler>
	__asm__ volatile(
 1014c14:	f387 8811 	msr	BASEPRI, r7
 1014c18:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 1014c1c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 1014c1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1014c22:	f7f2 b913 	b.w	1006e4c <z_impl_k_thread_abort>

01014c26 <z_early_memset>:
	(void) memset(dst, c, n);
 1014c26:	f7fd bef4 	b.w	1012a12 <memset>

01014c2a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 1014c2a:	f7fd bee7 	b.w	10129fc <memcpy>

01014c2e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 1014c2e:	f3ef 8005 	mrs	r0, IPSR
}
 1014c32:	3800      	subs	r0, #0
 1014c34:	bf18      	it	ne
 1014c36:	2001      	movne	r0, #1
 1014c38:	4770      	bx	lr

01014c3a <z_impl_k_thread_name_set>:
}
 1014c3a:	f06f 0057 	mvn.w	r0, #87	; 0x57
 1014c3e:	4770      	bx	lr

01014c40 <z_impl_k_thread_start>:
	z_sched_start(thread);
 1014c40:	f7fc b88e 	b.w	1010d60 <z_sched_start>

01014c44 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 1014c44:	b508      	push	{r3, lr}
	__asm__ volatile(
 1014c46:	f04f 0240 	mov.w	r2, #64	; 0x40
 1014c4a:	f3ef 8311 	mrs	r3, BASEPRI
 1014c4e:	f382 8812 	msr	BASEPRI_MAX, r2
 1014c52:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
 1014c56:	f7f1 fe53 	bl	1006900 <arch_cpu_idle>
 1014c5a:	e7f4      	b.n	1014c46 <idle+0x2>

01014c5c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 1014c5c:	f990 300e 	ldrsb.w	r3, [r0, #14]
 1014c60:	428b      	cmp	r3, r1
 1014c62:	d001      	beq.n	1014c68 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 1014c64:	f7fc b824 	b.w	1010cb0 <z_set_prio>
}
 1014c68:	2000      	movs	r0, #0
 1014c6a:	4770      	bx	lr

01014c6c <z_impl_k_mutex_init>:
{
 1014c6c:	4603      	mov	r3, r0
	mutex->owner = NULL;
 1014c6e:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 1014c70:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
 1014c74:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
 1014c78:	4770      	bx	lr

01014c7a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 1014c7a:	b13a      	cbz	r2, 1014c8c <z_impl_k_sem_init+0x12>
 1014c7c:	428a      	cmp	r2, r1
 1014c7e:	d305      	bcc.n	1014c8c <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 1014c80:	e9c0 1202 	strd	r1, r2, [r0, #8]
 1014c84:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 1014c88:	2000      	movs	r0, #0
 1014c8a:	4770      	bx	lr
		return -EINVAL;
 1014c8c:	f06f 0015 	mvn.w	r0, #21
}
 1014c90:	4770      	bx	lr

01014c92 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
 1014c92:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
 1014c94:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 1014c96:	408b      	lsls	r3, r1
 1014c98:	ea22 0303 	bic.w	r3, r2, r3
 1014c9c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 1014c9e:	fa22 f001 	lsr.w	r0, r2, r1
}
 1014ca2:	f000 0001 	and.w	r0, r0, #1
 1014ca6:	4770      	bx	lr

01014ca8 <unschedule_locked>:
{
 1014ca8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 1014caa:	2103      	movs	r1, #3
{
 1014cac:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 1014cae:	300c      	adds	r0, #12
 1014cb0:	f7ff ffef 	bl	1014c92 <flag_test_and_clear>
 1014cb4:	4604      	mov	r4, r0
 1014cb6:	b118      	cbz	r0, 1014cc0 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
 1014cb8:	f105 0010 	add.w	r0, r5, #16
 1014cbc:	f000 f94d 	bl	1014f5a <z_abort_timeout>
}
 1014cc0:	4620      	mov	r0, r4
 1014cc2:	bd38      	pop	{r3, r4, r5, pc}

01014cc4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 1014cc4:	b120      	cbz	r0, 1014cd0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 1014cc6:	2200      	movs	r2, #0
 1014cc8:	3088      	adds	r0, #136	; 0x88
 1014cca:	4611      	mov	r1, r2
 1014ccc:	f000 b922 	b.w	1014f14 <z_sched_wake>
}
 1014cd0:	4770      	bx	lr

01014cd2 <work_timeout>:
{
 1014cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 1014cd4:	4604      	mov	r4, r0
 1014cd6:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014cda:	f3ef 8511 	mrs	r5, BASEPRI
 1014cde:	f383 8812 	msr	BASEPRI_MAX, r3
 1014ce2:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 1014ce6:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 1014ce8:	f1a0 0610 	sub.w	r6, r0, #16
 1014cec:	2103      	movs	r1, #3
 1014cee:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
 1014cf0:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 1014cf2:	f7ff ffce 	bl	1014c92 <flag_test_and_clear>
 1014cf6:	b128      	cbz	r0, 1014d04 <work_timeout+0x32>
		queue = dw->queue;
 1014cf8:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
 1014cfa:	4630      	mov	r0, r6
 1014cfc:	a901      	add	r1, sp, #4
		queue = dw->queue;
 1014cfe:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 1014d00:	f7fb fd40 	bl	1010784 <submit_to_queue_locked>
	__asm__ volatile(
 1014d04:	f385 8811 	msr	BASEPRI, r5
 1014d08:	f3bf 8f6f 	isb	sy
}
 1014d0c:	b002      	add	sp, #8
 1014d0e:	bd70      	pop	{r4, r5, r6, pc}

01014d10 <k_work_init>:
{
 1014d10:	b538      	push	{r3, r4, r5, lr}
 1014d12:	4604      	mov	r4, r0
 1014d14:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 1014d16:	2210      	movs	r2, #16
 1014d18:	2100      	movs	r1, #0
 1014d1a:	f7fd fe7a 	bl	1012a12 <memset>
 1014d1e:	6065      	str	r5, [r4, #4]
}
 1014d20:	bd38      	pop	{r3, r4, r5, pc}

01014d22 <z_work_submit_to_queue>:
{
 1014d22:	b513      	push	{r0, r1, r4, lr}
 1014d24:	9001      	str	r0, [sp, #4]
 1014d26:	4608      	mov	r0, r1
	__asm__ volatile(
 1014d28:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014d2c:	f3ef 8411 	mrs	r4, BASEPRI
 1014d30:	f383 8812 	msr	BASEPRI_MAX, r3
 1014d34:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 1014d38:	a901      	add	r1, sp, #4
 1014d3a:	f7fb fd23 	bl	1010784 <submit_to_queue_locked>
	__asm__ volatile(
 1014d3e:	f384 8811 	msr	BASEPRI, r4
 1014d42:	f3bf 8f6f 	isb	sy
}
 1014d46:	b002      	add	sp, #8
 1014d48:	bd10      	pop	{r4, pc}

01014d4a <k_work_submit_to_queue>:
{
 1014d4a:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
 1014d4c:	f7ff ffe9 	bl	1014d22 <z_work_submit_to_queue>
	if (ret > 0) {
 1014d50:	1e04      	subs	r4, r0, #0
 1014d52:	dd09      	ble.n	1014d68 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
 1014d54:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014d58:	f3ef 8011 	mrs	r0, BASEPRI
 1014d5c:	f383 8812 	msr	BASEPRI_MAX, r3
 1014d60:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 1014d64:	f000 f8b0 	bl	1014ec8 <z_reschedule_irqlock>
}
 1014d68:	4620      	mov	r0, r4
 1014d6a:	bd10      	pop	{r4, pc}

01014d6c <k_work_queue_init>:
{
 1014d6c:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
 1014d6e:	22a0      	movs	r2, #160	; 0xa0
 1014d70:	2100      	movs	r1, #0
 1014d72:	f7fd fe4e 	bl	1012a12 <memset>
}
 1014d76:	bd08      	pop	{r3, pc}

01014d78 <k_work_init_delayable>:
{
 1014d78:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
 1014d7a:	2230      	movs	r2, #48	; 0x30
{
 1014d7c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 1014d7e:	2100      	movs	r1, #0
{
 1014d80:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
 1014d82:	f7fd fe46 	bl	1012a12 <memset>
 1014d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 1014d8a:	6065      	str	r5, [r4, #4]
 1014d8c:	60e3      	str	r3, [r4, #12]
}
 1014d8e:	bd38      	pop	{r3, r4, r5, pc}

01014d90 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 1014d90:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 1014d94:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 1014d96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 1014d98:	2300      	movs	r3, #0
	node->prev = NULL;
 1014d9a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 1014d9e:	4770      	bx	lr

01014da0 <unpend_thread_no_timeout>:
{
 1014da0:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 1014da2:	f7ff fff5 	bl	1014d90 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 1014da6:	7b43      	ldrb	r3, [r0, #13]
 1014da8:	f023 0302 	bic.w	r3, r3, #2
 1014dac:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 1014dae:	2300      	movs	r3, #0
 1014db0:	6083      	str	r3, [r0, #8]
}
 1014db2:	bd08      	pop	{r3, pc}

01014db4 <z_thread_timeout>:
{
 1014db4:	4601      	mov	r1, r0
 1014db6:	b510      	push	{r4, lr}
 1014db8:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014dbc:	f3ef 8411 	mrs	r4, BASEPRI
 1014dc0:	f383 8812 	msr	BASEPRI_MAX, r3
 1014dc4:	f3bf 8f6f 	isb	sy
		if (!killed) {
 1014dc8:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 1014dcc:	f013 0f28 	tst.w	r3, #40	; 0x28
 1014dd0:	d10d      	bne.n	1014dee <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 1014dd2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 1014dd6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 1014dd8:	b10b      	cbz	r3, 1014dde <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 1014dda:	f7ff ffe1 	bl	1014da0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 1014dde:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 1014de2:	f023 0314 	bic.w	r3, r3, #20
 1014de6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 1014dea:	f7fb fe6b 	bl	1010ac4 <ready_thread>
	__asm__ volatile(
 1014dee:	f384 8811 	msr	BASEPRI, r4
 1014df2:	f3bf 8f6f 	isb	sy
}
 1014df6:	bd10      	pop	{r4, pc}

01014df8 <add_to_waitq_locked>:
{
 1014df8:	b538      	push	{r3, r4, r5, lr}
 1014dfa:	4604      	mov	r4, r0
 1014dfc:	460d      	mov	r5, r1
	unready_thread(thread);
 1014dfe:	f7fb fe95 	bl	1010b2c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 1014e02:	7b63      	ldrb	r3, [r4, #13]
 1014e04:	f043 0302 	orr.w	r3, r3, #2
 1014e08:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 1014e0a:	b1e5      	cbz	r5, 1014e46 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 1014e0c:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 1014e0e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1014e10:	429d      	cmp	r5, r3
 1014e12:	d109      	bne.n	1014e28 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 1014e14:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 1014e16:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 1014e1a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 1014e1c:	606c      	str	r4, [r5, #4]
}
 1014e1e:	e012      	b.n	1014e46 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 1014e20:	686a      	ldr	r2, [r5, #4]
 1014e22:	4293      	cmp	r3, r2
 1014e24:	d0f6      	beq.n	1014e14 <add_to_waitq_locked+0x1c>
 1014e26:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1014e28:	2b00      	cmp	r3, #0
 1014e2a:	d0f3      	beq.n	1014e14 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 1014e2c:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 1014e30:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 1014e34:	428a      	cmp	r2, r1
 1014e36:	d0f3      	beq.n	1014e20 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 1014e38:	4291      	cmp	r1, r2
 1014e3a:	ddf1      	ble.n	1014e20 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 1014e3c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 1014e3e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 1014e42:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 1014e44:	605c      	str	r4, [r3, #4]
}
 1014e46:	bd38      	pop	{r3, r4, r5, pc}

01014e48 <z_ready_thread>:
{
 1014e48:	b510      	push	{r4, lr}
	__asm__ volatile(
 1014e4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014e4e:	f3ef 8411 	mrs	r4, BASEPRI
 1014e52:	f383 8812 	msr	BASEPRI_MAX, r3
 1014e56:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 1014e5a:	f7fb fe33 	bl	1010ac4 <ready_thread>
	__asm__ volatile(
 1014e5e:	f384 8811 	msr	BASEPRI, r4
 1014e62:	f3bf 8f6f 	isb	sy
}
 1014e66:	bd10      	pop	{r4, pc}

01014e68 <z_unpend_first_thread>:
{
 1014e68:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 1014e6a:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014e6e:	f3ef 8511 	mrs	r5, BASEPRI
 1014e72:	f383 8812 	msr	BASEPRI_MAX, r3
 1014e76:	f3bf 8f6f 	isb	sy
	return list->head == list;
 1014e7a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1014e7c:	42a0      	cmp	r0, r4
 1014e7e:	d00d      	beq.n	1014e9c <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 1014e80:	b134      	cbz	r4, 1014e90 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 1014e82:	4620      	mov	r0, r4
 1014e84:	f7ff ff8c 	bl	1014da0 <unpend_thread_no_timeout>
 1014e88:	f104 0018 	add.w	r0, r4, #24
 1014e8c:	f000 f865 	bl	1014f5a <z_abort_timeout>
	__asm__ volatile(
 1014e90:	f385 8811 	msr	BASEPRI, r5
 1014e94:	f3bf 8f6f 	isb	sy
}
 1014e98:	4620      	mov	r0, r4
 1014e9a:	bd38      	pop	{r3, r4, r5, pc}
 1014e9c:	2400      	movs	r4, #0
 1014e9e:	e7f7      	b.n	1014e90 <z_unpend_first_thread+0x28>

01014ea0 <z_unpend_thread>:
{
 1014ea0:	b510      	push	{r4, lr}
	__asm__ volatile(
 1014ea2:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014ea6:	f3ef 8411 	mrs	r4, BASEPRI
 1014eaa:	f383 8812 	msr	BASEPRI_MAX, r3
 1014eae:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 1014eb2:	f7ff ff75 	bl	1014da0 <unpend_thread_no_timeout>
	__asm__ volatile(
 1014eb6:	f384 8811 	msr	BASEPRI, r4
 1014eba:	f3bf 8f6f 	isb	sy
}
 1014ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1014ec2:	3018      	adds	r0, #24
 1014ec4:	f000 b849 	b.w	1014f5a <z_abort_timeout>

01014ec8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 1014ec8:	4603      	mov	r3, r0
 1014eca:	b920      	cbnz	r0, 1014ed6 <z_reschedule_irqlock+0xe>
 1014ecc:	f3ef 8205 	mrs	r2, IPSR
 1014ed0:	b90a      	cbnz	r2, 1014ed6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 1014ed2:	f7f1 bd9f 	b.w	1006a14 <arch_swap>
 1014ed6:	f383 8811 	msr	BASEPRI, r3
 1014eda:	f3bf 8f6f 	isb	sy
}
 1014ede:	4770      	bx	lr

01014ee0 <z_reschedule_unlocked>:
	__asm__ volatile(
 1014ee0:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014ee4:	f3ef 8011 	mrs	r0, BASEPRI
 1014ee8:	f383 8812 	msr	BASEPRI_MAX, r3
 1014eec:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 1014ef0:	f7ff bfea 	b.w	1014ec8 <z_reschedule_irqlock>

01014ef4 <z_unpend_all>:
{
 1014ef4:	b538      	push	{r3, r4, r5, lr}
 1014ef6:	4605      	mov	r5, r0
	int need_sched = 0;
 1014ef8:	2000      	movs	r0, #0
	return list->head == list;
 1014efa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1014efc:	42a5      	cmp	r5, r4
 1014efe:	d000      	beq.n	1014f02 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 1014f00:	b904      	cbnz	r4, 1014f04 <z_unpend_all+0x10>
}
 1014f02:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
 1014f04:	4620      	mov	r0, r4
 1014f06:	f7ff ffcb 	bl	1014ea0 <z_unpend_thread>
		z_ready_thread(thread);
 1014f0a:	4620      	mov	r0, r4
 1014f0c:	f7ff ff9c 	bl	1014e48 <z_ready_thread>
		need_sched = 1;
 1014f10:	2001      	movs	r0, #1
 1014f12:	e7f2      	b.n	1014efa <z_unpend_all+0x6>

01014f14 <z_sched_wake>:
{
 1014f14:	b538      	push	{r3, r4, r5, lr}
 1014f16:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014f1a:	f3ef 8511 	mrs	r5, BASEPRI
 1014f1e:	f383 8812 	msr	BASEPRI_MAX, r3
 1014f22:	f3bf 8f6f 	isb	sy
	return list->head == list;
 1014f26:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1014f28:	42a0      	cmp	r0, r4
 1014f2a:	d012      	beq.n	1014f52 <z_sched_wake+0x3e>
		if (thread != NULL) {
 1014f2c:	b19c      	cbz	r4, 1014f56 <z_sched_wake+0x42>
 1014f2e:	67a1      	str	r1, [r4, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 1014f30:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
 1014f32:	4620      	mov	r0, r4
 1014f34:	f7ff ff34 	bl	1014da0 <unpend_thread_no_timeout>
 1014f38:	f104 0018 	add.w	r0, r4, #24
 1014f3c:	f000 f80d 	bl	1014f5a <z_abort_timeout>
			ready_thread(thread);
 1014f40:	4620      	mov	r0, r4
 1014f42:	f7fb fdbf 	bl	1010ac4 <ready_thread>
			ret = true;
 1014f46:	2001      	movs	r0, #1
	__asm__ volatile(
 1014f48:	f385 8811 	msr	BASEPRI, r5
 1014f4c:	f3bf 8f6f 	isb	sy
}
 1014f50:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 1014f52:	2000      	movs	r0, #0
 1014f54:	e7f8      	b.n	1014f48 <z_sched_wake+0x34>
 1014f56:	4620      	mov	r0, r4
 1014f58:	e7f6      	b.n	1014f48 <z_sched_wake+0x34>

01014f5a <z_abort_timeout>:
{
 1014f5a:	b510      	push	{r4, lr}
	__asm__ volatile(
 1014f5c:	f04f 0240 	mov.w	r2, #64	; 0x40
 1014f60:	f3ef 8411 	mrs	r4, BASEPRI
 1014f64:	f382 8812 	msr	BASEPRI_MAX, r2
 1014f68:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 1014f6c:	6803      	ldr	r3, [r0, #0]
 1014f6e:	b13b      	cbz	r3, 1014f80 <z_abort_timeout+0x26>
			remove_timeout(to);
 1014f70:	f7fc f8e2 	bl	1011138 <remove_timeout>
			ret = 0;
 1014f74:	2000      	movs	r0, #0
	__asm__ volatile(
 1014f76:	f384 8811 	msr	BASEPRI, r4
 1014f7a:	f3bf 8f6f 	isb	sy
}
 1014f7e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 1014f80:	f06f 0015 	mvn.w	r0, #21
 1014f84:	e7f7      	b.n	1014f76 <z_abort_timeout+0x1c>

01014f86 <z_set_timeout_expiry>:
{
 1014f86:	b570      	push	{r4, r5, r6, lr}
 1014f88:	4604      	mov	r4, r0
 1014f8a:	460d      	mov	r5, r1
	__asm__ volatile(
 1014f8c:	f04f 0340 	mov.w	r3, #64	; 0x40
 1014f90:	f3ef 8611 	mrs	r6, BASEPRI
 1014f94:	f383 8812 	msr	BASEPRI_MAX, r3
 1014f98:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 1014f9c:	f7fc f8a4 	bl	10110e8 <next_timeout>
			      || (ticks <= next_to);
 1014fa0:	2801      	cmp	r0, #1
 1014fa2:	dd07      	ble.n	1014fb4 <z_set_timeout_expiry+0x2e>
 1014fa4:	42a0      	cmp	r0, r4
 1014fa6:	db05      	blt.n	1014fb4 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 1014fa8:	42a0      	cmp	r0, r4
 1014faa:	4629      	mov	r1, r5
 1014fac:	bfa8      	it	ge
 1014fae:	4620      	movge	r0, r4
 1014fb0:	f7f2 ff24 	bl	1007dfc <sys_clock_set_timeout>
	__asm__ volatile(
 1014fb4:	f386 8811 	msr	BASEPRI, r6
 1014fb8:	f3bf 8f6f 	isb	sy
}
 1014fbc:	bd70      	pop	{r4, r5, r6, pc}

01014fbe <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 1014fbe:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 1014fc0:	f7fc f9b0 	bl	1011324 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 1014fc4:	bd08      	pop	{r3, pc}

01014fc6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1014fc6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 1014fca:	bf08      	it	eq
 1014fcc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 1014fd0:	b538      	push	{r3, r4, r5, lr}
 1014fd2:	460c      	mov	r4, r1
 1014fd4:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1014fd6:	d014      	beq.n	1015002 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 1014fd8:	4308      	orrs	r0, r1
 1014fda:	d103      	bne.n	1014fe4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 1014fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 1014fe0:	f7fc b9a0 	b.w	1011324 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 1014fe4:	f06f 0001 	mvn.w	r0, #1
 1014fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1014fec:	1b40      	subs	r0, r0, r5
 1014fee:	eb63 0101 	sbc.w	r1, r3, r1
 1014ff2:	2900      	cmp	r1, #0
 1014ff4:	da04      	bge.n	1015000 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
 1014ff6:	f7fc f995 	bl	1011324 <sys_clock_tick_get>
 1014ffa:	1940      	adds	r0, r0, r5
 1014ffc:	eb41 0104 	adc.w	r1, r1, r4
}
 1015000:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
 1015002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1015006:	4601      	mov	r1, r0
 1015008:	e7fa      	b.n	1015000 <sys_clock_timeout_end_calc+0x3a>

0101500a <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 101500a:	3204      	adds	r2, #4
{
 101500c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 101500e:	4604      	mov	r4, r0
 1015010:	d208      	bcs.n	1015024 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 1015012:	2600      	movs	r6, #0
 1015014:	2700      	movs	r7, #0
 1015016:	f041 0104 	orr.w	r1, r1, #4
 101501a:	e9cd 6700 	strd	r6, r7, [sp]
 101501e:	f000 f81d 	bl	101505c <k_heap_aligned_alloc>
	if (mem == NULL) {
 1015022:	b910      	cbnz	r0, 101502a <z_heap_aligned_alloc+0x20>
		return NULL;
 1015024:	2000      	movs	r0, #0
}
 1015026:	b002      	add	sp, #8
 1015028:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
 101502a:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
 101502e:	e7fa      	b.n	1015026 <z_heap_aligned_alloc+0x1c>

01015030 <k_free>:
	if (ptr != NULL) {
 1015030:	b120      	cbz	r0, 101503c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
 1015032:	1f01      	subs	r1, r0, #4
 1015034:	f850 0c04 	ldr.w	r0, [r0, #-4]
 1015038:	f000 b85d 	b.w	10150f6 <k_heap_free>
}
 101503c:	4770      	bx	lr

0101503e <k_malloc>:
{
 101503e:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
 1015040:	2004      	movs	r0, #4
 1015042:	f7fc b989 	b.w	1011358 <k_aligned_alloc>

01015046 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 1015046:	bf00      	nop
	arch_nop();

#ifdef CONFIG_CPP_MAIN
	return 0;
#endif
}
 1015048:	4770      	bx	lr

0101504a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 101504a:	4770      	bx	lr

0101504c <k_heap_init>:
{
 101504c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
 101504e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 1015052:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 1015056:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 1015058:	f7fd b878 	b.w	101214c <sys_heap_init>

0101505c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 101505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1015060:	b085      	sub	sp, #20
 1015062:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
 1015066:	4607      	mov	r7, r0
 1015068:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 101506a:	4650      	mov	r0, sl
 101506c:	4621      	mov	r1, r4
{
 101506e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 1015070:	f7ff ffa9 	bl	1014fc6 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
 1015074:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 1015078:	bf08      	it	eq
 101507a:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 101507e:	4605      	mov	r5, r0
 1015080:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
 1015082:	bf04      	itt	eq
 1015084:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
 1015088:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
 101508c:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
 1015090:	f04f 0340 	mov.w	r3, #64	; 0x40
 1015094:	f3ef 8411 	mrs	r4, BASEPRI
 1015098:	f383 8812 	msr	BASEPRI_MAX, r3
 101509c:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 10150a0:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 10150a4:	464a      	mov	r2, r9
 10150a6:	4641      	mov	r1, r8
 10150a8:	4638      	mov	r0, r7
 10150aa:	f7fc ffe8 	bl	101207e <sys_heap_aligned_alloc>
 10150ae:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
 10150b0:	f7fc f938 	bl	1011324 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 10150b4:	9b03      	ldr	r3, [sp, #12]
 10150b6:	b13b      	cbz	r3, 10150c8 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
 10150b8:	f384 8811 	msr	BASEPRI, r4
 10150bc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 10150c0:	4618      	mov	r0, r3
 10150c2:	b005      	add	sp, #20
 10150c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
 10150c8:	1a28      	subs	r0, r5, r0
 10150ca:	eb66 0101 	sbc.w	r1, r6, r1
 10150ce:	2801      	cmp	r0, #1
 10150d0:	f171 0200 	sbcs.w	r2, r1, #0
 10150d4:	dbf0      	blt.n	10150b8 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 10150d6:	e9cd 0100 	strd	r0, r1, [sp]
 10150da:	465a      	mov	r2, fp
 10150dc:	4621      	mov	r1, r4
 10150de:	4650      	mov	r0, sl
 10150e0:	f7fb fdc8 	bl	1010c74 <z_pend_curr>
	__asm__ volatile(
 10150e4:	f04f 0340 	mov.w	r3, #64	; 0x40
 10150e8:	f3ef 8411 	mrs	r4, BASEPRI
 10150ec:	f383 8812 	msr	BASEPRI_MAX, r3
 10150f0:	f3bf 8f6f 	isb	sy
	return k;
 10150f4:	e7d6      	b.n	10150a4 <k_heap_aligned_alloc+0x48>

010150f6 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
 10150f6:	b538      	push	{r3, r4, r5, lr}
 10150f8:	4604      	mov	r4, r0
 10150fa:	f04f 0340 	mov.w	r3, #64	; 0x40
 10150fe:	f3ef 8511 	mrs	r5, BASEPRI
 1015102:	f383 8812 	msr	BASEPRI_MAX, r3
 1015106:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
 101510a:	f7fc ff80 	bl	101200e <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
 101510e:	f104 000c 	add.w	r0, r4, #12
 1015112:	f7ff feef 	bl	1014ef4 <z_unpend_all>
 1015116:	b130      	cbz	r0, 1015126 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
 1015118:	4629      	mov	r1, r5
 101511a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 101511e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
 1015122:	f7fb be0b 	b.w	1010d3c <z_reschedule>
	__asm__ volatile(
 1015126:	f385 8811 	msr	BASEPRI, r5
 101512a:	f3bf 8f6f 	isb	sy
}
 101512e:	bd38      	pop	{r3, r4, r5, pc}

01015130 <nrf_802154_sl_ant_div_antenna_set>:
 1015130:	2000      	movs	r0, #0
 1015132:	4770      	bx	lr

01015134 <nrf_802154_sl_ant_div_rx_frame_started_notify>:
 1015134:	2000      	movs	r0, #0
 1015136:	4770      	bx	lr

01015138 <nrf_802154_sl_ant_div_rx_frame_received_notify>:
 1015138:	4770      	bx	lr

0101513a <nrf_802154_sl_ant_div_rx_aborted_notify>:
 101513a:	4770      	bx	lr

0101513c <nrf_802154_sl_ant_div_rx_preamble_timeout_notify>:
 101513c:	4770      	bx	lr

0101513e <nrf_802154_sl_ant_div_rx_preamble_detected_notify>:
 101513e:	4770      	bx	lr

01015140 <nrf_802154_sl_ant_div_energy_detection_requested_notify>:
 1015140:	4770      	bx	lr

01015142 <nrf_802154_sl_ant_div_energy_detection_aborted_notify>:
 1015142:	4770      	bx	lr

01015144 <nrf_802154_sl_ant_div_energy_detection_finished_notify>:
 1015144:	2000      	movs	r0, #0
 1015146:	4770      	bx	lr

01015148 <nrf_802154_sl_ant_div_rx_started_notify>:
 1015148:	4770      	bx	lr

0101514a <nrf_802154_sl_ant_div_txack_notify>:
 101514a:	4770      	bx	lr

0101514c <nrf_802154_sl_ant_div_cfg_mode_get>:
 101514c:	2000      	movs	r0, #0
 101514e:	4770      	bx	lr

01015150 <nrf_802154_sl_ant_div_cfg_antenna_get>:
 1015150:	2002      	movs	r0, #2
 1015152:	4770      	bx	lr

01015154 <nrf_802154_sl_capabilities_get>:
 1015154:	2037      	movs	r0, #55	; 0x37
 1015156:	4770      	bx	lr

01015158 <nrf_802154_sl_log_init>:
 1015158:	4770      	bx	lr

0101515a <nrf_802154_sl_atomic_cas_u8>:
 101515a:	b510      	push	{r4, lr}
 101515c:	f3bf 8f5f 	dmb	sy
 1015160:	e8d0 3f4f 	ldrexb	r3, [r0]
 1015164:	780c      	ldrb	r4, [r1, #0]
 1015166:	b2db      	uxtb	r3, r3
 1015168:	429c      	cmp	r4, r3
 101516a:	d004      	beq.n	1015176 <nrf_802154_sl_atomic_cas_u8+0x1c>
 101516c:	700b      	strb	r3, [r1, #0]
 101516e:	f3bf 8f2f 	clrex
 1015172:	2000      	movs	r0, #0
 1015174:	bd10      	pop	{r4, pc}
 1015176:	e8c0 2f43 	strexb	r3, r2, [r0]
 101517a:	2b00      	cmp	r3, #0
 101517c:	d1f0      	bne.n	1015160 <nrf_802154_sl_atomic_cas_u8+0x6>
 101517e:	f3bf 8f5f 	dmb	sy
 1015182:	2001      	movs	r0, #1
 1015184:	e7f6      	b.n	1015174 <nrf_802154_sl_atomic_cas_u8+0x1a>

01015186 <dly_ts_from_pool_alloc>:
 1015186:	2348      	movs	r3, #72	; 0x48
 1015188:	b573      	push	{r0, r1, r4, r5, r6, lr}
 101518a:	4604      	mov	r4, r0
 101518c:	2600      	movs	r6, #0
 101518e:	fb03 0501 	mla	r5, r3, r1, r0
 1015192:	42ac      	cmp	r4, r5
 1015194:	d101      	bne.n	101519a <dly_ts_from_pool_alloc+0x14>
 1015196:	2000      	movs	r0, #0
 1015198:	e00c      	b.n	10151b4 <dly_ts_from_pool_alloc+0x2e>
 101519a:	2201      	movs	r2, #1
 101519c:	f10d 0107 	add.w	r1, sp, #7
 10151a0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 10151a4:	f88d 6007 	strb.w	r6, [sp, #7]
 10151a8:	f7ff ffd7 	bl	101515a <nrf_802154_sl_atomic_cas_u8>
 10151ac:	f104 0348 	add.w	r3, r4, #72	; 0x48
 10151b0:	b110      	cbz	r0, 10151b8 <dly_ts_from_pool_alloc+0x32>
 10151b2:	4620      	mov	r0, r4
 10151b4:	b002      	add	sp, #8
 10151b6:	bd70      	pop	{r4, r5, r6, pc}
 10151b8:	461c      	mov	r4, r3
 10151ba:	e7ea      	b.n	1015192 <dly_ts_from_pool_alloc+0xc>

010151bc <dly_ts_release>:
 10151bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 10151be:	f100 0540 	add.w	r5, r0, #64	; 0x40
 10151c2:	4604      	mov	r4, r0
 10151c4:	f88d 1007 	strb.w	r1, [sp, #7]
 10151c8:	2203      	movs	r2, #3
 10151ca:	4628      	mov	r0, r5
 10151cc:	f10d 0107 	add.w	r1, sp, #7
 10151d0:	f7ff ffc3 	bl	101515a <nrf_802154_sl_atomic_cas_u8>
 10151d4:	b158      	cbz	r0, 10151ee <dly_ts_release+0x32>
 10151d6:	2300      	movs	r3, #0
 10151d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 10151dc:	f88d 2007 	strb.w	r2, [sp, #7]
 10151e0:	63a0      	str	r0, [r4, #56]	; 0x38
 10151e2:	461a      	mov	r2, r3
 10151e4:	4628      	mov	r0, r5
 10151e6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 10151ea:	f7ff ffb6 	bl	101515a <nrf_802154_sl_atomic_cas_u8>
 10151ee:	b003      	add	sp, #12
 10151f0:	bd30      	pop	{r4, r5, pc}

010151f2 <delayed_timeslot_start>:
 10151f2:	2301      	movs	r3, #1
 10151f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 10151f6:	6984      	ldr	r4, [r0, #24]
 10151f8:	2202      	movs	r2, #2
 10151fa:	f10d 0107 	add.w	r1, sp, #7
 10151fe:	f104 0040 	add.w	r0, r4, #64	; 0x40
 1015202:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 1015204:	f88d 3007 	strb.w	r3, [sp, #7]
 1015208:	f7ff ffa7 	bl	101515a <nrf_802154_sl_atomic_cas_u8>
 101520c:	b128      	cbz	r0, 101521a <delayed_timeslot_start+0x28>
 101520e:	4628      	mov	r0, r5
 1015210:	6b63      	ldr	r3, [r4, #52]	; 0x34
 1015212:	b003      	add	sp, #12
 1015214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 1015218:	4718      	bx	r3
 101521a:	b003      	add	sp, #12
 101521c:	bd30      	pop	{r4, r5, pc}

0101521e <nrf_802154_rsch_timeslot_request>:
 101521e:	f7f0 b994 	b.w	100554a <nrf_raal_timeslot_request>

01015222 <nrf_802154_rsch_delayed_timeslot_cancel>:
 1015222:	b538      	push	{r3, r4, r5, lr}
 1015224:	460d      	mov	r5, r1
 1015226:	f7fc f8dd 	bl	10113e4 <dly_ts_by_id_search>
 101522a:	4604      	mov	r4, r0
 101522c:	b17d      	cbz	r5, 101524e <nrf_802154_rsch_delayed_timeslot_cancel+0x2c>
 101522e:	b910      	cbnz	r0, 1015236 <nrf_802154_rsch_delayed_timeslot_cancel+0x14>
 1015230:	2400      	movs	r4, #0
 1015232:	4620      	mov	r0, r4
 1015234:	bd38      	pop	{r3, r4, r5, pc}
 1015236:	f7fc fb75 	bl	1011924 <nrf_802154_sl_timer_remove>
 101523a:	2102      	movs	r1, #2
 101523c:	4620      	mov	r0, r4
 101523e:	f7ff ffbd 	bl	10151bc <dly_ts_release>
 1015242:	4604      	mov	r4, r0
 1015244:	f7fc f8de 	bl	1011404 <all_prec_update>
 1015248:	f7fc f9b8 	bl	10115bc <notify_core>
 101524c:	e7f1      	b.n	1015232 <nrf_802154_rsch_delayed_timeslot_cancel+0x10>
 101524e:	2800      	cmp	r0, #0
 1015250:	d0ee      	beq.n	1015230 <nrf_802154_rsch_delayed_timeslot_cancel+0xe>
 1015252:	f7fc fb67 	bl	1011924 <nrf_802154_sl_timer_remove>
 1015256:	2800      	cmp	r0, #0
 1015258:	d1ea      	bne.n	1015230 <nrf_802154_rsch_delayed_timeslot_cancel+0xe>
 101525a:	2101      	movs	r1, #1
 101525c:	e7ee      	b.n	101523c <nrf_802154_rsch_delayed_timeslot_cancel+0x1a>

0101525e <nrf_802154_rsch_delayed_timeslot_priority_update>:
 101525e:	b510      	push	{r4, lr}
 1015260:	460c      	mov	r4, r1
 1015262:	f7fc f8bf 	bl	10113e4 <dly_ts_by_id_search>
 1015266:	4603      	mov	r3, r0
 1015268:	b128      	cbz	r0, 1015276 <nrf_802154_rsch_delayed_timeslot_priority_update+0x18>
 101526a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 101526e:	b110      	cbz	r0, 1015276 <nrf_802154_rsch_delayed_timeslot_priority_update+0x18>
 1015270:	2001      	movs	r0, #1
 1015272:	f883 4030 	strb.w	r4, [r3, #48]	; 0x30
 1015276:	bd10      	pop	{r4, pc}

01015278 <nrf_802154_rsch_delayed_timeslot_time_to_start_get>:
 1015278:	b570      	push	{r4, r5, r6, lr}
 101527a:	460e      	mov	r6, r1
 101527c:	f7fc f8b2 	bl	10113e4 <dly_ts_by_id_search>
 1015280:	b198      	cbz	r0, 10152aa <nrf_802154_rsch_delayed_timeslot_time_to_start_get+0x32>
 1015282:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 1015286:	b1a3      	cbz	r3, 10152b2 <nrf_802154_rsch_delayed_timeslot_time_to_start_get+0x3a>
 1015288:	e9d0 450a 	ldrd	r4, r5, [r0, #40]	; 0x28
 101528c:	f000 f834 	bl	10152f8 <nrf_802154_sl_timer_current_time_get>
 1015290:	42a0      	cmp	r0, r4
 1015292:	eb71 0305 	sbcs.w	r3, r1, r5
 1015296:	d209      	bcs.n	10152ac <nrf_802154_rsch_delayed_timeslot_time_to_start_get+0x34>
 1015298:	1a20      	subs	r0, r4, r0
 101529a:	eb65 0101 	sbc.w	r1, r5, r1
 101529e:	e9c6 0100 	strd	r0, r1, [r6]
 10152a2:	4308      	orrs	r0, r1
 10152a4:	bf14      	ite	ne
 10152a6:	2001      	movne	r0, #1
 10152a8:	2000      	moveq	r0, #0
 10152aa:	bd70      	pop	{r4, r5, r6, pc}
 10152ac:	2000      	movs	r0, #0
 10152ae:	4601      	mov	r1, r0
 10152b0:	e7f5      	b.n	101529e <nrf_802154_rsch_delayed_timeslot_time_to_start_get+0x26>
 10152b2:	4618      	mov	r0, r3
 10152b4:	e7f9      	b.n	10152aa <nrf_802154_rsch_delayed_timeslot_time_to_start_get+0x32>

010152b6 <nrf_802154_rsch_timeslot_us_left_get>:
 10152b6:	f7ee bc5b 	b.w	1003b70 <nrf_raal_timeslot_us_left_get>

010152ba <nrf_802154_rsch_crit_sect_prio_request>:
 10152ba:	f7fc b9c3 	b.w	1011644 <nrf_802154_rsch_continuous_mode_priority_set>

010152be <cmp_trigger_time>:
 10152be:	b510      	push	{r4, lr}
 10152c0:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
 10152c4:	e9d1 0304 	ldrd	r0, r3, [r1, #16]
 10152c8:	4284      	cmp	r4, r0
 10152ca:	eb72 0103 	sbcs.w	r1, r2, r3
 10152ce:	d305      	bcc.n	10152dc <cmp_trigger_time+0x1e>
 10152d0:	42a0      	cmp	r0, r4
 10152d2:	4193      	sbcs	r3, r2
 10152d4:	bf34      	ite	cc
 10152d6:	2001      	movcc	r0, #1
 10152d8:	2000      	movcs	r0, #0
 10152da:	bd10      	pop	{r4, pc}
 10152dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 10152e0:	e7fb      	b.n	10152da <cmp_trigger_time+0x1c>

010152e2 <check_timed_out>:
 10152e2:	b510      	push	{r4, lr}
 10152e4:	e9d0 4200 	ldrd	r4, r2, [r0]
 10152e8:	e9d1 0300 	ldrd	r0, r3, [r1]
 10152ec:	42a0      	cmp	r0, r4
 10152ee:	4193      	sbcs	r3, r2
 10152f0:	bf2c      	ite	cs
 10152f2:	2001      	movcs	r0, #1
 10152f4:	2000      	movcc	r0, #0
 10152f6:	bd10      	pop	{r4, pc}

010152f8 <nrf_802154_sl_timer_current_time_get>:
 10152f8:	b508      	push	{r3, lr}
 10152fa:	f7fd fda9 	bl	1012e50 <nrf_802154_platform_sl_lptimer_current_lpticks_get>
 10152fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1015302:	f7fd bda9 	b.w	1012e58 <nrf_802154_platform_sl_lptimer_lpticks_to_us_convert>

01015306 <nrf_802154_sl_timer_init>:
 1015306:	4770      	bx	lr

01015308 <nrf_802154_wifi_coex_is_enabled>:
 1015308:	2001      	movs	r0, #1
 101530a:	4770      	bx	lr

0101530c <nrf_802154_wifi_coex_on_raal_timeslot_ended>:
 101530c:	f7ee bade 	b.w	10038cc <mpsl_cx_release>

01015310 <nrf_802154_sl_atomic_list_init>:
 1015310:	2300      	movs	r3, #0
 1015312:	6003      	str	r3, [r0, #0]
 1015314:	7103      	strb	r3, [r0, #4]
 1015316:	4770      	bx	lr

01015318 <nrf_802154_sl_atomic_list_insert_ordered>:
 1015318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101531c:	4604      	mov	r4, r0
 101531e:	460d      	mov	r5, r1
 1015320:	4617      	mov	r7, r2
 1015322:	4699      	mov	r9, r3
 1015324:	f3bf 8f5f 	dmb	sy
 1015328:	eb01 0b02 	add.w	fp, r1, r2
 101532c:	46a0      	mov	r8, r4
 101532e:	f894 a004 	ldrb.w	sl, [r4, #4]
 1015332:	fa5f fa8a 	uxtb.w	sl, sl
 1015336:	e858 6f00 	ldrex	r6, [r8]
 101533a:	b13e      	cbz	r6, 101534c <nrf_802154_sl_atomic_list_insert_ordered+0x34>
 101533c:	4631      	mov	r1, r6
 101533e:	4628      	mov	r0, r5
 1015340:	47c8      	blx	r9
 1015342:	2800      	cmp	r0, #0
 1015344:	db02      	blt.n	101534c <nrf_802154_sl_atomic_list_insert_ordered+0x34>
 1015346:	eb06 0807 	add.w	r8, r6, r7
 101534a:	e7f4      	b.n	1015336 <nrf_802154_sl_atomic_list_insert_ordered+0x1e>
 101534c:	7923      	ldrb	r3, [r4, #4]
 101534e:	4553      	cmp	r3, sl
 1015350:	d1ec      	bne.n	101532c <nrf_802154_sl_atomic_list_insert_ordered+0x14>
 1015352:	f8cb 6000 	str.w	r6, [fp]
 1015356:	e848 5300 	strex	r3, r5, [r8]
 101535a:	2b00      	cmp	r3, #0
 101535c:	d1e6      	bne.n	101532c <nrf_802154_sl_atomic_list_insert_ordered+0x14>
 101535e:	1d20      	adds	r0, r4, #4
 1015360:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1015364:	f000 b865 	b.w	1015432 <nrf_802154_sl_atomic_uint8_inc>

01015368 <nrf_802154_sl_atomic_list_remove>:
 1015368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 101536a:	f3bf 8f5f 	dmb	sy
 101536e:	4605      	mov	r5, r0
 1015370:	7906      	ldrb	r6, [r0, #4]
 1015372:	b2f6      	uxtb	r6, r6
 1015374:	e855 3f00 	ldrex	r3, [r5]
 1015378:	b1a3      	cbz	r3, 10153a4 <nrf_802154_sl_atomic_list_remove+0x3c>
 101537a:	428b      	cmp	r3, r1
 101537c:	eb03 0402 	add.w	r4, r3, r2
 1015380:	d10e      	bne.n	10153a0 <nrf_802154_sl_atomic_list_remove+0x38>
 1015382:	2401      	movs	r4, #1
 1015384:	589b      	ldr	r3, [r3, r2]
 1015386:	7907      	ldrb	r7, [r0, #4]
 1015388:	42b7      	cmp	r7, r6
 101538a:	d1f0      	bne.n	101536e <nrf_802154_sl_atomic_list_remove+0x6>
 101538c:	e845 3600 	strex	r6, r3, [r5]
 1015390:	2e00      	cmp	r6, #0
 1015392:	d1ec      	bne.n	101536e <nrf_802154_sl_atomic_list_remove+0x6>
 1015394:	b114      	cbz	r4, 101539c <nrf_802154_sl_atomic_list_remove+0x34>
 1015396:	3004      	adds	r0, #4
 1015398:	f000 f84b 	bl	1015432 <nrf_802154_sl_atomic_uint8_inc>
 101539c:	4620      	mov	r0, r4
 101539e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10153a0:	4625      	mov	r5, r4
 10153a2:	e7e7      	b.n	1015374 <nrf_802154_sl_atomic_list_remove+0xc>
 10153a4:	461c      	mov	r4, r3
 10153a6:	e7ee      	b.n	1015386 <nrf_802154_sl_atomic_list_remove+0x1e>

010153a8 <nrf_802154_sl_atomic_list_remove_head_if_criteria_met>:
 10153a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 10153ac:	4606      	mov	r6, r0
 10153ae:	460f      	mov	r7, r1
 10153b0:	4690      	mov	r8, r2
 10153b2:	4699      	mov	r9, r3
 10153b4:	f3bf 8f5f 	dmb	sy
 10153b8:	e856 5f00 	ldrex	r5, [r6]
 10153bc:	b92d      	cbnz	r5, 10153ca <nrf_802154_sl_atomic_list_remove_head_if_criteria_met+0x22>
 10153be:	f3bf 8f2f 	clrex
 10153c2:	462c      	mov	r4, r5
 10153c4:	4620      	mov	r0, r4
 10153c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 10153ca:	4649      	mov	r1, r9
 10153cc:	4628      	mov	r0, r5
 10153ce:	47c0      	blx	r8
 10153d0:	4604      	mov	r4, r0
 10153d2:	b110      	cbz	r0, 10153da <nrf_802154_sl_atomic_list_remove_head_if_criteria_met+0x32>
 10153d4:	59eb      	ldr	r3, [r5, r7]
 10153d6:	462c      	mov	r4, r5
 10153d8:	461d      	mov	r5, r3
 10153da:	e846 5300 	strex	r3, r5, [r6]
 10153de:	2b00      	cmp	r3, #0
 10153e0:	d1ea      	bne.n	10153b8 <nrf_802154_sl_atomic_list_remove_head_if_criteria_met+0x10>
 10153e2:	2c00      	cmp	r4, #0
 10153e4:	d0ee      	beq.n	10153c4 <nrf_802154_sl_atomic_list_remove_head_if_criteria_met+0x1c>
 10153e6:	1d30      	adds	r0, r6, #4
 10153e8:	f000 f823 	bl	1015432 <nrf_802154_sl_atomic_uint8_inc>
 10153ec:	e7ea      	b.n	10153c4 <nrf_802154_sl_atomic_list_remove_head_if_criteria_met+0x1c>

010153ee <nrf_802154_sl_atomic_list_head_peek>:
 10153ee:	6800      	ldr	r0, [r0, #0]
 10153f0:	4770      	bx	lr

010153f2 <nrf_802154_sl_mutex_init>:
 10153f2:	2300      	movs	r3, #0
 10153f4:	6003      	str	r3, [r0, #0]
 10153f6:	4770      	bx	lr

010153f8 <nrf_802154_sl_mutex_try_acquire>:
 10153f8:	e850 3f00 	ldrex	r3, [r0]
 10153fc:	1c5a      	adds	r2, r3, #1
 10153fe:	bf18      	it	ne
 1015400:	3301      	addne	r3, #1
 1015402:	e840 3200 	strex	r2, r3, [r0]
 1015406:	2a00      	cmp	r2, #0
 1015408:	d1f6      	bne.n	10153f8 <nrf_802154_sl_mutex_try_acquire>
 101540a:	f3bf 8f5f 	dmb	sy
 101540e:	3b01      	subs	r3, #1
 1015410:	4258      	negs	r0, r3
 1015412:	4158      	adcs	r0, r3
 1015414:	4770      	bx	lr

01015416 <nrf_802154_sl_mutex_release>:
 1015416:	f3bf 8f5f 	dmb	sy
 101541a:	2300      	movs	r3, #0
 101541c:	e850 2f00 	ldrex	r2, [r0]
 1015420:	e840 3100 	strex	r1, r3, [r0]
 1015424:	2900      	cmp	r1, #0
 1015426:	d1f9      	bne.n	101541c <nrf_802154_sl_mutex_release+0x6>
 1015428:	2a01      	cmp	r2, #1
 101542a:	bf94      	ite	ls
 101542c:	2000      	movls	r0, #0
 101542e:	2001      	movhi	r0, #1
 1015430:	4770      	bx	lr

01015432 <nrf_802154_sl_atomic_uint8_inc>:
 1015432:	e8d0 3f4f 	ldrexb	r3, [r0]
 1015436:	3301      	adds	r3, #1
 1015438:	b2db      	uxtb	r3, r3
 101543a:	e8c0 3f42 	strexb	r2, r3, [r0]
 101543e:	2a00      	cmp	r2, #0
 1015440:	d1f7      	bne.n	1015432 <nrf_802154_sl_atomic_uint8_inc>
 1015442:	f3bf 8f5f 	dmb	sy
 1015446:	4770      	bx	lr
